#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ReadySequenceActor

#include "Basic.hpp"

#include "UNION_classes.hpp"
#include "UnionSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UnionLib_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ReadySequenceActor.BP_ReadySequenceActor_C
// 0x0148 (0x03D8 - 0x0290)
class ABP_ReadySequenceActor_C final : public AReadySequenceActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UReadyWindow*                           ReadyWindow;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMenuInputRecieveObject*                MenuInputRecieveObject;                            // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Player_Num;                                        // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  bISReadyFlags;                                     // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UGadgetPlateWindow*>             Gadget_Plate_Windows;                              // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UReadyOption*>                   Ready_Options;                                     // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UClass*>                         ReadyWindows;                                      // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              ReadyEndEvent;                                     // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              CancelInputEvent;                                  // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsGadgetSelected;                                 // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUISceneBase*                      PopupWindow;                                       // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonMenuFooterMenu*                  Footer;                                            // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TArray<class UCharaMachineParamWindow*>       Chara_Machine_Param_Windows;                       // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<int32, bool>                             GadgetParamVisibleMap;                             // 0x0340(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIsInGame;                                         // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSkipGoFlag;                                       // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BackupPresetSettings;                              // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FUserAssistData>                BackupAssistData;                                  // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          WaitFlag;                                          // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UReadyWindow*>                   ReadyWindowArr;                                    // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          InvalidChangeSaveFlag;                             // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BackupSettings();
	void BindInputEvent();
	void CancelEvent(class UObject* Object, const int32& PlayerControllerIndex);
	void CancelReady(int32 PlayerIndex);
	void Check_Permission_Input(int32 PlayerIndex, bool* bISPermission);
	void CheckInputEvent(class UObject* Object, const int32& PlayerControllerIndex);
	void CheckTimeTrialDisableGadget(bool* bIsValid);
	void CreateReadyWidget(bool Optimize);
	void DisableOptionChange();
	void ExecuteUbergraph_BP_ReadySequenceActor(int32 EntryPoint);
	void GadgetSetForMouse(int32 SlotIndex);
	void GadgetSlide(int32 PlayerIndex, bool bIsRight, bool bIsNoSlide);
	void InEvent();
	bool IsAllPlayerChecked();
	void IsDiffSettings(bool* AppDiff, bool* OptionDiff);
	void LastCheckEvent();
	void LeftEvent(class UObject* Object, const int32& PlayerControllerIndex);
	void MouseInputSetUpEvent();
	void OnDecide_PopupWindow(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnGoAnimationFinished();
	void OnSpecialPressedWithPlayerIdEvent_イベント(class UObject* Object, const int32& PlayerControllerIndex);
	void OptionChangeEvent(class UObject* Object, const int32& PlayerControllerIndex);
	void OptionClick();
	void OutEvent();
	void PresetClickA();
	void PresetClickB();
	void PresetClickC();
	void PresetClickD();
	void PresetClickE();
	void ReadyClick();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RegisterMenuEvent();
	void RightEvent(class UObject* Object, const int32& PlayerControllerIndex);
	void SetInputTabVisible(int32 PlayerIndex, bool bIsVisible);
	void SetOption(int32 PlayerIndex);
	void SetReadyFlag(int32 PlayerIndex);
	void SetUpCharacterInformation();
	void SetupCharaInfo();
	void SetupCreateWidget(bool Optimize);
	void SetUpGadgetIconMouseInp_ut(ESlateVisibility InVisibility);
	void SetupGadgetPlateWindow();
	void SetUpOptionEvent();
	void SetupParamWindow(int32 PlayerIndex, bool IsSlide);
	void SetUpParamWindowEvent(class UObject* Object, const int32& PlayerControllerIndex);
	void SetUpPlayersParam(int32 PlayerIndex);
	void SetVisibleCharaMachineParam(int32 PlayerIndex, bool Visible);
	void TimeTrialWarningPopup();
	void UnbindInputEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ReadySequenceActor_C">();
	}
	static class ABP_ReadySequenceActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ReadySequenceActor_C>();
	}
};
static_assert(alignof(ABP_ReadySequenceActor_C) == 0x000008, "Wrong alignment on ABP_ReadySequenceActor_C");
static_assert(sizeof(ABP_ReadySequenceActor_C) == 0x0003D8, "Wrong size on ABP_ReadySequenceActor_C");
static_assert(offsetof(ABP_ReadySequenceActor_C, UberGraphFrame) == 0x000290, "Member 'ABP_ReadySequenceActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_ReadySequenceActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, ReadyWindow) == 0x0002A0, "Member 'ABP_ReadySequenceActor_C::ReadyWindow' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, MenuInputRecieveObject) == 0x0002A8, "Member 'ABP_ReadySequenceActor_C::MenuInputRecieveObject' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, Player_Num) == 0x0002B0, "Member 'ABP_ReadySequenceActor_C::Player_Num' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, bISReadyFlags) == 0x0002B8, "Member 'ABP_ReadySequenceActor_C::bISReadyFlags' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, Gadget_Plate_Windows) == 0x0002C8, "Member 'ABP_ReadySequenceActor_C::Gadget_Plate_Windows' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, Ready_Options) == 0x0002D8, "Member 'ABP_ReadySequenceActor_C::Ready_Options' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, ReadyWindows) == 0x0002E8, "Member 'ABP_ReadySequenceActor_C::ReadyWindows' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, ReadyEndEvent) == 0x0002F8, "Member 'ABP_ReadySequenceActor_C::ReadyEndEvent' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, CancelInputEvent) == 0x000308, "Member 'ABP_ReadySequenceActor_C::CancelInputEvent' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, bIsGadgetSelected) == 0x000318, "Member 'ABP_ReadySequenceActor_C::bIsGadgetSelected' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, PopupWindow) == 0x000320, "Member 'ABP_ReadySequenceActor_C::PopupWindow' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, Footer) == 0x000328, "Member 'ABP_ReadySequenceActor_C::Footer' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, Chara_Machine_Param_Windows) == 0x000330, "Member 'ABP_ReadySequenceActor_C::Chara_Machine_Param_Windows' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, GadgetParamVisibleMap) == 0x000340, "Member 'ABP_ReadySequenceActor_C::GadgetParamVisibleMap' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, bIsInGame) == 0x000390, "Member 'ABP_ReadySequenceActor_C::bIsInGame' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, bSkipGoFlag) == 0x000391, "Member 'ABP_ReadySequenceActor_C::bSkipGoFlag' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, BackupPresetSettings) == 0x000398, "Member 'ABP_ReadySequenceActor_C::BackupPresetSettings' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, BackupAssistData) == 0x0003A8, "Member 'ABP_ReadySequenceActor_C::BackupAssistData' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, WaitFlag) == 0x0003B8, "Member 'ABP_ReadySequenceActor_C::WaitFlag' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, ReadyWindowArr) == 0x0003C0, "Member 'ABP_ReadySequenceActor_C::ReadyWindowArr' has a wrong offset!");
static_assert(offsetof(ABP_ReadySequenceActor_C, InvalidChangeSaveFlag) == 0x0003D0, "Member 'ABP_ReadySequenceActor_C::InvalidChangeSaveFlag' has a wrong offset!");

}

