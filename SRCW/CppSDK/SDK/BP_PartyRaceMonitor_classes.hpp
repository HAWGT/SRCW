#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PartyRaceMonitor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PartyRaceMonitor.BP_PartyRaceMonitor_C
// 0x0050 (0x02E0 - 0x0290)
class ABP_PartyRaceMonitor_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   TextRender;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PresetNameHeader;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ImageBK;                                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ImagePanel;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ImagePanelMat;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HeaderPanelMat;                                    // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PartyRaceMonitor(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetImagePanelTexture(class UTexture* Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PartyRaceMonitor_C">();
	}
	static class ABP_PartyRaceMonitor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PartyRaceMonitor_C>();
	}
};
static_assert(alignof(ABP_PartyRaceMonitor_C) == 0x000008, "Wrong alignment on ABP_PartyRaceMonitor_C");
static_assert(sizeof(ABP_PartyRaceMonitor_C) == 0x0002E0, "Wrong size on ABP_PartyRaceMonitor_C");
static_assert(offsetof(ABP_PartyRaceMonitor_C, UberGraphFrame) == 0x000290, "Member 'ABP_PartyRaceMonitor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PartyRaceMonitor_C, TextRender) == 0x000298, "Member 'ABP_PartyRaceMonitor_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_PartyRaceMonitor_C, PresetNameHeader) == 0x0002A0, "Member 'ABP_PartyRaceMonitor_C::PresetNameHeader' has a wrong offset!");
static_assert(offsetof(ABP_PartyRaceMonitor_C, ImageBK) == 0x0002A8, "Member 'ABP_PartyRaceMonitor_C::ImageBK' has a wrong offset!");
static_assert(offsetof(ABP_PartyRaceMonitor_C, StaticMesh) == 0x0002B0, "Member 'ABP_PartyRaceMonitor_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_PartyRaceMonitor_C, ImagePanel) == 0x0002B8, "Member 'ABP_PartyRaceMonitor_C::ImagePanel' has a wrong offset!");
static_assert(offsetof(ABP_PartyRaceMonitor_C, Scene) == 0x0002C0, "Member 'ABP_PartyRaceMonitor_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_PartyRaceMonitor_C, DefaultSceneRoot) == 0x0002C8, "Member 'ABP_PartyRaceMonitor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PartyRaceMonitor_C, ImagePanelMat) == 0x0002D0, "Member 'ABP_PartyRaceMonitor_C::ImagePanelMat' has a wrong offset!");
static_assert(offsetof(ABP_PartyRaceMonitor_C, HeaderPanelMat) == 0x0002D8, "Member 'ABP_PartyRaceMonitor_C::HeaderPanelMat' has a wrong offset!");

}

