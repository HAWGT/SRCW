#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_RaceSequenceStateReady

#include "Basic.hpp"

#include "UNION_classes.hpp"
#include "UnionSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "UnionRun_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_RaceSequenceStateReady.BPC_RaceSequenceStateReady_C
// 0x0068 (0x0188 - 0x0120)
class UBPC_RaceSequenceStateReady_C final : public URaceSequenceStateReady
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0120(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         PlayerCount;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InfoListener;                                      // 0x0130(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_RaceSequence_C*                     Race_Sequence_BP;                                  // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 BGMName;                                           // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UWBP_Popup_Window_Hint_C*               TipsWindow;                                        // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowTips;                                          // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_RaceBefore_RuleExplanation_C*      RuleWindow;                                        // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowRuleUIByThisState;                             // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHintId                                       Tips;                                              // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_CMN_MessageBar_C*                  OnlineWaitingUI;                                   // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EGameModeId                                   GameModeID;                                        // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckTipsFirstTimeTrialMode(bool* OutShowTips);
	class UUserWidget* CreateInfoWidget();
	void IsPartyRaceMissionExists(bool* Exists);
	void CheckTipsGrandPrixRound(EHintId* OutHintId);
	void CheckTipsFirstRaceControl(bool* OutShowTips);
	void CheckTips(EHintId* OutHintId);
	void Begin_RaceRuleUI();
	void CheckNeedTips();
	void Begin_TipsUI();
	void CheckRuleUI();
	void CheckOnlineWaiting();
	void OutOnlineWaitingUI();
	void OnOutAnimFinished_イベント();
	void InitOnlineWaiting();
	void OnExitState();
	void OnInitState();
	void NoticeChangeRaceStateEvent(ERaceInfoStateType InNewState, ERaceInfoStateType InOldState);
	void CreateTipsWindow(EHintId InHintId);
	void OnHintPopupCloseEnd();
	void SetRaceUI();
	void OnUpdateState(float InDeltaTime);
	void Begin_StartRace(int32 InRaceStartTimeSec);
	void NoticeChangeCountDownEvent(int32 InNewValue, int32 InOldValue);
	void ExecuteUbergraph_BPC_RaceSequenceStateReady(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_RaceSequenceStateReady_C">();
	}
	static class UBPC_RaceSequenceStateReady_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_RaceSequenceStateReady_C>();
	}
};
static_assert(alignof(UBPC_RaceSequenceStateReady_C) == 0x000008, "Wrong alignment on UBPC_RaceSequenceStateReady_C");
static_assert(sizeof(UBPC_RaceSequenceStateReady_C) == 0x000188, "Wrong size on UBPC_RaceSequenceStateReady_C");
static_assert(offsetof(UBPC_RaceSequenceStateReady_C, UberGraphFrame) == 0x000120, "Member 'UBPC_RaceSequenceStateReady_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateReady_C, PlayerCount) == 0x000128, "Member 'UBPC_RaceSequenceStateReady_C::PlayerCount' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateReady_C, InfoListener) == 0x000130, "Member 'UBPC_RaceSequenceStateReady_C::InfoListener' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateReady_C, Race_Sequence_BP) == 0x000140, "Member 'UBPC_RaceSequenceStateReady_C::Race_Sequence_BP' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateReady_C, BGMName) == 0x000148, "Member 'UBPC_RaceSequenceStateReady_C::BGMName' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateReady_C, TipsWindow) == 0x000158, "Member 'UBPC_RaceSequenceStateReady_C::TipsWindow' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateReady_C, ShowTips) == 0x000160, "Member 'UBPC_RaceSequenceStateReady_C::ShowTips' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateReady_C, RuleWindow) == 0x000168, "Member 'UBPC_RaceSequenceStateReady_C::RuleWindow' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateReady_C, ShowRuleUIByThisState) == 0x000170, "Member 'UBPC_RaceSequenceStateReady_C::ShowRuleUIByThisState' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateReady_C, Tips) == 0x000171, "Member 'UBPC_RaceSequenceStateReady_C::Tips' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateReady_C, OnlineWaitingUI) == 0x000178, "Member 'UBPC_RaceSequenceStateReady_C::OnlineWaitingUI' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateReady_C, GameModeID) == 0x000180, "Member 'UBPC_RaceSequenceStateReady_C::GameModeID' has a wrong offset!");

}

