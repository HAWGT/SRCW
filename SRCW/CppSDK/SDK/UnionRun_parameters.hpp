#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnionRun

#include "Basic.hpp"

#include "UnionRun_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UnionSystem_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function UnionRun.UnionCourseObjectBase.GetObjectPlacementType
// 0x0001 (0x0001 - 0x0000)
struct UnionCourseObjectBase_GetObjectPlacementType final
{
public:
	EObjectPlacementType                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionCourseObjectBase_GetObjectPlacementType) == 0x000001, "Wrong alignment on UnionCourseObjectBase_GetObjectPlacementType");
static_assert(sizeof(UnionCourseObjectBase_GetObjectPlacementType) == 0x000001, "Wrong size on UnionCourseObjectBase_GetObjectPlacementType");
static_assert(offsetof(UnionCourseObjectBase_GetObjectPlacementType, ReturnValue) == 0x000000, "Member 'UnionCourseObjectBase_GetObjectPlacementType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionCourseObjectBase.GetPatternRandomId
// 0x0004 (0x0004 - 0x0000)
struct UnionCourseObjectBase_GetPatternRandomId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionCourseObjectBase_GetPatternRandomId) == 0x000004, "Wrong alignment on UnionCourseObjectBase_GetPatternRandomId");
static_assert(sizeof(UnionCourseObjectBase_GetPatternRandomId) == 0x000004, "Wrong size on UnionCourseObjectBase_GetPatternRandomId");
static_assert(offsetof(UnionCourseObjectBase_GetPatternRandomId, ReturnValue) == 0x000000, "Member 'UnionCourseObjectBase_GetPatternRandomId::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionCourseObjectBase.SetDomainIndex
// 0x0001 (0x0001 - 0x0000)
struct UnionCourseObjectBase_SetDomainIndex final
{
public:
	EDomainIndex                                  Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionCourseObjectBase_SetDomainIndex) == 0x000001, "Wrong alignment on UnionCourseObjectBase_SetDomainIndex");
static_assert(sizeof(UnionCourseObjectBase_SetDomainIndex) == 0x000001, "Wrong size on UnionCourseObjectBase_SetDomainIndex");
static_assert(offsetof(UnionCourseObjectBase_SetDomainIndex, Index_0) == 0x000000, "Member 'UnionCourseObjectBase_SetDomainIndex::Index_0' has a wrong offset!");

// Function UnionRun.UnionCourseObjectBase.SetDomainNumber
// 0x0001 (0x0001 - 0x0000)
struct UnionCourseObjectBase_SetDomainNumber final
{
public:
	EDomainNumber                                 Number;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionCourseObjectBase_SetDomainNumber) == 0x000001, "Wrong alignment on UnionCourseObjectBase_SetDomainNumber");
static_assert(sizeof(UnionCourseObjectBase_SetDomainNumber) == 0x000001, "Wrong size on UnionCourseObjectBase_SetDomainNumber");
static_assert(offsetof(UnionCourseObjectBase_SetDomainNumber, Number) == 0x000000, "Member 'UnionCourseObjectBase_SetDomainNumber::Number' has a wrong offset!");

// Function UnionRun.UnionCourseObjectBase.SetPatternRandomId
// 0x0004 (0x0004 - 0x0000)
struct UnionCourseObjectBase_SetPatternRandomId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionCourseObjectBase_SetPatternRandomId) == 0x000004, "Wrong alignment on UnionCourseObjectBase_SetPatternRandomId");
static_assert(sizeof(UnionCourseObjectBase_SetPatternRandomId) == 0x000004, "Wrong size on UnionCourseObjectBase_SetPatternRandomId");
static_assert(offsetof(UnionCourseObjectBase_SetPatternRandomId, ID) == 0x000000, "Member 'UnionCourseObjectBase_SetPatternRandomId::ID' has a wrong offset!");

// Function UnionRun.UnionCourseObjectBase.SetRandomObjectType
// 0x0001 (0x0001 - 0x0000)
struct UnionCourseObjectBase_SetRandomObjectType final
{
public:
	ERandomObjType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionCourseObjectBase_SetRandomObjectType) == 0x000001, "Wrong alignment on UnionCourseObjectBase_SetRandomObjectType");
static_assert(sizeof(UnionCourseObjectBase_SetRandomObjectType) == 0x000001, "Wrong size on UnionCourseObjectBase_SetRandomObjectType");
static_assert(offsetof(UnionCourseObjectBase_SetRandomObjectType, Type) == 0x000000, "Member 'UnionCourseObjectBase_SetRandomObjectType::Type' has a wrong offset!");

// Function UnionRun.UnionCourseObjectBase.GetDomainNumber
// 0x0001 (0x0001 - 0x0000)
struct UnionCourseObjectBase_GetDomainNumber final
{
public:
	EDomainNumber                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionCourseObjectBase_GetDomainNumber) == 0x000001, "Wrong alignment on UnionCourseObjectBase_GetDomainNumber");
static_assert(sizeof(UnionCourseObjectBase_GetDomainNumber) == 0x000001, "Wrong size on UnionCourseObjectBase_GetDomainNumber");
static_assert(offsetof(UnionCourseObjectBase_GetDomainNumber, ReturnValue) == 0x000000, "Member 'UnionCourseObjectBase_GetDomainNumber::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickBigBakubaku.InitStaticBody
// 0x0010 (0x0010 - 0x0000)
struct GimmickBigBakubaku_InitStaticBody final
{
public:
	const class UGimmickStaticBodyComponent*      StaticBody;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickBigBakubaku_InitStaticBody) == 0x000008, "Wrong alignment on GimmickBigBakubaku_InitStaticBody");
static_assert(sizeof(GimmickBigBakubaku_InitStaticBody) == 0x000010, "Wrong size on GimmickBigBakubaku_InitStaticBody");
static_assert(offsetof(GimmickBigBakubaku_InitStaticBody, StaticBody) == 0x000000, "Member 'GimmickBigBakubaku_InitStaticBody::StaticBody' has a wrong offset!");
static_assert(offsetof(GimmickBigBakubaku_InitStaticBody, SocketName) == 0x000008, "Member 'GimmickBigBakubaku_InitStaticBody::SocketName' has a wrong offset!");

// Function UnionRun.AsuraAnimInstance.SetAsuraState
// 0x0001 (0x0001 - 0x0000)
struct AsuraAnimInstance_SetAsuraState final
{
public:
	EAsuraState                                   State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsuraAnimInstance_SetAsuraState) == 0x000001, "Wrong alignment on AsuraAnimInstance_SetAsuraState");
static_assert(sizeof(AsuraAnimInstance_SetAsuraState) == 0x000001, "Wrong size on AsuraAnimInstance_SetAsuraState");
static_assert(offsetof(AsuraAnimInstance_SetAsuraState, State) == 0x000000, "Member 'AsuraAnimInstance_SetAsuraState::State' has a wrong offset!");

// Function UnionRun.AsuraAnimInstance.IsAsuraState
// 0x0002 (0x0002 - 0x0000)
struct AsuraAnimInstance_IsAsuraState final
{
public:
	EAsuraState                                   State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsuraAnimInstance_IsAsuraState) == 0x000001, "Wrong alignment on AsuraAnimInstance_IsAsuraState");
static_assert(sizeof(AsuraAnimInstance_IsAsuraState) == 0x000002, "Wrong size on AsuraAnimInstance_IsAsuraState");
static_assert(offsetof(AsuraAnimInstance_IsAsuraState, State) == 0x000000, "Member 'AsuraAnimInstance_IsAsuraState::State' has a wrong offset!");
static_assert(offsetof(AsuraAnimInstance_IsAsuraState, ReturnValue) == 0x000001, "Member 'AsuraAnimInstance_IsAsuraState::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceLogUtil.GetRacerLapInfo
// 0x0018 (0x0018 - 0x0000)
struct RaceLogUtil_GetRacerLapInfo final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceLogUtil_GetRacerLapInfo) == 0x000008, "Wrong alignment on RaceLogUtil_GetRacerLapInfo");
static_assert(sizeof(RaceLogUtil_GetRacerLapInfo) == 0x000018, "Wrong size on RaceLogUtil_GetRacerLapInfo");
static_assert(offsetof(RaceLogUtil_GetRacerLapInfo, RacerIndex) == 0x000000, "Member 'RaceLogUtil_GetRacerLapInfo::RacerIndex' has a wrong offset!");
static_assert(offsetof(RaceLogUtil_GetRacerLapInfo, ReturnValue) == 0x000008, "Member 'RaceLogUtil_GetRacerLapInfo::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceLogUtil.GetRacerStatusInfo
// 0x0018 (0x0018 - 0x0000)
struct RaceLogUtil_GetRacerStatusInfo final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceLogUtil_GetRacerStatusInfo) == 0x000008, "Wrong alignment on RaceLogUtil_GetRacerStatusInfo");
static_assert(sizeof(RaceLogUtil_GetRacerStatusInfo) == 0x000018, "Wrong size on RaceLogUtil_GetRacerStatusInfo");
static_assert(offsetof(RaceLogUtil_GetRacerStatusInfo, RacerIndex) == 0x000000, "Member 'RaceLogUtil_GetRacerStatusInfo::RacerIndex' has a wrong offset!");
static_assert(offsetof(RaceLogUtil_GetRacerStatusInfo, ReturnValue) == 0x000008, "Member 'RaceLogUtil_GetRacerStatusInfo::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceLogUtil.PrintRaceLog
// 0x0028 (0x0028 - 0x0000)
struct RaceLogUtil_PrintRaceLog final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 str;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 at;                                                // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceLogUtil_PrintRaceLog) == 0x000008, "Wrong alignment on RaceLogUtil_PrintRaceLog");
static_assert(sizeof(RaceLogUtil_PrintRaceLog) == 0x000028, "Wrong size on RaceLogUtil_PrintRaceLog");
static_assert(offsetof(RaceLogUtil_PrintRaceLog, RacerIndex) == 0x000000, "Member 'RaceLogUtil_PrintRaceLog::RacerIndex' has a wrong offset!");
static_assert(offsetof(RaceLogUtil_PrintRaceLog, str) == 0x000008, "Member 'RaceLogUtil_PrintRaceLog::str' has a wrong offset!");
static_assert(offsetof(RaceLogUtil_PrintRaceLog, at) == 0x000018, "Member 'RaceLogUtil_PrintRaceLog::at' has a wrong offset!");

// Function UnionRun.RaceLogUtil.PrintRunLog
// 0x0028 (0x0028 - 0x0000)
struct RaceLogUtil_PrintRunLog final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 str;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 at;                                                // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceLogUtil_PrintRunLog) == 0x000008, "Wrong alignment on RaceLogUtil_PrintRunLog");
static_assert(sizeof(RaceLogUtil_PrintRunLog) == 0x000028, "Wrong size on RaceLogUtil_PrintRunLog");
static_assert(offsetof(RaceLogUtil_PrintRunLog, RacerIndex) == 0x000000, "Member 'RaceLogUtil_PrintRunLog::RacerIndex' has a wrong offset!");
static_assert(offsetof(RaceLogUtil_PrintRunLog, str) == 0x000008, "Member 'RaceLogUtil_PrintRunLog::str' has a wrong offset!");
static_assert(offsetof(RaceLogUtil_PrintRunLog, at) == 0x000018, "Member 'RaceLogUtil_PrintRunLog::at' has a wrong offset!");

// Function UnionRun.RaceLogUtil.PrintWarpLog
// 0x0028 (0x0028 - 0x0000)
struct RaceLogUtil_PrintWarpLog final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 str;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 at;                                                // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceLogUtil_PrintWarpLog) == 0x000008, "Wrong alignment on RaceLogUtil_PrintWarpLog");
static_assert(sizeof(RaceLogUtil_PrintWarpLog) == 0x000028, "Wrong size on RaceLogUtil_PrintWarpLog");
static_assert(offsetof(RaceLogUtil_PrintWarpLog, RacerIndex) == 0x000000, "Member 'RaceLogUtil_PrintWarpLog::RacerIndex' has a wrong offset!");
static_assert(offsetof(RaceLogUtil_PrintWarpLog, str) == 0x000008, "Member 'RaceLogUtil_PrintWarpLog::str' has a wrong offset!");
static_assert(offsetof(RaceLogUtil_PrintWarpLog, at) == 0x000018, "Member 'RaceLogUtil_PrintWarpLog::at' has a wrong offset!");

// Function UnionRun.AttackReplyInterface.NotifyAttackFailed
// 0x0028 (0x0028 - 0x0000)
struct AttackReplyInterface_NotifyAttackFailed final
{
public:
	struct FAttackReply                           Info;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackReplyInterface_NotifyAttackFailed) == 0x000008, "Wrong alignment on AttackReplyInterface_NotifyAttackFailed");
static_assert(sizeof(AttackReplyInterface_NotifyAttackFailed) == 0x000028, "Wrong size on AttackReplyInterface_NotifyAttackFailed");
static_assert(offsetof(AttackReplyInterface_NotifyAttackFailed, Info) == 0x000000, "Member 'AttackReplyInterface_NotifyAttackFailed::Info' has a wrong offset!");

// Function UnionRun.AttackReplyInterface.NotifyAttackFinishOverwritten
// 0x0028 (0x0028 - 0x0000)
struct AttackReplyInterface_NotifyAttackFinishOverwritten final
{
public:
	struct FAttackReply                           Info;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackReplyInterface_NotifyAttackFinishOverwritten) == 0x000008, "Wrong alignment on AttackReplyInterface_NotifyAttackFinishOverwritten");
static_assert(sizeof(AttackReplyInterface_NotifyAttackFinishOverwritten) == 0x000028, "Wrong size on AttackReplyInterface_NotifyAttackFinishOverwritten");
static_assert(offsetof(AttackReplyInterface_NotifyAttackFinishOverwritten, Info) == 0x000000, "Member 'AttackReplyInterface_NotifyAttackFinishOverwritten::Info' has a wrong offset!");

// Function UnionRun.AttackReplyInterface.NotifyAttackFinishSucceed
// 0x0028 (0x0028 - 0x0000)
struct AttackReplyInterface_NotifyAttackFinishSucceed final
{
public:
	struct FAttackReply                           Info;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackReplyInterface_NotifyAttackFinishSucceed) == 0x000008, "Wrong alignment on AttackReplyInterface_NotifyAttackFinishSucceed");
static_assert(sizeof(AttackReplyInterface_NotifyAttackFinishSucceed) == 0x000028, "Wrong size on AttackReplyInterface_NotifyAttackFinishSucceed");
static_assert(offsetof(AttackReplyInterface_NotifyAttackFinishSucceed, Info) == 0x000000, "Member 'AttackReplyInterface_NotifyAttackFinishSucceed::Info' has a wrong offset!");

// Function UnionRun.AttackReplyInterface.NotifyAttackMissingShot
// 0x0028 (0x0028 - 0x0000)
struct AttackReplyInterface_NotifyAttackMissingShot final
{
public:
	struct FAttackReply                           Info;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackReplyInterface_NotifyAttackMissingShot) == 0x000008, "Wrong alignment on AttackReplyInterface_NotifyAttackMissingShot");
static_assert(sizeof(AttackReplyInterface_NotifyAttackMissingShot) == 0x000028, "Wrong size on AttackReplyInterface_NotifyAttackMissingShot");
static_assert(offsetof(AttackReplyInterface_NotifyAttackMissingShot, Info) == 0x000000, "Member 'AttackReplyInterface_NotifyAttackMissingShot::Info' has a wrong offset!");

// Function UnionRun.AttackReplyInterface.NotifyAttackPauseEnd
// 0x0028 (0x0028 - 0x0000)
struct AttackReplyInterface_NotifyAttackPauseEnd final
{
public:
	struct FAttackReply                           Info;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackReplyInterface_NotifyAttackPauseEnd) == 0x000008, "Wrong alignment on AttackReplyInterface_NotifyAttackPauseEnd");
static_assert(sizeof(AttackReplyInterface_NotifyAttackPauseEnd) == 0x000028, "Wrong size on AttackReplyInterface_NotifyAttackPauseEnd");
static_assert(offsetof(AttackReplyInterface_NotifyAttackPauseEnd, Info) == 0x000000, "Member 'AttackReplyInterface_NotifyAttackPauseEnd::Info' has a wrong offset!");

// Function UnionRun.AttackReplyInterface.NotifyAttackPauseStart
// 0x0028 (0x0028 - 0x0000)
struct AttackReplyInterface_NotifyAttackPauseStart final
{
public:
	struct FAttackReply                           Info;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackReplyInterface_NotifyAttackPauseStart) == 0x000008, "Wrong alignment on AttackReplyInterface_NotifyAttackPauseStart");
static_assert(sizeof(AttackReplyInterface_NotifyAttackPauseStart) == 0x000028, "Wrong size on AttackReplyInterface_NotifyAttackPauseStart");
static_assert(offsetof(AttackReplyInterface_NotifyAttackPauseStart, Info) == 0x000000, "Member 'AttackReplyInterface_NotifyAttackPauseStart::Info' has a wrong offset!");

// Function UnionRun.AttackReplyInterface.NotifyAttackSucced
// 0x0028 (0x0028 - 0x0000)
struct AttackReplyInterface_NotifyAttackSucced final
{
public:
	struct FAttackReply                           Info;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackReplyInterface_NotifyAttackSucced) == 0x000008, "Wrong alignment on AttackReplyInterface_NotifyAttackSucced");
static_assert(sizeof(AttackReplyInterface_NotifyAttackSucced) == 0x000028, "Wrong size on AttackReplyInterface_NotifyAttackSucced");
static_assert(offsetof(AttackReplyInterface_NotifyAttackSucced, Info) == 0x000000, "Member 'AttackReplyInterface_NotifyAttackSucced::Info' has a wrong offset!");

// Function UnionRun.AttackReplyInterface.NotifyAttackTimeElapsed
// 0x0028 (0x0028 - 0x0000)
struct AttackReplyInterface_NotifyAttackTimeElapsed final
{
public:
	struct FAttackReply                           Info;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackReplyInterface_NotifyAttackTimeElapsed) == 0x000008, "Wrong alignment on AttackReplyInterface_NotifyAttackTimeElapsed");
static_assert(sizeof(AttackReplyInterface_NotifyAttackTimeElapsed) == 0x000028, "Wrong size on AttackReplyInterface_NotifyAttackTimeElapsed");
static_assert(offsetof(AttackReplyInterface_NotifyAttackTimeElapsed, Info) == 0x000000, "Member 'AttackReplyInterface_NotifyAttackTimeElapsed::Info' has a wrong offset!");

// Function UnionRun.UnionCameraBase.IsCurrentViewTarget
// 0x0001 (0x0001 - 0x0000)
struct UnionCameraBase_IsCurrentViewTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionCameraBase_IsCurrentViewTarget) == 0x000001, "Wrong alignment on UnionCameraBase_IsCurrentViewTarget");
static_assert(sizeof(UnionCameraBase_IsCurrentViewTarget) == 0x000001, "Wrong size on UnionCameraBase_IsCurrentViewTarget");
static_assert(offsetof(UnionCameraBase_IsCurrentViewTarget, ReturnValue) == 0x000000, "Member 'UnionCameraBase_IsCurrentViewTarget::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionCameraBase.IsInBlending
// 0x0001 (0x0001 - 0x0000)
struct UnionCameraBase_IsInBlending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionCameraBase_IsInBlending) == 0x000001, "Wrong alignment on UnionCameraBase_IsInBlending");
static_assert(sizeof(UnionCameraBase_IsInBlending) == 0x000001, "Wrong size on UnionCameraBase_IsInBlending");
static_assert(offsetof(UnionCameraBase_IsInBlending, ReturnValue) == 0x000000, "Member 'UnionCameraBase_IsInBlending::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionCameraBase.RequestEndCamera
// 0x0001 (0x0001 - 0x0000)
struct UnionCameraBase_RequestEndCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionCameraBase_RequestEndCamera) == 0x000001, "Wrong alignment on UnionCameraBase_RequestEndCamera");
static_assert(sizeof(UnionCameraBase_RequestEndCamera) == 0x000001, "Wrong size on UnionCameraBase_RequestEndCamera");
static_assert(offsetof(UnionCameraBase_RequestEndCamera, ReturnValue) == 0x000000, "Member 'UnionCameraBase_RequestEndCamera::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionCameraBase.RequestStartCamera
// 0x0001 (0x0001 - 0x0000)
struct UnionCameraBase_RequestStartCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionCameraBase_RequestStartCamera) == 0x000001, "Wrong alignment on UnionCameraBase_RequestStartCamera");
static_assert(sizeof(UnionCameraBase_RequestStartCamera) == 0x000001, "Wrong size on UnionCameraBase_RequestStartCamera");
static_assert(offsetof(UnionCameraBase_RequestStartCamera, ReturnValue) == 0x000000, "Member 'UnionCameraBase_RequestStartCamera::ReturnValue' has a wrong offset!");

// Function UnionRun.BoostPadObject.OnVATUpdate
// 0x0018 (0x0018 - 0x0000)
struct BoostPadObject_OnVATUpdate final
{
public:
	class UUnionVATMeshComponent*                 VATComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUnionVATSequenceInfo                  SequenceInfo;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BoostPadObject_OnVATUpdate) == 0x000008, "Wrong alignment on BoostPadObject_OnVATUpdate");
static_assert(sizeof(BoostPadObject_OnVATUpdate) == 0x000018, "Wrong size on BoostPadObject_OnVATUpdate");
static_assert(offsetof(BoostPadObject_OnVATUpdate, VATComponent) == 0x000000, "Member 'BoostPadObject_OnVATUpdate::VATComponent' has a wrong offset!");
static_assert(offsetof(BoostPadObject_OnVATUpdate, SequenceInfo) == 0x000008, "Member 'BoostPadObject_OnVATUpdate::SequenceInfo' has a wrong offset!");

// Function UnionRun.BoostPadObject.SetBoostPadType
// 0x0002 (0x0002 - 0x0000)
struct BoostPadObject_SetBoostPadType final
{
public:
	EBoostPadType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpecial;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoostPadObject_SetBoostPadType) == 0x000001, "Wrong alignment on BoostPadObject_SetBoostPadType");
static_assert(sizeof(BoostPadObject_SetBoostPadType) == 0x000002, "Wrong size on BoostPadObject_SetBoostPadType");
static_assert(offsetof(BoostPadObject_SetBoostPadType, Type) == 0x000000, "Member 'BoostPadObject_SetBoostPadType::Type' has a wrong offset!");
static_assert(offsetof(BoostPadObject_SetBoostPadType, IsSpecial) == 0x000001, "Member 'BoostPadObject_SetBoostPadType::IsSpecial' has a wrong offset!");

// Function UnionRun.BoostPadObject.SetGateScaleRate
// 0x0004 (0x0004 - 0x0000)
struct BoostPadObject_SetGateScaleRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoostPadObject_SetGateScaleRate) == 0x000004, "Wrong alignment on BoostPadObject_SetGateScaleRate");
static_assert(sizeof(BoostPadObject_SetGateScaleRate) == 0x000004, "Wrong size on BoostPadObject_SetGateScaleRate");
static_assert(offsetof(BoostPadObject_SetGateScaleRate, Rate) == 0x000000, "Member 'BoostPadObject_SetGateScaleRate::Rate' has a wrong offset!");

// Function UnionRun.BPFL_UnionRunTuningUtil.GetHoverBaseHeight
// 0x0008 (0x0008 - 0x0000)
struct BPFL_UnionRunTuningUtil_GetHoverBaseHeight final
{
public:
	EVehicleType                                  VehicleType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFL_UnionRunTuningUtil_GetHoverBaseHeight) == 0x000004, "Wrong alignment on BPFL_UnionRunTuningUtil_GetHoverBaseHeight");
static_assert(sizeof(BPFL_UnionRunTuningUtil_GetHoverBaseHeight) == 0x000008, "Wrong size on BPFL_UnionRunTuningUtil_GetHoverBaseHeight");
static_assert(offsetof(BPFL_UnionRunTuningUtil_GetHoverBaseHeight, VehicleType) == 0x000000, "Member 'BPFL_UnionRunTuningUtil_GetHoverBaseHeight::VehicleType' has a wrong offset!");
static_assert(offsetof(BPFL_UnionRunTuningUtil_GetHoverBaseHeight, ReturnValue) == 0x000004, "Member 'BPFL_UnionRunTuningUtil_GetHoverBaseHeight::ReturnValue' has a wrong offset!");

// Function UnionRun.BPFL_UnionRunTuningUtil.GetIsDroneDisable
// 0x0001 (0x0001 - 0x0000)
struct BPFL_UnionRunTuningUtil_GetIsDroneDisable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFL_UnionRunTuningUtil_GetIsDroneDisable) == 0x000001, "Wrong alignment on BPFL_UnionRunTuningUtil_GetIsDroneDisable");
static_assert(sizeof(BPFL_UnionRunTuningUtil_GetIsDroneDisable) == 0x000001, "Wrong size on BPFL_UnionRunTuningUtil_GetIsDroneDisable");
static_assert(offsetof(BPFL_UnionRunTuningUtil_GetIsDroneDisable, ReturnValue) == 0x000000, "Member 'BPFL_UnionRunTuningUtil_GetIsDroneDisable::ReturnValue' has a wrong offset!");

// Function UnionRun.BPFL_UnionRunTuningUtil.GetMeshSizeRate
// 0x0008 (0x0008 - 0x0000)
struct BPFL_UnionRunTuningUtil_GetMeshSizeRate final
{
public:
	EVehicleDisplayMode                           DisplayMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFL_UnionRunTuningUtil_GetMeshSizeRate) == 0x000004, "Wrong alignment on BPFL_UnionRunTuningUtil_GetMeshSizeRate");
static_assert(sizeof(BPFL_UnionRunTuningUtil_GetMeshSizeRate) == 0x000008, "Wrong size on BPFL_UnionRunTuningUtil_GetMeshSizeRate");
static_assert(offsetof(BPFL_UnionRunTuningUtil_GetMeshSizeRate, DisplayMode) == 0x000000, "Member 'BPFL_UnionRunTuningUtil_GetMeshSizeRate::DisplayMode' has a wrong offset!");
static_assert(offsetof(BPFL_UnionRunTuningUtil_GetMeshSizeRate, ReturnValue) == 0x000004, "Member 'BPFL_UnionRunTuningUtil_GetMeshSizeRate::ReturnValue' has a wrong offset!");

// Function UnionRun.BPFL_UnionRunTuningUtil.GetStartingLightPosition
// 0x0010 (0x0010 - 0x0000)
struct BPFL_UnionRunTuningUtil_GetStartingLightPosition final
{
public:
	int32                                         SelectedPlayerNum;                                 // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Front;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFL_UnionRunTuningUtil_GetStartingLightPosition) == 0x000004, "Wrong alignment on BPFL_UnionRunTuningUtil_GetStartingLightPosition");
static_assert(sizeof(BPFL_UnionRunTuningUtil_GetStartingLightPosition) == 0x000010, "Wrong size on BPFL_UnionRunTuningUtil_GetStartingLightPosition");
static_assert(offsetof(BPFL_UnionRunTuningUtil_GetStartingLightPosition, SelectedPlayerNum) == 0x000000, "Member 'BPFL_UnionRunTuningUtil_GetStartingLightPosition::SelectedPlayerNum' has a wrong offset!");
static_assert(offsetof(BPFL_UnionRunTuningUtil_GetStartingLightPosition, Front) == 0x000004, "Member 'BPFL_UnionRunTuningUtil_GetStartingLightPosition::Front' has a wrong offset!");
static_assert(offsetof(BPFL_UnionRunTuningUtil_GetStartingLightPosition, Height) == 0x000008, "Member 'BPFL_UnionRunTuningUtil_GetStartingLightPosition::Height' has a wrong offset!");
static_assert(offsetof(BPFL_UnionRunTuningUtil_GetStartingLightPosition, Right) == 0x00000C, "Member 'BPFL_UnionRunTuningUtil_GetStartingLightPosition::Right' has a wrong offset!");

// Function UnionRun.BPFL_UnionRunTuningUtil.GetYellowDrillMeshSizeRate
// 0x0004 (0x0004 - 0x0000)
struct BPFL_UnionRunTuningUtil_GetYellowDrillMeshSizeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFL_UnionRunTuningUtil_GetYellowDrillMeshSizeRate) == 0x000004, "Wrong alignment on BPFL_UnionRunTuningUtil_GetYellowDrillMeshSizeRate");
static_assert(sizeof(BPFL_UnionRunTuningUtil_GetYellowDrillMeshSizeRate) == 0x000004, "Wrong size on BPFL_UnionRunTuningUtil_GetYellowDrillMeshSizeRate");
static_assert(offsetof(BPFL_UnionRunTuningUtil_GetYellowDrillMeshSizeRate, ReturnValue) == 0x000000, "Member 'BPFL_UnionRunTuningUtil_GetYellowDrillMeshSizeRate::ReturnValue' has a wrong offset!");

// Function UnionRun.BPFL_UnionRunVehicleUtil.GetCarStatusType
// 0x0002 (0x0002 - 0x0000)
struct BPFL_UnionRunVehicleUtil_GetCarStatusType final
{
public:
	EMachineId                                    InMachineID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECarStatusType                                ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFL_UnionRunVehicleUtil_GetCarStatusType) == 0x000001, "Wrong alignment on BPFL_UnionRunVehicleUtil_GetCarStatusType");
static_assert(sizeof(BPFL_UnionRunVehicleUtil_GetCarStatusType) == 0x000002, "Wrong size on BPFL_UnionRunVehicleUtil_GetCarStatusType");
static_assert(offsetof(BPFL_UnionRunVehicleUtil_GetCarStatusType, InMachineID) == 0x000000, "Member 'BPFL_UnionRunVehicleUtil_GetCarStatusType::InMachineID' has a wrong offset!");
static_assert(offsetof(BPFL_UnionRunVehicleUtil_GetCarStatusType, ReturnValue) == 0x000001, "Member 'BPFL_UnionRunVehicleUtil_GetCarStatusType::ReturnValue' has a wrong offset!");

// Function UnionRun.BPFL_UnionRunVehicleUtil.GetDefaultMachineId
// 0x0002 (0x0002 - 0x0000)
struct BPFL_UnionRunVehicleUtil_GetDefaultMachineId final
{
public:
	ECarStatusType                                InCarStatusType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFL_UnionRunVehicleUtil_GetDefaultMachineId) == 0x000001, "Wrong alignment on BPFL_UnionRunVehicleUtil_GetDefaultMachineId");
static_assert(sizeof(BPFL_UnionRunVehicleUtil_GetDefaultMachineId) == 0x000002, "Wrong size on BPFL_UnionRunVehicleUtil_GetDefaultMachineId");
static_assert(offsetof(BPFL_UnionRunVehicleUtil_GetDefaultMachineId, InCarStatusType) == 0x000000, "Member 'BPFL_UnionRunVehicleUtil_GetDefaultMachineId::InCarStatusType' has a wrong offset!");
static_assert(offsetof(BPFL_UnionRunVehicleUtil_GetDefaultMachineId, ReturnValue) == 0x000001, "Member 'BPFL_UnionRunVehicleUtil_GetDefaultMachineId::ReturnValue' has a wrong offset!");

// Function UnionRun.BPFL_UnionRunVehicleUtil.GetFirstBasicCustomMachineId
// 0x0002 (0x0002 - 0x0000)
struct BPFL_UnionRunVehicleUtil_GetFirstBasicCustomMachineId final
{
public:
	ECarStatusType                                InCarStatusType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFL_UnionRunVehicleUtil_GetFirstBasicCustomMachineId) == 0x000001, "Wrong alignment on BPFL_UnionRunVehicleUtil_GetFirstBasicCustomMachineId");
static_assert(sizeof(BPFL_UnionRunVehicleUtil_GetFirstBasicCustomMachineId) == 0x000002, "Wrong size on BPFL_UnionRunVehicleUtil_GetFirstBasicCustomMachineId");
static_assert(offsetof(BPFL_UnionRunVehicleUtil_GetFirstBasicCustomMachineId, InCarStatusType) == 0x000000, "Member 'BPFL_UnionRunVehicleUtil_GetFirstBasicCustomMachineId::InCarStatusType' has a wrong offset!");
static_assert(offsetof(BPFL_UnionRunVehicleUtil_GetFirstBasicCustomMachineId, ReturnValue) == 0x000001, "Member 'BPFL_UnionRunVehicleUtil_GetFirstBasicCustomMachineId::ReturnValue' has a wrong offset!");

// Function UnionRun.BPFL_UnionRunVehicleUtil.IsHoverboard
// 0x0002 (0x0002 - 0x0000)
struct BPFL_UnionRunVehicleUtil_IsHoverboard final
{
public:
	ECarStatusType                                InCarStatusType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFL_UnionRunVehicleUtil_IsHoverboard) == 0x000001, "Wrong alignment on BPFL_UnionRunVehicleUtil_IsHoverboard");
static_assert(sizeof(BPFL_UnionRunVehicleUtil_IsHoverboard) == 0x000002, "Wrong size on BPFL_UnionRunVehicleUtil_IsHoverboard");
static_assert(offsetof(BPFL_UnionRunVehicleUtil_IsHoverboard, InCarStatusType) == 0x000000, "Member 'BPFL_UnionRunVehicleUtil_IsHoverboard::InCarStatusType' has a wrong offset!");
static_assert(offsetof(BPFL_UnionRunVehicleUtil_IsHoverboard, ReturnValue) == 0x000001, "Member 'BPFL_UnionRunVehicleUtil_IsHoverboard::ReturnValue' has a wrong offset!");

// Function UnionRun.BreakObjectAnimInstance.SetHit
// 0x0004 (0x0004 - 0x0000)
struct BreakObjectAnimInstance_SetHit final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakObjectAnimInstance_SetHit) == 0x000004, "Wrong alignment on BreakObjectAnimInstance_SetHit");
static_assert(sizeof(BreakObjectAnimInstance_SetHit) == 0x000004, "Wrong size on BreakObjectAnimInstance_SetHit");
static_assert(offsetof(BreakObjectAnimInstance_SetHit, Speed) == 0x000000, "Member 'BreakObjectAnimInstance_SetHit::Speed' has a wrong offset!");

// Function UnionRun.KingBoomBooAnimInstance.GetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct KingBoomBooAnimInstance_GetIsAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooAnimInstance_GetIsAttack) == 0x000001, "Wrong alignment on KingBoomBooAnimInstance_GetIsAttack");
static_assert(sizeof(KingBoomBooAnimInstance_GetIsAttack) == 0x000001, "Wrong size on KingBoomBooAnimInstance_GetIsAttack");
static_assert(offsetof(KingBoomBooAnimInstance_GetIsAttack, ReturnValue) == 0x000000, "Member 'KingBoomBooAnimInstance_GetIsAttack::ReturnValue' has a wrong offset!");

// Function UnionRun.KingBoomBooAnimInstance.GetIsAttackEnd
// 0x0001 (0x0001 - 0x0000)
struct KingBoomBooAnimInstance_GetIsAttackEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooAnimInstance_GetIsAttackEnd) == 0x000001, "Wrong alignment on KingBoomBooAnimInstance_GetIsAttackEnd");
static_assert(sizeof(KingBoomBooAnimInstance_GetIsAttackEnd) == 0x000001, "Wrong size on KingBoomBooAnimInstance_GetIsAttackEnd");
static_assert(offsetof(KingBoomBooAnimInstance_GetIsAttackEnd, ReturnValue) == 0x000000, "Member 'KingBoomBooAnimInstance_GetIsAttackEnd::ReturnValue' has a wrong offset!");

// Function UnionRun.KingBoomBooAnimInstance.GetIsEnd
// 0x0001 (0x0001 - 0x0000)
struct KingBoomBooAnimInstance_GetIsEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooAnimInstance_GetIsEnd) == 0x000001, "Wrong alignment on KingBoomBooAnimInstance_GetIsEnd");
static_assert(sizeof(KingBoomBooAnimInstance_GetIsEnd) == 0x000001, "Wrong size on KingBoomBooAnimInstance_GetIsEnd");
static_assert(offsetof(KingBoomBooAnimInstance_GetIsEnd, ReturnValue) == 0x000000, "Member 'KingBoomBooAnimInstance_GetIsEnd::ReturnValue' has a wrong offset!");

// Function UnionRun.KingBoomBooAnimInstance.GetIsExit
// 0x0001 (0x0001 - 0x0000)
struct KingBoomBooAnimInstance_GetIsExit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooAnimInstance_GetIsExit) == 0x000001, "Wrong alignment on KingBoomBooAnimInstance_GetIsExit");
static_assert(sizeof(KingBoomBooAnimInstance_GetIsExit) == 0x000001, "Wrong size on KingBoomBooAnimInstance_GetIsExit");
static_assert(offsetof(KingBoomBooAnimInstance_GetIsExit, ReturnValue) == 0x000000, "Member 'KingBoomBooAnimInstance_GetIsExit::ReturnValue' has a wrong offset!");

// Function UnionRun.KingBoomBooAnimInstance.GetIsMove
// 0x0001 (0x0001 - 0x0000)
struct KingBoomBooAnimInstance_GetIsMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooAnimInstance_GetIsMove) == 0x000001, "Wrong alignment on KingBoomBooAnimInstance_GetIsMove");
static_assert(sizeof(KingBoomBooAnimInstance_GetIsMove) == 0x000001, "Wrong size on KingBoomBooAnimInstance_GetIsMove");
static_assert(offsetof(KingBoomBooAnimInstance_GetIsMove, ReturnValue) == 0x000000, "Member 'KingBoomBooAnimInstance_GetIsMove::ReturnValue' has a wrong offset!");

// Function UnionRun.KingBoomBooAnimInstance.GetIsStart
// 0x0001 (0x0001 - 0x0000)
struct KingBoomBooAnimInstance_GetIsStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooAnimInstance_GetIsStart) == 0x000001, "Wrong alignment on KingBoomBooAnimInstance_GetIsStart");
static_assert(sizeof(KingBoomBooAnimInstance_GetIsStart) == 0x000001, "Wrong size on KingBoomBooAnimInstance_GetIsStart");
static_assert(offsetof(KingBoomBooAnimInstance_GetIsStart, ReturnValue) == 0x000000, "Member 'KingBoomBooAnimInstance_GetIsStart::ReturnValue' has a wrong offset!");

// Function UnionRun.KingBoomBooAnimInstance.SetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct KingBoomBooAnimInstance_SetIsAttack final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooAnimInstance_SetIsAttack) == 0x000001, "Wrong alignment on KingBoomBooAnimInstance_SetIsAttack");
static_assert(sizeof(KingBoomBooAnimInstance_SetIsAttack) == 0x000001, "Wrong size on KingBoomBooAnimInstance_SetIsAttack");
static_assert(offsetof(KingBoomBooAnimInstance_SetIsAttack, flag) == 0x000000, "Member 'KingBoomBooAnimInstance_SetIsAttack::flag' has a wrong offset!");

// Function UnionRun.KingBoomBooAnimInstance.SetIsAttackEnd
// 0x0001 (0x0001 - 0x0000)
struct KingBoomBooAnimInstance_SetIsAttackEnd final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooAnimInstance_SetIsAttackEnd) == 0x000001, "Wrong alignment on KingBoomBooAnimInstance_SetIsAttackEnd");
static_assert(sizeof(KingBoomBooAnimInstance_SetIsAttackEnd) == 0x000001, "Wrong size on KingBoomBooAnimInstance_SetIsAttackEnd");
static_assert(offsetof(KingBoomBooAnimInstance_SetIsAttackEnd, flag) == 0x000000, "Member 'KingBoomBooAnimInstance_SetIsAttackEnd::flag' has a wrong offset!");

// Function UnionRun.KingBoomBooAnimInstance.SetIsEnd
// 0x0001 (0x0001 - 0x0000)
struct KingBoomBooAnimInstance_SetIsEnd final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooAnimInstance_SetIsEnd) == 0x000001, "Wrong alignment on KingBoomBooAnimInstance_SetIsEnd");
static_assert(sizeof(KingBoomBooAnimInstance_SetIsEnd) == 0x000001, "Wrong size on KingBoomBooAnimInstance_SetIsEnd");
static_assert(offsetof(KingBoomBooAnimInstance_SetIsEnd, flag) == 0x000000, "Member 'KingBoomBooAnimInstance_SetIsEnd::flag' has a wrong offset!");

// Function UnionRun.KingBoomBooAnimInstance.SetIsExit
// 0x0001 (0x0001 - 0x0000)
struct KingBoomBooAnimInstance_SetIsExit final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooAnimInstance_SetIsExit) == 0x000001, "Wrong alignment on KingBoomBooAnimInstance_SetIsExit");
static_assert(sizeof(KingBoomBooAnimInstance_SetIsExit) == 0x000001, "Wrong size on KingBoomBooAnimInstance_SetIsExit");
static_assert(offsetof(KingBoomBooAnimInstance_SetIsExit, flag) == 0x000000, "Member 'KingBoomBooAnimInstance_SetIsExit::flag' has a wrong offset!");

// Function UnionRun.KingBoomBooAnimInstance.SetIsMove
// 0x0001 (0x0001 - 0x0000)
struct KingBoomBooAnimInstance_SetIsMove final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooAnimInstance_SetIsMove) == 0x000001, "Wrong alignment on KingBoomBooAnimInstance_SetIsMove");
static_assert(sizeof(KingBoomBooAnimInstance_SetIsMove) == 0x000001, "Wrong size on KingBoomBooAnimInstance_SetIsMove");
static_assert(offsetof(KingBoomBooAnimInstance_SetIsMove, flag) == 0x000000, "Member 'KingBoomBooAnimInstance_SetIsMove::flag' has a wrong offset!");

// Function UnionRun.KingBoomBooAnimInstance.SetIsStart
// 0x0001 (0x0001 - 0x0000)
struct KingBoomBooAnimInstance_SetIsStart final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooAnimInstance_SetIsStart) == 0x000001, "Wrong alignment on KingBoomBooAnimInstance_SetIsStart");
static_assert(sizeof(KingBoomBooAnimInstance_SetIsStart) == 0x000001, "Wrong size on KingBoomBooAnimInstance_SetIsStart");
static_assert(offsetof(KingBoomBooAnimInstance_SetIsStart, flag) == 0x000000, "Member 'KingBoomBooAnimInstance_SetIsStart::flag' has a wrong offset!");

// Function UnionRun.BreakObjectBase.HitRacer
// 0x0004 (0x0004 - 0x0000)
struct BreakObjectBase_HitRacer final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakObjectBase_HitRacer) == 0x000004, "Wrong alignment on BreakObjectBase_HitRacer");
static_assert(sizeof(BreakObjectBase_HitRacer) == 0x000004, "Wrong size on BreakObjectBase_HitRacer");
static_assert(offsetof(BreakObjectBase_HitRacer, RacerIndex) == 0x000000, "Member 'BreakObjectBase_HitRacer::RacerIndex' has a wrong offset!");

// Function UnionRun.BreakObjectBase.GetBlendSpaceValue
// 0x0004 (0x0004 - 0x0000)
struct BreakObjectBase_GetBlendSpaceValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakObjectBase_GetBlendSpaceValue) == 0x000004, "Wrong alignment on BreakObjectBase_GetBlendSpaceValue");
static_assert(sizeof(BreakObjectBase_GetBlendSpaceValue) == 0x000004, "Wrong size on BreakObjectBase_GetBlendSpaceValue");
static_assert(offsetof(BreakObjectBase_GetBlendSpaceValue, ReturnValue) == 0x000000, "Member 'BreakObjectBase_GetBlendSpaceValue::ReturnValue' has a wrong offset!");

// Function UnionRun.BreakObjectBase.IsBroken
// 0x0001 (0x0001 - 0x0000)
struct BreakObjectBase_IsBroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakObjectBase_IsBroken) == 0x000001, "Wrong alignment on BreakObjectBase_IsBroken");
static_assert(sizeof(BreakObjectBase_IsBroken) == 0x000001, "Wrong size on BreakObjectBase_IsBroken");
static_assert(offsetof(BreakObjectBase_IsBroken, ReturnValue) == 0x000000, "Member 'BreakObjectBase_IsBroken::ReturnValue' has a wrong offset!");

// Function UnionRun.BtDebugDispActor.Execute_AreaDataBlockDisp
// 0x0010 (0x0010 - 0x0000)
struct BtDebugDispActor_Execute_AreaDataBlockDisp final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtDebugDispActor_Execute_AreaDataBlockDisp) == 0x000008, "Wrong alignment on BtDebugDispActor_Execute_AreaDataBlockDisp");
static_assert(sizeof(BtDebugDispActor_Execute_AreaDataBlockDisp) == 0x000010, "Wrong size on BtDebugDispActor_Execute_AreaDataBlockDisp");
static_assert(offsetof(BtDebugDispActor_Execute_AreaDataBlockDisp, args) == 0x000000, "Member 'BtDebugDispActor_Execute_AreaDataBlockDisp::args' has a wrong offset!");

// Function UnionRun.BtDebugDispActor.Execute_AreaDataCourseCollisionDisp
// 0x0010 (0x0010 - 0x0000)
struct BtDebugDispActor_Execute_AreaDataCourseCollisionDisp final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtDebugDispActor_Execute_AreaDataCourseCollisionDisp) == 0x000008, "Wrong alignment on BtDebugDispActor_Execute_AreaDataCourseCollisionDisp");
static_assert(sizeof(BtDebugDispActor_Execute_AreaDataCourseCollisionDisp) == 0x000010, "Wrong size on BtDebugDispActor_Execute_AreaDataCourseCollisionDisp");
static_assert(offsetof(BtDebugDispActor_Execute_AreaDataCourseCollisionDisp, args) == 0x000000, "Member 'BtDebugDispActor_Execute_AreaDataCourseCollisionDisp::args' has a wrong offset!");

// Function UnionRun.BtDebugDispActor.Execute_AreaDataCourseCollisionText
// 0x0010 (0x0010 - 0x0000)
struct BtDebugDispActor_Execute_AreaDataCourseCollisionText final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtDebugDispActor_Execute_AreaDataCourseCollisionText) == 0x000008, "Wrong alignment on BtDebugDispActor_Execute_AreaDataCourseCollisionText");
static_assert(sizeof(BtDebugDispActor_Execute_AreaDataCourseCollisionText) == 0x000010, "Wrong size on BtDebugDispActor_Execute_AreaDataCourseCollisionText");
static_assert(offsetof(BtDebugDispActor_Execute_AreaDataCourseCollisionText, args) == 0x000000, "Member 'BtDebugDispActor_Execute_AreaDataCourseCollisionText::args' has a wrong offset!");

// Function UnionRun.BtDebugDispActor.Execute_CalcStageAABB
// 0x0010 (0x0010 - 0x0000)
struct BtDebugDispActor_Execute_CalcStageAABB final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtDebugDispActor_Execute_CalcStageAABB) == 0x000008, "Wrong alignment on BtDebugDispActor_Execute_CalcStageAABB");
static_assert(sizeof(BtDebugDispActor_Execute_CalcStageAABB) == 0x000010, "Wrong size on BtDebugDispActor_Execute_CalcStageAABB");
static_assert(offsetof(BtDebugDispActor_Execute_CalcStageAABB, args) == 0x000000, "Member 'BtDebugDispActor_Execute_CalcStageAABB::args' has a wrong offset!");

// Function UnionRun.BtDebugDispActor.Execute_CollisionDisp
// 0x0010 (0x0010 - 0x0000)
struct BtDebugDispActor_Execute_CollisionDisp final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtDebugDispActor_Execute_CollisionDisp) == 0x000008, "Wrong alignment on BtDebugDispActor_Execute_CollisionDisp");
static_assert(sizeof(BtDebugDispActor_Execute_CollisionDisp) == 0x000010, "Wrong size on BtDebugDispActor_Execute_CollisionDisp");
static_assert(offsetof(BtDebugDispActor_Execute_CollisionDisp, args) == 0x000000, "Member 'BtDebugDispActor_Execute_CollisionDisp::args' has a wrong offset!");

// Function UnionRun.BtDebugDispActor.Execute_CollisionText
// 0x0010 (0x0010 - 0x0000)
struct BtDebugDispActor_Execute_CollisionText final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtDebugDispActor_Execute_CollisionText) == 0x000008, "Wrong alignment on BtDebugDispActor_Execute_CollisionText");
static_assert(sizeof(BtDebugDispActor_Execute_CollisionText) == 0x000010, "Wrong size on BtDebugDispActor_Execute_CollisionText");
static_assert(offsetof(BtDebugDispActor_Execute_CollisionText, args) == 0x000000, "Member 'BtDebugDispActor_Execute_CollisionText::args' has a wrong offset!");

// Function UnionRun.BtDebugDispActor.Execute_DispStageAABB
// 0x0010 (0x0010 - 0x0000)
struct BtDebugDispActor_Execute_DispStageAABB final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtDebugDispActor_Execute_DispStageAABB) == 0x000008, "Wrong alignment on BtDebugDispActor_Execute_DispStageAABB");
static_assert(sizeof(BtDebugDispActor_Execute_DispStageAABB) == 0x000010, "Wrong size on BtDebugDispActor_Execute_DispStageAABB");
static_assert(offsetof(BtDebugDispActor_Execute_DispStageAABB, args) == 0x000000, "Member 'BtDebugDispActor_Execute_DispStageAABB::args' has a wrong offset!");

// Function UnionRun.BtDebugDispActor.Execute_DrawSphere
// 0x0010 (0x0010 - 0x0000)
struct BtDebugDispActor_Execute_DrawSphere final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtDebugDispActor_Execute_DrawSphere) == 0x000008, "Wrong alignment on BtDebugDispActor_Execute_DrawSphere");
static_assert(sizeof(BtDebugDispActor_Execute_DrawSphere) == 0x000010, "Wrong size on BtDebugDispActor_Execute_DrawSphere");
static_assert(offsetof(BtDebugDispActor_Execute_DrawSphere, args) == 0x000000, "Member 'BtDebugDispActor_Execute_DrawSphere::args' has a wrong offset!");

// Function UnionRun.BtDebugDispActor.Execute_RayCast
// 0x0010 (0x0010 - 0x0000)
struct BtDebugDispActor_Execute_RayCast final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtDebugDispActor_Execute_RayCast) == 0x000008, "Wrong alignment on BtDebugDispActor_Execute_RayCast");
static_assert(sizeof(BtDebugDispActor_Execute_RayCast) == 0x000010, "Wrong size on BtDebugDispActor_Execute_RayCast");
static_assert(offsetof(BtDebugDispActor_Execute_RayCast, args) == 0x000000, "Member 'BtDebugDispActor_Execute_RayCast::args' has a wrong offset!");

// Function UnionRun.BubbleItemBox.HitRacer
// 0x0004 (0x0004 - 0x0000)
struct BubbleItemBox_HitRacer final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleItemBox_HitRacer) == 0x000004, "Wrong alignment on BubbleItemBox_HitRacer");
static_assert(sizeof(BubbleItemBox_HitRacer) == 0x000004, "Wrong size on BubbleItemBox_HitRacer");
static_assert(offsetof(BubbleItemBox_HitRacer, RacerIndex) == 0x000000, "Member 'BubbleItemBox_HitRacer::RacerIndex' has a wrong offset!");

// Function UnionRun.BubbleItemBox.OnChangeItemBox
// 0x0001 (0x0001 - 0x0000)
struct BubbleItemBox_OnChangeItemBox final
{
public:
	EItemBoxType                                  ItemBoxType_0;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleItemBox_OnChangeItemBox) == 0x000001, "Wrong alignment on BubbleItemBox_OnChangeItemBox");
static_assert(sizeof(BubbleItemBox_OnChangeItemBox) == 0x000001, "Wrong size on BubbleItemBox_OnChangeItemBox");
static_assert(offsetof(BubbleItemBox_OnChangeItemBox, ItemBoxType_0) == 0x000000, "Member 'BubbleItemBox_OnChangeItemBox::ItemBoxType_0' has a wrong offset!");

// Function UnionRun.BubbleItemBox.OnHitRacer
// 0x0004 (0x0004 - 0x0000)
struct BubbleItemBox_OnHitRacer final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleItemBox_OnHitRacer) == 0x000004, "Wrong alignment on BubbleItemBox_OnHitRacer");
static_assert(sizeof(BubbleItemBox_OnHitRacer) == 0x000004, "Wrong size on BubbleItemBox_OnHitRacer");
static_assert(offsetof(BubbleItemBox_OnHitRacer, RacerIndex) == 0x000000, "Member 'BubbleItemBox_OnHitRacer::RacerIndex' has a wrong offset!");

// Function UnionRun.BubbleItemBox.OnPlayForceFeedback
// 0x0004 (0x0004 - 0x0000)
struct BubbleItemBox_OnPlayForceFeedback final
{
public:
	int32                                         LocalPlayerIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleItemBox_OnPlayForceFeedback) == 0x000004, "Wrong alignment on BubbleItemBox_OnPlayForceFeedback");
static_assert(sizeof(BubbleItemBox_OnPlayForceFeedback) == 0x000004, "Wrong size on BubbleItemBox_OnPlayForceFeedback");
static_assert(offsetof(BubbleItemBox_OnPlayForceFeedback, LocalPlayerIndex) == 0x000000, "Member 'BubbleItemBox_OnPlayForceFeedback::LocalPlayerIndex' has a wrong offset!");

// Function UnionRun.BubbleItemBox.SetisReset
// 0x0001 (0x0001 - 0x0000)
struct BubbleItemBox_SetisReset final
{
public:
	bool                                          newParam;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleItemBox_SetisReset) == 0x000001, "Wrong alignment on BubbleItemBox_SetisReset");
static_assert(sizeof(BubbleItemBox_SetisReset) == 0x000001, "Wrong size on BubbleItemBox_SetisReset");
static_assert(offsetof(BubbleItemBox_SetisReset, newParam) == 0x000000, "Member 'BubbleItemBox_SetisReset::newParam' has a wrong offset!");

// Function UnionRun.BubbleItemBox.SetItemBoxType
// 0x0001 (0x0001 - 0x0000)
struct BubbleItemBox_SetItemBoxType final
{
public:
	EItemBoxType                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleItemBox_SetItemBoxType) == 0x000001, "Wrong alignment on BubbleItemBox_SetItemBoxType");
static_assert(sizeof(BubbleItemBox_SetItemBoxType) == 0x000001, "Wrong size on BubbleItemBox_SetItemBoxType");
static_assert(offsetof(BubbleItemBox_SetItemBoxType, Type) == 0x000000, "Member 'BubbleItemBox_SetItemBoxType::Type' has a wrong offset!");

// Function UnionRun.BubbleItemBox.SetItemBoxTypeEx
// 0x0001 (0x0001 - 0x0000)
struct BubbleItemBox_SetItemBoxTypeEx final
{
public:
	EItemBoxType                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleItemBox_SetItemBoxTypeEx) == 0x000001, "Wrong alignment on BubbleItemBox_SetItemBoxTypeEx");
static_assert(sizeof(BubbleItemBox_SetItemBoxTypeEx) == 0x000001, "Wrong size on BubbleItemBox_SetItemBoxTypeEx");
static_assert(offsetof(BubbleItemBox_SetItemBoxTypeEx, Type) == 0x000000, "Member 'BubbleItemBox_SetItemBoxTypeEx::Type' has a wrong offset!");

// Function UnionRun.BubbleItemBox.SetVisibleEnable
// 0x0001 (0x0001 - 0x0000)
struct BubbleItemBox_SetVisibleEnable final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleItemBox_SetVisibleEnable) == 0x000001, "Wrong alignment on BubbleItemBox_SetVisibleEnable");
static_assert(sizeof(BubbleItemBox_SetVisibleEnable) == 0x000001, "Wrong size on BubbleItemBox_SetVisibleEnable");
static_assert(offsetof(BubbleItemBox_SetVisibleEnable, IsEnable) == 0x000000, "Member 'BubbleItemBox_SetVisibleEnable::IsEnable' has a wrong offset!");

// Function UnionRun.BubbleItemBox.Update
// 0x0004 (0x0004 - 0x0000)
struct BubbleItemBox_Update final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleItemBox_Update) == 0x000004, "Wrong alignment on BubbleItemBox_Update");
static_assert(sizeof(BubbleItemBox_Update) == 0x000004, "Wrong size on BubbleItemBox_Update");
static_assert(offsetof(BubbleItemBox_Update, InDeltaTime) == 0x000000, "Member 'BubbleItemBox_Update::InDeltaTime' has a wrong offset!");

// Function UnionRun.BubbleItemBox.GetSoundPan
// 0x0001 (0x0001 - 0x0000)
struct BubbleItemBox_GetSoundPan final
{
public:
	ESoundPan                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleItemBox_GetSoundPan) == 0x000001, "Wrong alignment on BubbleItemBox_GetSoundPan");
static_assert(sizeof(BubbleItemBox_GetSoundPan) == 0x000001, "Wrong size on BubbleItemBox_GetSoundPan");
static_assert(offsetof(BubbleItemBox_GetSoundPan, ReturnValue) == 0x000000, "Member 'BubbleItemBox_GetSoundPan::ReturnValue' has a wrong offset!");

// Function UnionRun.SimpleTravelRingObject.GetTransformRingType
// 0x0001 (0x0001 - 0x0000)
struct SimpleTravelRingObject_GetTransformRingType final
{
public:
	ETransformRingType                            ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleTravelRingObject_GetTransformRingType) == 0x000001, "Wrong alignment on SimpleTravelRingObject_GetTransformRingType");
static_assert(sizeof(SimpleTravelRingObject_GetTransformRingType) == 0x000001, "Wrong size on SimpleTravelRingObject_GetTransformRingType");
static_assert(offsetof(SimpleTravelRingObject_GetTransformRingType, ReturnValue) == 0x000000, "Member 'SimpleTravelRingObject_GetTransformRingType::ReturnValue' has a wrong offset!");

// Function UnionRun.SimpleTravelRingObject.GetTravelRingSizeType
// 0x0001 (0x0001 - 0x0000)
struct SimpleTravelRingObject_GetTravelRingSizeType final
{
public:
	ETravelRingSizeType                           ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleTravelRingObject_GetTravelRingSizeType) == 0x000001, "Wrong alignment on SimpleTravelRingObject_GetTravelRingSizeType");
static_assert(sizeof(SimpleTravelRingObject_GetTravelRingSizeType) == 0x000001, "Wrong size on SimpleTravelRingObject_GetTravelRingSizeType");
static_assert(offsetof(SimpleTravelRingObject_GetTravelRingSizeType, ReturnValue) == 0x000000, "Member 'SimpleTravelRingObject_GetTravelRingSizeType::ReturnValue' has a wrong offset!");

// Function UnionRun.SimpleTravelRingObject.GetTravelRingType
// 0x0001 (0x0001 - 0x0000)
struct SimpleTravelRingObject_GetTravelRingType final
{
public:
	ETravelRingType                               ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleTravelRingObject_GetTravelRingType) == 0x000001, "Wrong alignment on SimpleTravelRingObject_GetTravelRingType");
static_assert(sizeof(SimpleTravelRingObject_GetTravelRingType) == 0x000001, "Wrong size on SimpleTravelRingObject_GetTravelRingType");
static_assert(offsetof(SimpleTravelRingObject_GetTravelRingType, ReturnValue) == 0x000000, "Member 'SimpleTravelRingObject_GetTravelRingType::ReturnValue' has a wrong offset!");

// Function UnionRun.SimpleTravelRingObject.SetTransformRingType
// 0x0001 (0x0001 - 0x0000)
struct SimpleTravelRingObject_SetTransformRingType final
{
public:
	ETransformRingType                            Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleTravelRingObject_SetTransformRingType) == 0x000001, "Wrong alignment on SimpleTravelRingObject_SetTransformRingType");
static_assert(sizeof(SimpleTravelRingObject_SetTransformRingType) == 0x000001, "Wrong size on SimpleTravelRingObject_SetTransformRingType");
static_assert(offsetof(SimpleTravelRingObject_SetTransformRingType, Type) == 0x000000, "Member 'SimpleTravelRingObject_SetTransformRingType::Type' has a wrong offset!");

// Function UnionRun.SimpleTravelRingObject.SetTravelRingSizeType
// 0x0001 (0x0001 - 0x0000)
struct SimpleTravelRingObject_SetTravelRingSizeType final
{
public:
	ETravelRingSizeType                           Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleTravelRingObject_SetTravelRingSizeType) == 0x000001, "Wrong alignment on SimpleTravelRingObject_SetTravelRingSizeType");
static_assert(sizeof(SimpleTravelRingObject_SetTravelRingSizeType) == 0x000001, "Wrong size on SimpleTravelRingObject_SetTravelRingSizeType");
static_assert(offsetof(SimpleTravelRingObject_SetTravelRingSizeType, Type) == 0x000000, "Member 'SimpleTravelRingObject_SetTravelRingSizeType::Type' has a wrong offset!");

// Function UnionRun.SimpleTravelRingObject.SetTravelRingType
// 0x0001 (0x0001 - 0x0000)
struct SimpleTravelRingObject_SetTravelRingType final
{
public:
	ETravelRingType                               Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleTravelRingObject_SetTravelRingType) == 0x000001, "Wrong alignment on SimpleTravelRingObject_SetTravelRingType");
static_assert(sizeof(SimpleTravelRingObject_SetTravelRingType) == 0x000001, "Wrong size on SimpleTravelRingObject_SetTravelRingType");
static_assert(offsetof(SimpleTravelRingObject_SetTravelRingType, Type) == 0x000000, "Member 'SimpleTravelRingObject_SetTravelRingType::Type' has a wrong offset!");

// Function UnionRun.BubbleRing.HitRacer
// 0x0004 (0x0004 - 0x0000)
struct BubbleRing_HitRacer final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleRing_HitRacer) == 0x000004, "Wrong alignment on BubbleRing_HitRacer");
static_assert(sizeof(BubbleRing_HitRacer) == 0x000004, "Wrong size on BubbleRing_HitRacer");
static_assert(offsetof(BubbleRing_HitRacer, RacerIndex) == 0x000000, "Member 'BubbleRing_HitRacer::RacerIndex' has a wrong offset!");

// Function UnionRun.BubbleRing.SetisReset
// 0x0001 (0x0001 - 0x0000)
struct BubbleRing_SetisReset final
{
public:
	bool                                          newParam;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleRing_SetisReset) == 0x000001, "Wrong alignment on BubbleRing_SetisReset");
static_assert(sizeof(BubbleRing_SetisReset) == 0x000001, "Wrong size on BubbleRing_SetisReset");
static_assert(offsetof(BubbleRing_SetisReset, newParam) == 0x000000, "Member 'BubbleRing_SetisReset::newParam' has a wrong offset!");

// Function UnionRun.BubbleRing.SetRingType
// 0x0001 (0x0001 - 0x0000)
struct BubbleRing_SetRingType final
{
public:
	EPackageRingType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleRing_SetRingType) == 0x000001, "Wrong alignment on BubbleRing_SetRingType");
static_assert(sizeof(BubbleRing_SetRingType) == 0x000001, "Wrong size on BubbleRing_SetRingType");
static_assert(offsetof(BubbleRing_SetRingType, Type) == 0x000000, "Member 'BubbleRing_SetRingType::Type' has a wrong offset!");

// Function UnionRun.BubbleRing.SetRingTypeEx
// 0x0001 (0x0001 - 0x0000)
struct BubbleRing_SetRingTypeEx final
{
public:
	EPackageRingType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleRing_SetRingTypeEx) == 0x000001, "Wrong alignment on BubbleRing_SetRingTypeEx");
static_assert(sizeof(BubbleRing_SetRingTypeEx) == 0x000001, "Wrong size on BubbleRing_SetRingTypeEx");
static_assert(offsetof(BubbleRing_SetRingTypeEx, Type) == 0x000000, "Member 'BubbleRing_SetRingTypeEx::Type' has a wrong offset!");

// Function UnionRun.BubbleRing.Update
// 0x0004 (0x0004 - 0x0000)
struct BubbleRing_Update final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleRing_Update) == 0x000004, "Wrong alignment on BubbleRing_Update");
static_assert(sizeof(BubbleRing_Update) == 0x000004, "Wrong size on BubbleRing_Update");
static_assert(offsetof(BubbleRing_Update, InDeltaTime) == 0x000000, "Member 'BubbleRing_Update::InDeltaTime' has a wrong offset!");

// Function UnionRun.RespotObject.UpdateRespotMatrix
// 0x0060 (0x0060 - 0x0000)
struct RespotObject_UpdateRespotMatrix final
{
public:
	struct FTransform                             NewTransform;                                      // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RespotObject_UpdateRespotMatrix) == 0x000010, "Wrong alignment on RespotObject_UpdateRespotMatrix");
static_assert(sizeof(RespotObject_UpdateRespotMatrix) == 0x000060, "Wrong size on RespotObject_UpdateRespotMatrix");
static_assert(offsetof(RespotObject_UpdateRespotMatrix, NewTransform) == 0x000000, "Member 'RespotObject_UpdateRespotMatrix::NewTransform' has a wrong offset!");

// Function UnionRun.CameraCollision.SetCameraData
// 0x0028 (0x0028 - 0x0000)
struct CameraCollision_SetCameraData final
{
public:
	int32                                         NewCameraId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewBoxSize;                                        // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResultCameraProductionType                   NewResultCameraType;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraCollision_SetCameraData) == 0x000008, "Wrong alignment on CameraCollision_SetCameraData");
static_assert(sizeof(CameraCollision_SetCameraData) == 0x000028, "Wrong size on CameraCollision_SetCameraData");
static_assert(offsetof(CameraCollision_SetCameraData, NewCameraId) == 0x000000, "Member 'CameraCollision_SetCameraData::NewCameraId' has a wrong offset!");
static_assert(offsetof(CameraCollision_SetCameraData, NewBoxSize) == 0x000008, "Member 'CameraCollision_SetCameraData::NewBoxSize' has a wrong offset!");
static_assert(offsetof(CameraCollision_SetCameraData, NewResultCameraType) == 0x000020, "Member 'CameraCollision_SetCameraData::NewResultCameraType' has a wrong offset!");

// Function UnionRun.CameraMessageInterface.NotifyCameraChanged
// 0x0028 (0x0028 - 0x0000)
struct CameraMessageInterface_NotifyCameraChanged final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PrevCamera;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewCamera;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            BlendSetting;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraMessageInterface_NotifyCameraChanged) == 0x000008, "Wrong alignment on CameraMessageInterface_NotifyCameraChanged");
static_assert(sizeof(CameraMessageInterface_NotifyCameraChanged) == 0x000028, "Wrong size on CameraMessageInterface_NotifyCameraChanged");
static_assert(offsetof(CameraMessageInterface_NotifyCameraChanged, PlayerControllerIndex) == 0x000000, "Member 'CameraMessageInterface_NotifyCameraChanged::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(CameraMessageInterface_NotifyCameraChanged, PrevCamera) == 0x000008, "Member 'CameraMessageInterface_NotifyCameraChanged::PrevCamera' has a wrong offset!");
static_assert(offsetof(CameraMessageInterface_NotifyCameraChanged, NewCamera) == 0x000010, "Member 'CameraMessageInterface_NotifyCameraChanged::NewCamera' has a wrong offset!");
static_assert(offsetof(CameraMessageInterface_NotifyCameraChanged, BlendSetting) == 0x000018, "Member 'CameraMessageInterface_NotifyCameraChanged::BlendSetting' has a wrong offset!");

// Function UnionRun.CarObject.OnHitCommonTriggerConflict
// 0x0060 (0x0060 - 0x0000)
struct CarObject_OnHitCommonTriggerConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CarObject_OnHitCommonTriggerConflict) == 0x000008, "Wrong alignment on CarObject_OnHitCommonTriggerConflict");
static_assert(sizeof(CarObject_OnHitCommonTriggerConflict) == 0x000060, "Wrong size on CarObject_OnHitCommonTriggerConflict");
static_assert(offsetof(CarObject_OnHitCommonTriggerConflict, HitInfo) == 0x000000, "Member 'CarObject_OnHitCommonTriggerConflict::HitInfo' has a wrong offset!");

// Function UnionRun.CarObject.OnHitEventTriggerConflict
// 0x0060 (0x0060 - 0x0000)
struct CarObject_OnHitEventTriggerConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CarObject_OnHitEventTriggerConflict) == 0x000008, "Wrong alignment on CarObject_OnHitEventTriggerConflict");
static_assert(sizeof(CarObject_OnHitEventTriggerConflict) == 0x000060, "Wrong size on CarObject_OnHitEventTriggerConflict");
static_assert(offsetof(CarObject_OnHitEventTriggerConflict, HitInfo) == 0x000000, "Member 'CarObject_OnHitEventTriggerConflict::HitInfo' has a wrong offset!");

// Function UnionRun.CarObject.OnHitRingTriggerConflict
// 0x0060 (0x0060 - 0x0000)
struct CarObject_OnHitRingTriggerConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CarObject_OnHitRingTriggerConflict) == 0x000008, "Wrong alignment on CarObject_OnHitRingTriggerConflict");
static_assert(sizeof(CarObject_OnHitRingTriggerConflict) == 0x000060, "Wrong size on CarObject_OnHitRingTriggerConflict");
static_assert(offsetof(CarObject_OnHitRingTriggerConflict, HitInfo) == 0x000000, "Member 'CarObject_OnHitRingTriggerConflict::HitInfo' has a wrong offset!");

// Function UnionRun.GUNHunterAnimInstance.SetIsAttackCharge
// 0x0001 (0x0001 - 0x0000)
struct GUNHunterAnimInstance_SetIsAttackCharge final
{
public:
	bool                                          isChange;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GUNHunterAnimInstance_SetIsAttackCharge) == 0x000001, "Wrong alignment on GUNHunterAnimInstance_SetIsAttackCharge");
static_assert(sizeof(GUNHunterAnimInstance_SetIsAttackCharge) == 0x000001, "Wrong size on GUNHunterAnimInstance_SetIsAttackCharge");
static_assert(offsetof(GUNHunterAnimInstance_SetIsAttackCharge, isChange) == 0x000000, "Member 'GUNHunterAnimInstance_SetIsAttackCharge::isChange' has a wrong offset!");

// Function UnionRun.GUNHunterAnimInstance.SetIsDead
// 0x0001 (0x0001 - 0x0000)
struct GUNHunterAnimInstance_SetIsDead final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GUNHunterAnimInstance_SetIsDead) == 0x000001, "Wrong alignment on GUNHunterAnimInstance_SetIsDead");
static_assert(sizeof(GUNHunterAnimInstance_SetIsDead) == 0x000001, "Wrong size on GUNHunterAnimInstance_SetIsDead");
static_assert(offsetof(GUNHunterAnimInstance_SetIsDead, flag) == 0x000000, "Member 'GUNHunterAnimInstance_SetIsDead::flag' has a wrong offset!");

// Function UnionRun.GUNHunterAnimInstance.IsShootState
// 0x0003 (0x0003 - 0x0000)
struct GUNHunterAnimInstance_IsShootState final
{
public:
	EGUNHunterShootState                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDown;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GUNHunterAnimInstance_IsShootState) == 0x000001, "Wrong alignment on GUNHunterAnimInstance_IsShootState");
static_assert(sizeof(GUNHunterAnimInstance_IsShootState) == 0x000003, "Wrong size on GUNHunterAnimInstance_IsShootState");
static_assert(offsetof(GUNHunterAnimInstance_IsShootState, State) == 0x000000, "Member 'GUNHunterAnimInstance_IsShootState::State' has a wrong offset!");
static_assert(offsetof(GUNHunterAnimInstance_IsShootState, isDown) == 0x000001, "Member 'GUNHunterAnimInstance_IsShootState::isDown' has a wrong offset!");
static_assert(offsetof(GUNHunterAnimInstance_IsShootState, ReturnValue) == 0x000002, "Member 'GUNHunterAnimInstance_IsShootState::ReturnValue' has a wrong offset!");

// Function UnionRun.GUNHunterAnimInstance.IsStartMotion
// 0x0002 (0x0002 - 0x0000)
struct GUNHunterAnimInstance_IsStartMotion final
{
public:
	EGUNHunterStartType                           Motion;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GUNHunterAnimInstance_IsStartMotion) == 0x000001, "Wrong alignment on GUNHunterAnimInstance_IsStartMotion");
static_assert(sizeof(GUNHunterAnimInstance_IsStartMotion) == 0x000002, "Wrong size on GUNHunterAnimInstance_IsStartMotion");
static_assert(offsetof(GUNHunterAnimInstance_IsStartMotion, Motion) == 0x000000, "Member 'GUNHunterAnimInstance_IsStartMotion::Motion' has a wrong offset!");
static_assert(offsetof(GUNHunterAnimInstance_IsStartMotion, ReturnValue) == 0x000001, "Member 'GUNHunterAnimInstance_IsStartMotion::ReturnValue' has a wrong offset!");

// Function UnionRun.CheatItem.Execute_AllRacerUseItemMode
// 0x0010 (0x0010 - 0x0000)
struct CheatItem_Execute_AllRacerUseItemMode final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatItem_Execute_AllRacerUseItemMode) == 0x000008, "Wrong alignment on CheatItem_Execute_AllRacerUseItemMode");
static_assert(sizeof(CheatItem_Execute_AllRacerUseItemMode) == 0x000010, "Wrong size on CheatItem_Execute_AllRacerUseItemMode");
static_assert(offsetof(CheatItem_Execute_AllRacerUseItemMode, args) == 0x000000, "Member 'CheatItem_Execute_AllRacerUseItemMode::args' has a wrong offset!");

// Function UnionRun.CheatItem.Execute_DebugItemCount
// 0x0010 (0x0010 - 0x0000)
struct CheatItem_Execute_DebugItemCount final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatItem_Execute_DebugItemCount) == 0x000008, "Wrong alignment on CheatItem_Execute_DebugItemCount");
static_assert(sizeof(CheatItem_Execute_DebugItemCount) == 0x000010, "Wrong size on CheatItem_Execute_DebugItemCount");
static_assert(offsetof(CheatItem_Execute_DebugItemCount, args) == 0x000000, "Member 'CheatItem_Execute_DebugItemCount::args' has a wrong offset!");

// Function UnionRun.CheatItem.Execute_DebugItemCountStop
// 0x0010 (0x0010 - 0x0000)
struct CheatItem_Execute_DebugItemCountStop final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatItem_Execute_DebugItemCountStop) == 0x000008, "Wrong alignment on CheatItem_Execute_DebugItemCountStop");
static_assert(sizeof(CheatItem_Execute_DebugItemCountStop) == 0x000010, "Wrong size on CheatItem_Execute_DebugItemCountStop");
static_assert(offsetof(CheatItem_Execute_DebugItemCountStop, args) == 0x000000, "Member 'CheatItem_Execute_DebugItemCountStop::args' has a wrong offset!");

// Function UnionRun.CheatItem.Execute_SetItemCapacity
// 0x0010 (0x0010 - 0x0000)
struct CheatItem_Execute_SetItemCapacity final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatItem_Execute_SetItemCapacity) == 0x000008, "Wrong alignment on CheatItem_Execute_SetItemCapacity");
static_assert(sizeof(CheatItem_Execute_SetItemCapacity) == 0x000010, "Wrong size on CheatItem_Execute_SetItemCapacity");
static_assert(offsetof(CheatItem_Execute_SetItemCapacity, args) == 0x000000, "Member 'CheatItem_Execute_SetItemCapacity::args' has a wrong offset!");

// Function UnionRun.CheatItem.Execute_SetItemHitToItem
// 0x0010 (0x0010 - 0x0000)
struct CheatItem_Execute_SetItemHitToItem final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatItem_Execute_SetItemHitToItem) == 0x000008, "Wrong alignment on CheatItem_Execute_SetItemHitToItem");
static_assert(sizeof(CheatItem_Execute_SetItemHitToItem) == 0x000010, "Wrong size on CheatItem_Execute_SetItemHitToItem");
static_assert(offsetof(CheatItem_Execute_SetItemHitToItem, args) == 0x000000, "Member 'CheatItem_Execute_SetItemHitToItem::args' has a wrong offset!");

// Function UnionRun.CheatItem.Execute_SetItemHitToMachine
// 0x0010 (0x0010 - 0x0000)
struct CheatItem_Execute_SetItemHitToMachine final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatItem_Execute_SetItemHitToMachine) == 0x000008, "Wrong alignment on CheatItem_Execute_SetItemHitToMachine");
static_assert(sizeof(CheatItem_Execute_SetItemHitToMachine) == 0x000010, "Wrong size on CheatItem_Execute_SetItemHitToMachine");
static_assert(offsetof(CheatItem_Execute_SetItemHitToMachine, args) == 0x000000, "Member 'CheatItem_Execute_SetItemHitToMachine::args' has a wrong offset!");

// Function UnionRun.CheatItem.Execute_SetItemRocketPunchForceNoReflect
// 0x0010 (0x0010 - 0x0000)
struct CheatItem_Execute_SetItemRocketPunchForceNoReflect final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatItem_Execute_SetItemRocketPunchForceNoReflect) == 0x000008, "Wrong alignment on CheatItem_Execute_SetItemRocketPunchForceNoReflect");
static_assert(sizeof(CheatItem_Execute_SetItemRocketPunchForceNoReflect) == 0x000010, "Wrong size on CheatItem_Execute_SetItemRocketPunchForceNoReflect");
static_assert(offsetof(CheatItem_Execute_SetItemRocketPunchForceNoReflect, args) == 0x000000, "Member 'CheatItem_Execute_SetItemRocketPunchForceNoReflect::args' has a wrong offset!");

// Function UnionRun.CheatItem.Execute_SetItemSlimeAutoUserInput
// 0x0010 (0x0010 - 0x0000)
struct CheatItem_Execute_SetItemSlimeAutoUserInput final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatItem_Execute_SetItemSlimeAutoUserInput) == 0x000008, "Wrong alignment on CheatItem_Execute_SetItemSlimeAutoUserInput");
static_assert(sizeof(CheatItem_Execute_SetItemSlimeAutoUserInput) == 0x000010, "Wrong size on CheatItem_Execute_SetItemSlimeAutoUserInput");
static_assert(offsetof(CheatItem_Execute_SetItemSlimeAutoUserInput, args) == 0x000000, "Member 'CheatItem_Execute_SetItemSlimeAutoUserInput::args' has a wrong offset!");

// Function UnionRun.CheatItem.Execute_ShowItemCount
// 0x0010 (0x0010 - 0x0000)
struct CheatItem_Execute_ShowItemCount final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatItem_Execute_ShowItemCount) == 0x000008, "Wrong alignment on CheatItem_Execute_ShowItemCount");
static_assert(sizeof(CheatItem_Execute_ShowItemCount) == 0x000010, "Wrong size on CheatItem_Execute_ShowItemCount");
static_assert(offsetof(CheatItem_Execute_ShowItemCount, args) == 0x000000, "Member 'CheatItem_Execute_ShowItemCount::args' has a wrong offset!");

// Function UnionRun.CheatPerformance.CheckRaceCheatManagerTick
// 0x0004 (0x0004 - 0x0000)
struct CheatPerformance_CheckRaceCheatManagerTick final
{
public:
	int32                                         on;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatPerformance_CheckRaceCheatManagerTick) == 0x000004, "Wrong alignment on CheatPerformance_CheckRaceCheatManagerTick");
static_assert(sizeof(CheatPerformance_CheckRaceCheatManagerTick) == 0x000004, "Wrong size on CheatPerformance_CheckRaceCheatManagerTick");
static_assert(offsetof(CheatPerformance_CheckRaceCheatManagerTick, on) == 0x000000, "Member 'CheatPerformance_CheckRaceCheatManagerTick::on' has a wrong offset!");

// Function UnionRun.CheatPerformance.Execute_CheatPerformanceSetSeq
// 0x0010 (0x0010 - 0x0000)
struct CheatPerformance_Execute_CheatPerformanceSetSeq final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatPerformance_Execute_CheatPerformanceSetSeq) == 0x000008, "Wrong alignment on CheatPerformance_Execute_CheatPerformanceSetSeq");
static_assert(sizeof(CheatPerformance_Execute_CheatPerformanceSetSeq) == 0x000010, "Wrong size on CheatPerformance_Execute_CheatPerformanceSetSeq");
static_assert(offsetof(CheatPerformance_Execute_CheatPerformanceSetSeq, args) == 0x000000, "Member 'CheatPerformance_Execute_CheatPerformanceSetSeq::args' has a wrong offset!");

// Function UnionRun.CheatPerformance.Execute_DebugRayCast
// 0x0010 (0x0010 - 0x0000)
struct CheatPerformance_Execute_DebugRayCast final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatPerformance_Execute_DebugRayCast) == 0x000008, "Wrong alignment on CheatPerformance_Execute_DebugRayCast");
static_assert(sizeof(CheatPerformance_Execute_DebugRayCast) == 0x000010, "Wrong size on CheatPerformance_Execute_DebugRayCast");
static_assert(offsetof(CheatPerformance_Execute_DebugRayCast, args) == 0x000000, "Member 'CheatPerformance_Execute_DebugRayCast::args' has a wrong offset!");

// Function UnionRun.CheatPerformance.Execute_DebugRayCastStop
// 0x0010 (0x0010 - 0x0000)
struct CheatPerformance_Execute_DebugRayCastStop final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatPerformance_Execute_DebugRayCastStop) == 0x000008, "Wrong alignment on CheatPerformance_Execute_DebugRayCastStop");
static_assert(sizeof(CheatPerformance_Execute_DebugRayCastStop) == 0x000010, "Wrong size on CheatPerformance_Execute_DebugRayCastStop");
static_assert(offsetof(CheatPerformance_Execute_DebugRayCastStop, args) == 0x000000, "Member 'CheatPerformance_Execute_DebugRayCastStop::args' has a wrong offset!");

// Function UnionRun.CheatPerformance.Execute_RaceTestConfig_SetAutoUnrealInsights
// 0x0010 (0x0010 - 0x0000)
struct CheatPerformance_Execute_RaceTestConfig_SetAutoUnrealInsights final
{
public:
	TArray<class FString>                         args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatPerformance_Execute_RaceTestConfig_SetAutoUnrealInsights) == 0x000008, "Wrong alignment on CheatPerformance_Execute_RaceTestConfig_SetAutoUnrealInsights");
static_assert(sizeof(CheatPerformance_Execute_RaceTestConfig_SetAutoUnrealInsights) == 0x000010, "Wrong size on CheatPerformance_Execute_RaceTestConfig_SetAutoUnrealInsights");
static_assert(offsetof(CheatPerformance_Execute_RaceTestConfig_SetAutoUnrealInsights, args) == 0x000000, "Member 'CheatPerformance_Execute_RaceTestConfig_SetAutoUnrealInsights::args' has a wrong offset!");

// Function UnionRun.CheatRaceCommon.EnableSplitScreen
// 0x0001 (0x0001 - 0x0000)
struct CheatRaceCommon_EnableSplitScreen final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatRaceCommon_EnableSplitScreen) == 0x000001, "Wrong alignment on CheatRaceCommon_EnableSplitScreen");
static_assert(sizeof(CheatRaceCommon_EnableSplitScreen) == 0x000001, "Wrong size on CheatRaceCommon_EnableSplitScreen");
static_assert(offsetof(CheatRaceCommon_EnableSplitScreen, bInEnable) == 0x000000, "Member 'CheatRaceCommon_EnableSplitScreen::bInEnable' has a wrong offset!");

// Function UnionRun.CheatRaceCommon.SetVisibleUnionRunParam
// 0x0001 (0x0001 - 0x0000)
struct CheatRaceCommon_SetVisibleUnionRunParam final
{
public:
	bool                                          bInVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatRaceCommon_SetVisibleUnionRunParam) == 0x000001, "Wrong alignment on CheatRaceCommon_SetVisibleUnionRunParam");
static_assert(sizeof(CheatRaceCommon_SetVisibleUnionRunParam) == 0x000001, "Wrong size on CheatRaceCommon_SetVisibleUnionRunParam");
static_assert(offsetof(CheatRaceCommon_SetVisibleUnionRunParam, bInVisible) == 0x000000, "Member 'CheatRaceCommon_SetVisibleUnionRunParam::bInVisible' has a wrong offset!");

// Function UnionRun.PauseManager.SetGamePaused
// 0x0008 (0x0008 - 0x0000)
struct PauseManager_SetGamePaused final
{
public:
	bool                                          Paused;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RacerIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseManager_SetGamePaused) == 0x000004, "Wrong alignment on PauseManager_SetGamePaused");
static_assert(sizeof(PauseManager_SetGamePaused) == 0x000008, "Wrong size on PauseManager_SetGamePaused");
static_assert(offsetof(PauseManager_SetGamePaused, Paused) == 0x000000, "Member 'PauseManager_SetGamePaused::Paused' has a wrong offset!");
static_assert(offsetof(PauseManager_SetGamePaused, RacerIndex) == 0x000004, "Member 'PauseManager_SetGamePaused::RacerIndex' has a wrong offset!");

// Function UnionRun.PauseManager.SetGamePauseOwnerRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct PauseManager_SetGamePauseOwnerRacerIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseManager_SetGamePauseOwnerRacerIndex) == 0x000004, "Wrong alignment on PauseManager_SetGamePauseOwnerRacerIndex");
static_assert(sizeof(PauseManager_SetGamePauseOwnerRacerIndex) == 0x000004, "Wrong size on PauseManager_SetGamePauseOwnerRacerIndex");
static_assert(offsetof(PauseManager_SetGamePauseOwnerRacerIndex, Index_0) == 0x000000, "Member 'PauseManager_SetGamePauseOwnerRacerIndex::Index_0' has a wrong offset!");

// Function UnionRun.PauseManager.SetIsOnlineMode
// 0x0001 (0x0001 - 0x0000)
struct PauseManager_SetIsOnlineMode final
{
public:
	bool                                          IsOnlineMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseManager_SetIsOnlineMode) == 0x000001, "Wrong alignment on PauseManager_SetIsOnlineMode");
static_assert(sizeof(PauseManager_SetIsOnlineMode) == 0x000001, "Wrong size on PauseManager_SetIsOnlineMode");
static_assert(offsetof(PauseManager_SetIsOnlineMode, IsOnlineMode) == 0x000000, "Member 'PauseManager_SetIsOnlineMode::IsOnlineMode' has a wrong offset!");

// Function UnionRun.PauseManager.GetGamePauseOwnerRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct PauseManager_GetGamePauseOwnerRacerIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseManager_GetGamePauseOwnerRacerIndex) == 0x000004, "Wrong alignment on PauseManager_GetGamePauseOwnerRacerIndex");
static_assert(sizeof(PauseManager_GetGamePauseOwnerRacerIndex) == 0x000004, "Wrong size on PauseManager_GetGamePauseOwnerRacerIndex");
static_assert(offsetof(PauseManager_GetGamePauseOwnerRacerIndex, ReturnValue) == 0x000000, "Member 'PauseManager_GetGamePauseOwnerRacerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.PauseManager.IsGamePaused
// 0x0001 (0x0001 - 0x0000)
struct PauseManager_IsGamePaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseManager_IsGamePaused) == 0x000001, "Wrong alignment on PauseManager_IsGamePaused");
static_assert(sizeof(PauseManager_IsGamePaused) == 0x000001, "Wrong size on PauseManager_IsGamePaused");
static_assert(offsetof(PauseManager_IsGamePaused, ReturnValue) == 0x000000, "Member 'PauseManager_IsGamePaused::ReturnValue' has a wrong offset!");

// Function UnionRun.PauseManager.IsGamePauseOwnerGoaled
// 0x0001 (0x0001 - 0x0000)
struct PauseManager_IsGamePauseOwnerGoaled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseManager_IsGamePauseOwnerGoaled) == 0x000001, "Wrong alignment on PauseManager_IsGamePauseOwnerGoaled");
static_assert(sizeof(PauseManager_IsGamePauseOwnerGoaled) == 0x000001, "Wrong size on PauseManager_IsGamePauseOwnerGoaled");
static_assert(offsetof(PauseManager_IsGamePauseOwnerGoaled, ReturnValue) == 0x000000, "Member 'PauseManager_IsGamePauseOwnerGoaled::ReturnValue' has a wrong offset!");

// Function UnionRun.PauseManager.IsOnlineMode
// 0x0001 (0x0001 - 0x0000)
struct PauseManager_IsOnlineMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseManager_IsOnlineMode) == 0x000001, "Wrong alignment on PauseManager_IsOnlineMode");
static_assert(sizeof(PauseManager_IsOnlineMode) == 0x000001, "Wrong size on PauseManager_IsOnlineMode");
static_assert(offsetof(PauseManager_IsOnlineMode, ReturnValue) == 0x000000, "Member 'PauseManager_IsOnlineMode::ReturnValue' has a wrong offset!");

// Function UnionRun.ColliderComponent.SetCheckScaleEnabled
// 0x0001 (0x0001 - 0x0000)
struct ColliderComponent_SetCheckScaleEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColliderComponent_SetCheckScaleEnabled) == 0x000001, "Wrong alignment on ColliderComponent_SetCheckScaleEnabled");
static_assert(sizeof(ColliderComponent_SetCheckScaleEnabled) == 0x000001, "Wrong size on ColliderComponent_SetCheckScaleEnabled");
static_assert(offsetof(ColliderComponent_SetCheckScaleEnabled, Enable) == 0x000000, "Member 'ColliderComponent_SetCheckScaleEnabled::Enable' has a wrong offset!");

// Function UnionRun.ColliderComponent.SetCollisionProcessEnabled
// 0x0001 (0x0001 - 0x0000)
struct ColliderComponent_SetCollisionProcessEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColliderComponent_SetCollisionProcessEnabled) == 0x000001, "Wrong alignment on ColliderComponent_SetCollisionProcessEnabled");
static_assert(sizeof(ColliderComponent_SetCollisionProcessEnabled) == 0x000001, "Wrong size on ColliderComponent_SetCollisionProcessEnabled");
static_assert(offsetof(ColliderComponent_SetCollisionProcessEnabled, Enable) == 0x000000, "Member 'ColliderComponent_SetCollisionProcessEnabled::Enable' has a wrong offset!");

// Function UnionRun.ColliderComponent.SetObjectCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct ColliderComponent_SetObjectCollisionEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColliderComponent_SetObjectCollisionEnabled) == 0x000001, "Wrong alignment on ColliderComponent_SetObjectCollisionEnabled");
static_assert(sizeof(ColliderComponent_SetObjectCollisionEnabled) == 0x000001, "Wrong size on ColliderComponent_SetObjectCollisionEnabled");
static_assert(offsetof(ColliderComponent_SetObjectCollisionEnabled, Enable) == 0x000000, "Member 'ColliderComponent_SetObjectCollisionEnabled::Enable' has a wrong offset!");

// Function UnionRun.ColliderComponent.SetOverrideTransform
// 0x0060 (0x0060 - 0x0000)
struct ColliderComponent_SetOverrideTransform final
{
public:
	struct FTransform                             trans;                                             // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColliderComponent_SetOverrideTransform) == 0x000010, "Wrong alignment on ColliderComponent_SetOverrideTransform");
static_assert(sizeof(ColliderComponent_SetOverrideTransform) == 0x000060, "Wrong size on ColliderComponent_SetOverrideTransform");
static_assert(offsetof(ColliderComponent_SetOverrideTransform, trans) == 0x000000, "Member 'ColliderComponent_SetOverrideTransform::trans' has a wrong offset!");

// Function UnionRun.ColliderComponent.SetScaleEnabled
// 0x0001 (0x0001 - 0x0000)
struct ColliderComponent_SetScaleEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColliderComponent_SetScaleEnabled) == 0x000001, "Wrong alignment on ColliderComponent_SetScaleEnabled");
static_assert(sizeof(ColliderComponent_SetScaleEnabled) == 0x000001, "Wrong size on ColliderComponent_SetScaleEnabled");
static_assert(offsetof(ColliderComponent_SetScaleEnabled, Enable) == 0x000000, "Member 'ColliderComponent_SetScaleEnabled::Enable' has a wrong offset!");

// Function UnionRun.ColliderComponent.SetSurfaceFlag
// 0x001F (0x001F - 0x0000)
struct ColliderComponent_SetSurfaceFlag final
{
public:
	struct FUnionSurfaceFlag                      flag;                                              // 0x0000(0x001F)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColliderComponent_SetSurfaceFlag) == 0x000001, "Wrong alignment on ColliderComponent_SetSurfaceFlag");
static_assert(sizeof(ColliderComponent_SetSurfaceFlag) == 0x00001F, "Wrong size on ColliderComponent_SetSurfaceFlag");
static_assert(offsetof(ColliderComponent_SetSurfaceFlag, flag) == 0x000000, "Member 'ColliderComponent_SetSurfaceFlag::flag' has a wrong offset!");

// Function UnionRun.ColliderComponent.SetSurfaceType
// 0x0001 (0x0001 - 0x0000)
struct ColliderComponent_SetSurfaceType final
{
public:
	EUnionSurfaceType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColliderComponent_SetSurfaceType) == 0x000001, "Wrong alignment on ColliderComponent_SetSurfaceType");
static_assert(sizeof(ColliderComponent_SetSurfaceType) == 0x000001, "Wrong size on ColliderComponent_SetSurfaceType");
static_assert(offsetof(ColliderComponent_SetSurfaceType, Type) == 0x000000, "Member 'ColliderComponent_SetSurfaceType::Type' has a wrong offset!");

// Function UnionRun.ColliderComponent.GetCollisionProcessEnabled
// 0x0001 (0x0001 - 0x0000)
struct ColliderComponent_GetCollisionProcessEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColliderComponent_GetCollisionProcessEnabled) == 0x000001, "Wrong alignment on ColliderComponent_GetCollisionProcessEnabled");
static_assert(sizeof(ColliderComponent_GetCollisionProcessEnabled) == 0x000001, "Wrong size on ColliderComponent_GetCollisionProcessEnabled");
static_assert(offsetof(ColliderComponent_GetCollisionProcessEnabled, ReturnValue) == 0x000000, "Member 'ColliderComponent_GetCollisionProcessEnabled::ReturnValue' has a wrong offset!");

// Function UnionRun.ColliderComponent.GetFinalTransform
// 0x0060 (0x0060 - 0x0000)
struct ColliderComponent_GetFinalTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColliderComponent_GetFinalTransform) == 0x000010, "Wrong alignment on ColliderComponent_GetFinalTransform");
static_assert(sizeof(ColliderComponent_GetFinalTransform) == 0x000060, "Wrong size on ColliderComponent_GetFinalTransform");
static_assert(offsetof(ColliderComponent_GetFinalTransform, ReturnValue) == 0x000000, "Member 'ColliderComponent_GetFinalTransform::ReturnValue' has a wrong offset!");

// Function UnionRun.ColliderComponent.GetObjectCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct ColliderComponent_GetObjectCollisionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColliderComponent_GetObjectCollisionEnabled) == 0x000001, "Wrong alignment on ColliderComponent_GetObjectCollisionEnabled");
static_assert(sizeof(ColliderComponent_GetObjectCollisionEnabled) == 0x000001, "Wrong size on ColliderComponent_GetObjectCollisionEnabled");
static_assert(offsetof(ColliderComponent_GetObjectCollisionEnabled, ReturnValue) == 0x000000, "Member 'ColliderComponent_GetObjectCollisionEnabled::ReturnValue' has a wrong offset!");

// Function UnionRun.ColliderComponent.GetOverrideTransform
// 0x0060 (0x0060 - 0x0000)
struct ColliderComponent_GetOverrideTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColliderComponent_GetOverrideTransform) == 0x000010, "Wrong alignment on ColliderComponent_GetOverrideTransform");
static_assert(sizeof(ColliderComponent_GetOverrideTransform) == 0x000060, "Wrong size on ColliderComponent_GetOverrideTransform");
static_assert(offsetof(ColliderComponent_GetOverrideTransform, ReturnValue) == 0x000000, "Member 'ColliderComponent_GetOverrideTransform::ReturnValue' has a wrong offset!");

// Function UnionRun.ColliderComponent.GetScaleEnabled
// 0x0001 (0x0001 - 0x0000)
struct ColliderComponent_GetScaleEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColliderComponent_GetScaleEnabled) == 0x000001, "Wrong alignment on ColliderComponent_GetScaleEnabled");
static_assert(sizeof(ColliderComponent_GetScaleEnabled) == 0x000001, "Wrong size on ColliderComponent_GetScaleEnabled");
static_assert(offsetof(ColliderComponent_GetScaleEnabled, ReturnValue) == 0x000000, "Member 'ColliderComponent_GetScaleEnabled::ReturnValue' has a wrong offset!");

// Function UnionRun.CollisionBaseComponent.SetCollisionEnabled
// 0x0002 (0x0002 - 0x0000)
struct CollisionBaseComponent_SetCollisionEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUpdate;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionBaseComponent_SetCollisionEnabled) == 0x000001, "Wrong alignment on CollisionBaseComponent_SetCollisionEnabled");
static_assert(sizeof(CollisionBaseComponent_SetCollisionEnabled) == 0x000002, "Wrong size on CollisionBaseComponent_SetCollisionEnabled");
static_assert(offsetof(CollisionBaseComponent_SetCollisionEnabled, bEnabled) == 0x000000, "Member 'CollisionBaseComponent_SetCollisionEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(CollisionBaseComponent_SetCollisionEnabled, bForceUpdate) == 0x000001, "Member 'CollisionBaseComponent_SetCollisionEnabled::bForceUpdate' has a wrong offset!");

// Function UnionRun.CollisionBaseComponent.SetDomainNumber
// 0x0001 (0x0001 - 0x0000)
struct CollisionBaseComponent_SetDomainNumber final
{
public:
	EDomainNumber                                 domain;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionBaseComponent_SetDomainNumber) == 0x000001, "Wrong alignment on CollisionBaseComponent_SetDomainNumber");
static_assert(sizeof(CollisionBaseComponent_SetDomainNumber) == 0x000001, "Wrong size on CollisionBaseComponent_SetDomainNumber");
static_assert(offsetof(CollisionBaseComponent_SetDomainNumber, domain) == 0x000000, "Member 'CollisionBaseComponent_SetDomainNumber::domain' has a wrong offset!");

// Function UnionRun.CollisionBaseComponent.SetLocalScalingUE
// 0x0018 (0x0018 - 0x0000)
struct CollisionBaseComponent_SetLocalScalingUE final
{
public:
	struct FVector                                Scale;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionBaseComponent_SetLocalScalingUE) == 0x000008, "Wrong alignment on CollisionBaseComponent_SetLocalScalingUE");
static_assert(sizeof(CollisionBaseComponent_SetLocalScalingUE) == 0x000018, "Wrong size on CollisionBaseComponent_SetLocalScalingUE");
static_assert(offsetof(CollisionBaseComponent_SetLocalScalingUE, Scale) == 0x000000, "Member 'CollisionBaseComponent_SetLocalScalingUE::Scale' has a wrong offset!");

// Function UnionRun.CollisionBaseComponent.SetOverrideTransform
// 0x0060 (0x0060 - 0x0000)
struct CollisionBaseComponent_SetOverrideTransform final
{
public:
	struct FTransform                             trans;                                             // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionBaseComponent_SetOverrideTransform) == 0x000010, "Wrong alignment on CollisionBaseComponent_SetOverrideTransform");
static_assert(sizeof(CollisionBaseComponent_SetOverrideTransform) == 0x000060, "Wrong size on CollisionBaseComponent_SetOverrideTransform");
static_assert(offsetof(CollisionBaseComponent_SetOverrideTransform, trans) == 0x000000, "Member 'CollisionBaseComponent_SetOverrideTransform::trans' has a wrong offset!");

// Function UnionRun.CollisionBaseComponent.GetLocalScalingUE
// 0x0018 (0x0018 - 0x0000)
struct CollisionBaseComponent_GetLocalScalingUE final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionBaseComponent_GetLocalScalingUE) == 0x000008, "Wrong alignment on CollisionBaseComponent_GetLocalScalingUE");
static_assert(sizeof(CollisionBaseComponent_GetLocalScalingUE) == 0x000018, "Wrong size on CollisionBaseComponent_GetLocalScalingUE");
static_assert(offsetof(CollisionBaseComponent_GetLocalScalingUE, ReturnValue) == 0x000000, "Member 'CollisionBaseComponent_GetLocalScalingUE::ReturnValue' has a wrong offset!");

// Function UnionRun.CollisionBaseComponent.GetTransform
// 0x0060 (0x0060 - 0x0000)
struct CollisionBaseComponent_GetTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionBaseComponent_GetTransform) == 0x000010, "Wrong alignment on CollisionBaseComponent_GetTransform");
static_assert(sizeof(CollisionBaseComponent_GetTransform) == 0x000060, "Wrong size on CollisionBaseComponent_GetTransform");
static_assert(offsetof(CollisionBaseComponent_GetTransform, ReturnValue) == 0x000000, "Member 'CollisionBaseComponent_GetTransform::ReturnValue' has a wrong offset!");

// Function UnionRun.CollisionBaseComponent.IsCollisionAvailable
// 0x0001 (0x0001 - 0x0000)
struct CollisionBaseComponent_IsCollisionAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionBaseComponent_IsCollisionAvailable) == 0x000001, "Wrong alignment on CollisionBaseComponent_IsCollisionAvailable");
static_assert(sizeof(CollisionBaseComponent_IsCollisionAvailable) == 0x000001, "Wrong size on CollisionBaseComponent_IsCollisionAvailable");
static_assert(offsetof(CollisionBaseComponent_IsCollisionAvailable, ReturnValue) == 0x000000, "Member 'CollisionBaseComponent_IsCollisionAvailable::ReturnValue' has a wrong offset!");

// Function UnionRun.CollisionBaseComponent.IsCollisionEnabled
// 0x0001 (0x0001 - 0x0000)
struct CollisionBaseComponent_IsCollisionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionBaseComponent_IsCollisionEnabled) == 0x000001, "Wrong alignment on CollisionBaseComponent_IsCollisionEnabled");
static_assert(sizeof(CollisionBaseComponent_IsCollisionEnabled) == 0x000001, "Wrong size on CollisionBaseComponent_IsCollisionEnabled");
static_assert(offsetof(CollisionBaseComponent_IsCollisionEnabled, ReturnValue) == 0x000000, "Member 'CollisionBaseComponent_IsCollisionEnabled::ReturnValue' has a wrong offset!");

// Function UnionRun.CollisionMessageInterface.NotifyTriggerConflict
// 0x0060 (0x0060 - 0x0000)
struct CollisionMessageInterface_NotifyTriggerConflict final
{
public:
	struct FHitTriggerInfo                        Info;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionMessageInterface_NotifyTriggerConflict) == 0x000008, "Wrong alignment on CollisionMessageInterface_NotifyTriggerConflict");
static_assert(sizeof(CollisionMessageInterface_NotifyTriggerConflict) == 0x000060, "Wrong size on CollisionMessageInterface_NotifyTriggerConflict");
static_assert(offsetof(CollisionMessageInterface_NotifyTriggerConflict, Info) == 0x000000, "Member 'CollisionMessageInterface_NotifyTriggerConflict::Info' has a wrong offset!");

// Function UnionRun.RaceUISubPlayerName.GetGhostPfId
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubPlayerName_GetGhostPfId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubPlayerName_GetGhostPfId) == 0x000004, "Wrong alignment on RaceUISubPlayerName_GetGhostPfId");
static_assert(sizeof(RaceUISubPlayerName_GetGhostPfId) == 0x000004, "Wrong size on RaceUISubPlayerName_GetGhostPfId");
static_assert(offsetof(RaceUISubPlayerName_GetGhostPfId, ReturnValue) == 0x000000, "Member 'RaceUISubPlayerName_GetGhostPfId::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemBlackBombBaseObject.OnTriggerConflict
// 0x0060 (0x0060 - 0x0000)
struct ItemBlackBombBaseObject_OnTriggerConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBlackBombBaseObject_OnTriggerConflict) == 0x000008, "Wrong alignment on ItemBlackBombBaseObject_OnTriggerConflict");
static_assert(sizeof(ItemBlackBombBaseObject_OnTriggerConflict) == 0x000060, "Wrong size on ItemBlackBombBaseObject_OnTriggerConflict");
static_assert(offsetof(ItemBlackBombBaseObject_OnTriggerConflict, HitInfo) == 0x000000, "Member 'ItemBlackBombBaseObject_OnTriggerConflict::HitInfo' has a wrong offset!");

// Function UnionRun.CourseSequenceActorSpawner.GetSpawnActor
// 0x0010 (0x0010 - 0x0000)
struct CourseSequenceActorSpawner_GetSpawnActor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CourseSequenceActorSpawner_GetSpawnActor) == 0x000008, "Wrong alignment on CourseSequenceActorSpawner_GetSpawnActor");
static_assert(sizeof(CourseSequenceActorSpawner_GetSpawnActor) == 0x000010, "Wrong size on CourseSequenceActorSpawner_GetSpawnActor");
static_assert(offsetof(CourseSequenceActorSpawner_GetSpawnActor, Index_0) == 0x000000, "Member 'CourseSequenceActorSpawner_GetSpawnActor::Index_0' has a wrong offset!");
static_assert(offsetof(CourseSequenceActorSpawner_GetSpawnActor, ReturnValue) == 0x000008, "Member 'CourseSequenceActorSpawner_GetSpawnActor::ReturnValue' has a wrong offset!");

// Function UnionRun.CourseSequenceActorSpawner.SetSize
// 0x0018 (0x0018 - 0x0000)
struct CourseSequenceActorSpawner_SetSize final
{
public:
	struct FVector                                Size;                                              // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CourseSequenceActorSpawner_SetSize) == 0x000008, "Wrong alignment on CourseSequenceActorSpawner_SetSize");
static_assert(sizeof(CourseSequenceActorSpawner_SetSize) == 0x000018, "Wrong size on CourseSequenceActorSpawner_SetSize");
static_assert(offsetof(CourseSequenceActorSpawner_SetSize, Size) == 0x000000, "Member 'CourseSequenceActorSpawner_SetSize::Size' has a wrong offset!");

// Function UnionRun.DarkGaiaPhoenixAnimInstance.GetIsPhase1Attack
// 0x0001 (0x0001 - 0x0000)
struct DarkGaiaPhoenixAnimInstance_GetIsPhase1Attack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkGaiaPhoenixAnimInstance_GetIsPhase1Attack) == 0x000001, "Wrong alignment on DarkGaiaPhoenixAnimInstance_GetIsPhase1Attack");
static_assert(sizeof(DarkGaiaPhoenixAnimInstance_GetIsPhase1Attack) == 0x000001, "Wrong size on DarkGaiaPhoenixAnimInstance_GetIsPhase1Attack");
static_assert(offsetof(DarkGaiaPhoenixAnimInstance_GetIsPhase1Attack, ReturnValue) == 0x000000, "Member 'DarkGaiaPhoenixAnimInstance_GetIsPhase1Attack::ReturnValue' has a wrong offset!");

// Function UnionRun.DarkGaiaPhoenixAnimInstance.GetIsPhase2Move
// 0x0001 (0x0001 - 0x0000)
struct DarkGaiaPhoenixAnimInstance_GetIsPhase2Move final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkGaiaPhoenixAnimInstance_GetIsPhase2Move) == 0x000001, "Wrong alignment on DarkGaiaPhoenixAnimInstance_GetIsPhase2Move");
static_assert(sizeof(DarkGaiaPhoenixAnimInstance_GetIsPhase2Move) == 0x000001, "Wrong size on DarkGaiaPhoenixAnimInstance_GetIsPhase2Move");
static_assert(offsetof(DarkGaiaPhoenixAnimInstance_GetIsPhase2Move, ReturnValue) == 0x000000, "Member 'DarkGaiaPhoenixAnimInstance_GetIsPhase2Move::ReturnValue' has a wrong offset!");

// Function UnionRun.DarkGaiaPhoenixAnimInstance.GetIsPhase3Attack
// 0x0001 (0x0001 - 0x0000)
struct DarkGaiaPhoenixAnimInstance_GetIsPhase3Attack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkGaiaPhoenixAnimInstance_GetIsPhase3Attack) == 0x000001, "Wrong alignment on DarkGaiaPhoenixAnimInstance_GetIsPhase3Attack");
static_assert(sizeof(DarkGaiaPhoenixAnimInstance_GetIsPhase3Attack) == 0x000001, "Wrong size on DarkGaiaPhoenixAnimInstance_GetIsPhase3Attack");
static_assert(offsetof(DarkGaiaPhoenixAnimInstance_GetIsPhase3Attack, ReturnValue) == 0x000000, "Member 'DarkGaiaPhoenixAnimInstance_GetIsPhase3Attack::ReturnValue' has a wrong offset!");

// Function UnionRun.DarkGaiaPhoenixAnimInstance.GetIsPhase3Mirror
// 0x0001 (0x0001 - 0x0000)
struct DarkGaiaPhoenixAnimInstance_GetIsPhase3Mirror final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkGaiaPhoenixAnimInstance_GetIsPhase3Mirror) == 0x000001, "Wrong alignment on DarkGaiaPhoenixAnimInstance_GetIsPhase3Mirror");
static_assert(sizeof(DarkGaiaPhoenixAnimInstance_GetIsPhase3Mirror) == 0x000001, "Wrong size on DarkGaiaPhoenixAnimInstance_GetIsPhase3Mirror");
static_assert(offsetof(DarkGaiaPhoenixAnimInstance_GetIsPhase3Mirror, ReturnValue) == 0x000000, "Member 'DarkGaiaPhoenixAnimInstance_GetIsPhase3Mirror::ReturnValue' has a wrong offset!");

// Function UnionRun.DarkGaiaPhoenixAnimInstance.GetIsPhase3Move
// 0x0001 (0x0001 - 0x0000)
struct DarkGaiaPhoenixAnimInstance_GetIsPhase3Move final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkGaiaPhoenixAnimInstance_GetIsPhase3Move) == 0x000001, "Wrong alignment on DarkGaiaPhoenixAnimInstance_GetIsPhase3Move");
static_assert(sizeof(DarkGaiaPhoenixAnimInstance_GetIsPhase3Move) == 0x000001, "Wrong size on DarkGaiaPhoenixAnimInstance_GetIsPhase3Move");
static_assert(offsetof(DarkGaiaPhoenixAnimInstance_GetIsPhase3Move, ReturnValue) == 0x000000, "Member 'DarkGaiaPhoenixAnimInstance_GetIsPhase3Move::ReturnValue' has a wrong offset!");

// Function UnionRun.DarkGaiaPhoenixAnimInstance.SetIsPhase1Attack
// 0x0001 (0x0001 - 0x0000)
struct DarkGaiaPhoenixAnimInstance_SetIsPhase1Attack final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkGaiaPhoenixAnimInstance_SetIsPhase1Attack) == 0x000001, "Wrong alignment on DarkGaiaPhoenixAnimInstance_SetIsPhase1Attack");
static_assert(sizeof(DarkGaiaPhoenixAnimInstance_SetIsPhase1Attack) == 0x000001, "Wrong size on DarkGaiaPhoenixAnimInstance_SetIsPhase1Attack");
static_assert(offsetof(DarkGaiaPhoenixAnimInstance_SetIsPhase1Attack, flag) == 0x000000, "Member 'DarkGaiaPhoenixAnimInstance_SetIsPhase1Attack::flag' has a wrong offset!");

// Function UnionRun.DarkGaiaPhoenixAnimInstance.SetIsPhase2Move
// 0x0001 (0x0001 - 0x0000)
struct DarkGaiaPhoenixAnimInstance_SetIsPhase2Move final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkGaiaPhoenixAnimInstance_SetIsPhase2Move) == 0x000001, "Wrong alignment on DarkGaiaPhoenixAnimInstance_SetIsPhase2Move");
static_assert(sizeof(DarkGaiaPhoenixAnimInstance_SetIsPhase2Move) == 0x000001, "Wrong size on DarkGaiaPhoenixAnimInstance_SetIsPhase2Move");
static_assert(offsetof(DarkGaiaPhoenixAnimInstance_SetIsPhase2Move, flag) == 0x000000, "Member 'DarkGaiaPhoenixAnimInstance_SetIsPhase2Move::flag' has a wrong offset!");

// Function UnionRun.DarkGaiaPhoenixAnimInstance.SetIsPhase3Attack
// 0x0001 (0x0001 - 0x0000)
struct DarkGaiaPhoenixAnimInstance_SetIsPhase3Attack final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkGaiaPhoenixAnimInstance_SetIsPhase3Attack) == 0x000001, "Wrong alignment on DarkGaiaPhoenixAnimInstance_SetIsPhase3Attack");
static_assert(sizeof(DarkGaiaPhoenixAnimInstance_SetIsPhase3Attack) == 0x000001, "Wrong size on DarkGaiaPhoenixAnimInstance_SetIsPhase3Attack");
static_assert(offsetof(DarkGaiaPhoenixAnimInstance_SetIsPhase3Attack, flag) == 0x000000, "Member 'DarkGaiaPhoenixAnimInstance_SetIsPhase3Attack::flag' has a wrong offset!");

// Function UnionRun.DarkGaiaPhoenixAnimInstance.SetIsPhase3Mirror
// 0x0001 (0x0001 - 0x0000)
struct DarkGaiaPhoenixAnimInstance_SetIsPhase3Mirror final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkGaiaPhoenixAnimInstance_SetIsPhase3Mirror) == 0x000001, "Wrong alignment on DarkGaiaPhoenixAnimInstance_SetIsPhase3Mirror");
static_assert(sizeof(DarkGaiaPhoenixAnimInstance_SetIsPhase3Mirror) == 0x000001, "Wrong size on DarkGaiaPhoenixAnimInstance_SetIsPhase3Mirror");
static_assert(offsetof(DarkGaiaPhoenixAnimInstance_SetIsPhase3Mirror, flag) == 0x000000, "Member 'DarkGaiaPhoenixAnimInstance_SetIsPhase3Mirror::flag' has a wrong offset!");

// Function UnionRun.DarkGaiaPhoenixAnimInstance.SetIsPhase3Move
// 0x0001 (0x0001 - 0x0000)
struct DarkGaiaPhoenixAnimInstance_SetIsPhase3Move final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkGaiaPhoenixAnimInstance_SetIsPhase3Move) == 0x000001, "Wrong alignment on DarkGaiaPhoenixAnimInstance_SetIsPhase3Move");
static_assert(sizeof(DarkGaiaPhoenixAnimInstance_SetIsPhase3Move) == 0x000001, "Wrong size on DarkGaiaPhoenixAnimInstance_SetIsPhase3Move");
static_assert(offsetof(DarkGaiaPhoenixAnimInstance_SetIsPhase3Move, flag) == 0x000000, "Member 'DarkGaiaPhoenixAnimInstance_SetIsPhase3Move::flag' has a wrong offset!");

// Function UnionRun.DeathEggAnimInstance.IsPunchState
// 0x0002 (0x0002 - 0x0000)
struct DeathEggAnimInstance_IsPunchState final
{
public:
	EDeathEggState                                State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathEggAnimInstance_IsPunchState) == 0x000001, "Wrong alignment on DeathEggAnimInstance_IsPunchState");
static_assert(sizeof(DeathEggAnimInstance_IsPunchState) == 0x000002, "Wrong size on DeathEggAnimInstance_IsPunchState");
static_assert(offsetof(DeathEggAnimInstance_IsPunchState, State) == 0x000000, "Member 'DeathEggAnimInstance_IsPunchState::State' has a wrong offset!");
static_assert(offsetof(DeathEggAnimInstance_IsPunchState, ReturnValue) == 0x000001, "Member 'DeathEggAnimInstance_IsPunchState::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubTimeTrialTimeLap.SetLapDiffTime
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubTimeTrialTimeLap_SetLapDiffTime final
{
public:
	int32                                         LapNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubTimeTrialTimeLap_SetLapDiffTime) == 0x000004, "Wrong alignment on RaceUISubTimeTrialTimeLap_SetLapDiffTime");
static_assert(sizeof(RaceUISubTimeTrialTimeLap_SetLapDiffTime) == 0x000004, "Wrong size on RaceUISubTimeTrialTimeLap_SetLapDiffTime");
static_assert(offsetof(RaceUISubTimeTrialTimeLap_SetLapDiffTime, LapNum) == 0x000000, "Member 'RaceUISubTimeTrialTimeLap_SetLapDiffTime::LapNum' has a wrong offset!");

// Function UnionRun.RaceUISubTimeTrialTimeLap.SetLapTime
// 0x0024 (0x0024 - 0x0000)
struct RaceUISubTimeTrialTimeLap_SetLapTime final
{
public:
	struct FRaceUITimeTrialTime                   NewTime;                                           // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Lap;                                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubTimeTrialTimeLap_SetLapTime) == 0x000004, "Wrong alignment on RaceUISubTimeTrialTimeLap_SetLapTime");
static_assert(sizeof(RaceUISubTimeTrialTimeLap_SetLapTime) == 0x000024, "Wrong size on RaceUISubTimeTrialTimeLap_SetLapTime");
static_assert(offsetof(RaceUISubTimeTrialTimeLap_SetLapTime, NewTime) == 0x000000, "Member 'RaceUISubTimeTrialTimeLap_SetLapTime::NewTime' has a wrong offset!");
static_assert(offsetof(RaceUISubTimeTrialTimeLap_SetLapTime, Lap) == 0x000020, "Member 'RaceUISubTimeTrialTimeLap_SetLapTime::Lap' has a wrong offset!");

// Function UnionRun.RaceUISubTimeTrialTimeLap.SetLapTimeIsGhostReplay
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubTimeTrialTimeLap_SetLapTimeIsGhostReplay final
{
public:
	int32                                         Lap;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubTimeTrialTimeLap_SetLapTimeIsGhostReplay) == 0x000004, "Wrong alignment on RaceUISubTimeTrialTimeLap_SetLapTimeIsGhostReplay");
static_assert(sizeof(RaceUISubTimeTrialTimeLap_SetLapTimeIsGhostReplay) == 0x000004, "Wrong size on RaceUISubTimeTrialTimeLap_SetLapTimeIsGhostReplay");
static_assert(offsetof(RaceUISubTimeTrialTimeLap_SetLapTimeIsGhostReplay, Lap) == 0x000000, "Member 'RaceUISubTimeTrialTimeLap_SetLapTimeIsGhostReplay::Lap' has a wrong offset!");

// Function UnionRun.RaceUISubTimeTrialTimeLap.SetLapTimeWithDiff
// 0x0028 (0x0028 - 0x0000)
struct RaceUISubTimeTrialTimeLap_SetLapTimeWithDiff final
{
public:
	struct FRaceUITimeTrialTime                   NewTime;                                           // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Lap;                                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisibleDiff;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubTimeTrialTimeLap_SetLapTimeWithDiff) == 0x000004, "Wrong alignment on RaceUISubTimeTrialTimeLap_SetLapTimeWithDiff");
static_assert(sizeof(RaceUISubTimeTrialTimeLap_SetLapTimeWithDiff) == 0x000028, "Wrong size on RaceUISubTimeTrialTimeLap_SetLapTimeWithDiff");
static_assert(offsetof(RaceUISubTimeTrialTimeLap_SetLapTimeWithDiff, NewTime) == 0x000000, "Member 'RaceUISubTimeTrialTimeLap_SetLapTimeWithDiff::NewTime' has a wrong offset!");
static_assert(offsetof(RaceUISubTimeTrialTimeLap_SetLapTimeWithDiff, Lap) == 0x000020, "Member 'RaceUISubTimeTrialTimeLap_SetLapTimeWithDiff::Lap' has a wrong offset!");
static_assert(offsetof(RaceUISubTimeTrialTimeLap_SetLapTimeWithDiff, IsVisibleDiff) == 0x000024, "Member 'RaceUISubTimeTrialTimeLap_SetLapTimeWithDiff::IsVisibleDiff' has a wrong offset!");

// Function UnionRun.RaceUISubTimeTrialTimeLap.UpdateLapTime
// 0x0020 (0x0020 - 0x0000)
struct RaceUISubTimeTrialTimeLap_UpdateLapTime final
{
public:
	struct FRaceUITimeTrialTime                   ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubTimeTrialTimeLap_UpdateLapTime) == 0x000004, "Wrong alignment on RaceUISubTimeTrialTimeLap_UpdateLapTime");
static_assert(sizeof(RaceUISubTimeTrialTimeLap_UpdateLapTime) == 0x000020, "Wrong size on RaceUISubTimeTrialTimeLap_UpdateLapTime");
static_assert(offsetof(RaceUISubTimeTrialTimeLap_UpdateLapTime, ReturnValue) == 0x000000, "Member 'RaceUISubTimeTrialTimeLap_UpdateLapTime::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemBoxObject.OnChangeItemBox
// 0x0001 (0x0001 - 0x0000)
struct ItemBoxObject_OnChangeItemBox final
{
public:
	EItemBoxType                                  ItemBoxType_0;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBoxObject_OnChangeItemBox) == 0x000001, "Wrong alignment on ItemBoxObject_OnChangeItemBox");
static_assert(sizeof(ItemBoxObject_OnChangeItemBox) == 0x000001, "Wrong size on ItemBoxObject_OnChangeItemBox");
static_assert(offsetof(ItemBoxObject_OnChangeItemBox, ItemBoxType_0) == 0x000000, "Member 'ItemBoxObject_OnChangeItemBox::ItemBoxType_0' has a wrong offset!");

// Function UnionRun.ItemBoxObject.OnHitRacer
// 0x0004 (0x0004 - 0x0000)
struct ItemBoxObject_OnHitRacer final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBoxObject_OnHitRacer) == 0x000004, "Wrong alignment on ItemBoxObject_OnHitRacer");
static_assert(sizeof(ItemBoxObject_OnHitRacer) == 0x000004, "Wrong size on ItemBoxObject_OnHitRacer");
static_assert(offsetof(ItemBoxObject_OnHitRacer, RacerIndex) == 0x000000, "Member 'ItemBoxObject_OnHitRacer::RacerIndex' has a wrong offset!");

// Function UnionRun.ItemBoxObject.OnPlayForceFeedback
// 0x0004 (0x0004 - 0x0000)
struct ItemBoxObject_OnPlayForceFeedback final
{
public:
	int32                                         LocalPlayerIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBoxObject_OnPlayForceFeedback) == 0x000004, "Wrong alignment on ItemBoxObject_OnPlayForceFeedback");
static_assert(sizeof(ItemBoxObject_OnPlayForceFeedback) == 0x000004, "Wrong size on ItemBoxObject_OnPlayForceFeedback");
static_assert(offsetof(ItemBoxObject_OnPlayForceFeedback, LocalPlayerIndex) == 0x000000, "Member 'ItemBoxObject_OnPlayForceFeedback::LocalPlayerIndex' has a wrong offset!");

// Function UnionRun.ItemBoxObject.SetItemBoxType
// 0x0001 (0x0001 - 0x0000)
struct ItemBoxObject_SetItemBoxType final
{
public:
	EItemBoxType                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBoxObject_SetItemBoxType) == 0x000001, "Wrong alignment on ItemBoxObject_SetItemBoxType");
static_assert(sizeof(ItemBoxObject_SetItemBoxType) == 0x000001, "Wrong size on ItemBoxObject_SetItemBoxType");
static_assert(offsetof(ItemBoxObject_SetItemBoxType, Type) == 0x000000, "Member 'ItemBoxObject_SetItemBoxType::Type' has a wrong offset!");

// Function UnionRun.ItemBoxObject.SetSpecifiedItem
// 0x0001 (0x0001 - 0x0000)
struct ItemBoxObject_SetSpecifiedItem final
{
public:
	EItemId                                       Item;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBoxObject_SetSpecifiedItem) == 0x000001, "Wrong alignment on ItemBoxObject_SetSpecifiedItem");
static_assert(sizeof(ItemBoxObject_SetSpecifiedItem) == 0x000001, "Wrong size on ItemBoxObject_SetSpecifiedItem");
static_assert(offsetof(ItemBoxObject_SetSpecifiedItem, Item) == 0x000000, "Member 'ItemBoxObject_SetSpecifiedItem::Item' has a wrong offset!");

// Function UnionRun.ItemBoxObject.GetSoundPan
// 0x0001 (0x0001 - 0x0000)
struct ItemBoxObject_GetSoundPan final
{
public:
	ESoundPan                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBoxObject_GetSoundPan) == 0x000001, "Wrong alignment on ItemBoxObject_GetSoundPan");
static_assert(sizeof(ItemBoxObject_GetSoundPan) == 0x000001, "Wrong size on ItemBoxObject_GetSoundPan");
static_assert(offsetof(ItemBoxObject_GetSoundPan, ReturnValue) == 0x000000, "Member 'ItemBoxObject_GetSoundPan::ReturnValue' has a wrong offset!");

// Function UnionRun.DroppedRingFactory.OnPlayDroppedRingSound_DAMAGE_01
// 0x0001 (0x0001 - 0x0000)
struct DroppedRingFactory_OnPlayDroppedRingSound_DAMAGE_01 final
{
public:
	ESoundPan                                     SoundPan;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DroppedRingFactory_OnPlayDroppedRingSound_DAMAGE_01) == 0x000001, "Wrong alignment on DroppedRingFactory_OnPlayDroppedRingSound_DAMAGE_01");
static_assert(sizeof(DroppedRingFactory_OnPlayDroppedRingSound_DAMAGE_01) == 0x000001, "Wrong size on DroppedRingFactory_OnPlayDroppedRingSound_DAMAGE_01");
static_assert(offsetof(DroppedRingFactory_OnPlayDroppedRingSound_DAMAGE_01, SoundPan) == 0x000000, "Member 'DroppedRingFactory_OnPlayDroppedRingSound_DAMAGE_01::SoundPan' has a wrong offset!");

// Function UnionRun.DroppedRingFactory.OnPlayDroppedRingSound_HIT_01
// 0x0018 (0x0018 - 0x0000)
struct DroppedRingFactory_OnPlayDroppedRingSound_HIT_01 final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DroppedRingFactory_OnPlayDroppedRingSound_HIT_01) == 0x000008, "Wrong alignment on DroppedRingFactory_OnPlayDroppedRingSound_HIT_01");
static_assert(sizeof(DroppedRingFactory_OnPlayDroppedRingSound_HIT_01) == 0x000018, "Wrong size on DroppedRingFactory_OnPlayDroppedRingSound_HIT_01");
static_assert(offsetof(DroppedRingFactory_OnPlayDroppedRingSound_HIT_01, Position) == 0x000000, "Member 'DroppedRingFactory_OnPlayDroppedRingSound_HIT_01::Position' has a wrong offset!");

// Function UnionRun.DroppedRingFactory.OnPlayDroppedRingSound_Large
// 0x0001 (0x0001 - 0x0000)
struct DroppedRingFactory_OnPlayDroppedRingSound_Large final
{
public:
	ESoundPan                                     SoundPan;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DroppedRingFactory_OnPlayDroppedRingSound_Large) == 0x000001, "Wrong alignment on DroppedRingFactory_OnPlayDroppedRingSound_Large");
static_assert(sizeof(DroppedRingFactory_OnPlayDroppedRingSound_Large) == 0x000001, "Wrong size on DroppedRingFactory_OnPlayDroppedRingSound_Large");
static_assert(offsetof(DroppedRingFactory_OnPlayDroppedRingSound_Large, SoundPan) == 0x000000, "Member 'DroppedRingFactory_OnPlayDroppedRingSound_Large::SoundPan' has a wrong offset!");

// Function UnionRun.DroppedRingFactory.OnPlayDroppedRingSound_Medium
// 0x0001 (0x0001 - 0x0000)
struct DroppedRingFactory_OnPlayDroppedRingSound_Medium final
{
public:
	ESoundPan                                     SoundPan;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DroppedRingFactory_OnPlayDroppedRingSound_Medium) == 0x000001, "Wrong alignment on DroppedRingFactory_OnPlayDroppedRingSound_Medium");
static_assert(sizeof(DroppedRingFactory_OnPlayDroppedRingSound_Medium) == 0x000001, "Wrong size on DroppedRingFactory_OnPlayDroppedRingSound_Medium");
static_assert(offsetof(DroppedRingFactory_OnPlayDroppedRingSound_Medium, SoundPan) == 0x000000, "Member 'DroppedRingFactory_OnPlayDroppedRingSound_Medium::SoundPan' has a wrong offset!");

// Function UnionRun.DroppedRingFactory.OnPlayDroppedRingSound_Small
// 0x0001 (0x0001 - 0x0000)
struct DroppedRingFactory_OnPlayDroppedRingSound_Small final
{
public:
	ESoundPan                                     SoundPan;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DroppedRingFactory_OnPlayDroppedRingSound_Small) == 0x000001, "Wrong alignment on DroppedRingFactory_OnPlayDroppedRingSound_Small");
static_assert(sizeof(DroppedRingFactory_OnPlayDroppedRingSound_Small) == 0x000001, "Wrong size on DroppedRingFactory_OnPlayDroppedRingSound_Small");
static_assert(offsetof(DroppedRingFactory_OnPlayDroppedRingSound_Small, SoundPan) == 0x000000, "Member 'DroppedRingFactory_OnPlayDroppedRingSound_Small::SoundPan' has a wrong offset!");

// Function UnionRun.DroppedRingObject.HitRacer
// 0x0004 (0x0004 - 0x0000)
struct DroppedRingObject_HitRacer final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DroppedRingObject_HitRacer) == 0x000004, "Wrong alignment on DroppedRingObject_HitRacer");
static_assert(sizeof(DroppedRingObject_HitRacer) == 0x000004, "Wrong size on DroppedRingObject_HitRacer");
static_assert(offsetof(DroppedRingObject_HitRacer, RacerIndex) == 0x000000, "Member 'DroppedRingObject_HitRacer::RacerIndex' has a wrong offset!");

// Function UnionRun.EggChaserAnimInstance.GetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct EggChaserAnimInstance_GetIsAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggChaserAnimInstance_GetIsAttack) == 0x000001, "Wrong alignment on EggChaserAnimInstance_GetIsAttack");
static_assert(sizeof(EggChaserAnimInstance_GetIsAttack) == 0x000001, "Wrong size on EggChaserAnimInstance_GetIsAttack");
static_assert(offsetof(EggChaserAnimInstance_GetIsAttack, ReturnValue) == 0x000000, "Member 'EggChaserAnimInstance_GetIsAttack::ReturnValue' has a wrong offset!");

// Function UnionRun.EggChaserAnimInstance.GetIsAttackReady
// 0x0001 (0x0001 - 0x0000)
struct EggChaserAnimInstance_GetIsAttackReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggChaserAnimInstance_GetIsAttackReady) == 0x000001, "Wrong alignment on EggChaserAnimInstance_GetIsAttackReady");
static_assert(sizeof(EggChaserAnimInstance_GetIsAttackReady) == 0x000001, "Wrong size on EggChaserAnimInstance_GetIsAttackReady");
static_assert(offsetof(EggChaserAnimInstance_GetIsAttackReady, ReturnValue) == 0x000000, "Member 'EggChaserAnimInstance_GetIsAttackReady::ReturnValue' has a wrong offset!");

// Function UnionRun.EggChaserAnimInstance.GetIsFly
// 0x0001 (0x0001 - 0x0000)
struct EggChaserAnimInstance_GetIsFly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggChaserAnimInstance_GetIsFly) == 0x000001, "Wrong alignment on EggChaserAnimInstance_GetIsFly");
static_assert(sizeof(EggChaserAnimInstance_GetIsFly) == 0x000001, "Wrong size on EggChaserAnimInstance_GetIsFly");
static_assert(offsetof(EggChaserAnimInstance_GetIsFly, ReturnValue) == 0x000000, "Member 'EggChaserAnimInstance_GetIsFly::ReturnValue' has a wrong offset!");

// Function UnionRun.EggChaserAnimInstance.GetIsFlyToWait
// 0x0001 (0x0001 - 0x0000)
struct EggChaserAnimInstance_GetIsFlyToWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggChaserAnimInstance_GetIsFlyToWait) == 0x000001, "Wrong alignment on EggChaserAnimInstance_GetIsFlyToWait");
static_assert(sizeof(EggChaserAnimInstance_GetIsFlyToWait) == 0x000001, "Wrong size on EggChaserAnimInstance_GetIsFlyToWait");
static_assert(offsetof(EggChaserAnimInstance_GetIsFlyToWait, ReturnValue) == 0x000000, "Member 'EggChaserAnimInstance_GetIsFlyToWait::ReturnValue' has a wrong offset!");

// Function UnionRun.EggChaserAnimInstance.GetIsPhase3Move
// 0x0001 (0x0001 - 0x0000)
struct EggChaserAnimInstance_GetIsPhase3Move final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggChaserAnimInstance_GetIsPhase3Move) == 0x000001, "Wrong alignment on EggChaserAnimInstance_GetIsPhase3Move");
static_assert(sizeof(EggChaserAnimInstance_GetIsPhase3Move) == 0x000001, "Wrong size on EggChaserAnimInstance_GetIsPhase3Move");
static_assert(offsetof(EggChaserAnimInstance_GetIsPhase3Move, ReturnValue) == 0x000000, "Member 'EggChaserAnimInstance_GetIsPhase3Move::ReturnValue' has a wrong offset!");

// Function UnionRun.EggChaserAnimInstance.GetIsWaitToFly
// 0x0001 (0x0001 - 0x0000)
struct EggChaserAnimInstance_GetIsWaitToFly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggChaserAnimInstance_GetIsWaitToFly) == 0x000001, "Wrong alignment on EggChaserAnimInstance_GetIsWaitToFly");
static_assert(sizeof(EggChaserAnimInstance_GetIsWaitToFly) == 0x000001, "Wrong size on EggChaserAnimInstance_GetIsWaitToFly");
static_assert(offsetof(EggChaserAnimInstance_GetIsWaitToFly, ReturnValue) == 0x000000, "Member 'EggChaserAnimInstance_GetIsWaitToFly::ReturnValue' has a wrong offset!");

// Function UnionRun.EggChaserAnimInstance.SetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct EggChaserAnimInstance_SetIsAttack final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggChaserAnimInstance_SetIsAttack) == 0x000001, "Wrong alignment on EggChaserAnimInstance_SetIsAttack");
static_assert(sizeof(EggChaserAnimInstance_SetIsAttack) == 0x000001, "Wrong size on EggChaserAnimInstance_SetIsAttack");
static_assert(offsetof(EggChaserAnimInstance_SetIsAttack, flag) == 0x000000, "Member 'EggChaserAnimInstance_SetIsAttack::flag' has a wrong offset!");

// Function UnionRun.EggChaserAnimInstance.SetIsAttackReady
// 0x0001 (0x0001 - 0x0000)
struct EggChaserAnimInstance_SetIsAttackReady final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggChaserAnimInstance_SetIsAttackReady) == 0x000001, "Wrong alignment on EggChaserAnimInstance_SetIsAttackReady");
static_assert(sizeof(EggChaserAnimInstance_SetIsAttackReady) == 0x000001, "Wrong size on EggChaserAnimInstance_SetIsAttackReady");
static_assert(offsetof(EggChaserAnimInstance_SetIsAttackReady, flag) == 0x000000, "Member 'EggChaserAnimInstance_SetIsAttackReady::flag' has a wrong offset!");

// Function UnionRun.EggChaserAnimInstance.SetIsFly
// 0x0001 (0x0001 - 0x0000)
struct EggChaserAnimInstance_SetIsFly final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggChaserAnimInstance_SetIsFly) == 0x000001, "Wrong alignment on EggChaserAnimInstance_SetIsFly");
static_assert(sizeof(EggChaserAnimInstance_SetIsFly) == 0x000001, "Wrong size on EggChaserAnimInstance_SetIsFly");
static_assert(offsetof(EggChaserAnimInstance_SetIsFly, flag) == 0x000000, "Member 'EggChaserAnimInstance_SetIsFly::flag' has a wrong offset!");

// Function UnionRun.EggChaserAnimInstance.SetIsFlyToWait
// 0x0001 (0x0001 - 0x0000)
struct EggChaserAnimInstance_SetIsFlyToWait final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggChaserAnimInstance_SetIsFlyToWait) == 0x000001, "Wrong alignment on EggChaserAnimInstance_SetIsFlyToWait");
static_assert(sizeof(EggChaserAnimInstance_SetIsFlyToWait) == 0x000001, "Wrong size on EggChaserAnimInstance_SetIsFlyToWait");
static_assert(offsetof(EggChaserAnimInstance_SetIsFlyToWait, flag) == 0x000000, "Member 'EggChaserAnimInstance_SetIsFlyToWait::flag' has a wrong offset!");

// Function UnionRun.EggChaserAnimInstance.SetIsWait
// 0x0001 (0x0001 - 0x0000)
struct EggChaserAnimInstance_SetIsWait final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggChaserAnimInstance_SetIsWait) == 0x000001, "Wrong alignment on EggChaserAnimInstance_SetIsWait");
static_assert(sizeof(EggChaserAnimInstance_SetIsWait) == 0x000001, "Wrong size on EggChaserAnimInstance_SetIsWait");
static_assert(offsetof(EggChaserAnimInstance_SetIsWait, flag) == 0x000000, "Member 'EggChaserAnimInstance_SetIsWait::flag' has a wrong offset!");

// Function UnionRun.EggChaserAnimInstance.SetIsWaitToFly
// 0x0001 (0x0001 - 0x0000)
struct EggChaserAnimInstance_SetIsWaitToFly final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggChaserAnimInstance_SetIsWaitToFly) == 0x000001, "Wrong alignment on EggChaserAnimInstance_SetIsWaitToFly");
static_assert(sizeof(EggChaserAnimInstance_SetIsWaitToFly) == 0x000001, "Wrong size on EggChaserAnimInstance_SetIsWaitToFly");
static_assert(offsetof(EggChaserAnimInstance_SetIsWaitToFly, flag) == 0x000000, "Member 'EggChaserAnimInstance_SetIsWaitToFly::flag' has a wrong offset!");

// Function UnionRun.RaceUISubBoost.CheckBoostLevelInGhostReplay
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubBoost_CheckBoostLevelInGhostReplay final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBoost_CheckBoostLevelInGhostReplay) == 0x000004, "Wrong alignment on RaceUISubBoost_CheckBoostLevelInGhostReplay");
static_assert(sizeof(RaceUISubBoost_CheckBoostLevelInGhostReplay) == 0x000004, "Wrong size on RaceUISubBoost_CheckBoostLevelInGhostReplay");
static_assert(offsetof(RaceUISubBoost_CheckBoostLevelInGhostReplay, Level) == 0x000000, "Member 'RaceUISubBoost_CheckBoostLevelInGhostReplay::Level' has a wrong offset!");

// Function UnionRun.RaceUISubBoost.IsFastFirstCharge
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubBoost_IsFastFirstCharge final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubBoost_IsFastFirstCharge) == 0x000004, "Wrong alignment on RaceUISubBoost_IsFastFirstCharge");
static_assert(sizeof(RaceUISubBoost_IsFastFirstCharge) == 0x000008, "Wrong size on RaceUISubBoost_IsFastFirstCharge");
static_assert(offsetof(RaceUISubBoost_IsFastFirstCharge, RacerIndex) == 0x000000, "Member 'RaceUISubBoost_IsFastFirstCharge::RacerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubBoost_IsFastFirstCharge, ReturnValue) == 0x000004, "Member 'RaceUISubBoost_IsFastFirstCharge::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBoost.IsFastSecondCharge
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubBoost_IsFastSecondCharge final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubBoost_IsFastSecondCharge) == 0x000004, "Wrong alignment on RaceUISubBoost_IsFastSecondCharge");
static_assert(sizeof(RaceUISubBoost_IsFastSecondCharge) == 0x000008, "Wrong size on RaceUISubBoost_IsFastSecondCharge");
static_assert(offsetof(RaceUISubBoost_IsFastSecondCharge, RacerIndex) == 0x000000, "Member 'RaceUISubBoost_IsFastSecondCharge::RacerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubBoost_IsFastSecondCharge, ReturnValue) == 0x000004, "Member 'RaceUISubBoost_IsFastSecondCharge::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBoost.IsFastThirdCharge
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubBoost_IsFastThirdCharge final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubBoost_IsFastThirdCharge) == 0x000004, "Wrong alignment on RaceUISubBoost_IsFastThirdCharge");
static_assert(sizeof(RaceUISubBoost_IsFastThirdCharge) == 0x000008, "Wrong size on RaceUISubBoost_IsFastThirdCharge");
static_assert(offsetof(RaceUISubBoost_IsFastThirdCharge, RacerIndex) == 0x000000, "Member 'RaceUISubBoost_IsFastThirdCharge::RacerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubBoost_IsFastThirdCharge, ReturnValue) == 0x000004, "Member 'RaceUISubBoost_IsFastThirdCharge::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBoost.IsViewGhostReplay
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubBoost_IsViewGhostReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBoost_IsViewGhostReplay) == 0x000001, "Wrong alignment on RaceUISubBoost_IsViewGhostReplay");
static_assert(sizeof(RaceUISubBoost_IsViewGhostReplay) == 0x000001, "Wrong size on RaceUISubBoost_IsViewGhostReplay");
static_assert(offsetof(RaceUISubBoost_IsViewGhostReplay, ReturnValue) == 0x000000, "Member 'RaceUISubBoost_IsViewGhostReplay::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBoost.SetVisibleHUD
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubBoost_SetVisibleHUD final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBoost_SetVisibleHUD) == 0x000004, "Wrong alignment on RaceUISubBoost_SetVisibleHUD");
static_assert(sizeof(RaceUISubBoost_SetVisibleHUD) == 0x000008, "Wrong size on RaceUISubBoost_SetVisibleHUD");
static_assert(offsetof(RaceUISubBoost_SetVisibleHUD, IsVisible_0) == 0x000000, "Member 'RaceUISubBoost_SetVisibleHUD::IsVisible_0' has a wrong offset!");
static_assert(offsetof(RaceUISubBoost_SetVisibleHUD, DeltaTime) == 0x000004, "Member 'RaceUISubBoost_SetVisibleHUD::DeltaTime' has a wrong offset!");

// Function UnionRun.RaceUISubBoost.SetWaitTimeJustBoostInGhostReplay
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubBoost_SetWaitTimeJustBoostInGhostReplay final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBoost_SetWaitTimeJustBoostInGhostReplay) == 0x000004, "Wrong alignment on RaceUISubBoost_SetWaitTimeJustBoostInGhostReplay");
static_assert(sizeof(RaceUISubBoost_SetWaitTimeJustBoostInGhostReplay) == 0x000004, "Wrong size on RaceUISubBoost_SetWaitTimeJustBoostInGhostReplay");
static_assert(offsetof(RaceUISubBoost_SetWaitTimeJustBoostInGhostReplay, Time) == 0x000000, "Member 'RaceUISubBoost_SetWaitTimeJustBoostInGhostReplay::Time' has a wrong offset!");

// Function UnionRun.RaceUISubBoost.UpdateChargeInfo
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubBoost_UpdateChargeInfo final
{
public:
	int32                                         ChargeLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeRate;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBoost_UpdateChargeInfo) == 0x000004, "Wrong alignment on RaceUISubBoost_UpdateChargeInfo");
static_assert(sizeof(RaceUISubBoost_UpdateChargeInfo) == 0x000008, "Wrong size on RaceUISubBoost_UpdateChargeInfo");
static_assert(offsetof(RaceUISubBoost_UpdateChargeInfo, ChargeLevel) == 0x000000, "Member 'RaceUISubBoost_UpdateChargeInfo::ChargeLevel' has a wrong offset!");
static_assert(offsetof(RaceUISubBoost_UpdateChargeInfo, ChargeRate) == 0x000004, "Member 'RaceUISubBoost_UpdateChargeInfo::ChargeRate' has a wrong offset!");

// Function UnionRun.RaceUISubBoost.GetIsOpened
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubBoost_GetIsOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBoost_GetIsOpened) == 0x000001, "Wrong alignment on RaceUISubBoost_GetIsOpened");
static_assert(sizeof(RaceUISubBoost_GetIsOpened) == 0x000001, "Wrong size on RaceUISubBoost_GetIsOpened");
static_assert(offsetof(RaceUISubBoost_GetIsOpened, ReturnValue) == 0x000000, "Member 'RaceUISubBoost_GetIsOpened::ReturnValue' has a wrong offset!");

// Function UnionRun.Gimmick_Extnd05_Enemy04004.IsDamaged
// 0x0001 (0x0001 - 0x0000)
struct Gimmick_Extnd05_Enemy04004_IsDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Gimmick_Extnd05_Enemy04004_IsDamaged) == 0x000001, "Wrong alignment on Gimmick_Extnd05_Enemy04004_IsDamaged");
static_assert(sizeof(Gimmick_Extnd05_Enemy04004_IsDamaged) == 0x000001, "Wrong size on Gimmick_Extnd05_Enemy04004_IsDamaged");
static_assert(offsetof(Gimmick_Extnd05_Enemy04004_IsDamaged, ReturnValue) == 0x000000, "Member 'Gimmick_Extnd05_Enemy04004_IsDamaged::ReturnValue' has a wrong offset!");

// Function UnionRun.EggDragoonAnimInstance.IsAttackState
// 0x0002 (0x0002 - 0x0000)
struct EggDragoonAnimInstance_IsAttackState final
{
public:
	EEggDragoonState                              State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggDragoonAnimInstance_IsAttackState) == 0x000001, "Wrong alignment on EggDragoonAnimInstance_IsAttackState");
static_assert(sizeof(EggDragoonAnimInstance_IsAttackState) == 0x000002, "Wrong size on EggDragoonAnimInstance_IsAttackState");
static_assert(offsetof(EggDragoonAnimInstance_IsAttackState, State) == 0x000000, "Member 'EggDragoonAnimInstance_IsAttackState::State' has a wrong offset!");
static_assert(offsetof(EggDragoonAnimInstance_IsAttackState, ReturnValue) == 0x000001, "Member 'EggDragoonAnimInstance_IsAttackState::ReturnValue' has a wrong offset!");

// Function UnionRun.EggDragoonAnimInstance.IsStateActivate
// 0x0001 (0x0001 - 0x0000)
struct EggDragoonAnimInstance_IsStateActivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EggDragoonAnimInstance_IsStateActivate) == 0x000001, "Wrong alignment on EggDragoonAnimInstance_IsStateActivate");
static_assert(sizeof(EggDragoonAnimInstance_IsStateActivate) == 0x000001, "Wrong size on EggDragoonAnimInstance_IsStateActivate");
static_assert(offsetof(EggDragoonAnimInstance_IsStateActivate, ReturnValue) == 0x000000, "Member 'EggDragoonAnimInstance_IsStateActivate::ReturnValue' has a wrong offset!");

// Function UnionRun.EnemyAmbushTrex.HitRacer
// 0x0004 (0x0004 - 0x0000)
struct EnemyAmbushTrex_HitRacer final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyAmbushTrex_HitRacer) == 0x000004, "Wrong alignment on EnemyAmbushTrex_HitRacer");
static_assert(sizeof(EnemyAmbushTrex_HitRacer) == 0x000004, "Wrong size on EnemyAmbushTrex_HitRacer");
static_assert(offsetof(EnemyAmbushTrex_HitRacer, RacerIndex) == 0x000000, "Member 'EnemyAmbushTrex_HitRacer::RacerIndex' has a wrong offset!");

// Function UnionRun.RaceUISubBtnKey.SetButtonState
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubBtnKey_SetButtonState final
{
public:
	int32                                         InState;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBtnKey_SetButtonState) == 0x000004, "Wrong alignment on RaceUISubBtnKey_SetButtonState");
static_assert(sizeof(RaceUISubBtnKey_SetButtonState) == 0x000004, "Wrong size on RaceUISubBtnKey_SetButtonState");
static_assert(offsetof(RaceUISubBtnKey_SetButtonState, InState) == 0x000000, "Member 'RaceUISubBtnKey_SetButtonState::InState' has a wrong offset!");

// Function UnionRun.RaceUISubBtnKey.GetKeyDisplayName
// 0x0030 (0x0030 - 0x0000)
struct RaceUISubBtnKey_GetKeyDisplayName final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerControllerIndex;                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBtnKey_GetKeyDisplayName) == 0x000008, "Wrong alignment on RaceUISubBtnKey_GetKeyDisplayName");
static_assert(sizeof(RaceUISubBtnKey_GetKeyDisplayName) == 0x000030, "Wrong size on RaceUISubBtnKey_GetKeyDisplayName");
static_assert(offsetof(RaceUISubBtnKey_GetKeyDisplayName, InKey) == 0x000000, "Member 'RaceUISubBtnKey_GetKeyDisplayName::InKey' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnKey_GetKeyDisplayName, PlayerControllerIndex) == 0x000018, "Member 'RaceUISubBtnKey_GetKeyDisplayName::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnKey_GetKeyDisplayName, ReturnValue) == 0x000020, "Member 'RaceUISubBtnKey_GetKeyDisplayName::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBtnKey.GetMouseButtonIndex
// 0x0020 (0x0020 - 0x0000)
struct RaceUISubBtnKey_GetMouseButtonIndex final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubBtnKey_GetMouseButtonIndex) == 0x000008, "Wrong alignment on RaceUISubBtnKey_GetMouseButtonIndex");
static_assert(sizeof(RaceUISubBtnKey_GetMouseButtonIndex) == 0x000020, "Wrong size on RaceUISubBtnKey_GetMouseButtonIndex");
static_assert(offsetof(RaceUISubBtnKey_GetMouseButtonIndex, InKey) == 0x000000, "Member 'RaceUISubBtnKey_GetMouseButtonIndex::InKey' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnKey_GetMouseButtonIndex, ReturnValue) == 0x000018, "Member 'RaceUISubBtnKey_GetMouseButtonIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.EnemyAttackStoneStatue.MovePositionUpdate
// 0x0004 (0x0004 - 0x0000)
struct EnemyAttackStoneStatue_MovePositionUpdate final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyAttackStoneStatue_MovePositionUpdate) == 0x000004, "Wrong alignment on EnemyAttackStoneStatue_MovePositionUpdate");
static_assert(sizeof(EnemyAttackStoneStatue_MovePositionUpdate) == 0x000004, "Wrong size on EnemyAttackStoneStatue_MovePositionUpdate");
static_assert(offsetof(EnemyAttackStoneStatue_MovePositionUpdate, Ratio) == 0x000000, "Member 'EnemyAttackStoneStatue_MovePositionUpdate::Ratio' has a wrong offset!");

// Function UnionRun.EnemyAttackStoneStatue.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct EnemyAttackStoneStatue_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyAttackStoneStatue_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on EnemyAttackStoneStatue_OnTriggerColliderConflict");
static_assert(sizeof(EnemyAttackStoneStatue_OnTriggerColliderConflict) == 0x000060, "Wrong size on EnemyAttackStoneStatue_OnTriggerColliderConflict");
static_assert(offsetof(EnemyAttackStoneStatue_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'EnemyAttackStoneStatue_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.EnemyBigTrain.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct EnemyBigTrain_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyBigTrain_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on EnemyBigTrain_OnTriggerColliderConflict");
static_assert(sizeof(EnemyBigTrain_OnTriggerColliderConflict) == 0x000060, "Wrong size on EnemyBigTrain_OnTriggerColliderConflict");
static_assert(offsetof(EnemyBigTrain_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'EnemyBigTrain_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.EnemyBigTrain.OnTriggerColliderConflictSteamAttack
// 0x0060 (0x0060 - 0x0000)
struct EnemyBigTrain_OnTriggerColliderConflictSteamAttack final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyBigTrain_OnTriggerColliderConflictSteamAttack) == 0x000008, "Wrong alignment on EnemyBigTrain_OnTriggerColliderConflictSteamAttack");
static_assert(sizeof(EnemyBigTrain_OnTriggerColliderConflictSteamAttack) == 0x000060, "Wrong size on EnemyBigTrain_OnTriggerColliderConflictSteamAttack");
static_assert(offsetof(EnemyBigTrain_OnTriggerColliderConflictSteamAttack, HitInfo) == 0x000000, "Member 'EnemyBigTrain_OnTriggerColliderConflictSteamAttack::HitInfo' has a wrong offset!");

// Function UnionRun.EnemyDarkGaiaPhoenixPhase3.ActivateAttackEffect
// 0x0002 (0x0002 - 0x0000)
struct EnemyDarkGaiaPhoenixPhase3_ActivateAttackEffect final
{
public:
	bool                                          IsRight;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMirrer;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyDarkGaiaPhoenixPhase3_ActivateAttackEffect) == 0x000001, "Wrong alignment on EnemyDarkGaiaPhoenixPhase3_ActivateAttackEffect");
static_assert(sizeof(EnemyDarkGaiaPhoenixPhase3_ActivateAttackEffect) == 0x000002, "Wrong size on EnemyDarkGaiaPhoenixPhase3_ActivateAttackEffect");
static_assert(offsetof(EnemyDarkGaiaPhoenixPhase3_ActivateAttackEffect, IsRight) == 0x000000, "Member 'EnemyDarkGaiaPhoenixPhase3_ActivateAttackEffect::IsRight' has a wrong offset!");
static_assert(offsetof(EnemyDarkGaiaPhoenixPhase3_ActivateAttackEffect, isMirrer) == 0x000001, "Member 'EnemyDarkGaiaPhoenixPhase3_ActivateAttackEffect::isMirrer' has a wrong offset!");

// Function UnionRun.EnemyDarkGaiaPhoenixPhase3.WingAttack
// 0x0002 (0x0002 - 0x0000)
struct EnemyDarkGaiaPhoenixPhase3_WingAttack final
{
public:
	bool                                          IsRight;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMirrer;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyDarkGaiaPhoenixPhase3_WingAttack) == 0x000001, "Wrong alignment on EnemyDarkGaiaPhoenixPhase3_WingAttack");
static_assert(sizeof(EnemyDarkGaiaPhoenixPhase3_WingAttack) == 0x000002, "Wrong size on EnemyDarkGaiaPhoenixPhase3_WingAttack");
static_assert(offsetof(EnemyDarkGaiaPhoenixPhase3_WingAttack, IsRight) == 0x000000, "Member 'EnemyDarkGaiaPhoenixPhase3_WingAttack::IsRight' has a wrong offset!");
static_assert(offsetof(EnemyDarkGaiaPhoenixPhase3_WingAttack, isMirrer) == 0x000001, "Member 'EnemyDarkGaiaPhoenixPhase3_WingAttack::isMirrer' has a wrong offset!");

// Function UnionRun.GimmckEventCollision.SetEventId
// 0x0001 (0x0001 - 0x0000)
struct GimmckEventCollision_SetEventId final
{
public:
	EUnionEventId                                 EventId;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmckEventCollision_SetEventId) == 0x000001, "Wrong alignment on GimmckEventCollision_SetEventId");
static_assert(sizeof(GimmckEventCollision_SetEventId) == 0x000001, "Wrong size on GimmckEventCollision_SetEventId");
static_assert(offsetof(GimmckEventCollision_SetEventId, EventId) == 0x000000, "Member 'GimmckEventCollision_SetEventId::EventId' has a wrong offset!");

// Function UnionRun.EnemyEggChaser.StartAttack
// 0x0001 (0x0001 - 0x0000)
struct EnemyEggChaser_StartAttack final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyEggChaser_StartAttack) == 0x000001, "Wrong alignment on EnemyEggChaser_StartAttack");
static_assert(sizeof(EnemyEggChaser_StartAttack) == 0x000001, "Wrong size on EnemyEggChaser_StartAttack");
static_assert(offsetof(EnemyEggChaser_StartAttack, IsEnable) == 0x000000, "Member 'EnemyEggChaser_StartAttack::IsEnable' has a wrong offset!");

// Function UnionRun.EnemyMoai.MovePositionUpdate
// 0x0004 (0x0004 - 0x0000)
struct EnemyMoai_MovePositionUpdate final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyMoai_MovePositionUpdate) == 0x000004, "Wrong alignment on EnemyMoai_MovePositionUpdate");
static_assert(sizeof(EnemyMoai_MovePositionUpdate) == 0x000004, "Wrong size on EnemyMoai_MovePositionUpdate");
static_assert(offsetof(EnemyMoai_MovePositionUpdate, Ratio) == 0x000000, "Member 'EnemyMoai_MovePositionUpdate::Ratio' has a wrong offset!");

// Function UnionRun.EnemyMoai.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct EnemyMoai_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyMoai_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on EnemyMoai_OnTriggerColliderConflict");
static_assert(sizeof(EnemyMoai_OnTriggerColliderConflict) == 0x000060, "Wrong size on EnemyMoai_OnTriggerColliderConflict");
static_assert(offsetof(EnemyMoai_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'EnemyMoai_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.EnemyMoaiFinalLap.MovePositionUpdate
// 0x0004 (0x0004 - 0x0000)
struct EnemyMoaiFinalLap_MovePositionUpdate final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyMoaiFinalLap_MovePositionUpdate) == 0x000004, "Wrong alignment on EnemyMoaiFinalLap_MovePositionUpdate");
static_assert(sizeof(EnemyMoaiFinalLap_MovePositionUpdate) == 0x000004, "Wrong size on EnemyMoaiFinalLap_MovePositionUpdate");
static_assert(offsetof(EnemyMoaiFinalLap_MovePositionUpdate, Ratio) == 0x000000, "Member 'EnemyMoaiFinalLap_MovePositionUpdate::Ratio' has a wrong offset!");

// Function UnionRun.EnemyMoaiFinalLap.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct EnemyMoaiFinalLap_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyMoaiFinalLap_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on EnemyMoaiFinalLap_OnTriggerColliderConflict");
static_assert(sizeof(EnemyMoaiFinalLap_OnTriggerColliderConflict) == 0x000060, "Wrong size on EnemyMoaiFinalLap_OnTriggerColliderConflict");
static_assert(offsetof(EnemyMoaiFinalLap_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'EnemyMoaiFinalLap_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.GimmickRingDropper.DropRings
// 0x0004 (0x0004 - 0x0000)
struct GimmickRingDropper_DropRings final
{
public:
	int32                                         DropRingCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickRingDropper_DropRings) == 0x000004, "Wrong alignment on GimmickRingDropper_DropRings");
static_assert(sizeof(GimmickRingDropper_DropRings) == 0x000004, "Wrong size on GimmickRingDropper_DropRings");
static_assert(offsetof(GimmickRingDropper_DropRings, DropRingCount) == 0x000000, "Member 'GimmickRingDropper_DropRings::DropRingCount' has a wrong offset!");

// Function UnionRun.EnemyShipPaddle.MovePositionUpdate
// 0x0004 (0x0004 - 0x0000)
struct EnemyShipPaddle_MovePositionUpdate final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyShipPaddle_MovePositionUpdate) == 0x000004, "Wrong alignment on EnemyShipPaddle_MovePositionUpdate");
static_assert(sizeof(EnemyShipPaddle_MovePositionUpdate) == 0x000004, "Wrong size on EnemyShipPaddle_MovePositionUpdate");
static_assert(offsetof(EnemyShipPaddle_MovePositionUpdate, Ratio) == 0x000000, "Member 'EnemyShipPaddle_MovePositionUpdate::Ratio' has a wrong offset!");

// Function UnionRun.EnemySmallTrain.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct EnemySmallTrain_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySmallTrain_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on EnemySmallTrain_OnTriggerColliderConflict");
static_assert(sizeof(EnemySmallTrain_OnTriggerColliderConflict) == 0x000060, "Wrong size on EnemySmallTrain_OnTriggerColliderConflict");
static_assert(offsetof(EnemySmallTrain_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'EnemySmallTrain_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.EnemySnake.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct EnemySnake_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySnake_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on EnemySnake_OnTriggerColliderConflict");
static_assert(sizeof(EnemySnake_OnTriggerColliderConflict) == 0x000060, "Wrong size on EnemySnake_OnTriggerColliderConflict");
static_assert(offsetof(EnemySnake_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'EnemySnake_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.GimmickBubble.BubbleIdleMoveUpdate
// 0x0004 (0x0004 - 0x0000)
struct GimmickBubble_BubbleIdleMoveUpdate final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickBubble_BubbleIdleMoveUpdate) == 0x000004, "Wrong alignment on GimmickBubble_BubbleIdleMoveUpdate");
static_assert(sizeof(GimmickBubble_BubbleIdleMoveUpdate) == 0x000004, "Wrong size on GimmickBubble_BubbleIdleMoveUpdate");
static_assert(offsetof(GimmickBubble_BubbleIdleMoveUpdate, Ratio) == 0x000000, "Member 'GimmickBubble_BubbleIdleMoveUpdate::Ratio' has a wrong offset!");

// Function UnionRun.GimmickBubble.BubbleScaleUpdate
// 0x0004 (0x0004 - 0x0000)
struct GimmickBubble_BubbleScaleUpdate final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickBubble_BubbleScaleUpdate) == 0x000004, "Wrong alignment on GimmickBubble_BubbleScaleUpdate");
static_assert(sizeof(GimmickBubble_BubbleScaleUpdate) == 0x000004, "Wrong size on GimmickBubble_BubbleScaleUpdate");
static_assert(offsetof(GimmickBubble_BubbleScaleUpdate, Ratio) == 0x000000, "Member 'GimmickBubble_BubbleScaleUpdate::Ratio' has a wrong offset!");

// Function UnionRun.GimmickBubble.ForceSetDomainNumber
// 0x0001 (0x0001 - 0x0000)
struct GimmickBubble_ForceSetDomainNumber final
{
public:
	EDomainNumber                                 Number;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickBubble_ForceSetDomainNumber) == 0x000001, "Wrong alignment on GimmickBubble_ForceSetDomainNumber");
static_assert(sizeof(GimmickBubble_ForceSetDomainNumber) == 0x000001, "Wrong size on GimmickBubble_ForceSetDomainNumber");
static_assert(offsetof(GimmickBubble_ForceSetDomainNumber, Number) == 0x000000, "Member 'GimmickBubble_ForceSetDomainNumber::Number' has a wrong offset!");

// Function UnionRun.GimmickBubble.ForceUpdate
// 0x0004 (0x0004 - 0x0000)
struct GimmickBubble_ForceUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickBubble_ForceUpdate) == 0x000004, "Wrong alignment on GimmickBubble_ForceUpdate");
static_assert(sizeof(GimmickBubble_ForceUpdate) == 0x000004, "Wrong size on GimmickBubble_ForceUpdate");
static_assert(offsetof(GimmickBubble_ForceUpdate, DeltaTime) == 0x000000, "Member 'GimmickBubble_ForceUpdate::DeltaTime' has a wrong offset!");

// Function UnionRun.GimmickBubble.ManualUpdate
// 0x0004 (0x0004 - 0x0000)
struct GimmickBubble_ManualUpdate final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickBubble_ManualUpdate) == 0x000004, "Wrong alignment on GimmickBubble_ManualUpdate");
static_assert(sizeof(GimmickBubble_ManualUpdate) == 0x000004, "Wrong size on GimmickBubble_ManualUpdate");
static_assert(offsetof(GimmickBubble_ManualUpdate, InDeltaTime) == 0x000000, "Member 'GimmickBubble_ManualUpdate::InDeltaTime' has a wrong offset!");

// Function UnionRun.GimmickBubble.OnGetBonusItem
// 0x0008 (0x0008 - 0x0000)
struct GimmickBubble_OnGetBonusItem final
{
public:
	EBubbleBonusType                              BonusType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RacerIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickBubble_OnGetBonusItem) == 0x000004, "Wrong alignment on GimmickBubble_OnGetBonusItem");
static_assert(sizeof(GimmickBubble_OnGetBonusItem) == 0x000008, "Wrong size on GimmickBubble_OnGetBonusItem");
static_assert(offsetof(GimmickBubble_OnGetBonusItem, BonusType) == 0x000000, "Member 'GimmickBubble_OnGetBonusItem::BonusType' has a wrong offset!");
static_assert(offsetof(GimmickBubble_OnGetBonusItem, RacerIndex) == 0x000004, "Member 'GimmickBubble_OnGetBonusItem::RacerIndex' has a wrong offset!");

// Function UnionRun.GimmickBubble.SetVisivleBonusItemType
// 0x0001 (0x0001 - 0x0000)
struct GimmickBubble_SetVisivleBonusItemType final
{
public:
	EBubbleBonusType                              BonusType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickBubble_SetVisivleBonusItemType) == 0x000001, "Wrong alignment on GimmickBubble_SetVisivleBonusItemType");
static_assert(sizeof(GimmickBubble_SetVisivleBonusItemType) == 0x000001, "Wrong size on GimmickBubble_SetVisivleBonusItemType");
static_assert(offsetof(GimmickBubble_SetVisivleBonusItemType, BonusType) == 0x000000, "Member 'GimmickBubble_SetVisivleBonusItemType::BonusType' has a wrong offset!");

// Function UnionRun.EnemySquidDestination.EditorUpdatePathLocation
// 0x0028 (0x0028 - 0x0000)
struct EnemySquidDestination_EditorUpdatePathLocation final
{
public:
	TSoftObjectPtr<class AActor>                  SplineActor;                                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySquidDestination_EditorUpdatePathLocation) == 0x000008, "Wrong alignment on EnemySquidDestination_EditorUpdatePathLocation");
static_assert(sizeof(EnemySquidDestination_EditorUpdatePathLocation) == 0x000028, "Wrong size on EnemySquidDestination_EditorUpdatePathLocation");
static_assert(offsetof(EnemySquidDestination_EditorUpdatePathLocation, SplineActor) == 0x000000, "Member 'EnemySquidDestination_EditorUpdatePathLocation::SplineActor' has a wrong offset!");

// Function UnionRun.EnemyStoneStatue.MovePositionUpdate
// 0x0004 (0x0004 - 0x0000)
struct EnemyStoneStatue_MovePositionUpdate final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyStoneStatue_MovePositionUpdate) == 0x000004, "Wrong alignment on EnemyStoneStatue_MovePositionUpdate");
static_assert(sizeof(EnemyStoneStatue_MovePositionUpdate) == 0x000004, "Wrong size on EnemyStoneStatue_MovePositionUpdate");
static_assert(offsetof(EnemyStoneStatue_MovePositionUpdate, Ratio) == 0x000000, "Member 'EnemyStoneStatue_MovePositionUpdate::Ratio' has a wrong offset!");

// Function UnionRun.EnemyStoneStatue.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct EnemyStoneStatue_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyStoneStatue_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on EnemyStoneStatue_OnTriggerColliderConflict");
static_assert(sizeof(EnemyStoneStatue_OnTriggerColliderConflict) == 0x000060, "Wrong size on EnemyStoneStatue_OnTriggerColliderConflict");
static_assert(offsetof(EnemyStoneStatue_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'EnemyStoneStatue_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.RaceUISubAiming.ReStartAimingUseBeforeSound
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubAiming_ReStartAimingUseBeforeSound final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubAiming_ReStartAimingUseBeforeSound) == 0x000004, "Wrong alignment on RaceUISubAiming_ReStartAimingUseBeforeSound");
static_assert(sizeof(RaceUISubAiming_ReStartAimingUseBeforeSound) == 0x000004, "Wrong size on RaceUISubAiming_ReStartAimingUseBeforeSound");
static_assert(offsetof(RaceUISubAiming_ReStartAimingUseBeforeSound, PlayerControllerIndex) == 0x000000, "Member 'RaceUISubAiming_ReStartAimingUseBeforeSound::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.RaceUISubAiming.SetRaceHUD
// 0x0010 (0x0010 - 0x0000)
struct RaceUISubAiming_SetRaceHUD final
{
public:
	class UUnionRaceUI*                           inRaceHud;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         localPlayerNum;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubAiming_SetRaceHUD) == 0x000008, "Wrong alignment on RaceUISubAiming_SetRaceHUD");
static_assert(sizeof(RaceUISubAiming_SetRaceHUD) == 0x000010, "Wrong size on RaceUISubAiming_SetRaceHUD");
static_assert(offsetof(RaceUISubAiming_SetRaceHUD, inRaceHud) == 0x000000, "Member 'RaceUISubAiming_SetRaceHUD::inRaceHud' has a wrong offset!");
static_assert(offsetof(RaceUISubAiming_SetRaceHUD, localPlayerNum) == 0x000008, "Member 'RaceUISubAiming_SetRaceHUD::localPlayerNum' has a wrong offset!");

// Function UnionRun.RaceUISubAiming.StopSound
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubAiming_StopSound final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubAiming_StopSound) == 0x000001, "Wrong alignment on RaceUISubAiming_StopSound");
static_assert(sizeof(RaceUISubAiming_StopSound) == 0x000001, "Wrong size on RaceUISubAiming_StopSound");
static_assert(offsetof(RaceUISubAiming_StopSound, bPause) == 0x000000, "Member 'RaceUISubAiming_StopSound::bPause' has a wrong offset!");

// Function UnionRun.EnemyTentacle.TimelineStep
// 0x0004 (0x0004 - 0x0000)
struct EnemyTentacle_TimelineStep final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemyTentacle_TimelineStep) == 0x000004, "Wrong alignment on EnemyTentacle_TimelineStep");
static_assert(sizeof(EnemyTentacle_TimelineStep) == 0x000004, "Wrong size on EnemyTentacle_TimelineStep");
static_assert(offsetof(EnemyTentacle_TimelineStep, Value) == 0x000000, "Member 'EnemyTentacle_TimelineStep::Value' has a wrong offset!");

// Function UnionRun.Enemy_Extnd04_Enemy04001Anim.IsAnimState
// 0x0002 (0x0002 - 0x0000)
struct Enemy_Extnd04_Enemy04001Anim_IsAnimState final
{
public:
	EEnemy04001State                              State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Enemy_Extnd04_Enemy04001Anim_IsAnimState) == 0x000001, "Wrong alignment on Enemy_Extnd04_Enemy04001Anim_IsAnimState");
static_assert(sizeof(Enemy_Extnd04_Enemy04001Anim_IsAnimState) == 0x000002, "Wrong size on Enemy_Extnd04_Enemy04001Anim_IsAnimState");
static_assert(offsetof(Enemy_Extnd04_Enemy04001Anim_IsAnimState, State) == 0x000000, "Member 'Enemy_Extnd04_Enemy04001Anim_IsAnimState::State' has a wrong offset!");
static_assert(offsetof(Enemy_Extnd04_Enemy04001Anim_IsAnimState, ReturnValue) == 0x000001, "Member 'Enemy_Extnd04_Enemy04001Anim_IsAnimState::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubGadget.IsNotEnableGadget
// 0x0002 (0x0002 - 0x0000)
struct RaceUISubGadget_IsNotEnableGadget final
{
public:
	EGadgetId                                     gadgetId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubGadget_IsNotEnableGadget) == 0x000001, "Wrong alignment on RaceUISubGadget_IsNotEnableGadget");
static_assert(sizeof(RaceUISubGadget_IsNotEnableGadget) == 0x000002, "Wrong size on RaceUISubGadget_IsNotEnableGadget");
static_assert(offsetof(RaceUISubGadget_IsNotEnableGadget, gadgetId) == 0x000000, "Member 'RaceUISubGadget_IsNotEnableGadget::gadgetId' has a wrong offset!");
static_assert(offsetof(RaceUISubGadget_IsNotEnableGadget, ReturnValue) == 0x000001, "Member 'RaceUISubGadget_IsNotEnableGadget::ReturnValue' has a wrong offset!");

// Function UnionRun.Enemy_Extnd06_Object_06001.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct Enemy_Extnd06_Object_06001_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        Info;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Enemy_Extnd06_Object_06001_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on Enemy_Extnd06_Object_06001_OnTriggerColliderConflict");
static_assert(sizeof(Enemy_Extnd06_Object_06001_OnTriggerColliderConflict) == 0x000060, "Wrong size on Enemy_Extnd06_Object_06001_OnTriggerColliderConflict");
static_assert(offsetof(Enemy_Extnd06_Object_06001_OnTriggerColliderConflict, Info) == 0x000000, "Member 'Enemy_Extnd06_Object_06001_OnTriggerColliderConflict::Info' has a wrong offset!");

// Function UnionRun.Enemy_Extnd09_Enemy09001_Attack.IsAttacking
// 0x0001 (0x0001 - 0x0000)
struct Enemy_Extnd09_Enemy09001_Attack_IsAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Enemy_Extnd09_Enemy09001_Attack_IsAttacking) == 0x000001, "Wrong alignment on Enemy_Extnd09_Enemy09001_Attack_IsAttacking");
static_assert(sizeof(Enemy_Extnd09_Enemy09001_Attack_IsAttacking) == 0x000001, "Wrong size on Enemy_Extnd09_Enemy09001_Attack_IsAttacking");
static_assert(offsetof(Enemy_Extnd09_Enemy09001_Attack_IsAttacking, ReturnValue) == 0x000000, "Member 'Enemy_Extnd09_Enemy09001_Attack_IsAttacking::ReturnValue' has a wrong offset!");

// Function UnionRun.Enemy_Extnd09_Enemy09001_Attack.IsDamaged
// 0x0001 (0x0001 - 0x0000)
struct Enemy_Extnd09_Enemy09001_Attack_IsDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Enemy_Extnd09_Enemy09001_Attack_IsDamaged) == 0x000001, "Wrong alignment on Enemy_Extnd09_Enemy09001_Attack_IsDamaged");
static_assert(sizeof(Enemy_Extnd09_Enemy09001_Attack_IsDamaged) == 0x000001, "Wrong size on Enemy_Extnd09_Enemy09001_Attack_IsDamaged");
static_assert(offsetof(Enemy_Extnd09_Enemy09001_Attack_IsDamaged, ReturnValue) == 0x000000, "Member 'Enemy_Extnd09_Enemy09001_Attack_IsDamaged::ReturnValue' has a wrong offset!");

// Function UnionRun.Enemy_Extnd09_Enemy09002.IsDefensive
// 0x0001 (0x0001 - 0x0000)
struct Enemy_Extnd09_Enemy09002_IsDefensive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Enemy_Extnd09_Enemy09002_IsDefensive) == 0x000001, "Wrong alignment on Enemy_Extnd09_Enemy09002_IsDefensive");
static_assert(sizeof(Enemy_Extnd09_Enemy09002_IsDefensive) == 0x000001, "Wrong size on Enemy_Extnd09_Enemy09002_IsDefensive");
static_assert(offsetof(Enemy_Extnd09_Enemy09002_IsDefensive, ReturnValue) == 0x000000, "Member 'Enemy_Extnd09_Enemy09002_IsDefensive::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickBakubaku.GetIsFlinching
// 0x0001 (0x0001 - 0x0000)
struct GimmickBakubaku_GetIsFlinching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickBakubaku_GetIsFlinching) == 0x000001, "Wrong alignment on GimmickBakubaku_GetIsFlinching");
static_assert(sizeof(GimmickBakubaku_GetIsFlinching) == 0x000001, "Wrong size on GimmickBakubaku_GetIsFlinching");
static_assert(offsetof(GimmickBakubaku_GetIsFlinching, ReturnValue) == 0x000000, "Member 'GimmickBakubaku_GetIsFlinching::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickManipulatedVehicle.DebugUpdateIdleMove
// 0x0004 (0x0004 - 0x0000)
struct GimmickManipulatedVehicle_DebugUpdateIdleMove final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickManipulatedVehicle_DebugUpdateIdleMove) == 0x000004, "Wrong alignment on GimmickManipulatedVehicle_DebugUpdateIdleMove");
static_assert(sizeof(GimmickManipulatedVehicle_DebugUpdateIdleMove) == 0x000004, "Wrong size on GimmickManipulatedVehicle_DebugUpdateIdleMove");
static_assert(offsetof(GimmickManipulatedVehicle_DebugUpdateIdleMove, DeltaTime) == 0x000000, "Member 'GimmickManipulatedVehicle_DebugUpdateIdleMove::DeltaTime' has a wrong offset!");

// Function UnionRun.FlowerTentacleAnimInstance.GetIIsAppear
// 0x0001 (0x0001 - 0x0000)
struct FlowerTentacleAnimInstance_GetIIsAppear final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowerTentacleAnimInstance_GetIIsAppear) == 0x000001, "Wrong alignment on FlowerTentacleAnimInstance_GetIIsAppear");
static_assert(sizeof(FlowerTentacleAnimInstance_GetIIsAppear) == 0x000001, "Wrong size on FlowerTentacleAnimInstance_GetIIsAppear");
static_assert(offsetof(FlowerTentacleAnimInstance_GetIIsAppear, ReturnValue) == 0x000000, "Member 'FlowerTentacleAnimInstance_GetIIsAppear::ReturnValue' has a wrong offset!");

// Function UnionRun.FlowerTentacleAnimInstance.GetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct FlowerTentacleAnimInstance_GetIsAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowerTentacleAnimInstance_GetIsAttack) == 0x000001, "Wrong alignment on FlowerTentacleAnimInstance_GetIsAttack");
static_assert(sizeof(FlowerTentacleAnimInstance_GetIsAttack) == 0x000001, "Wrong size on FlowerTentacleAnimInstance_GetIsAttack");
static_assert(offsetof(FlowerTentacleAnimInstance_GetIsAttack, ReturnValue) == 0x000000, "Member 'FlowerTentacleAnimInstance_GetIsAttack::ReturnValue' has a wrong offset!");

// Function UnionRun.FlowerTentacleAnimInstance.GetIsDisappear
// 0x0001 (0x0001 - 0x0000)
struct FlowerTentacleAnimInstance_GetIsDisappear final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowerTentacleAnimInstance_GetIsDisappear) == 0x000001, "Wrong alignment on FlowerTentacleAnimInstance_GetIsDisappear");
static_assert(sizeof(FlowerTentacleAnimInstance_GetIsDisappear) == 0x000001, "Wrong size on FlowerTentacleAnimInstance_GetIsDisappear");
static_assert(offsetof(FlowerTentacleAnimInstance_GetIsDisappear, ReturnValue) == 0x000000, "Member 'FlowerTentacleAnimInstance_GetIsDisappear::ReturnValue' has a wrong offset!");

// Function UnionRun.FlowerTentacleAnimInstance.SetIsAppear
// 0x0001 (0x0001 - 0x0000)
struct FlowerTentacleAnimInstance_SetIsAppear final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowerTentacleAnimInstance_SetIsAppear) == 0x000001, "Wrong alignment on FlowerTentacleAnimInstance_SetIsAppear");
static_assert(sizeof(FlowerTentacleAnimInstance_SetIsAppear) == 0x000001, "Wrong size on FlowerTentacleAnimInstance_SetIsAppear");
static_assert(offsetof(FlowerTentacleAnimInstance_SetIsAppear, flag) == 0x000000, "Member 'FlowerTentacleAnimInstance_SetIsAppear::flag' has a wrong offset!");

// Function UnionRun.FlowerTentacleAnimInstance.SetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct FlowerTentacleAnimInstance_SetIsAttack final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowerTentacleAnimInstance_SetIsAttack) == 0x000001, "Wrong alignment on FlowerTentacleAnimInstance_SetIsAttack");
static_assert(sizeof(FlowerTentacleAnimInstance_SetIsAttack) == 0x000001, "Wrong size on FlowerTentacleAnimInstance_SetIsAttack");
static_assert(offsetof(FlowerTentacleAnimInstance_SetIsAttack, flag) == 0x000000, "Member 'FlowerTentacleAnimInstance_SetIsAttack::flag' has a wrong offset!");

// Function UnionRun.FlowerTentacleAnimInstance.SetIsDisappear
// 0x0001 (0x0001 - 0x0000)
struct FlowerTentacleAnimInstance_SetIsDisappear final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowerTentacleAnimInstance_SetIsDisappear) == 0x000001, "Wrong alignment on FlowerTentacleAnimInstance_SetIsDisappear");
static_assert(sizeof(FlowerTentacleAnimInstance_SetIsDisappear) == 0x000001, "Wrong size on FlowerTentacleAnimInstance_SetIsDisappear");
static_assert(offsetof(FlowerTentacleAnimInstance_SetIsDisappear, flag) == 0x000000, "Member 'FlowerTentacleAnimInstance_SetIsDisappear::flag' has a wrong offset!");

// Function UnionRun.FossilTrexAnimInstance.GetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct FossilTrexAnimInstance_GetIsAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FossilTrexAnimInstance_GetIsAttack) == 0x000001, "Wrong alignment on FossilTrexAnimInstance_GetIsAttack");
static_assert(sizeof(FossilTrexAnimInstance_GetIsAttack) == 0x000001, "Wrong size on FossilTrexAnimInstance_GetIsAttack");
static_assert(offsetof(FossilTrexAnimInstance_GetIsAttack, ReturnValue) == 0x000000, "Member 'FossilTrexAnimInstance_GetIsAttack::ReturnValue' has a wrong offset!");

// Function UnionRun.FossilTrexAnimInstance.GetIsTYpeB
// 0x0001 (0x0001 - 0x0000)
struct FossilTrexAnimInstance_GetIsTYpeB final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FossilTrexAnimInstance_GetIsTYpeB) == 0x000001, "Wrong alignment on FossilTrexAnimInstance_GetIsTYpeB");
static_assert(sizeof(FossilTrexAnimInstance_GetIsTYpeB) == 0x000001, "Wrong size on FossilTrexAnimInstance_GetIsTYpeB");
static_assert(offsetof(FossilTrexAnimInstance_GetIsTYpeB, ReturnValue) == 0x000000, "Member 'FossilTrexAnimInstance_GetIsTYpeB::ReturnValue' has a wrong offset!");

// Function UnionRun.FossilTrexAnimInstance.SetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct FossilTrexAnimInstance_SetIsAttack final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FossilTrexAnimInstance_SetIsAttack) == 0x000001, "Wrong alignment on FossilTrexAnimInstance_SetIsAttack");
static_assert(sizeof(FossilTrexAnimInstance_SetIsAttack) == 0x000001, "Wrong size on FossilTrexAnimInstance_SetIsAttack");
static_assert(offsetof(FossilTrexAnimInstance_SetIsAttack, flag) == 0x000000, "Member 'FossilTrexAnimInstance_SetIsAttack::flag' has a wrong offset!");

// Function UnionRun.FossilTrexAnimInstance.SetIsDamage
// 0x0001 (0x0001 - 0x0000)
struct FossilTrexAnimInstance_SetIsDamage final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FossilTrexAnimInstance_SetIsDamage) == 0x000001, "Wrong alignment on FossilTrexAnimInstance_SetIsDamage");
static_assert(sizeof(FossilTrexAnimInstance_SetIsDamage) == 0x000001, "Wrong size on FossilTrexAnimInstance_SetIsDamage");
static_assert(offsetof(FossilTrexAnimInstance_SetIsDamage, flag) == 0x000000, "Member 'FossilTrexAnimInstance_SetIsDamage::flag' has a wrong offset!");

// Function UnionRun.FossilTrexAnimInstance.SetIsTypeB
// 0x0001 (0x0001 - 0x0000)
struct FossilTrexAnimInstance_SetIsTypeB final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FossilTrexAnimInstance_SetIsTypeB) == 0x000001, "Wrong alignment on FossilTrexAnimInstance_SetIsTypeB");
static_assert(sizeof(FossilTrexAnimInstance_SetIsTypeB) == 0x000001, "Wrong size on FossilTrexAnimInstance_SetIsTypeB");
static_assert(offsetof(FossilTrexAnimInstance_SetIsTypeB, flag) == 0x000000, "Member 'FossilTrexAnimInstance_SetIsTypeB::flag' has a wrong offset!");

// Function UnionRun.VATBreakObjectBase.OnVATUpdate
// 0x0018 (0x0018 - 0x0000)
struct VATBreakObjectBase_OnVATUpdate final
{
public:
	class UUnionVATMeshComponent*                 VATComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUnionVATSequenceInfo                  SequenceInfo;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VATBreakObjectBase_OnVATUpdate) == 0x000008, "Wrong alignment on VATBreakObjectBase_OnVATUpdate");
static_assert(sizeof(VATBreakObjectBase_OnVATUpdate) == 0x000018, "Wrong size on VATBreakObjectBase_OnVATUpdate");
static_assert(offsetof(VATBreakObjectBase_OnVATUpdate, VATComponent) == 0x000000, "Member 'VATBreakObjectBase_OnVATUpdate::VATComponent' has a wrong offset!");
static_assert(offsetof(VATBreakObjectBase_OnVATUpdate, SequenceInfo) == 0x000008, "Member 'VATBreakObjectBase_OnVATUpdate::SequenceInfo' has a wrong offset!");

// Function UnionRun.VATBreakObjectBase.GetBreakSpeedType
// 0x0001 (0x0001 - 0x0000)
struct VATBreakObjectBase_GetBreakSpeedType final
{
public:
	EBreakSpeedType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VATBreakObjectBase_GetBreakSpeedType) == 0x000001, "Wrong alignment on VATBreakObjectBase_GetBreakSpeedType");
static_assert(sizeof(VATBreakObjectBase_GetBreakSpeedType) == 0x000001, "Wrong size on VATBreakObjectBase_GetBreakSpeedType");
static_assert(offsetof(VATBreakObjectBase_GetBreakSpeedType, ReturnValue) == 0x000000, "Member 'VATBreakObjectBase_GetBreakSpeedType::ReturnValue' has a wrong offset!");

// Function UnionRun.GadgetBoatJumpSplashPeformance.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct GadgetBoatJumpSplashPeformance_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        Info;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GadgetBoatJumpSplashPeformance_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on GadgetBoatJumpSplashPeformance_OnTriggerColliderConflict");
static_assert(sizeof(GadgetBoatJumpSplashPeformance_OnTriggerColliderConflict) == 0x000060, "Wrong size on GadgetBoatJumpSplashPeformance_OnTriggerColliderConflict");
static_assert(offsetof(GadgetBoatJumpSplashPeformance_OnTriggerColliderConflict, Info) == 0x000000, "Member 'GadgetBoatJumpSplashPeformance_OnTriggerColliderConflict::Info' has a wrong offset!");

// Function UnionRun.GimmickTriggerMotionBase.GetPlayRate
// 0x0008 (0x0008 - 0x0000)
struct GimmickTriggerMotionBase_GetPlayRate final
{
public:
	ETriggerMotionState                           State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickTriggerMotionBase_GetPlayRate) == 0x000004, "Wrong alignment on GimmickTriggerMotionBase_GetPlayRate");
static_assert(sizeof(GimmickTriggerMotionBase_GetPlayRate) == 0x000008, "Wrong size on GimmickTriggerMotionBase_GetPlayRate");
static_assert(offsetof(GimmickTriggerMotionBase_GetPlayRate, State) == 0x000000, "Member 'GimmickTriggerMotionBase_GetPlayRate::State' has a wrong offset!");
static_assert(offsetof(GimmickTriggerMotionBase_GetPlayRate, ReturnValue) == 0x000004, "Member 'GimmickTriggerMotionBase_GetPlayRate::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickTriggerMotionBase.GetTriggerMotionType
// 0x0001 (0x0001 - 0x0000)
struct GimmickTriggerMotionBase_GetTriggerMotionType final
{
public:
	ETriggerMotionType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickTriggerMotionBase_GetTriggerMotionType) == 0x000001, "Wrong alignment on GimmickTriggerMotionBase_GetTriggerMotionType");
static_assert(sizeof(GimmickTriggerMotionBase_GetTriggerMotionType) == 0x000001, "Wrong size on GimmickTriggerMotionBase_GetTriggerMotionType");
static_assert(offsetof(GimmickTriggerMotionBase_GetTriggerMotionType, ReturnValue) == 0x000000, "Member 'GimmickTriggerMotionBase_GetTriggerMotionType::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickTriggerMotionBase.IsPlayIdle
// 0x0001 (0x0001 - 0x0000)
struct GimmickTriggerMotionBase_IsPlayIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickTriggerMotionBase_IsPlayIdle) == 0x000001, "Wrong alignment on GimmickTriggerMotionBase_IsPlayIdle");
static_assert(sizeof(GimmickTriggerMotionBase_IsPlayIdle) == 0x000001, "Wrong size on GimmickTriggerMotionBase_IsPlayIdle");
static_assert(offsetof(GimmickTriggerMotionBase_IsPlayIdle, ReturnValue) == 0x000000, "Member 'GimmickTriggerMotionBase_IsPlayIdle::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickTriggerMotionBase.IsPlayOneShot
// 0x0001 (0x0001 - 0x0000)
struct GimmickTriggerMotionBase_IsPlayOneShot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickTriggerMotionBase_IsPlayOneShot) == 0x000001, "Wrong alignment on GimmickTriggerMotionBase_IsPlayOneShot");
static_assert(sizeof(GimmickTriggerMotionBase_IsPlayOneShot) == 0x000001, "Wrong size on GimmickTriggerMotionBase_IsPlayOneShot");
static_assert(offsetof(GimmickTriggerMotionBase_IsPlayOneShot, ReturnValue) == 0x000000, "Member 'GimmickTriggerMotionBase_IsPlayOneShot::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickTriggerMotionBase.IsTriggered
// 0x0001 (0x0001 - 0x0000)
struct GimmickTriggerMotionBase_IsTriggered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickTriggerMotionBase_IsTriggered) == 0x000001, "Wrong alignment on GimmickTriggerMotionBase_IsTriggered");
static_assert(sizeof(GimmickTriggerMotionBase_IsTriggered) == 0x000001, "Wrong size on GimmickTriggerMotionBase_IsTriggered");
static_assert(offsetof(GimmickTriggerMotionBase_IsTriggered, ReturnValue) == 0x000000, "Member 'GimmickTriggerMotionBase_IsTriggered::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickTriggerMotionVAT.OnVATSequence
// 0x0018 (0x0018 - 0x0000)
struct GimmickTriggerMotionVAT_OnVATSequence final
{
public:
	class UUnionVATMeshComponent*                 VATMeshComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUnionVATSequenceInfo                  SequenceInfo;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GimmickTriggerMotionVAT_OnVATSequence) == 0x000008, "Wrong alignment on GimmickTriggerMotionVAT_OnVATSequence");
static_assert(sizeof(GimmickTriggerMotionVAT_OnVATSequence) == 0x000018, "Wrong size on GimmickTriggerMotionVAT_OnVATSequence");
static_assert(offsetof(GimmickTriggerMotionVAT_OnVATSequence, VATMeshComponent) == 0x000000, "Member 'GimmickTriggerMotionVAT_OnVATSequence::VATMeshComponent' has a wrong offset!");
static_assert(offsetof(GimmickTriggerMotionVAT_OnVATSequence, SequenceInfo) == 0x000008, "Member 'GimmickTriggerMotionVAT_OnVATSequence::SequenceInfo' has a wrong offset!");

// Function UnionRun.NalAnimInstance.IsTakeDamageMotion
// 0x0001 (0x0001 - 0x0000)
struct NalAnimInstance_IsTakeDamageMotion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NalAnimInstance_IsTakeDamageMotion) == 0x000001, "Wrong alignment on NalAnimInstance_IsTakeDamageMotion");
static_assert(sizeof(NalAnimInstance_IsTakeDamageMotion) == 0x000001, "Wrong size on NalAnimInstance_IsTakeDamageMotion");
static_assert(offsetof(NalAnimInstance_IsTakeDamageMotion, ReturnValue) == 0x000000, "Member 'NalAnimInstance_IsTakeDamageMotion::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionFlightCourseDebugDisp.SetUseAssistLength
// 0x0001 (0x0001 - 0x0000)
struct UnionFlightCourseDebugDisp_SetUseAssistLength final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionFlightCourseDebugDisp_SetUseAssistLength) == 0x000001, "Wrong alignment on UnionFlightCourseDebugDisp_SetUseAssistLength");
static_assert(sizeof(UnionFlightCourseDebugDisp_SetUseAssistLength) == 0x000001, "Wrong size on UnionFlightCourseDebugDisp_SetUseAssistLength");
static_assert(offsetof(UnionFlightCourseDebugDisp_SetUseAssistLength, flag) == 0x000000, "Member 'UnionFlightCourseDebugDisp_SetUseAssistLength::flag' has a wrong offset!");

// Function UnionRun.UnionDroneInfoInterface.NotifyCallDroneEvent
// 0x0004 (0x0004 - 0x0000)
struct UnionDroneInfoInterface_NotifyCallDroneEvent final
{
public:
	struct FCallDroneInfo                         Info;                                              // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionDroneInfoInterface_NotifyCallDroneEvent) == 0x000001, "Wrong alignment on UnionDroneInfoInterface_NotifyCallDroneEvent");
static_assert(sizeof(UnionDroneInfoInterface_NotifyCallDroneEvent) == 0x000004, "Wrong size on UnionDroneInfoInterface_NotifyCallDroneEvent");
static_assert(offsetof(UnionDroneInfoInterface_NotifyCallDroneEvent, Info) == 0x000000, "Member 'UnionDroneInfoInterface_NotifyCallDroneEvent::Info' has a wrong offset!");

// Function UnionRun.UnionDroneInfoInterface.NotifyDroneVisibilityEvent
// 0x0001 (0x0001 - 0x0000)
struct UnionDroneInfoInterface_NotifyDroneVisibilityEvent final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionDroneInfoInterface_NotifyDroneVisibilityEvent) == 0x000001, "Wrong alignment on UnionDroneInfoInterface_NotifyDroneVisibilityEvent");
static_assert(sizeof(UnionDroneInfoInterface_NotifyDroneVisibilityEvent) == 0x000001, "Wrong size on UnionDroneInfoInterface_NotifyDroneVisibilityEvent");
static_assert(offsetof(UnionDroneInfoInterface_NotifyDroneVisibilityEvent, Visibility) == 0x000000, "Member 'UnionDroneInfoInterface_NotifyDroneVisibilityEvent::Visibility' has a wrong offset!");

// Function UnionRun.ItemSplashProjectile.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct ItemSplashProjectile_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        Info;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSplashProjectile_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on ItemSplashProjectile_OnTriggerColliderConflict");
static_assert(sizeof(ItemSplashProjectile_OnTriggerColliderConflict) == 0x000060, "Wrong size on ItemSplashProjectile_OnTriggerColliderConflict");
static_assert(offsetof(ItemSplashProjectile_OnTriggerColliderConflict, Info) == 0x000000, "Member 'ItemSplashProjectile_OnTriggerColliderConflict::Info' has a wrong offset!");

// Function UnionRun.GimmickStatueBeam.SetAttackEnable
// 0x0001 (0x0001 - 0x0000)
struct GimmickStatueBeam_SetAttackEnable final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickStatueBeam_SetAttackEnable) == 0x000001, "Wrong alignment on GimmickStatueBeam_SetAttackEnable");
static_assert(sizeof(GimmickStatueBeam_SetAttackEnable) == 0x000001, "Wrong size on GimmickStatueBeam_SetAttackEnable");
static_assert(offsetof(GimmickStatueBeam_SetAttackEnable, IsEnable) == 0x000000, "Member 'GimmickStatueBeam_SetAttackEnable::IsEnable' has a wrong offset!");

// Function UnionRun.GadgetMessageInterface.GadgetNotifyAttack
// 0x0070 (0x0070 - 0x0000)
struct GadgetMessageInterface_GadgetNotifyAttack final
{
public:
	struct FGadgetNotifyAttackInfo                Info;                                              // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GadgetMessageInterface_GadgetNotifyAttack) == 0x000008, "Wrong alignment on GadgetMessageInterface_GadgetNotifyAttack");
static_assert(sizeof(GadgetMessageInterface_GadgetNotifyAttack) == 0x000070, "Wrong size on GadgetMessageInterface_GadgetNotifyAttack");
static_assert(offsetof(GadgetMessageInterface_GadgetNotifyAttack, Info) == 0x000000, "Member 'GadgetMessageInterface_GadgetNotifyAttack::Info' has a wrong offset!");

// Function UnionRun.GadgetMessageInterface.GadgetNotifyMessage
// 0x0008 (0x0008 - 0x0000)
struct GadgetMessageInterface_GadgetNotifyMessage final
{
public:
	class FName                                   Message;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GadgetMessageInterface_GadgetNotifyMessage) == 0x000004, "Wrong alignment on GadgetMessageInterface_GadgetNotifyMessage");
static_assert(sizeof(GadgetMessageInterface_GadgetNotifyMessage) == 0x000008, "Wrong size on GadgetMessageInterface_GadgetNotifyMessage");
static_assert(offsetof(GadgetMessageInterface_GadgetNotifyMessage, Message) == 0x000000, "Member 'GadgetMessageInterface_GadgetNotifyMessage::Message' has a wrong offset!");

// Function UnionRun.ItemRocketPunchObject.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct ItemRocketPunchObject_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemRocketPunchObject_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on ItemRocketPunchObject_OnTriggerColliderConflict");
static_assert(sizeof(ItemRocketPunchObject_OnTriggerColliderConflict) == 0x000060, "Wrong size on ItemRocketPunchObject_OnTriggerColliderConflict");
static_assert(offsetof(ItemRocketPunchObject_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'ItemRocketPunchObject_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.GimmickStaticBodyComponent.SetCameraId
// 0x0004 (0x0004 - 0x0000)
struct GimmickStaticBodyComponent_SetCameraId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickStaticBodyComponent_SetCameraId) == 0x000004, "Wrong alignment on GimmickStaticBodyComponent_SetCameraId");
static_assert(sizeof(GimmickStaticBodyComponent_SetCameraId) == 0x000004, "Wrong size on GimmickStaticBodyComponent_SetCameraId");
static_assert(offsetof(GimmickStaticBodyComponent_SetCameraId, ID) == 0x000000, "Member 'GimmickStaticBodyComponent_SetCameraId::ID' has a wrong offset!");

// Function UnionRun.GimmickStaticBodyComponent.SetIgnoreItemInvincibleWall
// 0x0001 (0x0001 - 0x0000)
struct GimmickStaticBodyComponent_SetIgnoreItemInvincibleWall final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickStaticBodyComponent_SetIgnoreItemInvincibleWall) == 0x000001, "Wrong alignment on GimmickStaticBodyComponent_SetIgnoreItemInvincibleWall");
static_assert(sizeof(GimmickStaticBodyComponent_SetIgnoreItemInvincibleWall) == 0x000001, "Wrong size on GimmickStaticBodyComponent_SetIgnoreItemInvincibleWall");
static_assert(offsetof(GimmickStaticBodyComponent_SetIgnoreItemInvincibleWall, flag) == 0x000000, "Member 'GimmickStaticBodyComponent_SetIgnoreItemInvincibleWall::flag' has a wrong offset!");

// Function UnionRun.GimmickStaticBodyComponent.SetParamId
// 0x0004 (0x0004 - 0x0000)
struct GimmickStaticBodyComponent_SetParamId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickStaticBodyComponent_SetParamId) == 0x000004, "Wrong alignment on GimmickStaticBodyComponent_SetParamId");
static_assert(sizeof(GimmickStaticBodyComponent_SetParamId) == 0x000004, "Wrong size on GimmickStaticBodyComponent_SetParamId");
static_assert(offsetof(GimmickStaticBodyComponent_SetParamId, ID) == 0x000000, "Member 'GimmickStaticBodyComponent_SetParamId::ID' has a wrong offset!");

// Function UnionRun.GimmickStaticBodyComponent.SetPostProcessEffectType
// 0x0001 (0x0001 - 0x0000)
struct GimmickStaticBodyComponent_SetPostProcessEffectType final
{
public:
	EUnionRacePostProcessEffectType               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickStaticBodyComponent_SetPostProcessEffectType) == 0x000001, "Wrong alignment on GimmickStaticBodyComponent_SetPostProcessEffectType");
static_assert(sizeof(GimmickStaticBodyComponent_SetPostProcessEffectType) == 0x000001, "Wrong size on GimmickStaticBodyComponent_SetPostProcessEffectType");
static_assert(offsetof(GimmickStaticBodyComponent_SetPostProcessEffectType, Type) == 0x000000, "Member 'GimmickStaticBodyComponent_SetPostProcessEffectType::Type' has a wrong offset!");

// Function UnionRun.GimmickStaticBodyComponent.SetResultCameraType
// 0x0001 (0x0001 - 0x0000)
struct GimmickStaticBodyComponent_SetResultCameraType final
{
public:
	EResultCameraProductionType                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickStaticBodyComponent_SetResultCameraType) == 0x000001, "Wrong alignment on GimmickStaticBodyComponent_SetResultCameraType");
static_assert(sizeof(GimmickStaticBodyComponent_SetResultCameraType) == 0x000001, "Wrong size on GimmickStaticBodyComponent_SetResultCameraType");
static_assert(offsetof(GimmickStaticBodyComponent_SetResultCameraType, Type) == 0x000000, "Member 'GimmickStaticBodyComponent_SetResultCameraType::Type' has a wrong offset!");

// Function UnionRun.GimmickStaticBodyComponent.SetSurfaceFlag
// 0x001F (0x001F - 0x0000)
struct GimmickStaticBodyComponent_SetSurfaceFlag final
{
public:
	struct FUnionSurfaceFlag                      flag;                                              // 0x0000(0x001F)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickStaticBodyComponent_SetSurfaceFlag) == 0x000001, "Wrong alignment on GimmickStaticBodyComponent_SetSurfaceFlag");
static_assert(sizeof(GimmickStaticBodyComponent_SetSurfaceFlag) == 0x00001F, "Wrong size on GimmickStaticBodyComponent_SetSurfaceFlag");
static_assert(offsetof(GimmickStaticBodyComponent_SetSurfaceFlag, flag) == 0x000000, "Member 'GimmickStaticBodyComponent_SetSurfaceFlag::flag' has a wrong offset!");

// Function UnionRun.GimmickStaticBodyComponent.SetSurfaceType
// 0x0001 (0x0001 - 0x0000)
struct GimmickStaticBodyComponent_SetSurfaceType final
{
public:
	EUnionSurfaceType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickStaticBodyComponent_SetSurfaceType) == 0x000001, "Wrong alignment on GimmickStaticBodyComponent_SetSurfaceType");
static_assert(sizeof(GimmickStaticBodyComponent_SetSurfaceType) == 0x000001, "Wrong size on GimmickStaticBodyComponent_SetSurfaceType");
static_assert(offsetof(GimmickStaticBodyComponent_SetSurfaceType, Type) == 0x000000, "Member 'GimmickStaticBodyComponent_SetSurfaceType::Type' has a wrong offset!");

// Function UnionRun.GimmickBingoBall.SetCollisionSocketName
// 0x0008 (0x0008 - 0x0000)
struct GimmickBingoBall_SetCollisionSocketName final
{
public:
	class FName                                   NewName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickBingoBall_SetCollisionSocketName) == 0x000004, "Wrong alignment on GimmickBingoBall_SetCollisionSocketName");
static_assert(sizeof(GimmickBingoBall_SetCollisionSocketName) == 0x000008, "Wrong size on GimmickBingoBall_SetCollisionSocketName");
static_assert(offsetof(GimmickBingoBall_SetCollisionSocketName, NewName) == 0x000000, "Member 'GimmickBingoBall_SetCollisionSocketName::NewName' has a wrong offset!");

// Function UnionRun.GimmickBollard.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct GimmickBollard_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        Info;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickBollard_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on GimmickBollard_OnTriggerColliderConflict");
static_assert(sizeof(GimmickBollard_OnTriggerColliderConflict) == 0x000060, "Wrong size on GimmickBollard_OnTriggerColliderConflict");
static_assert(offsetof(GimmickBollard_OnTriggerColliderConflict, Info) == 0x000000, "Member 'GimmickBollard_OnTriggerColliderConflict::Info' has a wrong offset!");

// Function UnionRun.GimmickCannonBoo.OnVATFrameFunction
// 0x0018 (0x0018 - 0x0000)
struct GimmickCannonBoo_OnVATFrameFunction final
{
public:
	class UUnionVATMeshComponent*                 VATMeshComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUnionVATSequenceInfo                  SequenceInfo;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GimmickCannonBoo_OnVATFrameFunction) == 0x000008, "Wrong alignment on GimmickCannonBoo_OnVATFrameFunction");
static_assert(sizeof(GimmickCannonBoo_OnVATFrameFunction) == 0x000018, "Wrong size on GimmickCannonBoo_OnVATFrameFunction");
static_assert(offsetof(GimmickCannonBoo_OnVATFrameFunction, VATMeshComponent) == 0x000000, "Member 'GimmickCannonBoo_OnVATFrameFunction::VATMeshComponent' has a wrong offset!");
static_assert(offsetof(GimmickCannonBoo_OnVATFrameFunction, SequenceInfo) == 0x000008, "Member 'GimmickCannonBoo_OnVATFrameFunction::SequenceInfo' has a wrong offset!");

// Function UnionRun.GimmickCrab.IsMovingLeft
// 0x0001 (0x0001 - 0x0000)
struct GimmickCrab_IsMovingLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickCrab_IsMovingLeft) == 0x000001, "Wrong alignment on GimmickCrab_IsMovingLeft");
static_assert(sizeof(GimmickCrab_IsMovingLeft) == 0x000001, "Wrong size on GimmickCrab_IsMovingLeft");
static_assert(offsetof(GimmickCrab_IsMovingLeft, ReturnValue) == 0x000000, "Member 'GimmickCrab_IsMovingLeft::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickEggChaserController.StartAttack
// 0x0001 (0x0001 - 0x0000)
struct GimmickEggChaserController_StartAttack final
{
public:
	bool                                          isRightObject;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickEggChaserController_StartAttack) == 0x000001, "Wrong alignment on GimmickEggChaserController_StartAttack");
static_assert(sizeof(GimmickEggChaserController_StartAttack) == 0x000001, "Wrong size on GimmickEggChaserController_StartAttack");
static_assert(offsetof(GimmickEggChaserController_StartAttack, isRightObject) == 0x000000, "Member 'GimmickEggChaserController_StartAttack::isRightObject' has a wrong offset!");

// Function UnionRun.GimmickFracturedRock.OnPlayAnimation
// 0x0008 (0x0008 - 0x0000)
struct GimmickFracturedRock_OnPlayAnimation final
{
public:
	float                                         displayFram;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         globalPieceScaleMultiplier;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickFracturedRock_OnPlayAnimation) == 0x000004, "Wrong alignment on GimmickFracturedRock_OnPlayAnimation");
static_assert(sizeof(GimmickFracturedRock_OnPlayAnimation) == 0x000008, "Wrong size on GimmickFracturedRock_OnPlayAnimation");
static_assert(offsetof(GimmickFracturedRock_OnPlayAnimation, displayFram) == 0x000000, "Member 'GimmickFracturedRock_OnPlayAnimation::displayFram' has a wrong offset!");
static_assert(offsetof(GimmickFracturedRock_OnPlayAnimation, globalPieceScaleMultiplier) == 0x000004, "Member 'GimmickFracturedRock_OnPlayAnimation::globalPieceScaleMultiplier' has a wrong offset!");

// Function UnionRun.GimmickLightBall.RayIdleMoveUpdate
// 0x0004 (0x0004 - 0x0000)
struct GimmickLightBall_RayIdleMoveUpdate final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickLightBall_RayIdleMoveUpdate) == 0x000004, "Wrong alignment on GimmickLightBall_RayIdleMoveUpdate");
static_assert(sizeof(GimmickLightBall_RayIdleMoveUpdate) == 0x000004, "Wrong size on GimmickLightBall_RayIdleMoveUpdate");
static_assert(offsetof(GimmickLightBall_RayIdleMoveUpdate, Ratio) == 0x000000, "Member 'GimmickLightBall_RayIdleMoveUpdate::Ratio' has a wrong offset!");

// Function UnionRun.GimmickMessageInterface.NotifyStartGimmickEvent
// 0x000C (0x000C - 0x0000)
struct GimmickMessageInterface_NotifyStartGimmickEvent final
{
public:
	EStageId                                      StageId;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RacerIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickMessageInterface_NotifyStartGimmickEvent) == 0x000004, "Wrong alignment on GimmickMessageInterface_NotifyStartGimmickEvent");
static_assert(sizeof(GimmickMessageInterface_NotifyStartGimmickEvent) == 0x00000C, "Wrong size on GimmickMessageInterface_NotifyStartGimmickEvent");
static_assert(offsetof(GimmickMessageInterface_NotifyStartGimmickEvent, StageId) == 0x000000, "Member 'GimmickMessageInterface_NotifyStartGimmickEvent::StageId' has a wrong offset!");
static_assert(offsetof(GimmickMessageInterface_NotifyStartGimmickEvent, EventId) == 0x000004, "Member 'GimmickMessageInterface_NotifyStartGimmickEvent::EventId' has a wrong offset!");
static_assert(offsetof(GimmickMessageInterface_NotifyStartGimmickEvent, RacerIndex) == 0x000008, "Member 'GimmickMessageInterface_NotifyStartGimmickEvent::RacerIndex' has a wrong offset!");

// Function UnionRun.GimmickRollingRock.InitStaticBodyComponent
// 0x0010 (0x0010 - 0x0000)
struct GimmickRollingRock_InitStaticBodyComponent final
{
public:
	class UStaticBodyComponent*                   StaticBodyComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GimmickRollingRock_InitStaticBodyComponent) == 0x000008, "Wrong alignment on GimmickRollingRock_InitStaticBodyComponent");
static_assert(sizeof(GimmickRollingRock_InitStaticBodyComponent) == 0x000010, "Wrong size on GimmickRollingRock_InitStaticBodyComponent");
static_assert(offsetof(GimmickRollingRock_InitStaticBodyComponent, StaticBodyComponent) == 0x000000, "Member 'GimmickRollingRock_InitStaticBodyComponent::StaticBodyComponent' has a wrong offset!");
static_assert(offsetof(GimmickRollingRock_InitStaticBodyComponent, ReturnValue) == 0x000008, "Member 'GimmickRollingRock_InitStaticBodyComponent::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickRollingRock.UpdateRotation
// 0x0004 (0x0004 - 0x0000)
struct GimmickRollingRock_UpdateRotation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickRollingRock_UpdateRotation) == 0x000004, "Wrong alignment on GimmickRollingRock_UpdateRotation");
static_assert(sizeof(GimmickRollingRock_UpdateRotation) == 0x000004, "Wrong size on GimmickRollingRock_UpdateRotation");
static_assert(offsetof(GimmickRollingRock_UpdateRotation, DeltaTime) == 0x000000, "Member 'GimmickRollingRock_UpdateRotation::DeltaTime' has a wrong offset!");

// Function UnionRun.GimmickSwingBall.CalcBaseSwingRotation
// 0x0030 (0x0030 - 0x0000)
struct GimmickSwingBall_CalcBaseSwingRotation final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingPeriod;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingInitialPhase;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickSwingBall_CalcBaseSwingRotation) == 0x000010, "Wrong alignment on GimmickSwingBall_CalcBaseSwingRotation");
static_assert(sizeof(GimmickSwingBall_CalcBaseSwingRotation) == 0x000030, "Wrong size on GimmickSwingBall_CalcBaseSwingRotation");
static_assert(offsetof(GimmickSwingBall_CalcBaseSwingRotation, Time) == 0x000000, "Member 'GimmickSwingBall_CalcBaseSwingRotation::Time' has a wrong offset!");
static_assert(offsetof(GimmickSwingBall_CalcBaseSwingRotation, SwingPeriod) == 0x000004, "Member 'GimmickSwingBall_CalcBaseSwingRotation::SwingPeriod' has a wrong offset!");
static_assert(offsetof(GimmickSwingBall_CalcBaseSwingRotation, SwingInitialPhase) == 0x000008, "Member 'GimmickSwingBall_CalcBaseSwingRotation::SwingInitialPhase' has a wrong offset!");
static_assert(offsetof(GimmickSwingBall_CalcBaseSwingRotation, ReturnValue) == 0x000010, "Member 'GimmickSwingBall_CalcBaseSwingRotation::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickSwingBall.CalcHitSwingRotation
// 0x0030 (0x0030 - 0x0000)
struct GimmickSwingBall_CalcHitSwingRotation final
{
public:
	float                                         HitSwingAmplitude;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitSwingPhase;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickSwingBall_CalcHitSwingRotation) == 0x000010, "Wrong alignment on GimmickSwingBall_CalcHitSwingRotation");
static_assert(sizeof(GimmickSwingBall_CalcHitSwingRotation) == 0x000030, "Wrong size on GimmickSwingBall_CalcHitSwingRotation");
static_assert(offsetof(GimmickSwingBall_CalcHitSwingRotation, HitSwingAmplitude) == 0x000000, "Member 'GimmickSwingBall_CalcHitSwingRotation::HitSwingAmplitude' has a wrong offset!");
static_assert(offsetof(GimmickSwingBall_CalcHitSwingRotation, HitSwingPhase) == 0x000004, "Member 'GimmickSwingBall_CalcHitSwingRotation::HitSwingPhase' has a wrong offset!");
static_assert(offsetof(GimmickSwingBall_CalcHitSwingRotation, ReturnValue) == 0x000010, "Member 'GimmickSwingBall_CalcHitSwingRotation::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickSwingBall.CalcNewHitSwingPhase
// 0x0010 (0x0010 - 0x0000)
struct GimmickSwingBall_CalcNewHitSwingPhase final
{
public:
	float                                         OldPhase;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldAmplitude;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAmplitude;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickSwingBall_CalcNewHitSwingPhase) == 0x000004, "Wrong alignment on GimmickSwingBall_CalcNewHitSwingPhase");
static_assert(sizeof(GimmickSwingBall_CalcNewHitSwingPhase) == 0x000010, "Wrong size on GimmickSwingBall_CalcNewHitSwingPhase");
static_assert(offsetof(GimmickSwingBall_CalcNewHitSwingPhase, OldPhase) == 0x000000, "Member 'GimmickSwingBall_CalcNewHitSwingPhase::OldPhase' has a wrong offset!");
static_assert(offsetof(GimmickSwingBall_CalcNewHitSwingPhase, OldAmplitude) == 0x000004, "Member 'GimmickSwingBall_CalcNewHitSwingPhase::OldAmplitude' has a wrong offset!");
static_assert(offsetof(GimmickSwingBall_CalcNewHitSwingPhase, NewAmplitude) == 0x000008, "Member 'GimmickSwingBall_CalcNewHitSwingPhase::NewAmplitude' has a wrong offset!");
static_assert(offsetof(GimmickSwingBall_CalcNewHitSwingPhase, ReturnValue) == 0x00000C, "Member 'GimmickSwingBall_CalcNewHitSwingPhase::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickThornBall.GetHitSpeedRatio
// 0x0004 (0x0004 - 0x0000)
struct GimmickThornBall_GetHitSpeedRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickThornBall_GetHitSpeedRatio) == 0x000004, "Wrong alignment on GimmickThornBall_GetHitSpeedRatio");
static_assert(sizeof(GimmickThornBall_GetHitSpeedRatio) == 0x000004, "Wrong size on GimmickThornBall_GetHitSpeedRatio");
static_assert(offsetof(GimmickThornBall_GetHitSpeedRatio, ReturnValue) == 0x000000, "Member 'GimmickThornBall_GetHitSpeedRatio::ReturnValue' has a wrong offset!");

// Function UnionRun.GimmickTriggerMotionAnimInstance.NativeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct GimmickTriggerMotionAnimInstance_NativeUpdateAnimation final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickTriggerMotionAnimInstance_NativeUpdateAnimation) == 0x000004, "Wrong alignment on GimmickTriggerMotionAnimInstance_NativeUpdateAnimation");
static_assert(sizeof(GimmickTriggerMotionAnimInstance_NativeUpdateAnimation) == 0x000004, "Wrong size on GimmickTriggerMotionAnimInstance_NativeUpdateAnimation");
static_assert(offsetof(GimmickTriggerMotionAnimInstance_NativeUpdateAnimation, DeltaSeconds) == 0x000000, "Member 'GimmickTriggerMotionAnimInstance_NativeUpdateAnimation::DeltaSeconds' has a wrong offset!");

// Function UnionRun.GimmickWaterfall.OnCarHitEvent
// 0x0018 (0x0018 - 0x0000)
struct GimmickWaterfall_OnCarHitEvent final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickWaterfall_OnCarHitEvent) == 0x000008, "Wrong alignment on GimmickWaterfall_OnCarHitEvent");
static_assert(sizeof(GimmickWaterfall_OnCarHitEvent) == 0x000018, "Wrong size on GimmickWaterfall_OnCarHitEvent");
static_assert(offsetof(GimmickWaterfall_OnCarHitEvent, HitLocation) == 0x000000, "Member 'GimmickWaterfall_OnCarHitEvent::HitLocation' has a wrong offset!");

// Function UnionRun.HeadButtTrexAnimInstance.GetIsAppear
// 0x0001 (0x0001 - 0x0000)
struct HeadButtTrexAnimInstance_GetIsAppear final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadButtTrexAnimInstance_GetIsAppear) == 0x000001, "Wrong alignment on HeadButtTrexAnimInstance_GetIsAppear");
static_assert(sizeof(HeadButtTrexAnimInstance_GetIsAppear) == 0x000001, "Wrong size on HeadButtTrexAnimInstance_GetIsAppear");
static_assert(offsetof(HeadButtTrexAnimInstance_GetIsAppear, ReturnValue) == 0x000000, "Member 'HeadButtTrexAnimInstance_GetIsAppear::ReturnValue' has a wrong offset!");

// Function UnionRun.HeadButtTrexAnimInstance.GetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct HeadButtTrexAnimInstance_GetIsAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadButtTrexAnimInstance_GetIsAttack) == 0x000001, "Wrong alignment on HeadButtTrexAnimInstance_GetIsAttack");
static_assert(sizeof(HeadButtTrexAnimInstance_GetIsAttack) == 0x000001, "Wrong size on HeadButtTrexAnimInstance_GetIsAttack");
static_assert(offsetof(HeadButtTrexAnimInstance_GetIsAttack, ReturnValue) == 0x000000, "Member 'HeadButtTrexAnimInstance_GetIsAttack::ReturnValue' has a wrong offset!");

// Function UnionRun.HeadButtTrexAnimInstance.GetIsDamage
// 0x0001 (0x0001 - 0x0000)
struct HeadButtTrexAnimInstance_GetIsDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadButtTrexAnimInstance_GetIsDamage) == 0x000001, "Wrong alignment on HeadButtTrexAnimInstance_GetIsDamage");
static_assert(sizeof(HeadButtTrexAnimInstance_GetIsDamage) == 0x000001, "Wrong size on HeadButtTrexAnimInstance_GetIsDamage");
static_assert(offsetof(HeadButtTrexAnimInstance_GetIsDamage, ReturnValue) == 0x000000, "Member 'HeadButtTrexAnimInstance_GetIsDamage::ReturnValue' has a wrong offset!");

// Function UnionRun.HeadButtTrexAnimInstance.GetIsMirror
// 0x0001 (0x0001 - 0x0000)
struct HeadButtTrexAnimInstance_GetIsMirror final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadButtTrexAnimInstance_GetIsMirror) == 0x000001, "Wrong alignment on HeadButtTrexAnimInstance_GetIsMirror");
static_assert(sizeof(HeadButtTrexAnimInstance_GetIsMirror) == 0x000001, "Wrong size on HeadButtTrexAnimInstance_GetIsMirror");
static_assert(offsetof(HeadButtTrexAnimInstance_GetIsMirror, ReturnValue) == 0x000000, "Member 'HeadButtTrexAnimInstance_GetIsMirror::ReturnValue' has a wrong offset!");

// Function UnionRun.HeadButtTrexAnimInstance.SetIsAppear
// 0x0001 (0x0001 - 0x0000)
struct HeadButtTrexAnimInstance_SetIsAppear final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadButtTrexAnimInstance_SetIsAppear) == 0x000001, "Wrong alignment on HeadButtTrexAnimInstance_SetIsAppear");
static_assert(sizeof(HeadButtTrexAnimInstance_SetIsAppear) == 0x000001, "Wrong size on HeadButtTrexAnimInstance_SetIsAppear");
static_assert(offsetof(HeadButtTrexAnimInstance_SetIsAppear, flag) == 0x000000, "Member 'HeadButtTrexAnimInstance_SetIsAppear::flag' has a wrong offset!");

// Function UnionRun.HeadButtTrexAnimInstance.SetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct HeadButtTrexAnimInstance_SetIsAttack final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadButtTrexAnimInstance_SetIsAttack) == 0x000001, "Wrong alignment on HeadButtTrexAnimInstance_SetIsAttack");
static_assert(sizeof(HeadButtTrexAnimInstance_SetIsAttack) == 0x000001, "Wrong size on HeadButtTrexAnimInstance_SetIsAttack");
static_assert(offsetof(HeadButtTrexAnimInstance_SetIsAttack, flag) == 0x000000, "Member 'HeadButtTrexAnimInstance_SetIsAttack::flag' has a wrong offset!");

// Function UnionRun.HeadButtTrexAnimInstance.SetIsDamage
// 0x0001 (0x0001 - 0x0000)
struct HeadButtTrexAnimInstance_SetIsDamage final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadButtTrexAnimInstance_SetIsDamage) == 0x000001, "Wrong alignment on HeadButtTrexAnimInstance_SetIsDamage");
static_assert(sizeof(HeadButtTrexAnimInstance_SetIsDamage) == 0x000001, "Wrong size on HeadButtTrexAnimInstance_SetIsDamage");
static_assert(offsetof(HeadButtTrexAnimInstance_SetIsDamage, flag) == 0x000000, "Member 'HeadButtTrexAnimInstance_SetIsDamage::flag' has a wrong offset!");

// Function UnionRun.HeadButtTrexAnimInstance.SetIsMirror
// 0x0001 (0x0001 - 0x0000)
struct HeadButtTrexAnimInstance_SetIsMirror final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadButtTrexAnimInstance_SetIsMirror) == 0x000001, "Wrong alignment on HeadButtTrexAnimInstance_SetIsMirror");
static_assert(sizeof(HeadButtTrexAnimInstance_SetIsMirror) == 0x000001, "Wrong size on HeadButtTrexAnimInstance_SetIsMirror");
static_assert(offsetof(HeadButtTrexAnimInstance_SetIsMirror, flag) == 0x000000, "Member 'HeadButtTrexAnimInstance_SetIsMirror::flag' has a wrong offset!");

// Function UnionRun.UnionMiscFunction.ContainsLevel
// 0x0020 (0x0020 - 0x0000)
struct UnionMiscFunction_ContainsLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionMiscFunction_ContainsLevel) == 0x000008, "Wrong alignment on UnionMiscFunction_ContainsLevel");
static_assert(sizeof(UnionMiscFunction_ContainsLevel) == 0x000020, "Wrong size on UnionMiscFunction_ContainsLevel");
static_assert(offsetof(UnionMiscFunction_ContainsLevel, WorldContextObject) == 0x000000, "Member 'UnionMiscFunction_ContainsLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_ContainsLevel, LevelName) == 0x000008, "Member 'UnionMiscFunction_ContainsLevel::LevelName' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_ContainsLevel, ReturnValue) == 0x000018, "Member 'UnionMiscFunction_ContainsLevel::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionMiscFunction.GetCourseEditorStageAssetDir
// 0x0018 (0x0018 - 0x0000)
struct UnionMiscFunction_GetCourseEditorStageAssetDir final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionMiscFunction_GetCourseEditorStageAssetDir) == 0x000008, "Wrong alignment on UnionMiscFunction_GetCourseEditorStageAssetDir");
static_assert(sizeof(UnionMiscFunction_GetCourseEditorStageAssetDir) == 0x000018, "Wrong size on UnionMiscFunction_GetCourseEditorStageAssetDir");
static_assert(offsetof(UnionMiscFunction_GetCourseEditorStageAssetDir, WorldContextObject) == 0x000000, "Member 'UnionMiscFunction_GetCourseEditorStageAssetDir::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_GetCourseEditorStageAssetDir, ReturnValue) == 0x000008, "Member 'UnionMiscFunction_GetCourseEditorStageAssetDir::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionMiscFunction.GetStageAssetDir
// 0x0018 (0x0018 - 0x0000)
struct UnionMiscFunction_GetStageAssetDir final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionMiscFunction_GetStageAssetDir) == 0x000008, "Wrong alignment on UnionMiscFunction_GetStageAssetDir");
static_assert(sizeof(UnionMiscFunction_GetStageAssetDir) == 0x000018, "Wrong size on UnionMiscFunction_GetStageAssetDir");
static_assert(offsetof(UnionMiscFunction_GetStageAssetDir, WorldContextObject) == 0x000000, "Member 'UnionMiscFunction_GetStageAssetDir::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_GetStageAssetDir, ReturnValue) == 0x000008, "Member 'UnionMiscFunction_GetStageAssetDir::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionMiscFunction.GetStageAssetFilenameTrunk
// 0x0018 (0x0018 - 0x0000)
struct UnionMiscFunction_GetStageAssetFilenameTrunk final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionMiscFunction_GetStageAssetFilenameTrunk) == 0x000008, "Wrong alignment on UnionMiscFunction_GetStageAssetFilenameTrunk");
static_assert(sizeof(UnionMiscFunction_GetStageAssetFilenameTrunk) == 0x000018, "Wrong size on UnionMiscFunction_GetStageAssetFilenameTrunk");
static_assert(offsetof(UnionMiscFunction_GetStageAssetFilenameTrunk, WorldContextObject) == 0x000000, "Member 'UnionMiscFunction_GetStageAssetFilenameTrunk::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_GetStageAssetFilenameTrunk, ReturnValue) == 0x000008, "Member 'UnionMiscFunction_GetStageAssetFilenameTrunk::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionMiscFunction.LoadComPathAssetByFilePath
// 0x0020 (0x0020 - 0x0000)
struct UnionMiscFunction_LoadComPathAssetByFilePath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionComPathBinaryDataAsset*           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionMiscFunction_LoadComPathAssetByFilePath) == 0x000008, "Wrong alignment on UnionMiscFunction_LoadComPathAssetByFilePath");
static_assert(sizeof(UnionMiscFunction_LoadComPathAssetByFilePath) == 0x000020, "Wrong size on UnionMiscFunction_LoadComPathAssetByFilePath");
static_assert(offsetof(UnionMiscFunction_LoadComPathAssetByFilePath, WorldContextObject) == 0x000000, "Member 'UnionMiscFunction_LoadComPathAssetByFilePath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_LoadComPathAssetByFilePath, FilePath) == 0x000008, "Member 'UnionMiscFunction_LoadComPathAssetByFilePath::FilePath' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_LoadComPathAssetByFilePath, ReturnValue) == 0x000018, "Member 'UnionMiscFunction_LoadComPathAssetByFilePath::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionMiscFunction.LoadCourseCollisionAssetByFilePath
// 0x0020 (0x0020 - 0x0000)
struct UnionMiscFunction_LoadCourseCollisionAssetByFilePath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionBtCollisionBinaryAsset*           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionMiscFunction_LoadCourseCollisionAssetByFilePath) == 0x000008, "Wrong alignment on UnionMiscFunction_LoadCourseCollisionAssetByFilePath");
static_assert(sizeof(UnionMiscFunction_LoadCourseCollisionAssetByFilePath) == 0x000020, "Wrong size on UnionMiscFunction_LoadCourseCollisionAssetByFilePath");
static_assert(offsetof(UnionMiscFunction_LoadCourseCollisionAssetByFilePath, WorldContextObject) == 0x000000, "Member 'UnionMiscFunction_LoadCourseCollisionAssetByFilePath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_LoadCourseCollisionAssetByFilePath, FilePath) == 0x000008, "Member 'UnionMiscFunction_LoadCourseCollisionAssetByFilePath::FilePath' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_LoadCourseCollisionAssetByFilePath, ReturnValue) == 0x000018, "Member 'UnionMiscFunction_LoadCourseCollisionAssetByFilePath::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionMiscFunction.LoadCourseNavigationAssetByFilePath
// 0x0020 (0x0020 - 0x0000)
struct UnionMiscFunction_LoadCourseNavigationAssetByFilePath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionNavigationBinaryDataAsset*        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionMiscFunction_LoadCourseNavigationAssetByFilePath) == 0x000008, "Wrong alignment on UnionMiscFunction_LoadCourseNavigationAssetByFilePath");
static_assert(sizeof(UnionMiscFunction_LoadCourseNavigationAssetByFilePath) == 0x000020, "Wrong size on UnionMiscFunction_LoadCourseNavigationAssetByFilePath");
static_assert(offsetof(UnionMiscFunction_LoadCourseNavigationAssetByFilePath, WorldContextObject) == 0x000000, "Member 'UnionMiscFunction_LoadCourseNavigationAssetByFilePath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_LoadCourseNavigationAssetByFilePath, FilePath) == 0x000008, "Member 'UnionMiscFunction_LoadCourseNavigationAssetByFilePath::FilePath' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_LoadCourseNavigationAssetByFilePath, ReturnValue) == 0x000018, "Member 'UnionMiscFunction_LoadCourseNavigationAssetByFilePath::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionMiscFunction.LoadRunPathAssetByFilePath
// 0x0020 (0x0020 - 0x0000)
struct UnionMiscFunction_LoadRunPathAssetByFilePath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionRunPathBinaryDataAsset*           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionMiscFunction_LoadRunPathAssetByFilePath) == 0x000008, "Wrong alignment on UnionMiscFunction_LoadRunPathAssetByFilePath");
static_assert(sizeof(UnionMiscFunction_LoadRunPathAssetByFilePath) == 0x000020, "Wrong size on UnionMiscFunction_LoadRunPathAssetByFilePath");
static_assert(offsetof(UnionMiscFunction_LoadRunPathAssetByFilePath, WorldContextObject) == 0x000000, "Member 'UnionMiscFunction_LoadRunPathAssetByFilePath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_LoadRunPathAssetByFilePath, FilePath) == 0x000008, "Member 'UnionMiscFunction_LoadRunPathAssetByFilePath::FilePath' has a wrong offset!");
static_assert(offsetof(UnionMiscFunction_LoadRunPathAssetByFilePath, ReturnValue) == 0x000018, "Member 'UnionMiscFunction_LoadRunPathAssetByFilePath::ReturnValue' has a wrong offset!");

// Function UnionRun.SnakeAnimInstance.GetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct SnakeAnimInstance_GetIsAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnakeAnimInstance_GetIsAttack) == 0x000001, "Wrong alignment on SnakeAnimInstance_GetIsAttack");
static_assert(sizeof(SnakeAnimInstance_GetIsAttack) == 0x000001, "Wrong size on SnakeAnimInstance_GetIsAttack");
static_assert(offsetof(SnakeAnimInstance_GetIsAttack, ReturnValue) == 0x000000, "Member 'SnakeAnimInstance_GetIsAttack::ReturnValue' has a wrong offset!");

// Function UnionRun.SnakeAnimInstance.GetIsDamage
// 0x0001 (0x0001 - 0x0000)
struct SnakeAnimInstance_GetIsDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnakeAnimInstance_GetIsDamage) == 0x000001, "Wrong alignment on SnakeAnimInstance_GetIsDamage");
static_assert(sizeof(SnakeAnimInstance_GetIsDamage) == 0x000001, "Wrong size on SnakeAnimInstance_GetIsDamage");
static_assert(offsetof(SnakeAnimInstance_GetIsDamage, ReturnValue) == 0x000000, "Member 'SnakeAnimInstance_GetIsDamage::ReturnValue' has a wrong offset!");

// Function UnionRun.SnakeAnimInstance.GetIsIdle
// 0x0001 (0x0001 - 0x0000)
struct SnakeAnimInstance_GetIsIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnakeAnimInstance_GetIsIdle) == 0x000001, "Wrong alignment on SnakeAnimInstance_GetIsIdle");
static_assert(sizeof(SnakeAnimInstance_GetIsIdle) == 0x000001, "Wrong size on SnakeAnimInstance_GetIsIdle");
static_assert(offsetof(SnakeAnimInstance_GetIsIdle, ReturnValue) == 0x000000, "Member 'SnakeAnimInstance_GetIsIdle::ReturnValue' has a wrong offset!");

// Function UnionRun.SnakeAnimInstance.SetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct SnakeAnimInstance_SetIsAttack final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnakeAnimInstance_SetIsAttack) == 0x000001, "Wrong alignment on SnakeAnimInstance_SetIsAttack");
static_assert(sizeof(SnakeAnimInstance_SetIsAttack) == 0x000001, "Wrong size on SnakeAnimInstance_SetIsAttack");
static_assert(offsetof(SnakeAnimInstance_SetIsAttack, flag) == 0x000000, "Member 'SnakeAnimInstance_SetIsAttack::flag' has a wrong offset!");

// Function UnionRun.SnakeAnimInstance.SetIsDamage
// 0x0001 (0x0001 - 0x0000)
struct SnakeAnimInstance_SetIsDamage final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnakeAnimInstance_SetIsDamage) == 0x000001, "Wrong alignment on SnakeAnimInstance_SetIsDamage");
static_assert(sizeof(SnakeAnimInstance_SetIsDamage) == 0x000001, "Wrong size on SnakeAnimInstance_SetIsDamage");
static_assert(offsetof(SnakeAnimInstance_SetIsDamage, flag) == 0x000000, "Member 'SnakeAnimInstance_SetIsDamage::flag' has a wrong offset!");

// Function UnionRun.SnakeAnimInstance.SetIsIdle
// 0x0001 (0x0001 - 0x0000)
struct SnakeAnimInstance_SetIsIdle final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnakeAnimInstance_SetIsIdle) == 0x000001, "Wrong alignment on SnakeAnimInstance_SetIsIdle");
static_assert(sizeof(SnakeAnimInstance_SetIsIdle) == 0x000001, "Wrong size on SnakeAnimInstance_SetIsIdle");
static_assert(offsetof(SnakeAnimInstance_SetIsIdle, flag) == 0x000000, "Member 'SnakeAnimInstance_SetIsIdle::flag' has a wrong offset!");

// Function UnionRun.ItemBodyCutObject.OnTriggerConflict
// 0x0060 (0x0060 - 0x0000)
struct ItemBodyCutObject_OnTriggerConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBodyCutObject_OnTriggerConflict) == 0x000008, "Wrong alignment on ItemBodyCutObject_OnTriggerConflict");
static_assert(sizeof(ItemBodyCutObject_OnTriggerConflict) == 0x000060, "Wrong size on ItemBodyCutObject_OnTriggerConflict");
static_assert(offsetof(ItemBodyCutObject_OnTriggerConflict, HitInfo) == 0x000000, "Member 'ItemBodyCutObject_OnTriggerConflict::HitInfo' has a wrong offset!");

// Function UnionRun.SummonRingAnimInstance.GetIsExit
// 0x0001 (0x0001 - 0x0000)
struct SummonRingAnimInstance_GetIsExit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonRingAnimInstance_GetIsExit) == 0x000001, "Wrong alignment on SummonRingAnimInstance_GetIsExit");
static_assert(sizeof(SummonRingAnimInstance_GetIsExit) == 0x000001, "Wrong size on SummonRingAnimInstance_GetIsExit");
static_assert(offsetof(SummonRingAnimInstance_GetIsExit, ReturnValue) == 0x000000, "Member 'SummonRingAnimInstance_GetIsExit::ReturnValue' has a wrong offset!");

// Function UnionRun.SummonRingAnimInstance.GetIsStart
// 0x0001 (0x0001 - 0x0000)
struct SummonRingAnimInstance_GetIsStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonRingAnimInstance_GetIsStart) == 0x000001, "Wrong alignment on SummonRingAnimInstance_GetIsStart");
static_assert(sizeof(SummonRingAnimInstance_GetIsStart) == 0x000001, "Wrong size on SummonRingAnimInstance_GetIsStart");
static_assert(offsetof(SummonRingAnimInstance_GetIsStart, ReturnValue) == 0x000000, "Member 'SummonRingAnimInstance_GetIsStart::ReturnValue' has a wrong offset!");

// Function UnionRun.SummonRingAnimInstance.SetIsExit
// 0x0001 (0x0001 - 0x0000)
struct SummonRingAnimInstance_SetIsExit final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonRingAnimInstance_SetIsExit) == 0x000001, "Wrong alignment on SummonRingAnimInstance_SetIsExit");
static_assert(sizeof(SummonRingAnimInstance_SetIsExit) == 0x000001, "Wrong size on SummonRingAnimInstance_SetIsExit");
static_assert(offsetof(SummonRingAnimInstance_SetIsExit, flag) == 0x000000, "Member 'SummonRingAnimInstance_SetIsExit::flag' has a wrong offset!");

// Function UnionRun.SummonRingAnimInstance.SetIsStart
// 0x0001 (0x0001 - 0x0000)
struct SummonRingAnimInstance_SetIsStart final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonRingAnimInstance_SetIsStart) == 0x000001, "Wrong alignment on SummonRingAnimInstance_SetIsStart");
static_assert(sizeof(SummonRingAnimInstance_SetIsStart) == 0x000001, "Wrong size on SummonRingAnimInstance_SetIsStart");
static_assert(offsetof(SummonRingAnimInstance_SetIsStart, flag) == 0x000000, "Member 'SummonRingAnimInstance_SetIsStart::flag' has a wrong offset!");

// Function UnionRun.TrainAnimInstance.GetIsDamage
// 0x0001 (0x0001 - 0x0000)
struct TrainAnimInstance_GetIsDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainAnimInstance_GetIsDamage) == 0x000001, "Wrong alignment on TrainAnimInstance_GetIsDamage");
static_assert(sizeof(TrainAnimInstance_GetIsDamage) == 0x000001, "Wrong size on TrainAnimInstance_GetIsDamage");
static_assert(offsetof(TrainAnimInstance_GetIsDamage, ReturnValue) == 0x000000, "Member 'TrainAnimInstance_GetIsDamage::ReturnValue' has a wrong offset!");

// Function UnionRun.TrainAnimInstance.GetIsMove
// 0x0001 (0x0001 - 0x0000)
struct TrainAnimInstance_GetIsMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainAnimInstance_GetIsMove) == 0x000001, "Wrong alignment on TrainAnimInstance_GetIsMove");
static_assert(sizeof(TrainAnimInstance_GetIsMove) == 0x000001, "Wrong size on TrainAnimInstance_GetIsMove");
static_assert(offsetof(TrainAnimInstance_GetIsMove, ReturnValue) == 0x000000, "Member 'TrainAnimInstance_GetIsMove::ReturnValue' has a wrong offset!");

// Function UnionRun.TrainAnimInstance.SetIsDamage
// 0x0001 (0x0001 - 0x0000)
struct TrainAnimInstance_SetIsDamage final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainAnimInstance_SetIsDamage) == 0x000001, "Wrong alignment on TrainAnimInstance_SetIsDamage");
static_assert(sizeof(TrainAnimInstance_SetIsDamage) == 0x000001, "Wrong size on TrainAnimInstance_SetIsDamage");
static_assert(offsetof(TrainAnimInstance_SetIsDamage, flag) == 0x000000, "Member 'TrainAnimInstance_SetIsDamage::flag' has a wrong offset!");

// Function UnionRun.TrainAnimInstance.SetIsMove
// 0x0001 (0x0001 - 0x0000)
struct TrainAnimInstance_SetIsMove final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainAnimInstance_SetIsMove) == 0x000001, "Wrong alignment on TrainAnimInstance_SetIsMove");
static_assert(sizeof(TrainAnimInstance_SetIsMove) == 0x000001, "Wrong size on TrainAnimInstance_SetIsMove");
static_assert(offsetof(TrainAnimInstance_SetIsMove, flag) == 0x000000, "Member 'TrainAnimInstance_SetIsMove::flag' has a wrong offset!");

// Function UnionRun.ItemCountDownComponent.InitializeCountDown
// 0x0010 (0x0010 - 0x0000)
struct ItemCountDownComponent_InitializeCountDown final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemCountDownComponent_InitializeCountDown) == 0x000008, "Wrong alignment on ItemCountDownComponent_InitializeCountDown");
static_assert(sizeof(ItemCountDownComponent_InitializeCountDown) == 0x000010, "Wrong size on ItemCountDownComponent_InitializeCountDown");
static_assert(offsetof(ItemCountDownComponent_InitializeCountDown, Component) == 0x000000, "Member 'ItemCountDownComponent_InitializeCountDown::Component' has a wrong offset!");
static_assert(offsetof(ItemCountDownComponent_InitializeCountDown, bReset) == 0x000008, "Member 'ItemCountDownComponent_InitializeCountDown::bReset' has a wrong offset!");

// Function UnionRun.ItemCountDownComponent.ResetTargetParameter
// 0x0008 (0x0008 - 0x0000)
struct ItemCountDownComponent_ResetTargetParameter final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemCountDownComponent_ResetTargetParameter) == 0x000008, "Wrong alignment on ItemCountDownComponent_ResetTargetParameter");
static_assert(sizeof(ItemCountDownComponent_ResetTargetParameter) == 0x000008, "Wrong size on ItemCountDownComponent_ResetTargetParameter");
static_assert(offsetof(ItemCountDownComponent_ResetTargetParameter, Component) == 0x000000, "Member 'ItemCountDownComponent_ResetTargetParameter::Component' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.GetIsGift
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_GetIsGift final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_GetIsGift) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_GetIsGift");
static_assert(sizeof(ItemDarkChaoAnimInstance_GetIsGift) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_GetIsGift");
static_assert(offsetof(ItemDarkChaoAnimInstance_GetIsGift, ReturnValue) == 0x000000, "Member 'ItemDarkChaoAnimInstance_GetIsGift::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.GetIsIdle
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_GetIsIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_GetIsIdle) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_GetIsIdle");
static_assert(sizeof(ItemDarkChaoAnimInstance_GetIsIdle) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_GetIsIdle");
static_assert(offsetof(ItemDarkChaoAnimInstance_GetIsIdle, ReturnValue) == 0x000000, "Member 'ItemDarkChaoAnimInstance_GetIsIdle::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.GetIsSteal
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_GetIsSteal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_GetIsSteal) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_GetIsSteal");
static_assert(sizeof(ItemDarkChaoAnimInstance_GetIsSteal) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_GetIsSteal");
static_assert(offsetof(ItemDarkChaoAnimInstance_GetIsSteal, ReturnValue) == 0x000000, "Member 'ItemDarkChaoAnimInstance_GetIsSteal::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.GetIsThrow
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_GetIsThrow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_GetIsThrow) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_GetIsThrow");
static_assert(sizeof(ItemDarkChaoAnimInstance_GetIsThrow) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_GetIsThrow");
static_assert(offsetof(ItemDarkChaoAnimInstance_GetIsThrow, ReturnValue) == 0x000000, "Member 'ItemDarkChaoAnimInstance_GetIsThrow::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.GetIsThrowHit
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_GetIsThrowHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_GetIsThrowHit) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_GetIsThrowHit");
static_assert(sizeof(ItemDarkChaoAnimInstance_GetIsThrowHit) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_GetIsThrowHit");
static_assert(offsetof(ItemDarkChaoAnimInstance_GetIsThrowHit, ReturnValue) == 0x000000, "Member 'ItemDarkChaoAnimInstance_GetIsThrowHit::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.GetIsThrowMissBound
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_GetIsThrowMissBound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_GetIsThrowMissBound) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_GetIsThrowMissBound");
static_assert(sizeof(ItemDarkChaoAnimInstance_GetIsThrowMissBound) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_GetIsThrowMissBound");
static_assert(offsetof(ItemDarkChaoAnimInstance_GetIsThrowMissBound, ReturnValue) == 0x000000, "Member 'ItemDarkChaoAnimInstance_GetIsThrowMissBound::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.GetIsThrowMissFall
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_GetIsThrowMissFall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_GetIsThrowMissFall) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_GetIsThrowMissFall");
static_assert(sizeof(ItemDarkChaoAnimInstance_GetIsThrowMissFall) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_GetIsThrowMissFall");
static_assert(offsetof(ItemDarkChaoAnimInstance_GetIsThrowMissFall, ReturnValue) == 0x000000, "Member 'ItemDarkChaoAnimInstance_GetIsThrowMissFall::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.GetIsUse
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_GetIsUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_GetIsUse) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_GetIsUse");
static_assert(sizeof(ItemDarkChaoAnimInstance_GetIsUse) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_GetIsUse");
static_assert(offsetof(ItemDarkChaoAnimInstance_GetIsUse, ReturnValue) == 0x000000, "Member 'ItemDarkChaoAnimInstance_GetIsUse::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.GetThrowAnimController
// 0x0004 (0x0004 - 0x0000)
struct ItemDarkChaoAnimInstance_GetThrowAnimController final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_GetThrowAnimController) == 0x000004, "Wrong alignment on ItemDarkChaoAnimInstance_GetThrowAnimController");
static_assert(sizeof(ItemDarkChaoAnimInstance_GetThrowAnimController) == 0x000004, "Wrong size on ItemDarkChaoAnimInstance_GetThrowAnimController");
static_assert(offsetof(ItemDarkChaoAnimInstance_GetThrowAnimController, ReturnValue) == 0x000000, "Member 'ItemDarkChaoAnimInstance_GetThrowAnimController::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.SetIsGift
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_SetIsGift final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_SetIsGift) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_SetIsGift");
static_assert(sizeof(ItemDarkChaoAnimInstance_SetIsGift) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_SetIsGift");
static_assert(offsetof(ItemDarkChaoAnimInstance_SetIsGift, flag) == 0x000000, "Member 'ItemDarkChaoAnimInstance_SetIsGift::flag' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.SetIsIdle
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_SetIsIdle final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_SetIsIdle) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_SetIsIdle");
static_assert(sizeof(ItemDarkChaoAnimInstance_SetIsIdle) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_SetIsIdle");
static_assert(offsetof(ItemDarkChaoAnimInstance_SetIsIdle, flag) == 0x000000, "Member 'ItemDarkChaoAnimInstance_SetIsIdle::flag' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.SetIsSteal
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_SetIsSteal final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_SetIsSteal) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_SetIsSteal");
static_assert(sizeof(ItemDarkChaoAnimInstance_SetIsSteal) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_SetIsSteal");
static_assert(offsetof(ItemDarkChaoAnimInstance_SetIsSteal, flag) == 0x000000, "Member 'ItemDarkChaoAnimInstance_SetIsSteal::flag' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.SetIsThrow
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_SetIsThrow final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_SetIsThrow) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_SetIsThrow");
static_assert(sizeof(ItemDarkChaoAnimInstance_SetIsThrow) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_SetIsThrow");
static_assert(offsetof(ItemDarkChaoAnimInstance_SetIsThrow, flag) == 0x000000, "Member 'ItemDarkChaoAnimInstance_SetIsThrow::flag' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.SetIsThrowHit
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_SetIsThrowHit final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_SetIsThrowHit) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_SetIsThrowHit");
static_assert(sizeof(ItemDarkChaoAnimInstance_SetIsThrowHit) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_SetIsThrowHit");
static_assert(offsetof(ItemDarkChaoAnimInstance_SetIsThrowHit, flag) == 0x000000, "Member 'ItemDarkChaoAnimInstance_SetIsThrowHit::flag' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.SetIsThrowMissBound
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_SetIsThrowMissBound final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_SetIsThrowMissBound) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_SetIsThrowMissBound");
static_assert(sizeof(ItemDarkChaoAnimInstance_SetIsThrowMissBound) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_SetIsThrowMissBound");
static_assert(offsetof(ItemDarkChaoAnimInstance_SetIsThrowMissBound, flag) == 0x000000, "Member 'ItemDarkChaoAnimInstance_SetIsThrowMissBound::flag' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.SetIsThrowMissFall
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_SetIsThrowMissFall final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_SetIsThrowMissFall) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_SetIsThrowMissFall");
static_assert(sizeof(ItemDarkChaoAnimInstance_SetIsThrowMissFall) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_SetIsThrowMissFall");
static_assert(offsetof(ItemDarkChaoAnimInstance_SetIsThrowMissFall, flag) == 0x000000, "Member 'ItemDarkChaoAnimInstance_SetIsThrowMissFall::flag' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.SetIsUse
// 0x0001 (0x0001 - 0x0000)
struct ItemDarkChaoAnimInstance_SetIsUse final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_SetIsUse) == 0x000001, "Wrong alignment on ItemDarkChaoAnimInstance_SetIsUse");
static_assert(sizeof(ItemDarkChaoAnimInstance_SetIsUse) == 0x000001, "Wrong size on ItemDarkChaoAnimInstance_SetIsUse");
static_assert(offsetof(ItemDarkChaoAnimInstance_SetIsUse, flag) == 0x000000, "Member 'ItemDarkChaoAnimInstance_SetIsUse::flag' has a wrong offset!");

// Function UnionRun.ItemDarkChaoAnimInstance.SetThrowAnimController
// 0x0004 (0x0004 - 0x0000)
struct ItemDarkChaoAnimInstance_SetThrowAnimController final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDarkChaoAnimInstance_SetThrowAnimController) == 0x000004, "Wrong alignment on ItemDarkChaoAnimInstance_SetThrowAnimController");
static_assert(sizeof(ItemDarkChaoAnimInstance_SetThrowAnimController) == 0x000004, "Wrong size on ItemDarkChaoAnimInstance_SetThrowAnimController");
static_assert(offsetof(ItemDarkChaoAnimInstance_SetThrowAnimController, NewValue) == 0x000000, "Member 'ItemDarkChaoAnimInstance_SetThrowAnimController::NewValue' has a wrong offset!");

// Function UnionRun.TrexAnimInstance.GetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct TrexAnimInstance_GetIsAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrexAnimInstance_GetIsAttack) == 0x000001, "Wrong alignment on TrexAnimInstance_GetIsAttack");
static_assert(sizeof(TrexAnimInstance_GetIsAttack) == 0x000001, "Wrong size on TrexAnimInstance_GetIsAttack");
static_assert(offsetof(TrexAnimInstance_GetIsAttack, ReturnValue) == 0x000000, "Member 'TrexAnimInstance_GetIsAttack::ReturnValue' has a wrong offset!");

// Function UnionRun.TrexAnimInstance.GetIsDamage
// 0x0001 (0x0001 - 0x0000)
struct TrexAnimInstance_GetIsDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrexAnimInstance_GetIsDamage) == 0x000001, "Wrong alignment on TrexAnimInstance_GetIsDamage");
static_assert(sizeof(TrexAnimInstance_GetIsDamage) == 0x000001, "Wrong size on TrexAnimInstance_GetIsDamage");
static_assert(offsetof(TrexAnimInstance_GetIsDamage, ReturnValue) == 0x000000, "Member 'TrexAnimInstance_GetIsDamage::ReturnValue' has a wrong offset!");

// Function UnionRun.TrexAnimInstance.GetIsMove
// 0x0001 (0x0001 - 0x0000)
struct TrexAnimInstance_GetIsMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrexAnimInstance_GetIsMove) == 0x000001, "Wrong alignment on TrexAnimInstance_GetIsMove");
static_assert(sizeof(TrexAnimInstance_GetIsMove) == 0x000001, "Wrong size on TrexAnimInstance_GetIsMove");
static_assert(offsetof(TrexAnimInstance_GetIsMove, ReturnValue) == 0x000000, "Member 'TrexAnimInstance_GetIsMove::ReturnValue' has a wrong offset!");

// Function UnionRun.TrexAnimInstance.GetIsTurn
// 0x0001 (0x0001 - 0x0000)
struct TrexAnimInstance_GetIsTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrexAnimInstance_GetIsTurn) == 0x000001, "Wrong alignment on TrexAnimInstance_GetIsTurn");
static_assert(sizeof(TrexAnimInstance_GetIsTurn) == 0x000001, "Wrong size on TrexAnimInstance_GetIsTurn");
static_assert(offsetof(TrexAnimInstance_GetIsTurn, ReturnValue) == 0x000000, "Member 'TrexAnimInstance_GetIsTurn::ReturnValue' has a wrong offset!");

// Function UnionRun.TrexAnimInstance.GetIsTurnEnd
// 0x0001 (0x0001 - 0x0000)
struct TrexAnimInstance_GetIsTurnEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrexAnimInstance_GetIsTurnEnd) == 0x000001, "Wrong alignment on TrexAnimInstance_GetIsTurnEnd");
static_assert(sizeof(TrexAnimInstance_GetIsTurnEnd) == 0x000001, "Wrong size on TrexAnimInstance_GetIsTurnEnd");
static_assert(offsetof(TrexAnimInstance_GetIsTurnEnd, ReturnValue) == 0x000000, "Member 'TrexAnimInstance_GetIsTurnEnd::ReturnValue' has a wrong offset!");

// Function UnionRun.TrexAnimInstance.SetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct TrexAnimInstance_SetIsAttack final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrexAnimInstance_SetIsAttack) == 0x000001, "Wrong alignment on TrexAnimInstance_SetIsAttack");
static_assert(sizeof(TrexAnimInstance_SetIsAttack) == 0x000001, "Wrong size on TrexAnimInstance_SetIsAttack");
static_assert(offsetof(TrexAnimInstance_SetIsAttack, flag) == 0x000000, "Member 'TrexAnimInstance_SetIsAttack::flag' has a wrong offset!");

// Function UnionRun.TrexAnimInstance.SetIsDamage
// 0x0001 (0x0001 - 0x0000)
struct TrexAnimInstance_SetIsDamage final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrexAnimInstance_SetIsDamage) == 0x000001, "Wrong alignment on TrexAnimInstance_SetIsDamage");
static_assert(sizeof(TrexAnimInstance_SetIsDamage) == 0x000001, "Wrong size on TrexAnimInstance_SetIsDamage");
static_assert(offsetof(TrexAnimInstance_SetIsDamage, flag) == 0x000000, "Member 'TrexAnimInstance_SetIsDamage::flag' has a wrong offset!");

// Function UnionRun.TrexAnimInstance.SetIsMove
// 0x0001 (0x0001 - 0x0000)
struct TrexAnimInstance_SetIsMove final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrexAnimInstance_SetIsMove) == 0x000001, "Wrong alignment on TrexAnimInstance_SetIsMove");
static_assert(sizeof(TrexAnimInstance_SetIsMove) == 0x000001, "Wrong size on TrexAnimInstance_SetIsMove");
static_assert(offsetof(TrexAnimInstance_SetIsMove, flag) == 0x000000, "Member 'TrexAnimInstance_SetIsMove::flag' has a wrong offset!");

// Function UnionRun.TrexAnimInstance.SetIsTurn
// 0x0001 (0x0001 - 0x0000)
struct TrexAnimInstance_SetIsTurn final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrexAnimInstance_SetIsTurn) == 0x000001, "Wrong alignment on TrexAnimInstance_SetIsTurn");
static_assert(sizeof(TrexAnimInstance_SetIsTurn) == 0x000001, "Wrong size on TrexAnimInstance_SetIsTurn");
static_assert(offsetof(TrexAnimInstance_SetIsTurn, flag) == 0x000000, "Member 'TrexAnimInstance_SetIsTurn::flag' has a wrong offset!");

// Function UnionRun.TrexAnimInstance.SetIsTurnEnd
// 0x0001 (0x0001 - 0x0000)
struct TrexAnimInstance_SetIsTurnEnd final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrexAnimInstance_SetIsTurnEnd) == 0x000001, "Wrong alignment on TrexAnimInstance_SetIsTurnEnd");
static_assert(sizeof(TrexAnimInstance_SetIsTurnEnd) == 0x000001, "Wrong size on TrexAnimInstance_SetIsTurnEnd");
static_assert(offsetof(TrexAnimInstance_SetIsTurnEnd, flag) == 0x000000, "Member 'TrexAnimInstance_SetIsTurnEnd::flag' has a wrong offset!");

// Function UnionRun.ItemExtnd09Projectile.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct ItemExtnd09Projectile_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        Info;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemExtnd09Projectile_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on ItemExtnd09Projectile_OnTriggerColliderConflict");
static_assert(sizeof(ItemExtnd09Projectile_OnTriggerColliderConflict) == 0x000060, "Wrong size on ItemExtnd09Projectile_OnTriggerColliderConflict");
static_assert(offsetof(ItemExtnd09Projectile_OnTriggerColliderConflict, Info) == 0x000000, "Member 'ItemExtnd09Projectile_OnTriggerColliderConflict::Info' has a wrong offset!");

// Function UnionRun.TireMark.AddPoint3D
// 0x0060 (0x0060 - 0x0000)
struct TireMark_AddPoint3D final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Side;                                              // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x004C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OffsetUV;                                          // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TireMark_AddPoint3D) == 0x000008, "Wrong alignment on TireMark_AddPoint3D");
static_assert(sizeof(TireMark_AddPoint3D) == 0x000060, "Wrong size on TireMark_AddPoint3D");
static_assert(offsetof(TireMark_AddPoint3D, Position) == 0x000000, "Member 'TireMark_AddPoint3D::Position' has a wrong offset!");
static_assert(offsetof(TireMark_AddPoint3D, Normal) == 0x000018, "Member 'TireMark_AddPoint3D::Normal' has a wrong offset!");
static_assert(offsetof(TireMark_AddPoint3D, Side) == 0x000030, "Member 'TireMark_AddPoint3D::Side' has a wrong offset!");
static_assert(offsetof(TireMark_AddPoint3D, Density) == 0x000048, "Member 'TireMark_AddPoint3D::Density' has a wrong offset!");
static_assert(offsetof(TireMark_AddPoint3D, Color) == 0x00004C, "Member 'TireMark_AddPoint3D::Color' has a wrong offset!");
static_assert(offsetof(TireMark_AddPoint3D, OffsetUV) == 0x000050, "Member 'TireMark_AddPoint3D::OffsetUV' has a wrong offset!");

// Function UnionRun.TireMark.GetTireMarkMaterial
// 0x0008 (0x0008 - 0x0000)
struct TireMark_GetTireMarkMaterial final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TireMark_GetTireMarkMaterial) == 0x000008, "Wrong alignment on TireMark_GetTireMarkMaterial");
static_assert(sizeof(TireMark_GetTireMarkMaterial) == 0x000008, "Wrong size on TireMark_GetTireMarkMaterial");
static_assert(offsetof(TireMark_GetTireMarkMaterial, ReturnValue) == 0x000000, "Member 'TireMark_GetTireMarkMaterial::ReturnValue' has a wrong offset!");

// Function UnionRun.TireMark.SetTireMarkMaterial
// 0x0008 (0x0008 - 0x0000)
struct TireMark_SetTireMarkMaterial final
{
public:
	class UMaterialInterface*                     MaterialInterface;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TireMark_SetTireMarkMaterial) == 0x000008, "Wrong alignment on TireMark_SetTireMarkMaterial");
static_assert(sizeof(TireMark_SetTireMarkMaterial) == 0x000008, "Wrong size on TireMark_SetTireMarkMaterial");
static_assert(offsetof(TireMark_SetTireMarkMaterial, MaterialInterface) == 0x000000, "Member 'TireMark_SetTireMarkMaterial::MaterialInterface' has a wrong offset!");

// Function UnionRun.ItemHomingPunchObject.EventHitRacer
// 0x0004 (0x0004 - 0x0000)
struct ItemHomingPunchObject_EventHitRacer final
{
public:
	int32                                         HitRacerIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemHomingPunchObject_EventHitRacer) == 0x000004, "Wrong alignment on ItemHomingPunchObject_EventHitRacer");
static_assert(sizeof(ItemHomingPunchObject_EventHitRacer) == 0x000004, "Wrong size on ItemHomingPunchObject_EventHitRacer");
static_assert(offsetof(ItemHomingPunchObject_EventHitRacer, HitRacerIndex) == 0x000000, "Member 'ItemHomingPunchObject_EventHitRacer::HitRacerIndex' has a wrong offset!");

// Function UnionRun.ItemHomingPunchObject.OnPlayDamegeSound
// 0x0001 (0x0001 - 0x0000)
struct ItemHomingPunchObject_OnPlayDamegeSound final
{
public:
	ESoundPan                                     SoundPan;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemHomingPunchObject_OnPlayDamegeSound) == 0x000001, "Wrong alignment on ItemHomingPunchObject_OnPlayDamegeSound");
static_assert(sizeof(ItemHomingPunchObject_OnPlayDamegeSound) == 0x000001, "Wrong size on ItemHomingPunchObject_OnPlayDamegeSound");
static_assert(offsetof(ItemHomingPunchObject_OnPlayDamegeSound, SoundPan) == 0x000000, "Member 'ItemHomingPunchObject_OnPlayDamegeSound::SoundPan' has a wrong offset!");

// Function UnionRun.ItemHomingPunchObject.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct ItemHomingPunchObject_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemHomingPunchObject_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on ItemHomingPunchObject_OnTriggerColliderConflict");
static_assert(sizeof(ItemHomingPunchObject_OnTriggerColliderConflict) == 0x000060, "Wrong size on ItemHomingPunchObject_OnTriggerColliderConflict");
static_assert(offsetof(ItemHomingPunchObject_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'ItemHomingPunchObject_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.ItemMagnetObject.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct ItemMagnetObject_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMagnetObject_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on ItemMagnetObject_OnTriggerColliderConflict");
static_assert(sizeof(ItemMagnetObject_OnTriggerColliderConflict) == 0x000060, "Wrong size on ItemMagnetObject_OnTriggerColliderConflict");
static_assert(offsetof(ItemMagnetObject_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'ItemMagnetObject_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.CalIsInWithinPlaneArea
// 0x0020 (0x0020 - 0x0000)
struct ItemMessageInterface_CalIsInWithinPlaneArea final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemMessageInterface_CalIsInWithinPlaneArea) == 0x000008, "Wrong alignment on ItemMessageInterface_CalIsInWithinPlaneArea");
static_assert(sizeof(ItemMessageInterface_CalIsInWithinPlaneArea) == 0x000020, "Wrong size on ItemMessageInterface_CalIsInWithinPlaneArea");
static_assert(offsetof(ItemMessageInterface_CalIsInWithinPlaneArea, Position) == 0x000000, "Member 'ItemMessageInterface_CalIsInWithinPlaneArea::Position' has a wrong offset!");
static_assert(offsetof(ItemMessageInterface_CalIsInWithinPlaneArea, ReturnValue) == 0x000018, "Member 'ItemMessageInterface_CalIsInWithinPlaneArea::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.ConfirmAbsorbOject
// 0x0160 (0x0160 - 0x0000)
struct ItemMessageInterface_ConfirmAbsorbOject final
{
public:
	struct FAbsorbedObjectInfo                    Info;                                              // 0x0000(0x0150)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0150(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0xF];                                      // 0x0151(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemMessageInterface_ConfirmAbsorbOject) == 0x000010, "Wrong alignment on ItemMessageInterface_ConfirmAbsorbOject");
static_assert(sizeof(ItemMessageInterface_ConfirmAbsorbOject) == 0x000160, "Wrong size on ItemMessageInterface_ConfirmAbsorbOject");
static_assert(offsetof(ItemMessageInterface_ConfirmAbsorbOject, Info) == 0x000000, "Member 'ItemMessageInterface_ConfirmAbsorbOject::Info' has a wrong offset!");
static_assert(offsetof(ItemMessageInterface_ConfirmAbsorbOject, ReturnValue) == 0x000150, "Member 'ItemMessageInterface_ConfirmAbsorbOject::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.GetItemActiveTime
// 0x0004 (0x0004 - 0x0000)
struct ItemMessageInterface_GetItemActiveTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMessageInterface_GetItemActiveTime) == 0x000004, "Wrong alignment on ItemMessageInterface_GetItemActiveTime");
static_assert(sizeof(ItemMessageInterface_GetItemActiveTime) == 0x000004, "Wrong size on ItemMessageInterface_GetItemActiveTime");
static_assert(offsetof(ItemMessageInterface_GetItemActiveTime, ReturnValue) == 0x000000, "Member 'ItemMessageInterface_GetItemActiveTime::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.GetItemDomainNumber
// 0x0001 (0x0001 - 0x0000)
struct ItemMessageInterface_GetItemDomainNumber final
{
public:
	EDomainNumber                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMessageInterface_GetItemDomainNumber) == 0x000001, "Wrong alignment on ItemMessageInterface_GetItemDomainNumber");
static_assert(sizeof(ItemMessageInterface_GetItemDomainNumber) == 0x000001, "Wrong size on ItemMessageInterface_GetItemDomainNumber");
static_assert(offsetof(ItemMessageInterface_GetItemDomainNumber, ReturnValue) == 0x000000, "Member 'ItemMessageInterface_GetItemDomainNumber::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.GetItemHolderRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct ItemMessageInterface_GetItemHolderRacerIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMessageInterface_GetItemHolderRacerIndex) == 0x000004, "Wrong alignment on ItemMessageInterface_GetItemHolderRacerIndex");
static_assert(sizeof(ItemMessageInterface_GetItemHolderRacerIndex) == 0x000004, "Wrong size on ItemMessageInterface_GetItemHolderRacerIndex");
static_assert(offsetof(ItemMessageInterface_GetItemHolderRacerIndex, ReturnValue) == 0x000000, "Member 'ItemMessageInterface_GetItemHolderRacerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.GetItemPathTransform
// 0x0060 (0x0060 - 0x0000)
struct ItemMessageInterface_GetItemPathTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMessageInterface_GetItemPathTransform) == 0x000010, "Wrong alignment on ItemMessageInterface_GetItemPathTransform");
static_assert(sizeof(ItemMessageInterface_GetItemPathTransform) == 0x000060, "Wrong size on ItemMessageInterface_GetItemPathTransform");
static_assert(offsetof(ItemMessageInterface_GetItemPathTransform, ReturnValue) == 0x000000, "Member 'ItemMessageInterface_GetItemPathTransform::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.GetItemThrowDirection
// 0x0001 (0x0001 - 0x0000)
struct ItemMessageInterface_GetItemThrowDirection final
{
public:
	EItemThrowDirection                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMessageInterface_GetItemThrowDirection) == 0x000001, "Wrong alignment on ItemMessageInterface_GetItemThrowDirection");
static_assert(sizeof(ItemMessageInterface_GetItemThrowDirection) == 0x000001, "Wrong size on ItemMessageInterface_GetItemThrowDirection");
static_assert(offsetof(ItemMessageInterface_GetItemThrowDirection, ReturnValue) == 0x000000, "Member 'ItemMessageInterface_GetItemThrowDirection::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.GetItemType
// 0x0001 (0x0001 - 0x0000)
struct ItemMessageInterface_GetItemType final
{
public:
	EItemId                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMessageInterface_GetItemType) == 0x000001, "Wrong alignment on ItemMessageInterface_GetItemType");
static_assert(sizeof(ItemMessageInterface_GetItemType) == 0x000001, "Wrong size on ItemMessageInterface_GetItemType");
static_assert(offsetof(ItemMessageInterface_GetItemType, ReturnValue) == 0x000000, "Member 'ItemMessageInterface_GetItemType::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.GetItemUniqueID
// 0x0004 (0x0004 - 0x0000)
struct ItemMessageInterface_GetItemUniqueID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMessageInterface_GetItemUniqueID) == 0x000004, "Wrong alignment on ItemMessageInterface_GetItemUniqueID");
static_assert(sizeof(ItemMessageInterface_GetItemUniqueID) == 0x000004, "Wrong size on ItemMessageInterface_GetItemUniqueID");
static_assert(offsetof(ItemMessageInterface_GetItemUniqueID, ReturnValue) == 0x000000, "Member 'ItemMessageInterface_GetItemUniqueID::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.GetTrapItemOnGroundTime
// 0x0004 (0x0004 - 0x0000)
struct ItemMessageInterface_GetTrapItemOnGroundTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMessageInterface_GetTrapItemOnGroundTime) == 0x000004, "Wrong alignment on ItemMessageInterface_GetTrapItemOnGroundTime");
static_assert(sizeof(ItemMessageInterface_GetTrapItemOnGroundTime) == 0x000004, "Wrong size on ItemMessageInterface_GetTrapItemOnGroundTime");
static_assert(offsetof(ItemMessageInterface_GetTrapItemOnGroundTime, ReturnValue) == 0x000000, "Member 'ItemMessageInterface_GetTrapItemOnGroundTime::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.IsItemPathRouteForm
// 0x0008 (0x0008 - 0x0000)
struct ItemMessageInterface_IsItemPathRouteForm final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemMessageInterface_IsItemPathRouteForm) == 0x000004, "Wrong alignment on ItemMessageInterface_IsItemPathRouteForm");
static_assert(sizeof(ItemMessageInterface_IsItemPathRouteForm) == 0x000008, "Wrong size on ItemMessageInterface_IsItemPathRouteForm");
static_assert(offsetof(ItemMessageInterface_IsItemPathRouteForm, Type) == 0x000000, "Member 'ItemMessageInterface_IsItemPathRouteForm::Type' has a wrong offset!");
static_assert(offsetof(ItemMessageInterface_IsItemPathRouteForm, ReturnValue) == 0x000004, "Member 'ItemMessageInterface_IsItemPathRouteForm::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.IsItemPathType
// 0x0008 (0x0008 - 0x0000)
struct ItemMessageInterface_IsItemPathType final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemMessageInterface_IsItemPathType) == 0x000004, "Wrong alignment on ItemMessageInterface_IsItemPathType");
static_assert(sizeof(ItemMessageInterface_IsItemPathType) == 0x000008, "Wrong size on ItemMessageInterface_IsItemPathType");
static_assert(offsetof(ItemMessageInterface_IsItemPathType, Type) == 0x000000, "Member 'ItemMessageInterface_IsItemPathType::Type' has a wrong offset!");
static_assert(offsetof(ItemMessageInterface_IsItemPathType, ReturnValue) == 0x000004, "Member 'ItemMessageInterface_IsItemPathType::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.IsWarpTarget
// 0x0008 (0x0008 - 0x0000)
struct ItemMessageInterface_IsWarpTarget final
{
public:
	int32                                         WarpRingAttacRacerIndex;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemMessageInterface_IsWarpTarget) == 0x000004, "Wrong alignment on ItemMessageInterface_IsWarpTarget");
static_assert(sizeof(ItemMessageInterface_IsWarpTarget) == 0x000008, "Wrong size on ItemMessageInterface_IsWarpTarget");
static_assert(offsetof(ItemMessageInterface_IsWarpTarget, WarpRingAttacRacerIndex) == 0x000000, "Member 'ItemMessageInterface_IsWarpTarget::WarpRingAttacRacerIndex' has a wrong offset!");
static_assert(offsetof(ItemMessageInterface_IsWarpTarget, ReturnValue) == 0x000004, "Member 'ItemMessageInterface_IsWarpTarget::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.NotifyAbsorbOject
// 0x0018 (0x0018 - 0x0000)
struct ItemMessageInterface_NotifyAbsorbOject final
{
public:
	struct FAbsorberInfo                          Info;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMessageInterface_NotifyAbsorbOject) == 0x000008, "Wrong alignment on ItemMessageInterface_NotifyAbsorbOject");
static_assert(sizeof(ItemMessageInterface_NotifyAbsorbOject) == 0x000018, "Wrong size on ItemMessageInterface_NotifyAbsorbOject");
static_assert(offsetof(ItemMessageInterface_NotifyAbsorbOject, Info) == 0x000000, "Member 'ItemMessageInterface_NotifyAbsorbOject::Info' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.NotifyCyanLaserMoveInfo
// 0x0170 (0x0170 - 0x0000)
struct ItemMessageInterface_NotifyCyanLaserMoveInfo final
{
public:
	struct FCyanLaserMoveInfo                     Info;                                              // 0x0000(0x0170)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMessageInterface_NotifyCyanLaserMoveInfo) == 0x000010, "Wrong alignment on ItemMessageInterface_NotifyCyanLaserMoveInfo");
static_assert(sizeof(ItemMessageInterface_NotifyCyanLaserMoveInfo) == 0x000170, "Wrong size on ItemMessageInterface_NotifyCyanLaserMoveInfo");
static_assert(offsetof(ItemMessageInterface_NotifyCyanLaserMoveInfo, Info) == 0x000000, "Member 'ItemMessageInterface_NotifyCyanLaserMoveInfo::Info' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.NotifyWarpRingMoveInfo
// 0x00F0 (0x00F0 - 0x0000)
struct ItemMessageInterface_NotifyWarpRingMoveInfo final
{
public:
	struct FWarpRingMoveInfo                      Info;                                              // 0x0000(0x00F0)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMessageInterface_NotifyWarpRingMoveInfo) == 0x000010, "Wrong alignment on ItemMessageInterface_NotifyWarpRingMoveInfo");
static_assert(sizeof(ItemMessageInterface_NotifyWarpRingMoveInfo) == 0x0000F0, "Wrong size on ItemMessageInterface_NotifyWarpRingMoveInfo");
static_assert(offsetof(ItemMessageInterface_NotifyWarpRingMoveInfo, Info) == 0x000000, "Member 'ItemMessageInterface_NotifyWarpRingMoveInfo::Info' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.NotifyWarpTargetBegin
// 0x0008 (0x0008 - 0x0000)
struct ItemMessageInterface_NotifyWarpTargetBegin final
{
public:
	int32                                         WarpRingAttacRacerIndex;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemMessageInterface_NotifyWarpTargetBegin) == 0x000004, "Wrong alignment on ItemMessageInterface_NotifyWarpTargetBegin");
static_assert(sizeof(ItemMessageInterface_NotifyWarpTargetBegin) == 0x000008, "Wrong size on ItemMessageInterface_NotifyWarpTargetBegin");
static_assert(offsetof(ItemMessageInterface_NotifyWarpTargetBegin, WarpRingAttacRacerIndex) == 0x000000, "Member 'ItemMessageInterface_NotifyWarpTargetBegin::WarpRingAttacRacerIndex' has a wrong offset!");
static_assert(offsetof(ItemMessageInterface_NotifyWarpTargetBegin, ReturnValue) == 0x000004, "Member 'ItemMessageInterface_NotifyWarpTargetBegin::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemMessageInterface.NotifyWarpTargetEnd
// 0x0004 (0x0004 - 0x0000)
struct ItemMessageInterface_NotifyWarpTargetEnd final
{
public:
	int32                                         WarpRingAttacRacerIndex;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemMessageInterface_NotifyWarpTargetEnd) == 0x000004, "Wrong alignment on ItemMessageInterface_NotifyWarpTargetEnd");
static_assert(sizeof(ItemMessageInterface_NotifyWarpTargetEnd) == 0x000004, "Wrong size on ItemMessageInterface_NotifyWarpTargetEnd");
static_assert(offsetof(ItemMessageInterface_NotifyWarpTargetEnd, WarpRingAttacRacerIndex) == 0x000000, "Member 'ItemMessageInterface_NotifyWarpTargetEnd::WarpRingAttacRacerIndex' has a wrong offset!");

// Function UnionRun.ItemOmochaoObject.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct ItemOmochaoObject_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemOmochaoObject_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on ItemOmochaoObject_OnTriggerColliderConflict");
static_assert(sizeof(ItemOmochaoObject_OnTriggerColliderConflict) == 0x000060, "Wrong size on ItemOmochaoObject_OnTriggerColliderConflict");
static_assert(offsetof(ItemOmochaoObject_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'ItemOmochaoObject_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.ItemPerformanceInterface.GetAttachedRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct ItemPerformanceInterface_GetAttachedRacerIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemPerformanceInterface_GetAttachedRacerIndex) == 0x000004, "Wrong alignment on ItemPerformanceInterface_GetAttachedRacerIndex");
static_assert(sizeof(ItemPerformanceInterface_GetAttachedRacerIndex) == 0x000004, "Wrong size on ItemPerformanceInterface_GetAttachedRacerIndex");
static_assert(offsetof(ItemPerformanceInterface_GetAttachedRacerIndex, ReturnValue) == 0x000000, "Member 'ItemPerformanceInterface_GetAttachedRacerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemPerformanceInterface.GetPerformanceObjectType
// 0x0001 (0x0001 - 0x0000)
struct ItemPerformanceInterface_GetPerformanceObjectType final
{
public:
	EPerformanceObjectType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemPerformanceInterface_GetPerformanceObjectType) == 0x000001, "Wrong alignment on ItemPerformanceInterface_GetPerformanceObjectType");
static_assert(sizeof(ItemPerformanceInterface_GetPerformanceObjectType) == 0x000001, "Wrong size on ItemPerformanceInterface_GetPerformanceObjectType");
static_assert(offsetof(ItemPerformanceInterface_GetPerformanceObjectType, ReturnValue) == 0x000000, "Member 'ItemPerformanceInterface_GetPerformanceObjectType::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemPerformanceInterface.GetStatusInfoID
// 0x0008 (0x0008 - 0x0000)
struct ItemPerformanceInterface_GetStatusInfoID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemPerformanceInterface_GetStatusInfoID) == 0x000004, "Wrong alignment on ItemPerformanceInterface_GetStatusInfoID");
static_assert(sizeof(ItemPerformanceInterface_GetStatusInfoID) == 0x000008, "Wrong size on ItemPerformanceInterface_GetStatusInfoID");
static_assert(offsetof(ItemPerformanceInterface_GetStatusInfoID, ReturnValue) == 0x000000, "Member 'ItemPerformanceInterface_GetStatusInfoID::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemPerformanceInterface.IsPerformanceObjectInAlart
// 0x0001 (0x0001 - 0x0000)
struct ItemPerformanceInterface_IsPerformanceObjectInAlart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemPerformanceInterface_IsPerformanceObjectInAlart) == 0x000001, "Wrong alignment on ItemPerformanceInterface_IsPerformanceObjectInAlart");
static_assert(sizeof(ItemPerformanceInterface_IsPerformanceObjectInAlart) == 0x000001, "Wrong size on ItemPerformanceInterface_IsPerformanceObjectInAlart");
static_assert(offsetof(ItemPerformanceInterface_IsPerformanceObjectInAlart, ReturnValue) == 0x000000, "Member 'ItemPerformanceInterface_IsPerformanceObjectInAlart::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemSlicerObject.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct ItemSlicerObject_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSlicerObject_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on ItemSlicerObject_OnTriggerColliderConflict");
static_assert(sizeof(ItemSlicerObject_OnTriggerColliderConflict) == 0x000060, "Wrong size on ItemSlicerObject_OnTriggerColliderConflict");
static_assert(offsetof(ItemSlicerObject_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'ItemSlicerObject_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.ItemThornBallObject.GetHitSpeedRatio
// 0x0004 (0x0004 - 0x0000)
struct ItemThornBallObject_GetHitSpeedRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemThornBallObject_GetHitSpeedRatio) == 0x000004, "Wrong alignment on ItemThornBallObject_GetHitSpeedRatio");
static_assert(sizeof(ItemThornBallObject_GetHitSpeedRatio) == 0x000004, "Wrong size on ItemThornBallObject_GetHitSpeedRatio");
static_assert(offsetof(ItemThornBallObject_GetHitSpeedRatio, ReturnValue) == 0x000000, "Member 'ItemThornBallObject_GetHitSpeedRatio::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemThornBallObject.OnPlayBreakEffect
// 0x0004 (0x0004 - 0x0000)
struct ItemThornBallObject_OnPlayBreakEffect final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemThornBallObject_OnPlayBreakEffect) == 0x000004, "Wrong alignment on ItemThornBallObject_OnPlayBreakEffect");
static_assert(sizeof(ItemThornBallObject_OnPlayBreakEffect) == 0x000004, "Wrong size on ItemThornBallObject_OnPlayBreakEffect");
static_assert(offsetof(ItemThornBallObject_OnPlayBreakEffect, Scale) == 0x000000, "Member 'ItemThornBallObject_OnPlayBreakEffect::Scale' has a wrong offset!");

// Function UnionRun.ItemThornBallObject.OnPlayDamegeSound
// 0x0001 (0x0001 - 0x0000)
struct ItemThornBallObject_OnPlayDamegeSound final
{
public:
	ESoundPan                                     SoundPan;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemThornBallObject_OnPlayDamegeSound) == 0x000001, "Wrong alignment on ItemThornBallObject_OnPlayDamegeSound");
static_assert(sizeof(ItemThornBallObject_OnPlayDamegeSound) == 0x000001, "Wrong size on ItemThornBallObject_OnPlayDamegeSound");
static_assert(offsetof(ItemThornBallObject_OnPlayDamegeSound, SoundPan) == 0x000000, "Member 'ItemThornBallObject_OnPlayDamegeSound::SoundPan' has a wrong offset!");

// Function UnionRun.ItemThornBallObject.OnPlayLandingSound
// 0x0001 (0x0001 - 0x0000)
struct ItemThornBallObject_OnPlayLandingSound final
{
public:
	bool                                          waterFlag;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemThornBallObject_OnPlayLandingSound) == 0x000001, "Wrong alignment on ItemThornBallObject_OnPlayLandingSound");
static_assert(sizeof(ItemThornBallObject_OnPlayLandingSound) == 0x000001, "Wrong size on ItemThornBallObject_OnPlayLandingSound");
static_assert(offsetof(ItemThornBallObject_OnPlayLandingSound, waterFlag) == 0x000000, "Member 'ItemThornBallObject_OnPlayLandingSound::waterFlag' has a wrong offset!");

// Function UnionRun.ItemThornBallObject.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct ItemThornBallObject_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemThornBallObject_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on ItemThornBallObject_OnTriggerColliderConflict");
static_assert(sizeof(ItemThornBallObject_OnTriggerColliderConflict) == 0x000060, "Wrong size on ItemThornBallObject_OnTriggerColliderConflict");
static_assert(offsetof(ItemThornBallObject_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'ItemThornBallObject_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.UnionGroupInfoInterface.NoticeCompletedChargeGroupEvent
// 0x0008 (0x0008 - 0x0000)
struct UnionGroupInfoInterface_NoticeCompletedChargeGroupEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamBoostType                                TeamBoostType;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionGroupInfoInterface_NoticeCompletedChargeGroupEvent) == 0x000004, "Wrong alignment on UnionGroupInfoInterface_NoticeCompletedChargeGroupEvent");
static_assert(sizeof(UnionGroupInfoInterface_NoticeCompletedChargeGroupEvent) == 0x000008, "Wrong size on UnionGroupInfoInterface_NoticeCompletedChargeGroupEvent");
static_assert(offsetof(UnionGroupInfoInterface_NoticeCompletedChargeGroupEvent, RacerIndex) == 0x000000, "Member 'UnionGroupInfoInterface_NoticeCompletedChargeGroupEvent::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionGroupInfoInterface_NoticeCompletedChargeGroupEvent, TeamBoostType) == 0x000004, "Member 'UnionGroupInfoInterface_NoticeCompletedChargeGroupEvent::TeamBoostType' has a wrong offset!");

// Function UnionRun.ItemVioletVoidObject.IsMeshAnimEating
// 0x0001 (0x0001 - 0x0000)
struct ItemVioletVoidObject_IsMeshAnimEating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVioletVoidObject_IsMeshAnimEating) == 0x000001, "Wrong alignment on ItemVioletVoidObject_IsMeshAnimEating");
static_assert(sizeof(ItemVioletVoidObject_IsMeshAnimEating) == 0x000001, "Wrong size on ItemVioletVoidObject_IsMeshAnimEating");
static_assert(offsetof(ItemVioletVoidObject_IsMeshAnimEating, ReturnValue) == 0x000000, "Member 'ItemVioletVoidObject_IsMeshAnimEating::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemVioletVoidObject.IsMeshAnimInSleep
// 0x0001 (0x0001 - 0x0000)
struct ItemVioletVoidObject_IsMeshAnimInSleep final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVioletVoidObject_IsMeshAnimInSleep) == 0x000001, "Wrong alignment on ItemVioletVoidObject_IsMeshAnimInSleep");
static_assert(sizeof(ItemVioletVoidObject_IsMeshAnimInSleep) == 0x000001, "Wrong size on ItemVioletVoidObject_IsMeshAnimInSleep");
static_assert(offsetof(ItemVioletVoidObject_IsMeshAnimInSleep, ReturnValue) == 0x000000, "Member 'ItemVioletVoidObject_IsMeshAnimInSleep::ReturnValue' has a wrong offset!");

// Function UnionRun.ItemVioletVoidObject.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct ItemVioletVoidObject_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVioletVoidObject_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on ItemVioletVoidObject_OnTriggerColliderConflict");
static_assert(sizeof(ItemVioletVoidObject_OnTriggerColliderConflict) == 0x000060, "Wrong size on ItemVioletVoidObject_OnTriggerColliderConflict");
static_assert(offsetof(ItemVioletVoidObject_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'ItemVioletVoidObject_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.ItemVioletVoidObject.PlaySE
// 0x0008 (0x0008 - 0x0000)
struct ItemVioletVoidObject_PlaySE final
{
public:
	class FName                                   SEName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVioletVoidObject_PlaySE) == 0x000004, "Wrong alignment on ItemVioletVoidObject_PlaySE");
static_assert(sizeof(ItemVioletVoidObject_PlaySE) == 0x000008, "Wrong size on ItemVioletVoidObject_PlaySE");
static_assert(offsetof(ItemVioletVoidObject_PlaySE, SEName) == 0x000000, "Member 'ItemVioletVoidObject_PlaySE::SEName' has a wrong offset!");

// Function UnionRun.ItemVioletVoidObject.RequestMeshAnimAppearance
// 0x0001 (0x0001 - 0x0000)
struct ItemVioletVoidObject_RequestMeshAnimAppearance final
{
public:
	bool                                          bAppearance;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVioletVoidObject_RequestMeshAnimAppearance) == 0x000001, "Wrong alignment on ItemVioletVoidObject_RequestMeshAnimAppearance");
static_assert(sizeof(ItemVioletVoidObject_RequestMeshAnimAppearance) == 0x000001, "Wrong size on ItemVioletVoidObject_RequestMeshAnimAppearance");
static_assert(offsetof(ItemVioletVoidObject_RequestMeshAnimAppearance, bAppearance) == 0x000000, "Member 'ItemVioletVoidObject_RequestMeshAnimAppearance::bAppearance' has a wrong offset!");

// Function UnionRun.ItemWarpRingObject.OnHitTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct ItemWarpRingObject_OnHitTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWarpRingObject_OnHitTriggerColliderConflict) == 0x000008, "Wrong alignment on ItemWarpRingObject_OnHitTriggerColliderConflict");
static_assert(sizeof(ItemWarpRingObject_OnHitTriggerColliderConflict) == 0x000060, "Wrong size on ItemWarpRingObject_OnHitTriggerColliderConflict");
static_assert(offsetof(ItemWarpRingObject_OnHitTriggerColliderConflict, HitInfo) == 0x000000, "Member 'ItemWarpRingObject_OnHitTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.KingBoomBooProjectile.OnTriggerColliderConflict
// 0x0060 (0x0060 - 0x0000)
struct KingBoomBooProjectile_OnTriggerColliderConflict final
{
public:
	struct FHitTriggerInfo                        HitInfo;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(KingBoomBooProjectile_OnTriggerColliderConflict) == 0x000008, "Wrong alignment on KingBoomBooProjectile_OnTriggerColliderConflict");
static_assert(sizeof(KingBoomBooProjectile_OnTriggerColliderConflict) == 0x000060, "Wrong size on KingBoomBooProjectile_OnTriggerColliderConflict");
static_assert(offsetof(KingBoomBooProjectile_OnTriggerColliderConflict, HitInfo) == 0x000000, "Member 'KingBoomBooProjectile_OnTriggerColliderConflict::HitInfo' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeChangeThrowDirectionEvent
// 0x0008 (0x0008 - 0x0000)
struct UnionItemInfoInterface_NoticeChangeThrowDirectionEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ItemId;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemThrowDirection                           ThrowType;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionItemInfoInterface_NoticeChangeThrowDirectionEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeChangeThrowDirectionEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeChangeThrowDirectionEvent) == 0x000008, "Wrong size on UnionItemInfoInterface_NoticeChangeThrowDirectionEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeChangeThrowDirectionEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeChangeThrowDirectionEvent::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeChangeThrowDirectionEvent, ItemId) == 0x000004, "Member 'UnionItemInfoInterface_NoticeChangeThrowDirectionEvent::ItemId' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeChangeThrowDirectionEvent, ThrowType) == 0x000005, "Member 'UnionItemInfoInterface_NoticeChangeThrowDirectionEvent::ThrowType' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeClearItemEvent
// 0x0004 (0x0004 - 0x0000)
struct UnionItemInfoInterface_NoticeClearItemEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionItemInfoInterface_NoticeClearItemEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeClearItemEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeClearItemEvent) == 0x000004, "Wrong size on UnionItemInfoInterface_NoticeClearItemEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeClearItemEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeClearItemEvent::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeDecreaseUsableTimesEvent
// 0x0004 (0x0004 - 0x0000)
struct UnionItemInfoInterface_NoticeDecreaseUsableTimesEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionItemInfoInterface_NoticeDecreaseUsableTimesEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeDecreaseUsableTimesEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeDecreaseUsableTimesEvent) == 0x000004, "Wrong size on UnionItemInfoInterface_NoticeDecreaseUsableTimesEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeDecreaseUsableTimesEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeDecreaseUsableTimesEvent::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeEndIrregularCharging
// 0x0008 (0x0008 - 0x0000)
struct UnionItemInfoInterface_NoticeEndIrregularCharging final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ItemId;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionItemInfoInterface_NoticeEndIrregularCharging) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeEndIrregularCharging");
static_assert(sizeof(UnionItemInfoInterface_NoticeEndIrregularCharging) == 0x000008, "Wrong size on UnionItemInfoInterface_NoticeEndIrregularCharging");
static_assert(offsetof(UnionItemInfoInterface_NoticeEndIrregularCharging, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeEndIrregularCharging::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeEndIrregularCharging, ItemId) == 0x000004, "Member 'UnionItemInfoInterface_NoticeEndIrregularCharging::ItemId' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeEndItemEvent
// 0x0004 (0x0004 - 0x0000)
struct UnionItemInfoInterface_NoticeEndItemEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionItemInfoInterface_NoticeEndItemEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeEndItemEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeEndItemEvent) == 0x000004, "Wrong size on UnionItemInfoInterface_NoticeEndItemEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeEndItemEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeEndItemEvent::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeEndLostItemEvent
// 0x0008 (0x0008 - 0x0000)
struct UnionItemInfoInterface_NoticeEndLostItemEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ItemId;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionItemInfoInterface_NoticeEndLostItemEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeEndLostItemEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeEndLostItemEvent) == 0x000008, "Wrong size on UnionItemInfoInterface_NoticeEndLostItemEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeEndLostItemEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeEndLostItemEvent::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeEndLostItemEvent, ItemId) == 0x000004, "Member 'UnionItemInfoInterface_NoticeEndLostItemEvent::ItemId' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeEndLostItemEvent, ItemInfoType) == 0x000005, "Member 'UnionItemInfoInterface_NoticeEndLostItemEvent::ItemInfoType' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeExchangeIrregularHoldItem
// 0x0004 (0x0004 - 0x0000)
struct UnionItemInfoInterface_NoticeExchangeIrregularHoldItem final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionItemInfoInterface_NoticeExchangeIrregularHoldItem) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeExchangeIrregularHoldItem");
static_assert(sizeof(UnionItemInfoInterface_NoticeExchangeIrregularHoldItem) == 0x000004, "Wrong size on UnionItemInfoInterface_NoticeExchangeIrregularHoldItem");
static_assert(offsetof(UnionItemInfoInterface_NoticeExchangeIrregularHoldItem, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeExchangeIrregularHoldItem::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeHoldItemEvent
// 0x0008 (0x0008 - 0x0000)
struct UnionItemInfoInterface_NoticeHoldItemEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ItemId;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemThrowDirection                           DefaultThrowDirection;                             // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGadgetLuckyItem;                                  // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionItemInfoInterface_NoticeHoldItemEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeHoldItemEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeHoldItemEvent) == 0x000008, "Wrong size on UnionItemInfoInterface_NoticeHoldItemEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeHoldItemEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeHoldItemEvent::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeHoldItemEvent, ItemId) == 0x000004, "Member 'UnionItemInfoInterface_NoticeHoldItemEvent::ItemId' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeHoldItemEvent, DefaultThrowDirection) == 0x000005, "Member 'UnionItemInfoInterface_NoticeHoldItemEvent::DefaultThrowDirection' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeHoldItemEvent, bGadgetLuckyItem) == 0x000006, "Member 'UnionItemInfoInterface_NoticeHoldItemEvent::bGadgetLuckyItem' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeItemStockTradeEvent
// 0x000C (0x000C - 0x0000)
struct UnionItemInfoInterface_NoticeItemStockTradeEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemSet                               PrevItemSet;                                       // 0x0004(0x0003)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FItemSet                               NewItemSet;                                        // 0x0007(0x0003)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionItemInfoInterface_NoticeItemStockTradeEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeItemStockTradeEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeItemStockTradeEvent) == 0x00000C, "Wrong size on UnionItemInfoInterface_NoticeItemStockTradeEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeItemStockTradeEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeItemStockTradeEvent::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeItemStockTradeEvent, PrevItemSet) == 0x000004, "Member 'UnionItemInfoInterface_NoticeItemStockTradeEvent::PrevItemSet' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeItemStockTradeEvent, NewItemSet) == 0x000007, "Member 'UnionItemInfoInterface_NoticeItemStockTradeEvent::NewItemSet' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeRefreshEvent
// 0x0004 (0x0004 - 0x0000)
struct UnionItemInfoInterface_NoticeRefreshEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionItemInfoInterface_NoticeRefreshEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeRefreshEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeRefreshEvent) == 0x000004, "Wrong size on UnionItemInfoInterface_NoticeRefreshEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeRefreshEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeRefreshEvent::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeResultLotteryItemEvent
// 0x0008 (0x0008 - 0x0000)
struct UnionItemInfoInterface_NoticeResultLotteryItemEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionItemInfoInterface_NoticeResultLotteryItemEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeResultLotteryItemEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeResultLotteryItemEvent) == 0x000008, "Wrong size on UnionItemInfoInterface_NoticeResultLotteryItemEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeResultLotteryItemEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeResultLotteryItemEvent::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeResultLotteryItemEvent, ItemInfoType) == 0x000004, "Member 'UnionItemInfoInterface_NoticeResultLotteryItemEvent::ItemInfoType' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeStartIrregularCharging
// 0x0008 (0x0008 - 0x0000)
struct UnionItemInfoInterface_NoticeStartIrregularCharging final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ItemId;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionItemInfoInterface_NoticeStartIrregularCharging) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeStartIrregularCharging");
static_assert(sizeof(UnionItemInfoInterface_NoticeStartIrregularCharging) == 0x000008, "Wrong size on UnionItemInfoInterface_NoticeStartIrregularCharging");
static_assert(offsetof(UnionItemInfoInterface_NoticeStartIrregularCharging, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeStartIrregularCharging::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeStartIrregularCharging, ItemId) == 0x000004, "Member 'UnionItemInfoInterface_NoticeStartIrregularCharging::ItemId' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeStartLostItemEvent
// 0x000C (0x000C - 0x0000)
struct UnionItemInfoInterface_NoticeStartLostItemEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ItemId;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LostItemCount;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionItemInfoInterface_NoticeStartLostItemEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeStartLostItemEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeStartLostItemEvent) == 0x00000C, "Wrong size on UnionItemInfoInterface_NoticeStartLostItemEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeStartLostItemEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeStartLostItemEvent::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeStartLostItemEvent, ItemId) == 0x000004, "Member 'UnionItemInfoInterface_NoticeStartLostItemEvent::ItemId' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeStartLostItemEvent, ItemInfoType) == 0x000005, "Member 'UnionItemInfoInterface_NoticeStartLostItemEvent::ItemInfoType' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeStartLostItemEvent, LostItemCount) == 0x000008, "Member 'UnionItemInfoInterface_NoticeStartLostItemEvent::LostItemCount' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeStartLotteryItemEvent
// 0x0008 (0x0008 - 0x0000)
struct UnionItemInfoInterface_NoticeStartLotteryItemEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionItemInfoInterface_NoticeStartLotteryItemEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeStartLotteryItemEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeStartLotteryItemEvent) == 0x000008, "Wrong size on UnionItemInfoInterface_NoticeStartLotteryItemEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeStartLotteryItemEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeStartLotteryItemEvent::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeStartLotteryItemEvent, ItemInfoType) == 0x000004, "Member 'UnionItemInfoInterface_NoticeStartLotteryItemEvent::ItemInfoType' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeStartShuffleItemEvent
// 0x0004 (0x0004 - 0x0000)
struct UnionItemInfoInterface_NoticeStartShuffleItemEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionItemInfoInterface_NoticeStartShuffleItemEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeStartShuffleItemEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeStartShuffleItemEvent) == 0x000004, "Wrong size on UnionItemInfoInterface_NoticeStartShuffleItemEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeStartShuffleItemEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeStartShuffleItemEvent::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeTakePackageRingEvent
// 0x0008 (0x0008 - 0x0000)
struct UnionItemInfoInterface_NoticeTakePackageRingEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRingNum;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionItemInfoInterface_NoticeTakePackageRingEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeTakePackageRingEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeTakePackageRingEvent) == 0x000008, "Wrong size on UnionItemInfoInterface_NoticeTakePackageRingEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeTakePackageRingEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeTakePackageRingEvent::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeTakePackageRingEvent, InRingNum) == 0x000004, "Member 'UnionItemInfoInterface_NoticeTakePackageRingEvent::InRingNum' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeUpgradeEvent
// 0x0004 (0x0004 - 0x0000)
struct UnionItemInfoInterface_NoticeUpgradeEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionItemInfoInterface_NoticeUpgradeEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeUpgradeEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeUpgradeEvent) == 0x000004, "Wrong size on UnionItemInfoInterface_NoticeUpgradeEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeUpgradeEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeUpgradeEvent::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionItemInfoInterface.NoticeUseItemEvent
// 0x0008 (0x0008 - 0x0000)
struct UnionItemInfoInterface_NoticeUseItemEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ItemId;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemThrowDirection                           ThrowType;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionItemInfoInterface_NoticeUseItemEvent) == 0x000004, "Wrong alignment on UnionItemInfoInterface_NoticeUseItemEvent");
static_assert(sizeof(UnionItemInfoInterface_NoticeUseItemEvent) == 0x000008, "Wrong size on UnionItemInfoInterface_NoticeUseItemEvent");
static_assert(offsetof(UnionItemInfoInterface_NoticeUseItemEvent, RacerIndex) == 0x000000, "Member 'UnionItemInfoInterface_NoticeUseItemEvent::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeUseItemEvent, ItemId) == 0x000004, "Member 'UnionItemInfoInterface_NoticeUseItemEvent::ItemId' has a wrong offset!");
static_assert(offsetof(UnionItemInfoInterface_NoticeUseItemEvent, ThrowType) == 0x000005, "Member 'UnionItemInfoInterface_NoticeUseItemEvent::ThrowType' has a wrong offset!");

// Function UnionRun.ObakeAnimInstance.GetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct ObakeAnimInstance_GetIsAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObakeAnimInstance_GetIsAttack) == 0x000001, "Wrong alignment on ObakeAnimInstance_GetIsAttack");
static_assert(sizeof(ObakeAnimInstance_GetIsAttack) == 0x000001, "Wrong size on ObakeAnimInstance_GetIsAttack");
static_assert(offsetof(ObakeAnimInstance_GetIsAttack, ReturnValue) == 0x000000, "Member 'ObakeAnimInstance_GetIsAttack::ReturnValue' has a wrong offset!");

// Function UnionRun.ObakeAnimInstance.GetIsIdle
// 0x0001 (0x0001 - 0x0000)
struct ObakeAnimInstance_GetIsIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObakeAnimInstance_GetIsIdle) == 0x000001, "Wrong alignment on ObakeAnimInstance_GetIsIdle");
static_assert(sizeof(ObakeAnimInstance_GetIsIdle) == 0x000001, "Wrong size on ObakeAnimInstance_GetIsIdle");
static_assert(offsetof(ObakeAnimInstance_GetIsIdle, ReturnValue) == 0x000000, "Member 'ObakeAnimInstance_GetIsIdle::ReturnValue' has a wrong offset!");

// Function UnionRun.ObakeAnimInstance.SetIsAttack
// 0x0001 (0x0001 - 0x0000)
struct ObakeAnimInstance_SetIsAttack final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObakeAnimInstance_SetIsAttack) == 0x000001, "Wrong alignment on ObakeAnimInstance_SetIsAttack");
static_assert(sizeof(ObakeAnimInstance_SetIsAttack) == 0x000001, "Wrong size on ObakeAnimInstance_SetIsAttack");
static_assert(offsetof(ObakeAnimInstance_SetIsAttack, flag) == 0x000000, "Member 'ObakeAnimInstance_SetIsAttack::flag' has a wrong offset!");

// Function UnionRun.ObakeAnimInstance.SetIsIdle
// 0x0001 (0x0001 - 0x0000)
struct ObakeAnimInstance_SetIsIdle final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObakeAnimInstance_SetIsIdle) == 0x000001, "Wrong alignment on ObakeAnimInstance_SetIsIdle");
static_assert(sizeof(ObakeAnimInstance_SetIsIdle) == 0x000001, "Wrong size on ObakeAnimInstance_SetIsIdle");
static_assert(offsetof(ObakeAnimInstance_SetIsIdle, flag) == 0x000000, "Member 'ObakeAnimInstance_SetIsIdle::flag' has a wrong offset!");

// Function UnionRun.PackageRingObject.HitRacer
// 0x0004 (0x0004 - 0x0000)
struct PackageRingObject_HitRacer final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PackageRingObject_HitRacer) == 0x000004, "Wrong alignment on PackageRingObject_HitRacer");
static_assert(sizeof(PackageRingObject_HitRacer) == 0x000004, "Wrong size on PackageRingObject_HitRacer");
static_assert(offsetof(PackageRingObject_HitRacer, RacerIndex) == 0x000000, "Member 'PackageRingObject_HitRacer::RacerIndex' has a wrong offset!");

// Function UnionRun.PackageRingObject.SetRingType
// 0x0001 (0x0001 - 0x0000)
struct PackageRingObject_SetRingType final
{
public:
	EPackageRingType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PackageRingObject_SetRingType) == 0x000001, "Wrong alignment on PackageRingObject_SetRingType");
static_assert(sizeof(PackageRingObject_SetRingType) == 0x000001, "Wrong size on PackageRingObject_SetRingType");
static_assert(offsetof(PackageRingObject_SetRingType, Type) == 0x000000, "Member 'PackageRingObject_SetRingType::Type' has a wrong offset!");

// Function UnionRun.UnionRacer.ApplyPauseInput
// 0x0001 (0x0001 - 0x0000)
struct UnionRacer_ApplyPauseInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_ApplyPauseInput) == 0x000001, "Wrong alignment on UnionRacer_ApplyPauseInput");
static_assert(sizeof(UnionRacer_ApplyPauseInput) == 0x000001, "Wrong size on UnionRacer_ApplyPauseInput");
static_assert(offsetof(UnionRacer_ApplyPauseInput, ReturnValue) == 0x000000, "Member 'UnionRacer_ApplyPauseInput::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacer.ChangeVehicleDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct UnionRacer_ChangeVehicleDisplayMode final
{
public:
	EVehicleDisplayMode                           InVehicleDisplayMode;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_ChangeVehicleDisplayMode) == 0x000001, "Wrong alignment on UnionRacer_ChangeVehicleDisplayMode");
static_assert(sizeof(UnionRacer_ChangeVehicleDisplayMode) == 0x000001, "Wrong size on UnionRacer_ChangeVehicleDisplayMode");
static_assert(offsetof(UnionRacer_ChangeVehicleDisplayMode, InVehicleDisplayMode) == 0x000000, "Member 'UnionRacer_ChangeVehicleDisplayMode::InVehicleDisplayMode' has a wrong offset!");

// Function UnionRun.UnionRacer.Destroy
// 0x0001 (0x0001 - 0x0000)
struct UnionRacer_Destroy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_Destroy) == 0x000001, "Wrong alignment on UnionRacer_Destroy");
static_assert(sizeof(UnionRacer_Destroy) == 0x000001, "Wrong size on UnionRacer_Destroy");
static_assert(offsetof(UnionRacer_Destroy, ReturnValue) == 0x000000, "Member 'UnionRacer_Destroy::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacer.ExecTick
// 0x0004 (0x0004 - 0x0000)
struct UnionRacer_ExecTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_ExecTick) == 0x000004, "Wrong alignment on UnionRacer_ExecTick");
static_assert(sizeof(UnionRacer_ExecTick) == 0x000004, "Wrong size on UnionRacer_ExecTick");
static_assert(offsetof(UnionRacer_ExecTick, DeltaSeconds) == 0x000000, "Member 'UnionRacer_ExecTick::DeltaSeconds' has a wrong offset!");

// Function UnionRun.UnionRacer.GetPlayerControllerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacer_GetPlayerControllerIndex final
{
public:
	int32                                         OutPlayerControllerIndex;                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_GetPlayerControllerIndex) == 0x000004, "Wrong alignment on UnionRacer_GetPlayerControllerIndex");
static_assert(sizeof(UnionRacer_GetPlayerControllerIndex) == 0x000004, "Wrong size on UnionRacer_GetPlayerControllerIndex");
static_assert(offsetof(UnionRacer_GetPlayerControllerIndex, OutPlayerControllerIndex) == 0x000000, "Member 'UnionRacer_GetPlayerControllerIndex::OutPlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRacer.GetRaceLapInfo
// 0x0008 (0x0008 - 0x0000)
struct UnionRacer_GetRaceLapInfo final
{
public:
	class UUnionRaceLapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_GetRaceLapInfo) == 0x000008, "Wrong alignment on UnionRacer_GetRaceLapInfo");
static_assert(sizeof(UnionRacer_GetRaceLapInfo) == 0x000008, "Wrong size on UnionRacer_GetRaceLapInfo");
static_assert(offsetof(UnionRacer_GetRaceLapInfo, ReturnValue) == 0x000000, "Member 'UnionRacer_GetRaceLapInfo::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacer.GetRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacer_GetRacerIndex final
{
public:
	int32                                         OutRacerIndex;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_GetRacerIndex) == 0x000004, "Wrong alignment on UnionRacer_GetRacerIndex");
static_assert(sizeof(UnionRacer_GetRacerIndex) == 0x000004, "Wrong size on UnionRacer_GetRacerIndex");
static_assert(offsetof(UnionRacer_GetRacerIndex, OutRacerIndex) == 0x000000, "Member 'UnionRacer_GetRacerIndex::OutRacerIndex' has a wrong offset!");

// Function UnionRun.UnionRacer.GetRacerSituationObject
// 0x0008 (0x0008 - 0x0000)
struct UnionRacer_GetRacerSituationObject final
{
public:
	class UUnionRaceSituationObject*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_GetRacerSituationObject) == 0x000008, "Wrong alignment on UnionRacer_GetRacerSituationObject");
static_assert(sizeof(UnionRacer_GetRacerSituationObject) == 0x000008, "Wrong size on UnionRacer_GetRacerSituationObject");
static_assert(offsetof(UnionRacer_GetRacerSituationObject, ReturnValue) == 0x000000, "Member 'UnionRacer_GetRacerSituationObject::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacer.GetRacerStatusObject
// 0x0008 (0x0008 - 0x0000)
struct UnionRacer_GetRacerStatusObject final
{
public:
	class UUnionRacerStatusObject*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_GetRacerStatusObject) == 0x000008, "Wrong alignment on UnionRacer_GetRacerStatusObject");
static_assert(sizeof(UnionRacer_GetRacerStatusObject) == 0x000008, "Wrong size on UnionRacer_GetRacerStatusObject");
static_assert(offsetof(UnionRacer_GetRacerStatusObject, ReturnValue) == 0x000000, "Member 'UnionRacer_GetRacerStatusObject::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacer.GetTestRaceCount
// 0x0004 (0x0004 - 0x0000)
struct UnionRacer_GetTestRaceCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_GetTestRaceCount) == 0x000004, "Wrong alignment on UnionRacer_GetTestRaceCount");
static_assert(sizeof(UnionRacer_GetTestRaceCount) == 0x000004, "Wrong size on UnionRacer_GetTestRaceCount");
static_assert(offsetof(UnionRacer_GetTestRaceCount, ReturnValue) == 0x000000, "Member 'UnionRacer_GetTestRaceCount::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacer.SetPlayerControllerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacer_SetPlayerControllerIndex final
{
public:
	int32                                         InPlayerControllerIndex;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_SetPlayerControllerIndex) == 0x000004, "Wrong alignment on UnionRacer_SetPlayerControllerIndex");
static_assert(sizeof(UnionRacer_SetPlayerControllerIndex) == 0x000004, "Wrong size on UnionRacer_SetPlayerControllerIndex");
static_assert(offsetof(UnionRacer_SetPlayerControllerIndex, InPlayerControllerIndex) == 0x000000, "Member 'UnionRacer_SetPlayerControllerIndex::InPlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRacer.SetRaceLapInfo
// 0x0008 (0x0008 - 0x0000)
struct UnionRacer_SetRaceLapInfo final
{
public:
	class UUnionRaceLapInfo*                      InRaceLapInfo;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_SetRaceLapInfo) == 0x000008, "Wrong alignment on UnionRacer_SetRaceLapInfo");
static_assert(sizeof(UnionRacer_SetRaceLapInfo) == 0x000008, "Wrong size on UnionRacer_SetRaceLapInfo");
static_assert(offsetof(UnionRacer_SetRaceLapInfo, InRaceLapInfo) == 0x000000, "Member 'UnionRacer_SetRaceLapInfo::InRaceLapInfo' has a wrong offset!");

// Function UnionRun.UnionRacer.SetRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacer_SetRacerIndex final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_SetRacerIndex) == 0x000004, "Wrong alignment on UnionRacer_SetRacerIndex");
static_assert(sizeof(UnionRacer_SetRacerIndex) == 0x000004, "Wrong size on UnionRacer_SetRacerIndex");
static_assert(offsetof(UnionRacer_SetRacerIndex, InRacerIndex) == 0x000000, "Member 'UnionRacer_SetRacerIndex::InRacerIndex' has a wrong offset!");

// Function UnionRun.UnionRacer.SetTickable
// 0x0001 (0x0001 - 0x0000)
struct UnionRacer_SetTickable final
{
public:
	bool                                          bTickable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_SetTickable) == 0x000001, "Wrong alignment on UnionRacer_SetTickable");
static_assert(sizeof(UnionRacer_SetTickable) == 0x000001, "Wrong size on UnionRacer_SetTickable");
static_assert(offsetof(UnionRacer_SetTickable, bTickable) == 0x000000, "Member 'UnionRacer_SetTickable::bTickable' has a wrong offset!");

// Function UnionRun.UnionRacer.SetVehicle
// 0x0008 (0x0008 - 0x0000)
struct UnionRacer_SetVehicle final
{
public:
	class APawn*                                  InVehicle;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_SetVehicle) == 0x000008, "Wrong alignment on UnionRacer_SetVehicle");
static_assert(sizeof(UnionRacer_SetVehicle) == 0x000008, "Wrong size on UnionRacer_SetVehicle");
static_assert(offsetof(UnionRacer_SetVehicle, InVehicle) == 0x000000, "Member 'UnionRacer_SetVehicle::InVehicle' has a wrong offset!");

// Function UnionRun.UnionRacer.SetViewSplitId
// 0x0001 (0x0001 - 0x0000)
struct UnionRacer_SetViewSplitId final
{
public:
	EViewSplitId                                  InViewSplitId;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_SetViewSplitId) == 0x000001, "Wrong alignment on UnionRacer_SetViewSplitId");
static_assert(sizeof(UnionRacer_SetViewSplitId) == 0x000001, "Wrong size on UnionRacer_SetViewSplitId");
static_assert(offsetof(UnionRacer_SetViewSplitId, InViewSplitId) == 0x000000, "Member 'UnionRacer_SetViewSplitId::InViewSplitId' has a wrong offset!");

// Function UnionRun.UnionRacer.UnionRacer_SetTimerDelegate
// 0x0020 (0x0020 - 0x0000)
struct UnionRacer_UnionRacer_SetTimerDelegate final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_UnionRacer_SetTimerDelegate) == 0x000008, "Wrong alignment on UnionRacer_UnionRacer_SetTimerDelegate");
static_assert(sizeof(UnionRacer_UnionRacer_SetTimerDelegate) == 0x000020, "Wrong size on UnionRacer_UnionRacer_SetTimerDelegate");
static_assert(offsetof(UnionRacer_UnionRacer_SetTimerDelegate, Delegate) == 0x000000, "Member 'UnionRacer_UnionRacer_SetTimerDelegate::Delegate' has a wrong offset!");
static_assert(offsetof(UnionRacer_UnionRacer_SetTimerDelegate, Time) == 0x000010, "Member 'UnionRacer_UnionRacer_SetTimerDelegate::Time' has a wrong offset!");
static_assert(offsetof(UnionRacer_UnionRacer_SetTimerDelegate, bLooping) == 0x000014, "Member 'UnionRacer_UnionRacer_SetTimerDelegate::bLooping' has a wrong offset!");
static_assert(offsetof(UnionRacer_UnionRacer_SetTimerDelegate, ReturnValue) == 0x000018, "Member 'UnionRacer_UnionRacer_SetTimerDelegate::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacer.UpdateTestRace
// 0x0004 (0x0004 - 0x0000)
struct UnionRacer_UpdateTestRace final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_UpdateTestRace) == 0x000004, "Wrong alignment on UnionRacer_UpdateTestRace");
static_assert(sizeof(UnionRacer_UpdateTestRace) == 0x000004, "Wrong size on UnionRacer_UpdateTestRace");
static_assert(offsetof(UnionRacer_UpdateTestRace, Delta) == 0x000000, "Member 'UnionRacer_UpdateTestRace::Delta' has a wrong offset!");

// Function UnionRun.UnionRacer.UpdateVehicle
// 0x0004 (0x0004 - 0x0000)
struct UnionRacer_UpdateVehicle final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_UpdateVehicle) == 0x000004, "Wrong alignment on UnionRacer_UpdateVehicle");
static_assert(sizeof(UnionRacer_UpdateVehicle) == 0x000004, "Wrong size on UnionRacer_UpdateVehicle");
static_assert(offsetof(UnionRacer_UpdateVehicle, Delta) == 0x000000, "Member 'UnionRacer_UpdateVehicle::Delta' has a wrong offset!");

// Function UnionRun.UnionRacer.GetViewSplitId
// 0x0001 (0x0001 - 0x0000)
struct UnionRacer_GetViewSplitId final
{
public:
	EViewSplitId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacer_GetViewSplitId) == 0x000001, "Wrong alignment on UnionRacer_GetViewSplitId");
static_assert(sizeof(UnionRacer_GetViewSplitId) == 0x000001, "Wrong size on UnionRacer_GetViewSplitId");
static_assert(offsetof(UnionRacer_GetViewSplitId, ReturnValue) == 0x000000, "Member 'UnionRacer_GetViewSplitId::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceObjectSkeletal.SetBodySkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct RaceObjectSkeletal_SetBodySkeletalMesh final
{
public:
	class USkeletalMesh*                          NewSkeletalMesh;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceObjectSkeletal_SetBodySkeletalMesh) == 0x000008, "Wrong alignment on RaceObjectSkeletal_SetBodySkeletalMesh");
static_assert(sizeof(RaceObjectSkeletal_SetBodySkeletalMesh) == 0x000008, "Wrong size on RaceObjectSkeletal_SetBodySkeletalMesh");
static_assert(offsetof(RaceObjectSkeletal_SetBodySkeletalMesh, NewSkeletalMesh) == 0x000000, "Member 'RaceObjectSkeletal_SetBodySkeletalMesh::NewSkeletalMesh' has a wrong offset!");

// Function UnionRun.RacerReactionManager.ForcePlayVoice
// 0x00A8 (0x00A8 - 0x0000)
struct RacerReactionManager_ForcePlayVoice final
{
public:
	struct FRacerReactionVoice                    ReactionVoice;                                     // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         RacerIndex;                                        // 0x00A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumCoolTime;                                   // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RacerReactionManager_ForcePlayVoice) == 0x000008, "Wrong alignment on RacerReactionManager_ForcePlayVoice");
static_assert(sizeof(RacerReactionManager_ForcePlayVoice) == 0x0000A8, "Wrong size on RacerReactionManager_ForcePlayVoice");
static_assert(offsetof(RacerReactionManager_ForcePlayVoice, ReactionVoice) == 0x000000, "Member 'RacerReactionManager_ForcePlayVoice::ReactionVoice' has a wrong offset!");
static_assert(offsetof(RacerReactionManager_ForcePlayVoice, RacerIndex) == 0x0000A0, "Member 'RacerReactionManager_ForcePlayVoice::RacerIndex' has a wrong offset!");
static_assert(offsetof(RacerReactionManager_ForcePlayVoice, MinimumCoolTime) == 0x0000A4, "Member 'RacerReactionManager_ForcePlayVoice::MinimumCoolTime' has a wrong offset!");

// Function UnionRun.RacerReactionManager.SoundPlayIrregularInfoDod
// 0x00B0 (0x00B0 - 0x0000)
struct RacerReactionManager_SoundPlayIrregularInfoDod final
{
public:
	struct FRacerReactionVoice                    ReactionVoice;                                     // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         RacerIndex;                                        // 0x00A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumCoolTime;                                   // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RacerReactionManager_SoundPlayIrregularInfoDod) == 0x000008, "Wrong alignment on RacerReactionManager_SoundPlayIrregularInfoDod");
static_assert(sizeof(RacerReactionManager_SoundPlayIrregularInfoDod) == 0x0000B0, "Wrong size on RacerReactionManager_SoundPlayIrregularInfoDod");
static_assert(offsetof(RacerReactionManager_SoundPlayIrregularInfoDod, ReactionVoice) == 0x000000, "Member 'RacerReactionManager_SoundPlayIrregularInfoDod::ReactionVoice' has a wrong offset!");
static_assert(offsetof(RacerReactionManager_SoundPlayIrregularInfoDod, RacerIndex) == 0x0000A0, "Member 'RacerReactionManager_SoundPlayIrregularInfoDod::RacerIndex' has a wrong offset!");
static_assert(offsetof(RacerReactionManager_SoundPlayIrregularInfoDod, MinimumCoolTime) == 0x0000A4, "Member 'RacerReactionManager_SoundPlayIrregularInfoDod::MinimumCoolTime' has a wrong offset!");
static_assert(offsetof(RacerReactionManager_SoundPlayIrregularInfoDod, Duration) == 0x0000A8, "Member 'RacerReactionManager_SoundPlayIrregularInfoDod::Duration' has a wrong offset!");

// Function UnionRun.UnionNavMarker.GetUseSplineActor
// 0x0028 (0x0028 - 0x0000)
struct UnionNavMarker_GetUseSplineActor final
{
public:
	TSoftObjectPtr<class AActor>                  ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_GetUseSplineActor) == 0x000008, "Wrong alignment on UnionNavMarker_GetUseSplineActor");
static_assert(sizeof(UnionNavMarker_GetUseSplineActor) == 0x000028, "Wrong size on UnionNavMarker_GetUseSplineActor");
static_assert(offsetof(UnionNavMarker_GetUseSplineActor, ReturnValue) == 0x000000, "Member 'UnionNavMarker_GetUseSplineActor::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionNavMarker.IsFinalLapOnly
// 0x0001 (0x0001 - 0x0000)
struct UnionNavMarker_IsFinalLapOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_IsFinalLapOnly) == 0x000001, "Wrong alignment on UnionNavMarker_IsFinalLapOnly");
static_assert(sizeof(UnionNavMarker_IsFinalLapOnly) == 0x000001, "Wrong size on UnionNavMarker_IsFinalLapOnly");
static_assert(offsetof(UnionNavMarker_IsFinalLapOnly, ReturnValue) == 0x000000, "Member 'UnionNavMarker_IsFinalLapOnly::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionNavMarker.SetIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionNavMarker_SetIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_SetIndex) == 0x000004, "Wrong alignment on UnionNavMarker_SetIndex");
static_assert(sizeof(UnionNavMarker_SetIndex) == 0x000004, "Wrong size on UnionNavMarker_SetIndex");
static_assert(offsetof(UnionNavMarker_SetIndex, NewIndex) == 0x000000, "Member 'UnionNavMarker_SetIndex::NewIndex' has a wrong offset!");

// Function UnionRun.UnionNavMarker.SetIsAnother
// 0x0001 (0x0001 - 0x0000)
struct UnionNavMarker_SetIsAnother final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_SetIsAnother) == 0x000001, "Wrong alignment on UnionNavMarker_SetIsAnother");
static_assert(sizeof(UnionNavMarker_SetIsAnother) == 0x000001, "Wrong size on UnionNavMarker_SetIsAnother");
static_assert(offsetof(UnionNavMarker_SetIsAnother, flag) == 0x000000, "Member 'UnionNavMarker_SetIsAnother::flag' has a wrong offset!");

// Function UnionRun.UnionNavMarker.SetLapType
// 0x0001 (0x0001 - 0x0000)
struct UnionNavMarker_SetLapType final
{
public:
	ENavMarkerLapType                             NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_SetLapType) == 0x000001, "Wrong alignment on UnionNavMarker_SetLapType");
static_assert(sizeof(UnionNavMarker_SetLapType) == 0x000001, "Wrong size on UnionNavMarker_SetLapType");
static_assert(offsetof(UnionNavMarker_SetLapType, NewType) == 0x000000, "Member 'UnionNavMarker_SetLapType::NewType' has a wrong offset!");

// Function UnionRun.UnionNavMarker.SetSplineOnPosition
// 0x0004 (0x0004 - 0x0000)
struct UnionNavMarker_SetSplineOnPosition final
{
public:
	int32                                         InPosition;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_SetSplineOnPosition) == 0x000004, "Wrong alignment on UnionNavMarker_SetSplineOnPosition");
static_assert(sizeof(UnionNavMarker_SetSplineOnPosition) == 0x000004, "Wrong size on UnionNavMarker_SetSplineOnPosition");
static_assert(offsetof(UnionNavMarker_SetSplineOnPosition, InPosition) == 0x000000, "Member 'UnionNavMarker_SetSplineOnPosition::InPosition' has a wrong offset!");

// Function UnionRun.UnionNavMarker.SetTransformRingType
// 0x0001 (0x0001 - 0x0000)
struct UnionNavMarker_SetTransformRingType final
{
public:
	ETransformRingType                            TransformType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_SetTransformRingType) == 0x000001, "Wrong alignment on UnionNavMarker_SetTransformRingType");
static_assert(sizeof(UnionNavMarker_SetTransformRingType) == 0x000001, "Wrong size on UnionNavMarker_SetTransformRingType");
static_assert(offsetof(UnionNavMarker_SetTransformRingType, TransformType) == 0x000000, "Member 'UnionNavMarker_SetTransformRingType::TransformType' has a wrong offset!");

// Function UnionRun.UnionNavMarker.SetType
// 0x0001 (0x0001 - 0x0000)
struct UnionNavMarker_SetType final
{
public:
	EUnionNavMarkerType                           NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_SetType) == 0x000001, "Wrong alignment on UnionNavMarker_SetType");
static_assert(sizeof(UnionNavMarker_SetType) == 0x000001, "Wrong size on UnionNavMarker_SetType");
static_assert(offsetof(UnionNavMarker_SetType, NewType) == 0x000000, "Member 'UnionNavMarker_SetType::NewType' has a wrong offset!");

// Function UnionRun.UnionNavMarker.SetUseSplineActor
// 0x0028 (0x0028 - 0x0000)
struct UnionNavMarker_SetUseSplineActor final
{
public:
	TSoftObjectPtr<class AActor>                  InUseSplineActor;                                  // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_SetUseSplineActor) == 0x000008, "Wrong alignment on UnionNavMarker_SetUseSplineActor");
static_assert(sizeof(UnionNavMarker_SetUseSplineActor) == 0x000028, "Wrong size on UnionNavMarker_SetUseSplineActor");
static_assert(offsetof(UnionNavMarker_SetUseSplineActor, InUseSplineActor) == 0x000000, "Member 'UnionNavMarker_SetUseSplineActor::InUseSplineActor' has a wrong offset!");

// Function UnionRun.UnionNavMarker.SetUseSplineLength
// 0x0004 (0x0004 - 0x0000)
struct UnionNavMarker_SetUseSplineLength final
{
public:
	float                                         InLength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_SetUseSplineLength) == 0x000004, "Wrong alignment on UnionNavMarker_SetUseSplineLength");
static_assert(sizeof(UnionNavMarker_SetUseSplineLength) == 0x000004, "Wrong size on UnionNavMarker_SetUseSplineLength");
static_assert(offsetof(UnionNavMarker_SetUseSplineLength, InLength) == 0x000000, "Member 'UnionNavMarker_SetUseSplineLength::InLength' has a wrong offset!");

// Function UnionRun.UnionNavMarker.GetIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionNavMarker_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_GetIndex) == 0x000004, "Wrong alignment on UnionNavMarker_GetIndex");
static_assert(sizeof(UnionNavMarker_GetIndex) == 0x000004, "Wrong size on UnionNavMarker_GetIndex");
static_assert(offsetof(UnionNavMarker_GetIndex, ReturnValue) == 0x000000, "Member 'UnionNavMarker_GetIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionNavMarker.GetLapType
// 0x0001 (0x0001 - 0x0000)
struct UnionNavMarker_GetLapType final
{
public:
	ENavMarkerLapType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_GetLapType) == 0x000001, "Wrong alignment on UnionNavMarker_GetLapType");
static_assert(sizeof(UnionNavMarker_GetLapType) == 0x000001, "Wrong size on UnionNavMarker_GetLapType");
static_assert(offsetof(UnionNavMarker_GetLapType, ReturnValue) == 0x000000, "Member 'UnionNavMarker_GetLapType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionNavMarker.GetSplineOnPosition
// 0x0004 (0x0004 - 0x0000)
struct UnionNavMarker_GetSplineOnPosition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_GetSplineOnPosition) == 0x000004, "Wrong alignment on UnionNavMarker_GetSplineOnPosition");
static_assert(sizeof(UnionNavMarker_GetSplineOnPosition) == 0x000004, "Wrong size on UnionNavMarker_GetSplineOnPosition");
static_assert(offsetof(UnionNavMarker_GetSplineOnPosition, ReturnValue) == 0x000000, "Member 'UnionNavMarker_GetSplineOnPosition::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionNavMarker.GetTransformRingType
// 0x0001 (0x0001 - 0x0000)
struct UnionNavMarker_GetTransformRingType final
{
public:
	ETransformRingType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_GetTransformRingType) == 0x000001, "Wrong alignment on UnionNavMarker_GetTransformRingType");
static_assert(sizeof(UnionNavMarker_GetTransformRingType) == 0x000001, "Wrong size on UnionNavMarker_GetTransformRingType");
static_assert(offsetof(UnionNavMarker_GetTransformRingType, ReturnValue) == 0x000000, "Member 'UnionNavMarker_GetTransformRingType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionNavMarker.GetType
// 0x0001 (0x0001 - 0x0000)
struct UnionNavMarker_GetType final
{
public:
	EUnionNavMarkerType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_GetType) == 0x000001, "Wrong alignment on UnionNavMarker_GetType");
static_assert(sizeof(UnionNavMarker_GetType) == 0x000001, "Wrong size on UnionNavMarker_GetType");
static_assert(offsetof(UnionNavMarker_GetType, ReturnValue) == 0x000000, "Member 'UnionNavMarker_GetType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionNavMarker.GetUnionSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct UnionNavMarker_GetUnionSplineComponent final
{
public:
	class UUnionSplineComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_GetUnionSplineComponent) == 0x000008, "Wrong alignment on UnionNavMarker_GetUnionSplineComponent");
static_assert(sizeof(UnionNavMarker_GetUnionSplineComponent) == 0x000008, "Wrong size on UnionNavMarker_GetUnionSplineComponent");
static_assert(offsetof(UnionNavMarker_GetUnionSplineComponent, ReturnValue) == 0x000000, "Member 'UnionNavMarker_GetUnionSplineComponent::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionNavMarker.GetUseSplineLength
// 0x0004 (0x0004 - 0x0000)
struct UnionNavMarker_GetUseSplineLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_GetUseSplineLength) == 0x000004, "Wrong alignment on UnionNavMarker_GetUseSplineLength");
static_assert(sizeof(UnionNavMarker_GetUseSplineLength) == 0x000004, "Wrong size on UnionNavMarker_GetUseSplineLength");
static_assert(offsetof(UnionNavMarker_GetUseSplineLength, ReturnValue) == 0x000000, "Member 'UnionNavMarker_GetUseSplineLength::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionNavMarker.IsAnother
// 0x0001 (0x0001 - 0x0000)
struct UnionNavMarker_IsAnother final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_IsAnother) == 0x000001, "Wrong alignment on UnionNavMarker_IsAnother");
static_assert(sizeof(UnionNavMarker_IsAnother) == 0x000001, "Wrong size on UnionNavMarker_IsAnother");
static_assert(offsetof(UnionNavMarker_IsAnother, ReturnValue) == 0x000000, "Member 'UnionNavMarker_IsAnother::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionNavMarker.IsInvalid
// 0x0001 (0x0001 - 0x0000)
struct UnionNavMarker_IsInvalid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionNavMarker_IsInvalid) == 0x000001, "Wrong alignment on UnionNavMarker_IsInvalid");
static_assert(sizeof(UnionNavMarker_IsInvalid) == 0x000001, "Wrong size on UnionNavMarker_IsInvalid");
static_assert(offsetof(UnionNavMarker_IsInvalid, ReturnValue) == 0x000000, "Member 'UnionNavMarker_IsInvalid::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceInfoInterface.NoticeChangeCountDownEvent
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceInfoInterface_NoticeChangeCountDownEvent final
{
public:
	int32                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOldValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceInfoInterface_NoticeChangeCountDownEvent) == 0x000004, "Wrong alignment on UnionRaceInfoInterface_NoticeChangeCountDownEvent");
static_assert(sizeof(UnionRaceInfoInterface_NoticeChangeCountDownEvent) == 0x000008, "Wrong size on UnionRaceInfoInterface_NoticeChangeCountDownEvent");
static_assert(offsetof(UnionRaceInfoInterface_NoticeChangeCountDownEvent, InNewValue) == 0x000000, "Member 'UnionRaceInfoInterface_NoticeChangeCountDownEvent::InNewValue' has a wrong offset!");
static_assert(offsetof(UnionRaceInfoInterface_NoticeChangeCountDownEvent, InOldValue) == 0x000004, "Member 'UnionRaceInfoInterface_NoticeChangeCountDownEvent::InOldValue' has a wrong offset!");

// Function UnionRun.UnionRaceInfoInterface.NoticeChangeRaceStateEvent
// 0x0002 (0x0002 - 0x0000)
struct UnionRaceInfoInterface_NoticeChangeRaceStateEvent final
{
public:
	ERaceInfoStateType                            InNewState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceInfoStateType                            InOldState;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceInfoInterface_NoticeChangeRaceStateEvent) == 0x000001, "Wrong alignment on UnionRaceInfoInterface_NoticeChangeRaceStateEvent");
static_assert(sizeof(UnionRaceInfoInterface_NoticeChangeRaceStateEvent) == 0x000002, "Wrong size on UnionRaceInfoInterface_NoticeChangeRaceStateEvent");
static_assert(offsetof(UnionRaceInfoInterface_NoticeChangeRaceStateEvent, InNewState) == 0x000000, "Member 'UnionRaceInfoInterface_NoticeChangeRaceStateEvent::InNewState' has a wrong offset!");
static_assert(offsetof(UnionRaceInfoInterface_NoticeChangeRaceStateEvent, InOldState) == 0x000001, "Member 'UnionRaceInfoInterface_NoticeChangeRaceStateEvent::InOldState' has a wrong offset!");

// Function UnionRun.UnionRaceInfoInterface.SetRaceInfo
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceInfoInterface_SetRaceInfo final
{
public:
	class UUnionRaceInfo*                         InRaceInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceInfoInterface_SetRaceInfo) == 0x000008, "Wrong alignment on UnionRaceInfoInterface_SetRaceInfo");
static_assert(sizeof(UnionRaceInfoInterface_SetRaceInfo) == 0x000008, "Wrong size on UnionRaceInfoInterface_SetRaceInfo");
static_assert(offsetof(UnionRaceInfoInterface_SetRaceInfo, InRaceInfo) == 0x000000, "Member 'UnionRaceInfoInterface_SetRaceInfo::InRaceInfo' has a wrong offset!");

// Function UnionRun.RaceTestUtils.EndAutoCsvProfile
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_EndAutoCsvProfile final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_EndAutoCsvProfile) == 0x000008, "Wrong alignment on RaceTestUtils_EndAutoCsvProfile");
static_assert(sizeof(RaceTestUtils_EndAutoCsvProfile) == 0x000008, "Wrong size on RaceTestUtils_EndAutoCsvProfile");
static_assert(offsetof(RaceTestUtils_EndAutoCsvProfile, PC) == 0x000000, "Member 'RaceTestUtils_EndAutoCsvProfile::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.EndAutoKibana
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_EndAutoKibana final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_EndAutoKibana) == 0x000008, "Wrong alignment on RaceTestUtils_EndAutoKibana");
static_assert(sizeof(RaceTestUtils_EndAutoKibana) == 0x000008, "Wrong size on RaceTestUtils_EndAutoKibana");
static_assert(offsetof(RaceTestUtils_EndAutoKibana, PC) == 0x000000, "Member 'RaceTestUtils_EndAutoKibana::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.EndAutoProfileGpu
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_EndAutoProfileGpu final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_EndAutoProfileGpu) == 0x000008, "Wrong alignment on RaceTestUtils_EndAutoProfileGpu");
static_assert(sizeof(RaceTestUtils_EndAutoProfileGpu) == 0x000008, "Wrong size on RaceTestUtils_EndAutoProfileGpu");
static_assert(offsetof(RaceTestUtils_EndAutoProfileGpu, PC) == 0x000000, "Member 'RaceTestUtils_EndAutoProfileGpu::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.EndAutoUnrealInsights
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_EndAutoUnrealInsights final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_EndAutoUnrealInsights) == 0x000008, "Wrong alignment on RaceTestUtils_EndAutoUnrealInsights");
static_assert(sizeof(RaceTestUtils_EndAutoUnrealInsights) == 0x000008, "Wrong size on RaceTestUtils_EndAutoUnrealInsights");
static_assert(offsetof(RaceTestUtils_EndAutoUnrealInsights, PC) == 0x000000, "Member 'RaceTestUtils_EndAutoUnrealInsights::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.EndRaceLoadTest
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_EndRaceLoadTest final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_EndRaceLoadTest) == 0x000008, "Wrong alignment on RaceTestUtils_EndRaceLoadTest");
static_assert(sizeof(RaceTestUtils_EndRaceLoadTest) == 0x000008, "Wrong size on RaceTestUtils_EndRaceLoadTest");
static_assert(offsetof(RaceTestUtils_EndRaceLoadTest, PC) == 0x000000, "Member 'RaceTestUtils_EndRaceLoadTest::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.EndRaceTest
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_EndRaceTest final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_EndRaceTest) == 0x000008, "Wrong alignment on RaceTestUtils_EndRaceTest");
static_assert(sizeof(RaceTestUtils_EndRaceTest) == 0x000008, "Wrong size on RaceTestUtils_EndRaceTest");
static_assert(offsetof(RaceTestUtils_EndRaceTest, PC) == 0x000000, "Member 'RaceTestUtils_EndRaceTest::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetAutoCsvProfileModeFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_GetAutoCsvProfileModeFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetAutoCsvProfileModeFlag) == 0x000001, "Wrong alignment on RaceTestUtils_GetAutoCsvProfileModeFlag");
static_assert(sizeof(RaceTestUtils_GetAutoCsvProfileModeFlag) == 0x000001, "Wrong size on RaceTestUtils_GetAutoCsvProfileModeFlag");
static_assert(offsetof(RaceTestUtils_GetAutoCsvProfileModeFlag, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetAutoCsvProfileModeFlag::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetAutoDebugKibanaModeFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_GetAutoDebugKibanaModeFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetAutoDebugKibanaModeFlag) == 0x000001, "Wrong alignment on RaceTestUtils_GetAutoDebugKibanaModeFlag");
static_assert(sizeof(RaceTestUtils_GetAutoDebugKibanaModeFlag) == 0x000001, "Wrong size on RaceTestUtils_GetAutoDebugKibanaModeFlag");
static_assert(offsetof(RaceTestUtils_GetAutoDebugKibanaModeFlag, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetAutoDebugKibanaModeFlag::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetAutoDetailKibanaModeFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_GetAutoDetailKibanaModeFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetAutoDetailKibanaModeFlag) == 0x000001, "Wrong alignment on RaceTestUtils_GetAutoDetailKibanaModeFlag");
static_assert(sizeof(RaceTestUtils_GetAutoDetailKibanaModeFlag) == 0x000001, "Wrong size on RaceTestUtils_GetAutoDetailKibanaModeFlag");
static_assert(offsetof(RaceTestUtils_GetAutoDetailKibanaModeFlag, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetAutoDetailKibanaModeFlag::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetAutoKibanaModeFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_GetAutoKibanaModeFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetAutoKibanaModeFlag) == 0x000001, "Wrong alignment on RaceTestUtils_GetAutoKibanaModeFlag");
static_assert(sizeof(RaceTestUtils_GetAutoKibanaModeFlag) == 0x000001, "Wrong size on RaceTestUtils_GetAutoKibanaModeFlag");
static_assert(offsetof(RaceTestUtils_GetAutoKibanaModeFlag, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetAutoKibanaModeFlag::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetAutoProfileGpuModeFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_GetAutoProfileGpuModeFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetAutoProfileGpuModeFlag) == 0x000001, "Wrong alignment on RaceTestUtils_GetAutoProfileGpuModeFlag");
static_assert(sizeof(RaceTestUtils_GetAutoProfileGpuModeFlag) == 0x000001, "Wrong size on RaceTestUtils_GetAutoProfileGpuModeFlag");
static_assert(offsetof(RaceTestUtils_GetAutoProfileGpuModeFlag, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetAutoProfileGpuModeFlag::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetAutoUnrealInsightsModeFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_GetAutoUnrealInsightsModeFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetAutoUnrealInsightsModeFlag) == 0x000001, "Wrong alignment on RaceTestUtils_GetAutoUnrealInsightsModeFlag");
static_assert(sizeof(RaceTestUtils_GetAutoUnrealInsightsModeFlag) == 0x000001, "Wrong size on RaceTestUtils_GetAutoUnrealInsightsModeFlag");
static_assert(offsetof(RaceTestUtils_GetAutoUnrealInsightsModeFlag, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetAutoUnrealInsightsModeFlag::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetCumstomRaceTestConfig
// 0x0010 (0x0010 - 0x0000)
struct RaceTestUtils_GetCumstomRaceTestConfig final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetCumstomRaceTestConfig) == 0x000008, "Wrong alignment on RaceTestUtils_GetCumstomRaceTestConfig");
static_assert(sizeof(RaceTestUtils_GetCumstomRaceTestConfig) == 0x000010, "Wrong size on RaceTestUtils_GetCumstomRaceTestConfig");
static_assert(offsetof(RaceTestUtils_GetCumstomRaceTestConfig, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetCumstomRaceTestConfig::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetNoHitItemPhysiceLayerMask
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_GetNoHitItemPhysiceLayerMask final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetNoHitItemPhysiceLayerMask) == 0x000004, "Wrong alignment on RaceTestUtils_GetNoHitItemPhysiceLayerMask");
static_assert(sizeof(RaceTestUtils_GetNoHitItemPhysiceLayerMask) == 0x000004, "Wrong size on RaceTestUtils_GetNoHitItemPhysiceLayerMask");
static_assert(offsetof(RaceTestUtils_GetNoHitItemPhysiceLayerMask, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetNoHitItemPhysiceLayerMask::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetOverrideCamera
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_GetOverrideCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetOverrideCamera) == 0x000001, "Wrong alignment on RaceTestUtils_GetOverrideCamera");
static_assert(sizeof(RaceTestUtils_GetOverrideCamera) == 0x000001, "Wrong size on RaceTestUtils_GetOverrideCamera");
static_assert(offsetof(RaceTestUtils_GetOverrideCamera, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetOverrideCamera::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetOverrideCameraElevation
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetOverrideCameraElevation final
{
public:
	float                                         Elevation;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_GetOverrideCameraElevation) == 0x000004, "Wrong alignment on RaceTestUtils_GetOverrideCameraElevation");
static_assert(sizeof(RaceTestUtils_GetOverrideCameraElevation) == 0x000008, "Wrong size on RaceTestUtils_GetOverrideCameraElevation");
static_assert(offsetof(RaceTestUtils_GetOverrideCameraElevation, Elevation) == 0x000000, "Member 'RaceTestUtils_GetOverrideCameraElevation::Elevation' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_GetOverrideCameraElevation, ReturnValue) == 0x000004, "Member 'RaceTestUtils_GetOverrideCameraElevation::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetOverrideCameraOffset
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetOverrideCameraOffset final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_GetOverrideCameraOffset) == 0x000004, "Wrong alignment on RaceTestUtils_GetOverrideCameraOffset");
static_assert(sizeof(RaceTestUtils_GetOverrideCameraOffset) == 0x000008, "Wrong size on RaceTestUtils_GetOverrideCameraOffset");
static_assert(offsetof(RaceTestUtils_GetOverrideCameraOffset, Offset) == 0x000000, "Member 'RaceTestUtils_GetOverrideCameraOffset::Offset' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_GetOverrideCameraOffset, ReturnValue) == 0x000004, "Member 'RaceTestUtils_GetOverrideCameraOffset::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetOverrideCameraTargetY
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetOverrideCameraTargetY final
{
public:
	float                                         Target;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_GetOverrideCameraTargetY) == 0x000004, "Wrong alignment on RaceTestUtils_GetOverrideCameraTargetY");
static_assert(sizeof(RaceTestUtils_GetOverrideCameraTargetY) == 0x000008, "Wrong size on RaceTestUtils_GetOverrideCameraTargetY");
static_assert(offsetof(RaceTestUtils_GetOverrideCameraTargetY, Target) == 0x000000, "Member 'RaceTestUtils_GetOverrideCameraTargetY::Target' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_GetOverrideCameraTargetY, ReturnValue) == 0x000004, "Member 'RaceTestUtils_GetOverrideCameraTargetY::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetOverrideCameraTargetZ
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetOverrideCameraTargetZ final
{
public:
	float                                         Target;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_GetOverrideCameraTargetZ) == 0x000004, "Wrong alignment on RaceTestUtils_GetOverrideCameraTargetZ");
static_assert(sizeof(RaceTestUtils_GetOverrideCameraTargetZ) == 0x000008, "Wrong size on RaceTestUtils_GetOverrideCameraTargetZ");
static_assert(offsetof(RaceTestUtils_GetOverrideCameraTargetZ, Target) == 0x000000, "Member 'RaceTestUtils_GetOverrideCameraTargetZ::Target' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_GetOverrideCameraTargetZ, ReturnValue) == 0x000004, "Member 'RaceTestUtils_GetOverrideCameraTargetZ::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetOverrideCameraVFov
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetOverrideCameraVFov final
{
public:
	float                                         VFov;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_GetOverrideCameraVFov) == 0x000004, "Wrong alignment on RaceTestUtils_GetOverrideCameraVFov");
static_assert(sizeof(RaceTestUtils_GetOverrideCameraVFov) == 0x000008, "Wrong size on RaceTestUtils_GetOverrideCameraVFov");
static_assert(offsetof(RaceTestUtils_GetOverrideCameraVFov, VFov) == 0x000000, "Member 'RaceTestUtils_GetOverrideCameraVFov::VFov' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_GetOverrideCameraVFov, ReturnValue) == 0x000004, "Member 'RaceTestUtils_GetOverrideCameraVFov::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetOverridePathCamera
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_GetOverridePathCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetOverridePathCamera) == 0x000001, "Wrong alignment on RaceTestUtils_GetOverridePathCamera");
static_assert(sizeof(RaceTestUtils_GetOverridePathCamera) == 0x000001, "Wrong size on RaceTestUtils_GetOverridePathCamera");
static_assert(offsetof(RaceTestUtils_GetOverridePathCamera, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetOverridePathCamera::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetOverridePathCameraElevation
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetOverridePathCameraElevation final
{
public:
	float                                         Elevation;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_GetOverridePathCameraElevation) == 0x000004, "Wrong alignment on RaceTestUtils_GetOverridePathCameraElevation");
static_assert(sizeof(RaceTestUtils_GetOverridePathCameraElevation) == 0x000008, "Wrong size on RaceTestUtils_GetOverridePathCameraElevation");
static_assert(offsetof(RaceTestUtils_GetOverridePathCameraElevation, Elevation) == 0x000000, "Member 'RaceTestUtils_GetOverridePathCameraElevation::Elevation' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_GetOverridePathCameraElevation, ReturnValue) == 0x000004, "Member 'RaceTestUtils_GetOverridePathCameraElevation::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetOverridePathCameraOffset
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetOverridePathCameraOffset final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_GetOverridePathCameraOffset) == 0x000004, "Wrong alignment on RaceTestUtils_GetOverridePathCameraOffset");
static_assert(sizeof(RaceTestUtils_GetOverridePathCameraOffset) == 0x000008, "Wrong size on RaceTestUtils_GetOverridePathCameraOffset");
static_assert(offsetof(RaceTestUtils_GetOverridePathCameraOffset, Offset) == 0x000000, "Member 'RaceTestUtils_GetOverridePathCameraOffset::Offset' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_GetOverridePathCameraOffset, ReturnValue) == 0x000004, "Member 'RaceTestUtils_GetOverridePathCameraOffset::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetOverridePathCameraTargetY
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetOverridePathCameraTargetY final
{
public:
	float                                         Target;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_GetOverridePathCameraTargetY) == 0x000004, "Wrong alignment on RaceTestUtils_GetOverridePathCameraTargetY");
static_assert(sizeof(RaceTestUtils_GetOverridePathCameraTargetY) == 0x000008, "Wrong size on RaceTestUtils_GetOverridePathCameraTargetY");
static_assert(offsetof(RaceTestUtils_GetOverridePathCameraTargetY, Target) == 0x000000, "Member 'RaceTestUtils_GetOverridePathCameraTargetY::Target' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_GetOverridePathCameraTargetY, ReturnValue) == 0x000004, "Member 'RaceTestUtils_GetOverridePathCameraTargetY::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetOverridePathCameraTargetZ
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetOverridePathCameraTargetZ final
{
public:
	float                                         Target;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_GetOverridePathCameraTargetZ) == 0x000004, "Wrong alignment on RaceTestUtils_GetOverridePathCameraTargetZ");
static_assert(sizeof(RaceTestUtils_GetOverridePathCameraTargetZ) == 0x000008, "Wrong size on RaceTestUtils_GetOverridePathCameraTargetZ");
static_assert(offsetof(RaceTestUtils_GetOverridePathCameraTargetZ, Target) == 0x000000, "Member 'RaceTestUtils_GetOverridePathCameraTargetZ::Target' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_GetOverridePathCameraTargetZ, ReturnValue) == 0x000004, "Member 'RaceTestUtils_GetOverridePathCameraTargetZ::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetOverridePathCameraVFov
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetOverridePathCameraVFov final
{
public:
	float                                         VFov;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_GetOverridePathCameraVFov) == 0x000004, "Wrong alignment on RaceTestUtils_GetOverridePathCameraVFov");
static_assert(sizeof(RaceTestUtils_GetOverridePathCameraVFov) == 0x000008, "Wrong size on RaceTestUtils_GetOverridePathCameraVFov");
static_assert(offsetof(RaceTestUtils_GetOverridePathCameraVFov, VFov) == 0x000000, "Member 'RaceTestUtils_GetOverridePathCameraVFov::VFov' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_GetOverridePathCameraVFov, ReturnValue) == 0x000004, "Member 'RaceTestUtils_GetOverridePathCameraVFov::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetRaceLoadTestMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_GetRaceLoadTestMode final
{
public:
	ERaceLoadTestMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetRaceLoadTestMode) == 0x000001, "Wrong alignment on RaceTestUtils_GetRaceLoadTestMode");
static_assert(sizeof(RaceTestUtils_GetRaceLoadTestMode) == 0x000001, "Wrong size on RaceTestUtils_GetRaceLoadTestMode");
static_assert(offsetof(RaceTestUtils_GetRaceLoadTestMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetRaceLoadTestMode::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetRacerSetting
// 0x0030 (0x0030 - 0x0000)
struct RaceTestUtils_GetRacerSetting final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRaceTestRacerSetting                  Setting;                                           // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_GetRacerSetting) == 0x000008, "Wrong alignment on RaceTestUtils_GetRacerSetting");
static_assert(sizeof(RaceTestUtils_GetRacerSetting) == 0x000030, "Wrong size on RaceTestUtils_GetRacerSetting");
static_assert(offsetof(RaceTestUtils_GetRacerSetting, RacerIndex) == 0x000000, "Member 'RaceTestUtils_GetRacerSetting::RacerIndex' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_GetRacerSetting, Setting) == 0x000008, "Member 'RaceTestUtils_GetRacerSetting::Setting' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_GetRacerSetting, ReturnValue) == 0x000028, "Member 'RaceTestUtils_GetRacerSetting::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetRaceTestConfig
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetRaceTestConfig final
{
public:
	const class URaceTestConfig*                  ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetRaceTestConfig) == 0x000008, "Wrong alignment on RaceTestUtils_GetRaceTestConfig");
static_assert(sizeof(RaceTestUtils_GetRaceTestConfig) == 0x000008, "Wrong size on RaceTestUtils_GetRaceTestConfig");
static_assert(offsetof(RaceTestUtils_GetRaceTestConfig, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetRaceTestConfig::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetRaceTestConfigAccess
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetRaceTestConfigAccess final
{
public:
	class URaceTestConfig*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetRaceTestConfigAccess) == 0x000008, "Wrong alignment on RaceTestUtils_GetRaceTestConfigAccess");
static_assert(sizeof(RaceTestUtils_GetRaceTestConfigAccess) == 0x000008, "Wrong size on RaceTestUtils_GetRaceTestConfigAccess");
static_assert(offsetof(RaceTestUtils_GetRaceTestConfigAccess, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetRaceTestConfigAccess::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetRaceTestItemTableAsset
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_GetRaceTestItemTableAsset final
{
public:
	const class UDataTable*                       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetRaceTestItemTableAsset) == 0x000008, "Wrong alignment on RaceTestUtils_GetRaceTestItemTableAsset");
static_assert(sizeof(RaceTestUtils_GetRaceTestItemTableAsset) == 0x000008, "Wrong size on RaceTestUtils_GetRaceTestItemTableAsset");
static_assert(offsetof(RaceTestUtils_GetRaceTestItemTableAsset, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetRaceTestItemTableAsset::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetScreenNum
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_GetScreenNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetScreenNum) == 0x000004, "Wrong alignment on RaceTestUtils_GetScreenNum");
static_assert(sizeof(RaceTestUtils_GetScreenNum) == 0x000004, "Wrong size on RaceTestUtils_GetScreenNum");
static_assert(offsetof(RaceTestUtils_GetScreenNum, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetScreenNum::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.GetTagNameToDestroyActor
// 0x0010 (0x0010 - 0x0000)
struct RaceTestUtils_GetTagNameToDestroyActor final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_GetTagNameToDestroyActor) == 0x000008, "Wrong alignment on RaceTestUtils_GetTagNameToDestroyActor");
static_assert(sizeof(RaceTestUtils_GetTagNameToDestroyActor) == 0x000010, "Wrong size on RaceTestUtils_GetTagNameToDestroyActor");
static_assert(offsetof(RaceTestUtils_GetTagNameToDestroyActor, ReturnValue) == 0x000000, "Member 'RaceTestUtils_GetTagNameToDestroyActor::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsAutoCsvProfileMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsAutoCsvProfileMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsAutoCsvProfileMode) == 0x000001, "Wrong alignment on RaceTestUtils_IsAutoCsvProfileMode");
static_assert(sizeof(RaceTestUtils_IsAutoCsvProfileMode) == 0x000001, "Wrong size on RaceTestUtils_IsAutoCsvProfileMode");
static_assert(offsetof(RaceTestUtils_IsAutoCsvProfileMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsAutoCsvProfileMode::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsAutoDebugKibanaMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsAutoDebugKibanaMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsAutoDebugKibanaMode) == 0x000001, "Wrong alignment on RaceTestUtils_IsAutoDebugKibanaMode");
static_assert(sizeof(RaceTestUtils_IsAutoDebugKibanaMode) == 0x000001, "Wrong size on RaceTestUtils_IsAutoDebugKibanaMode");
static_assert(offsetof(RaceTestUtils_IsAutoDebugKibanaMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsAutoDebugKibanaMode::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsAutoDetailKibanaMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsAutoDetailKibanaMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsAutoDetailKibanaMode) == 0x000001, "Wrong alignment on RaceTestUtils_IsAutoDetailKibanaMode");
static_assert(sizeof(RaceTestUtils_IsAutoDetailKibanaMode) == 0x000001, "Wrong size on RaceTestUtils_IsAutoDetailKibanaMode");
static_assert(offsetof(RaceTestUtils_IsAutoDetailKibanaMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsAutoDetailKibanaMode::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsAutoKibanaMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsAutoKibanaMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsAutoKibanaMode) == 0x000001, "Wrong alignment on RaceTestUtils_IsAutoKibanaMode");
static_assert(sizeof(RaceTestUtils_IsAutoKibanaMode) == 0x000001, "Wrong size on RaceTestUtils_IsAutoKibanaMode");
static_assert(offsetof(RaceTestUtils_IsAutoKibanaMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsAutoKibanaMode::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsAutoProfileGpuMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsAutoProfileGpuMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsAutoProfileGpuMode) == 0x000001, "Wrong alignment on RaceTestUtils_IsAutoProfileGpuMode");
static_assert(sizeof(RaceTestUtils_IsAutoProfileGpuMode) == 0x000001, "Wrong size on RaceTestUtils_IsAutoProfileGpuMode");
static_assert(offsetof(RaceTestUtils_IsAutoProfileGpuMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsAutoProfileGpuMode::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsAutoUnrealInsightsMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsAutoUnrealInsightsMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsAutoUnrealInsightsMode) == 0x000001, "Wrong alignment on RaceTestUtils_IsAutoUnrealInsightsMode");
static_assert(sizeof(RaceTestUtils_IsAutoUnrealInsightsMode) == 0x000001, "Wrong size on RaceTestUtils_IsAutoUnrealInsightsMode");
static_assert(offsetof(RaceTestUtils_IsAutoUnrealInsightsMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsAutoUnrealInsightsMode::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsDisabledGameHighLoading
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsDisabledGameHighLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsDisabledGameHighLoading) == 0x000001, "Wrong alignment on RaceTestUtils_IsDisabledGameHighLoading");
static_assert(sizeof(RaceTestUtils_IsDisabledGameHighLoading) == 0x000001, "Wrong size on RaceTestUtils_IsDisabledGameHighLoading");
static_assert(offsetof(RaceTestUtils_IsDisabledGameHighLoading, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsDisabledGameHighLoading::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsEnableItemTableSynchro
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsEnableItemTableSynchro final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsEnableItemTableSynchro) == 0x000001, "Wrong alignment on RaceTestUtils_IsEnableItemTableSynchro");
static_assert(sizeof(RaceTestUtils_IsEnableItemTableSynchro) == 0x000001, "Wrong size on RaceTestUtils_IsEnableItemTableSynchro");
static_assert(offsetof(RaceTestUtils_IsEnableItemTableSynchro, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsEnableItemTableSynchro::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsFinalRaceLoadTest
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsFinalRaceLoadTest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsFinalRaceLoadTest) == 0x000001, "Wrong alignment on RaceTestUtils_IsFinalRaceLoadTest");
static_assert(sizeof(RaceTestUtils_IsFinalRaceLoadTest) == 0x000001, "Wrong size on RaceTestUtils_IsFinalRaceLoadTest");
static_assert(offsetof(RaceTestUtils_IsFinalRaceLoadTest, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsFinalRaceLoadTest::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsForceComRun
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_IsForceComRun final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_IsForceComRun) == 0x000004, "Wrong alignment on RaceTestUtils_IsForceComRun");
static_assert(sizeof(RaceTestUtils_IsForceComRun) == 0x000008, "Wrong size on RaceTestUtils_IsForceComRun");
static_assert(offsetof(RaceTestUtils_IsForceComRun, RacerIndex) == 0x000000, "Member 'RaceTestUtils_IsForceComRun::RacerIndex' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_IsForceComRun, ReturnValue) == 0x000004, "Member 'RaceTestUtils_IsForceComRun::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsNoBgmMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsNoBgmMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsNoBgmMode) == 0x000001, "Wrong alignment on RaceTestUtils_IsNoBgmMode");
static_assert(sizeof(RaceTestUtils_IsNoBgmMode) == 0x000001, "Wrong size on RaceTestUtils_IsNoBgmMode");
static_assert(offsetof(RaceTestUtils_IsNoBgmMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsNoBgmMode::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsNoCourseObject
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsNoCourseObject final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsNoCourseObject) == 0x000001, "Wrong alignment on RaceTestUtils_IsNoCourseObject");
static_assert(sizeof(RaceTestUtils_IsNoCourseObject) == 0x000001, "Wrong size on RaceTestUtils_IsNoCourseObject");
static_assert(offsetof(RaceTestUtils_IsNoCourseObject, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsNoCourseObject::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsNoGimmickObject
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsNoGimmickObject final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsNoGimmickObject) == 0x000001, "Wrong alignment on RaceTestUtils_IsNoGimmickObject");
static_assert(sizeof(RaceTestUtils_IsNoGimmickObject) == 0x000001, "Wrong size on RaceTestUtils_IsNoGimmickObject");
static_assert(offsetof(RaceTestUtils_IsNoGimmickObject, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsNoGimmickObject::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsNoHudMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsNoHudMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsNoHudMode) == 0x000001, "Wrong alignment on RaceTestUtils_IsNoHudMode");
static_assert(sizeof(RaceTestUtils_IsNoHudMode) == 0x000001, "Wrong size on RaceTestUtils_IsNoHudMode");
static_assert(offsetof(RaceTestUtils_IsNoHudMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsNoHudMode::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsPathCameraPawnMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsPathCameraPawnMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsPathCameraPawnMode) == 0x000001, "Wrong alignment on RaceTestUtils_IsPathCameraPawnMode");
static_assert(sizeof(RaceTestUtils_IsPathCameraPawnMode) == 0x000001, "Wrong size on RaceTestUtils_IsPathCameraPawnMode");
static_assert(offsetof(RaceTestUtils_IsPathCameraPawnMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsPathCameraPawnMode::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsPerformanceTestRun
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_IsPerformanceTestRun final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_IsPerformanceTestRun) == 0x000004, "Wrong alignment on RaceTestUtils_IsPerformanceTestRun");
static_assert(sizeof(RaceTestUtils_IsPerformanceTestRun) == 0x000008, "Wrong size on RaceTestUtils_IsPerformanceTestRun");
static_assert(offsetof(RaceTestUtils_IsPerformanceTestRun, RacerIndex) == 0x000000, "Member 'RaceTestUtils_IsPerformanceTestRun::RacerIndex' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_IsPerformanceTestRun, ReturnValue) == 0x000004, "Member 'RaceTestUtils_IsPerformanceTestRun::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsRaceLoadAutoTestMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsRaceLoadAutoTestMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsRaceLoadAutoTestMode) == 0x000001, "Wrong alignment on RaceTestUtils_IsRaceLoadAutoTestMode");
static_assert(sizeof(RaceTestUtils_IsRaceLoadAutoTestMode) == 0x000001, "Wrong size on RaceTestUtils_IsRaceLoadAutoTestMode");
static_assert(offsetof(RaceTestUtils_IsRaceLoadAutoTestMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsRaceLoadAutoTestMode::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsRaceTestMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsRaceTestMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsRaceTestMode) == 0x000001, "Wrong alignment on RaceTestUtils_IsRaceTestMode");
static_assert(sizeof(RaceTestUtils_IsRaceTestMode) == 0x000001, "Wrong size on RaceTestUtils_IsRaceTestMode");
static_assert(offsetof(RaceTestUtils_IsRaceTestMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsRaceTestMode::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsUseItemTable
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsUseItemTable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsUseItemTable) == 0x000001, "Wrong alignment on RaceTestUtils_IsUseItemTable");
static_assert(sizeof(RaceTestUtils_IsUseItemTable) == 0x000001, "Wrong size on RaceTestUtils_IsUseItemTable");
static_assert(offsetof(RaceTestUtils_IsUseItemTable, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsUseItemTable::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.OverrideDebugMenuRaceLoadTestMode
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_OverrideDebugMenuRaceLoadTestMode final
{
public:
	int32                                         Mode;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_OverrideDebugMenuRaceLoadTestMode) == 0x000004, "Wrong alignment on RaceTestUtils_OverrideDebugMenuRaceLoadTestMode");
static_assert(sizeof(RaceTestUtils_OverrideDebugMenuRaceLoadTestMode) == 0x000004, "Wrong size on RaceTestUtils_OverrideDebugMenuRaceLoadTestMode");
static_assert(offsetof(RaceTestUtils_OverrideDebugMenuRaceLoadTestMode, Mode) == 0x000000, "Member 'RaceTestUtils_OverrideDebugMenuRaceLoadTestMode::Mode' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SaveRaceLoadAutoTestResult
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_SaveRaceLoadAutoTestResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SaveRaceLoadAutoTestResult) == 0x000001, "Wrong alignment on RaceTestUtils_SaveRaceLoadAutoTestResult");
static_assert(sizeof(RaceTestUtils_SaveRaceLoadAutoTestResult) == 0x000001, "Wrong size on RaceTestUtils_SaveRaceLoadAutoTestResult");
static_assert(offsetof(RaceTestUtils_SaveRaceLoadAutoTestResult, ReturnValue) == 0x000000, "Member 'RaceTestUtils_SaveRaceLoadAutoTestResult::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetAutoCsvProfileModeFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_SetAutoCsvProfileModeFlag final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetAutoCsvProfileModeFlag) == 0x000001, "Wrong alignment on RaceTestUtils_SetAutoCsvProfileModeFlag");
static_assert(sizeof(RaceTestUtils_SetAutoCsvProfileModeFlag) == 0x000001, "Wrong size on RaceTestUtils_SetAutoCsvProfileModeFlag");
static_assert(offsetof(RaceTestUtils_SetAutoCsvProfileModeFlag, flag) == 0x000000, "Member 'RaceTestUtils_SetAutoCsvProfileModeFlag::flag' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetAutoDebugKibanaModeFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_SetAutoDebugKibanaModeFlag final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetAutoDebugKibanaModeFlag) == 0x000001, "Wrong alignment on RaceTestUtils_SetAutoDebugKibanaModeFlag");
static_assert(sizeof(RaceTestUtils_SetAutoDebugKibanaModeFlag) == 0x000001, "Wrong size on RaceTestUtils_SetAutoDebugKibanaModeFlag");
static_assert(offsetof(RaceTestUtils_SetAutoDebugKibanaModeFlag, flag) == 0x000000, "Member 'RaceTestUtils_SetAutoDebugKibanaModeFlag::flag' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetAutoDetailKibanaModeFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_SetAutoDetailKibanaModeFlag final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetAutoDetailKibanaModeFlag) == 0x000001, "Wrong alignment on RaceTestUtils_SetAutoDetailKibanaModeFlag");
static_assert(sizeof(RaceTestUtils_SetAutoDetailKibanaModeFlag) == 0x000001, "Wrong size on RaceTestUtils_SetAutoDetailKibanaModeFlag");
static_assert(offsetof(RaceTestUtils_SetAutoDetailKibanaModeFlag, flag) == 0x000000, "Member 'RaceTestUtils_SetAutoDetailKibanaModeFlag::flag' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetAutoKibanaModeFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_SetAutoKibanaModeFlag final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetAutoKibanaModeFlag) == 0x000001, "Wrong alignment on RaceTestUtils_SetAutoKibanaModeFlag");
static_assert(sizeof(RaceTestUtils_SetAutoKibanaModeFlag) == 0x000001, "Wrong size on RaceTestUtils_SetAutoKibanaModeFlag");
static_assert(offsetof(RaceTestUtils_SetAutoKibanaModeFlag, flag) == 0x000000, "Member 'RaceTestUtils_SetAutoKibanaModeFlag::flag' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetAutoProfileGpuModeFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_SetAutoProfileGpuModeFlag final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetAutoProfileGpuModeFlag) == 0x000001, "Wrong alignment on RaceTestUtils_SetAutoProfileGpuModeFlag");
static_assert(sizeof(RaceTestUtils_SetAutoProfileGpuModeFlag) == 0x000001, "Wrong size on RaceTestUtils_SetAutoProfileGpuModeFlag");
static_assert(offsetof(RaceTestUtils_SetAutoProfileGpuModeFlag, flag) == 0x000000, "Member 'RaceTestUtils_SetAutoProfileGpuModeFlag::flag' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetAutoUnrealInsightsModeFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_SetAutoUnrealInsightsModeFlag final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetAutoUnrealInsightsModeFlag) == 0x000001, "Wrong alignment on RaceTestUtils_SetAutoUnrealInsightsModeFlag");
static_assert(sizeof(RaceTestUtils_SetAutoUnrealInsightsModeFlag) == 0x000001, "Wrong size on RaceTestUtils_SetAutoUnrealInsightsModeFlag");
static_assert(offsetof(RaceTestUtils_SetAutoUnrealInsightsModeFlag, flag) == 0x000000, "Member 'RaceTestUtils_SetAutoUnrealInsightsModeFlag::flag' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetCustomRaceTestConfig
// 0x0010 (0x0010 - 0x0000)
struct RaceTestUtils_SetCustomRaceTestConfig final
{
public:
	class FString                                 RaceTestConfig;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetCustomRaceTestConfig) == 0x000008, "Wrong alignment on RaceTestUtils_SetCustomRaceTestConfig");
static_assert(sizeof(RaceTestUtils_SetCustomRaceTestConfig) == 0x000010, "Wrong size on RaceTestUtils_SetCustomRaceTestConfig");
static_assert(offsetof(RaceTestUtils_SetCustomRaceTestConfig, RaceTestConfig) == 0x000000, "Member 'RaceTestUtils_SetCustomRaceTestConfig::RaceTestConfig' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetDrivingCount
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetDrivingCount final
{
public:
	int32                                         DrivingCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetDrivingCount) == 0x000004, "Wrong alignment on RaceTestUtils_SetDrivingCount");
static_assert(sizeof(RaceTestUtils_SetDrivingCount) == 0x000004, "Wrong size on RaceTestUtils_SetDrivingCount");
static_assert(offsetof(RaceTestUtils_SetDrivingCount, DrivingCount) == 0x000000, "Member 'RaceTestUtils_SetDrivingCount::DrivingCount' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetLoadingTime
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetLoadingTime final
{
public:
	float                                         LoadingTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetLoadingTime) == 0x000004, "Wrong alignment on RaceTestUtils_SetLoadingTime");
static_assert(sizeof(RaceTestUtils_SetLoadingTime) == 0x000004, "Wrong size on RaceTestUtils_SetLoadingTime");
static_assert(offsetof(RaceTestUtils_SetLoadingTime, LoadingTime) == 0x000000, "Member 'RaceTestUtils_SetLoadingTime::LoadingTime' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetOverrideCamera
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_SetOverrideCamera final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetOverrideCamera) == 0x000001, "Wrong alignment on RaceTestUtils_SetOverrideCamera");
static_assert(sizeof(RaceTestUtils_SetOverrideCamera) == 0x000001, "Wrong size on RaceTestUtils_SetOverrideCamera");
static_assert(offsetof(RaceTestUtils_SetOverrideCamera, flag) == 0x000000, "Member 'RaceTestUtils_SetOverrideCamera::flag' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetOverrideCameraElevation
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetOverrideCameraElevation final
{
public:
	float                                         Elevation;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetOverrideCameraElevation) == 0x000004, "Wrong alignment on RaceTestUtils_SetOverrideCameraElevation");
static_assert(sizeof(RaceTestUtils_SetOverrideCameraElevation) == 0x000004, "Wrong size on RaceTestUtils_SetOverrideCameraElevation");
static_assert(offsetof(RaceTestUtils_SetOverrideCameraElevation, Elevation) == 0x000000, "Member 'RaceTestUtils_SetOverrideCameraElevation::Elevation' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetOverrideCameraOffset
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetOverrideCameraOffset final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetOverrideCameraOffset) == 0x000004, "Wrong alignment on RaceTestUtils_SetOverrideCameraOffset");
static_assert(sizeof(RaceTestUtils_SetOverrideCameraOffset) == 0x000004, "Wrong size on RaceTestUtils_SetOverrideCameraOffset");
static_assert(offsetof(RaceTestUtils_SetOverrideCameraOffset, Offset) == 0x000000, "Member 'RaceTestUtils_SetOverrideCameraOffset::Offset' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetOverrideCameraTargetY
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetOverrideCameraTargetY final
{
public:
	float                                         Target;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetOverrideCameraTargetY) == 0x000004, "Wrong alignment on RaceTestUtils_SetOverrideCameraTargetY");
static_assert(sizeof(RaceTestUtils_SetOverrideCameraTargetY) == 0x000004, "Wrong size on RaceTestUtils_SetOverrideCameraTargetY");
static_assert(offsetof(RaceTestUtils_SetOverrideCameraTargetY, Target) == 0x000000, "Member 'RaceTestUtils_SetOverrideCameraTargetY::Target' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetOverrideCameraTargetZ
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetOverrideCameraTargetZ final
{
public:
	float                                         Target;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetOverrideCameraTargetZ) == 0x000004, "Wrong alignment on RaceTestUtils_SetOverrideCameraTargetZ");
static_assert(sizeof(RaceTestUtils_SetOverrideCameraTargetZ) == 0x000004, "Wrong size on RaceTestUtils_SetOverrideCameraTargetZ");
static_assert(offsetof(RaceTestUtils_SetOverrideCameraTargetZ, Target) == 0x000000, "Member 'RaceTestUtils_SetOverrideCameraTargetZ::Target' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetOverrideCameraVFov
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetOverrideCameraVFov final
{
public:
	float                                         VFov;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetOverrideCameraVFov) == 0x000004, "Wrong alignment on RaceTestUtils_SetOverrideCameraVFov");
static_assert(sizeof(RaceTestUtils_SetOverrideCameraVFov) == 0x000004, "Wrong size on RaceTestUtils_SetOverrideCameraVFov");
static_assert(offsetof(RaceTestUtils_SetOverrideCameraVFov, VFov) == 0x000000, "Member 'RaceTestUtils_SetOverrideCameraVFov::VFov' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetOverridePathCamera
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_SetOverridePathCamera final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetOverridePathCamera) == 0x000001, "Wrong alignment on RaceTestUtils_SetOverridePathCamera");
static_assert(sizeof(RaceTestUtils_SetOverridePathCamera) == 0x000001, "Wrong size on RaceTestUtils_SetOverridePathCamera");
static_assert(offsetof(RaceTestUtils_SetOverridePathCamera, flag) == 0x000000, "Member 'RaceTestUtils_SetOverridePathCamera::flag' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetOverridePathCameraElevation
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetOverridePathCameraElevation final
{
public:
	float                                         Elevation;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetOverridePathCameraElevation) == 0x000004, "Wrong alignment on RaceTestUtils_SetOverridePathCameraElevation");
static_assert(sizeof(RaceTestUtils_SetOverridePathCameraElevation) == 0x000004, "Wrong size on RaceTestUtils_SetOverridePathCameraElevation");
static_assert(offsetof(RaceTestUtils_SetOverridePathCameraElevation, Elevation) == 0x000000, "Member 'RaceTestUtils_SetOverridePathCameraElevation::Elevation' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetOverridePathCameraOffset
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetOverridePathCameraOffset final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetOverridePathCameraOffset) == 0x000004, "Wrong alignment on RaceTestUtils_SetOverridePathCameraOffset");
static_assert(sizeof(RaceTestUtils_SetOverridePathCameraOffset) == 0x000004, "Wrong size on RaceTestUtils_SetOverridePathCameraOffset");
static_assert(offsetof(RaceTestUtils_SetOverridePathCameraOffset, Offset) == 0x000000, "Member 'RaceTestUtils_SetOverridePathCameraOffset::Offset' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetOverridePathCameraTargetY
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetOverridePathCameraTargetY final
{
public:
	float                                         Target;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetOverridePathCameraTargetY) == 0x000004, "Wrong alignment on RaceTestUtils_SetOverridePathCameraTargetY");
static_assert(sizeof(RaceTestUtils_SetOverridePathCameraTargetY) == 0x000004, "Wrong size on RaceTestUtils_SetOverridePathCameraTargetY");
static_assert(offsetof(RaceTestUtils_SetOverridePathCameraTargetY, Target) == 0x000000, "Member 'RaceTestUtils_SetOverridePathCameraTargetY::Target' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetOverridePathCameraTargetZ
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetOverridePathCameraTargetZ final
{
public:
	float                                         Target;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetOverridePathCameraTargetZ) == 0x000004, "Wrong alignment on RaceTestUtils_SetOverridePathCameraTargetZ");
static_assert(sizeof(RaceTestUtils_SetOverridePathCameraTargetZ) == 0x000004, "Wrong size on RaceTestUtils_SetOverridePathCameraTargetZ");
static_assert(offsetof(RaceTestUtils_SetOverridePathCameraTargetZ, Target) == 0x000000, "Member 'RaceTestUtils_SetOverridePathCameraTargetZ::Target' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetOverridePathCameraVFov
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetOverridePathCameraVFov final
{
public:
	float                                         VFov;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetOverridePathCameraVFov) == 0x000004, "Wrong alignment on RaceTestUtils_SetOverridePathCameraVFov");
static_assert(sizeof(RaceTestUtils_SetOverridePathCameraVFov) == 0x000004, "Wrong size on RaceTestUtils_SetOverridePathCameraVFov");
static_assert(offsetof(RaceTestUtils_SetOverridePathCameraVFov, VFov) == 0x000000, "Member 'RaceTestUtils_SetOverridePathCameraVFov::VFov' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetPathCameraPawnMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_SetPathCameraPawnMode final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetPathCameraPawnMode) == 0x000001, "Wrong alignment on RaceTestUtils_SetPathCameraPawnMode");
static_assert(sizeof(RaceTestUtils_SetPathCameraPawnMode) == 0x000001, "Wrong size on RaceTestUtils_SetPathCameraPawnMode");
static_assert(offsetof(RaceTestUtils_SetPathCameraPawnMode, flag) == 0x000000, "Member 'RaceTestUtils_SetPathCameraPawnMode::flag' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetRaceLoadTestCountMax
// 0x0004 (0x0004 - 0x0000)
struct RaceTestUtils_SetRaceLoadTestCountMax final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetRaceLoadTestCountMax) == 0x000004, "Wrong alignment on RaceTestUtils_SetRaceLoadTestCountMax");
static_assert(sizeof(RaceTestUtils_SetRaceLoadTestCountMax) == 0x000004, "Wrong size on RaceTestUtils_SetRaceLoadTestCountMax");
static_assert(offsetof(RaceTestUtils_SetRaceLoadTestCountMax, Count) == 0x000000, "Member 'RaceTestUtils_SetRaceLoadTestCountMax::Count' has a wrong offset!");

// Function UnionRun.RaceTestUtils.SetTagNameToDestroyActor
// 0x0010 (0x0010 - 0x0000)
struct RaceTestUtils_SetTagNameToDestroyActor final
{
public:
	class FString                                 TagName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_SetTagNameToDestroyActor) == 0x000008, "Wrong alignment on RaceTestUtils_SetTagNameToDestroyActor");
static_assert(sizeof(RaceTestUtils_SetTagNameToDestroyActor) == 0x000010, "Wrong size on RaceTestUtils_SetTagNameToDestroyActor");
static_assert(offsetof(RaceTestUtils_SetTagNameToDestroyActor, TagName) == 0x000000, "Member 'RaceTestUtils_SetTagNameToDestroyActor::TagName' has a wrong offset!");

// Function UnionRun.RaceTestUtils.StartAutoCsvProfile
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_StartAutoCsvProfile final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_StartAutoCsvProfile) == 0x000008, "Wrong alignment on RaceTestUtils_StartAutoCsvProfile");
static_assert(sizeof(RaceTestUtils_StartAutoCsvProfile) == 0x000008, "Wrong size on RaceTestUtils_StartAutoCsvProfile");
static_assert(offsetof(RaceTestUtils_StartAutoCsvProfile, PC) == 0x000000, "Member 'RaceTestUtils_StartAutoCsvProfile::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.StartAutoKibana
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_StartAutoKibana final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_StartAutoKibana) == 0x000008, "Wrong alignment on RaceTestUtils_StartAutoKibana");
static_assert(sizeof(RaceTestUtils_StartAutoKibana) == 0x000008, "Wrong size on RaceTestUtils_StartAutoKibana");
static_assert(offsetof(RaceTestUtils_StartAutoKibana, PC) == 0x000000, "Member 'RaceTestUtils_StartAutoKibana::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.StartAutoProfileGpu
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_StartAutoProfileGpu final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_StartAutoProfileGpu) == 0x000008, "Wrong alignment on RaceTestUtils_StartAutoProfileGpu");
static_assert(sizeof(RaceTestUtils_StartAutoProfileGpu) == 0x000008, "Wrong size on RaceTestUtils_StartAutoProfileGpu");
static_assert(offsetof(RaceTestUtils_StartAutoProfileGpu, PC) == 0x000000, "Member 'RaceTestUtils_StartAutoProfileGpu::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.StartAutoUnrealInsights
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_StartAutoUnrealInsights final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_StartAutoUnrealInsights) == 0x000008, "Wrong alignment on RaceTestUtils_StartAutoUnrealInsights");
static_assert(sizeof(RaceTestUtils_StartAutoUnrealInsights) == 0x000008, "Wrong size on RaceTestUtils_StartAutoUnrealInsights");
static_assert(offsetof(RaceTestUtils_StartAutoUnrealInsights, PC) == 0x000000, "Member 'RaceTestUtils_StartAutoUnrealInsights::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.StartRaceLoadTest
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_StartRaceLoadTest final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_StartRaceLoadTest) == 0x000008, "Wrong alignment on RaceTestUtils_StartRaceLoadTest");
static_assert(sizeof(RaceTestUtils_StartRaceLoadTest) == 0x000008, "Wrong size on RaceTestUtils_StartRaceLoadTest");
static_assert(offsetof(RaceTestUtils_StartRaceLoadTest, PC) == 0x000000, "Member 'RaceTestUtils_StartRaceLoadTest::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.StartRaceTest
// 0x0008 (0x0008 - 0x0000)
struct RaceTestUtils_StartRaceTest final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_StartRaceTest) == 0x000008, "Wrong alignment on RaceTestUtils_StartRaceTest");
static_assert(sizeof(RaceTestUtils_StartRaceTest) == 0x000008, "Wrong size on RaceTestUtils_StartRaceTest");
static_assert(offsetof(RaceTestUtils_StartRaceTest, PC) == 0x000000, "Member 'RaceTestUtils_StartRaceTest::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.TickProfileGpuAndScreenshot
// 0x0010 (0x0010 - 0x0000)
struct RaceTestUtils_TickProfileGpuAndScreenshot final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PC;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_TickProfileGpuAndScreenshot) == 0x000008, "Wrong alignment on RaceTestUtils_TickProfileGpuAndScreenshot");
static_assert(sizeof(RaceTestUtils_TickProfileGpuAndScreenshot) == 0x000010, "Wrong size on RaceTestUtils_TickProfileGpuAndScreenshot");
static_assert(offsetof(RaceTestUtils_TickProfileGpuAndScreenshot, DeltaTime) == 0x000000, "Member 'RaceTestUtils_TickProfileGpuAndScreenshot::DeltaTime' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_TickProfileGpuAndScreenshot, PC) == 0x000008, "Member 'RaceTestUtils_TickProfileGpuAndScreenshot::PC' has a wrong offset!");

// Function UnionRun.RaceTestUtils.UpdateRaceLoadAutoTest
// 0x0018 (0x0018 - 0x0000)
struct RaceTestUtils_UpdateRaceLoadAutoTest final
{
public:
	TArray<EStageId>                              OpenStageIDs;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceTestUtils_UpdateRaceLoadAutoTest) == 0x000008, "Wrong alignment on RaceTestUtils_UpdateRaceLoadAutoTest");
static_assert(sizeof(RaceTestUtils_UpdateRaceLoadAutoTest) == 0x000018, "Wrong size on RaceTestUtils_UpdateRaceLoadAutoTest");
static_assert(offsetof(RaceTestUtils_UpdateRaceLoadAutoTest, OpenStageIDs) == 0x000000, "Member 'RaceTestUtils_UpdateRaceLoadAutoTest::OpenStageIDs' has a wrong offset!");
static_assert(offsetof(RaceTestUtils_UpdateRaceLoadAutoTest, ReturnValue) == 0x000010, "Member 'RaceTestUtils_UpdateRaceLoadAutoTest::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceTestUtils.IsCustomRaceTestAutoConfigMode
// 0x0001 (0x0001 - 0x0000)
struct RaceTestUtils_IsCustomRaceTestAutoConfigMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceTestUtils_IsCustomRaceTestAutoConfigMode) == 0x000001, "Wrong alignment on RaceTestUtils_IsCustomRaceTestAutoConfigMode");
static_assert(sizeof(RaceTestUtils_IsCustomRaceTestAutoConfigMode) == 0x000001, "Wrong size on RaceTestUtils_IsCustomRaceTestAutoConfigMode");
static_assert(offsetof(RaceTestUtils_IsCustomRaceTestAutoConfigMode, ReturnValue) == 0x000000, "Member 'RaceTestUtils_IsCustomRaceTestAutoConfigMode::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.AddRaceCustomParam
// 0x0014 (0x0014 - 0x0000)
struct UnionRacerStatusObject_AddRaceCustomParam final
{
public:
	struct FUnionRaceCustomParam                  InRaceCustomParam;                                 // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_AddRaceCustomParam) == 0x000004, "Wrong alignment on UnionRacerStatusObject_AddRaceCustomParam");
static_assert(sizeof(UnionRacerStatusObject_AddRaceCustomParam) == 0x000014, "Wrong size on UnionRacerStatusObject_AddRaceCustomParam");
static_assert(offsetof(UnionRacerStatusObject_AddRaceCustomParam, InRaceCustomParam) == 0x000000, "Member 'UnionRacerStatusObject_AddRaceCustomParam::InRaceCustomParam' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.AddRunningDistance
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_AddRunningDistance final
{
public:
	float                                         dist;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_AddRunningDistance) == 0x000004, "Wrong alignment on UnionRacerStatusObject_AddRunningDistance");
static_assert(sizeof(UnionRacerStatusObject_AddRunningDistance) == 0x000004, "Wrong size on UnionRacerStatusObject_AddRunningDistance");
static_assert(offsetof(UnionRacerStatusObject_AddRunningDistance, dist) == 0x000000, "Member 'UnionRacerStatusObject_AddRunningDistance::dist' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetAppCurrentDomainPosition
// 0x0018 (0x0018 - 0x0000)
struct UnionRacerStatusObject_GetAppCurrentDomainPosition final
{
public:
	struct FVector                                OutAppCurrentDomainPosition;                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetAppCurrentDomainPosition) == 0x000008, "Wrong alignment on UnionRacerStatusObject_GetAppCurrentDomainPosition");
static_assert(sizeof(UnionRacerStatusObject_GetAppCurrentDomainPosition) == 0x000018, "Wrong size on UnionRacerStatusObject_GetAppCurrentDomainPosition");
static_assert(offsetof(UnionRacerStatusObject_GetAppCurrentDomainPosition, OutAppCurrentDomainPosition) == 0x000000, "Member 'UnionRacerStatusObject_GetAppCurrentDomainPosition::OutAppCurrentDomainPosition' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetAppDomainGameCameraInfos
// 0x0010 (0x0010 - 0x0000)
struct UnionRacerStatusObject_GetAppDomainGameCameraInfos final
{
public:
	TArray<class UUnionGameCameraInfo*>           OutAppDomainGameCameraInfos;                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetAppDomainGameCameraInfos) == 0x000008, "Wrong alignment on UnionRacerStatusObject_GetAppDomainGameCameraInfos");
static_assert(sizeof(UnionRacerStatusObject_GetAppDomainGameCameraInfos) == 0x000010, "Wrong size on UnionRacerStatusObject_GetAppDomainGameCameraInfos");
static_assert(offsetof(UnionRacerStatusObject_GetAppDomainGameCameraInfos, OutAppDomainGameCameraInfos) == 0x000000, "Member 'UnionRacerStatusObject_GetAppDomainGameCameraInfos::OutAppDomainGameCameraInfos' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetAppDomainVehicleModelInfos
// 0x0010 (0x0010 - 0x0000)
struct UnionRacerStatusObject_GetAppDomainVehicleModelInfos final
{
public:
	TArray<class UUnionVehicleModelInfo*>         OutAppDomainVehicleModelInfos;                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetAppDomainVehicleModelInfos) == 0x000008, "Wrong alignment on UnionRacerStatusObject_GetAppDomainVehicleModelInfos");
static_assert(sizeof(UnionRacerStatusObject_GetAppDomainVehicleModelInfos) == 0x000010, "Wrong size on UnionRacerStatusObject_GetAppDomainVehicleModelInfos");
static_assert(offsetof(UnionRacerStatusObject_GetAppDomainVehicleModelInfos, OutAppDomainVehicleModelInfos) == 0x000000, "Member 'UnionRacerStatusObject_GetAppDomainVehicleModelInfos::OutAppDomainVehicleModelInfos' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetAppLastDomainPosition
// 0x0018 (0x0018 - 0x0000)
struct UnionRacerStatusObject_GetAppLastDomainPosition final
{
public:
	struct FVector                                OutAppLastDomainPosition;                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetAppLastDomainPosition) == 0x000008, "Wrong alignment on UnionRacerStatusObject_GetAppLastDomainPosition");
static_assert(sizeof(UnionRacerStatusObject_GetAppLastDomainPosition) == 0x000018, "Wrong size on UnionRacerStatusObject_GetAppLastDomainPosition");
static_assert(offsetof(UnionRacerStatusObject_GetAppLastDomainPosition, OutAppLastDomainPosition) == 0x000000, "Member 'UnionRacerStatusObject_GetAppLastDomainPosition::OutAppLastDomainPosition' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetCurrentDomainIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetCurrentDomainIndex final
{
public:
	int32                                         OutCurrentDomainIndex;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetCurrentDomainIndex) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetCurrentDomainIndex");
static_assert(sizeof(UnionRacerStatusObject_GetCurrentDomainIndex) == 0x000004, "Wrong size on UnionRacerStatusObject_GetCurrentDomainIndex");
static_assert(offsetof(UnionRacerStatusObject_GetCurrentDomainIndex, OutCurrentDomainIndex) == 0x000000, "Member 'UnionRacerStatusObject_GetCurrentDomainIndex::OutCurrentDomainIndex' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetCurrentDomainNumber
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetCurrentDomainNumber final
{
public:
	int32                                         OutCurrentDomainNumber;                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetCurrentDomainNumber) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetCurrentDomainNumber");
static_assert(sizeof(UnionRacerStatusObject_GetCurrentDomainNumber) == 0x000004, "Wrong size on UnionRacerStatusObject_GetCurrentDomainNumber");
static_assert(offsetof(UnionRacerStatusObject_GetCurrentDomainNumber, OutCurrentDomainNumber) == 0x000000, "Member 'UnionRacerStatusObject_GetCurrentDomainNumber::OutCurrentDomainNumber' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetCurrentElapsedRatio
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetCurrentElapsedRatio final
{
public:
	float                                         OutElapsedRatio;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetCurrentElapsedRatio) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetCurrentElapsedRatio");
static_assert(sizeof(UnionRacerStatusObject_GetCurrentElapsedRatio) == 0x000004, "Wrong size on UnionRacerStatusObject_GetCurrentElapsedRatio");
static_assert(offsetof(UnionRacerStatusObject_GetCurrentElapsedRatio, OutElapsedRatio) == 0x000000, "Member 'UnionRacerStatusObject_GetCurrentElapsedRatio::OutElapsedRatio' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetCurrentLapCount
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetCurrentLapCount final
{
public:
	int32                                         OutCurrentLapCount;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetCurrentLapCount) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetCurrentLapCount");
static_assert(sizeof(UnionRacerStatusObject_GetCurrentLapCount) == 0x000004, "Wrong size on UnionRacerStatusObject_GetCurrentLapCount");
static_assert(offsetof(UnionRacerStatusObject_GetCurrentLapCount, OutCurrentLapCount) == 0x000000, "Member 'UnionRacerStatusObject_GetCurrentLapCount::OutCurrentLapCount' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetCurrentWorldOffset
// 0x0018 (0x0018 - 0x0000)
struct UnionRacerStatusObject_GetCurrentWorldOffset final
{
public:
	struct FVector                                OutWorldOffset;                                    // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetCurrentWorldOffset) == 0x000008, "Wrong alignment on UnionRacerStatusObject_GetCurrentWorldOffset");
static_assert(sizeof(UnionRacerStatusObject_GetCurrentWorldOffset) == 0x000018, "Wrong size on UnionRacerStatusObject_GetCurrentWorldOffset");
static_assert(offsetof(UnionRacerStatusObject_GetCurrentWorldOffset, OutWorldOffset) == 0x000000, "Member 'UnionRacerStatusObject_GetCurrentWorldOffset::OutWorldOffset' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetEngineStatus
// 0x0008 (0x0008 - 0x0000)
struct UnionRacerStatusObject_GetEngineStatus final
{
public:
	float                                         EngineRPM;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineMaxRPM;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetEngineStatus) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetEngineStatus");
static_assert(sizeof(UnionRacerStatusObject_GetEngineStatus) == 0x000008, "Wrong size on UnionRacerStatusObject_GetEngineStatus");
static_assert(offsetof(UnionRacerStatusObject_GetEngineStatus, EngineRPM) == 0x000000, "Member 'UnionRacerStatusObject_GetEngineStatus::EngineRPM' has a wrong offset!");
static_assert(offsetof(UnionRacerStatusObject_GetEngineStatus, EngineMaxRPM) == 0x000004, "Member 'UnionRacerStatusObject_GetEngineStatus::EngineMaxRPM' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetPlayerControllerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetPlayerControllerIndex final
{
public:
	int32                                         OutPlayerControllerIndex;                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetPlayerControllerIndex) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetPlayerControllerIndex");
static_assert(sizeof(UnionRacerStatusObject_GetPlayerControllerIndex) == 0x000004, "Wrong size on UnionRacerStatusObject_GetPlayerControllerIndex");
static_assert(offsetof(UnionRacerStatusObject_GetPlayerControllerIndex, OutPlayerControllerIndex) == 0x000000, "Member 'UnionRacerStatusObject_GetPlayerControllerIndex::OutPlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetRacePlayerStatus
// 0x0008 (0x0008 - 0x0000)
struct UnionRacerStatusObject_GetRacePlayerStatus final
{
public:
	class UUnionRacePlayerStatus*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetRacePlayerStatus) == 0x000008, "Wrong alignment on UnionRacerStatusObject_GetRacePlayerStatus");
static_assert(sizeof(UnionRacerStatusObject_GetRacePlayerStatus) == 0x000008, "Wrong size on UnionRacerStatusObject_GetRacePlayerStatus");
static_assert(offsetof(UnionRacerStatusObject_GetRacePlayerStatus, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetRacePlayerStatus::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetRacerIndex final
{
public:
	int32                                         OutRacerIndex;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetRacerIndex) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetRacerIndex");
static_assert(sizeof(UnionRacerStatusObject_GetRacerIndex) == 0x000004, "Wrong size on UnionRacerStatusObject_GetRacerIndex");
static_assert(offsetof(UnionRacerStatusObject_GetRacerIndex, OutRacerIndex) == 0x000000, "Member 'UnionRacerStatusObject_GetRacerIndex::OutRacerIndex' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetRacerName
// 0x0010 (0x0010 - 0x0000)
struct UnionRacerStatusObject_GetRacerName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetRacerName) == 0x000008, "Wrong alignment on UnionRacerStatusObject_GetRacerName");
static_assert(sizeof(UnionRacerStatusObject_GetRacerName) == 0x000010, "Wrong size on UnionRacerStatusObject_GetRacerName");
static_assert(offsetof(UnionRacerStatusObject_GetRacerName, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetRacerName::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetRingCount
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetRingCount final
{
public:
	int32                                         OutRingCount;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetRingCount) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetRingCount");
static_assert(sizeof(UnionRacerStatusObject_GetRingCount) == 0x000004, "Wrong size on UnionRacerStatusObject_GetRingCount");
static_assert(offsetof(UnionRacerStatusObject_GetRingCount, OutRingCount) == 0x000000, "Member 'UnionRacerStatusObject_GetRingCount::OutRingCount' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetRivalRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetRivalRacerIndex final
{
public:
	int32                                         OutRacerIndex;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetRivalRacerIndex) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetRivalRacerIndex");
static_assert(sizeof(UnionRacerStatusObject_GetRivalRacerIndex) == 0x000004, "Wrong size on UnionRacerStatusObject_GetRivalRacerIndex");
static_assert(offsetof(UnionRacerStatusObject_GetRivalRacerIndex, OutRacerIndex) == 0x000000, "Member 'UnionRacerStatusObject_GetRivalRacerIndex::OutRacerIndex' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetRivalRacersIndexArray
// 0x0010 (0x0010 - 0x0000)
struct UnionRacerStatusObject_GetRivalRacersIndexArray final
{
public:
	TArray<int32>                                 OutRacersIndexArray;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetRivalRacersIndexArray) == 0x000008, "Wrong alignment on UnionRacerStatusObject_GetRivalRacersIndexArray");
static_assert(sizeof(UnionRacerStatusObject_GetRivalRacersIndexArray) == 0x000010, "Wrong size on UnionRacerStatusObject_GetRivalRacersIndexArray");
static_assert(offsetof(UnionRacerStatusObject_GetRivalRacersIndexArray, OutRacersIndexArray) == 0x000000, "Member 'UnionRacerStatusObject_GetRivalRacersIndexArray::OutRacersIndexArray' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetTestParam
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetTestParam final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetTestParam) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetTestParam");
static_assert(sizeof(UnionRacerStatusObject_GetTestParam) == 0x000004, "Wrong size on UnionRacerStatusObject_GetTestParam");
static_assert(offsetof(UnionRacerStatusObject_GetTestParam, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetTestParam::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetVehicleBodyGStatus
// 0x000C (0x000C - 0x0000)
struct UnionRacerStatusObject_GetVehicleBodyGStatus final
{
public:
	float                                         BodyG;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyGd;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyGr;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetVehicleBodyGStatus) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetVehicleBodyGStatus");
static_assert(sizeof(UnionRacerStatusObject_GetVehicleBodyGStatus) == 0x00000C, "Wrong size on UnionRacerStatusObject_GetVehicleBodyGStatus");
static_assert(offsetof(UnionRacerStatusObject_GetVehicleBodyGStatus, BodyG) == 0x000000, "Member 'UnionRacerStatusObject_GetVehicleBodyGStatus::BodyG' has a wrong offset!");
static_assert(offsetof(UnionRacerStatusObject_GetVehicleBodyGStatus, BodyGd) == 0x000004, "Member 'UnionRacerStatusObject_GetVehicleBodyGStatus::BodyGd' has a wrong offset!");
static_assert(offsetof(UnionRacerStatusObject_GetVehicleBodyGStatus, BodyGr) == 0x000008, "Member 'UnionRacerStatusObject_GetVehicleBodyGStatus::BodyGr' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetVehicleMoveSpeedStatus
// 0x0008 (0x0008 - 0x0000)
struct UnionRacerStatusObject_GetVehicleMoveSpeedStatus final
{
public:
	float                                         SpeedMPH;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedKPH;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetVehicleMoveSpeedStatus) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetVehicleMoveSpeedStatus");
static_assert(sizeof(UnionRacerStatusObject_GetVehicleMoveSpeedStatus) == 0x000008, "Wrong size on UnionRacerStatusObject_GetVehicleMoveSpeedStatus");
static_assert(offsetof(UnionRacerStatusObject_GetVehicleMoveSpeedStatus, SpeedMPH) == 0x000000, "Member 'UnionRacerStatusObject_GetVehicleMoveSpeedStatus::SpeedMPH' has a wrong offset!");
static_assert(offsetof(UnionRacerStatusObject_GetVehicleMoveSpeedStatus, SpeedKPH) == 0x000004, "Member 'UnionRacerStatusObject_GetVehicleMoveSpeedStatus::SpeedKPH' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.RemoveDamage
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_RemoveDamage final
{
public:
	ERacerDamageType                              DamageType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_RemoveDamage) == 0x000001, "Wrong alignment on UnionRacerStatusObject_RemoveDamage");
static_assert(sizeof(UnionRacerStatusObject_RemoveDamage) == 0x000001, "Wrong size on UnionRacerStatusObject_RemoveDamage");
static_assert(offsetof(UnionRacerStatusObject_RemoveDamage, DamageType) == 0x000000, "Member 'UnionRacerStatusObject_RemoveDamage::DamageType' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.RequestBackCamera
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_RequestBackCamera final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_RequestBackCamera) == 0x000001, "Wrong alignment on UnionRacerStatusObject_RequestBackCamera");
static_assert(sizeof(UnionRacerStatusObject_RequestBackCamera) == 0x000001, "Wrong size on UnionRacerStatusObject_RequestBackCamera");
static_assert(offsetof(UnionRacerStatusObject_RequestBackCamera, flag) == 0x000000, "Member 'UnionRacerStatusObject_RequestBackCamera::flag' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetAirTrickAssistEnabled
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetAirTrickAssistEnabled final
{
public:
	bool                                          bInNewValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetAirTrickAssistEnabled) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetAirTrickAssistEnabled");
static_assert(sizeof(UnionRacerStatusObject_SetAirTrickAssistEnabled) == 0x000001, "Wrong size on UnionRacerStatusObject_SetAirTrickAssistEnabled");
static_assert(offsetof(UnionRacerStatusObject_SetAirTrickAssistEnabled, bInNewValue) == 0x000000, "Member 'UnionRacerStatusObject_SetAirTrickAssistEnabled::bInNewValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetAutoAcceleratorEnabled
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetAutoAcceleratorEnabled final
{
public:
	bool                                          bInNewValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetAutoAcceleratorEnabled) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetAutoAcceleratorEnabled");
static_assert(sizeof(UnionRacerStatusObject_SetAutoAcceleratorEnabled) == 0x000001, "Wrong size on UnionRacerStatusObject_SetAutoAcceleratorEnabled");
static_assert(offsetof(UnionRacerStatusObject_SetAutoAcceleratorEnabled, bInNewValue) == 0x000000, "Member 'UnionRacerStatusObject_SetAutoAcceleratorEnabled::bInNewValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetClushGimmick
// 0x0068 (0x0068 - 0x0000)
struct UnionRacerStatusObject_SetClushGimmick final
{
public:
	struct FAttackedInfo                          AttackedInfo;                                      // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetClushGimmick) == 0x000008, "Wrong alignment on UnionRacerStatusObject_SetClushGimmick");
static_assert(sizeof(UnionRacerStatusObject_SetClushGimmick) == 0x000068, "Wrong size on UnionRacerStatusObject_SetClushGimmick");
static_assert(offsetof(UnionRacerStatusObject_SetClushGimmick, AttackedInfo) == 0x000000, "Member 'UnionRacerStatusObject_SetClushGimmick::AttackedInfo' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetCrossplayPlatform
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetCrossplayPlatform final
{
public:
	ECrossplayPlatform                            InPlatform;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetCrossplayPlatform) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetCrossplayPlatform");
static_assert(sizeof(UnionRacerStatusObject_SetCrossplayPlatform) == 0x000001, "Wrong size on UnionRacerStatusObject_SetCrossplayPlatform");
static_assert(offsetof(UnionRacerStatusObject_SetCrossplayPlatform, InPlatform) == 0x000000, "Member 'UnionRacerStatusObject_SetCrossplayPlatform::InPlatform' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetCurrentDomainIndex
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetCurrentDomainIndex final
{
public:
	EDomainIndex                                  InCurrentDomainIndex;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetCurrentDomainIndex) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetCurrentDomainIndex");
static_assert(sizeof(UnionRacerStatusObject_SetCurrentDomainIndex) == 0x000001, "Wrong size on UnionRacerStatusObject_SetCurrentDomainIndex");
static_assert(offsetof(UnionRacerStatusObject_SetCurrentDomainIndex, InCurrentDomainIndex) == 0x000000, "Member 'UnionRacerStatusObject_SetCurrentDomainIndex::InCurrentDomainIndex' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetCurrentDomainNumber
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetCurrentDomainNumber final
{
public:
	EDomainNumber                                 InCurrentDomainNumber;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetCurrentDomainNumber) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetCurrentDomainNumber");
static_assert(sizeof(UnionRacerStatusObject_SetCurrentDomainNumber) == 0x000001, "Wrong size on UnionRacerStatusObject_SetCurrentDomainNumber");
static_assert(offsetof(UnionRacerStatusObject_SetCurrentDomainNumber, InCurrentDomainNumber) == 0x000000, "Member 'UnionRacerStatusObject_SetCurrentDomainNumber::InCurrentDomainNumber' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetCurrentLapCount
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_SetCurrentLapCount final
{
public:
	int32                                         InCurrentLapCount;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetCurrentLapCount) == 0x000004, "Wrong alignment on UnionRacerStatusObject_SetCurrentLapCount");
static_assert(sizeof(UnionRacerStatusObject_SetCurrentLapCount) == 0x000004, "Wrong size on UnionRacerStatusObject_SetCurrentLapCount");
static_assert(offsetof(UnionRacerStatusObject_SetCurrentLapCount, InCurrentLapCount) == 0x000000, "Member 'UnionRacerStatusObject_SetCurrentLapCount::InCurrentLapCount' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetCurrentWorldOffset
// 0x0018 (0x0018 - 0x0000)
struct UnionRacerStatusObject_SetCurrentWorldOffset final
{
public:
	struct FVector                                InWorldOffset;                                     // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetCurrentWorldOffset) == 0x000008, "Wrong alignment on UnionRacerStatusObject_SetCurrentWorldOffset");
static_assert(sizeof(UnionRacerStatusObject_SetCurrentWorldOffset) == 0x000018, "Wrong size on UnionRacerStatusObject_SetCurrentWorldOffset");
static_assert(offsetof(UnionRacerStatusObject_SetCurrentWorldOffset, InWorldOffset) == 0x000000, "Member 'UnionRacerStatusObject_SetCurrentWorldOffset::InWorldOffset' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetDriverId
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetDriverId final
{
public:
	EDriverId                                     InDriverId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetDriverId) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetDriverId");
static_assert(sizeof(UnionRacerStatusObject_SetDriverId) == 0x000001, "Wrong size on UnionRacerStatusObject_SetDriverId");
static_assert(offsetof(UnionRacerStatusObject_SetDriverId, InDriverId) == 0x000000, "Member 'UnionRacerStatusObject_SetDriverId::InDriverId' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetDriverType
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetDriverType final
{
public:
	EDriverType                                   InDriverType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetDriverType) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetDriverType");
static_assert(sizeof(UnionRacerStatusObject_SetDriverType) == 0x000001, "Wrong size on UnionRacerStatusObject_SetDriverType");
static_assert(offsetof(UnionRacerStatusObject_SetDriverType, InDriverType) == 0x000000, "Member 'UnionRacerStatusObject_SetDriverType::InDriverType' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetDroneRemainDistance
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetDroneRemainDistance final
{
public:
	EDroneRemainDistance                          InDroneRemainDistance;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetDroneRemainDistance) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetDroneRemainDistance");
static_assert(sizeof(UnionRacerStatusObject_SetDroneRemainDistance) == 0x000001, "Wrong size on UnionRacerStatusObject_SetDroneRemainDistance");
static_assert(offsetof(UnionRacerStatusObject_SetDroneRemainDistance, InDroneRemainDistance) == 0x000000, "Member 'UnionRacerStatusObject_SetDroneRemainDistance::InDroneRemainDistance' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetGroupIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_SetGroupIndex final
{
public:
	int32                                         InGroupIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetGroupIndex) == 0x000004, "Wrong alignment on UnionRacerStatusObject_SetGroupIndex");
static_assert(sizeof(UnionRacerStatusObject_SetGroupIndex) == 0x000004, "Wrong size on UnionRacerStatusObject_SetGroupIndex");
static_assert(offsetof(UnionRacerStatusObject_SetGroupIndex, InGroupIndex) == 0x000000, "Member 'UnionRacerStatusObject_SetGroupIndex::InGroupIndex' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetHandleAssistEnabled
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetHandleAssistEnabled final
{
public:
	bool                                          bInNewValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetHandleAssistEnabled) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetHandleAssistEnabled");
static_assert(sizeof(UnionRacerStatusObject_SetHandleAssistEnabled) == 0x000001, "Wrong size on UnionRacerStatusObject_SetHandleAssistEnabled");
static_assert(offsetof(UnionRacerStatusObject_SetHandleAssistEnabled, bInNewValue) == 0x000000, "Member 'UnionRacerStatusObject_SetHandleAssistEnabled::bInNewValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetMachineBehaviorID
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_SetMachineBehaviorID final
{
public:
	int32                                         InMachineBehaviorID;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetMachineBehaviorID) == 0x000004, "Wrong alignment on UnionRacerStatusObject_SetMachineBehaviorID");
static_assert(sizeof(UnionRacerStatusObject_SetMachineBehaviorID) == 0x000004, "Wrong size on UnionRacerStatusObject_SetMachineBehaviorID");
static_assert(offsetof(UnionRacerStatusObject_SetMachineBehaviorID, InMachineBehaviorID) == 0x000000, "Member 'UnionRacerStatusObject_SetMachineBehaviorID::InMachineBehaviorID' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetMachineCustomizeData
// 0x0078 (0x0078 - 0x0000)
struct UnionRacerStatusObject_SetMachineCustomizeData final
{
public:
	struct FUserMachineCustomizeData              InMachineCustomizeData;                            // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetMachineCustomizeData) == 0x000008, "Wrong alignment on UnionRacerStatusObject_SetMachineCustomizeData");
static_assert(sizeof(UnionRacerStatusObject_SetMachineCustomizeData) == 0x000078, "Wrong size on UnionRacerStatusObject_SetMachineCustomizeData");
static_assert(offsetof(UnionRacerStatusObject_SetMachineCustomizeData, InMachineCustomizeData) == 0x000000, "Member 'UnionRacerStatusObject_SetMachineCustomizeData::InMachineCustomizeData' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetMachineID
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_SetMachineID final
{
public:
	int32                                         InMachineID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetMachineID) == 0x000004, "Wrong alignment on UnionRacerStatusObject_SetMachineID");
static_assert(sizeof(UnionRacerStatusObject_SetMachineID) == 0x000004, "Wrong size on UnionRacerStatusObject_SetMachineID");
static_assert(offsetof(UnionRacerStatusObject_SetMachineID, InMachineID) == 0x000000, "Member 'UnionRacerStatusObject_SetMachineID::InMachineID' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetMachineStatusType
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetMachineStatusType final
{
public:
	ECarStatusType                                NewStatus;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetMachineStatusType) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetMachineStatusType");
static_assert(sizeof(UnionRacerStatusObject_SetMachineStatusType) == 0x000001, "Wrong size on UnionRacerStatusObject_SetMachineStatusType");
static_assert(offsetof(UnionRacerStatusObject_SetMachineStatusType, NewStatus) == 0x000000, "Member 'UnionRacerStatusObject_SetMachineStatusType::NewStatus' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetPlayable
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetPlayable final
{
public:
	bool                                          InPlayable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetPlayable) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetPlayable");
static_assert(sizeof(UnionRacerStatusObject_SetPlayable) == 0x000001, "Wrong size on UnionRacerStatusObject_SetPlayable");
static_assert(offsetof(UnionRacerStatusObject_SetPlayable, InPlayable) == 0x000000, "Member 'UnionRacerStatusObject_SetPlayable::InPlayable' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetPlayerControllerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_SetPlayerControllerIndex final
{
public:
	int32                                         InPlayerControllerIndex;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetPlayerControllerIndex) == 0x000004, "Wrong alignment on UnionRacerStatusObject_SetPlayerControllerIndex");
static_assert(sizeof(UnionRacerStatusObject_SetPlayerControllerIndex) == 0x000004, "Wrong size on UnionRacerStatusObject_SetPlayerControllerIndex");
static_assert(offsetof(UnionRacerStatusObject_SetPlayerControllerIndex, InPlayerControllerIndex) == 0x000000, "Member 'UnionRacerStatusObject_SetPlayerControllerIndex::InPlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetRaceCustomParam
// 0x0014 (0x0014 - 0x0000)
struct UnionRacerStatusObject_SetRaceCustomParam final
{
public:
	struct FUnionRaceCustomParam                  InRaceCustomParam;                                 // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetRaceCustomParam) == 0x000004, "Wrong alignment on UnionRacerStatusObject_SetRaceCustomParam");
static_assert(sizeof(UnionRacerStatusObject_SetRaceCustomParam) == 0x000014, "Wrong size on UnionRacerStatusObject_SetRaceCustomParam");
static_assert(offsetof(UnionRacerStatusObject_SetRaceCustomParam, InRaceCustomParam) == 0x000000, "Member 'UnionRacerStatusObject_SetRaceCustomParam::InRaceCustomParam' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetRacerComControlType
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_SetRacerComControlType final
{
public:
	int32                                         InComControlType;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetRacerComControlType) == 0x000004, "Wrong alignment on UnionRacerStatusObject_SetRacerComControlType");
static_assert(sizeof(UnionRacerStatusObject_SetRacerComControlType) == 0x000004, "Wrong size on UnionRacerStatusObject_SetRacerComControlType");
static_assert(offsetof(UnionRacerStatusObject_SetRacerComControlType, InComControlType) == 0x000000, "Member 'UnionRacerStatusObject_SetRacerComControlType::InComControlType' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetRacerComLv
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_SetRacerComLv final
{
public:
	int32                                         InComLv;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetRacerComLv) == 0x000004, "Wrong alignment on UnionRacerStatusObject_SetRacerComLv");
static_assert(sizeof(UnionRacerStatusObject_SetRacerComLv) == 0x000004, "Wrong size on UnionRacerStatusObject_SetRacerComLv");
static_assert(offsetof(UnionRacerStatusObject_SetRacerComLv, InComLv) == 0x000000, "Member 'UnionRacerStatusObject_SetRacerComLv::InComLv' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetRacerControlType
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetRacerControlType final
{
public:
	ERacerControlType                             InRacerControlType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetRacerControlType) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetRacerControlType");
static_assert(sizeof(UnionRacerStatusObject_SetRacerControlType) == 0x000001, "Wrong size on UnionRacerStatusObject_SetRacerControlType");
static_assert(offsetof(UnionRacerStatusObject_SetRacerControlType, InRacerControlType) == 0x000000, "Member 'UnionRacerStatusObject_SetRacerControlType::InRacerControlType' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_SetRacerIndex final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetRacerIndex) == 0x000004, "Wrong alignment on UnionRacerStatusObject_SetRacerIndex");
static_assert(sizeof(UnionRacerStatusObject_SetRacerIndex) == 0x000004, "Wrong size on UnionRacerStatusObject_SetRacerIndex");
static_assert(offsetof(UnionRacerStatusObject_SetRacerIndex, InRacerIndex) == 0x000000, "Member 'UnionRacerStatusObject_SetRacerIndex::InRacerIndex' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetRacerName
// 0x0010 (0x0010 - 0x0000)
struct UnionRacerStatusObject_SetRacerName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetRacerName) == 0x000008, "Wrong alignment on UnionRacerStatusObject_SetRacerName");
static_assert(sizeof(UnionRacerStatusObject_SetRacerName) == 0x000010, "Wrong size on UnionRacerStatusObject_SetRacerName");
static_assert(offsetof(UnionRacerStatusObject_SetRacerName, InName) == 0x000000, "Member 'UnionRacerStatusObject_SetRacerName::InName' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetRingCount
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_SetRingCount final
{
public:
	int32                                         InRingCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetRingCount) == 0x000004, "Wrong alignment on UnionRacerStatusObject_SetRingCount");
static_assert(sizeof(UnionRacerStatusObject_SetRingCount) == 0x000004, "Wrong size on UnionRacerStatusObject_SetRingCount");
static_assert(offsetof(UnionRacerStatusObject_SetRingCount, InRingCount) == 0x000000, "Member 'UnionRacerStatusObject_SetRingCount::InRingCount' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetRivalRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_SetRivalRacerIndex final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetRivalRacerIndex) == 0x000004, "Wrong alignment on UnionRacerStatusObject_SetRivalRacerIndex");
static_assert(sizeof(UnionRacerStatusObject_SetRivalRacerIndex) == 0x000004, "Wrong size on UnionRacerStatusObject_SetRivalRacerIndex");
static_assert(offsetof(UnionRacerStatusObject_SetRivalRacerIndex, InRacerIndex) == 0x000000, "Member 'UnionRacerStatusObject_SetRivalRacerIndex::InRacerIndex' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetRivalRacersIndexArray
// 0x0010 (0x0010 - 0x0000)
struct UnionRacerStatusObject_SetRivalRacersIndexArray final
{
public:
	TArray<int32>                                 InRacersIndex;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetRivalRacersIndexArray) == 0x000008, "Wrong alignment on UnionRacerStatusObject_SetRivalRacersIndexArray");
static_assert(sizeof(UnionRacerStatusObject_SetRivalRacersIndexArray) == 0x000010, "Wrong size on UnionRacerStatusObject_SetRivalRacersIndexArray");
static_assert(offsetof(UnionRacerStatusObject_SetRivalRacersIndexArray, InRacersIndex) == 0x000000, "Member 'UnionRacerStatusObject_SetRivalRacersIndexArray::InRacersIndex' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetTakeDamage
// 0x0068 (0x0068 - 0x0000)
struct UnionRacerStatusObject_SetTakeDamage final
{
public:
	struct FAttackedInfo                          AttackedInfo;                                      // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetTakeDamage) == 0x000008, "Wrong alignment on UnionRacerStatusObject_SetTakeDamage");
static_assert(sizeof(UnionRacerStatusObject_SetTakeDamage) == 0x000068, "Wrong size on UnionRacerStatusObject_SetTakeDamage");
static_assert(offsetof(UnionRacerStatusObject_SetTakeDamage, AttackedInfo) == 0x000000, "Member 'UnionRacerStatusObject_SetTakeDamage::AttackedInfo' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetTestParam
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_SetTestParam final
{
public:
	int32                                         InNewParam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetTestParam) == 0x000004, "Wrong alignment on UnionRacerStatusObject_SetTestParam");
static_assert(sizeof(UnionRacerStatusObject_SetTestParam) == 0x000004, "Wrong size on UnionRacerStatusObject_SetTestParam");
static_assert(offsetof(UnionRacerStatusObject_SetTestParam, InNewParam) == 0x000000, "Member 'UnionRacerStatusObject_SetTestParam::InNewParam' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetTSRKeyAssignEnabled
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetTSRKeyAssignEnabled final
{
public:
	bool                                          bInNewValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetTSRKeyAssignEnabled) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetTSRKeyAssignEnabled");
static_assert(sizeof(UnionRacerStatusObject_SetTSRKeyAssignEnabled) == 0x000001, "Wrong size on UnionRacerStatusObject_SetTSRKeyAssignEnabled");
static_assert(offsetof(UnionRacerStatusObject_SetTSRKeyAssignEnabled, bInNewValue) == 0x000000, "Member 'UnionRacerStatusObject_SetTSRKeyAssignEnabled::bInNewValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.SetViewSplitId
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_SetViewSplitId final
{
public:
	EViewSplitId                                  InViewSplitId;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_SetViewSplitId) == 0x000001, "Wrong alignment on UnionRacerStatusObject_SetViewSplitId");
static_assert(sizeof(UnionRacerStatusObject_SetViewSplitId) == 0x000001, "Wrong size on UnionRacerStatusObject_SetViewSplitId");
static_assert(offsetof(UnionRacerStatusObject_SetViewSplitId, InViewSplitId) == 0x000000, "Member 'UnionRacerStatusObject_SetViewSplitId::InViewSplitId' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetAppearanceCounterYaw
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetAppearanceCounterYaw final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetAppearanceCounterYaw) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetAppearanceCounterYaw");
static_assert(sizeof(UnionRacerStatusObject_GetAppearanceCounterYaw) == 0x000004, "Wrong size on UnionRacerStatusObject_GetAppearanceCounterYaw");
static_assert(offsetof(UnionRacerStatusObject_GetAppearanceCounterYaw, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetAppearanceCounterYaw::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetAppearanceSteer
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetAppearanceSteer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetAppearanceSteer) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetAppearanceSteer");
static_assert(sizeof(UnionRacerStatusObject_GetAppearanceSteer) == 0x000004, "Wrong size on UnionRacerStatusObject_GetAppearanceSteer");
static_assert(offsetof(UnionRacerStatusObject_GetAppearanceSteer, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetAppearanceSteer::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetDroneRemainDistance
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_GetDroneRemainDistance final
{
public:
	EDroneRemainDistance                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetDroneRemainDistance) == 0x000001, "Wrong alignment on UnionRacerStatusObject_GetDroneRemainDistance");
static_assert(sizeof(UnionRacerStatusObject_GetDroneRemainDistance) == 0x000001, "Wrong size on UnionRacerStatusObject_GetDroneRemainDistance");
static_assert(offsetof(UnionRacerStatusObject_GetDroneRemainDistance, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetDroneRemainDistance::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetGroupIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetGroupIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetGroupIndex) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetGroupIndex");
static_assert(sizeof(UnionRacerStatusObject_GetGroupIndex) == 0x000004, "Wrong size on UnionRacerStatusObject_GetGroupIndex");
static_assert(offsetof(UnionRacerStatusObject_GetGroupIndex, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetGroupIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetInfiniteItemGauge
// 0x0008 (0x0008 - 0x0000)
struct UnionRacerStatusObject_GetInfiniteItemGauge final
{
public:
	bool                                          IsMain;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetInfiniteItemGauge) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetInfiniteItemGauge");
static_assert(sizeof(UnionRacerStatusObject_GetInfiniteItemGauge) == 0x000008, "Wrong size on UnionRacerStatusObject_GetInfiniteItemGauge");
static_assert(offsetof(UnionRacerStatusObject_GetInfiniteItemGauge, IsMain) == 0x000000, "Member 'UnionRacerStatusObject_GetInfiniteItemGauge::IsMain' has a wrong offset!");
static_assert(offsetof(UnionRacerStatusObject_GetInfiniteItemGauge, ReturnValue) == 0x000004, "Member 'UnionRacerStatusObject_GetInfiniteItemGauge::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetInfiniteItemGauge_New
// 0x0008 (0x0008 - 0x0000)
struct UnionRacerStatusObject_GetInfiniteItemGauge_New final
{
public:
	EItemInfoType                                 ItemInfoType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetInfiniteItemGauge_New) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetInfiniteItemGauge_New");
static_assert(sizeof(UnionRacerStatusObject_GetInfiniteItemGauge_New) == 0x000008, "Wrong size on UnionRacerStatusObject_GetInfiniteItemGauge_New");
static_assert(offsetof(UnionRacerStatusObject_GetInfiniteItemGauge_New, ItemInfoType) == 0x000000, "Member 'UnionRacerStatusObject_GetInfiniteItemGauge_New::ItemInfoType' has a wrong offset!");
static_assert(offsetof(UnionRacerStatusObject_GetInfiniteItemGauge_New, ReturnValue) == 0x000004, "Member 'UnionRacerStatusObject_GetInfiniteItemGauge_New::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetMachineCustomizeData
// 0x0078 (0x0078 - 0x0000)
struct UnionRacerStatusObject_GetMachineCustomizeData final
{
public:
	struct FUserMachineCustomizeData              ReturnValue;                                       // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetMachineCustomizeData) == 0x000008, "Wrong alignment on UnionRacerStatusObject_GetMachineCustomizeData");
static_assert(sizeof(UnionRacerStatusObject_GetMachineCustomizeData) == 0x000078, "Wrong size on UnionRacerStatusObject_GetMachineCustomizeData");
static_assert(offsetof(UnionRacerStatusObject_GetMachineCustomizeData, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetMachineCustomizeData::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetPanSplitValue
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_GetPanSplitValue final
{
public:
	ESoundPan                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetPanSplitValue) == 0x000001, "Wrong alignment on UnionRacerStatusObject_GetPanSplitValue");
static_assert(sizeof(UnionRacerStatusObject_GetPanSplitValue) == 0x000001, "Wrong size on UnionRacerStatusObject_GetPanSplitValue");
static_assert(offsetof(UnionRacerStatusObject_GetPanSplitValue, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetPanSplitValue::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetRaceCustomParam
// 0x0014 (0x0014 - 0x0000)
struct UnionRacerStatusObject_GetRaceCustomParam final
{
public:
	struct FUnionRaceCustomParam                  OutRaceCustomParam;                                // 0x0000(0x0014)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetRaceCustomParam) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetRaceCustomParam");
static_assert(sizeof(UnionRacerStatusObject_GetRaceCustomParam) == 0x000014, "Wrong size on UnionRacerStatusObject_GetRaceCustomParam");
static_assert(offsetof(UnionRacerStatusObject_GetRaceCustomParam, OutRaceCustomParam) == 0x000000, "Member 'UnionRacerStatusObject_GetRaceCustomParam::OutRaceCustomParam' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetRacerComLv
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerStatusObject_GetRacerComLv final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetRacerComLv) == 0x000004, "Wrong alignment on UnionRacerStatusObject_GetRacerComLv");
static_assert(sizeof(UnionRacerStatusObject_GetRacerComLv) == 0x000004, "Wrong size on UnionRacerStatusObject_GetRacerComLv");
static_assert(offsetof(UnionRacerStatusObject_GetRacerComLv, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetRacerComLv::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetRacerControlType
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_GetRacerControlType final
{
public:
	ERacerControlType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetRacerControlType) == 0x000001, "Wrong alignment on UnionRacerStatusObject_GetRacerControlType");
static_assert(sizeof(UnionRacerStatusObject_GetRacerControlType) == 0x000001, "Wrong size on UnionRacerStatusObject_GetRacerControlType");
static_assert(offsetof(UnionRacerStatusObject_GetRacerControlType, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetRacerControlType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetVehicleDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_GetVehicleDisplayMode final
{
public:
	EVehicleDisplayMode                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetVehicleDisplayMode) == 0x000001, "Wrong alignment on UnionRacerStatusObject_GetVehicleDisplayMode");
static_assert(sizeof(UnionRacerStatusObject_GetVehicleDisplayMode) == 0x000001, "Wrong size on UnionRacerStatusObject_GetVehicleDisplayMode");
static_assert(offsetof(UnionRacerStatusObject_GetVehicleDisplayMode, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetVehicleDisplayMode::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.GetViewSplitId
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_GetViewSplitId final
{
public:
	EViewSplitId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_GetViewSplitId) == 0x000001, "Wrong alignment on UnionRacerStatusObject_GetViewSplitId");
static_assert(sizeof(UnionRacerStatusObject_GetViewSplitId) == 0x000001, "Wrong size on UnionRacerStatusObject_GetViewSplitId");
static_assert(offsetof(UnionRacerStatusObject_GetViewSplitId, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_GetViewSplitId::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsAirTrickAssistEnabled
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsAirTrickAssistEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsAirTrickAssistEnabled) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsAirTrickAssistEnabled");
static_assert(sizeof(UnionRacerStatusObject_IsAirTrickAssistEnabled) == 0x000001, "Wrong size on UnionRacerStatusObject_IsAirTrickAssistEnabled");
static_assert(offsetof(UnionRacerStatusObject_IsAirTrickAssistEnabled, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsAirTrickAssistEnabled::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsAnyDamage
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsAnyDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsAnyDamage) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsAnyDamage");
static_assert(sizeof(UnionRacerStatusObject_IsAnyDamage) == 0x000001, "Wrong size on UnionRacerStatusObject_IsAnyDamage");
static_assert(offsetof(UnionRacerStatusObject_IsAnyDamage, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsAnyDamage::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsAutoAcceleratorEnabled
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsAutoAcceleratorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsAutoAcceleratorEnabled) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsAutoAcceleratorEnabled");
static_assert(sizeof(UnionRacerStatusObject_IsAutoAcceleratorEnabled) == 0x000001, "Wrong size on UnionRacerStatusObject_IsAutoAcceleratorEnabled");
static_assert(offsetof(UnionRacerStatusObject_IsAutoAcceleratorEnabled, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsAutoAcceleratorEnabled::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsClushGimmickObject
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsClushGimmickObject final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsClushGimmickObject) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsClushGimmickObject");
static_assert(sizeof(UnionRacerStatusObject_IsClushGimmickObject) == 0x000001, "Wrong size on UnionRacerStatusObject_IsClushGimmickObject");
static_assert(offsetof(UnionRacerStatusObject_IsClushGimmickObject, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsClushGimmickObject::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsCom
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsCom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsCom) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsCom");
static_assert(sizeof(UnionRacerStatusObject_IsCom) == 0x000001, "Wrong size on UnionRacerStatusObject_IsCom");
static_assert(offsetof(UnionRacerStatusObject_IsCom, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsCom::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsGhostGoal
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsGhostGoal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsGhostGoal) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsGhostGoal");
static_assert(sizeof(UnionRacerStatusObject_IsGhostGoal) == 0x000001, "Wrong size on UnionRacerStatusObject_IsGhostGoal");
static_assert(offsetof(UnionRacerStatusObject_IsGhostGoal, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsGhostGoal::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsGhostHiddenInGame
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsGhostHiddenInGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsGhostHiddenInGame) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsGhostHiddenInGame");
static_assert(sizeof(UnionRacerStatusObject_IsGhostHiddenInGame) == 0x000001, "Wrong size on UnionRacerStatusObject_IsGhostHiddenInGame");
static_assert(offsetof(UnionRacerStatusObject_IsGhostHiddenInGame, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsGhostHiddenInGame::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsGhostMachineEnabled
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsGhostMachineEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsGhostMachineEnabled) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsGhostMachineEnabled");
static_assert(sizeof(UnionRacerStatusObject_IsGhostMachineEnabled) == 0x000001, "Wrong size on UnionRacerStatusObject_IsGhostMachineEnabled");
static_assert(offsetof(UnionRacerStatusObject_IsGhostMachineEnabled, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsGhostMachineEnabled::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsHandleAssistEnabled
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsHandleAssistEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsHandleAssistEnabled) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsHandleAssistEnabled");
static_assert(sizeof(UnionRacerStatusObject_IsHandleAssistEnabled) == 0x000001, "Wrong size on UnionRacerStatusObject_IsHandleAssistEnabled");
static_assert(offsetof(UnionRacerStatusObject_IsHandleAssistEnabled, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsHandleAssistEnabled::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsItemIrregular
// 0x0002 (0x0002 - 0x0000)
struct UnionRacerStatusObject_IsItemIrregular final
{
public:
	bool                                          IsMain;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsItemIrregular) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsItemIrregular");
static_assert(sizeof(UnionRacerStatusObject_IsItemIrregular) == 0x000002, "Wrong size on UnionRacerStatusObject_IsItemIrregular");
static_assert(offsetof(UnionRacerStatusObject_IsItemIrregular, IsMain) == 0x000000, "Member 'UnionRacerStatusObject_IsItemIrregular::IsMain' has a wrong offset!");
static_assert(offsetof(UnionRacerStatusObject_IsItemIrregular, ReturnValue) == 0x000001, "Member 'UnionRacerStatusObject_IsItemIrregular::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsItemIrregular_New
// 0x0002 (0x0002 - 0x0000)
struct UnionRacerStatusObject_IsItemIrregular_New final
{
public:
	EItemInfoType                                 ItemInfoType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsItemIrregular_New) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsItemIrregular_New");
static_assert(sizeof(UnionRacerStatusObject_IsItemIrregular_New) == 0x000002, "Wrong size on UnionRacerStatusObject_IsItemIrregular_New");
static_assert(offsetof(UnionRacerStatusObject_IsItemIrregular_New, ItemInfoType) == 0x000000, "Member 'UnionRacerStatusObject_IsItemIrregular_New::ItemInfoType' has a wrong offset!");
static_assert(offsetof(UnionRacerStatusObject_IsItemIrregular_New, ReturnValue) == 0x000001, "Member 'UnionRacerStatusObject_IsItemIrregular_New::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsLocalPlayer) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsLocalPlayer");
static_assert(sizeof(UnionRacerStatusObject_IsLocalPlayer) == 0x000001, "Wrong size on UnionRacerStatusObject_IsLocalPlayer");
static_assert(offsetof(UnionRacerStatusObject_IsLocalPlayer, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsLocalPlayer::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsLocalRacer
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsLocalRacer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsLocalRacer) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsLocalRacer");
static_assert(sizeof(UnionRacerStatusObject_IsLocalRacer) == 0x000001, "Wrong size on UnionRacerStatusObject_IsLocalRacer");
static_assert(offsetof(UnionRacerStatusObject_IsLocalRacer, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsLocalRacer::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsMachineCameraAssigned
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsMachineCameraAssigned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsMachineCameraAssigned) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsMachineCameraAssigned");
static_assert(sizeof(UnionRacerStatusObject_IsMachineCameraAssigned) == 0x000001, "Wrong size on UnionRacerStatusObject_IsMachineCameraAssigned");
static_assert(offsetof(UnionRacerStatusObject_IsMachineCameraAssigned, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsMachineCameraAssigned::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsOnlineCom
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsOnlineCom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsOnlineCom) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsOnlineCom");
static_assert(sizeof(UnionRacerStatusObject_IsOnlineCom) == 0x000001, "Wrong size on UnionRacerStatusObject_IsOnlineCom");
static_assert(offsetof(UnionRacerStatusObject_IsOnlineCom, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsOnlineCom::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsOnlinePlayer
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsOnlinePlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsOnlinePlayer) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsOnlinePlayer");
static_assert(sizeof(UnionRacerStatusObject_IsOnlinePlayer) == 0x000001, "Wrong size on UnionRacerStatusObject_IsOnlinePlayer");
static_assert(offsetof(UnionRacerStatusObject_IsOnlinePlayer, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsOnlinePlayer::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsRaceParkRivalRacerSkin
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsRaceParkRivalRacerSkin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsRaceParkRivalRacerSkin) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsRaceParkRivalRacerSkin");
static_assert(sizeof(UnionRacerStatusObject_IsRaceParkRivalRacerSkin) == 0x000001, "Wrong size on UnionRacerStatusObject_IsRaceParkRivalRacerSkin");
static_assert(offsetof(UnionRacerStatusObject_IsRaceParkRivalRacerSkin, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsRaceParkRivalRacerSkin::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsRemoteRacer
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsRemoteRacer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsRemoteRacer) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsRemoteRacer");
static_assert(sizeof(UnionRacerStatusObject_IsRemoteRacer) == 0x000001, "Wrong size on UnionRacerStatusObject_IsRemoteRacer");
static_assert(offsetof(UnionRacerStatusObject_IsRemoteRacer, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsRemoteRacer::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsRivalCom
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsRivalCom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsRivalCom) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsRivalCom");
static_assert(sizeof(UnionRacerStatusObject_IsRivalCom) == 0x000001, "Wrong size on UnionRacerStatusObject_IsRivalCom");
static_assert(offsetof(UnionRacerStatusObject_IsRivalCom, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsRivalCom::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsRivalPowerful
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsRivalPowerful final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsRivalPowerful) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsRivalPowerful");
static_assert(sizeof(UnionRacerStatusObject_IsRivalPowerful) == 0x000001, "Wrong size on UnionRacerStatusObject_IsRivalPowerful");
static_assert(offsetof(UnionRacerStatusObject_IsRivalPowerful, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsRivalPowerful::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsSomeonesCom
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsSomeonesCom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsSomeonesCom) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsSomeonesCom");
static_assert(sizeof(UnionRacerStatusObject_IsSomeonesCom) == 0x000001, "Wrong size on UnionRacerStatusObject_IsSomeonesCom");
static_assert(offsetof(UnionRacerStatusObject_IsSomeonesCom, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsSomeonesCom::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsTakeDamage
// 0x0002 (0x0002 - 0x0000)
struct UnionRacerStatusObject_IsTakeDamage final
{
public:
	ERacerDamageType                              DamageType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsTakeDamage) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsTakeDamage");
static_assert(sizeof(UnionRacerStatusObject_IsTakeDamage) == 0x000002, "Wrong size on UnionRacerStatusObject_IsTakeDamage");
static_assert(offsetof(UnionRacerStatusObject_IsTakeDamage, DamageType) == 0x000000, "Member 'UnionRacerStatusObject_IsTakeDamage::DamageType' has a wrong offset!");
static_assert(offsetof(UnionRacerStatusObject_IsTakeDamage, ReturnValue) == 0x000001, "Member 'UnionRacerStatusObject_IsTakeDamage::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsTakeSquashedDamage
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsTakeSquashedDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsTakeSquashedDamage) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsTakeSquashedDamage");
static_assert(sizeof(UnionRacerStatusObject_IsTakeSquashedDamage) == 0x000001, "Wrong size on UnionRacerStatusObject_IsTakeSquashedDamage");
static_assert(offsetof(UnionRacerStatusObject_IsTakeSquashedDamage, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsTakeSquashedDamage::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerStatusObject.IsTSRKeyAssignEnabled
// 0x0001 (0x0001 - 0x0000)
struct UnionRacerStatusObject_IsTSRKeyAssignEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerStatusObject_IsTSRKeyAssignEnabled) == 0x000001, "Wrong alignment on UnionRacerStatusObject_IsTSRKeyAssignEnabled");
static_assert(sizeof(UnionRacerStatusObject_IsTSRKeyAssignEnabled) == 0x000001, "Wrong size on UnionRacerStatusObject_IsTSRKeyAssignEnabled");
static_assert(offsetof(UnionRacerStatusObject_IsTSRKeyAssignEnabled, ReturnValue) == 0x000000, "Member 'UnionRacerStatusObject_IsTSRKeyAssignEnabled::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubAirTrickInfo.SetAirTrickInfoAndFireAnimation
// 0x000C (0x000C - 0x0000)
struct RaceUISubAirTrickInfo_SetAirTrickInfoAndFireAnimation final
{
public:
	int32                                         SuccessCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessBonusCount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGhostView;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubAirTrickInfo_SetAirTrickInfoAndFireAnimation) == 0x000004, "Wrong alignment on RaceUISubAirTrickInfo_SetAirTrickInfoAndFireAnimation");
static_assert(sizeof(RaceUISubAirTrickInfo_SetAirTrickInfoAndFireAnimation) == 0x00000C, "Wrong size on RaceUISubAirTrickInfo_SetAirTrickInfoAndFireAnimation");
static_assert(offsetof(RaceUISubAirTrickInfo_SetAirTrickInfoAndFireAnimation, SuccessCount) == 0x000000, "Member 'RaceUISubAirTrickInfo_SetAirTrickInfoAndFireAnimation::SuccessCount' has a wrong offset!");
static_assert(offsetof(RaceUISubAirTrickInfo_SetAirTrickInfoAndFireAnimation, SuccessBonusCount) == 0x000004, "Member 'RaceUISubAirTrickInfo_SetAirTrickInfoAndFireAnimation::SuccessBonusCount' has a wrong offset!");
static_assert(offsetof(RaceUISubAirTrickInfo_SetAirTrickInfoAndFireAnimation, IsGhostView) == 0x000008, "Member 'RaceUISubAirTrickInfo_SetAirTrickInfoAndFireAnimation::IsGhostView' has a wrong offset!");

// Function UnionRun.RaceUISubAirTrickInfo.SetAirTrickTextInfo
// 0x0030 (0x0030 - 0x0000)
struct RaceUISubAirTrickInfo_SetAirTrickTextInfo final
{
public:
	int32                                         SuccessCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Tex_1000;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Tex_0100;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Tex_0010;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Tex_0001;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Tex_Unit;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubAirTrickInfo_SetAirTrickTextInfo) == 0x000008, "Wrong alignment on RaceUISubAirTrickInfo_SetAirTrickTextInfo");
static_assert(sizeof(RaceUISubAirTrickInfo_SetAirTrickTextInfo) == 0x000030, "Wrong size on RaceUISubAirTrickInfo_SetAirTrickTextInfo");
static_assert(offsetof(RaceUISubAirTrickInfo_SetAirTrickTextInfo, SuccessCount) == 0x000000, "Member 'RaceUISubAirTrickInfo_SetAirTrickTextInfo::SuccessCount' has a wrong offset!");
static_assert(offsetof(RaceUISubAirTrickInfo_SetAirTrickTextInfo, Tex_1000) == 0x000008, "Member 'RaceUISubAirTrickInfo_SetAirTrickTextInfo::Tex_1000' has a wrong offset!");
static_assert(offsetof(RaceUISubAirTrickInfo_SetAirTrickTextInfo, Tex_0100) == 0x000010, "Member 'RaceUISubAirTrickInfo_SetAirTrickTextInfo::Tex_0100' has a wrong offset!");
static_assert(offsetof(RaceUISubAirTrickInfo_SetAirTrickTextInfo, Tex_0010) == 0x000018, "Member 'RaceUISubAirTrickInfo_SetAirTrickTextInfo::Tex_0010' has a wrong offset!");
static_assert(offsetof(RaceUISubAirTrickInfo_SetAirTrickTextInfo, Tex_0001) == 0x000020, "Member 'RaceUISubAirTrickInfo_SetAirTrickTextInfo::Tex_0001' has a wrong offset!");
static_assert(offsetof(RaceUISubAirTrickInfo_SetAirTrickTextInfo, Tex_Unit) == 0x000028, "Member 'RaceUISubAirTrickInfo_SetAirTrickTextInfo::Tex_Unit' has a wrong offset!");

// Function UnionRun.RaceUISubAirTrickInfo.GetAirTrickBonusValue
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubAirTrickInfo_GetAirTrickBonusValue final
{
public:
	int32                                         SuccessCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubAirTrickInfo_GetAirTrickBonusValue) == 0x000004, "Wrong alignment on RaceUISubAirTrickInfo_GetAirTrickBonusValue");
static_assert(sizeof(RaceUISubAirTrickInfo_GetAirTrickBonusValue) == 0x000008, "Wrong size on RaceUISubAirTrickInfo_GetAirTrickBonusValue");
static_assert(offsetof(RaceUISubAirTrickInfo_GetAirTrickBonusValue, SuccessCount) == 0x000000, "Member 'RaceUISubAirTrickInfo_GetAirTrickBonusValue::SuccessCount' has a wrong offset!");
static_assert(offsetof(RaceUISubAirTrickInfo_GetAirTrickBonusValue, ReturnValue) == 0x000004, "Member 'RaceUISubAirTrickInfo_GetAirTrickBonusValue::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubAirTrickInfo.GetAirTrickValue
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubAirTrickInfo_GetAirTrickValue final
{
public:
	int32                                         SuccessCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubAirTrickInfo_GetAirTrickValue) == 0x000004, "Wrong alignment on RaceUISubAirTrickInfo_GetAirTrickValue");
static_assert(sizeof(RaceUISubAirTrickInfo_GetAirTrickValue) == 0x000008, "Wrong size on RaceUISubAirTrickInfo_GetAirTrickValue");
static_assert(offsetof(RaceUISubAirTrickInfo_GetAirTrickValue, SuccessCount) == 0x000000, "Member 'RaceUISubAirTrickInfo_GetAirTrickValue::SuccessCount' has a wrong offset!");
static_assert(offsetof(RaceUISubAirTrickInfo_GetAirTrickValue, ReturnValue) == 0x000004, "Member 'RaceUISubAirTrickInfo_GetAirTrickValue::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubApproachWarning.InitItemEnemyApproachSetting
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubApproachWarning_InitItemEnemyApproachSetting final
{
public:
	float                                         InMaxScale;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnionAttackItemInfoType                      AttackItemInfoType;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AttackItemId;                                      // 0x0005(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubApproachWarning_InitItemEnemyApproachSetting) == 0x000004, "Wrong alignment on RaceUISubApproachWarning_InitItemEnemyApproachSetting");
static_assert(sizeof(RaceUISubApproachWarning_InitItemEnemyApproachSetting) == 0x000008, "Wrong size on RaceUISubApproachWarning_InitItemEnemyApproachSetting");
static_assert(offsetof(RaceUISubApproachWarning_InitItemEnemyApproachSetting, InMaxScale) == 0x000000, "Member 'RaceUISubApproachWarning_InitItemEnemyApproachSetting::InMaxScale' has a wrong offset!");
static_assert(offsetof(RaceUISubApproachWarning_InitItemEnemyApproachSetting, AttackItemInfoType) == 0x000004, "Member 'RaceUISubApproachWarning_InitItemEnemyApproachSetting::AttackItemInfoType' has a wrong offset!");
static_assert(offsetof(RaceUISubApproachWarning_InitItemEnemyApproachSetting, AttackItemId) == 0x000005, "Member 'RaceUISubApproachWarning_InitItemEnemyApproachSetting::AttackItemId' has a wrong offset!");

// Function UnionRun.RaceUISubApproachWarning.OnPause
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubApproachWarning_OnPause final
{
public:
	bool                                          bInPause;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubApproachWarning_OnPause) == 0x000001, "Wrong alignment on RaceUISubApproachWarning_OnPause");
static_assert(sizeof(RaceUISubApproachWarning_OnPause) == 0x000001, "Wrong size on RaceUISubApproachWarning_OnPause");
static_assert(offsetof(RaceUISubApproachWarning_OnPause, bInPause) == 0x000000, "Member 'RaceUISubApproachWarning_OnPause::bInPause' has a wrong offset!");

// Function UnionRun.RaceUISubApproachWarning.SetAttackTypeandId
// 0x0002 (0x0002 - 0x0000)
struct RaceUISubApproachWarning_SetAttackTypeandId final
{
public:
	EUnionAttackItemInfoType                      InAttackType;                                      // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       InItemId;                                          // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubApproachWarning_SetAttackTypeandId) == 0x000001, "Wrong alignment on RaceUISubApproachWarning_SetAttackTypeandId");
static_assert(sizeof(RaceUISubApproachWarning_SetAttackTypeandId) == 0x000002, "Wrong size on RaceUISubApproachWarning_SetAttackTypeandId");
static_assert(offsetof(RaceUISubApproachWarning_SetAttackTypeandId, InAttackType) == 0x000000, "Member 'RaceUISubApproachWarning_SetAttackTypeandId::InAttackType' has a wrong offset!");
static_assert(offsetof(RaceUISubApproachWarning_SetAttackTypeandId, InItemId) == 0x000001, "Member 'RaceUISubApproachWarning_SetAttackTypeandId::InItemId' has a wrong offset!");

// Function UnionRun.RaceUISubApproachWarning.SetDriverId
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubApproachWarning_SetDriverId final
{
public:
	EDriverId                                     DriverId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubApproachWarning_SetDriverId) == 0x000001, "Wrong alignment on RaceUISubApproachWarning_SetDriverId");
static_assert(sizeof(RaceUISubApproachWarning_SetDriverId) == 0x000001, "Wrong size on RaceUISubApproachWarning_SetDriverId");
static_assert(offsetof(RaceUISubApproachWarning_SetDriverId, DriverId) == 0x000000, "Member 'RaceUISubApproachWarning_SetDriverId::DriverId' has a wrong offset!");

// Function UnionRun.RaceUISubApproachWarning.SetItemId
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubApproachWarning_SetItemId final
{
public:
	int32                                         InItemId;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubApproachWarning_SetItemId) == 0x000004, "Wrong alignment on RaceUISubApproachWarning_SetItemId");
static_assert(sizeof(RaceUISubApproachWarning_SetItemId) == 0x000004, "Wrong size on RaceUISubApproachWarning_SetItemId");
static_assert(offsetof(RaceUISubApproachWarning_SetItemId, InItemId) == 0x000000, "Member 'RaceUISubApproachWarning_SetItemId::InItemId' has a wrong offset!");

// Function UnionRun.RaceUISubApproachWarning.UpdateItemEnemyApproach
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubApproachWarning_UpdateItemEnemyApproach final
{
public:
	float                                         ValueCM;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubApproachWarning_UpdateItemEnemyApproach) == 0x000004, "Wrong alignment on RaceUISubApproachWarning_UpdateItemEnemyApproach");
static_assert(sizeof(RaceUISubApproachWarning_UpdateItemEnemyApproach) == 0x000004, "Wrong size on RaceUISubApproachWarning_UpdateItemEnemyApproach");
static_assert(offsetof(RaceUISubApproachWarning_UpdateItemEnemyApproach, ValueCM) == 0x000000, "Member 'RaceUISubApproachWarning_UpdateItemEnemyApproach::ValueCM' has a wrong offset!");

// Function UnionRun.RaceUISubApproachWarning.UpdateRacerApproach
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubApproachWarning_UpdateRacerApproach final
{
public:
	float                                         ValueCM;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubApproachWarning_UpdateRacerApproach) == 0x000004, "Wrong alignment on RaceUISubApproachWarning_UpdateRacerApproach");
static_assert(sizeof(RaceUISubApproachWarning_UpdateRacerApproach) == 0x000004, "Wrong size on RaceUISubApproachWarning_UpdateRacerApproach");
static_assert(offsetof(RaceUISubApproachWarning_UpdateRacerApproach, ValueCM) == 0x000000, "Member 'RaceUISubApproachWarning_UpdateRacerApproach::ValueCM' has a wrong offset!");

// Function UnionRun.UnionRacerFunction.GetDistance
// 0x0038 (0x0038 - 0x0000)
struct UnionRacerFunction_GetDistance final
{
public:
	struct FVector                                Pos1;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos2;                                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRacerFunction_GetDistance) == 0x000008, "Wrong alignment on UnionRacerFunction_GetDistance");
static_assert(sizeof(UnionRacerFunction_GetDistance) == 0x000038, "Wrong size on UnionRacerFunction_GetDistance");
static_assert(offsetof(UnionRacerFunction_GetDistance, Pos1) == 0x000000, "Member 'UnionRacerFunction_GetDistance::Pos1' has a wrong offset!");
static_assert(offsetof(UnionRacerFunction_GetDistance, Pos2) == 0x000018, "Member 'UnionRacerFunction_GetDistance::Pos2' has a wrong offset!");
static_assert(offsetof(UnionRacerFunction_GetDistance, ReturnValue) == 0x000030, "Member 'UnionRacerFunction_GetDistance::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerFunction.GetRacerGroupIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRacerFunction_GetRacerGroupIndex final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerFunction_GetRacerGroupIndex) == 0x000004, "Wrong alignment on UnionRacerFunction_GetRacerGroupIndex");
static_assert(sizeof(UnionRacerFunction_GetRacerGroupIndex) == 0x000008, "Wrong size on UnionRacerFunction_GetRacerGroupIndex");
static_assert(offsetof(UnionRacerFunction_GetRacerGroupIndex, InRacerIndex) == 0x000000, "Member 'UnionRacerFunction_GetRacerGroupIndex::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacerFunction_GetRacerGroupIndex, ReturnValue) == 0x000004, "Member 'UnionRacerFunction_GetRacerGroupIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerFunction.GetRacerIndexByDriverID
// 0x0008 (0x0008 - 0x0000)
struct UnionRacerFunction_GetRacerIndexByDriverID final
{
public:
	EDriverId                                     DriverId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerFunction_GetRacerIndexByDriverID) == 0x000004, "Wrong alignment on UnionRacerFunction_GetRacerIndexByDriverID");
static_assert(sizeof(UnionRacerFunction_GetRacerIndexByDriverID) == 0x000008, "Wrong size on UnionRacerFunction_GetRacerIndexByDriverID");
static_assert(offsetof(UnionRacerFunction_GetRacerIndexByDriverID, DriverId) == 0x000000, "Member 'UnionRacerFunction_GetRacerIndexByDriverID::DriverId' has a wrong offset!");
static_assert(offsetof(UnionRacerFunction_GetRacerIndexByDriverID, ReturnValue) == 0x000004, "Member 'UnionRacerFunction_GetRacerIndexByDriverID::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerFunction.GetRacerIndexByPlayerID
// 0x0008 (0x0008 - 0x0000)
struct UnionRacerFunction_GetRacerIndexByPlayerID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerFunction_GetRacerIndexByPlayerID) == 0x000004, "Wrong alignment on UnionRacerFunction_GetRacerIndexByPlayerID");
static_assert(sizeof(UnionRacerFunction_GetRacerIndexByPlayerID) == 0x000008, "Wrong size on UnionRacerFunction_GetRacerIndexByPlayerID");
static_assert(offsetof(UnionRacerFunction_GetRacerIndexByPlayerID, PlayerId) == 0x000000, "Member 'UnionRacerFunction_GetRacerIndexByPlayerID::PlayerId' has a wrong offset!");
static_assert(offsetof(UnionRacerFunction_GetRacerIndexByPlayerID, ReturnValue) == 0x000004, "Member 'UnionRacerFunction_GetRacerIndexByPlayerID::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerFunction.GetRankingSkipInterval
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerFunction_GetRankingSkipInterval final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerFunction_GetRankingSkipInterval) == 0x000004, "Wrong alignment on UnionRacerFunction_GetRankingSkipInterval");
static_assert(sizeof(UnionRacerFunction_GetRankingSkipInterval) == 0x000004, "Wrong size on UnionRacerFunction_GetRankingSkipInterval");
static_assert(offsetof(UnionRacerFunction_GetRankingSkipInterval, ReturnValue) == 0x000000, "Member 'UnionRacerFunction_GetRankingSkipInterval::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerFunction.GetRankUpGaugeSpeed
// 0x0004 (0x0004 - 0x0000)
struct UnionRacerFunction_GetRankUpGaugeSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerFunction_GetRankUpGaugeSpeed) == 0x000004, "Wrong alignment on UnionRacerFunction_GetRankUpGaugeSpeed");
static_assert(sizeof(UnionRacerFunction_GetRankUpGaugeSpeed) == 0x000004, "Wrong size on UnionRacerFunction_GetRankUpGaugeSpeed");
static_assert(offsetof(UnionRacerFunction_GetRankUpGaugeSpeed, ReturnValue) == 0x000000, "Member 'UnionRacerFunction_GetRankUpGaugeSpeed::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerFunction.GetUnionRacers
// 0x0008 (0x0008 - 0x0000)
struct UnionRacerFunction_GetUnionRacers final
{
public:
	class UUnionRacers*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacerFunction_GetUnionRacers) == 0x000008, "Wrong alignment on UnionRacerFunction_GetUnionRacers");
static_assert(sizeof(UnionRacerFunction_GetUnionRacers) == 0x000008, "Wrong size on UnionRacerFunction_GetUnionRacers");
static_assert(offsetof(UnionRacerFunction_GetUnionRacers, ReturnValue) == 0x000000, "Member 'UnionRacerFunction_GetUnionRacers::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerFunction.IsInScreen
// 0x0028 (0x0028 - 0x0000)
struct UnionRacerFunction_IsInScreen final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRacerFunction_IsInScreen) == 0x000008, "Wrong alignment on UnionRacerFunction_IsInScreen");
static_assert(sizeof(UnionRacerFunction_IsInScreen) == 0x000028, "Wrong size on UnionRacerFunction_IsInScreen");
static_assert(offsetof(UnionRacerFunction_IsInScreen, PlayerController) == 0x000000, "Member 'UnionRacerFunction_IsInScreen::PlayerController' has a wrong offset!");
static_assert(offsetof(UnionRacerFunction_IsInScreen, Position) == 0x000008, "Member 'UnionRacerFunction_IsInScreen::Position' has a wrong offset!");
static_assert(offsetof(UnionRacerFunction_IsInScreen, ReturnValue) == 0x000020, "Member 'UnionRacerFunction_IsInScreen::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacerFunction.IsSameGroup
// 0x000C (0x000C - 0x0000)
struct UnionRacerFunction_IsSameGroup final
{
public:
	int32                                         InRacerIndexA;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRacerIndexB;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRacerFunction_IsSameGroup) == 0x000004, "Wrong alignment on UnionRacerFunction_IsSameGroup");
static_assert(sizeof(UnionRacerFunction_IsSameGroup) == 0x00000C, "Wrong size on UnionRacerFunction_IsSameGroup");
static_assert(offsetof(UnionRacerFunction_IsSameGroup, InRacerIndexA) == 0x000000, "Member 'UnionRacerFunction_IsSameGroup::InRacerIndexA' has a wrong offset!");
static_assert(offsetof(UnionRacerFunction_IsSameGroup, InRacerIndexB) == 0x000004, "Member 'UnionRacerFunction_IsSameGroup::InRacerIndexB' has a wrong offset!");
static_assert(offsetof(UnionRacerFunction_IsSameGroup, ReturnValue) == 0x000008, "Member 'UnionRacerFunction_IsSameGroup::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBasicOperation.IsKeyboard
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubBasicOperation_IsKeyboard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBasicOperation_IsKeyboard) == 0x000001, "Wrong alignment on RaceUISubBasicOperation_IsKeyboard");
static_assert(sizeof(RaceUISubBasicOperation_IsKeyboard) == 0x000001, "Wrong size on RaceUISubBasicOperation_IsKeyboard");
static_assert(offsetof(RaceUISubBasicOperation_IsKeyboard, ReturnValue) == 0x000000, "Member 'RaceUISubBasicOperation_IsKeyboard::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceHitInfoGroup.SetItemIdIndex_Impl
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceHitInfoGroup_SetItemIdIndex_Impl final
{
public:
	int32                                         InItemIdIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceHitInfoGroup_SetItemIdIndex_Impl) == 0x000004, "Wrong alignment on UnionRaceHitInfoGroup_SetItemIdIndex_Impl");
static_assert(sizeof(UnionRaceHitInfoGroup_SetItemIdIndex_Impl) == 0x000004, "Wrong size on UnionRaceHitInfoGroup_SetItemIdIndex_Impl");
static_assert(offsetof(UnionRaceHitInfoGroup_SetItemIdIndex_Impl, InItemIdIndex) == 0x000000, "Member 'UnionRaceHitInfoGroup_SetItemIdIndex_Impl::InItemIdIndex' has a wrong offset!");

// Function UnionRun.UnionRaceHitInfoGroup.UpdateHitInfoGroup
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceHitInfoGroup_UpdateHitInfoGroup final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceHitInfoGroup_UpdateHitInfoGroup) == 0x000004, "Wrong alignment on UnionRaceHitInfoGroup_UpdateHitInfoGroup");
static_assert(sizeof(UnionRaceHitInfoGroup_UpdateHitInfoGroup) == 0x000004, "Wrong size on UnionRaceHitInfoGroup_UpdateHitInfoGroup");
static_assert(offsetof(UnionRaceHitInfoGroup_UpdateHitInfoGroup, Delta) == 0x000000, "Member 'UnionRaceHitInfoGroup_UpdateHitInfoGroup::Delta' has a wrong offset!");

// Function UnionRun.RaceUISubBtnGuide.GetControllerType
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubBtnGuide_GetControllerType final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNotSetKey;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtnGuidePlatFormController                   ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubBtnGuide_GetControllerType) == 0x000004, "Wrong alignment on RaceUISubBtnGuide_GetControllerType");
static_assert(sizeof(RaceUISubBtnGuide_GetControllerType) == 0x000008, "Wrong size on RaceUISubBtnGuide_GetControllerType");
static_assert(offsetof(RaceUISubBtnGuide_GetControllerType, PlayerControllerIndex) == 0x000000, "Member 'RaceUISubBtnGuide_GetControllerType::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnGuide_GetControllerType, IsNotSetKey) == 0x000004, "Member 'RaceUISubBtnGuide_GetControllerType::IsNotSetKey' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnGuide_GetControllerType, ReturnValue) == 0x000005, "Member 'RaceUISubBtnGuide_GetControllerType::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBtnGuide.GetUseItemKey
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubBtnGuide_GetUseItemKey final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBtnGuide_GetUseItemKey) == 0x000004, "Wrong alignment on RaceUISubBtnGuide_GetUseItemKey");
static_assert(sizeof(RaceUISubBtnGuide_GetUseItemKey) == 0x000004, "Wrong size on RaceUISubBtnGuide_GetUseItemKey");
static_assert(offsetof(RaceUISubBtnGuide_GetUseItemKey, PlayerControllerIndex) == 0x000000, "Member 'RaceUISubBtnGuide_GetUseItemKey::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.RaceUISubBtnGuide.SetUseItemKey
// 0x0018 (0x0018 - 0x0000)
struct RaceUISubBtnGuide_SetUseItemKey final
{
public:
	struct FKey                                   UseItemKey;                                        // 0x0000(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBtnGuide_SetUseItemKey) == 0x000008, "Wrong alignment on RaceUISubBtnGuide_SetUseItemKey");
static_assert(sizeof(RaceUISubBtnGuide_SetUseItemKey) == 0x000018, "Wrong size on RaceUISubBtnGuide_SetUseItemKey");
static_assert(offsetof(RaceUISubBtnGuide_SetUseItemKey, UseItemKey) == 0x000000, "Member 'RaceUISubBtnGuide_SetUseItemKey::UseItemKey' has a wrong offset!");

// Function UnionRun.RaceUISubBtnGuide.GetFlightGuideKey
// 0x0020 (0x0020 - 0x0000)
struct RaceUISubBtnGuide_GetFlightGuideKey final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuggestUpInput;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBtnGuide_GetFlightGuideKey) == 0x000008, "Wrong alignment on RaceUISubBtnGuide_GetFlightGuideKey");
static_assert(sizeof(RaceUISubBtnGuide_GetFlightGuideKey) == 0x000020, "Wrong size on RaceUISubBtnGuide_GetFlightGuideKey");
static_assert(offsetof(RaceUISubBtnGuide_GetFlightGuideKey, PlayerControllerIndex) == 0x000000, "Member 'RaceUISubBtnGuide_GetFlightGuideKey::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnGuide_GetFlightGuideKey, bSuggestUpInput) == 0x000004, "Member 'RaceUISubBtnGuide_GetFlightGuideKey::bSuggestUpInput' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnGuide_GetFlightGuideKey, ReturnValue) == 0x000008, "Member 'RaceUISubBtnGuide_GetFlightGuideKey::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBtnGuide.GetKeyDisplayName
// 0x0030 (0x0030 - 0x0000)
struct RaceUISubBtnGuide_GetKeyDisplayName final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerControllerIndex;                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBtnGuide_GetKeyDisplayName) == 0x000008, "Wrong alignment on RaceUISubBtnGuide_GetKeyDisplayName");
static_assert(sizeof(RaceUISubBtnGuide_GetKeyDisplayName) == 0x000030, "Wrong size on RaceUISubBtnGuide_GetKeyDisplayName");
static_assert(offsetof(RaceUISubBtnGuide_GetKeyDisplayName, InKey) == 0x000000, "Member 'RaceUISubBtnGuide_GetKeyDisplayName::InKey' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnGuide_GetKeyDisplayName, PlayerControllerIndex) == 0x000018, "Member 'RaceUISubBtnGuide_GetKeyDisplayName::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnGuide_GetKeyDisplayName, ReturnValue) == 0x000020, "Member 'RaceUISubBtnGuide_GetKeyDisplayName::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBtnGuide.GetMouseButtonIndex
// 0x0020 (0x0020 - 0x0000)
struct RaceUISubBtnGuide_GetMouseButtonIndex final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubBtnGuide_GetMouseButtonIndex) == 0x000008, "Wrong alignment on RaceUISubBtnGuide_GetMouseButtonIndex");
static_assert(sizeof(RaceUISubBtnGuide_GetMouseButtonIndex) == 0x000020, "Wrong size on RaceUISubBtnGuide_GetMouseButtonIndex");
static_assert(offsetof(RaceUISubBtnGuide_GetMouseButtonIndex, InKey) == 0x000000, "Member 'RaceUISubBtnGuide_GetMouseButtonIndex::InKey' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnGuide_GetMouseButtonIndex, ReturnValue) == 0x000018, "Member 'RaceUISubBtnGuide_GetMouseButtonIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBtnGuide.GetReleaseEffectKey
// 0x0020 (0x0020 - 0x0000)
struct RaceUISubBtnGuide_GetReleaseEffectKey final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBtnGuide_GetReleaseEffectKey) == 0x000008, "Wrong alignment on RaceUISubBtnGuide_GetReleaseEffectKey");
static_assert(sizeof(RaceUISubBtnGuide_GetReleaseEffectKey) == 0x000020, "Wrong size on RaceUISubBtnGuide_GetReleaseEffectKey");
static_assert(offsetof(RaceUISubBtnGuide_GetReleaseEffectKey, PlayerControllerIndex) == 0x000000, "Member 'RaceUISubBtnGuide_GetReleaseEffectKey::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnGuide_GetReleaseEffectKey, ReturnValue) == 0x000008, "Member 'RaceUISubBtnGuide_GetReleaseEffectKey::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBtnGuide.GetSteerKey
// 0x0020 (0x0020 - 0x0000)
struct RaceUISubBtnGuide_GetSteerKey final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SteerNo;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBtnGuide_GetSteerKey) == 0x000008, "Wrong alignment on RaceUISubBtnGuide_GetSteerKey");
static_assert(sizeof(RaceUISubBtnGuide_GetSteerKey) == 0x000020, "Wrong size on RaceUISubBtnGuide_GetSteerKey");
static_assert(offsetof(RaceUISubBtnGuide_GetSteerKey, PlayerControllerIndex) == 0x000000, "Member 'RaceUISubBtnGuide_GetSteerKey::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnGuide_GetSteerKey, SteerNo) == 0x000004, "Member 'RaceUISubBtnGuide_GetSteerKey::SteerNo' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnGuide_GetSteerKey, ReturnValue) == 0x000008, "Member 'RaceUISubBtnGuide_GetSteerKey::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBtnGuide.GetUseItemKeyPC
// 0x0020 (0x0020 - 0x0000)
struct RaceUISubBtnGuide_GetUseItemKeyPC final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBtnGuide_GetUseItemKeyPC) == 0x000008, "Wrong alignment on RaceUISubBtnGuide_GetUseItemKeyPC");
static_assert(sizeof(RaceUISubBtnGuide_GetUseItemKeyPC) == 0x000020, "Wrong size on RaceUISubBtnGuide_GetUseItemKeyPC");
static_assert(offsetof(RaceUISubBtnGuide_GetUseItemKeyPC, PlayerControllerIndex) == 0x000000, "Member 'RaceUISubBtnGuide_GetUseItemKeyPC::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubBtnGuide_GetUseItemKeyPC, ReturnValue) == 0x000008, "Member 'RaceUISubBtnGuide_GetUseItemKeyPC::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubBtnGuide.IsKeyboard
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubBtnGuide_IsKeyboard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubBtnGuide_IsKeyboard) == 0x000001, "Wrong alignment on RaceUISubBtnGuide_IsKeyboard");
static_assert(sizeof(RaceUISubBtnGuide_IsKeyboard) == 0x000001, "Wrong size on RaceUISubBtnGuide_IsKeyboard");
static_assert(offsetof(RaceUISubBtnGuide_IsKeyboard, ReturnValue) == 0x000000, "Member 'RaceUISubBtnGuide_IsKeyboard::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubCourseMapIcon.SetReaderFlag
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubCourseMapIcon_SetReaderFlag final
{
public:
	bool                                          InReader;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubCourseMapIcon_SetReaderFlag) == 0x000001, "Wrong alignment on RaceUISubCourseMapIcon_SetReaderFlag");
static_assert(sizeof(RaceUISubCourseMapIcon_SetReaderFlag) == 0x000001, "Wrong size on RaceUISubCourseMapIcon_SetReaderFlag");
static_assert(offsetof(RaceUISubCourseMapIcon_SetReaderFlag, InReader) == 0x000000, "Member 'RaceUISubCourseMapIcon_SetReaderFlag::InReader' has a wrong offset!");

// Function UnionRun.RaceUISubGadgetIcon.SetGadgetId
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubGadgetIcon_SetGadgetId final
{
public:
	EGadgetId                                     InGadgetId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubGadgetIcon_SetGadgetId) == 0x000001, "Wrong alignment on RaceUISubGadgetIcon_SetGadgetId");
static_assert(sizeof(RaceUISubGadgetIcon_SetGadgetId) == 0x000001, "Wrong size on RaceUISubGadgetIcon_SetGadgetId");
static_assert(offsetof(RaceUISubGadgetIcon_SetGadgetId, InGadgetId) == 0x000000, "Member 'RaceUISubGadgetIcon_SetGadgetId::InGadgetId' has a wrong offset!");

// Function UnionRun.RaceUISubGadgetIcon.SetIconMaterial
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubGadgetIcon_SetIconMaterial final
{
public:
	int32                                         IconIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubGadgetIcon_SetIconMaterial) == 0x000004, "Wrong alignment on RaceUISubGadgetIcon_SetIconMaterial");
static_assert(sizeof(RaceUISubGadgetIcon_SetIconMaterial) == 0x000004, "Wrong size on RaceUISubGadgetIcon_SetIconMaterial");
static_assert(offsetof(RaceUISubGadgetIcon_SetIconMaterial, IconIndex) == 0x000000, "Member 'RaceUISubGadgetIcon_SetIconMaterial::IconIndex' has a wrong offset!");

// Function UnionRun.RaceUISubGadgetIcon.GetGadgetId
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubGadgetIcon_GetGadgetId final
{
public:
	EGadgetId                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubGadgetIcon_GetGadgetId) == 0x000001, "Wrong alignment on RaceUISubGadgetIcon_GetGadgetId");
static_assert(sizeof(RaceUISubGadgetIcon_GetGadgetId) == 0x000001, "Wrong size on RaceUISubGadgetIcon_GetGadgetId");
static_assert(offsetof(RaceUISubGadgetIcon_GetGadgetId, ReturnValue) == 0x000000, "Member 'RaceUISubGadgetIcon_GetGadgetId::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubRing.SetCurrentRingCount
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubRing_SetCurrentRingCount final
{
public:
	int32                                         NewRingCount;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubRing_SetCurrentRingCount) == 0x000004, "Wrong alignment on RaceUISubRing_SetCurrentRingCount");
static_assert(sizeof(RaceUISubRing_SetCurrentRingCount) == 0x000004, "Wrong size on RaceUISubRing_SetCurrentRingCount");
static_assert(offsetof(RaceUISubRing_SetCurrentRingCount, NewRingCount) == 0x000000, "Member 'RaceUISubRing_SetCurrentRingCount::NewRingCount' has a wrong offset!");

// Function UnionRun.RaceUISubRing.SetParams
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubRing_SetParams final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubRing_SetParams) == 0x000004, "Wrong alignment on RaceUISubRing_SetParams");
static_assert(sizeof(RaceUISubRing_SetParams) == 0x000004, "Wrong size on RaceUISubRing_SetParams");
static_assert(offsetof(RaceUISubRing_SetParams, RacerIndex) == 0x000000, "Member 'RaceUISubRing_SetParams::RacerIndex' has a wrong offset!");

// Function UnionRun.RaceUISubRing.SetRingBackColor
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubRing_SetRingBackColor final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGroup;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocalMulti;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubRing_SetRingBackColor) == 0x000004, "Wrong alignment on RaceUISubRing_SetRingBackColor");
static_assert(sizeof(RaceUISubRing_SetRingBackColor) == 0x000008, "Wrong size on RaceUISubRing_SetRingBackColor");
static_assert(offsetof(RaceUISubRing_SetRingBackColor, Index_0) == 0x000000, "Member 'RaceUISubRing_SetRingBackColor::Index_0' has a wrong offset!");
static_assert(offsetof(RaceUISubRing_SetRingBackColor, IsGroup) == 0x000004, "Member 'RaceUISubRing_SetRingBackColor::IsGroup' has a wrong offset!");
static_assert(offsetof(RaceUISubRing_SetRingBackColor, IsLocalMulti) == 0x000005, "Member 'RaceUISubRing_SetRingBackColor::IsLocalMulti' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.IsFootCutting
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceSituationObject_IsFootCutting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_IsFootCutting) == 0x000001, "Wrong alignment on UnionRaceSituationObject_IsFootCutting");
static_assert(sizeof(UnionRaceSituationObject_IsFootCutting) == 0x000001, "Wrong size on UnionRaceSituationObject_IsFootCutting");
static_assert(offsetof(UnionRaceSituationObject_IsFootCutting, ReturnValue) == 0x000000, "Member 'UnionRaceSituationObject_IsFootCutting::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.IsTeamEnergyCharging
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceSituationObject_IsTeamEnergyCharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_IsTeamEnergyCharging) == 0x000001, "Wrong alignment on UnionRaceSituationObject_IsTeamEnergyCharging");
static_assert(sizeof(UnionRaceSituationObject_IsTeamEnergyCharging) == 0x000001, "Wrong size on UnionRaceSituationObject_IsTeamEnergyCharging");
static_assert(offsetof(UnionRaceSituationObject_IsTeamEnergyCharging, ReturnValue) == 0x000000, "Member 'UnionRaceSituationObject_IsTeamEnergyCharging::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.SetFollowingDistDiff
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_SetFollowingDistDiff final
{
public:
	float                                         followingDistance;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_SetFollowingDistDiff) == 0x000004, "Wrong alignment on UnionRaceSituationObject_SetFollowingDistDiff");
static_assert(sizeof(UnionRaceSituationObject_SetFollowingDistDiff) == 0x000004, "Wrong size on UnionRaceSituationObject_SetFollowingDistDiff");
static_assert(offsetof(UnionRaceSituationObject_SetFollowingDistDiff, followingDistance) == 0x000000, "Member 'UnionRaceSituationObject_SetFollowingDistDiff::followingDistance' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.SetFollowingRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_SetFollowingRacerIndex final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_SetFollowingRacerIndex) == 0x000004, "Wrong alignment on UnionRaceSituationObject_SetFollowingRacerIndex");
static_assert(sizeof(UnionRaceSituationObject_SetFollowingRacerIndex) == 0x000004, "Wrong size on UnionRaceSituationObject_SetFollowingRacerIndex");
static_assert(offsetof(UnionRaceSituationObject_SetFollowingRacerIndex, RacerIndex) == 0x000000, "Member 'UnionRaceSituationObject_SetFollowingRacerIndex::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.SetFollowingRatioDiff
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_SetFollowingRatioDiff final
{
public:
	float                                         followingDistance;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_SetFollowingRatioDiff) == 0x000004, "Wrong alignment on UnionRaceSituationObject_SetFollowingRatioDiff");
static_assert(sizeof(UnionRaceSituationObject_SetFollowingRatioDiff) == 0x000004, "Wrong size on UnionRaceSituationObject_SetFollowingRatioDiff");
static_assert(offsetof(UnionRaceSituationObject_SetFollowingRatioDiff, followingDistance) == 0x000000, "Member 'UnionRaceSituationObject_SetFollowingRatioDiff::followingDistance' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.SetLeadingDistDiff
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_SetLeadingDistDiff final
{
public:
	float                                         leadingDistance;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_SetLeadingDistDiff) == 0x000004, "Wrong alignment on UnionRaceSituationObject_SetLeadingDistDiff");
static_assert(sizeof(UnionRaceSituationObject_SetLeadingDistDiff) == 0x000004, "Wrong size on UnionRaceSituationObject_SetLeadingDistDiff");
static_assert(offsetof(UnionRaceSituationObject_SetLeadingDistDiff, leadingDistance) == 0x000000, "Member 'UnionRaceSituationObject_SetLeadingDistDiff::leadingDistance' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.SetLeadingRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_SetLeadingRacerIndex final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_SetLeadingRacerIndex) == 0x000004, "Wrong alignment on UnionRaceSituationObject_SetLeadingRacerIndex");
static_assert(sizeof(UnionRaceSituationObject_SetLeadingRacerIndex) == 0x000004, "Wrong size on UnionRaceSituationObject_SetLeadingRacerIndex");
static_assert(offsetof(UnionRaceSituationObject_SetLeadingRacerIndex, RacerIndex) == 0x000000, "Member 'UnionRaceSituationObject_SetLeadingRacerIndex::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.SetLeadingRatioDiff
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_SetLeadingRatioDiff final
{
public:
	float                                         leadingDistance;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_SetLeadingRatioDiff) == 0x000004, "Wrong alignment on UnionRaceSituationObject_SetLeadingRatioDiff");
static_assert(sizeof(UnionRaceSituationObject_SetLeadingRatioDiff) == 0x000004, "Wrong size on UnionRaceSituationObject_SetLeadingRatioDiff");
static_assert(offsetof(UnionRaceSituationObject_SetLeadingRatioDiff, leadingDistance) == 0x000000, "Member 'UnionRaceSituationObject_SetLeadingRatioDiff::leadingDistance' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.SetOddNumRankSeconds
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_SetOddNumRankSeconds final
{
public:
	float                                         oddNumRankSeconds_0;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_SetOddNumRankSeconds) == 0x000004, "Wrong alignment on UnionRaceSituationObject_SetOddNumRankSeconds");
static_assert(sizeof(UnionRaceSituationObject_SetOddNumRankSeconds) == 0x000004, "Wrong size on UnionRaceSituationObject_SetOddNumRankSeconds");
static_assert(offsetof(UnionRaceSituationObject_SetOddNumRankSeconds, oddNumRankSeconds_0) == 0x000000, "Member 'UnionRaceSituationObject_SetOddNumRankSeconds::oddNumRankSeconds_0' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.SetPrevRank
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_SetPrevRank final
{
public:
	int32                                         Rank_0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_SetPrevRank) == 0x000004, "Wrong alignment on UnionRaceSituationObject_SetPrevRank");
static_assert(sizeof(UnionRaceSituationObject_SetPrevRank) == 0x000004, "Wrong size on UnionRaceSituationObject_SetPrevRank");
static_assert(offsetof(UnionRaceSituationObject_SetPrevRank, Rank_0) == 0x000000, "Member 'UnionRaceSituationObject_SetPrevRank::Rank_0' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.SetRank
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_SetRank final
{
public:
	int32                                         Rank_0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_SetRank) == 0x000004, "Wrong alignment on UnionRaceSituationObject_SetRank");
static_assert(sizeof(UnionRaceSituationObject_SetRank) == 0x000004, "Wrong size on UnionRaceSituationObject_SetRank");
static_assert(offsetof(UnionRaceSituationObject_SetRank, Rank_0) == 0x000000, "Member 'UnionRaceSituationObject_SetRank::Rank_0' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.SetRivalDistDiff
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_SetRivalDistDiff final
{
public:
	float                                         rivalDistDiff_0;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_SetRivalDistDiff) == 0x000004, "Wrong alignment on UnionRaceSituationObject_SetRivalDistDiff");
static_assert(sizeof(UnionRaceSituationObject_SetRivalDistDiff) == 0x000004, "Wrong size on UnionRaceSituationObject_SetRivalDistDiff");
static_assert(offsetof(UnionRaceSituationObject_SetRivalDistDiff, rivalDistDiff_0) == 0x000000, "Member 'UnionRaceSituationObject_SetRivalDistDiff::rivalDistDiff_0' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.SetTeamEnergyCharging
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceSituationObject_SetTeamEnergyCharging final
{
public:
	bool                                          bCharging;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_SetTeamEnergyCharging) == 0x000001, "Wrong alignment on UnionRaceSituationObject_SetTeamEnergyCharging");
static_assert(sizeof(UnionRaceSituationObject_SetTeamEnergyCharging) == 0x000001, "Wrong size on UnionRaceSituationObject_SetTeamEnergyCharging");
static_assert(offsetof(UnionRaceSituationObject_SetTeamEnergyCharging, bCharging) == 0x000000, "Member 'UnionRaceSituationObject_SetTeamEnergyCharging::bCharging' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.GetFollowingDistDiff
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_GetFollowingDistDiff final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_GetFollowingDistDiff) == 0x000004, "Wrong alignment on UnionRaceSituationObject_GetFollowingDistDiff");
static_assert(sizeof(UnionRaceSituationObject_GetFollowingDistDiff) == 0x000004, "Wrong size on UnionRaceSituationObject_GetFollowingDistDiff");
static_assert(offsetof(UnionRaceSituationObject_GetFollowingDistDiff, ReturnValue) == 0x000000, "Member 'UnionRaceSituationObject_GetFollowingDistDiff::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.GetFollowingRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_GetFollowingRacerIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_GetFollowingRacerIndex) == 0x000004, "Wrong alignment on UnionRaceSituationObject_GetFollowingRacerIndex");
static_assert(sizeof(UnionRaceSituationObject_GetFollowingRacerIndex) == 0x000004, "Wrong size on UnionRaceSituationObject_GetFollowingRacerIndex");
static_assert(offsetof(UnionRaceSituationObject_GetFollowingRacerIndex, ReturnValue) == 0x000000, "Member 'UnionRaceSituationObject_GetFollowingRacerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.GetFollowingRatioDiff
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_GetFollowingRatioDiff final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_GetFollowingRatioDiff) == 0x000004, "Wrong alignment on UnionRaceSituationObject_GetFollowingRatioDiff");
static_assert(sizeof(UnionRaceSituationObject_GetFollowingRatioDiff) == 0x000004, "Wrong size on UnionRaceSituationObject_GetFollowingRatioDiff");
static_assert(offsetof(UnionRaceSituationObject_GetFollowingRatioDiff, ReturnValue) == 0x000000, "Member 'UnionRaceSituationObject_GetFollowingRatioDiff::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.GetLeadingDistDiff
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_GetLeadingDistDiff final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_GetLeadingDistDiff) == 0x000004, "Wrong alignment on UnionRaceSituationObject_GetLeadingDistDiff");
static_assert(sizeof(UnionRaceSituationObject_GetLeadingDistDiff) == 0x000004, "Wrong size on UnionRaceSituationObject_GetLeadingDistDiff");
static_assert(offsetof(UnionRaceSituationObject_GetLeadingDistDiff, ReturnValue) == 0x000000, "Member 'UnionRaceSituationObject_GetLeadingDistDiff::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.GetLeadingRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_GetLeadingRacerIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_GetLeadingRacerIndex) == 0x000004, "Wrong alignment on UnionRaceSituationObject_GetLeadingRacerIndex");
static_assert(sizeof(UnionRaceSituationObject_GetLeadingRacerIndex) == 0x000004, "Wrong size on UnionRaceSituationObject_GetLeadingRacerIndex");
static_assert(offsetof(UnionRaceSituationObject_GetLeadingRacerIndex, ReturnValue) == 0x000000, "Member 'UnionRaceSituationObject_GetLeadingRacerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.GetLeadingRatioDiff
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_GetLeadingRatioDiff final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_GetLeadingRatioDiff) == 0x000004, "Wrong alignment on UnionRaceSituationObject_GetLeadingRatioDiff");
static_assert(sizeof(UnionRaceSituationObject_GetLeadingRatioDiff) == 0x000004, "Wrong size on UnionRaceSituationObject_GetLeadingRatioDiff");
static_assert(offsetof(UnionRaceSituationObject_GetLeadingRatioDiff, ReturnValue) == 0x000000, "Member 'UnionRaceSituationObject_GetLeadingRatioDiff::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.GetOddNumRankSeconds
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_GetOddNumRankSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_GetOddNumRankSeconds) == 0x000004, "Wrong alignment on UnionRaceSituationObject_GetOddNumRankSeconds");
static_assert(sizeof(UnionRaceSituationObject_GetOddNumRankSeconds) == 0x000004, "Wrong size on UnionRaceSituationObject_GetOddNumRankSeconds");
static_assert(offsetof(UnionRaceSituationObject_GetOddNumRankSeconds, ReturnValue) == 0x000000, "Member 'UnionRaceSituationObject_GetOddNumRankSeconds::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.GetPrevRank
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_GetPrevRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_GetPrevRank) == 0x000004, "Wrong alignment on UnionRaceSituationObject_GetPrevRank");
static_assert(sizeof(UnionRaceSituationObject_GetPrevRank) == 0x000004, "Wrong size on UnionRaceSituationObject_GetPrevRank");
static_assert(offsetof(UnionRaceSituationObject_GetPrevRank, ReturnValue) == 0x000000, "Member 'UnionRaceSituationObject_GetPrevRank::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.GetRank
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_GetRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_GetRank) == 0x000004, "Wrong alignment on UnionRaceSituationObject_GetRank");
static_assert(sizeof(UnionRaceSituationObject_GetRank) == 0x000004, "Wrong size on UnionRaceSituationObject_GetRank");
static_assert(offsetof(UnionRaceSituationObject_GetRank, ReturnValue) == 0x000000, "Member 'UnionRaceSituationObject_GetRank::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceSituationObject.GetRivalDistDiff
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceSituationObject_GetRivalDistDiff final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceSituationObject_GetRivalDistDiff) == 0x000004, "Wrong alignment on UnionRaceSituationObject_GetRivalDistDiff");
static_assert(sizeof(UnionRaceSituationObject_GetRivalDistDiff) == 0x000004, "Wrong size on UnionRaceSituationObject_GetRivalDistDiff");
static_assert(offsetof(UnionRaceSituationObject_GetRivalDistDiff, ReturnValue) == 0x000000, "Member 'UnionRaceSituationObject_GetRivalDistDiff::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubGroupRing.SetRingCharaIcon
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubGroupRing_SetRingCharaIcon final
{
public:
	EDriverId                                     DriverId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubGroupRing_SetRingCharaIcon) == 0x000001, "Wrong alignment on RaceUISubGroupRing_SetRingCharaIcon");
static_assert(sizeof(RaceUISubGroupRing_SetRingCharaIcon) == 0x000001, "Wrong size on RaceUISubGroupRing_SetRingCharaIcon");
static_assert(offsetof(RaceUISubGroupRing_SetRingCharaIcon, DriverId) == 0x000000, "Member 'RaceUISubGroupRing_SetRingCharaIcon::DriverId' has a wrong offset!");

// Function UnionRun.RaceUISubHitInfo.SetCharaIndex
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubHitInfo_SetCharaIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRival;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubHitInfo_SetCharaIndex) == 0x000004, "Wrong alignment on RaceUISubHitInfo_SetCharaIndex");
static_assert(sizeof(RaceUISubHitInfo_SetCharaIndex) == 0x000008, "Wrong size on RaceUISubHitInfo_SetCharaIndex");
static_assert(offsetof(RaceUISubHitInfo_SetCharaIndex, Index_0) == 0x000000, "Member 'RaceUISubHitInfo_SetCharaIndex::Index_0' has a wrong offset!");
static_assert(offsetof(RaceUISubHitInfo_SetCharaIndex, IsRival) == 0x000004, "Member 'RaceUISubHitInfo_SetCharaIndex::IsRival' has a wrong offset!");

// Function UnionRun.RaceUISubHitInfo.SetGroupColorMaterial
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubHitInfo_SetGroupColorMaterial final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubHitInfo_SetGroupColorMaterial) == 0x000004, "Wrong alignment on RaceUISubHitInfo_SetGroupColorMaterial");
static_assert(sizeof(RaceUISubHitInfo_SetGroupColorMaterial) == 0x000004, "Wrong size on RaceUISubHitInfo_SetGroupColorMaterial");
static_assert(offsetof(RaceUISubHitInfo_SetGroupColorMaterial, Index_0) == 0x000000, "Member 'RaceUISubHitInfo_SetGroupColorMaterial::Index_0' has a wrong offset!");

// Function UnionRun.RaceUISubHitInfo.SetLocalPlayerColorMaterial
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubHitInfo_SetLocalPlayerColorMaterial final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubHitInfo_SetLocalPlayerColorMaterial) == 0x000004, "Wrong alignment on RaceUISubHitInfo_SetLocalPlayerColorMaterial");
static_assert(sizeof(RaceUISubHitInfo_SetLocalPlayerColorMaterial) == 0x000004, "Wrong size on RaceUISubHitInfo_SetLocalPlayerColorMaterial");
static_assert(offsetof(RaceUISubHitInfo_SetLocalPlayerColorMaterial, Index_0) == 0x000000, "Member 'RaceUISubHitInfo_SetLocalPlayerColorMaterial::Index_0' has a wrong offset!");

// Function UnionRun.RaceUISubHitInfo.SetLostItemIdIndex_Implement
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubHitInfo_SetLostItemIdIndex_Implement final
{
public:
	int32                                         InItemIdIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubHitInfo_SetLostItemIdIndex_Implement) == 0x000004, "Wrong alignment on RaceUISubHitInfo_SetLostItemIdIndex_Implement");
static_assert(sizeof(RaceUISubHitInfo_SetLostItemIdIndex_Implement) == 0x000004, "Wrong size on RaceUISubHitInfo_SetLostItemIdIndex_Implement");
static_assert(offsetof(RaceUISubHitInfo_SetLostItemIdIndex_Implement, InItemIdIndex) == 0x000000, "Member 'RaceUISubHitInfo_SetLostItemIdIndex_Implement::InItemIdIndex' has a wrong offset!");

// Function UnionRun.RaceUISubHitInfo.SetPlatformIcon
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubHitInfo_SetPlatformIcon final
{
public:
	ECrossplayPlatform                            Platform;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubHitInfo_SetPlatformIcon) == 0x000001, "Wrong alignment on RaceUISubHitInfo_SetPlatformIcon");
static_assert(sizeof(RaceUISubHitInfo_SetPlatformIcon) == 0x000001, "Wrong size on RaceUISubHitInfo_SetPlatformIcon");
static_assert(offsetof(RaceUISubHitInfo_SetPlatformIcon, Platform) == 0x000000, "Member 'RaceUISubHitInfo_SetPlatformIcon::Platform' has a wrong offset!");

// Function UnionRun.RaceUISubHitInfo.SwitchBaseUI
// 0x0002 (0x0002 - 0x0000)
struct RaceUISubHitInfo_SwitchBaseUI final
{
public:
	bool                                          IsRival;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPowerRival;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubHitInfo_SwitchBaseUI) == 0x000001, "Wrong alignment on RaceUISubHitInfo_SwitchBaseUI");
static_assert(sizeof(RaceUISubHitInfo_SwitchBaseUI) == 0x000002, "Wrong size on RaceUISubHitInfo_SwitchBaseUI");
static_assert(offsetof(RaceUISubHitInfo_SwitchBaseUI, IsRival) == 0x000000, "Member 'RaceUISubHitInfo_SwitchBaseUI::IsRival' has a wrong offset!");
static_assert(offsetof(RaceUISubHitInfo_SwitchBaseUI, IsPowerRival) == 0x000001, "Member 'RaceUISubHitInfo_SwitchBaseUI::IsPowerRival' has a wrong offset!");

// Function UnionRun.RaceUISubItemIcon.DisplayHideAnim
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubItemIcon_DisplayHideAnim final
{
public:
	bool                                          Display;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubItemIcon_DisplayHideAnim) == 0x000001, "Wrong alignment on RaceUISubItemIcon_DisplayHideAnim");
static_assert(sizeof(RaceUISubItemIcon_DisplayHideAnim) == 0x000001, "Wrong size on RaceUISubItemIcon_DisplayHideAnim");
static_assert(offsetof(RaceUISubItemIcon_DisplayHideAnim, Display) == 0x000000, "Member 'RaceUISubItemIcon_DisplayHideAnim::Display' has a wrong offset!");

// Function UnionRun.RaceUISubItemIcon.GetRandomLotteryDisplayItemId
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubItemIcon_GetRandomLotteryDisplayItemId final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubItemIcon_GetRandomLotteryDisplayItemId) == 0x000001, "Wrong alignment on RaceUISubItemIcon_GetRandomLotteryDisplayItemId");
static_assert(sizeof(RaceUISubItemIcon_GetRandomLotteryDisplayItemId) == 0x000001, "Wrong size on RaceUISubItemIcon_GetRandomLotteryDisplayItemId");
static_assert(offsetof(RaceUISubItemIcon_GetRandomLotteryDisplayItemId, ReturnValue) == 0x000000, "Member 'RaceUISubItemIcon_GetRandomLotteryDisplayItemId::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubItemIcon.ItemLostAnimStart
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubItemIcon_ItemLostAnimStart final
{
public:
	bool                                          bHideIcon;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubItemIcon_ItemLostAnimStart) == 0x000001, "Wrong alignment on RaceUISubItemIcon_ItemLostAnimStart");
static_assert(sizeof(RaceUISubItemIcon_ItemLostAnimStart) == 0x000001, "Wrong size on RaceUISubItemIcon_ItemLostAnimStart");
static_assert(offsetof(RaceUISubItemIcon_ItemLostAnimStart, bHideIcon) == 0x000000, "Member 'RaceUISubItemIcon_ItemLostAnimStart::bHideIcon' has a wrong offset!");

// Function UnionRun.RaceUISubItemIcon.LotterySeqStart
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubItemIcon_LotterySeqStart final
{
public:
	bool                                          LotterySound;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubItemIcon_LotterySeqStart) == 0x000001, "Wrong alignment on RaceUISubItemIcon_LotterySeqStart");
static_assert(sizeof(RaceUISubItemIcon_LotterySeqStart) == 0x000001, "Wrong size on RaceUISubItemIcon_LotterySeqStart");
static_assert(offsetof(RaceUISubItemIcon_LotterySeqStart, LotterySound) == 0x000000, "Member 'RaceUISubItemIcon_LotterySeqStart::LotterySound' has a wrong offset!");

// Function UnionRun.RaceUISubItemIcon.SetAttributeColorIndex
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubItemIcon_SetAttributeColorIndex final
{
public:
	int32                                         InAttributeIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubItemIcon_SetAttributeColorIndex) == 0x000004, "Wrong alignment on RaceUISubItemIcon_SetAttributeColorIndex");
static_assert(sizeof(RaceUISubItemIcon_SetAttributeColorIndex) == 0x000004, "Wrong size on RaceUISubItemIcon_SetAttributeColorIndex");
static_assert(offsetof(RaceUISubItemIcon_SetAttributeColorIndex, InAttributeIndex) == 0x000000, "Member 'RaceUISubItemIcon_SetAttributeColorIndex::InAttributeIndex' has a wrong offset!");

// Function UnionRun.RaceUISubItemIcon.SetGaugeType
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubItemIcon_SetGaugeType final
{
public:
	bool                                          bRemainCountGauge;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubItemIcon_SetGaugeType) == 0x000001, "Wrong alignment on RaceUISubItemIcon_SetGaugeType");
static_assert(sizeof(RaceUISubItemIcon_SetGaugeType) == 0x000001, "Wrong size on RaceUISubItemIcon_SetGaugeType");
static_assert(offsetof(RaceUISubItemIcon_SetGaugeType, bRemainCountGauge) == 0x000000, "Member 'RaceUISubItemIcon_SetGaugeType::bRemainCountGauge' has a wrong offset!");

// Function UnionRun.RaceUISubItemIcon.SetItemIdIndex
// 0x000C (0x000C - 0x0000)
struct RaceUISubItemIcon_SetItemIdIndex final
{
public:
	int32                                         InItemIdIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRemainCount;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAttribute;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnLottery;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubItemIcon_SetItemIdIndex) == 0x000004, "Wrong alignment on RaceUISubItemIcon_SetItemIdIndex");
static_assert(sizeof(RaceUISubItemIcon_SetItemIdIndex) == 0x00000C, "Wrong size on RaceUISubItemIcon_SetItemIdIndex");
static_assert(offsetof(RaceUISubItemIcon_SetItemIdIndex, InItemIdIndex) == 0x000000, "Member 'RaceUISubItemIcon_SetItemIdIndex::InItemIdIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubItemIcon_SetItemIdIndex, InRemainCount) == 0x000004, "Member 'RaceUISubItemIcon_SetItemIdIndex::InRemainCount' has a wrong offset!");
static_assert(offsetof(RaceUISubItemIcon_SetItemIdIndex, bIgnoreAttribute) == 0x000008, "Member 'RaceUISubItemIcon_SetItemIdIndex::bIgnoreAttribute' has a wrong offset!");
static_assert(offsetof(RaceUISubItemIcon_SetItemIdIndex, bOnLottery) == 0x000009, "Member 'RaceUISubItemIcon_SetItemIdIndex::bOnLottery' has a wrong offset!");

// Function UnionRun.RaceUISubItemIcon.SetItemIdTexture
// 0x0050 (0x0050 - 0x0000)
struct RaceUISubItemIcon_SetItemIdTexture final
{
public:
	TMap<EItemId, class UTexture2D*>              InItemId_TextureMap;                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubItemIcon_SetItemIdTexture) == 0x000008, "Wrong alignment on RaceUISubItemIcon_SetItemIdTexture");
static_assert(sizeof(RaceUISubItemIcon_SetItemIdTexture) == 0x000050, "Wrong size on RaceUISubItemIcon_SetItemIdTexture");
static_assert(offsetof(RaceUISubItemIcon_SetItemIdTexture, InItemId_TextureMap) == 0x000000, "Member 'RaceUISubItemIcon_SetItemIdTexture::InItemId_TextureMap' has a wrong offset!");

// Function UnionRun.RaceUISubItemIcon.SetLotteryDisplayItemIds
// 0x0010 (0x0010 - 0x0000)
struct RaceUISubItemIcon_SetLotteryDisplayItemIds final
{
public:
	TArray<uint8>                                 ItemIds;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubItemIcon_SetLotteryDisplayItemIds) == 0x000008, "Wrong alignment on RaceUISubItemIcon_SetLotteryDisplayItemIds");
static_assert(sizeof(RaceUISubItemIcon_SetLotteryDisplayItemIds) == 0x000010, "Wrong size on RaceUISubItemIcon_SetLotteryDisplayItemIds");
static_assert(offsetof(RaceUISubItemIcon_SetLotteryDisplayItemIds, ItemIds) == 0x000000, "Member 'RaceUISubItemIcon_SetLotteryDisplayItemIds::ItemIds' has a wrong offset!");

// Function UnionRun.RaceUISubItemIcon.SetRemainCountGauge
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubItemIcon_SetRemainCountGauge final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubItemIcon_SetRemainCountGauge) == 0x000004, "Wrong alignment on RaceUISubItemIcon_SetRemainCountGauge");
static_assert(sizeof(RaceUISubItemIcon_SetRemainCountGauge) == 0x000008, "Wrong size on RaceUISubItemIcon_SetRemainCountGauge");
static_assert(offsetof(RaceUISubItemIcon_SetRemainCountGauge, Count) == 0x000000, "Member 'RaceUISubItemIcon_SetRemainCountGauge::Count' has a wrong offset!");
static_assert(offsetof(RaceUISubItemIcon_SetRemainCountGauge, MaxCount) == 0x000004, "Member 'RaceUISubItemIcon_SetRemainCountGauge::MaxCount' has a wrong offset!");

// Function UnionRun.RaceUISubItemIcon.SetRingNum
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubItemIcon_SetRingNum final
{
public:
	int32                                         InRingCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubItemIcon_SetRingNum) == 0x000004, "Wrong alignment on RaceUISubItemIcon_SetRingNum");
static_assert(sizeof(RaceUISubItemIcon_SetRingNum) == 0x000004, "Wrong size on RaceUISubItemIcon_SetRingNum");
static_assert(offsetof(RaceUISubItemIcon_SetRingNum, InRingCount) == 0x000000, "Member 'RaceUISubItemIcon_SetRingNum::InRingCount' has a wrong offset!");

// Function UnionRun.RaceUISubItemIcon.SetRingNumVisible
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubItemIcon_SetRingNumVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubItemIcon_SetRingNumVisible) == 0x000001, "Wrong alignment on RaceUISubItemIcon_SetRingNumVisible");
static_assert(sizeof(RaceUISubItemIcon_SetRingNumVisible) == 0x000001, "Wrong size on RaceUISubItemIcon_SetRingNumVisible");
static_assert(offsetof(RaceUISubItemIcon_SetRingNumVisible, bVisible) == 0x000000, "Member 'RaceUISubItemIcon_SetRingNumVisible::bVisible' has a wrong offset!");

// Function UnionRun.RaceUISubItemSummonButton.SetSummonInputKey
// 0x0020 (0x0020 - 0x0000)
struct RaceUISubItemSummonButton_SetSummonInputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKeyboard;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerControllerIndex;                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubItemSummonButton_SetSummonInputKey) == 0x000008, "Wrong alignment on RaceUISubItemSummonButton_SetSummonInputKey");
static_assert(sizeof(RaceUISubItemSummonButton_SetSummonInputKey) == 0x000020, "Wrong size on RaceUISubItemSummonButton_SetSummonInputKey");
static_assert(offsetof(RaceUISubItemSummonButton_SetSummonInputKey, Key) == 0x000000, "Member 'RaceUISubItemSummonButton_SetSummonInputKey::Key' has a wrong offset!");
static_assert(offsetof(RaceUISubItemSummonButton_SetSummonInputKey, IsKeyboard) == 0x000018, "Member 'RaceUISubItemSummonButton_SetSummonInputKey::IsKeyboard' has a wrong offset!");
static_assert(offsetof(RaceUISubItemSummonButton_SetSummonInputKey, PlayerControllerIndex) == 0x00001C, "Member 'RaceUISubItemSummonButton_SetSummonInputKey::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.RaceUISubLap.InitializeLapCount
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubLap_InitializeLapCount final
{
public:
	class UTextureRenderTarget2D*                 InRenderTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubLap_InitializeLapCount) == 0x000008, "Wrong alignment on RaceUISubLap_InitializeLapCount");
static_assert(sizeof(RaceUISubLap_InitializeLapCount) == 0x000008, "Wrong size on RaceUISubLap_InitializeLapCount");
static_assert(offsetof(RaceUISubLap_InitializeLapCount, InRenderTarget) == 0x000000, "Member 'RaceUISubLap_InitializeLapCount::InRenderTarget' has a wrong offset!");

// Function UnionRun.RaceUISubLap.SetCurrentLap
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubLap_SetCurrentLap final
{
public:
	int32                                         Lap;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubLap_SetCurrentLap) == 0x000004, "Wrong alignment on RaceUISubLap_SetCurrentLap");
static_assert(sizeof(RaceUISubLap_SetCurrentLap) == 0x000004, "Wrong size on RaceUISubLap_SetCurrentLap");
static_assert(offsetof(RaceUISubLap_SetCurrentLap, Lap) == 0x000000, "Member 'RaceUISubLap_SetCurrentLap::Lap' has a wrong offset!");

// Function UnionRun.RaceUISubLap.SetCurrentLapMID
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubLap_SetCurrentLapMID final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubLap_SetCurrentLapMID) == 0x000008, "Wrong alignment on RaceUISubLap_SetCurrentLapMID");
static_assert(sizeof(RaceUISubLap_SetCurrentLapMID) == 0x000008, "Wrong size on RaceUISubLap_SetCurrentLapMID");
static_assert(offsetof(RaceUISubLap_SetCurrentLapMID, Mid) == 0x000000, "Member 'RaceUISubLap_SetCurrentLapMID::Mid' has a wrong offset!");

// Function UnionRun.RaceUISubLap.SetMaxLap
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubLap_SetMaxLap final
{
public:
	int32                                         Lap;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubLap_SetMaxLap) == 0x000004, "Wrong alignment on RaceUISubLap_SetMaxLap");
static_assert(sizeof(RaceUISubLap_SetMaxLap) == 0x000004, "Wrong size on RaceUISubLap_SetMaxLap");
static_assert(offsetof(RaceUISubLap_SetMaxLap, Lap) == 0x000000, "Member 'RaceUISubLap_SetMaxLap::Lap' has a wrong offset!");

// Function UnionRun.RaceUISubLap.SetMaxLapMID
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubLap_SetMaxLapMID final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubLap_SetMaxLapMID) == 0x000008, "Wrong alignment on RaceUISubLap_SetMaxLapMID");
static_assert(sizeof(RaceUISubLap_SetMaxLapMID) == 0x000008, "Wrong size on RaceUISubLap_SetMaxLapMID");
static_assert(offsetof(RaceUISubLap_SetMaxLapMID, Mid) == 0x000000, "Member 'RaceUISubLap_SetMaxLapMID::Mid' has a wrong offset!");

// Function UnionRun.RaceUISubLap.UpdateLapCount
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubLap_UpdateLapCount final
{
public:
	float                                         InDelta;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubLap_UpdateLapCount) == 0x000004, "Wrong alignment on RaceUISubLap_UpdateLapCount");
static_assert(sizeof(RaceUISubLap_UpdateLapCount) == 0x000004, "Wrong size on RaceUISubLap_UpdateLapCount");
static_assert(offsetof(RaceUISubLap_UpdateLapCount, InDelta) == 0x000000, "Member 'RaceUISubLap_UpdateLapCount::InDelta' has a wrong offset!");

// Function UnionRun.RaceUISubReturnDashGauge.GetButtonWidget
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubReturnDashGauge_GetButtonWidget final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubReturnDashGauge_GetButtonWidget) == 0x000008, "Wrong alignment on RaceUISubReturnDashGauge_GetButtonWidget");
static_assert(sizeof(RaceUISubReturnDashGauge_GetButtonWidget) == 0x000008, "Wrong size on RaceUISubReturnDashGauge_GetButtonWidget");
static_assert(offsetof(RaceUISubReturnDashGauge_GetButtonWidget, ReturnValue) == 0x000000, "Member 'RaceUISubReturnDashGauge_GetButtonWidget::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubReturnDashGauge.SetDashInputKey
// 0x0018 (0x0018 - 0x0000)
struct RaceUISubReturnDashGauge_SetDashInputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubReturnDashGauge_SetDashInputKey) == 0x000008, "Wrong alignment on RaceUISubReturnDashGauge_SetDashInputKey");
static_assert(sizeof(RaceUISubReturnDashGauge_SetDashInputKey) == 0x000018, "Wrong size on RaceUISubReturnDashGauge_SetDashInputKey");
static_assert(offsetof(RaceUISubReturnDashGauge_SetDashInputKey, Key) == 0x000000, "Member 'RaceUISubReturnDashGauge_SetDashInputKey::Key' has a wrong offset!");

// Function UnionRun.RaceUISubReturnDashGauge.SetGaugeParcent
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubReturnDashGauge_SetGaugeParcent final
{
public:
	float                                         GaugeRate;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubReturnDashGauge_SetGaugeParcent) == 0x000004, "Wrong alignment on RaceUISubReturnDashGauge_SetGaugeParcent");
static_assert(sizeof(RaceUISubReturnDashGauge_SetGaugeParcent) == 0x000004, "Wrong size on RaceUISubReturnDashGauge_SetGaugeParcent");
static_assert(offsetof(RaceUISubReturnDashGauge_SetGaugeParcent, GaugeRate) == 0x000000, "Member 'RaceUISubReturnDashGauge_SetGaugeParcent::GaugeRate' has a wrong offset!");

// Function UnionRun.RaceUISubReturnDashGauge.SetGaugePivotAndRange
// 0x0010 (0x0010 - 0x0000)
struct RaceUISubReturnDashGauge_SetGaugePivotAndRange final
{
public:
	class UImage*                                 ImageRef;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PivotRate;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeRateRange;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubReturnDashGauge_SetGaugePivotAndRange) == 0x000008, "Wrong alignment on RaceUISubReturnDashGauge_SetGaugePivotAndRange");
static_assert(sizeof(RaceUISubReturnDashGauge_SetGaugePivotAndRange) == 0x000010, "Wrong size on RaceUISubReturnDashGauge_SetGaugePivotAndRange");
static_assert(offsetof(RaceUISubReturnDashGauge_SetGaugePivotAndRange, ImageRef) == 0x000000, "Member 'RaceUISubReturnDashGauge_SetGaugePivotAndRange::ImageRef' has a wrong offset!");
static_assert(offsetof(RaceUISubReturnDashGauge_SetGaugePivotAndRange, PivotRate) == 0x000008, "Member 'RaceUISubReturnDashGauge_SetGaugePivotAndRange::PivotRate' has a wrong offset!");
static_assert(offsetof(RaceUISubReturnDashGauge_SetGaugePivotAndRange, GaugeRateRange) == 0x00000C, "Member 'RaceUISubReturnDashGauge_SetGaugePivotAndRange::GaugeRateRange' has a wrong offset!");

// Function UnionRun.RaceUISubReturnDashGauge.SetReturnDashSetting
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubReturnDashGauge_SetReturnDashSetting final
{
public:
	float                                         Pivot;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubReturnDashGauge_SetReturnDashSetting) == 0x000004, "Wrong alignment on RaceUISubReturnDashGauge_SetReturnDashSetting");
static_assert(sizeof(RaceUISubReturnDashGauge_SetReturnDashSetting) == 0x000008, "Wrong size on RaceUISubReturnDashGauge_SetReturnDashSetting");
static_assert(offsetof(RaceUISubReturnDashGauge_SetReturnDashSetting, Pivot) == 0x000000, "Member 'RaceUISubReturnDashGauge_SetReturnDashSetting::Pivot' has a wrong offset!");
static_assert(offsetof(RaceUISubReturnDashGauge_SetReturnDashSetting, Range) == 0x000004, "Member 'RaceUISubReturnDashGauge_SetReturnDashSetting::Range' has a wrong offset!");

// Function UnionRun.RaceUISubRuleCount.GetCount
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubRuleCount_GetCount final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubRuleCount_GetCount) == 0x000004, "Wrong alignment on RaceUISubRuleCount_GetCount");
static_assert(sizeof(RaceUISubRuleCount_GetCount) == 0x000008, "Wrong size on RaceUISubRuleCount_GetCount");
static_assert(offsetof(RaceUISubRuleCount_GetCount, RacerIndex) == 0x000000, "Member 'RaceUISubRuleCount_GetCount::RacerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubRuleCount_GetCount, ReturnValue) == 0x000004, "Member 'RaceUISubRuleCount_GetCount::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubRuleCount.GetGroupRaceBonusData
// 0x0070 (0x0070 - 0x0000)
struct RaceUISubRuleCount_GetGroupRaceBonusData final
{
public:
	struct FMenuGroupRaceBonusData                ReturnValue;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubRuleCount_GetGroupRaceBonusData) == 0x000008, "Wrong alignment on RaceUISubRuleCount_GetGroupRaceBonusData");
static_assert(sizeof(RaceUISubRuleCount_GetGroupRaceBonusData) == 0x000070, "Wrong size on RaceUISubRuleCount_GetGroupRaceBonusData");
static_assert(offsetof(RaceUISubRuleCount_GetGroupRaceBonusData, ReturnValue) == 0x000000, "Member 'RaceUISubRuleCount_GetGroupRaceBonusData::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubRuleCount.SetNewCount
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubRuleCount_SetNewCount final
{
public:
	int32                                         NewCuont;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubRuleCount_SetNewCount) == 0x000004, "Wrong alignment on RaceUISubRuleCount_SetNewCount");
static_assert(sizeof(RaceUISubRuleCount_SetNewCount) == 0x000004, "Wrong size on RaceUISubRuleCount_SetNewCount");
static_assert(offsetof(RaceUISubRuleCount_SetNewCount, NewCuont) == 0x000000, "Member 'RaceUISubRuleCount_SetNewCount::NewCuont' has a wrong offset!");

// Function UnionRun.RaceUISubRuleCount.UpdateRuleCountImpl
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubRuleCount_UpdateRuleCountImpl final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubRuleCount_UpdateRuleCountImpl) == 0x000004, "Wrong alignment on RaceUISubRuleCount_UpdateRuleCountImpl");
static_assert(sizeof(RaceUISubRuleCount_UpdateRuleCountImpl) == 0x000004, "Wrong size on RaceUISubRuleCount_UpdateRuleCountImpl");
static_assert(offsetof(RaceUISubRuleCount_UpdateRuleCountImpl, RacerIndex) == 0x000000, "Member 'RaceUISubRuleCount_UpdateRuleCountImpl::RacerIndex' has a wrong offset!");

// Function UnionRun.RaceUISubStartGauge.GetButtonWidget
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubStartGauge_GetButtonWidget final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubStartGauge_GetButtonWidget) == 0x000008, "Wrong alignment on RaceUISubStartGauge_GetButtonWidget");
static_assert(sizeof(RaceUISubStartGauge_GetButtonWidget) == 0x000008, "Wrong size on RaceUISubStartGauge_GetButtonWidget");
static_assert(offsetof(RaceUISubStartGauge_GetButtonWidget, ReturnValue) == 0x000000, "Member 'RaceUISubStartGauge_GetButtonWidget::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubStartGauge.GetKeyAccel
// 0x0020 (0x0020 - 0x0000)
struct RaceUISubStartGauge_GetKeyAccel final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubStartGauge_GetKeyAccel) == 0x000008, "Wrong alignment on RaceUISubStartGauge_GetKeyAccel");
static_assert(sizeof(RaceUISubStartGauge_GetKeyAccel) == 0x000020, "Wrong size on RaceUISubStartGauge_GetKeyAccel");
static_assert(offsetof(RaceUISubStartGauge_GetKeyAccel, PlayerIndex) == 0x000000, "Member 'RaceUISubStartGauge_GetKeyAccel::PlayerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubStartGauge_GetKeyAccel, ReturnValue) == 0x000008, "Member 'RaceUISubStartGauge_GetKeyAccel::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubStartGauge.IsPlayControlKeyboard
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubStartGauge_IsPlayControlKeyboard final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubStartGauge_IsPlayControlKeyboard) == 0x000004, "Wrong alignment on RaceUISubStartGauge_IsPlayControlKeyboard");
static_assert(sizeof(RaceUISubStartGauge_IsPlayControlKeyboard) == 0x000008, "Wrong size on RaceUISubStartGauge_IsPlayControlKeyboard");
static_assert(offsetof(RaceUISubStartGauge_IsPlayControlKeyboard, PlayerIndex) == 0x000000, "Member 'RaceUISubStartGauge_IsPlayControlKeyboard::PlayerIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubStartGauge_IsPlayControlKeyboard, ReturnValue) == 0x000004, "Member 'RaceUISubStartGauge_IsPlayControlKeyboard::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubStartGauge.SetDashInputKey
// 0x0020 (0x0020 - 0x0000)
struct RaceUISubStartGauge_SetDashInputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubStartGauge_SetDashInputKey) == 0x000008, "Wrong alignment on RaceUISubStartGauge_SetDashInputKey");
static_assert(sizeof(RaceUISubStartGauge_SetDashInputKey) == 0x000020, "Wrong size on RaceUISubStartGauge_SetDashInputKey");
static_assert(offsetof(RaceUISubStartGauge_SetDashInputKey, Key) == 0x000000, "Member 'RaceUISubStartGauge_SetDashInputKey::Key' has a wrong offset!");
static_assert(offsetof(RaceUISubStartGauge_SetDashInputKey, PlayerIndex) == 0x000018, "Member 'RaceUISubStartGauge_SetDashInputKey::PlayerIndex' has a wrong offset!");

// Function UnionRun.RaceUISubStartGauge.SetGaugeParcent
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubStartGauge_SetGaugeParcent final
{
public:
	float                                         GaugeRate;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubStartGauge_SetGaugeParcent) == 0x000004, "Wrong alignment on RaceUISubStartGauge_SetGaugeParcent");
static_assert(sizeof(RaceUISubStartGauge_SetGaugeParcent) == 0x000004, "Wrong size on RaceUISubStartGauge_SetGaugeParcent");
static_assert(offsetof(RaceUISubStartGauge_SetGaugeParcent, GaugeRate) == 0x000000, "Member 'RaceUISubStartGauge_SetGaugeParcent::GaugeRate' has a wrong offset!");

// Function UnionRun.RaceUISubStartGauge.SetGaugeParcentTrigger
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubStartGauge_SetGaugeParcentTrigger final
{
public:
	float                                         GaugeRate;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubStartGauge_SetGaugeParcentTrigger) == 0x000004, "Wrong alignment on RaceUISubStartGauge_SetGaugeParcentTrigger");
static_assert(sizeof(RaceUISubStartGauge_SetGaugeParcentTrigger) == 0x000004, "Wrong size on RaceUISubStartGauge_SetGaugeParcentTrigger");
static_assert(offsetof(RaceUISubStartGauge_SetGaugeParcentTrigger, GaugeRate) == 0x000000, "Member 'RaceUISubStartGauge_SetGaugeParcentTrigger::GaugeRate' has a wrong offset!");

// Function UnionRun.RaceUISubStartGauge.SetGaugePivotAndRange
// 0x0010 (0x0010 - 0x0000)
struct RaceUISubStartGauge_SetGaugePivotAndRange final
{
public:
	class UImage*                                 ImageRef;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PivotRate;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeRateRange;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubStartGauge_SetGaugePivotAndRange) == 0x000008, "Wrong alignment on RaceUISubStartGauge_SetGaugePivotAndRange");
static_assert(sizeof(RaceUISubStartGauge_SetGaugePivotAndRange) == 0x000010, "Wrong size on RaceUISubStartGauge_SetGaugePivotAndRange");
static_assert(offsetof(RaceUISubStartGauge_SetGaugePivotAndRange, ImageRef) == 0x000000, "Member 'RaceUISubStartGauge_SetGaugePivotAndRange::ImageRef' has a wrong offset!");
static_assert(offsetof(RaceUISubStartGauge_SetGaugePivotAndRange, PivotRate) == 0x000008, "Member 'RaceUISubStartGauge_SetGaugePivotAndRange::PivotRate' has a wrong offset!");
static_assert(offsetof(RaceUISubStartGauge_SetGaugePivotAndRange, GaugeRateRange) == 0x00000C, "Member 'RaceUISubStartGauge_SetGaugePivotAndRange::GaugeRateRange' has a wrong offset!");

// Function UnionRun.RaceUISubStartGauge.SetStartDashParamSetting
// 0x0030 (0x0030 - 0x0000)
struct RaceUISubStartGauge_SetStartDashParamSetting final
{
public:
	struct FUnionRaceStartDashParam               InStartDashParam;                                  // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubStartGauge_SetStartDashParamSetting) == 0x000004, "Wrong alignment on RaceUISubStartGauge_SetStartDashParamSetting");
static_assert(sizeof(RaceUISubStartGauge_SetStartDashParamSetting) == 0x000030, "Wrong size on RaceUISubStartGauge_SetStartDashParamSetting");
static_assert(offsetof(RaceUISubStartGauge_SetStartDashParamSetting, InStartDashParam) == 0x000000, "Member 'RaceUISubStartGauge_SetStartDashParamSetting::InStartDashParam' has a wrong offset!");

// Function UnionRun.RaceUISubStartGauge.SetStartDashSetting
// 0x0020 (0x0020 - 0x0000)
struct RaceUISubStartGauge_SetStartDashSetting final
{
public:
	float                                         LV3_PIVOT;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LV3_RANGE;                                         // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LV2_PIVOT;                                         // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LV2_RANGE;                                         // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NG1_PIVOT;                                         // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NG1_RANGE;                                         // 0x0014(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NG2_PIVOT;                                         // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NG2_RANGE;                                         // 0x001C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubStartGauge_SetStartDashSetting) == 0x000004, "Wrong alignment on RaceUISubStartGauge_SetStartDashSetting");
static_assert(sizeof(RaceUISubStartGauge_SetStartDashSetting) == 0x000020, "Wrong size on RaceUISubStartGauge_SetStartDashSetting");
static_assert(offsetof(RaceUISubStartGauge_SetStartDashSetting, LV3_PIVOT) == 0x000000, "Member 'RaceUISubStartGauge_SetStartDashSetting::LV3_PIVOT' has a wrong offset!");
static_assert(offsetof(RaceUISubStartGauge_SetStartDashSetting, LV3_RANGE) == 0x000004, "Member 'RaceUISubStartGauge_SetStartDashSetting::LV3_RANGE' has a wrong offset!");
static_assert(offsetof(RaceUISubStartGauge_SetStartDashSetting, LV2_PIVOT) == 0x000008, "Member 'RaceUISubStartGauge_SetStartDashSetting::LV2_PIVOT' has a wrong offset!");
static_assert(offsetof(RaceUISubStartGauge_SetStartDashSetting, LV2_RANGE) == 0x00000C, "Member 'RaceUISubStartGauge_SetStartDashSetting::LV2_RANGE' has a wrong offset!");
static_assert(offsetof(RaceUISubStartGauge_SetStartDashSetting, NG1_PIVOT) == 0x000010, "Member 'RaceUISubStartGauge_SetStartDashSetting::NG1_PIVOT' has a wrong offset!");
static_assert(offsetof(RaceUISubStartGauge_SetStartDashSetting, NG1_RANGE) == 0x000014, "Member 'RaceUISubStartGauge_SetStartDashSetting::NG1_RANGE' has a wrong offset!");
static_assert(offsetof(RaceUISubStartGauge_SetStartDashSetting, NG2_PIVOT) == 0x000018, "Member 'RaceUISubStartGauge_SetStartDashSetting::NG2_PIVOT' has a wrong offset!");
static_assert(offsetof(RaceUISubStartGauge_SetStartDashSetting, NG2_RANGE) == 0x00001C, "Member 'RaceUISubStartGauge_SetStartDashSetting::NG2_RANGE' has a wrong offset!");

// Function UnionRun.RaceUISubTeamGroup.SetCharaIconNative
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubTeamGroup_SetCharaIconNative final
{
public:
	class UTexture2D*                             IconTex;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubTeamGroup_SetCharaIconNative) == 0x000008, "Wrong alignment on RaceUISubTeamGroup_SetCharaIconNative");
static_assert(sizeof(RaceUISubTeamGroup_SetCharaIconNative) == 0x000008, "Wrong size on RaceUISubTeamGroup_SetCharaIconNative");
static_assert(offsetof(RaceUISubTeamGroup_SetCharaIconNative, IconTex) == 0x000000, "Member 'RaceUISubTeamGroup_SetCharaIconNative::IconTex' has a wrong offset!");

// Function UnionRun.RaceUISubTeamGroup.SetDispTextYou
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubTeamGroup_SetDispTextYou final
{
public:
	bool                                          IsDisp;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubTeamGroup_SetDispTextYou) == 0x000001, "Wrong alignment on RaceUISubTeamGroup_SetDispTextYou");
static_assert(sizeof(RaceUISubTeamGroup_SetDispTextYou) == 0x000001, "Wrong size on RaceUISubTeamGroup_SetDispTextYou");
static_assert(offsetof(RaceUISubTeamGroup_SetDispTextYou, IsDisp) == 0x000000, "Member 'RaceUISubTeamGroup_SetDispTextYou::IsDisp' has a wrong offset!");

// Function UnionRun.RaceUISubTeamGroup.SetRankNative
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubTeamGroup_SetRankNative final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubTeamGroup_SetRankNative) == 0x000004, "Wrong alignment on RaceUISubTeamGroup_SetRankNative");
static_assert(sizeof(RaceUISubTeamGroup_SetRankNative) == 0x000004, "Wrong size on RaceUISubTeamGroup_SetRankNative");
static_assert(offsetof(RaceUISubTeamGroup_SetRankNative, Rank) == 0x000000, "Member 'RaceUISubTeamGroup_SetRankNative::Rank' has a wrong offset!");

// Function UnionRun.RaceUISubTeamHUD.ExecChangeRank
// 0x0010 (0x0010 - 0x0000)
struct RaceUISubTeamHUD_ExecChangeRank final
{
public:
	int32                                         PanelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDispPlayer;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rank;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubTeamHUD_ExecChangeRank) == 0x000004, "Wrong alignment on RaceUISubTeamHUD_ExecChangeRank");
static_assert(sizeof(RaceUISubTeamHUD_ExecChangeRank) == 0x000010, "Wrong size on RaceUISubTeamHUD_ExecChangeRank");
static_assert(offsetof(RaceUISubTeamHUD_ExecChangeRank, PanelIndex) == 0x000000, "Member 'RaceUISubTeamHUD_ExecChangeRank::PanelIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubTeamHUD_ExecChangeRank, DriverId) == 0x000004, "Member 'RaceUISubTeamHUD_ExecChangeRank::DriverId' has a wrong offset!");
static_assert(offsetof(RaceUISubTeamHUD_ExecChangeRank, IsDispPlayer) == 0x000005, "Member 'RaceUISubTeamHUD_ExecChangeRank::IsDispPlayer' has a wrong offset!");
static_assert(offsetof(RaceUISubTeamHUD_ExecChangeRank, Rank) == 0x000008, "Member 'RaceUISubTeamHUD_ExecChangeRank::Rank' has a wrong offset!");
static_assert(offsetof(RaceUISubTeamHUD_ExecChangeRank, ReturnValue) == 0x00000C, "Member 'RaceUISubTeamHUD_ExecChangeRank::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubTeamHUD.ExecPlayChangeRank
// 0x0010 (0x0010 - 0x0000)
struct RaceUISubTeamHUD_ExecPlayChangeRank final
{
public:
	int32                                         PanelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDispPlayer;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rank;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubTeamHUD_ExecPlayChangeRank) == 0x000004, "Wrong alignment on RaceUISubTeamHUD_ExecPlayChangeRank");
static_assert(sizeof(RaceUISubTeamHUD_ExecPlayChangeRank) == 0x000010, "Wrong size on RaceUISubTeamHUD_ExecPlayChangeRank");
static_assert(offsetof(RaceUISubTeamHUD_ExecPlayChangeRank, PanelIndex) == 0x000000, "Member 'RaceUISubTeamHUD_ExecPlayChangeRank::PanelIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubTeamHUD_ExecPlayChangeRank, DriverId) == 0x000004, "Member 'RaceUISubTeamHUD_ExecPlayChangeRank::DriverId' has a wrong offset!");
static_assert(offsetof(RaceUISubTeamHUD_ExecPlayChangeRank, IsDispPlayer) == 0x000005, "Member 'RaceUISubTeamHUD_ExecPlayChangeRank::IsDispPlayer' has a wrong offset!");
static_assert(offsetof(RaceUISubTeamHUD_ExecPlayChangeRank, Rank) == 0x000008, "Member 'RaceUISubTeamHUD_ExecPlayChangeRank::Rank' has a wrong offset!");
static_assert(offsetof(RaceUISubTeamHUD_ExecPlayChangeRank, ReturnValue) == 0x00000C, "Member 'RaceUISubTeamHUD_ExecPlayChangeRank::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubTeamHUD.ExecSetRankOnly
// 0x000C (0x000C - 0x0000)
struct RaceUISubTeamHUD_ExecSetRankOnly final
{
public:
	int32                                         PanelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubTeamHUD_ExecSetRankOnly) == 0x000004, "Wrong alignment on RaceUISubTeamHUD_ExecSetRankOnly");
static_assert(sizeof(RaceUISubTeamHUD_ExecSetRankOnly) == 0x00000C, "Wrong size on RaceUISubTeamHUD_ExecSetRankOnly");
static_assert(offsetof(RaceUISubTeamHUD_ExecSetRankOnly, PanelIndex) == 0x000000, "Member 'RaceUISubTeamHUD_ExecSetRankOnly::PanelIndex' has a wrong offset!");
static_assert(offsetof(RaceUISubTeamHUD_ExecSetRankOnly, Rank) == 0x000004, "Member 'RaceUISubTeamHUD_ExecSetRankOnly::Rank' has a wrong offset!");
static_assert(offsetof(RaceUISubTeamHUD_ExecSetRankOnly, ReturnValue) == 0x000008, "Member 'RaceUISubTeamHUD_ExecSetRankOnly::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubTeamHUD.GetTeamRankRough
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubTeamHUD_GetTeamRankRough final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubTeamHUD_GetTeamRankRough) == 0x000004, "Wrong alignment on RaceUISubTeamHUD_GetTeamRankRough");
static_assert(sizeof(RaceUISubTeamHUD_GetTeamRankRough) == 0x000004, "Wrong size on RaceUISubTeamHUD_GetTeamRankRough");
static_assert(offsetof(RaceUISubTeamHUD_GetTeamRankRough, ReturnValue) == 0x000000, "Member 'RaceUISubTeamHUD_GetTeamRankRough::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUISubTeamHUD.SetTeamRank
// 0x0004 (0x0004 - 0x0000)
struct RaceUISubTeamHUD_SetTeamRank final
{
public:
	int32                                         TeamRank;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubTeamHUD_SetTeamRank) == 0x000004, "Wrong alignment on RaceUISubTeamHUD_SetTeamRank");
static_assert(sizeof(RaceUISubTeamHUD_SetTeamRank) == 0x000004, "Wrong size on RaceUISubTeamHUD_SetTeamRank");
static_assert(offsetof(RaceUISubTeamHUD_SetTeamRank, TeamRank) == 0x000000, "Member 'RaceUISubTeamHUD_SetTeamRank::TeamRank' has a wrong offset!");

// Function UnionRun.RaceUISubTeamHUD.UpdateCharaRank
// 0x0001 (0x0001 - 0x0000)
struct RaceUISubTeamHUD_UpdateCharaRank final
{
public:
	bool                                          IsForce;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubTeamHUD_UpdateCharaRank) == 0x000001, "Wrong alignment on RaceUISubTeamHUD_UpdateCharaRank");
static_assert(sizeof(RaceUISubTeamHUD_UpdateCharaRank) == 0x000001, "Wrong size on RaceUISubTeamHUD_UpdateCharaRank");
static_assert(offsetof(RaceUISubTeamHUD_UpdateCharaRank, IsForce) == 0x000000, "Member 'RaceUISubTeamHUD_UpdateCharaRank::IsForce' has a wrong offset!");

// Function UnionRun.RaceUISubTimeTrialTime.SetTargetTime
// 0x0020 (0x0020 - 0x0000)
struct RaceUISubTimeTrialTime_SetTargetTime final
{
public:
	class URichTextBlock*                         TargetTextBlock;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TargetName;                                        // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         TargetTime;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClockCount;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RaceUISubTimeTrialTime_SetTargetTime) == 0x000008, "Wrong alignment on RaceUISubTimeTrialTime_SetTargetTime");
static_assert(sizeof(RaceUISubTimeTrialTime_SetTargetTime) == 0x000020, "Wrong size on RaceUISubTimeTrialTime_SetTargetTime");
static_assert(offsetof(RaceUISubTimeTrialTime_SetTargetTime, TargetTextBlock) == 0x000000, "Member 'RaceUISubTimeTrialTime_SetTargetTime::TargetTextBlock' has a wrong offset!");
static_assert(offsetof(RaceUISubTimeTrialTime_SetTargetTime, TargetName) == 0x000008, "Member 'RaceUISubTimeTrialTime_SetTargetTime::TargetName' has a wrong offset!");
static_assert(offsetof(RaceUISubTimeTrialTime_SetTargetTime, TargetTime) == 0x000018, "Member 'RaceUISubTimeTrialTime_SetTargetTime::TargetTime' has a wrong offset!");
static_assert(offsetof(RaceUISubTimeTrialTime_SetTargetTime, IsClockCount) == 0x00001C, "Member 'RaceUISubTimeTrialTime_SetTargetTime::IsClockCount' has a wrong offset!");

// Function UnionRun.RaceUISubTimeTrialTime.SetTargetTime4Best
// 0x0008 (0x0008 - 0x0000)
struct RaceUISubTimeTrialTime_SetTargetTime4Best final
{
public:
	class URichTextBlock*                         TargetTextBlock;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubTimeTrialTime_SetTargetTime4Best) == 0x000008, "Wrong alignment on RaceUISubTimeTrialTime_SetTargetTime4Best");
static_assert(sizeof(RaceUISubTimeTrialTime_SetTargetTime4Best) == 0x000008, "Wrong size on RaceUISubTimeTrialTime_SetTargetTime4Best");
static_assert(offsetof(RaceUISubTimeTrialTime_SetTargetTime4Best, TargetTextBlock) == 0x000000, "Member 'RaceUISubTimeTrialTime_SetTargetTime4Best::TargetTextBlock' has a wrong offset!");

// Function UnionRun.RaceUISubTimeTrialTime.UpdateLapTime
// 0x0028 (0x0028 - 0x0000)
struct RaceUISubTimeTrialTime_UpdateLapTime final
{
public:
	int32                                         Lap;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBestLap;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRaceUITimeTrialTime                   ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUISubTimeTrialTime_UpdateLapTime) == 0x000004, "Wrong alignment on RaceUISubTimeTrialTime_UpdateLapTime");
static_assert(sizeof(RaceUISubTimeTrialTime_UpdateLapTime) == 0x000028, "Wrong size on RaceUISubTimeTrialTime_UpdateLapTime");
static_assert(offsetof(RaceUISubTimeTrialTime_UpdateLapTime, Lap) == 0x000000, "Member 'RaceUISubTimeTrialTime_UpdateLapTime::Lap' has a wrong offset!");
static_assert(offsetof(RaceUISubTimeTrialTime_UpdateLapTime, IsBestLap) == 0x000004, "Member 'RaceUISubTimeTrialTime_UpdateLapTime::IsBestLap' has a wrong offset!");
static_assert(offsetof(RaceUISubTimeTrialTime_UpdateLapTime, ReturnValue) == 0x000008, "Member 'RaceUISubTimeTrialTime_UpdateLapTime::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUITutorialControllerKey.GetTutorialKey
// 0x0020 (0x0020 - 0x0000)
struct RaceUITutorialControllerKey_GetTutorialKey final
{
public:
	ETutorialAction                               tutorialAction;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUITutorialControllerKey_GetTutorialKey) == 0x000008, "Wrong alignment on RaceUITutorialControllerKey_GetTutorialKey");
static_assert(sizeof(RaceUITutorialControllerKey_GetTutorialKey) == 0x000020, "Wrong size on RaceUITutorialControllerKey_GetTutorialKey");
static_assert(offsetof(RaceUITutorialControllerKey_GetTutorialKey, tutorialAction) == 0x000000, "Member 'RaceUITutorialControllerKey_GetTutorialKey::tutorialAction' has a wrong offset!");
static_assert(offsetof(RaceUITutorialControllerKey_GetTutorialKey, Index_0) == 0x000004, "Member 'RaceUITutorialControllerKey_GetTutorialKey::Index_0' has a wrong offset!");
static_assert(offsetof(RaceUITutorialControllerKey_GetTutorialKey, ReturnValue) == 0x000008, "Member 'RaceUITutorialControllerKey_GetTutorialKey::ReturnValue' has a wrong offset!");

// Function UnionRun.RaceUITutorialControllerKey.UpdateHintIndex
// 0x0004 (0x0004 - 0x0000)
struct RaceUITutorialControllerKey_UpdateHintIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUITutorialControllerKey_UpdateHintIndex) == 0x000004, "Wrong alignment on RaceUITutorialControllerKey_UpdateHintIndex");
static_assert(sizeof(RaceUITutorialControllerKey_UpdateHintIndex) == 0x000004, "Wrong size on RaceUITutorialControllerKey_UpdateHintIndex");
static_assert(offsetof(RaceUITutorialControllerKey_UpdateHintIndex, InIndex) == 0x000000, "Member 'RaceUITutorialControllerKey_UpdateHintIndex::InIndex' has a wrong offset!");

// Function UnionRun.RaceUITutorialControllerKey.UpdateTutorialIndex
// 0x0004 (0x0004 - 0x0000)
struct RaceUITutorialControllerKey_UpdateTutorialIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RaceUITutorialControllerKey_UpdateTutorialIndex) == 0x000004, "Wrong alignment on RaceUITutorialControllerKey_UpdateTutorialIndex");
static_assert(sizeof(RaceUITutorialControllerKey_UpdateTutorialIndex) == 0x000004, "Wrong size on RaceUITutorialControllerKey_UpdateTutorialIndex");
static_assert(offsetof(RaceUITutorialControllerKey_UpdateTutorialIndex, InIndex) == 0x000000, "Member 'RaceUITutorialControllerKey_UpdateTutorialIndex::InIndex' has a wrong offset!");

// Function UnionRun.ReplayFixedCameraCollision.OnCollisionBaseHit
// 0x0060 (0x0060 - 0x0000)
struct ReplayFixedCameraCollision_OnCollisionBaseHit final
{
public:
	struct FCollisionHitInfo                      Info;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReplayFixedCameraCollision_OnCollisionBaseHit) == 0x000008, "Wrong alignment on ReplayFixedCameraCollision_OnCollisionBaseHit");
static_assert(sizeof(ReplayFixedCameraCollision_OnCollisionBaseHit) == 0x000060, "Wrong size on ReplayFixedCameraCollision_OnCollisionBaseHit");
static_assert(offsetof(ReplayFixedCameraCollision_OnCollisionBaseHit, Info) == 0x000000, "Member 'ReplayFixedCameraCollision_OnCollisionBaseHit::Info' has a wrong offset!");

// Function UnionRun.ReplayFixedCameraCollision.SetCameraData
// 0x0018 (0x0018 - 0x0000)
struct ReplayFixedCameraCollision_SetCameraData final
{
public:
	struct FVector                                NewBoxSize;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReplayFixedCameraCollision_SetCameraData) == 0x000008, "Wrong alignment on ReplayFixedCameraCollision_SetCameraData");
static_assert(sizeof(ReplayFixedCameraCollision_SetCameraData) == 0x000018, "Wrong size on ReplayFixedCameraCollision_SetCameraData");
static_assert(offsetof(ReplayFixedCameraCollision_SetCameraData, NewBoxSize) == 0x000000, "Member 'ReplayFixedCameraCollision_SetCameraData::NewBoxSize' has a wrong offset!");

// Function UnionRun.ReplayMoveCameraCollision.OnCollisionBaseHit
// 0x0060 (0x0060 - 0x0000)
struct ReplayMoveCameraCollision_OnCollisionBaseHit final
{
public:
	struct FCollisionHitInfo                      Info;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReplayMoveCameraCollision_OnCollisionBaseHit) == 0x000008, "Wrong alignment on ReplayMoveCameraCollision_OnCollisionBaseHit");
static_assert(sizeof(ReplayMoveCameraCollision_OnCollisionBaseHit) == 0x000060, "Wrong size on ReplayMoveCameraCollision_OnCollisionBaseHit");
static_assert(offsetof(ReplayMoveCameraCollision_OnCollisionBaseHit, Info) == 0x000000, "Member 'ReplayMoveCameraCollision_OnCollisionBaseHit::Info' has a wrong offset!");

// Function UnionRun.ReplayMoveCameraCollision.SetCameraData
// 0x0018 (0x0018 - 0x0000)
struct ReplayMoveCameraCollision_SetCameraData final
{
public:
	struct FVector                                NewBoxSize;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReplayMoveCameraCollision_SetCameraData) == 0x000008, "Wrong alignment on ReplayMoveCameraCollision_SetCameraData");
static_assert(sizeof(ReplayMoveCameraCollision_SetCameraData) == 0x000018, "Wrong size on ReplayMoveCameraCollision_SetCameraData");
static_assert(offsetof(ReplayMoveCameraCollision_SetCameraData, NewBoxSize) == 0x000000, "Member 'ReplayMoveCameraCollision_SetCameraData::NewBoxSize' has a wrong offset!");

// Function UnionRun.RingObject.GetFinalLapRingNum
// 0x0004 (0x0004 - 0x0000)
struct RingObject_GetFinalLapRingNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RingObject_GetFinalLapRingNum) == 0x000004, "Wrong alignment on RingObject_GetFinalLapRingNum");
static_assert(sizeof(RingObject_GetFinalLapRingNum) == 0x000004, "Wrong size on RingObject_GetFinalLapRingNum");
static_assert(offsetof(RingObject_GetFinalLapRingNum, ReturnValue) == 0x000000, "Member 'RingObject_GetFinalLapRingNum::ReturnValue' has a wrong offset!");

// Function UnionRun.RingObject.GetFinalLapRingOffset
// 0x0004 (0x0004 - 0x0000)
struct RingObject_GetFinalLapRingOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RingObject_GetFinalLapRingOffset) == 0x000004, "Wrong alignment on RingObject_GetFinalLapRingOffset");
static_assert(sizeof(RingObject_GetFinalLapRingOffset) == 0x000004, "Wrong size on RingObject_GetFinalLapRingOffset");
static_assert(offsetof(RingObject_GetFinalLapRingOffset, ReturnValue) == 0x000000, "Member 'RingObject_GetFinalLapRingOffset::ReturnValue' has a wrong offset!");

// Function UnionRun.RingObject.IsFinalLapChange
// 0x0001 (0x0001 - 0x0000)
struct RingObject_IsFinalLapChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RingObject_IsFinalLapChange) == 0x000001, "Wrong alignment on RingObject_IsFinalLapChange");
static_assert(sizeof(RingObject_IsFinalLapChange) == 0x000001, "Wrong size on RingObject_IsFinalLapChange");
static_assert(offsetof(RingObject_IsFinalLapChange, ReturnValue) == 0x000000, "Member 'RingObject_IsFinalLapChange::ReturnValue' has a wrong offset!");

// Function UnionRun.RingObject.SetIsFinalLapChange
// 0x0001 (0x0001 - 0x0000)
struct RingObject_SetIsFinalLapChange final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RingObject_SetIsFinalLapChange) == 0x000001, "Wrong alignment on RingObject_SetIsFinalLapChange");
static_assert(sizeof(RingObject_SetIsFinalLapChange) == 0x000001, "Wrong size on RingObject_SetIsFinalLapChange");
static_assert(offsetof(RingObject_SetIsFinalLapChange, flag) == 0x000000, "Member 'RingObject_SetIsFinalLapChange::flag' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.GetOverrideCollisionScale
// 0x0004 (0x0004 - 0x0000)
struct ShortcutRingObject_GetOverrideCollisionScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_GetOverrideCollisionScale) == 0x000004, "Wrong alignment on ShortcutRingObject_GetOverrideCollisionScale");
static_assert(sizeof(ShortcutRingObject_GetOverrideCollisionScale) == 0x000004, "Wrong size on ShortcutRingObject_GetOverrideCollisionScale");
static_assert(offsetof(ShortcutRingObject_GetOverrideCollisionScale, ReturnValue) == 0x000000, "Member 'ShortcutRingObject_GetOverrideCollisionScale::ReturnValue' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.GetRingScale
// 0x0004 (0x0004 - 0x0000)
struct ShortcutRingObject_GetRingScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_GetRingScale) == 0x000004, "Wrong alignment on ShortcutRingObject_GetRingScale");
static_assert(sizeof(ShortcutRingObject_GetRingScale) == 0x000004, "Wrong size on ShortcutRingObject_GetRingScale");
static_assert(offsetof(ShortcutRingObject_GetRingScale, ReturnValue) == 0x000000, "Member 'ShortcutRingObject_GetRingScale::ReturnValue' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.GetShortcutId
// 0x0004 (0x0004 - 0x0000)
struct ShortcutRingObject_GetShortcutId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_GetShortcutId) == 0x000004, "Wrong alignment on ShortcutRingObject_GetShortcutId");
static_assert(sizeof(ShortcutRingObject_GetShortcutId) == 0x000004, "Wrong size on ShortcutRingObject_GetShortcutId");
static_assert(offsetof(ShortcutRingObject_GetShortcutId, ReturnValue) == 0x000000, "Member 'ShortcutRingObject_GetShortcutId::ReturnValue' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.GetShortcutRingType
// 0x0001 (0x0001 - 0x0000)
struct ShortcutRingObject_GetShortcutRingType final
{
public:
	EShortcutRingType                             ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_GetShortcutRingType) == 0x000001, "Wrong alignment on ShortcutRingObject_GetShortcutRingType");
static_assert(sizeof(ShortcutRingObject_GetShortcutRingType) == 0x000001, "Wrong size on ShortcutRingObject_GetShortcutRingType");
static_assert(offsetof(ShortcutRingObject_GetShortcutRingType, ReturnValue) == 0x000000, "Member 'ShortcutRingObject_GetShortcutRingType::ReturnValue' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.GetStageId
// 0x0001 (0x0001 - 0x0000)
struct ShortcutRingObject_GetStageId final
{
public:
	EStageId                                      ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_GetStageId) == 0x000001, "Wrong alignment on ShortcutRingObject_GetStageId");
static_assert(sizeof(ShortcutRingObject_GetStageId) == 0x000001, "Wrong size on ShortcutRingObject_GetStageId");
static_assert(offsetof(ShortcutRingObject_GetStageId, ReturnValue) == 0x000000, "Member 'ShortcutRingObject_GetStageId::ReturnValue' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.IsHalfRing
// 0x0001 (0x0001 - 0x0000)
struct ShortcutRingObject_IsHalfRing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_IsHalfRing) == 0x000001, "Wrong alignment on ShortcutRingObject_IsHalfRing");
static_assert(sizeof(ShortcutRingObject_IsHalfRing) == 0x000001, "Wrong size on ShortcutRingObject_IsHalfRing");
static_assert(offsetof(ShortcutRingObject_IsHalfRing, ReturnValue) == 0x000000, "Member 'ShortcutRingObject_IsHalfRing::ReturnValue' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.IsUseOverrideCollisionScale
// 0x0001 (0x0001 - 0x0000)
struct ShortcutRingObject_IsUseOverrideCollisionScale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_IsUseOverrideCollisionScale) == 0x000001, "Wrong alignment on ShortcutRingObject_IsUseOverrideCollisionScale");
static_assert(sizeof(ShortcutRingObject_IsUseOverrideCollisionScale) == 0x000001, "Wrong size on ShortcutRingObject_IsUseOverrideCollisionScale");
static_assert(offsetof(ShortcutRingObject_IsUseOverrideCollisionScale, ReturnValue) == 0x000000, "Member 'ShortcutRingObject_IsUseOverrideCollisionScale::ReturnValue' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.SetHalfRing
// 0x0001 (0x0001 - 0x0000)
struct ShortcutRingObject_SetHalfRing final
{
public:
	bool                                          bHalf;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_SetHalfRing) == 0x000001, "Wrong alignment on ShortcutRingObject_SetHalfRing");
static_assert(sizeof(ShortcutRingObject_SetHalfRing) == 0x000001, "Wrong size on ShortcutRingObject_SetHalfRing");
static_assert(offsetof(ShortcutRingObject_SetHalfRing, bHalf) == 0x000000, "Member 'ShortcutRingObject_SetHalfRing::bHalf' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.SetRingScale
// 0x0004 (0x0004 - 0x0000)
struct ShortcutRingObject_SetRingScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_SetRingScale) == 0x000004, "Wrong alignment on ShortcutRingObject_SetRingScale");
static_assert(sizeof(ShortcutRingObject_SetRingScale) == 0x000004, "Wrong size on ShortcutRingObject_SetRingScale");
static_assert(offsetof(ShortcutRingObject_SetRingScale, Scale) == 0x000000, "Member 'ShortcutRingObject_SetRingScale::Scale' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.SetShortcutId
// 0x0004 (0x0004 - 0x0000)
struct ShortcutRingObject_SetShortcutId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_SetShortcutId) == 0x000004, "Wrong alignment on ShortcutRingObject_SetShortcutId");
static_assert(sizeof(ShortcutRingObject_SetShortcutId) == 0x000004, "Wrong size on ShortcutRingObject_SetShortcutId");
static_assert(offsetof(ShortcutRingObject_SetShortcutId, ID) == 0x000000, "Member 'ShortcutRingObject_SetShortcutId::ID' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.SetShortcutRingType
// 0x0001 (0x0001 - 0x0000)
struct ShortcutRingObject_SetShortcutRingType final
{
public:
	EShortcutRingType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_SetShortcutRingType) == 0x000001, "Wrong alignment on ShortcutRingObject_SetShortcutRingType");
static_assert(sizeof(ShortcutRingObject_SetShortcutRingType) == 0x000001, "Wrong size on ShortcutRingObject_SetShortcutRingType");
static_assert(offsetof(ShortcutRingObject_SetShortcutRingType, Type) == 0x000000, "Member 'ShortcutRingObject_SetShortcutRingType::Type' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.SetTravelRingType
// 0x0001 (0x0001 - 0x0000)
struct ShortcutRingObject_SetTravelRingType final
{
public:
	ETravelRingType                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_SetTravelRingType) == 0x000001, "Wrong alignment on ShortcutRingObject_SetTravelRingType");
static_assert(sizeof(ShortcutRingObject_SetTravelRingType) == 0x000001, "Wrong size on ShortcutRingObject_SetTravelRingType");
static_assert(offsetof(ShortcutRingObject_SetTravelRingType, Type) == 0x000000, "Member 'ShortcutRingObject_SetTravelRingType::Type' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.GetTravelRingType
// 0x0001 (0x0001 - 0x0000)
struct ShortcutRingObject_GetTravelRingType final
{
public:
	ETravelRingType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_GetTravelRingType) == 0x000001, "Wrong alignment on ShortcutRingObject_GetTravelRingType");
static_assert(sizeof(ShortcutRingObject_GetTravelRingType) == 0x000001, "Wrong size on ShortcutRingObject_GetTravelRingType");
static_assert(offsetof(ShortcutRingObject_GetTravelRingType, ReturnValue) == 0x000000, "Member 'ShortcutRingObject_GetTravelRingType::ReturnValue' has a wrong offset!");

// Function UnionRun.ShortcutRingObject.IsUseAnotherGate
// 0x0001 (0x0001 - 0x0000)
struct ShortcutRingObject_IsUseAnotherGate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutRingObject_IsUseAnotherGate) == 0x000001, "Wrong alignment on ShortcutRingObject_IsUseAnotherGate");
static_assert(sizeof(ShortcutRingObject_IsUseAnotherGate) == 0x000001, "Wrong size on ShortcutRingObject_IsUseAnotherGate");
static_assert(offsetof(ShortcutRingObject_IsUseAnotherGate, ReturnValue) == 0x000000, "Member 'ShortcutRingObject_IsUseAnotherGate::ReturnValue' has a wrong offset!");

// Function UnionRun.SquidAnimInstance.IsSquidState
// 0x0002 (0x0002 - 0x0000)
struct SquidAnimInstance_IsSquidState final
{
public:
	ESquidState                                   State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquidAnimInstance_IsSquidState) == 0x000001, "Wrong alignment on SquidAnimInstance_IsSquidState");
static_assert(sizeof(SquidAnimInstance_IsSquidState) == 0x000002, "Wrong size on SquidAnimInstance_IsSquidState");
static_assert(offsetof(SquidAnimInstance_IsSquidState, State) == 0x000000, "Member 'SquidAnimInstance_IsSquidState::State' has a wrong offset!");
static_assert(offsetof(SquidAnimInstance_IsSquidState, ReturnValue) == 0x000001, "Member 'SquidAnimInstance_IsSquidState::ReturnValue' has a wrong offset!");

// Function UnionRun.TowerAnimInstance.IsTowerState
// 0x0002 (0x0002 - 0x0000)
struct TowerAnimInstance_IsTowerState final
{
public:
	ETowerState                                   State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TowerAnimInstance_IsTowerState) == 0x000001, "Wrong alignment on TowerAnimInstance_IsTowerState");
static_assert(sizeof(TowerAnimInstance_IsTowerState) == 0x000002, "Wrong size on TowerAnimInstance_IsTowerState");
static_assert(offsetof(TowerAnimInstance_IsTowerState, State) == 0x000000, "Member 'TowerAnimInstance_IsTowerState::State' has a wrong offset!");
static_assert(offsetof(TowerAnimInstance_IsTowerState, ReturnValue) == 0x000001, "Member 'TowerAnimInstance_IsTowerState::ReturnValue' has a wrong offset!");

// Function UnionRun.TransformRingObject.GetRingScaleRate
// 0x0004 (0x0004 - 0x0000)
struct TransformRingObject_GetRingScaleRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformRingObject_GetRingScaleRate) == 0x000004, "Wrong alignment on TransformRingObject_GetRingScaleRate");
static_assert(sizeof(TransformRingObject_GetRingScaleRate) == 0x000004, "Wrong size on TransformRingObject_GetRingScaleRate");
static_assert(offsetof(TransformRingObject_GetRingScaleRate, ReturnValue) == 0x000000, "Member 'TransformRingObject_GetRingScaleRate::ReturnValue' has a wrong offset!");

// Function UnionRun.TransformRingObject.SetRingScaleRate
// 0x0004 (0x0004 - 0x0000)
struct TransformRingObject_SetRingScaleRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformRingObject_SetRingScaleRate) == 0x000004, "Wrong alignment on TransformRingObject_SetRingScaleRate");
static_assert(sizeof(TransformRingObject_SetRingScaleRate) == 0x000004, "Wrong size on TransformRingObject_SetRingScaleRate");
static_assert(offsetof(TransformRingObject_SetRingScaleRate, Rate) == 0x000000, "Member 'TransformRingObject_SetRingScaleRate::Rate' has a wrong offset!");

// Function UnionRun.TransformRingObject.SetTransformRingType
// 0x0001 (0x0001 - 0x0000)
struct TransformRingObject_SetTransformRingType final
{
public:
	ETransformRingType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformRingObject_SetTransformRingType) == 0x000001, "Wrong alignment on TransformRingObject_SetTransformRingType");
static_assert(sizeof(TransformRingObject_SetTransformRingType) == 0x000001, "Wrong size on TransformRingObject_SetTransformRingType");
static_assert(offsetof(TransformRingObject_SetTransformRingType, Type) == 0x000000, "Member 'TransformRingObject_SetTransformRingType::Type' has a wrong offset!");

// Function UnionRun.TransformRingObject.UpdateParallelMode
// 0x0004 (0x0004 - 0x0000)
struct TransformRingObject_UpdateParallelMode final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformRingObject_UpdateParallelMode) == 0x000004, "Wrong alignment on TransformRingObject_UpdateParallelMode");
static_assert(sizeof(TransformRingObject_UpdateParallelMode) == 0x000004, "Wrong size on TransformRingObject_UpdateParallelMode");
static_assert(offsetof(TransformRingObject_UpdateParallelMode, RacerIndex) == 0x000000, "Member 'TransformRingObject_UpdateParallelMode::RacerIndex' has a wrong offset!");

// Function UnionRun.TriggerComponent.OnCollisionBaseHit
// 0x0060 (0x0060 - 0x0000)
struct TriggerComponent_OnCollisionBaseHit final
{
public:
	struct FCollisionHitInfo                      Info;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerComponent_OnCollisionBaseHit) == 0x000008, "Wrong alignment on TriggerComponent_OnCollisionBaseHit");
static_assert(sizeof(TriggerComponent_OnCollisionBaseHit) == 0x000060, "Wrong size on TriggerComponent_OnCollisionBaseHit");
static_assert(offsetof(TriggerComponent_OnCollisionBaseHit, Info) == 0x000000, "Member 'TriggerComponent_OnCollisionBaseHit::Info' has a wrong offset!");

// Function UnionRun.TriggerComponent.OnCollisionHitResult
// 0x0058 (0x0058 - 0x0000)
struct TriggerComponent_OnCollisionHitResult final
{
public:
	struct FCollisionHitResultInfo                Info;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerComponent_OnCollisionHitResult) == 0x000008, "Wrong alignment on TriggerComponent_OnCollisionHitResult");
static_assert(sizeof(TriggerComponent_OnCollisionHitResult) == 0x000058, "Wrong size on TriggerComponent_OnCollisionHitResult");
static_assert(offsetof(TriggerComponent_OnCollisionHitResult, Info) == 0x000000, "Member 'TriggerComponent_OnCollisionHitResult::Info' has a wrong offset!");

// Function UnionRun.TriggerComponent.SetSurfaceFlag
// 0x001F (0x001F - 0x0000)
struct TriggerComponent_SetSurfaceFlag final
{
public:
	struct FUnionSurfaceFlag                      flag;                                              // 0x0000(0x001F)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerComponent_SetSurfaceFlag) == 0x000001, "Wrong alignment on TriggerComponent_SetSurfaceFlag");
static_assert(sizeof(TriggerComponent_SetSurfaceFlag) == 0x00001F, "Wrong size on TriggerComponent_SetSurfaceFlag");
static_assert(offsetof(TriggerComponent_SetSurfaceFlag, flag) == 0x000000, "Member 'TriggerComponent_SetSurfaceFlag::flag' has a wrong offset!");

// Function UnionRun.TriggerComponent.SetSurfaceType
// 0x0001 (0x0001 - 0x0000)
struct TriggerComponent_SetSurfaceType final
{
public:
	EUnionSurfaceType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerComponent_SetSurfaceType) == 0x000001, "Wrong alignment on TriggerComponent_SetSurfaceType");
static_assert(sizeof(TriggerComponent_SetSurfaceType) == 0x000001, "Wrong size on TriggerComponent_SetSurfaceType");
static_assert(offsetof(TriggerComponent_SetSurfaceType, Type) == 0x000000, "Member 'TriggerComponent_SetSurfaceType::Type' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetAttackEnemyItemIdIF
// 0x0001 (0x0001 - 0x0000)
struct UnionAttackItemInfoInterface_GetAttackEnemyItemIdIF final
{
public:
	EEnemyItemId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetAttackEnemyItemIdIF) == 0x000001, "Wrong alignment on UnionAttackItemInfoInterface_GetAttackEnemyItemIdIF");
static_assert(sizeof(UnionAttackItemInfoInterface_GetAttackEnemyItemIdIF) == 0x000001, "Wrong size on UnionAttackItemInfoInterface_GetAttackEnemyItemIdIF");
static_assert(offsetof(UnionAttackItemInfoInterface_GetAttackEnemyItemIdIF, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetAttackEnemyItemIdIF::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetAttackItemIdIF
// 0x0001 (0x0001 - 0x0000)
struct UnionAttackItemInfoInterface_GetAttackItemIdIF final
{
public:
	EItemId                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetAttackItemIdIF) == 0x000001, "Wrong alignment on UnionAttackItemInfoInterface_GetAttackItemIdIF");
static_assert(sizeof(UnionAttackItemInfoInterface_GetAttackItemIdIF) == 0x000001, "Wrong size on UnionAttackItemInfoInterface_GetAttackItemIdIF");
static_assert(offsetof(UnionAttackItemInfoInterface_GetAttackItemIdIF, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetAttackItemIdIF::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetObjectDomainIndex
// 0x0001 (0x0001 - 0x0000)
struct UnionAttackItemInfoInterface_GetObjectDomainIndex final
{
public:
	EDomainIndex                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetObjectDomainIndex) == 0x000001, "Wrong alignment on UnionAttackItemInfoInterface_GetObjectDomainIndex");
static_assert(sizeof(UnionAttackItemInfoInterface_GetObjectDomainIndex) == 0x000001, "Wrong size on UnionAttackItemInfoInterface_GetObjectDomainIndex");
static_assert(offsetof(UnionAttackItemInfoInterface_GetObjectDomainIndex, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetObjectDomainIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetObjectDomainLocationUE
// 0x0018 (0x0018 - 0x0000)
struct UnionAttackItemInfoInterface_GetObjectDomainLocationUE final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetObjectDomainLocationUE) == 0x000008, "Wrong alignment on UnionAttackItemInfoInterface_GetObjectDomainLocationUE");
static_assert(sizeof(UnionAttackItemInfoInterface_GetObjectDomainLocationUE) == 0x000018, "Wrong size on UnionAttackItemInfoInterface_GetObjectDomainLocationUE");
static_assert(offsetof(UnionAttackItemInfoInterface_GetObjectDomainLocationUE, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetObjectDomainLocationUE::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetObjectDomainNumber
// 0x0001 (0x0001 - 0x0000)
struct UnionAttackItemInfoInterface_GetObjectDomainNumber final
{
public:
	EDomainNumber                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetObjectDomainNumber) == 0x000001, "Wrong alignment on UnionAttackItemInfoInterface_GetObjectDomainNumber");
static_assert(sizeof(UnionAttackItemInfoInterface_GetObjectDomainNumber) == 0x000001, "Wrong size on UnionAttackItemInfoInterface_GetObjectDomainNumber");
static_assert(offsetof(UnionAttackItemInfoInterface_GetObjectDomainNumber, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetObjectDomainNumber::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetObjectLapCount
// 0x0004 (0x0004 - 0x0000)
struct UnionAttackItemInfoInterface_GetObjectLapCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetObjectLapCount) == 0x000004, "Wrong alignment on UnionAttackItemInfoInterface_GetObjectLapCount");
static_assert(sizeof(UnionAttackItemInfoInterface_GetObjectLapCount) == 0x000004, "Wrong size on UnionAttackItemInfoInterface_GetObjectLapCount");
static_assert(offsetof(UnionAttackItemInfoInterface_GetObjectLapCount, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetObjectLapCount::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetObjectPathIndexDistance
// 0x0004 (0x0004 - 0x0000)
struct UnionAttackItemInfoInterface_GetObjectPathIndexDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetObjectPathIndexDistance) == 0x000004, "Wrong alignment on UnionAttackItemInfoInterface_GetObjectPathIndexDistance");
static_assert(sizeof(UnionAttackItemInfoInterface_GetObjectPathIndexDistance) == 0x000004, "Wrong size on UnionAttackItemInfoInterface_GetObjectPathIndexDistance");
static_assert(offsetof(UnionAttackItemInfoInterface_GetObjectPathIndexDistance, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetObjectPathIndexDistance::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetObjectRaceDistance
// 0x0004 (0x0004 - 0x0000)
struct UnionAttackItemInfoInterface_GetObjectRaceDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetObjectRaceDistance) == 0x000004, "Wrong alignment on UnionAttackItemInfoInterface_GetObjectRaceDistance");
static_assert(sizeof(UnionAttackItemInfoInterface_GetObjectRaceDistance) == 0x000004, "Wrong size on UnionAttackItemInfoInterface_GetObjectRaceDistance");
static_assert(offsetof(UnionAttackItemInfoInterface_GetObjectRaceDistance, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetObjectRaceDistance::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetObjectRaceDomainElapsedRatio
// 0x0004 (0x0004 - 0x0000)
struct UnionAttackItemInfoInterface_GetObjectRaceDomainElapsedRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetObjectRaceDomainElapsedRatio) == 0x000004, "Wrong alignment on UnionAttackItemInfoInterface_GetObjectRaceDomainElapsedRatio");
static_assert(sizeof(UnionAttackItemInfoInterface_GetObjectRaceDomainElapsedRatio) == 0x000004, "Wrong size on UnionAttackItemInfoInterface_GetObjectRaceDomainElapsedRatio");
static_assert(offsetof(UnionAttackItemInfoInterface_GetObjectRaceDomainElapsedRatio, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetObjectRaceDomainElapsedRatio::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetObjectWorldLocation
// 0x0018 (0x0018 - 0x0000)
struct UnionAttackItemInfoInterface_GetObjectWorldLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetObjectWorldLocation) == 0x000008, "Wrong alignment on UnionAttackItemInfoInterface_GetObjectWorldLocation");
static_assert(sizeof(UnionAttackItemInfoInterface_GetObjectWorldLocation) == 0x000018, "Wrong size on UnionAttackItemInfoInterface_GetObjectWorldLocation");
static_assert(offsetof(UnionAttackItemInfoInterface_GetObjectWorldLocation, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetObjectWorldLocation::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetSameDomainOnlyFlag
// 0x0001 (0x0001 - 0x0000)
struct UnionAttackItemInfoInterface_GetSameDomainOnlyFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetSameDomainOnlyFlag) == 0x000001, "Wrong alignment on UnionAttackItemInfoInterface_GetSameDomainOnlyFlag");
static_assert(sizeof(UnionAttackItemInfoInterface_GetSameDomainOnlyFlag) == 0x000001, "Wrong size on UnionAttackItemInfoInterface_GetSameDomainOnlyFlag");
static_assert(offsetof(UnionAttackItemInfoInterface_GetSameDomainOnlyFlag, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetSameDomainOnlyFlag::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetUsingRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionAttackItemInfoInterface_GetUsingRacerIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetUsingRacerIndex) == 0x000004, "Wrong alignment on UnionAttackItemInfoInterface_GetUsingRacerIndex");
static_assert(sizeof(UnionAttackItemInfoInterface_GetUsingRacerIndex) == 0x000004, "Wrong size on UnionAttackItemInfoInterface_GetUsingRacerIndex");
static_assert(offsetof(UnionAttackItemInfoInterface_GetUsingRacerIndex, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetUsingRacerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.IsAttackItemMoveToTargetIgnorePathIF
// 0x0001 (0x0001 - 0x0000)
struct UnionAttackItemInfoInterface_IsAttackItemMoveToTargetIgnorePathIF final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_IsAttackItemMoveToTargetIgnorePathIF) == 0x000001, "Wrong alignment on UnionAttackItemInfoInterface_IsAttackItemMoveToTargetIgnorePathIF");
static_assert(sizeof(UnionAttackItemInfoInterface_IsAttackItemMoveToTargetIgnorePathIF) == 0x000001, "Wrong size on UnionAttackItemInfoInterface_IsAttackItemMoveToTargetIgnorePathIF");
static_assert(offsetof(UnionAttackItemInfoInterface_IsAttackItemMoveToTargetIgnorePathIF, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_IsAttackItemMoveToTargetIgnorePathIF::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.IsAttackItemTargetIF
// 0x0008 (0x0008 - 0x0000)
struct UnionAttackItemInfoInterface_IsAttackItemTargetIF final
{
public:
	int32                                         checkRacerIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionAttackItemInfoInterface_IsAttackItemTargetIF) == 0x000004, "Wrong alignment on UnionAttackItemInfoInterface_IsAttackItemTargetIF");
static_assert(sizeof(UnionAttackItemInfoInterface_IsAttackItemTargetIF) == 0x000008, "Wrong size on UnionAttackItemInfoInterface_IsAttackItemTargetIF");
static_assert(offsetof(UnionAttackItemInfoInterface_IsAttackItemTargetIF, checkRacerIndex) == 0x000000, "Member 'UnionAttackItemInfoInterface_IsAttackItemTargetIF::checkRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionAttackItemInfoInterface_IsAttackItemTargetIF, ReturnValue) == 0x000004, "Member 'UnionAttackItemInfoInterface_IsAttackItemTargetIF::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.IsAttackItemUsedForBackIF
// 0x0001 (0x0001 - 0x0000)
struct UnionAttackItemInfoInterface_IsAttackItemUsedForBackIF final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_IsAttackItemUsedForBackIF) == 0x000001, "Wrong alignment on UnionAttackItemInfoInterface_IsAttackItemUsedForBackIF");
static_assert(sizeof(UnionAttackItemInfoInterface_IsAttackItemUsedForBackIF) == 0x000001, "Wrong size on UnionAttackItemInfoInterface_IsAttackItemUsedForBackIF");
static_assert(offsetof(UnionAttackItemInfoInterface_IsAttackItemUsedForBackIF, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_IsAttackItemUsedForBackIF::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionAttackItemInfoInterface.GetAttackItemInfoTypeIF
// 0x0001 (0x0001 - 0x0000)
struct UnionAttackItemInfoInterface_GetAttackItemInfoTypeIF final
{
public:
	EUnionAttackItemInfoType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionAttackItemInfoInterface_GetAttackItemInfoTypeIF) == 0x000001, "Wrong alignment on UnionAttackItemInfoInterface_GetAttackItemInfoTypeIF");
static_assert(sizeof(UnionAttackItemInfoInterface_GetAttackItemInfoTypeIF) == 0x000001, "Wrong size on UnionAttackItemInfoInterface_GetAttackItemInfoTypeIF");
static_assert(offsetof(UnionAttackItemInfoInterface_GetAttackItemInfoTypeIF, ReturnValue) == 0x000000, "Member 'UnionAttackItemInfoInterface_GetAttackItemInfoTypeIF::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionCameraModifierPostEffect.SetCameraPostEffectParameter
// 0x0010 (0x0010 - 0x0000)
struct UnionCameraModifierPostEffect_SetCameraPostEffectParameter final
{
public:
	EUnionCameraModifierPostEffectType            EffectType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParameterName;                                     // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionCameraModifierPostEffect_SetCameraPostEffectParameter) == 0x000004, "Wrong alignment on UnionCameraModifierPostEffect_SetCameraPostEffectParameter");
static_assert(sizeof(UnionCameraModifierPostEffect_SetCameraPostEffectParameter) == 0x000010, "Wrong size on UnionCameraModifierPostEffect_SetCameraPostEffectParameter");
static_assert(offsetof(UnionCameraModifierPostEffect_SetCameraPostEffectParameter, EffectType) == 0x000000, "Member 'UnionCameraModifierPostEffect_SetCameraPostEffectParameter::EffectType' has a wrong offset!");
static_assert(offsetof(UnionCameraModifierPostEffect_SetCameraPostEffectParameter, ParameterName) == 0x000004, "Member 'UnionCameraModifierPostEffect_SetCameraPostEffectParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(UnionCameraModifierPostEffect_SetCameraPostEffectParameter, Value) == 0x00000C, "Member 'UnionCameraModifierPostEffect_SetCameraPostEffectParameter::Value' has a wrong offset!");

// Function UnionRun.UnionDebugStringSubsystem.Draw
// 0x0010 (0x0010 - 0x0000)
struct UnionDebugStringSubsystem_Draw final
{
public:
	class UCanvas*                                InCanvas;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      InPC;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionDebugStringSubsystem_Draw) == 0x000008, "Wrong alignment on UnionDebugStringSubsystem_Draw");
static_assert(sizeof(UnionDebugStringSubsystem_Draw) == 0x000010, "Wrong size on UnionDebugStringSubsystem_Draw");
static_assert(offsetof(UnionDebugStringSubsystem_Draw, InCanvas) == 0x000000, "Member 'UnionDebugStringSubsystem_Draw::InCanvas' has a wrong offset!");
static_assert(offsetof(UnionDebugStringSubsystem_Draw, InPC) == 0x000008, "Member 'UnionDebugStringSubsystem_Draw::InPC' has a wrong offset!");

// Function UnionRun.UnionDebugStringSubsystem.PrintDebugString
// 0x0028 (0x0028 - 0x0000)
struct UnionDebugStringSubsystem_PrintDebugString final
{
public:
	struct FDebugPrintStringStruct                DebugString;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionDebugStringSubsystem_PrintDebugString) == 0x000008, "Wrong alignment on UnionDebugStringSubsystem_PrintDebugString");
static_assert(sizeof(UnionDebugStringSubsystem_PrintDebugString) == 0x000028, "Wrong size on UnionDebugStringSubsystem_PrintDebugString");
static_assert(offsetof(UnionDebugStringSubsystem_PrintDebugString, DebugString) == 0x000000, "Member 'UnionDebugStringSubsystem_PrintDebugString::DebugString' has a wrong offset!");

// Function UnionRun.UnionDebugStringSubsystem.SetDebugStringVisibleFlag
// 0x0001 (0x0001 - 0x0000)
struct UnionDebugStringSubsystem_SetDebugStringVisibleFlag final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionDebugStringSubsystem_SetDebugStringVisibleFlag) == 0x000001, "Wrong alignment on UnionDebugStringSubsystem_SetDebugStringVisibleFlag");
static_assert(sizeof(UnionDebugStringSubsystem_SetDebugStringVisibleFlag) == 0x000001, "Wrong size on UnionDebugStringSubsystem_SetDebugStringVisibleFlag");
static_assert(offsetof(UnionDebugStringSubsystem_SetDebugStringVisibleFlag, bVisible) == 0x000000, "Member 'UnionDebugStringSubsystem_SetDebugStringVisibleFlag::bVisible' has a wrong offset!");

// Function UnionRun.UnionItemSkeletalMeshContainer.OnBeginItem
// 0x0008 (0x0008 - 0x0000)
struct UnionItemSkeletalMeshContainer_OnBeginItem final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionItemSkeletalMeshContainer_OnBeginItem) == 0x000008, "Wrong alignment on UnionItemSkeletalMeshContainer_OnBeginItem");
static_assert(sizeof(UnionItemSkeletalMeshContainer_OnBeginItem) == 0x000008, "Wrong size on UnionItemSkeletalMeshContainer_OnBeginItem");
static_assert(offsetof(UnionItemSkeletalMeshContainer_OnBeginItem, OwnerActor) == 0x000000, "Member 'UnionItemSkeletalMeshContainer_OnBeginItem::OwnerActor' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.GetPhysicalSurfaceType
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_GetPhysicalSurfaceType final
{
public:
	EUnionSurfaceType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_GetPhysicalSurfaceType) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_GetPhysicalSurfaceType");
static_assert(sizeof(UnionPhysicalMaterial_GetPhysicalSurfaceType) == 0x000001, "Wrong size on UnionPhysicalMaterial_GetPhysicalSurfaceType");
static_assert(offsetof(UnionPhysicalMaterial_GetPhysicalSurfaceType, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_GetPhysicalSurfaceType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.GetSurfaceFlag
// 0x001F (0x001F - 0x0000)
struct UnionPhysicalMaterial_GetSurfaceFlag final
{
public:
	struct FUnionSurfaceFlag                      ReturnValue;                                       // 0x0000(0x001F)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_GetSurfaceFlag) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_GetSurfaceFlag");
static_assert(sizeof(UnionPhysicalMaterial_GetSurfaceFlag) == 0x00001F, "Wrong size on UnionPhysicalMaterial_GetSurfaceFlag");
static_assert(offsetof(UnionPhysicalMaterial_GetSurfaceFlag, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_GetSurfaceFlag::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsAssistWall
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsAssistWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsAssistWall) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsAssistWall");
static_assert(sizeof(UnionPhysicalMaterial_IsAssistWall) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsAssistWall");
static_assert(offsetof(UnionPhysicalMaterial_IsAssistWall, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsAssistWall::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsAssistWallItemIgnoret
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsAssistWallItemIgnoret final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsAssistWallItemIgnoret) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsAssistWallItemIgnoret");
static_assert(sizeof(UnionPhysicalMaterial_IsAssistWallItemIgnoret) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsAssistWallItemIgnoret");
static_assert(offsetof(UnionPhysicalMaterial_IsAssistWallItemIgnoret, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsAssistWallItemIgnoret::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsBouncy
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsBouncy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsBouncy) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsBouncy");
static_assert(sizeof(UnionPhysicalMaterial_IsBouncy) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsBouncy");
static_assert(offsetof(UnionPhysicalMaterial_IsBouncy, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsBouncy::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsBumpyHeavy
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsBumpyHeavy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsBumpyHeavy) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsBumpyHeavy");
static_assert(sizeof(UnionPhysicalMaterial_IsBumpyHeavy) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsBumpyHeavy");
static_assert(offsetof(UnionPhysicalMaterial_IsBumpyHeavy, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsBumpyHeavy::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsBumpyLight
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsBumpyLight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsBumpyLight) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsBumpyLight");
static_assert(sizeof(UnionPhysicalMaterial_IsBumpyLight) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsBumpyLight");
static_assert(offsetof(UnionPhysicalMaterial_IsBumpyLight, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsBumpyLight::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsBumpyMedium
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsBumpyMedium final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsBumpyMedium) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsBumpyMedium");
static_assert(sizeof(UnionPhysicalMaterial_IsBumpyMedium) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsBumpyMedium");
static_assert(offsetof(UnionPhysicalMaterial_IsBumpyMedium, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsBumpyMedium::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsCameraChange
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsCameraChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsCameraChange) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsCameraChange");
static_assert(sizeof(UnionPhysicalMaterial_IsCameraChange) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsCameraChange");
static_assert(offsetof(UnionPhysicalMaterial_IsCameraChange, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsCameraChange::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsCarDriveable
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsCarDriveable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsCarDriveable) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsCarDriveable");
static_assert(sizeof(UnionPhysicalMaterial_IsCarDriveable) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsCarDriveable");
static_assert(offsetof(UnionPhysicalMaterial_IsCarDriveable, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsCarDriveable::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsCylindrical
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsCylindrical final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsCylindrical) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsCylindrical");
static_assert(sizeof(UnionPhysicalMaterial_IsCylindrical) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsCylindrical");
static_assert(offsetof(UnionPhysicalMaterial_IsCylindrical, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsCylindrical::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsDash
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsDash final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsDash) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsDash");
static_assert(sizeof(UnionPhysicalMaterial_IsDash) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsDash");
static_assert(offsetof(UnionPhysicalMaterial_IsDash, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsDash::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsGravitySwitch
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsGravitySwitch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsGravitySwitch) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsGravitySwitch");
static_assert(sizeof(UnionPhysicalMaterial_IsGravitySwitch) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsGravitySwitch");
static_assert(offsetof(UnionPhysicalMaterial_IsGravitySwitch, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsGravitySwitch::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsGrindDash
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsGrindDash final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsGrindDash) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsGrindDash");
static_assert(sizeof(UnionPhysicalMaterial_IsGrindDash) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsGrindDash");
static_assert(offsetof(UnionPhysicalMaterial_IsGrindDash, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsGrindDash::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsGuidedJump
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsGuidedJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsGuidedJump) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsGuidedJump");
static_assert(sizeof(UnionPhysicalMaterial_IsGuidedJump) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsGuidedJump");
static_assert(offsetof(UnionPhysicalMaterial_IsGuidedJump, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsGuidedJump::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsHitBouncyMidium
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsHitBouncyMidium final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsHitBouncyMidium) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsHitBouncyMidium");
static_assert(sizeof(UnionPhysicalMaterial_IsHitBouncyMidium) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsHitBouncyMidium");
static_assert(offsetof(UnionPhysicalMaterial_IsHitBouncyMidium, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsHitBouncyMidium::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsHitLoseRing
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsHitLoseRing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsHitLoseRing) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsHitLoseRing");
static_assert(sizeof(UnionPhysicalMaterial_IsHitLoseRing) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsHitLoseRing");
static_assert(offsetof(UnionPhysicalMaterial_IsHitLoseRing, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsHitLoseRing::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsHitSlowdownLight
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsHitSlowdownLight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsHitSlowdownLight) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsHitSlowdownLight");
static_assert(sizeof(UnionPhysicalMaterial_IsHitSlowdownLight) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsHitSlowdownLight");
static_assert(offsetof(UnionPhysicalMaterial_IsHitSlowdownLight, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsHitSlowdownLight::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsHitSlowdownMidium
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsHitSlowdownMidium final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsHitSlowdownMidium) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsHitSlowdownMidium");
static_assert(sizeof(UnionPhysicalMaterial_IsHitSlowdownMidium) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsHitSlowdownMidium");
static_assert(offsetof(UnionPhysicalMaterial_IsHitSlowdownMidium, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsHitSlowdownMidium::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsIgnoreSticky
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsIgnoreSticky final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsIgnoreSticky) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsIgnoreSticky");
static_assert(sizeof(UnionPhysicalMaterial_IsIgnoreSticky) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsIgnoreSticky");
static_assert(offsetof(UnionPhysicalMaterial_IsIgnoreSticky, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsIgnoreSticky::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsItemOnly
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsItemOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsItemOnly) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsItemOnly");
static_assert(sizeof(UnionPhysicalMaterial_IsItemOnly) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsItemOnly");
static_assert(offsetof(UnionPhysicalMaterial_IsItemOnly, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsItemOnly::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsMachineOnlyWall
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsMachineOnlyWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsMachineOnlyWall) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsMachineOnlyWall");
static_assert(sizeof(UnionPhysicalMaterial_IsMachineOnlyWall) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsMachineOnlyWall");
static_assert(offsetof(UnionPhysicalMaterial_IsMachineOnlyWall, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsMachineOnlyWall::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsNoJump
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsNoJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsNoJump) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsNoJump");
static_assert(sizeof(UnionPhysicalMaterial_IsNoJump) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsNoJump");
static_assert(offsetof(UnionPhysicalMaterial_IsNoJump, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsNoJump::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsNrrow
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsNrrow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsNrrow) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsNrrow");
static_assert(sizeof(UnionPhysicalMaterial_IsNrrow) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsNrrow");
static_assert(offsetof(UnionPhysicalMaterial_IsNrrow, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsNrrow::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsPseudoPlane
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsPseudoPlane final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsPseudoPlane) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsPseudoPlane");
static_assert(sizeof(UnionPhysicalMaterial_IsPseudoPlane) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsPseudoPlane");
static_assert(offsetof(UnionPhysicalMaterial_IsPseudoPlane, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsPseudoPlane::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsRespot
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsRespot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsRespot) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsRespot");
static_assert(sizeof(UnionPhysicalMaterial_IsRespot) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsRespot");
static_assert(offsetof(UnionPhysicalMaterial_IsRespot, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsRespot::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsSlide
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsSlide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsSlide) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsSlide");
static_assert(sizeof(UnionPhysicalMaterial_IsSlide) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsSlide");
static_assert(offsetof(UnionPhysicalMaterial_IsSlide, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsSlide::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsSlippy
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsSlippy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsSlippy) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsSlippy");
static_assert(sizeof(UnionPhysicalMaterial_IsSlippy) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsSlippy");
static_assert(offsetof(UnionPhysicalMaterial_IsSlippy, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsSlippy::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsSlowDownLight
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsSlowDownLight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsSlowDownLight) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsSlowDownLight");
static_assert(sizeof(UnionPhysicalMaterial_IsSlowDownLight) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsSlowDownLight");
static_assert(offsetof(UnionPhysicalMaterial_IsSlowDownLight, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsSlowDownLight::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsSlowDownMedium
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsSlowDownMedium final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsSlowDownMedium) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsSlowDownMedium");
static_assert(sizeof(UnionPhysicalMaterial_IsSlowDownMedium) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsSlowDownMedium");
static_assert(offsetof(UnionPhysicalMaterial_IsSlowDownMedium, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsSlowDownMedium::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsWall
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsWall) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsWall");
static_assert(sizeof(UnionPhysicalMaterial_IsWall) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsWall");
static_assert(offsetof(UnionPhysicalMaterial_IsWall, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsWall::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPhysicalMaterial.IsYellowDrill
// 0x0001 (0x0001 - 0x0000)
struct UnionPhysicalMaterial_IsYellowDrill final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPhysicalMaterial_IsYellowDrill) == 0x000001, "Wrong alignment on UnionPhysicalMaterial_IsYellowDrill");
static_assert(sizeof(UnionPhysicalMaterial_IsYellowDrill) == 0x000001, "Wrong size on UnionPhysicalMaterial_IsYellowDrill");
static_assert(offsetof(UnionPhysicalMaterial_IsYellowDrill, ReturnValue) == 0x000000, "Member 'UnionPhysicalMaterial_IsYellowDrill::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionPlayerInfoBillboardUI.ChangeDriverInfo
// 0x0001 (0x0001 - 0x0000)
struct UnionPlayerInfoBillboardUI_ChangeDriverInfo final
{
public:
	EDriverId                                     DriverId;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionPlayerInfoBillboardUI_ChangeDriverInfo) == 0x000001, "Wrong alignment on UnionPlayerInfoBillboardUI_ChangeDriverInfo");
static_assert(sizeof(UnionPlayerInfoBillboardUI_ChangeDriverInfo) == 0x000001, "Wrong size on UnionPlayerInfoBillboardUI_ChangeDriverInfo");
static_assert(offsetof(UnionPlayerInfoBillboardUI_ChangeDriverInfo, DriverId) == 0x000000, "Member 'UnionPlayerInfoBillboardUI_ChangeDriverInfo::DriverId' has a wrong offset!");

// Function UnionRun.UnionRaceGadgetUI.InitializeIconsByGadgetInfo
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceGadgetUI_InitializeIconsByGadgetInfo final
{
public:
	TArray<EGadgetId>                             GadgetInfo;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceGadgetUI_InitializeIconsByGadgetInfo) == 0x000008, "Wrong alignment on UnionRaceGadgetUI_InitializeIconsByGadgetInfo");
static_assert(sizeof(UnionRaceGadgetUI_InitializeIconsByGadgetInfo) == 0x000010, "Wrong size on UnionRaceGadgetUI_InitializeIconsByGadgetInfo");
static_assert(offsetof(UnionRaceGadgetUI_InitializeIconsByGadgetInfo, GadgetInfo) == 0x000000, "Member 'UnionRaceGadgetUI_InitializeIconsByGadgetInfo::GadgetInfo' has a wrong offset!");

// Function UnionRun.UnionRaceGadgetUI.InitializeIconsByRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceGadgetUI_InitializeIconsByRacerIndex final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceGadgetUI_InitializeIconsByRacerIndex) == 0x000004, "Wrong alignment on UnionRaceGadgetUI_InitializeIconsByRacerIndex");
static_assert(sizeof(UnionRaceGadgetUI_InitializeIconsByRacerIndex) == 0x000004, "Wrong size on UnionRaceGadgetUI_InitializeIconsByRacerIndex");
static_assert(offsetof(UnionRaceGadgetUI_InitializeIconsByRacerIndex, RacerIndex) == 0x000000, "Member 'UnionRaceGadgetUI_InitializeIconsByRacerIndex::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceInfoNotifier.RegisterRaceInfoListener
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceInfoNotifier_RegisterRaceInfoListener final
{
public:
	class UObject*                                InListener;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceInfoNotifier_RegisterRaceInfoListener) == 0x000008, "Wrong alignment on UnionRaceInfoNotifier_RegisterRaceInfoListener");
static_assert(sizeof(UnionRaceInfoNotifier_RegisterRaceInfoListener) == 0x000008, "Wrong size on UnionRaceInfoNotifier_RegisterRaceInfoListener");
static_assert(offsetof(UnionRaceInfoNotifier_RegisterRaceInfoListener, InListener) == 0x000000, "Member 'UnionRaceInfoNotifier_RegisterRaceInfoListener::InListener' has a wrong offset!");

// Function UnionRun.UnionRaceInfoNotifier.UnregisterRaceInfoListener
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceInfoNotifier_UnregisterRaceInfoListener final
{
public:
	class UObject*                                InListener;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceInfoNotifier_UnregisterRaceInfoListener) == 0x000008, "Wrong alignment on UnionRaceInfoNotifier_UnregisterRaceInfoListener");
static_assert(sizeof(UnionRaceInfoNotifier_UnregisterRaceInfoListener) == 0x000008, "Wrong size on UnionRaceInfoNotifier_UnregisterRaceInfoListener");
static_assert(offsetof(UnionRaceInfoNotifier_UnregisterRaceInfoListener, InListener) == 0x000000, "Member 'UnionRaceInfoNotifier_UnregisterRaceInfoListener::InListener' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.AddCourseMapActor
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceMinimap_AddCourseMapActor final
{
public:
	class AActor*                                 InAttackItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       InItemId;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceMinimap_AddCourseMapActor) == 0x000008, "Wrong alignment on UnionRaceMinimap_AddCourseMapActor");
static_assert(sizeof(UnionRaceMinimap_AddCourseMapActor) == 0x000010, "Wrong size on UnionRaceMinimap_AddCourseMapActor");
static_assert(offsetof(UnionRaceMinimap_AddCourseMapActor, InAttackItem) == 0x000000, "Member 'UnionRaceMinimap_AddCourseMapActor::InAttackItem' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_AddCourseMapActor, InItemId) == 0x000008, "Member 'UnionRaceMinimap_AddCourseMapActor::InItemId' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.GetGroupColor
// 0x0014 (0x0014 - 0x0000)
struct UnionRaceMinimap_GetGroupColor final
{
public:
	int32                                         GouupIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceMinimap_GetGroupColor) == 0x000004, "Wrong alignment on UnionRaceMinimap_GetGroupColor");
static_assert(sizeof(UnionRaceMinimap_GetGroupColor) == 0x000014, "Wrong size on UnionRaceMinimap_GetGroupColor");
static_assert(offsetof(UnionRaceMinimap_GetGroupColor, GouupIndex) == 0x000000, "Member 'UnionRaceMinimap_GetGroupColor::GouupIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_GetGroupColor, ReturnValue) == 0x000004, "Member 'UnionRaceMinimap_GetGroupColor::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.InitializeMinimap
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceMinimap_InitializeMinimap final
{
public:
	class UTextureRenderTarget2D*                 InRenderTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceMinimap_InitializeMinimap) == 0x000008, "Wrong alignment on UnionRaceMinimap_InitializeMinimap");
static_assert(sizeof(UnionRaceMinimap_InitializeMinimap) == 0x000008, "Wrong size on UnionRaceMinimap_InitializeMinimap");
static_assert(offsetof(UnionRaceMinimap_InitializeMinimap, InRenderTarget) == 0x000000, "Member 'UnionRaceMinimap_InitializeMinimap::InRenderTarget' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.RemoveCourseMapActor
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceMinimap_RemoveCourseMapActor final
{
public:
	class AActor*                                 InAttackItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceMinimap_RemoveCourseMapActor) == 0x000008, "Wrong alignment on UnionRaceMinimap_RemoveCourseMapActor");
static_assert(sizeof(UnionRaceMinimap_RemoveCourseMapActor) == 0x000008, "Wrong size on UnionRaceMinimap_RemoveCourseMapActor");
static_assert(offsetof(UnionRaceMinimap_RemoveCourseMapActor, InAttackItem) == 0x000000, "Member 'UnionRaceMinimap_RemoveCourseMapActor::InAttackItem' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetCourseMapCharaSpin
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceMinimap_SetCourseMapCharaSpin final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceMinimap_SetCourseMapCharaSpin) == 0x000004, "Wrong alignment on UnionRaceMinimap_SetCourseMapCharaSpin");
static_assert(sizeof(UnionRaceMinimap_SetCourseMapCharaSpin) == 0x000004, "Wrong size on UnionRaceMinimap_SetCourseMapCharaSpin");
static_assert(offsetof(UnionRaceMinimap_SetCourseMapCharaSpin, RacerIndex) == 0x000000, "Member 'UnionRaceMinimap_SetCourseMapCharaSpin::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetCourseSetting
// 0x0048 (0x0048 - 0x0000)
struct UnionRaceMinimap_SetCourseSetting final
{
public:
	TSoftObjectPtr<class UObject>                 CourseTexture;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOrthoRate;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngle;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceMinimap_SetCourseSetting) == 0x000008, "Wrong alignment on UnionRaceMinimap_SetCourseSetting");
static_assert(sizeof(UnionRaceMinimap_SetCourseSetting) == 0x000048, "Wrong size on UnionRaceMinimap_SetCourseSetting");
static_assert(offsetof(UnionRaceMinimap_SetCourseSetting, CourseTexture) == 0x000000, "Member 'UnionRaceMinimap_SetCourseSetting::CourseTexture' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetCourseSetting, InOrthoRate) == 0x000028, "Member 'UnionRaceMinimap_SetCourseSetting::InOrthoRate' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetCourseSetting, InAngle) == 0x00002C, "Member 'UnionRaceMinimap_SetCourseSetting::InAngle' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetCourseSetting, InOffset) == 0x000030, "Member 'UnionRaceMinimap_SetCourseSetting::InOffset' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetDomainIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceMinimap_SetDomainIndex final
{
public:
	int32                                         InDomainIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceMinimap_SetDomainIndex) == 0x000004, "Wrong alignment on UnionRaceMinimap_SetDomainIndex");
static_assert(sizeof(UnionRaceMinimap_SetDomainIndex) == 0x000004, "Wrong size on UnionRaceMinimap_SetDomainIndex");
static_assert(offsetof(UnionRaceMinimap_SetDomainIndex, InDomainIndex) == 0x000000, "Member 'UnionRaceMinimap_SetDomainIndex::InDomainIndex' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetDomainNumber
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceMinimap_SetDomainNumber final
{
public:
	int32                                         InDomainNumber;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceMinimap_SetDomainNumber) == 0x000004, "Wrong alignment on UnionRaceMinimap_SetDomainNumber");
static_assert(sizeof(UnionRaceMinimap_SetDomainNumber) == 0x000004, "Wrong size on UnionRaceMinimap_SetDomainNumber");
static_assert(offsetof(UnionRaceMinimap_SetDomainNumber, InDomainNumber) == 0x000000, "Member 'UnionRaceMinimap_SetDomainNumber::InDomainNumber' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetDriverId
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceMinimap_SetDriverId final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DriverId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceMinimap_SetDriverId) == 0x000004, "Wrong alignment on UnionRaceMinimap_SetDriverId");
static_assert(sizeof(UnionRaceMinimap_SetDriverId) == 0x000008, "Wrong size on UnionRaceMinimap_SetDriverId");
static_assert(offsetof(UnionRaceMinimap_SetDriverId, RacerIndex) == 0x000000, "Member 'UnionRaceMinimap_SetDriverId::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetDriverId, DriverId) == 0x000004, "Member 'UnionRaceMinimap_SetDriverId::DriverId' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetGroupIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceMinimap_SetGroupIndex final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceMinimap_SetGroupIndex) == 0x000004, "Wrong alignment on UnionRaceMinimap_SetGroupIndex");
static_assert(sizeof(UnionRaceMinimap_SetGroupIndex) == 0x000008, "Wrong size on UnionRaceMinimap_SetGroupIndex");
static_assert(offsetof(UnionRaceMinimap_SetGroupIndex, RacerIndex) == 0x000000, "Member 'UnionRaceMinimap_SetGroupIndex::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetGroupIndex, GroupIndex) == 0x000004, "Member 'UnionRaceMinimap_SetGroupIndex::GroupIndex' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetMinimapIconItem
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceMinimap_SetMinimapIconItem final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       InItemId;                                          // 0x0004(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceMinimap_SetMinimapIconItem) == 0x000004, "Wrong alignment on UnionRaceMinimap_SetMinimapIconItem");
static_assert(sizeof(UnionRaceMinimap_SetMinimapIconItem) == 0x000008, "Wrong size on UnionRaceMinimap_SetMinimapIconItem");
static_assert(offsetof(UnionRaceMinimap_SetMinimapIconItem, RacerIndex) == 0x000000, "Member 'UnionRaceMinimap_SetMinimapIconItem::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetMinimapIconItem, InItemId) == 0x000004, "Member 'UnionRaceMinimap_SetMinimapIconItem::InItemId' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetMinimapIconType
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceMinimap_SetMinimapIconType final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMinimapIconType                              InMinimapIconType;                                 // 0x0004(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceMinimap_SetMinimapIconType) == 0x000004, "Wrong alignment on UnionRaceMinimap_SetMinimapIconType");
static_assert(sizeof(UnionRaceMinimap_SetMinimapIconType) == 0x000008, "Wrong size on UnionRaceMinimap_SetMinimapIconType");
static_assert(offsetof(UnionRaceMinimap_SetMinimapIconType, RacerIndex) == 0x000000, "Member 'UnionRaceMinimap_SetMinimapIconType::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetMinimapIconType, InMinimapIconType) == 0x000004, "Member 'UnionRaceMinimap_SetMinimapIconType::InMinimapIconType' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetPlayerIndex
// 0x000C (0x000C - 0x0000)
struct UnionRaceMinimap_SetPlayerIndex final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayer;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocalMulti;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceMinimap_SetPlayerIndex) == 0x000004, "Wrong alignment on UnionRaceMinimap_SetPlayerIndex");
static_assert(sizeof(UnionRaceMinimap_SetPlayerIndex) == 0x00000C, "Wrong size on UnionRaceMinimap_SetPlayerIndex");
static_assert(offsetof(UnionRaceMinimap_SetPlayerIndex, RacerIndex) == 0x000000, "Member 'UnionRaceMinimap_SetPlayerIndex::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetPlayerIndex, PlayerIndex) == 0x000004, "Member 'UnionRaceMinimap_SetPlayerIndex::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetPlayerIndex, IsPlayer) == 0x000008, "Member 'UnionRaceMinimap_SetPlayerIndex::IsPlayer' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetPlayerIndex, IsLocalMulti) == 0x000009, "Member 'UnionRaceMinimap_SetPlayerIndex::IsLocalMulti' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetPosition
// 0x0020 (0x0020 - 0x0000)
struct UnionRaceMinimap_SetPosition final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InPosition;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceMinimap_SetPosition) == 0x000008, "Wrong alignment on UnionRaceMinimap_SetPosition");
static_assert(sizeof(UnionRaceMinimap_SetPosition) == 0x000020, "Wrong size on UnionRaceMinimap_SetPosition");
static_assert(offsetof(UnionRaceMinimap_SetPosition, RacerIndex) == 0x000000, "Member 'UnionRaceMinimap_SetPosition::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetPosition, InPosition) == 0x000008, "Member 'UnionRaceMinimap_SetPosition::InPosition' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetPositionAndZOrder
// 0x0028 (0x0028 - 0x0000)
struct UnionRaceMinimap_SetPositionAndZOrder final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InPosition;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InZOrder;                                          // 0x0020(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceMinimap_SetPositionAndZOrder) == 0x000008, "Wrong alignment on UnionRaceMinimap_SetPositionAndZOrder");
static_assert(sizeof(UnionRaceMinimap_SetPositionAndZOrder) == 0x000028, "Wrong size on UnionRaceMinimap_SetPositionAndZOrder");
static_assert(offsetof(UnionRaceMinimap_SetPositionAndZOrder, RacerIndex) == 0x000000, "Member 'UnionRaceMinimap_SetPositionAndZOrder::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetPositionAndZOrder, InPosition) == 0x000008, "Member 'UnionRaceMinimap_SetPositionAndZOrder::InPosition' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetPositionAndZOrder, InZOrder) == 0x000020, "Member 'UnionRaceMinimap_SetPositionAndZOrder::InZOrder' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetRacerCount
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceMinimap_SetRacerCount final
{
public:
	int32                                         RacerCount_0;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceMinimap_SetRacerCount) == 0x000004, "Wrong alignment on UnionRaceMinimap_SetRacerCount");
static_assert(sizeof(UnionRaceMinimap_SetRacerCount) == 0x000004, "Wrong size on UnionRaceMinimap_SetRacerCount");
static_assert(offsetof(UnionRaceMinimap_SetRacerCount, RacerCount_0) == 0x000000, "Member 'UnionRaceMinimap_SetRacerCount::RacerCount_0' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetRacerIconVisibility
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceMinimap_SetRacerIconVisibility final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              NewVisibility;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceMinimap_SetRacerIconVisibility) == 0x000004, "Wrong alignment on UnionRaceMinimap_SetRacerIconVisibility");
static_assert(sizeof(UnionRaceMinimap_SetRacerIconVisibility) == 0x000008, "Wrong size on UnionRaceMinimap_SetRacerIconVisibility");
static_assert(offsetof(UnionRaceMinimap_SetRacerIconVisibility, RacerIndex) == 0x000000, "Member 'UnionRaceMinimap_SetRacerIconVisibility::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetRacerIconVisibility, NewVisibility) == 0x000004, "Member 'UnionRaceMinimap_SetRacerIconVisibility::NewVisibility' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetReaderFlag
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceMinimap_SetReaderFlag final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsReader;                                        // 0x0004(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceMinimap_SetReaderFlag) == 0x000004, "Wrong alignment on UnionRaceMinimap_SetReaderFlag");
static_assert(sizeof(UnionRaceMinimap_SetReaderFlag) == 0x000008, "Wrong size on UnionRaceMinimap_SetReaderFlag");
static_assert(offsetof(UnionRaceMinimap_SetReaderFlag, RacerIndex) == 0x000000, "Member 'UnionRaceMinimap_SetReaderFlag::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetReaderFlag, InIsReader) == 0x000004, "Member 'UnionRaceMinimap_SetReaderFlag::InIsReader' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.SetRival
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceMinimap_SetRival final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRival;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPowerRival;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceMinimap_SetRival) == 0x000004, "Wrong alignment on UnionRaceMinimap_SetRival");
static_assert(sizeof(UnionRaceMinimap_SetRival) == 0x000008, "Wrong size on UnionRaceMinimap_SetRival");
static_assert(offsetof(UnionRaceMinimap_SetRival, RacerIndex) == 0x000000, "Member 'UnionRaceMinimap_SetRival::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetRival, IsRival) == 0x000004, "Member 'UnionRaceMinimap_SetRival::IsRival' has a wrong offset!");
static_assert(offsetof(UnionRaceMinimap_SetRival, IsPowerRival) == 0x000005, "Member 'UnionRaceMinimap_SetRival::IsPowerRival' has a wrong offset!");

// Function UnionRun.UnionRaceMinimap.UpdateMinimap
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceMinimap_UpdateMinimap final
{
public:
	float                                         InDelta;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceMinimap_UpdateMinimap) == 0x000004, "Wrong alignment on UnionRaceMinimap_UpdateMinimap");
static_assert(sizeof(UnionRaceMinimap_UpdateMinimap) == 0x000004, "Wrong size on UnionRaceMinimap_UpdateMinimap");
static_assert(offsetof(UnionRaceMinimap_UpdateMinimap, InDelta) == 0x000000, "Member 'UnionRaceMinimap_UpdateMinimap::InDelta' has a wrong offset!");

// Function UnionRun.UnionRaceReturnDashUI.GetButtonWidget
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceReturnDashUI_GetButtonWidget final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceReturnDashUI_GetButtonWidget) == 0x000008, "Wrong alignment on UnionRaceReturnDashUI_GetButtonWidget");
static_assert(sizeof(UnionRaceReturnDashUI_GetButtonWidget) == 0x000008, "Wrong size on UnionRaceReturnDashUI_GetButtonWidget");
static_assert(offsetof(UnionRaceReturnDashUI_GetButtonWidget, ReturnValue) == 0x000000, "Member 'UnionRaceReturnDashUI_GetButtonWidget::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceReturnDashUI.SetGaugeParcent
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceReturnDashUI_SetGaugeParcent final
{
public:
	float                                         GaugeRate;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceReturnDashUI_SetGaugeParcent) == 0x000004, "Wrong alignment on UnionRaceReturnDashUI_SetGaugeParcent");
static_assert(sizeof(UnionRaceReturnDashUI_SetGaugeParcent) == 0x000004, "Wrong size on UnionRaceReturnDashUI_SetGaugeParcent");
static_assert(offsetof(UnionRaceReturnDashUI_SetGaugeParcent, GaugeRate) == 0x000000, "Member 'UnionRaceReturnDashUI_SetGaugeParcent::GaugeRate' has a wrong offset!");

// Function UnionRun.UnionRaceReturnDashUI.SetReturnDashSetting
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceReturnDashUI_SetReturnDashSetting final
{
public:
	float                                         Pivot;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceReturnDashUI_SetReturnDashSetting) == 0x000004, "Wrong alignment on UnionRaceReturnDashUI_SetReturnDashSetting");
static_assert(sizeof(UnionRaceReturnDashUI_SetReturnDashSetting) == 0x000008, "Wrong size on UnionRaceReturnDashUI_SetReturnDashSetting");
static_assert(offsetof(UnionRaceReturnDashUI_SetReturnDashSetting, Pivot) == 0x000000, "Member 'UnionRaceReturnDashUI_SetReturnDashSetting::Pivot' has a wrong offset!");
static_assert(offsetof(UnionRaceReturnDashUI_SetReturnDashSetting, Range) == 0x000004, "Member 'UnionRaceReturnDashUI_SetReturnDashSetting::Range' has a wrong offset!");

// Function UnionRun.UnionRacers.GetDriverIdByRacerIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRacers_GetDriverIdByRacerIndex final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRacers_GetDriverIdByRacerIndex) == 0x000004, "Wrong alignment on UnionRacers_GetDriverIdByRacerIndex");
static_assert(sizeof(UnionRacers_GetDriverIdByRacerIndex) == 0x000008, "Wrong size on UnionRacers_GetDriverIdByRacerIndex");
static_assert(offsetof(UnionRacers_GetDriverIdByRacerIndex, InRacerIndex) == 0x000000, "Member 'UnionRacers_GetDriverIdByRacerIndex::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacers_GetDriverIdByRacerIndex, ReturnValue) == 0x000004, "Member 'UnionRacers_GetDriverIdByRacerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.ChangeVehicleDisplayMode
// 0x0008 (0x0008 - 0x0000)
struct UnionRacers_ChangeVehicleDisplayMode final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleDisplayMode                           InVehicleDisplayMode;                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRacers_ChangeVehicleDisplayMode) == 0x000004, "Wrong alignment on UnionRacers_ChangeVehicleDisplayMode");
static_assert(sizeof(UnionRacers_ChangeVehicleDisplayMode) == 0x000008, "Wrong size on UnionRacers_ChangeVehicleDisplayMode");
static_assert(offsetof(UnionRacers_ChangeVehicleDisplayMode, InRacerIndex) == 0x000000, "Member 'UnionRacers_ChangeVehicleDisplayMode::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacers_ChangeVehicleDisplayMode, InVehicleDisplayMode) == 0x000004, "Member 'UnionRacers_ChangeVehicleDisplayMode::InVehicleDisplayMode' has a wrong offset!");

// Function UnionRun.UnionRacers.Destroy
// 0x0001 (0x0001 - 0x0000)
struct UnionRacers_Destroy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_Destroy) == 0x000001, "Wrong alignment on UnionRacers_Destroy");
static_assert(sizeof(UnionRacers_Destroy) == 0x000001, "Wrong size on UnionRacers_Destroy");
static_assert(offsetof(UnionRacers_Destroy, ReturnValue) == 0x000000, "Member 'UnionRacers_Destroy::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.ExecTick
// 0x0004 (0x0004 - 0x0000)
struct UnionRacers_ExecTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_ExecTick) == 0x000004, "Wrong alignment on UnionRacers_ExecTick");
static_assert(sizeof(UnionRacers_ExecTick) == 0x000004, "Wrong size on UnionRacers_ExecTick");
static_assert(offsetof(UnionRacers_ExecTick, DeltaSeconds) == 0x000000, "Member 'UnionRacers_ExecTick::DeltaSeconds' has a wrong offset!");

// Function UnionRun.UnionRacers.GetLocalPlayers
// 0x0010 (0x0010 - 0x0000)
struct UnionRacers_GetLocalPlayers final
{
public:
	TArray<class UUnionRacer*>                    OutRacers;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetLocalPlayers) == 0x000008, "Wrong alignment on UnionRacers_GetLocalPlayers");
static_assert(sizeof(UnionRacers_GetLocalPlayers) == 0x000010, "Wrong size on UnionRacers_GetLocalPlayers");
static_assert(offsetof(UnionRacers_GetLocalPlayers, OutRacers) == 0x000000, "Member 'UnionRacers_GetLocalPlayers::OutRacers' has a wrong offset!");

// Function UnionRun.UnionRacers.GetPlayerRank
// 0x0008 (0x0008 - 0x0000)
struct UnionRacers_GetPlayerRank final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetPlayerRank) == 0x000004, "Wrong alignment on UnionRacers_GetPlayerRank");
static_assert(sizeof(UnionRacers_GetPlayerRank) == 0x000008, "Wrong size on UnionRacers_GetPlayerRank");
static_assert(offsetof(UnionRacers_GetPlayerRank, PlayerIndex) == 0x000000, "Member 'UnionRacers_GetPlayerRank::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacers_GetPlayerRank, ReturnValue) == 0x000004, "Member 'UnionRacers_GetPlayerRank::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.GetRaceHUDRef
// 0x0008 (0x0008 - 0x0000)
struct UnionRacers_GetRaceHUDRef final
{
public:
	class UUnionRaceUI*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetRaceHUDRef) == 0x000008, "Wrong alignment on UnionRacers_GetRaceHUDRef");
static_assert(sizeof(UnionRacers_GetRaceHUDRef) == 0x000008, "Wrong size on UnionRacers_GetRaceHUDRef");
static_assert(offsetof(UnionRacers_GetRaceHUDRef, ReturnValue) == 0x000000, "Member 'UnionRacers_GetRaceHUDRef::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.GetRaceLapInfo
// 0x0010 (0x0010 - 0x0000)
struct UnionRacers_GetRaceLapInfo final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRaceLapInfo*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetRaceLapInfo) == 0x000008, "Wrong alignment on UnionRacers_GetRaceLapInfo");
static_assert(sizeof(UnionRacers_GetRaceLapInfo) == 0x000010, "Wrong size on UnionRacers_GetRaceLapInfo");
static_assert(offsetof(UnionRacers_GetRaceLapInfo, InRacerIndex) == 0x000000, "Member 'UnionRacers_GetRaceLapInfo::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacers_GetRaceLapInfo, ReturnValue) == 0x000008, "Member 'UnionRacers_GetRaceLapInfo::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.GetRacer
// 0x0010 (0x0010 - 0x0000)
struct UnionRacers_GetRacer final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRacer*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetRacer) == 0x000008, "Wrong alignment on UnionRacers_GetRacer");
static_assert(sizeof(UnionRacers_GetRacer) == 0x000010, "Wrong size on UnionRacers_GetRacer");
static_assert(offsetof(UnionRacers_GetRacer, InRacerIndex) == 0x000000, "Member 'UnionRacers_GetRacer::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacers_GetRacer, ReturnValue) == 0x000008, "Member 'UnionRacers_GetRacer::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.GetRacer3DPositionAndDomainNumber
// 0x0020 (0x0020 - 0x0000)
struct UnionRacers_GetRacer3DPositionAndDomainNumber final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDomainNumber                                 DomainNum;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetRacer3DPositionAndDomainNumber) == 0x000008, "Wrong alignment on UnionRacers_GetRacer3DPositionAndDomainNumber");
static_assert(sizeof(UnionRacers_GetRacer3DPositionAndDomainNumber) == 0x000020, "Wrong size on UnionRacers_GetRacer3DPositionAndDomainNumber");
static_assert(offsetof(UnionRacers_GetRacer3DPositionAndDomainNumber, Index_0) == 0x000000, "Member 'UnionRacers_GetRacer3DPositionAndDomainNumber::Index_0' has a wrong offset!");
static_assert(offsetof(UnionRacers_GetRacer3DPositionAndDomainNumber, DomainNum) == 0x000004, "Member 'UnionRacers_GetRacer3DPositionAndDomainNumber::DomainNum' has a wrong offset!");
static_assert(offsetof(UnionRacers_GetRacer3DPositionAndDomainNumber, ReturnValue) == 0x000008, "Member 'UnionRacers_GetRacer3DPositionAndDomainNumber::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.GetRacerIndexByRank
// 0x0008 (0x0008 - 0x0000)
struct UnionRacers_GetRacerIndexByRank final
{
public:
	int32                                         InRank;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetRacerIndexByRank) == 0x000004, "Wrong alignment on UnionRacers_GetRacerIndexByRank");
static_assert(sizeof(UnionRacers_GetRacerIndexByRank) == 0x000008, "Wrong size on UnionRacers_GetRacerIndexByRank");
static_assert(offsetof(UnionRacers_GetRacerIndexByRank, InRank) == 0x000000, "Member 'UnionRacers_GetRacerIndexByRank::InRank' has a wrong offset!");
static_assert(offsetof(UnionRacers_GetRacerIndexByRank, ReturnValue) == 0x000004, "Member 'UnionRacers_GetRacerIndexByRank::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.GetRacerRank
// 0x0008 (0x0008 - 0x0000)
struct UnionRacers_GetRacerRank final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetRacerRank) == 0x000004, "Wrong alignment on UnionRacers_GetRacerRank");
static_assert(sizeof(UnionRacers_GetRacerRank) == 0x000008, "Wrong size on UnionRacers_GetRacerRank");
static_assert(offsetof(UnionRacers_GetRacerRank, Index_0) == 0x000000, "Member 'UnionRacers_GetRacerRank::Index_0' has a wrong offset!");
static_assert(offsetof(UnionRacers_GetRacerRank, ReturnValue) == 0x000004, "Member 'UnionRacers_GetRacerRank::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.GetRacerSituationObject
// 0x0010 (0x0010 - 0x0000)
struct UnionRacers_GetRacerSituationObject final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRaceSituationObject*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetRacerSituationObject) == 0x000008, "Wrong alignment on UnionRacers_GetRacerSituationObject");
static_assert(sizeof(UnionRacers_GetRacerSituationObject) == 0x000010, "Wrong size on UnionRacers_GetRacerSituationObject");
static_assert(offsetof(UnionRacers_GetRacerSituationObject, InRacerIndex) == 0x000000, "Member 'UnionRacers_GetRacerSituationObject::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacers_GetRacerSituationObject, ReturnValue) == 0x000008, "Member 'UnionRacers_GetRacerSituationObject::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.GetRacerStatusObject
// 0x0010 (0x0010 - 0x0000)
struct UnionRacers_GetRacerStatusObject final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRacerStatusObject*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetRacerStatusObject) == 0x000008, "Wrong alignment on UnionRacers_GetRacerStatusObject");
static_assert(sizeof(UnionRacers_GetRacerStatusObject) == 0x000010, "Wrong size on UnionRacers_GetRacerStatusObject");
static_assert(offsetof(UnionRacers_GetRacerStatusObject, InRacerIndex) == 0x000000, "Member 'UnionRacers_GetRacerStatusObject::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacers_GetRacerStatusObject, ReturnValue) == 0x000008, "Member 'UnionRacers_GetRacerStatusObject::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.GetTestRaceCount
// 0x0004 (0x0004 - 0x0000)
struct UnionRacers_GetTestRaceCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetTestRaceCount) == 0x000004, "Wrong alignment on UnionRacers_GetTestRaceCount");
static_assert(sizeof(UnionRacers_GetTestRaceCount) == 0x000004, "Wrong size on UnionRacers_GetTestRaceCount");
static_assert(offsetof(UnionRacers_GetTestRaceCount, ReturnValue) == 0x000000, "Member 'UnionRacers_GetTestRaceCount::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.IsOfflinePlayer
// 0x0010 (0x0010 - 0x0000)
struct UnionRacers_IsOfflinePlayer final
{
public:
	class UUnionRacer*                            Racer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRacers_IsOfflinePlayer) == 0x000008, "Wrong alignment on UnionRacers_IsOfflinePlayer");
static_assert(sizeof(UnionRacers_IsOfflinePlayer) == 0x000010, "Wrong size on UnionRacers_IsOfflinePlayer");
static_assert(offsetof(UnionRacers_IsOfflinePlayer, Racer) == 0x000000, "Member 'UnionRacers_IsOfflinePlayer::Racer' has a wrong offset!");
static_assert(offsetof(UnionRacers_IsOfflinePlayer, ReturnValue) == 0x000008, "Member 'UnionRacers_IsOfflinePlayer::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.IsOnlineCom
// 0x0010 (0x0010 - 0x0000)
struct UnionRacers_IsOnlineCom final
{
public:
	class UUnionRacer*                            Racer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRacers_IsOnlineCom) == 0x000008, "Wrong alignment on UnionRacers_IsOnlineCom");
static_assert(sizeof(UnionRacers_IsOnlineCom) == 0x000010, "Wrong size on UnionRacers_IsOnlineCom");
static_assert(offsetof(UnionRacers_IsOnlineCom, Racer) == 0x000000, "Member 'UnionRacers_IsOnlineCom::Racer' has a wrong offset!");
static_assert(offsetof(UnionRacers_IsOnlineCom, ReturnValue) == 0x000008, "Member 'UnionRacers_IsOnlineCom::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.IsPlayer
// 0x0010 (0x0010 - 0x0000)
struct UnionRacers_IsPlayer final
{
public:
	class UUnionRacer*                            Racer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRacers_IsPlayer) == 0x000008, "Wrong alignment on UnionRacers_IsPlayer");
static_assert(sizeof(UnionRacers_IsPlayer) == 0x000010, "Wrong size on UnionRacers_IsPlayer");
static_assert(offsetof(UnionRacers_IsPlayer, Racer) == 0x000000, "Member 'UnionRacers_IsPlayer::Racer' has a wrong offset!");
static_assert(offsetof(UnionRacers_IsPlayer, ReturnValue) == 0x000008, "Member 'UnionRacers_IsPlayer::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.SetLinkPlayerControllerIndexToRacerIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRacers_SetLinkPlayerControllerIndexToRacerIndex final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRacerIndex;                                      // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_SetLinkPlayerControllerIndexToRacerIndex) == 0x000004, "Wrong alignment on UnionRacers_SetLinkPlayerControllerIndexToRacerIndex");
static_assert(sizeof(UnionRacers_SetLinkPlayerControllerIndexToRacerIndex) == 0x000008, "Wrong size on UnionRacers_SetLinkPlayerControllerIndexToRacerIndex");
static_assert(offsetof(UnionRacers_SetLinkPlayerControllerIndexToRacerIndex, PlayerControllerIndex) == 0x000000, "Member 'UnionRacers_SetLinkPlayerControllerIndexToRacerIndex::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacers_SetLinkPlayerControllerIndexToRacerIndex, InRacerIndex) == 0x000004, "Member 'UnionRacers_SetLinkPlayerControllerIndexToRacerIndex::InRacerIndex' has a wrong offset!");

// Function UnionRun.UnionRacers.SetRaceLapInfo
// 0x0010 (0x0010 - 0x0000)
struct UnionRacers_SetRaceLapInfo final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRaceLapInfo*                      InRaceLapInfo;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_SetRaceLapInfo) == 0x000008, "Wrong alignment on UnionRacers_SetRaceLapInfo");
static_assert(sizeof(UnionRacers_SetRaceLapInfo) == 0x000010, "Wrong size on UnionRacers_SetRaceLapInfo");
static_assert(offsetof(UnionRacers_SetRaceLapInfo, InRacerIndex) == 0x000000, "Member 'UnionRacers_SetRaceLapInfo::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacers_SetRaceLapInfo, InRaceLapInfo) == 0x000008, "Member 'UnionRacers_SetRaceLapInfo::InRaceLapInfo' has a wrong offset!");

// Function UnionRun.UnionRacers.SetTickable
// 0x0001 (0x0001 - 0x0000)
struct UnionRacers_SetTickable final
{
public:
	bool                                          bTickable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_SetTickable) == 0x000001, "Wrong alignment on UnionRacers_SetTickable");
static_assert(sizeof(UnionRacers_SetTickable) == 0x000001, "Wrong size on UnionRacers_SetTickable");
static_assert(offsetof(UnionRacers_SetTickable, bTickable) == 0x000000, "Member 'UnionRacers_SetTickable::bTickable' has a wrong offset!");

// Function UnionRun.UnionRacers.SetVehicle
// 0x0010 (0x0010 - 0x0000)
struct UnionRacers_SetVehicle final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  InVehicle;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_SetVehicle) == 0x000008, "Wrong alignment on UnionRacers_SetVehicle");
static_assert(sizeof(UnionRacers_SetVehicle) == 0x000010, "Wrong size on UnionRacers_SetVehicle");
static_assert(offsetof(UnionRacers_SetVehicle, InRacerIndex) == 0x000000, "Member 'UnionRacers_SetVehicle::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacers_SetVehicle, InVehicle) == 0x000008, "Member 'UnionRacers_SetVehicle::InVehicle' has a wrong offset!");

// Function UnionRun.UnionRacers.UnionRacers_SetTimerDelegate
// 0x0020 (0x0020 - 0x0000)
struct UnionRacers_UnionRacers_SetTimerDelegate final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_UnionRacers_SetTimerDelegate) == 0x000008, "Wrong alignment on UnionRacers_UnionRacers_SetTimerDelegate");
static_assert(sizeof(UnionRacers_UnionRacers_SetTimerDelegate) == 0x000020, "Wrong size on UnionRacers_UnionRacers_SetTimerDelegate");
static_assert(offsetof(UnionRacers_UnionRacers_SetTimerDelegate, Delegate) == 0x000000, "Member 'UnionRacers_UnionRacers_SetTimerDelegate::Delegate' has a wrong offset!");
static_assert(offsetof(UnionRacers_UnionRacers_SetTimerDelegate, Time) == 0x000010, "Member 'UnionRacers_UnionRacers_SetTimerDelegate::Time' has a wrong offset!");
static_assert(offsetof(UnionRacers_UnionRacers_SetTimerDelegate, bLooping) == 0x000014, "Member 'UnionRacers_UnionRacers_SetTimerDelegate::bLooping' has a wrong offset!");
static_assert(offsetof(UnionRacers_UnionRacers_SetTimerDelegate, ReturnValue) == 0x000018, "Member 'UnionRacers_UnionRacers_SetTimerDelegate::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.UpdateBaggage
// 0x0004 (0x0004 - 0x0000)
struct UnionRacers_UpdateBaggage final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_UpdateBaggage) == 0x000004, "Wrong alignment on UnionRacers_UpdateBaggage");
static_assert(sizeof(UnionRacers_UpdateBaggage) == 0x000004, "Wrong size on UnionRacers_UpdateBaggage");
static_assert(offsetof(UnionRacers_UpdateBaggage, Delta) == 0x000000, "Member 'UnionRacers_UpdateBaggage::Delta' has a wrong offset!");

// Function UnionRun.UnionRacers.UpdateDomain
// 0x0004 (0x0004 - 0x0000)
struct UnionRacers_UpdateDomain final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_UpdateDomain) == 0x000004, "Wrong alignment on UnionRacers_UpdateDomain");
static_assert(sizeof(UnionRacers_UpdateDomain) == 0x000004, "Wrong size on UnionRacers_UpdateDomain");
static_assert(offsetof(UnionRacers_UpdateDomain, Delta) == 0x000000, "Member 'UnionRacers_UpdateDomain::Delta' has a wrong offset!");

// Function UnionRun.UnionRacers.UpdatePlayerNameHUD
// 0x0004 (0x0004 - 0x0000)
struct UnionRacers_UpdatePlayerNameHUD final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_UpdatePlayerNameHUD) == 0x000004, "Wrong alignment on UnionRacers_UpdatePlayerNameHUD");
static_assert(sizeof(UnionRacers_UpdatePlayerNameHUD) == 0x000004, "Wrong size on UnionRacers_UpdatePlayerNameHUD");
static_assert(offsetof(UnionRacers_UpdatePlayerNameHUD, Delta) == 0x000000, "Member 'UnionRacers_UpdatePlayerNameHUD::Delta' has a wrong offset!");

// Function UnionRun.UnionRacers.UpdateTestRace
// 0x0004 (0x0004 - 0x0000)
struct UnionRacers_UpdateTestRace final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_UpdateTestRace) == 0x000004, "Wrong alignment on UnionRacers_UpdateTestRace");
static_assert(sizeof(UnionRacers_UpdateTestRace) == 0x000004, "Wrong size on UnionRacers_UpdateTestRace");
static_assert(offsetof(UnionRacers_UpdateTestRace, Delta) == 0x000000, "Member 'UnionRacers_UpdateTestRace::Delta' has a wrong offset!");

// Function UnionRun.UnionRacers.UpdateVehicles
// 0x0004 (0x0004 - 0x0000)
struct UnionRacers_UpdateVehicles final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_UpdateVehicles) == 0x000004, "Wrong alignment on UnionRacers_UpdateVehicles");
static_assert(sizeof(UnionRacers_UpdateVehicles) == 0x000004, "Wrong size on UnionRacers_UpdateVehicles");
static_assert(offsetof(UnionRacers_UpdateVehicles, Delta) == 0x000000, "Member 'UnionRacers_UpdateVehicles::Delta' has a wrong offset!");

// Function UnionRun.UnionRacers.GetGamePauseOwnerPlayerControllerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacers_GetGamePauseOwnerPlayerControllerIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetGamePauseOwnerPlayerControllerIndex) == 0x000004, "Wrong alignment on UnionRacers_GetGamePauseOwnerPlayerControllerIndex");
static_assert(sizeof(UnionRacers_GetGamePauseOwnerPlayerControllerIndex) == 0x000004, "Wrong size on UnionRacers_GetGamePauseOwnerPlayerControllerIndex");
static_assert(offsetof(UnionRacers_GetGamePauseOwnerPlayerControllerIndex, ReturnValue) == 0x000000, "Member 'UnionRacers_GetGamePauseOwnerPlayerControllerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.GetGamePauseOwnerRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRacers_GetGamePauseOwnerRacerIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetGamePauseOwnerRacerIndex) == 0x000004, "Wrong alignment on UnionRacers_GetGamePauseOwnerRacerIndex");
static_assert(sizeof(UnionRacers_GetGamePauseOwnerRacerIndex) == 0x000004, "Wrong size on UnionRacers_GetGamePauseOwnerRacerIndex");
static_assert(offsetof(UnionRacers_GetGamePauseOwnerRacerIndex, ReturnValue) == 0x000000, "Member 'UnionRacers_GetGamePauseOwnerRacerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.GetPlayerControllerIndexByRacerIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRacers_GetPlayerControllerIndexByRacerIndex final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetPlayerControllerIndexByRacerIndex) == 0x000004, "Wrong alignment on UnionRacers_GetPlayerControllerIndexByRacerIndex");
static_assert(sizeof(UnionRacers_GetPlayerControllerIndexByRacerIndex) == 0x000008, "Wrong size on UnionRacers_GetPlayerControllerIndexByRacerIndex");
static_assert(offsetof(UnionRacers_GetPlayerControllerIndexByRacerIndex, InRacerIndex) == 0x000000, "Member 'UnionRacers_GetPlayerControllerIndexByRacerIndex::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacers_GetPlayerControllerIndexByRacerIndex, ReturnValue) == 0x000004, "Member 'UnionRacers_GetPlayerControllerIndexByRacerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRacers.GetRacerIndexByPlayerControllerIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRacers_GetRacerIndexByPlayerControllerIndex final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRacers_GetRacerIndexByPlayerControllerIndex) == 0x000004, "Wrong alignment on UnionRacers_GetRacerIndexByPlayerControllerIndex");
static_assert(sizeof(UnionRacers_GetRacerIndexByPlayerControllerIndex) == 0x000008, "Wrong size on UnionRacers_GetRacerIndexByPlayerControllerIndex");
static_assert(offsetof(UnionRacers_GetRacerIndexByPlayerControllerIndex, PlayerControllerIndex) == 0x000000, "Member 'UnionRacers_GetRacerIndexByPlayerControllerIndex::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRacers_GetRacerIndexByPlayerControllerIndex, ReturnValue) == 0x000004, "Member 'UnionRacers_GetRacerIndexByPlayerControllerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceStartUI.GetButtonWidget
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceStartUI_GetButtonWidget final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceStartUI_GetButtonWidget) == 0x000008, "Wrong alignment on UnionRaceStartUI_GetButtonWidget");
static_assert(sizeof(UnionRaceStartUI_GetButtonWidget) == 0x000008, "Wrong size on UnionRaceStartUI_GetButtonWidget");
static_assert(offsetof(UnionRaceStartUI_GetButtonWidget, ReturnValue) == 0x000000, "Member 'UnionRaceStartUI_GetButtonWidget::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceStartUI.SetCount
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceStartUI_SetCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceStartUI_SetCount) == 0x000004, "Wrong alignment on UnionRaceStartUI_SetCount");
static_assert(sizeof(UnionRaceStartUI_SetCount) == 0x000004, "Wrong size on UnionRaceStartUI_SetCount");
static_assert(offsetof(UnionRaceStartUI_SetCount, InCount) == 0x000000, "Member 'UnionRaceStartUI_SetCount::InCount' has a wrong offset!");

// Function UnionRun.UnionRaceStartUI.SetGaugeParcent
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceStartUI_SetGaugeParcent final
{
public:
	float                                         GaugeRate;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceStartUI_SetGaugeParcent) == 0x000004, "Wrong alignment on UnionRaceStartUI_SetGaugeParcent");
static_assert(sizeof(UnionRaceStartUI_SetGaugeParcent) == 0x000004, "Wrong size on UnionRaceStartUI_SetGaugeParcent");
static_assert(offsetof(UnionRaceStartUI_SetGaugeParcent, GaugeRate) == 0x000000, "Member 'UnionRaceStartUI_SetGaugeParcent::GaugeRate' has a wrong offset!");

// Function UnionRun.UnionRaceStartUI.SetStartDashParamSetting
// 0x0030 (0x0030 - 0x0000)
struct UnionRaceStartUI_SetStartDashParamSetting final
{
public:
	struct FUnionRaceStartDashParam               InStartDashParam;                                  // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceStartUI_SetStartDashParamSetting) == 0x000004, "Wrong alignment on UnionRaceStartUI_SetStartDashParamSetting");
static_assert(sizeof(UnionRaceStartUI_SetStartDashParamSetting) == 0x000030, "Wrong size on UnionRaceStartUI_SetStartDashParamSetting");
static_assert(offsetof(UnionRaceStartUI_SetStartDashParamSetting, InStartDashParam) == 0x000000, "Member 'UnionRaceStartUI_SetStartDashParamSetting::InStartDashParam' has a wrong offset!");

// Function UnionRun.UnionRaceStartUI.SetStartDashSetting
// 0x0020 (0x0020 - 0x0000)
struct UnionRaceStartUI_SetStartDashSetting final
{
public:
	float                                         LV3_PIVOT;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LV3_RANGE;                                         // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LV2_PIVOT;                                         // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LV2_RANGE;                                         // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NG1_PIVOT;                                         // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NG1_RANGE;                                         // 0x0014(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NG2_PIVOT;                                         // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NG2_RANGE;                                         // 0x001C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceStartUI_SetStartDashSetting) == 0x000004, "Wrong alignment on UnionRaceStartUI_SetStartDashSetting");
static_assert(sizeof(UnionRaceStartUI_SetStartDashSetting) == 0x000020, "Wrong size on UnionRaceStartUI_SetStartDashSetting");
static_assert(offsetof(UnionRaceStartUI_SetStartDashSetting, LV3_PIVOT) == 0x000000, "Member 'UnionRaceStartUI_SetStartDashSetting::LV3_PIVOT' has a wrong offset!");
static_assert(offsetof(UnionRaceStartUI_SetStartDashSetting, LV3_RANGE) == 0x000004, "Member 'UnionRaceStartUI_SetStartDashSetting::LV3_RANGE' has a wrong offset!");
static_assert(offsetof(UnionRaceStartUI_SetStartDashSetting, LV2_PIVOT) == 0x000008, "Member 'UnionRaceStartUI_SetStartDashSetting::LV2_PIVOT' has a wrong offset!");
static_assert(offsetof(UnionRaceStartUI_SetStartDashSetting, LV2_RANGE) == 0x00000C, "Member 'UnionRaceStartUI_SetStartDashSetting::LV2_RANGE' has a wrong offset!");
static_assert(offsetof(UnionRaceStartUI_SetStartDashSetting, NG1_PIVOT) == 0x000010, "Member 'UnionRaceStartUI_SetStartDashSetting::NG1_PIVOT' has a wrong offset!");
static_assert(offsetof(UnionRaceStartUI_SetStartDashSetting, NG1_RANGE) == 0x000014, "Member 'UnionRaceStartUI_SetStartDashSetting::NG1_RANGE' has a wrong offset!");
static_assert(offsetof(UnionRaceStartUI_SetStartDashSetting, NG2_PIVOT) == 0x000018, "Member 'UnionRaceStartUI_SetStartDashSetting::NG2_PIVOT' has a wrong offset!");
static_assert(offsetof(UnionRaceStartUI_SetStartDashSetting, NG2_RANGE) == 0x00001C, "Member 'UnionRaceStartUI_SetStartDashSetting::NG2_RANGE' has a wrong offset!");

// Function UnionRun.UnionRaceLapInfo.GetLapTimeFloat
// 0x0014 (0x0014 - 0x0000)
struct UnionRaceLapInfo_GetLapTimeFloat final
{
public:
	struct FUnionRaceTime                         Time;                                              // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceLapInfo_GetLapTimeFloat) == 0x000004, "Wrong alignment on UnionRaceLapInfo_GetLapTimeFloat");
static_assert(sizeof(UnionRaceLapInfo_GetLapTimeFloat) == 0x000014, "Wrong size on UnionRaceLapInfo_GetLapTimeFloat");
static_assert(offsetof(UnionRaceLapInfo_GetLapTimeFloat, Time) == 0x000000, "Member 'UnionRaceLapInfo_GetLapTimeFloat::Time' has a wrong offset!");
static_assert(offsetof(UnionRaceLapInfo_GetLapTimeFloat, ReturnValue) == 0x000010, "Member 'UnionRaceLapInfo_GetLapTimeFloat::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceLapInfo.GetBestLapTimeValue
// 0x000C (0x000C - 0x0000)
struct UnionRaceLapInfo_GetBestLapTimeValue final
{
public:
	int32                                         MinuteValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MilliSecondValue;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceLapInfo_GetBestLapTimeValue) == 0x000004, "Wrong alignment on UnionRaceLapInfo_GetBestLapTimeValue");
static_assert(sizeof(UnionRaceLapInfo_GetBestLapTimeValue) == 0x00000C, "Wrong size on UnionRaceLapInfo_GetBestLapTimeValue");
static_assert(offsetof(UnionRaceLapInfo_GetBestLapTimeValue, MinuteValue) == 0x000000, "Member 'UnionRaceLapInfo_GetBestLapTimeValue::MinuteValue' has a wrong offset!");
static_assert(offsetof(UnionRaceLapInfo_GetBestLapTimeValue, SecondValue) == 0x000004, "Member 'UnionRaceLapInfo_GetBestLapTimeValue::SecondValue' has a wrong offset!");
static_assert(offsetof(UnionRaceLapInfo_GetBestLapTimeValue, MilliSecondValue) == 0x000008, "Member 'UnionRaceLapInfo_GetBestLapTimeValue::MilliSecondValue' has a wrong offset!");

// Function UnionRun.UnionRaceLapInfo.GetCurentLapTimeValue
// 0x000C (0x000C - 0x0000)
struct UnionRaceLapInfo_GetCurentLapTimeValue final
{
public:
	int32                                         MinuteValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MilliSecondValue;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceLapInfo_GetCurentLapTimeValue) == 0x000004, "Wrong alignment on UnionRaceLapInfo_GetCurentLapTimeValue");
static_assert(sizeof(UnionRaceLapInfo_GetCurentLapTimeValue) == 0x00000C, "Wrong size on UnionRaceLapInfo_GetCurentLapTimeValue");
static_assert(offsetof(UnionRaceLapInfo_GetCurentLapTimeValue, MinuteValue) == 0x000000, "Member 'UnionRaceLapInfo_GetCurentLapTimeValue::MinuteValue' has a wrong offset!");
static_assert(offsetof(UnionRaceLapInfo_GetCurentLapTimeValue, SecondValue) == 0x000004, "Member 'UnionRaceLapInfo_GetCurentLapTimeValue::SecondValue' has a wrong offset!");
static_assert(offsetof(UnionRaceLapInfo_GetCurentLapTimeValue, MilliSecondValue) == 0x000008, "Member 'UnionRaceLapInfo_GetCurentLapTimeValue::MilliSecondValue' has a wrong offset!");

// Function UnionRun.UnionRaceLapInfo.GetLastLapTimeValue
// 0x000C (0x000C - 0x0000)
struct UnionRaceLapInfo_GetLastLapTimeValue final
{
public:
	int32                                         MinuteValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MilliSecondValue;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceLapInfo_GetLastLapTimeValue) == 0x000004, "Wrong alignment on UnionRaceLapInfo_GetLastLapTimeValue");
static_assert(sizeof(UnionRaceLapInfo_GetLastLapTimeValue) == 0x00000C, "Wrong size on UnionRaceLapInfo_GetLastLapTimeValue");
static_assert(offsetof(UnionRaceLapInfo_GetLastLapTimeValue, MinuteValue) == 0x000000, "Member 'UnionRaceLapInfo_GetLastLapTimeValue::MinuteValue' has a wrong offset!");
static_assert(offsetof(UnionRaceLapInfo_GetLastLapTimeValue, SecondValue) == 0x000004, "Member 'UnionRaceLapInfo_GetLastLapTimeValue::SecondValue' has a wrong offset!");
static_assert(offsetof(UnionRaceLapInfo_GetLastLapTimeValue, MilliSecondValue) == 0x000008, "Member 'UnionRaceLapInfo_GetLastLapTimeValue::MilliSecondValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.AddAttackItemObject_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_AddAttackItemObject_Implementation final
{
public:
	class UObject*                                InAttackItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_AddAttackItemObject_Implementation) == 0x000008, "Wrong alignment on UnionRaceUI_AddAttackItemObject_Implementation");
static_assert(sizeof(UnionRaceUI_AddAttackItemObject_Implementation) == 0x000008, "Wrong size on UnionRaceUI_AddAttackItemObject_Implementation");
static_assert(offsetof(UnionRaceUI_AddAttackItemObject_Implementation, InAttackItem) == 0x000000, "Member 'UnionRaceUI_AddAttackItemObject_Implementation::InAttackItem' has a wrong offset!");

// Function UnionRun.UnionRaceUI.ChangePlayerConntrollerForPauseMenu
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUI_ChangePlayerConntrollerForPauseMenu final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_ChangePlayerConntrollerForPauseMenu) == 0x000004, "Wrong alignment on UnionRaceUI_ChangePlayerConntrollerForPauseMenu");
static_assert(sizeof(UnionRaceUI_ChangePlayerConntrollerForPauseMenu) == 0x000004, "Wrong size on UnionRaceUI_ChangePlayerConntrollerForPauseMenu");
static_assert(offsetof(UnionRaceUI_ChangePlayerConntrollerForPauseMenu, PlayerIndex) == 0x000000, "Member 'UnionRaceUI_ChangePlayerConntrollerForPauseMenu::PlayerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUI.DbgDrawTeamGaugeData
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUI_DbgDrawTeamGaugeData final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_DbgDrawTeamGaugeData) == 0x000004, "Wrong alignment on UnionRaceUI_DbgDrawTeamGaugeData");
static_assert(sizeof(UnionRaceUI_DbgDrawTeamGaugeData) == 0x000004, "Wrong size on UnionRaceUI_DbgDrawTeamGaugeData");
static_assert(offsetof(UnionRaceUI_DbgDrawTeamGaugeData, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_DbgDrawTeamGaugeData::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUI.DbgDrawTeamGaugeRate
// 0x0014 (0x0014 - 0x0000)
struct UnionRaceUI_DbgDrawTeamGaugeRate final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransChargeRate;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalChargeRate;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugePercent;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForce;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBoost;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_DbgDrawTeamGaugeRate) == 0x000004, "Wrong alignment on UnionRaceUI_DbgDrawTeamGaugeRate");
static_assert(sizeof(UnionRaceUI_DbgDrawTeamGaugeRate) == 0x000014, "Wrong size on UnionRaceUI_DbgDrawTeamGaugeRate");
static_assert(offsetof(UnionRaceUI_DbgDrawTeamGaugeRate, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_DbgDrawTeamGaugeRate::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_DbgDrawTeamGaugeRate, TransChargeRate) == 0x000004, "Member 'UnionRaceUI_DbgDrawTeamGaugeRate::TransChargeRate' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_DbgDrawTeamGaugeRate, LocalChargeRate) == 0x000008, "Member 'UnionRaceUI_DbgDrawTeamGaugeRate::LocalChargeRate' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_DbgDrawTeamGaugeRate, GaugePercent) == 0x00000C, "Member 'UnionRaceUI_DbgDrawTeamGaugeRate::GaugePercent' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_DbgDrawTeamGaugeRate, IsForce) == 0x000010, "Member 'UnionRaceUI_DbgDrawTeamGaugeRate::IsForce' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_DbgDrawTeamGaugeRate, IsBoost) == 0x000011, "Member 'UnionRaceUI_DbgDrawTeamGaugeRate::IsBoost' has a wrong offset!");

// Function UnionRun.UnionRaceUI.FireAirTrickInfo_Implementation
// 0x000C (0x000C - 0x0000)
struct UnionRaceUI_FireAirTrickInfo_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessCount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessBonusCount;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_FireAirTrickInfo_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_FireAirTrickInfo_Implementation");
static_assert(sizeof(UnionRaceUI_FireAirTrickInfo_Implementation) == 0x00000C, "Wrong size on UnionRaceUI_FireAirTrickInfo_Implementation");
static_assert(offsetof(UnionRaceUI_FireAirTrickInfo_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_FireAirTrickInfo_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_FireAirTrickInfo_Implementation, SuccessCount) == 0x000004, "Member 'UnionRaceUI_FireAirTrickInfo_Implementation::SuccessCount' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_FireAirTrickInfo_Implementation, SuccessBonusCount) == 0x000008, "Member 'UnionRaceUI_FireAirTrickInfo_Implementation::SuccessBonusCount' has a wrong offset!");

// Function UnionRun.UnionRaceUI.FireCourseMapCharaSpin_Implementation
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUI_FireCourseMapCharaSpin_Implementation final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_FireCourseMapCharaSpin_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_FireCourseMapCharaSpin_Implementation");
static_assert(sizeof(UnionRaceUI_FireCourseMapCharaSpin_Implementation) == 0x000004, "Wrong size on UnionRaceUI_FireCourseMapCharaSpin_Implementation");
static_assert(offsetof(UnionRaceUI_FireCourseMapCharaSpin_Implementation, RacerIndex) == 0x000000, "Member 'UnionRaceUI_FireCourseMapCharaSpin_Implementation::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUI.FireInOutAnim
// 0x0014 (0x0014 - 0x0000)
struct UnionRaceUI_FireInOutAnim final
{
public:
	bool                                          bin;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnAnimationEndEvent;                               // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_FireInOutAnim) == 0x000004, "Wrong alignment on UnionRaceUI_FireInOutAnim");
static_assert(sizeof(UnionRaceUI_FireInOutAnim) == 0x000014, "Wrong size on UnionRaceUI_FireInOutAnim");
static_assert(offsetof(UnionRaceUI_FireInOutAnim, bin) == 0x000000, "Member 'UnionRaceUI_FireInOutAnim::bin' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_FireInOutAnim, OnAnimationEndEvent) == 0x000004, "Member 'UnionRaceUI_FireInOutAnim::OnAnimationEndEvent' has a wrong offset!");

// Function UnionRun.UnionRaceUI.GetItemHoldCount
// 0x000C (0x000C - 0x0000)
struct UnionRaceUI_GetItemHoldCount final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMain;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_GetItemHoldCount) == 0x000004, "Wrong alignment on UnionRaceUI_GetItemHoldCount");
static_assert(sizeof(UnionRaceUI_GetItemHoldCount) == 0x00000C, "Wrong size on UnionRaceUI_GetItemHoldCount");
static_assert(offsetof(UnionRaceUI_GetItemHoldCount, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_GetItemHoldCount::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetItemHoldCount, IsMain) == 0x000004, "Member 'UnionRaceUI_GetItemHoldCount::IsMain' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetItemHoldCount, ReturnValue) == 0x000008, "Member 'UnionRaceUI_GetItemHoldCount::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.GetItemHoldCount_New
// 0x000C (0x000C - 0x0000)
struct UnionRaceUI_GetItemHoldCount_New final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_GetItemHoldCount_New) == 0x000004, "Wrong alignment on UnionRaceUI_GetItemHoldCount_New");
static_assert(sizeof(UnionRaceUI_GetItemHoldCount_New) == 0x00000C, "Wrong size on UnionRaceUI_GetItemHoldCount_New");
static_assert(offsetof(UnionRaceUI_GetItemHoldCount_New, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_GetItemHoldCount_New::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetItemHoldCount_New, ItemInfoType) == 0x000004, "Member 'UnionRaceUI_GetItemHoldCount_New::ItemInfoType' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetItemHoldCount_New, ReturnValue) == 0x000008, "Member 'UnionRaceUI_GetItemHoldCount_New::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.GetItemIconsState
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_GetItemIconsState final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnionRaceHUDItemIconsState                   OutState;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_GetItemIconsState) == 0x000004, "Wrong alignment on UnionRaceUI_GetItemIconsState");
static_assert(sizeof(UnionRaceUI_GetItemIconsState) == 0x000008, "Wrong size on UnionRaceUI_GetItemIconsState");
static_assert(offsetof(UnionRaceUI_GetItemIconsState, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_GetItemIconsState::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetItemIconsState, OutState) == 0x000004, "Member 'UnionRaceUI_GetItemIconsState::OutState' has a wrong offset!");

// Function UnionRun.UnionRaceUI.GetItemPackageRingCount
// 0x000C (0x000C - 0x0000)
struct UnionRaceUI_GetItemPackageRingCount final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMain;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_GetItemPackageRingCount) == 0x000004, "Wrong alignment on UnionRaceUI_GetItemPackageRingCount");
static_assert(sizeof(UnionRaceUI_GetItemPackageRingCount) == 0x00000C, "Wrong size on UnionRaceUI_GetItemPackageRingCount");
static_assert(offsetof(UnionRaceUI_GetItemPackageRingCount, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_GetItemPackageRingCount::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetItemPackageRingCount, IsMain) == 0x000004, "Member 'UnionRaceUI_GetItemPackageRingCount::IsMain' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetItemPackageRingCount, ReturnValue) == 0x000008, "Member 'UnionRaceUI_GetItemPackageRingCount::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.GetItemPackageRingCount_New
// 0x000C (0x000C - 0x0000)
struct UnionRaceUI_GetItemPackageRingCount_New final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_GetItemPackageRingCount_New) == 0x000004, "Wrong alignment on UnionRaceUI_GetItemPackageRingCount_New");
static_assert(sizeof(UnionRaceUI_GetItemPackageRingCount_New) == 0x00000C, "Wrong size on UnionRaceUI_GetItemPackageRingCount_New");
static_assert(offsetof(UnionRaceUI_GetItemPackageRingCount_New, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_GetItemPackageRingCount_New::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetItemPackageRingCount_New, ItemInfoType) == 0x000004, "Member 'UnionRaceUI_GetItemPackageRingCount_New::ItemInfoType' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetItemPackageRingCount_New, ReturnValue) == 0x000008, "Member 'UnionRaceUI_GetItemPackageRingCount_New::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.GetRedStarRings_Implementation
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUI_GetRedStarRings_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRaceUIResultRedStarRings*         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_GetRedStarRings_Implementation) == 0x000008, "Wrong alignment on UnionRaceUI_GetRedStarRings_Implementation");
static_assert(sizeof(UnionRaceUI_GetRedStarRings_Implementation) == 0x000010, "Wrong size on UnionRaceUI_GetRedStarRings_Implementation");
static_assert(offsetof(UnionRaceUI_GetRedStarRings_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_GetRedStarRings_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetRedStarRings_Implementation, ReturnValue) == 0x000008, "Member 'UnionRaceUI_GetRedStarRings_Implementation::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.GetReturnDashButtonObject_Implementation
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUI_GetReturnDashButtonObject_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_GetReturnDashButtonObject_Implementation) == 0x000008, "Wrong alignment on UnionRaceUI_GetReturnDashButtonObject_Implementation");
static_assert(sizeof(UnionRaceUI_GetReturnDashButtonObject_Implementation) == 0x000010, "Wrong size on UnionRaceUI_GetReturnDashButtonObject_Implementation");
static_assert(offsetof(UnionRaceUI_GetReturnDashButtonObject_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_GetReturnDashButtonObject_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetReturnDashButtonObject_Implementation, ReturnValue) == 0x000008, "Member 'UnionRaceUI_GetReturnDashButtonObject_Implementation::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.GetStartDashButtonObject_Implementation
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUI_GetStartDashButtonObject_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_GetStartDashButtonObject_Implementation) == 0x000008, "Wrong alignment on UnionRaceUI_GetStartDashButtonObject_Implementation");
static_assert(sizeof(UnionRaceUI_GetStartDashButtonObject_Implementation) == 0x000010, "Wrong size on UnionRaceUI_GetStartDashButtonObject_Implementation");
static_assert(offsetof(UnionRaceUI_GetStartDashButtonObject_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_GetStartDashButtonObject_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetStartDashButtonObject_Implementation, ReturnValue) == 0x000008, "Member 'UnionRaceUI_GetStartDashButtonObject_Implementation::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.GetTimeTiralGadgetPresetData
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUI_GetTimeTiralGadgetPresetData final
{
public:
	struct FUserGadgetPresetData                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_GetTimeTiralGadgetPresetData) == 0x000008, "Wrong alignment on UnionRaceUI_GetTimeTiralGadgetPresetData");
static_assert(sizeof(UnionRaceUI_GetTimeTiralGadgetPresetData) == 0x000010, "Wrong size on UnionRaceUI_GetTimeTiralGadgetPresetData");
static_assert(offsetof(UnionRaceUI_GetTimeTiralGadgetPresetData, ReturnValue) == 0x000000, "Member 'UnionRaceUI_GetTimeTiralGadgetPresetData::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.GetWarningBeltVisible_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_GetWarningBeltVisible_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_GetWarningBeltVisible_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_GetWarningBeltVisible_Implementation");
static_assert(sizeof(UnionRaceUI_GetWarningBeltVisible_Implementation) == 0x000008, "Wrong size on UnionRaceUI_GetWarningBeltVisible_Implementation");
static_assert(offsetof(UnionRaceUI_GetWarningBeltVisible_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_GetWarningBeltVisible_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_GetWarningBeltVisible_Implementation, ReturnValue) == 0x000004, "Member 'UnionRaceUI_GetWarningBeltVisible_Implementation::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.IsBehindCurrentCamera
// 0x0028 (0x0028 - 0x0000)
struct UnionRaceUI_IsBehindCurrentCamera final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_IsBehindCurrentCamera) == 0x000008, "Wrong alignment on UnionRaceUI_IsBehindCurrentCamera");
static_assert(sizeof(UnionRaceUI_IsBehindCurrentCamera) == 0x000028, "Wrong size on UnionRaceUI_IsBehindCurrentCamera");
static_assert(offsetof(UnionRaceUI_IsBehindCurrentCamera, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_IsBehindCurrentCamera::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_IsBehindCurrentCamera, WorldLocation) == 0x000008, "Member 'UnionRaceUI_IsBehindCurrentCamera::WorldLocation' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_IsBehindCurrentCamera, ReturnValue) == 0x000020, "Member 'UnionRaceUI_IsBehindCurrentCamera::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.IsDebugAimingHidden
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_IsDebugAimingHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_IsDebugAimingHidden) == 0x000001, "Wrong alignment on UnionRaceUI_IsDebugAimingHidden");
static_assert(sizeof(UnionRaceUI_IsDebugAimingHidden) == 0x000001, "Wrong size on UnionRaceUI_IsDebugAimingHidden");
static_assert(offsetof(UnionRaceUI_IsDebugAimingHidden, ReturnValue) == 0x000000, "Member 'UnionRaceUI_IsDebugAimingHidden::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.IsDebugBoostHidden
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_IsDebugBoostHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_IsDebugBoostHidden) == 0x000001, "Wrong alignment on UnionRaceUI_IsDebugBoostHidden");
static_assert(sizeof(UnionRaceUI_IsDebugBoostHidden) == 0x000001, "Wrong size on UnionRaceUI_IsDebugBoostHidden");
static_assert(offsetof(UnionRaceUI_IsDebugBoostHidden, ReturnValue) == 0x000000, "Member 'UnionRaceUI_IsDebugBoostHidden::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.IsDebugGuideButtonHidden
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_IsDebugGuideButtonHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_IsDebugGuideButtonHidden) == 0x000001, "Wrong alignment on UnionRaceUI_IsDebugGuideButtonHidden");
static_assert(sizeof(UnionRaceUI_IsDebugGuideButtonHidden) == 0x000001, "Wrong size on UnionRaceUI_IsDebugGuideButtonHidden");
static_assert(offsetof(UnionRaceUI_IsDebugGuideButtonHidden, ReturnValue) == 0x000000, "Member 'UnionRaceUI_IsDebugGuideButtonHidden::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.IsGhostOnline
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_IsGhostOnline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_IsGhostOnline) == 0x000001, "Wrong alignment on UnionRaceUI_IsGhostOnline");
static_assert(sizeof(UnionRaceUI_IsGhostOnline) == 0x000001, "Wrong size on UnionRaceUI_IsGhostOnline");
static_assert(offsetof(UnionRaceUI_IsGhostOnline, ReturnValue) == 0x000000, "Member 'UnionRaceUI_IsGhostOnline::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.IsPlayingReplay
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_IsPlayingReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_IsPlayingReplay) == 0x000001, "Wrong alignment on UnionRaceUI_IsPlayingReplay");
static_assert(sizeof(UnionRaceUI_IsPlayingReplay) == 0x000001, "Wrong size on UnionRaceUI_IsPlayingReplay");
static_assert(offsetof(UnionRaceUI_IsPlayingReplay, ReturnValue) == 0x000000, "Member 'UnionRaceUI_IsPlayingReplay::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.IsPubCameraPlayRace
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_IsPubCameraPlayRace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_IsPubCameraPlayRace) == 0x000001, "Wrong alignment on UnionRaceUI_IsPubCameraPlayRace");
static_assert(sizeof(UnionRaceUI_IsPubCameraPlayRace) == 0x000001, "Wrong size on UnionRaceUI_IsPubCameraPlayRace");
static_assert(offsetof(UnionRaceUI_IsPubCameraPlayRace, ReturnValue) == 0x000000, "Member 'UnionRaceUI_IsPubCameraPlayRace::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.IsViewGhostReplay
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_IsViewGhostReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_IsViewGhostReplay) == 0x000001, "Wrong alignment on UnionRaceUI_IsViewGhostReplay");
static_assert(sizeof(UnionRaceUI_IsViewGhostReplay) == 0x000001, "Wrong size on UnionRaceUI_IsViewGhostReplay");
static_assert(offsetof(UnionRaceUI_IsViewGhostReplay, ReturnValue) == 0x000000, "Member 'UnionRaceUI_IsViewGhostReplay::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUI.NotifyIrregularInfiniteItem
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUI_NotifyIrregularInfiniteItem final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_NotifyIrregularInfiniteItem) == 0x000004, "Wrong alignment on UnionRaceUI_NotifyIrregularInfiniteItem");
static_assert(sizeof(UnionRaceUI_NotifyIrregularInfiniteItem) == 0x000004, "Wrong size on UnionRaceUI_NotifyIrregularInfiniteItem");
static_assert(offsetof(UnionRaceUI_NotifyIrregularInfiniteItem, InRacerIndex) == 0x000000, "Member 'UnionRaceUI_NotifyIrregularInfiniteItem::InRacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUI.OnPackageRingEffectFinished
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_OnPackageRingEffectFinished final
{
public:
	class APackageRingEffect*                     EffectActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_OnPackageRingEffectFinished) == 0x000008, "Wrong alignment on UnionRaceUI_OnPackageRingEffectFinished");
static_assert(sizeof(UnionRaceUI_OnPackageRingEffectFinished) == 0x000008, "Wrong size on UnionRaceUI_OnPackageRingEffectFinished");
static_assert(offsetof(UnionRaceUI_OnPackageRingEffectFinished, EffectActor) == 0x000000, "Member 'UnionRaceUI_OnPackageRingEffectFinished::EffectActor' has a wrong offset!");

// Function UnionRun.UnionRaceUI.OnPackageRingEffectSoundStart
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_OnPackageRingEffectSoundStart final
{
public:
	class APackageRingEffect*                     EffectActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_OnPackageRingEffectSoundStart) == 0x000008, "Wrong alignment on UnionRaceUI_OnPackageRingEffectSoundStart");
static_assert(sizeof(UnionRaceUI_OnPackageRingEffectSoundStart) == 0x000008, "Wrong size on UnionRaceUI_OnPackageRingEffectSoundStart");
static_assert(offsetof(UnionRaceUI_OnPackageRingEffectSoundStart, EffectActor) == 0x000000, "Member 'UnionRaceUI_OnPackageRingEffectSoundStart::EffectActor' has a wrong offset!");

// Function UnionRun.UnionRaceUI.RemoveAttackInfoWidget_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_RemoveAttackInfoWidget_Implementation final
{
public:
	class UObject*                                InAttackItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_RemoveAttackInfoWidget_Implementation) == 0x000008, "Wrong alignment on UnionRaceUI_RemoveAttackInfoWidget_Implementation");
static_assert(sizeof(UnionRaceUI_RemoveAttackInfoWidget_Implementation) == 0x000008, "Wrong size on UnionRaceUI_RemoveAttackInfoWidget_Implementation");
static_assert(offsetof(UnionRaceUI_RemoveAttackInfoWidget_Implementation, InAttackItem) == 0x000000, "Member 'UnionRaceUI_RemoveAttackInfoWidget_Implementation::InAttackItem' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetAfterHomingAimTargetedUIVisible_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_SetAfterHomingAimTargetedUIVisible_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_SetAfterHomingAimTargetedUIVisible_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_SetAfterHomingAimTargetedUIVisible_Implementation");
static_assert(sizeof(UnionRaceUI_SetAfterHomingAimTargetedUIVisible_Implementation) == 0x000008, "Wrong size on UnionRaceUI_SetAfterHomingAimTargetedUIVisible_Implementation");
static_assert(offsetof(UnionRaceUI_SetAfterHomingAimTargetedUIVisible_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetAfterHomingAimTargetedUIVisible_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetAfterHomingAimTargetedUIVisible_Implementation, bVisible) == 0x000004, "Member 'UnionRaceUI_SetAfterHomingAimTargetedUIVisible_Implementation::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetAfterHomingAimUIVisible_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_SetAfterHomingAimUIVisible_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_SetAfterHomingAimUIVisible_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_SetAfterHomingAimUIVisible_Implementation");
static_assert(sizeof(UnionRaceUI_SetAfterHomingAimUIVisible_Implementation) == 0x000008, "Wrong size on UnionRaceUI_SetAfterHomingAimUIVisible_Implementation");
static_assert(offsetof(UnionRaceUI_SetAfterHomingAimUIVisible_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetAfterHomingAimUIVisible_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetAfterHomingAimUIVisible_Implementation, bVisible) == 0x000004, "Member 'UnionRaceUI_SetAfterHomingAimUIVisible_Implementation::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetAimingUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetAimingUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetAimingUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetAimingUIVisible");
static_assert(sizeof(UnionRaceUI_SetAimingUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetAimingUIVisible");
static_assert(offsetof(UnionRaceUI_SetAimingUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetAimingUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetAirTrickUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetAirTrickUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetAirTrickUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetAirTrickUIVisible");
static_assert(sizeof(UnionRaceUI_SetAirTrickUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetAirTrickUIVisible");
static_assert(offsetof(UnionRaceUI_SetAirTrickUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetAirTrickUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetBeforeHomingAimTargetedUIVisible_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_SetBeforeHomingAimTargetedUIVisible_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_SetBeforeHomingAimTargetedUIVisible_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_SetBeforeHomingAimTargetedUIVisible_Implementation");
static_assert(sizeof(UnionRaceUI_SetBeforeHomingAimTargetedUIVisible_Implementation) == 0x000008, "Wrong size on UnionRaceUI_SetBeforeHomingAimTargetedUIVisible_Implementation");
static_assert(offsetof(UnionRaceUI_SetBeforeHomingAimTargetedUIVisible_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetBeforeHomingAimTargetedUIVisible_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetBeforeHomingAimTargetedUIVisible_Implementation, bVisible) == 0x000004, "Member 'UnionRaceUI_SetBeforeHomingAimTargetedUIVisible_Implementation::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetBeforeHomingAimUIVisible_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_SetBeforeHomingAimUIVisible_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_SetBeforeHomingAimUIVisible_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_SetBeforeHomingAimUIVisible_Implementation");
static_assert(sizeof(UnionRaceUI_SetBeforeHomingAimUIVisible_Implementation) == 0x000008, "Wrong size on UnionRaceUI_SetBeforeHomingAimUIVisible_Implementation");
static_assert(offsetof(UnionRaceUI_SetBeforeHomingAimUIVisible_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetBeforeHomingAimUIVisible_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetBeforeHomingAimUIVisible_Implementation, bVisible) == 0x000004, "Member 'UnionRaceUI_SetBeforeHomingAimUIVisible_Implementation::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetBoostUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetBoostUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetBoostUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetBoostUIVisible");
static_assert(sizeof(UnionRaceUI_SetBoostUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetBoostUIVisible");
static_assert(offsetof(UnionRaceUI_SetBoostUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetBoostUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetCharaHeadUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetCharaHeadUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetCharaHeadUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetCharaHeadUIVisible");
static_assert(sizeof(UnionRaceUI_SetCharaHeadUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetCharaHeadUIVisible");
static_assert(offsetof(UnionRaceUI_SetCharaHeadUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetCharaHeadUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetCourseMapCharaSpin
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUI_SetCourseMapCharaSpin final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetCourseMapCharaSpin) == 0x000004, "Wrong alignment on UnionRaceUI_SetCourseMapCharaSpin");
static_assert(sizeof(UnionRaceUI_SetCourseMapCharaSpin) == 0x000004, "Wrong size on UnionRaceUI_SetCourseMapCharaSpin");
static_assert(offsetof(UnionRaceUI_SetCourseMapCharaSpin, RacerIndex) == 0x000000, "Member 'UnionRaceUI_SetCourseMapCharaSpin::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetCourseMapUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetCourseMapUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetCourseMapUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetCourseMapUIVisible");
static_assert(sizeof(UnionRaceUI_SetCourseMapUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetCourseMapUIVisible");
static_assert(offsetof(UnionRaceUI_SetCourseMapUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetCourseMapUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetDebugAimingHidden
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetDebugAimingHidden final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetDebugAimingHidden) == 0x000001, "Wrong alignment on UnionRaceUI_SetDebugAimingHidden");
static_assert(sizeof(UnionRaceUI_SetDebugAimingHidden) == 0x000001, "Wrong size on UnionRaceUI_SetDebugAimingHidden");
static_assert(offsetof(UnionRaceUI_SetDebugAimingHidden, flag) == 0x000000, "Member 'UnionRaceUI_SetDebugAimingHidden::flag' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetDebugBoostHidden
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetDebugBoostHidden final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetDebugBoostHidden) == 0x000001, "Wrong alignment on UnionRaceUI_SetDebugBoostHidden");
static_assert(sizeof(UnionRaceUI_SetDebugBoostHidden) == 0x000001, "Wrong size on UnionRaceUI_SetDebugBoostHidden");
static_assert(offsetof(UnionRaceUI_SetDebugBoostHidden, flag) == 0x000000, "Member 'UnionRaceUI_SetDebugBoostHidden::flag' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetDebugGuideButtonHidden
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetDebugGuideButtonHidden final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetDebugGuideButtonHidden) == 0x000001, "Wrong alignment on UnionRaceUI_SetDebugGuideButtonHidden");
static_assert(sizeof(UnionRaceUI_SetDebugGuideButtonHidden) == 0x000001, "Wrong size on UnionRaceUI_SetDebugGuideButtonHidden");
static_assert(offsetof(UnionRaceUI_SetDebugGuideButtonHidden, flag) == 0x000000, "Member 'UnionRaceUI_SetDebugGuideButtonHidden::flag' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetDebugItemWarningHidden
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetDebugItemWarningHidden final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetDebugItemWarningHidden) == 0x000001, "Wrong alignment on UnionRaceUI_SetDebugItemWarningHidden");
static_assert(sizeof(UnionRaceUI_SetDebugItemWarningHidden) == 0x000001, "Wrong size on UnionRaceUI_SetDebugItemWarningHidden");
static_assert(offsetof(UnionRaceUI_SetDebugItemWarningHidden, flag) == 0x000000, "Member 'UnionRaceUI_SetDebugItemWarningHidden::flag' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetGadgetIconUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetGadgetIconUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetGadgetIconUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetGadgetIconUIVisible");
static_assert(sizeof(UnionRaceUI_SetGadgetIconUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetGadgetIconUIVisible");
static_assert(offsetof(UnionRaceUI_SetGadgetIconUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetGadgetIconUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetGuideButtonUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetGuideButtonUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetGuideButtonUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetGuideButtonUIVisible");
static_assert(sizeof(UnionRaceUI_SetGuideButtonUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetGuideButtonUIVisible");
static_assert(offsetof(UnionRaceUI_SetGuideButtonUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetGuideButtonUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetHitInfoUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetHitInfoUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetHitInfoUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetHitInfoUIVisible");
static_assert(sizeof(UnionRaceUI_SetHitInfoUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetHitInfoUIVisible");
static_assert(offsetof(UnionRaceUI_SetHitInfoUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetHitInfoUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetItemIconsState
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_SetItemIconsState final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnionRaceHUDItemIconsState                   InState;                                           // 0x0004(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_SetItemIconsState) == 0x000004, "Wrong alignment on UnionRaceUI_SetItemIconsState");
static_assert(sizeof(UnionRaceUI_SetItemIconsState) == 0x000008, "Wrong size on UnionRaceUI_SetItemIconsState");
static_assert(offsetof(UnionRaceUI_SetItemIconsState, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetItemIconsState::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetItemIconsState, InState) == 0x000004, "Member 'UnionRaceUI_SetItemIconsState::InState' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetItemIconUIVisible
// 0x000C (0x000C - 0x0000)
struct UnionRaceUI_SetItemIconUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerControllerIndex;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlagOnly;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_SetItemIconUIVisible) == 0x000004, "Wrong alignment on UnionRaceUI_SetItemIconUIVisible");
static_assert(sizeof(UnionRaceUI_SetItemIconUIVisible) == 0x00000C, "Wrong size on UnionRaceUI_SetItemIconUIVisible");
static_assert(offsetof(UnionRaceUI_SetItemIconUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetItemIconUIVisible::bVisible' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetItemIconUIVisible, PlayerControllerIndex) == 0x000004, "Member 'UnionRaceUI_SetItemIconUIVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetItemIconUIVisible, bFlagOnly) == 0x000008, "Member 'UnionRaceUI_SetItemIconUIVisible::bFlagOnly' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetItemIconUIVisibleAll
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetItemIconUIVisibleAll final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetItemIconUIVisibleAll) == 0x000001, "Wrong alignment on UnionRaceUI_SetItemIconUIVisibleAll");
static_assert(sizeof(UnionRaceUI_SetItemIconUIVisibleAll) == 0x000001, "Wrong size on UnionRaceUI_SetItemIconUIVisibleAll");
static_assert(offsetof(UnionRaceUI_SetItemIconUIVisibleAll, bVisible) == 0x000000, "Member 'UnionRaceUI_SetItemIconUIVisibleAll::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetItemWarningUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetItemWarningUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetItemWarningUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetItemWarningUIVisible");
static_assert(sizeof(UnionRaceUI_SetItemWarningUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetItemWarningUIVisible");
static_assert(offsetof(UnionRaceUI_SetItemWarningUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetItemWarningUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetLapUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetLapUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetLapUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetLapUIVisible");
static_assert(sizeof(UnionRaceUI_SetLapUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetLapUIVisible");
static_assert(offsetof(UnionRaceUI_SetLapUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetLapUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetRaceMinimapRef_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_SetRaceMinimapRef_Implementation final
{
public:
	class UUnionRaceMinimap*                      InRaceMinimap;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetRaceMinimapRef_Implementation) == 0x000008, "Wrong alignment on UnionRaceUI_SetRaceMinimapRef_Implementation");
static_assert(sizeof(UnionRaceUI_SetRaceMinimapRef_Implementation) == 0x000008, "Wrong size on UnionRaceUI_SetRaceMinimapRef_Implementation");
static_assert(offsetof(UnionRaceUI_SetRaceMinimapRef_Implementation, InRaceMinimap) == 0x000000, "Member 'UnionRaceUI_SetRaceMinimapRef_Implementation::InRaceMinimap' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetRacerApproachInfo
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUI_SetRacerApproachInfo final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URaceUISubApproachWarning*>      ApproachInfo;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetRacerApproachInfo) == 0x000008, "Wrong alignment on UnionRaceUI_SetRacerApproachInfo");
static_assert(sizeof(UnionRaceUI_SetRacerApproachInfo) == 0x000018, "Wrong size on UnionRaceUI_SetRacerApproachInfo");
static_assert(offsetof(UnionRaceUI_SetRacerApproachInfo, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetRacerApproachInfo::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetRacerApproachInfo, ApproachInfo) == 0x000008, "Member 'UnionRaceUI_SetRacerApproachInfo::ApproachInfo' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetRacerIndex_Implementation
// 0x000C (0x000C - 0x0000)
struct UnionRaceUI_SetRacerIndex_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRacerIndex;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocalPlayer;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_SetRacerIndex_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_SetRacerIndex_Implementation");
static_assert(sizeof(UnionRaceUI_SetRacerIndex_Implementation) == 0x00000C, "Wrong size on UnionRaceUI_SetRacerIndex_Implementation");
static_assert(offsetof(UnionRaceUI_SetRacerIndex_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetRacerIndex_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetRacerIndex_Implementation, InRacerIndex) == 0x000004, "Member 'UnionRaceUI_SetRacerIndex_Implementation::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetRacerIndex_Implementation, IsLocalPlayer) == 0x000008, "Member 'UnionRaceUI_SetRacerIndex_Implementation::IsLocalPlayer' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetRaceUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetRaceUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetRaceUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetRaceUIVisible");
static_assert(sizeof(UnionRaceUI_SetRaceUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetRaceUIVisible");
static_assert(offsetof(UnionRaceUI_SetRaceUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetRaceUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetRankUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetRankUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetRankUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetRankUIVisible");
static_assert(sizeof(UnionRaceUI_SetRankUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetRankUIVisible");
static_assert(offsetof(UnionRaceUI_SetRankUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetRankUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetRedStarRingUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetRedStarRingUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetRedStarRingUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetRedStarRingUIVisible");
static_assert(sizeof(UnionRaceUI_SetRedStarRingUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetRedStarRingUIVisible");
static_assert(offsetof(UnionRaceUI_SetRedStarRingUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetRedStarRingUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetReturnDashSetting_Implementation
// 0x000C (0x000C - 0x0000)
struct UnionRaceUI_SetReturnDashSetting_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pivot;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetReturnDashSetting_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_SetReturnDashSetting_Implementation");
static_assert(sizeof(UnionRaceUI_SetReturnDashSetting_Implementation) == 0x00000C, "Wrong size on UnionRaceUI_SetReturnDashSetting_Implementation");
static_assert(offsetof(UnionRaceUI_SetReturnDashSetting_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetReturnDashSetting_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetReturnDashSetting_Implementation, Pivot) == 0x000004, "Member 'UnionRaceUI_SetReturnDashSetting_Implementation::Pivot' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetReturnDashSetting_Implementation, Range) == 0x000008, "Member 'UnionRaceUI_SetReturnDashSetting_Implementation::Range' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetReturnDashUIGaugeRate_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_SetReturnDashUIGaugeRate_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeRate;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetReturnDashUIGaugeRate_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_SetReturnDashUIGaugeRate_Implementation");
static_assert(sizeof(UnionRaceUI_SetReturnDashUIGaugeRate_Implementation) == 0x000008, "Wrong size on UnionRaceUI_SetReturnDashUIGaugeRate_Implementation");
static_assert(offsetof(UnionRaceUI_SetReturnDashUIGaugeRate_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetReturnDashUIGaugeRate_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetReturnDashUIGaugeRate_Implementation, GaugeRate) == 0x000004, "Member 'UnionRaceUI_SetReturnDashUIGaugeRate_Implementation::GaugeRate' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetReturnDashUIVisible_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_SetReturnDashUIVisible_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_SetReturnDashUIVisible_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_SetReturnDashUIVisible_Implementation");
static_assert(sizeof(UnionRaceUI_SetReturnDashUIVisible_Implementation) == 0x000008, "Wrong size on UnionRaceUI_SetReturnDashUIVisible_Implementation");
static_assert(offsetof(UnionRaceUI_SetReturnDashUIVisible_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetReturnDashUIVisible_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetReturnDashUIVisible_Implementation, bVisible) == 0x000004, "Member 'UnionRaceUI_SetReturnDashUIVisible_Implementation::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetReturnDashUIVisibleWithAnim_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_SetReturnDashUIVisibleWithAnim_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_SetReturnDashUIVisibleWithAnim_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_SetReturnDashUIVisibleWithAnim_Implementation");
static_assert(sizeof(UnionRaceUI_SetReturnDashUIVisibleWithAnim_Implementation) == 0x000008, "Wrong size on UnionRaceUI_SetReturnDashUIVisibleWithAnim_Implementation");
static_assert(offsetof(UnionRaceUI_SetReturnDashUIVisibleWithAnim_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetReturnDashUIVisibleWithAnim_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetReturnDashUIVisibleWithAnim_Implementation, bVisible) == 0x000004, "Member 'UnionRaceUI_SetReturnDashUIVisibleWithAnim_Implementation::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetRingUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetRingUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetRingUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetRingUIVisible");
static_assert(sizeof(UnionRaceUI_SetRingUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetRingUIVisible");
static_assert(offsetof(UnionRaceUI_SetRingUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetRingUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetRivalStartUI_Implementation
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUI_SetRivalStartUI_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRacerStatusObject*                RivalStatusObj;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetRivalStartUI_Implementation) == 0x000008, "Wrong alignment on UnionRaceUI_SetRivalStartUI_Implementation");
static_assert(sizeof(UnionRaceUI_SetRivalStartUI_Implementation) == 0x000010, "Wrong size on UnionRaceUI_SetRivalStartUI_Implementation");
static_assert(offsetof(UnionRaceUI_SetRivalStartUI_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetRivalStartUI_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetRivalStartUI_Implementation, RivalStatusObj) == 0x000008, "Member 'UnionRaceUI_SetRivalStartUI_Implementation::RivalStatusObj' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetSpeedNumUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetSpeedNumUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetSpeedNumUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetSpeedNumUIVisible");
static_assert(sizeof(UnionRaceUI_SetSpeedNumUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetSpeedNumUIVisible");
static_assert(offsetof(UnionRaceUI_SetSpeedNumUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetSpeedNumUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetStartDashButtonUIVisible
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_SetStartDashButtonUIVisible final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_SetStartDashButtonUIVisible) == 0x000004, "Wrong alignment on UnionRaceUI_SetStartDashButtonUIVisible");
static_assert(sizeof(UnionRaceUI_SetStartDashButtonUIVisible) == 0x000008, "Wrong size on UnionRaceUI_SetStartDashButtonUIVisible");
static_assert(offsetof(UnionRaceUI_SetStartDashButtonUIVisible, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetStartDashButtonUIVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetStartDashButtonUIVisible, bVisible) == 0x000004, "Member 'UnionRaceUI_SetStartDashButtonUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetStartDashParamSetting_Implementation
// 0x0034 (0x0034 - 0x0000)
struct UnionRaceUI_SetStartDashParamSetting_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUnionRaceStartDashParam               InStartDashParam;                                  // 0x0004(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetStartDashParamSetting_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_SetStartDashParamSetting_Implementation");
static_assert(sizeof(UnionRaceUI_SetStartDashParamSetting_Implementation) == 0x000034, "Wrong size on UnionRaceUI_SetStartDashParamSetting_Implementation");
static_assert(offsetof(UnionRaceUI_SetStartDashParamSetting_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetStartDashParamSetting_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetStartDashParamSetting_Implementation, InStartDashParam) == 0x000004, "Member 'UnionRaceUI_SetStartDashParamSetting_Implementation::InStartDashParam' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetStartUIGaugeRate_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_SetStartUIGaugeRate_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeRate;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetStartUIGaugeRate_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_SetStartUIGaugeRate_Implementation");
static_assert(sizeof(UnionRaceUI_SetStartUIGaugeRate_Implementation) == 0x000008, "Wrong size on UnionRaceUI_SetStartUIGaugeRate_Implementation");
static_assert(offsetof(UnionRaceUI_SetStartUIGaugeRate_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetStartUIGaugeRate_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetStartUIGaugeRate_Implementation, GaugeRate) == 0x000004, "Member 'UnionRaceUI_SetStartUIGaugeRate_Implementation::GaugeRate' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetTeamRankUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetTeamRankUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetTeamRankUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetTeamRankUIVisible");
static_assert(sizeof(UnionRaceUI_SetTeamRankUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetTeamRankUIVisible");
static_assert(offsetof(UnionRaceUI_SetTeamRankUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetTeamRankUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetTextBalloonUIVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUI_SetTextBalloonUIVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_SetTextBalloonUIVisible) == 0x000001, "Wrong alignment on UnionRaceUI_SetTextBalloonUIVisible");
static_assert(sizeof(UnionRaceUI_SetTextBalloonUIVisible) == 0x000001, "Wrong size on UnionRaceUI_SetTextBalloonUIVisible");
static_assert(offsetof(UnionRaceUI_SetTextBalloonUIVisible, bVisible) == 0x000000, "Member 'UnionRaceUI_SetTextBalloonUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.SetWarningBeltVisible_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_SetWarningBeltVisible_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_SetWarningBeltVisible_Implementation) == 0x000004, "Wrong alignment on UnionRaceUI_SetWarningBeltVisible_Implementation");
static_assert(sizeof(UnionRaceUI_SetWarningBeltVisible_Implementation) == 0x000008, "Wrong size on UnionRaceUI_SetWarningBeltVisible_Implementation");
static_assert(offsetof(UnionRaceUI_SetWarningBeltVisible_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_SetWarningBeltVisible_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_SetWarningBeltVisible_Implementation, bVisible) == 0x000004, "Member 'UnionRaceUI_SetWarningBeltVisible_Implementation::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUI.UpdateAttackInfoPosition
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUI_UpdateAttackInfoPosition final
{
public:
	class UUserWidget*                            InAttackWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                InHUDWarningArea;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPosRate;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_UpdateAttackInfoPosition) == 0x000008, "Wrong alignment on UnionRaceUI_UpdateAttackInfoPosition");
static_assert(sizeof(UnionRaceUI_UpdateAttackInfoPosition) == 0x000018, "Wrong size on UnionRaceUI_UpdateAttackInfoPosition");
static_assert(offsetof(UnionRaceUI_UpdateAttackInfoPosition, InAttackWidget) == 0x000000, "Member 'UnionRaceUI_UpdateAttackInfoPosition::InAttackWidget' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_UpdateAttackInfoPosition, InHUDWarningArea) == 0x000008, "Member 'UnionRaceUI_UpdateAttackInfoPosition::InHUDWarningArea' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_UpdateAttackInfoPosition, InPosRate) == 0x000010, "Member 'UnionRaceUI_UpdateAttackInfoPosition::InPosRate' has a wrong offset!");

// Function UnionRun.UnionRaceUI.UpdateByHoldItemInfo_Implementation
// 0x0088 (0x0088 - 0x0000)
struct UnionRaceUI_UpdateByHoldItemInfo_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHoldItemInfo                          InItemInfo;                                        // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_UpdateByHoldItemInfo_Implementation) == 0x000008, "Wrong alignment on UnionRaceUI_UpdateByHoldItemInfo_Implementation");
static_assert(sizeof(UnionRaceUI_UpdateByHoldItemInfo_Implementation) == 0x000088, "Wrong size on UnionRaceUI_UpdateByHoldItemInfo_Implementation");
static_assert(offsetof(UnionRaceUI_UpdateByHoldItemInfo_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_UpdateByHoldItemInfo_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_UpdateByHoldItemInfo_Implementation, InItemInfo) == 0x000008, "Member 'UnionRaceUI_UpdateByHoldItemInfo_Implementation::InItemInfo' has a wrong offset!");

// Function UnionRun.UnionRaceUI.UpdateByRacers_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_UpdateByRacers_Implementation final
{
public:
	class UUnionRacers*                           InRacers;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_UpdateByRacers_Implementation) == 0x000008, "Wrong alignment on UnionRaceUI_UpdateByRacers_Implementation");
static_assert(sizeof(UnionRaceUI_UpdateByRacers_Implementation) == 0x000008, "Wrong size on UnionRaceUI_UpdateByRacers_Implementation");
static_assert(offsetof(UnionRaceUI_UpdateByRacers_Implementation, InRacers) == 0x000000, "Member 'UnionRaceUI_UpdateByRacers_Implementation::InRacers' has a wrong offset!");

// Function UnionRun.UnionRaceUI.UpdateHomingAimLocation_Implementation
// 0x0020 (0x0020 - 0x0000)
struct UnionRaceUI_UpdateHomingAimLocation_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AimLocation;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_UpdateHomingAimLocation_Implementation) == 0x000008, "Wrong alignment on UnionRaceUI_UpdateHomingAimLocation_Implementation");
static_assert(sizeof(UnionRaceUI_UpdateHomingAimLocation_Implementation) == 0x000020, "Wrong size on UnionRaceUI_UpdateHomingAimLocation_Implementation");
static_assert(offsetof(UnionRaceUI_UpdateHomingAimLocation_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_UpdateHomingAimLocation_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_UpdateHomingAimLocation_Implementation, AimLocation) == 0x000008, "Member 'UnionRaceUI_UpdateHomingAimLocation_Implementation::AimLocation' has a wrong offset!");

// Function UnionRun.UnionRaceUI.UpdateHomingAimTargetedLocation_Implementation
// 0x0020 (0x0020 - 0x0000)
struct UnionRaceUI_UpdateHomingAimTargetedLocation_Implementation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_UpdateHomingAimTargetedLocation_Implementation) == 0x000008, "Wrong alignment on UnionRaceUI_UpdateHomingAimTargetedLocation_Implementation");
static_assert(sizeof(UnionRaceUI_UpdateHomingAimTargetedLocation_Implementation) == 0x000020, "Wrong size on UnionRaceUI_UpdateHomingAimTargetedLocation_Implementation");
static_assert(offsetof(UnionRaceUI_UpdateHomingAimTargetedLocation_Implementation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_UpdateHomingAimTargetedLocation_Implementation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_UpdateHomingAimTargetedLocation_Implementation, PlayerLocation) == 0x000008, "Member 'UnionRaceUI_UpdateHomingAimTargetedLocation_Implementation::PlayerLocation' has a wrong offset!");

// Function UnionRun.UnionRaceUI.UpdateIrregularInfiniteItem
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUI_UpdateIrregularInfiniteItem final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_UpdateIrregularInfiniteItem) == 0x000004, "Wrong alignment on UnionRaceUI_UpdateIrregularInfiniteItem");
static_assert(sizeof(UnionRaceUI_UpdateIrregularInfiniteItem) == 0x000004, "Wrong size on UnionRaceUI_UpdateIrregularInfiniteItem");
static_assert(offsetof(UnionRaceUI_UpdateIrregularInfiniteItem, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_UpdateIrregularInfiniteItem::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUI.UpdateIsComSetting
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_UpdateIsComSetting final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCom;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_UpdateIsComSetting) == 0x000004, "Wrong alignment on UnionRaceUI_UpdateIsComSetting");
static_assert(sizeof(UnionRaceUI_UpdateIsComSetting) == 0x000008, "Wrong size on UnionRaceUI_UpdateIsComSetting");
static_assert(offsetof(UnionRaceUI_UpdateIsComSetting, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_UpdateIsComSetting::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_UpdateIsComSetting, IsCom) == 0x000004, "Member 'UnionRaceUI_UpdateIsComSetting::IsCom' has a wrong offset!");

// Function UnionRun.UnionRaceUI.UpdateMinimapIconByRacers_Implementation
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_UpdateMinimapIconByRacers_Implementation final
{
public:
	class UUnionRacers*                           InRacers;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_UpdateMinimapIconByRacers_Implementation) == 0x000008, "Wrong alignment on UnionRaceUI_UpdateMinimapIconByRacers_Implementation");
static_assert(sizeof(UnionRaceUI_UpdateMinimapIconByRacers_Implementation) == 0x000008, "Wrong size on UnionRaceUI_UpdateMinimapIconByRacers_Implementation");
static_assert(offsetof(UnionRaceUI_UpdateMinimapIconByRacers_Implementation, InRacers) == 0x000000, "Member 'UnionRaceUI_UpdateMinimapIconByRacers_Implementation::InRacers' has a wrong offset!");

// Function UnionRun.UnionRaceUI.UpdateRaceHUD
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUI_UpdateRaceHUD final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUI_UpdateRaceHUD) == 0x000004, "Wrong alignment on UnionRaceUI_UpdateRaceHUD");
static_assert(sizeof(UnionRaceUI_UpdateRaceHUD) == 0x000004, "Wrong size on UnionRaceUI_UpdateRaceHUD");
static_assert(offsetof(UnionRaceUI_UpdateRaceHUD, Delta) == 0x000000, "Member 'UnionRaceUI_UpdateRaceHUD::Delta' has a wrong offset!");

// Function UnionRun.UnionRaceUI.IsLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUI_IsLocalPlayer final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUI_IsLocalPlayer) == 0x000004, "Wrong alignment on UnionRaceUI_IsLocalPlayer");
static_assert(sizeof(UnionRaceUI_IsLocalPlayer) == 0x000008, "Wrong size on UnionRaceUI_IsLocalPlayer");
static_assert(offsetof(UnionRaceUI_IsLocalPlayer, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUI_IsLocalPlayer::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUI_IsLocalPlayer, ReturnValue) == 0x000004, "Member 'UnionRaceUI_IsLocalPlayer::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.CalcItemCategory
// 0x0002 (0x0002 - 0x0000)
struct UnionRaceUIBPFL_CalcItemCategory final
{
public:
	EItemId                                       InItemId;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceItemCategory                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_CalcItemCategory) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_CalcItemCategory");
static_assert(sizeof(UnionRaceUIBPFL_CalcItemCategory) == 0x000002, "Wrong size on UnionRaceUIBPFL_CalcItemCategory");
static_assert(offsetof(UnionRaceUIBPFL_CalcItemCategory, InItemId) == 0x000000, "Member 'UnionRaceUIBPFL_CalcItemCategory::InItemId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_CalcItemCategory, ReturnValue) == 0x000001, "Member 'UnionRaceUIBPFL_CalcItemCategory::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetAnchorSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetAnchorSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetAnchorSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetAnchorSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetAnchorSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetAnchorSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetAnchorSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetAnchorSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetAnchorSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetAnchorSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetAnchorSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetAnchorSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetAnchorSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetAnchorSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetAttackItemDistSettings
// 0x0014 (0x0014 - 0x0000)
struct UnionRaceUIBPFL_GetAttackItemDistSettings final
{
public:
	EUnionAttackItemInfoType                      Type;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InId;                                              // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Dist1;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetAttackItemDistSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetAttackItemDistSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetAttackItemDistSettings) == 0x000014, "Wrong size on UnionRaceUIBPFL_GetAttackItemDistSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetAttackItemDistSettings, Type) == 0x000000, "Member 'UnionRaceUIBPFL_GetAttackItemDistSettings::Type' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetAttackItemDistSettings, InId) == 0x000001, "Member 'UnionRaceUIBPFL_GetAttackItemDistSettings::InId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetAttackItemDistSettings, Dist1) == 0x000004, "Member 'UnionRaceUIBPFL_GetAttackItemDistSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetAttackItemDistSettings, Dist2) == 0x000008, "Member 'UnionRaceUIBPFL_GetAttackItemDistSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetAttackItemDistSettings, Dist3) == 0x00000C, "Member 'UnionRaceUIBPFL_GetAttackItemDistSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetAttackItemDistSettings, DisableDist) == 0x000010, "Member 'UnionRaceUIBPFL_GetAttackItemDistSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetBlackBombSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetBlackBombSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetBlackBombSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetBlackBombSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetBlackBombSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetBlackBombSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetBlackBombSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetBlackBombSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetBlackBombSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetBlackBombSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetBlackBombSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetBlackBombSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetBlackBombSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetBlackBombSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetBodyCutSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetBodyCutSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetBodyCutSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetBodyCutSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetBodyCutSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetBodyCutSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetBodyCutSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetBodyCutSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetBodyCutSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetBodyCutSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetBodyCutSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetBodyCutSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetBodyCutSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetBodyCutSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetDarkChaoSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetDarkChaoSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetDarkChaoSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetDarkChaoSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetDarkChaoSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetDarkChaoSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetDarkChaoSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetDarkChaoSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetDarkChaoSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetDarkChaoSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetDarkChaoSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetDarkChaoSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetDarkChaoSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetDarkChaoSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetHomingPunchSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetHomingPunchSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetHomingPunchSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetHomingPunchSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetHomingPunchSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetHomingPunchSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetHomingPunchSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetHomingPunchSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetHomingPunchSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetHomingPunchSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetHomingPunchSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetHomingPunchSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetHomingPunchSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetHomingPunchSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetKingBoomBooSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetKingBoomBooSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetKingBoomBooSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetKingBoomBooSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetKingBoomBooSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetKingBoomBooSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetKingBoomBooSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetKingBoomBooSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetKingBoomBooSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetKingBoomBooSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetKingBoomBooSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetKingBoomBooSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetKingBoomBooSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetKingBoomBooSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetMonsterTruckSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetMonsterTruckSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetMonsterTruckSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetMonsterTruckSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetMonsterTruckSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetMonsterTruckSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetMonsterTruckSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetMonsterTruckSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetMonsterTruckSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetMonsterTruckSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetMonsterTruckSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetMonsterTruckSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetMonsterTruckSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetMonsterTruckSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetRacerApproachSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetRacerApproachSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetRacerApproachSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetRacerApproachSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetRacerApproachSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetRacerApproachSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetRacerApproachSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetRacerApproachSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetRacerApproachSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetRacerApproachSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetRacerApproachSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetRacerApproachSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetRacerApproachSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetRacerApproachSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetRocketPunchSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetRocketPunchSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetRocketPunchSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetRocketPunchSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetRocketPunchSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetRocketPunchSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetRocketPunchSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetRocketPunchSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetRocketPunchSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetRocketPunchSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetRocketPunchSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetRocketPunchSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetRocketPunchSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetRocketPunchSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetSelectorLabelByDriverId
// 0x0020 (0x0020 - 0x0000)
struct UnionRaceUIBPFL_GetSelectorLabelByDriverId final
{
public:
	EDriverId                                     InDriverId;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutLabel;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIBPFL_GetSelectorLabelByDriverId) == 0x000008, "Wrong alignment on UnionRaceUIBPFL_GetSelectorLabelByDriverId");
static_assert(sizeof(UnionRaceUIBPFL_GetSelectorLabelByDriverId) == 0x000020, "Wrong size on UnionRaceUIBPFL_GetSelectorLabelByDriverId");
static_assert(offsetof(UnionRaceUIBPFL_GetSelectorLabelByDriverId, InDriverId) == 0x000000, "Member 'UnionRaceUIBPFL_GetSelectorLabelByDriverId::InDriverId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetSelectorLabelByDriverId, OutLabel) == 0x000008, "Member 'UnionRaceUIBPFL_GetSelectorLabelByDriverId::OutLabel' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetSelectorLabelByDriverId, ReturnValue) == 0x000018, "Member 'UnionRaceUIBPFL_GetSelectorLabelByDriverId::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetSlicerSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetSlicerSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetSlicerSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetSlicerSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetSlicerSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetSlicerSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetSlicerSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetSlicerSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetSlicerSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetSlicerSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetSlicerSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetSlicerSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetSlicerSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetSlicerSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetSlimeSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetSlimeSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetSlimeSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetSlimeSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetSlimeSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetSlimeSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetSlimeSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetSlimeSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetSlimeSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetSlimeSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetSlimeSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetSlimeSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetSlimeSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetSlimeSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetSplashSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetSplashSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetSplashSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetSplashSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetSplashSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetSplashSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetSplashSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetSplashSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetSplashSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetSplashSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetSplashSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetSplashSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetSplashSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetSplashSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetT_RexSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetT_RexSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetT_RexSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetT_RexSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetT_RexSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetT_RexSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetT_RexSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetT_RexSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetT_RexSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetT_RexSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetT_RexSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetT_RexSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetT_RexSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetT_RexSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.GetYellowDrillSettings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIBPFL_GetYellowDrillSettings final
{
public:
	float                                         Dist1;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist2;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist3;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableDist;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_GetYellowDrillSettings) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_GetYellowDrillSettings");
static_assert(sizeof(UnionRaceUIBPFL_GetYellowDrillSettings) == 0x000010, "Wrong size on UnionRaceUIBPFL_GetYellowDrillSettings");
static_assert(offsetof(UnionRaceUIBPFL_GetYellowDrillSettings, Dist1) == 0x000000, "Member 'UnionRaceUIBPFL_GetYellowDrillSettings::Dist1' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetYellowDrillSettings, Dist2) == 0x000004, "Member 'UnionRaceUIBPFL_GetYellowDrillSettings::Dist2' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetYellowDrillSettings, Dist3) == 0x000008, "Member 'UnionRaceUIBPFL_GetYellowDrillSettings::Dist3' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_GetYellowDrillSettings, DisableDist) == 0x00000C, "Member 'UnionRaceUIBPFL_GetYellowDrillSettings::DisableDist' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.IsAttackWarningItem
// 0x0002 (0x0002 - 0x0000)
struct UnionRaceUIBPFL_IsAttackWarningItem final
{
public:
	EItemId                                       InItemId;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_IsAttackWarningItem) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_IsAttackWarningItem");
static_assert(sizeof(UnionRaceUIBPFL_IsAttackWarningItem) == 0x000002, "Wrong size on UnionRaceUIBPFL_IsAttackWarningItem");
static_assert(offsetof(UnionRaceUIBPFL_IsAttackWarningItem, InItemId) == 0x000000, "Member 'UnionRaceUIBPFL_IsAttackWarningItem::InItemId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_IsAttackWarningItem, ReturnValue) == 0x000001, "Member 'UnionRaceUIBPFL_IsAttackWarningItem::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.IsDebugAimingHidden
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_IsDebugAimingHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_IsDebugAimingHidden) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_IsDebugAimingHidden");
static_assert(sizeof(UnionRaceUIBPFL_IsDebugAimingHidden) == 0x000001, "Wrong size on UnionRaceUIBPFL_IsDebugAimingHidden");
static_assert(offsetof(UnionRaceUIBPFL_IsDebugAimingHidden, ReturnValue) == 0x000000, "Member 'UnionRaceUIBPFL_IsDebugAimingHidden::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.IsIgnoreAttackWarningItemUseForBack
// 0x0002 (0x0002 - 0x0000)
struct UnionRaceUIBPFL_IsIgnoreAttackWarningItemUseForBack final
{
public:
	EItemId                                       InItemId;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_IsIgnoreAttackWarningItemUseForBack) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_IsIgnoreAttackWarningItemUseForBack");
static_assert(sizeof(UnionRaceUIBPFL_IsIgnoreAttackWarningItemUseForBack) == 0x000002, "Wrong size on UnionRaceUIBPFL_IsIgnoreAttackWarningItemUseForBack");
static_assert(offsetof(UnionRaceUIBPFL_IsIgnoreAttackWarningItemUseForBack, InItemId) == 0x000000, "Member 'UnionRaceUIBPFL_IsIgnoreAttackWarningItemUseForBack::InItemId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_IsIgnoreAttackWarningItemUseForBack, ReturnValue) == 0x000001, "Member 'UnionRaceUIBPFL_IsIgnoreAttackWarningItemUseForBack::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.IsRareItemBP
// 0x0002 (0x0002 - 0x0000)
struct UnionRaceUIBPFL_IsRareItemBP final
{
public:
	EItemId                                       InItemId;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_IsRareItemBP) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_IsRareItemBP");
static_assert(sizeof(UnionRaceUIBPFL_IsRareItemBP) == 0x000002, "Wrong size on UnionRaceUIBPFL_IsRareItemBP");
static_assert(offsetof(UnionRaceUIBPFL_IsRareItemBP, InItemId) == 0x000000, "Member 'UnionRaceUIBPFL_IsRareItemBP::InItemId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_IsRareItemBP, ReturnValue) == 0x000001, "Member 'UnionRaceUIBPFL_IsRareItemBP::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetAimingHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetAimingHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetAimingHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetAimingHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetAimingHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetAimingHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetAimingHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetAimingHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetAirTrickHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetAirTrickHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetAirTrickHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetAirTrickHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetAirTrickHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetAirTrickHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetAirTrickHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetAirTrickHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetBoostHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetBoostHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetBoostHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetBoostHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetBoostHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetBoostHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetBoostHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetBoostHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetCharaHeadHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetCharaHeadHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetCharaHeadHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetCharaHeadHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetCharaHeadHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetCharaHeadHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetCharaHeadHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetCharaHeadHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetCourseMapHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetCourseMapHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetCourseMapHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetCourseMapHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetCourseMapHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetCourseMapHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetCourseMapHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetCourseMapHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetDebugRaceHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetDebugRaceHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetDebugRaceHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetDebugRaceHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetDebugRaceHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetDebugRaceHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetDebugRaceHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetDebugRaceHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetGadgetIconHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetGadgetIconHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetGadgetIconHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetGadgetIconHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetGadgetIconHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetGadgetIconHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetGadgetIconHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetGadgetIconHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetGuideButtonHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetGuideButtonHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetGuideButtonHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetGuideButtonHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetGuideButtonHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetGuideButtonHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetGuideButtonHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetGuideButtonHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetHitInfoHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetHitInfoHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetHitInfoHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetHitInfoHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetHitInfoHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetHitInfoHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetHitInfoHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetHitInfoHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetItemIconHUDVisible
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIBPFL_SetItemIconHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerControllerIndex;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlagOnly;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIBPFL_SetItemIconHUDVisible) == 0x000004, "Wrong alignment on UnionRaceUIBPFL_SetItemIconHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetItemIconHUDVisible) == 0x00000C, "Wrong size on UnionRaceUIBPFL_SetItemIconHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetItemIconHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetItemIconHUDVisible::bVisible' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_SetItemIconHUDVisible, PlayerControllerIndex) == 0x000004, "Member 'UnionRaceUIBPFL_SetItemIconHUDVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIBPFL_SetItemIconHUDVisible, bFlagOnly) == 0x000008, "Member 'UnionRaceUIBPFL_SetItemIconHUDVisible::bFlagOnly' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetItemIconHUDVisibleAll
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetItemIconHUDVisibleAll final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetItemIconHUDVisibleAll) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetItemIconHUDVisibleAll");
static_assert(sizeof(UnionRaceUIBPFL_SetItemIconHUDVisibleAll) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetItemIconHUDVisibleAll");
static_assert(offsetof(UnionRaceUIBPFL_SetItemIconHUDVisibleAll, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetItemIconHUDVisibleAll::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetItemWarningHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetItemWarningHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetItemWarningHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetItemWarningHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetItemWarningHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetItemWarningHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetItemWarningHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetItemWarningHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetLapHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetLapHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetLapHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetLapHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetLapHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetLapHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetLapHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetLapHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetRaceHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetRaceHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetRaceHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetRaceHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetRaceHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetRaceHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetRaceHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetRaceHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetRankHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetRankHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetRankHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetRankHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetRankHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetRankHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetRankHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetRankHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetRedStarRingHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetRedStarRingHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetRedStarRingHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetRedStarRingHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetRedStarRingHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetRedStarRingHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetRedStarRingHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetRedStarRingHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetRingHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetRingHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetRingHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetRingHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetRingHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetRingHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetRingHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetRingHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetSpeedNumHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetSpeedNumHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetSpeedNumHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetSpeedNumHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetSpeedNumHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetSpeedNumHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetSpeedNumHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetSpeedNumHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetTeamRankHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetTeamRankHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetTeamRankHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetTeamRankHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetTeamRankHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetTeamRankHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetTeamRankHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetTeamRankHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIBPFL.SetTextBalloonHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIBPFL_SetTextBalloonHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIBPFL_SetTextBalloonHUDVisible) == 0x000001, "Wrong alignment on UnionRaceUIBPFL_SetTextBalloonHUDVisible");
static_assert(sizeof(UnionRaceUIBPFL_SetTextBalloonHUDVisible) == 0x000001, "Wrong size on UnionRaceUIBPFL_SetTextBalloonHUDVisible");
static_assert(offsetof(UnionRaceUIBPFL_SetTextBalloonHUDVisible, bVisible) == 0x000000, "Member 'UnionRaceUIBPFL_SetTextBalloonHUDVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIFestaReward.GetEMachineId
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIFestaReward_GetEMachineId final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIFestaReward_GetEMachineId) == 0x000004, "Wrong alignment on UnionRaceUIFestaReward_GetEMachineId");
static_assert(sizeof(UnionRaceUIFestaReward_GetEMachineId) == 0x000008, "Wrong size on UnionRaceUIFestaReward_GetEMachineId");
static_assert(offsetof(UnionRaceUIFestaReward_GetEMachineId, Index_0) == 0x000000, "Member 'UnionRaceUIFestaReward_GetEMachineId::Index_0' has a wrong offset!");
static_assert(offsetof(UnionRaceUIFestaReward_GetEMachineId, ReturnValue) == 0x000004, "Member 'UnionRaceUIFestaReward_GetEMachineId::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIFestaReward.GetRacerContributionList
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUIFestaReward_GetRacerContributionList final
{
public:
	int32                                         InPlayerRacerIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFestaRacerContribution>        OutFestaRacerContribution;                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIFestaReward_GetRacerContributionList) == 0x000008, "Wrong alignment on UnionRaceUIFestaReward_GetRacerContributionList");
static_assert(sizeof(UnionRaceUIFestaReward_GetRacerContributionList) == 0x000018, "Wrong size on UnionRaceUIFestaReward_GetRacerContributionList");
static_assert(offsetof(UnionRaceUIFestaReward_GetRacerContributionList, InPlayerRacerIndex) == 0x000000, "Member 'UnionRaceUIFestaReward_GetRacerContributionList::InPlayerRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIFestaReward_GetRacerContributionList, OutFestaRacerContribution) == 0x000008, "Member 'UnionRaceUIFestaReward_GetRacerContributionList::OutFestaRacerContribution' has a wrong offset!");

// Function UnionRun.UnionRaceUIFestaReward.GetUpdatePoint
// 0x0028 (0x0028 - 0x0000)
struct UnionRaceUIFestaReward_GetUpdatePoint final
{
public:
	TArray<struct FFestaPointRewardUIData>        RewardDataArray;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         StartIconCount;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NowPoint;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Add;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutIconWindowX;                                    // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutGagePosi;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutGetRewardIndex;                                 // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIFestaReward_GetUpdatePoint) == 0x000008, "Wrong alignment on UnionRaceUIFestaReward_GetUpdatePoint");
static_assert(sizeof(UnionRaceUIFestaReward_GetUpdatePoint) == 0x000028, "Wrong size on UnionRaceUIFestaReward_GetUpdatePoint");
static_assert(offsetof(UnionRaceUIFestaReward_GetUpdatePoint, RewardDataArray) == 0x000000, "Member 'UnionRaceUIFestaReward_GetUpdatePoint::RewardDataArray' has a wrong offset!");
static_assert(offsetof(UnionRaceUIFestaReward_GetUpdatePoint, StartIconCount) == 0x000010, "Member 'UnionRaceUIFestaReward_GetUpdatePoint::StartIconCount' has a wrong offset!");
static_assert(offsetof(UnionRaceUIFestaReward_GetUpdatePoint, NowPoint) == 0x000014, "Member 'UnionRaceUIFestaReward_GetUpdatePoint::NowPoint' has a wrong offset!");
static_assert(offsetof(UnionRaceUIFestaReward_GetUpdatePoint, Add) == 0x000018, "Member 'UnionRaceUIFestaReward_GetUpdatePoint::Add' has a wrong offset!");
static_assert(offsetof(UnionRaceUIFestaReward_GetUpdatePoint, OutIconWindowX) == 0x00001C, "Member 'UnionRaceUIFestaReward_GetUpdatePoint::OutIconWindowX' has a wrong offset!");
static_assert(offsetof(UnionRaceUIFestaReward_GetUpdatePoint, OutGagePosi) == 0x000020, "Member 'UnionRaceUIFestaReward_GetUpdatePoint::OutGagePosi' has a wrong offset!");
static_assert(offsetof(UnionRaceUIFestaReward_GetUpdatePoint, OutGetRewardIndex) == 0x000024, "Member 'UnionRaceUIFestaReward_GetUpdatePoint::OutGetRewardIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIFestaReward.SetupViewBg
// 0x0040 (0x0040 - 0x0000)
struct UnionRaceUIFestaReward_SetupViewBg final
{
public:
	struct FVector                                InCameraLocation;                                  // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsLightSpawn;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACameraActor*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIFestaReward_SetupViewBg) == 0x000008, "Wrong alignment on UnionRaceUIFestaReward_SetupViewBg");
static_assert(sizeof(UnionRaceUIFestaReward_SetupViewBg) == 0x000040, "Wrong size on UnionRaceUIFestaReward_SetupViewBg");
static_assert(offsetof(UnionRaceUIFestaReward_SetupViewBg, InCameraLocation) == 0x000000, "Member 'UnionRaceUIFestaReward_SetupViewBg::InCameraLocation' has a wrong offset!");
static_assert(offsetof(UnionRaceUIFestaReward_SetupViewBg, CameraRotation) == 0x000018, "Member 'UnionRaceUIFestaReward_SetupViewBg::CameraRotation' has a wrong offset!");
static_assert(offsetof(UnionRaceUIFestaReward_SetupViewBg, bIsLightSpawn) == 0x000030, "Member 'UnionRaceUIFestaReward_SetupViewBg::bIsLightSpawn' has a wrong offset!");
static_assert(offsetof(UnionRaceUIFestaReward_SetupViewBg, ReturnValue) == 0x000038, "Member 'UnionRaceUIFestaReward_SetupViewBg::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.PlayBonusPoint
// 0x0020 (0x0020 - 0x0000)
struct UnionRaceUIResultLine_PlayBonusPoint final
{
public:
	class FText                                   BonusName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   BonusNum;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultLine_PlayBonusPoint) == 0x000008, "Wrong alignment on UnionRaceUIResultLine_PlayBonusPoint");
static_assert(sizeof(UnionRaceUIResultLine_PlayBonusPoint) == 0x000020, "Wrong size on UnionRaceUIResultLine_PlayBonusPoint");
static_assert(offsetof(UnionRaceUIResultLine_PlayBonusPoint, BonusName) == 0x000000, "Member 'UnionRaceUIResultLine_PlayBonusPoint::BonusName' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultLine_PlayBonusPoint, BonusNum) == 0x000010, "Member 'UnionRaceUIResultLine_PlayBonusPoint::BonusNum' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.PlayCheckMatchPoint
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultLine_PlayCheckMatchPoint final
{
public:
	int32                                         TotalPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultLine_PlayCheckMatchPoint) == 0x000004, "Wrong alignment on UnionRaceUIResultLine_PlayCheckMatchPoint");
static_assert(sizeof(UnionRaceUIResultLine_PlayCheckMatchPoint) == 0x000004, "Wrong size on UnionRaceUIResultLine_PlayCheckMatchPoint");
static_assert(offsetof(UnionRaceUIResultLine_PlayCheckMatchPoint, TotalPoint) == 0x000000, "Member 'UnionRaceUIResultLine_PlayCheckMatchPoint::TotalPoint' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.SetArrowIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultLine_SetArrowIndex final
{
public:
	int32                                         ArrowIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultLine_SetArrowIndex) == 0x000004, "Wrong alignment on UnionRaceUIResultLine_SetArrowIndex");
static_assert(sizeof(UnionRaceUIResultLine_SetArrowIndex) == 0x000004, "Wrong size on UnionRaceUIResultLine_SetArrowIndex");
static_assert(offsetof(UnionRaceUIResultLine_SetArrowIndex, ArrowIndex) == 0x000000, "Member 'UnionRaceUIResultLine_SetArrowIndex::ArrowIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.SetBeforeTotalPointValue
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultLine_SetBeforeTotalPointValue final
{
public:
	int32                                         BeforeTotalPoint;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultLine_SetBeforeTotalPointValue) == 0x000004, "Wrong alignment on UnionRaceUIResultLine_SetBeforeTotalPointValue");
static_assert(sizeof(UnionRaceUIResultLine_SetBeforeTotalPointValue) == 0x000004, "Wrong size on UnionRaceUIResultLine_SetBeforeTotalPointValue");
static_assert(offsetof(UnionRaceUIResultLine_SetBeforeTotalPointValue, BeforeTotalPoint) == 0x000000, "Member 'UnionRaceUIResultLine_SetBeforeTotalPointValue::BeforeTotalPoint' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.SetCharacterId
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIResultLine_SetCharacterId final
{
public:
	EDriverId                                     CharaId;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultLine_SetCharacterId) == 0x000001, "Wrong alignment on UnionRaceUIResultLine_SetCharacterId");
static_assert(sizeof(UnionRaceUIResultLine_SetCharacterId) == 0x000001, "Wrong size on UnionRaceUIResultLine_SetCharacterId");
static_assert(offsetof(UnionRaceUIResultLine_SetCharacterId, CharaId) == 0x000000, "Member 'UnionRaceUIResultLine_SetCharacterId::CharaId' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.SetEarnPointValue
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultLine_SetEarnPointValue final
{
public:
	int32                                         EarnPoint;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultLine_SetEarnPointValue) == 0x000004, "Wrong alignment on UnionRaceUIResultLine_SetEarnPointValue");
static_assert(sizeof(UnionRaceUIResultLine_SetEarnPointValue) == 0x000004, "Wrong size on UnionRaceUIResultLine_SetEarnPointValue");
static_assert(offsetof(UnionRaceUIResultLine_SetEarnPointValue, EarnPoint) == 0x000000, "Member 'UnionRaceUIResultLine_SetEarnPointValue::EarnPoint' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.SetLapTime
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultLine_SetLapTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultLine_SetLapTime) == 0x000004, "Wrong alignment on UnionRaceUIResultLine_SetLapTime");
static_assert(sizeof(UnionRaceUIResultLine_SetLapTime) == 0x000004, "Wrong size on UnionRaceUIResultLine_SetLapTime");
static_assert(offsetof(UnionRaceUIResultLine_SetLapTime, Time) == 0x000000, "Member 'UnionRaceUIResultLine_SetLapTime::Time' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.SetLapTimePlus
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultLine_SetLapTimePlus final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultLine_SetLapTimePlus) == 0x000004, "Wrong alignment on UnionRaceUIResultLine_SetLapTimePlus");
static_assert(sizeof(UnionRaceUIResultLine_SetLapTimePlus) == 0x000004, "Wrong size on UnionRaceUIResultLine_SetLapTimePlus");
static_assert(offsetof(UnionRaceUIResultLine_SetLapTimePlus, Time) == 0x000000, "Member 'UnionRaceUIResultLine_SetLapTimePlus::Time' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.SetPlayerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultLine_SetPlayerIndex final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultLine_SetPlayerIndex) == 0x000004, "Wrong alignment on UnionRaceUIResultLine_SetPlayerIndex");
static_assert(sizeof(UnionRaceUIResultLine_SetPlayerIndex) == 0x000004, "Wrong size on UnionRaceUIResultLine_SetPlayerIndex");
static_assert(offsetof(UnionRaceUIResultLine_SetPlayerIndex, PlayerIndex) == 0x000000, "Member 'UnionRaceUIResultLine_SetPlayerIndex::PlayerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.SetRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultLine_SetRacerIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultLine_SetRacerIndex) == 0x000004, "Wrong alignment on UnionRaceUIResultLine_SetRacerIndex");
static_assert(sizeof(UnionRaceUIResultLine_SetRacerIndex) == 0x000004, "Wrong size on UnionRaceUIResultLine_SetRacerIndex");
static_assert(offsetof(UnionRaceUIResultLine_SetRacerIndex, Index_0) == 0x000000, "Member 'UnionRaceUIResultLine_SetRacerIndex::Index_0' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.SetRacerName
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIResultLine_SetRacerName final
{
public:
	class FText                                   RacerName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultLine_SetRacerName) == 0x000008, "Wrong alignment on UnionRaceUIResultLine_SetRacerName");
static_assert(sizeof(UnionRaceUIResultLine_SetRacerName) == 0x000010, "Wrong size on UnionRaceUIResultLine_SetRacerName");
static_assert(offsetof(UnionRaceUIResultLine_SetRacerName, RacerName) == 0x000000, "Member 'UnionRaceUIResultLine_SetRacerName::RacerName' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.SetRankIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIResultLine_SetRankIndex final
{
public:
	int32                                         RankIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCheckCrown;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIResultLine_SetRankIndex) == 0x000004, "Wrong alignment on UnionRaceUIResultLine_SetRankIndex");
static_assert(sizeof(UnionRaceUIResultLine_SetRankIndex) == 0x000008, "Wrong size on UnionRaceUIResultLine_SetRankIndex");
static_assert(offsetof(UnionRaceUIResultLine_SetRankIndex, RankIndex) == 0x000000, "Member 'UnionRaceUIResultLine_SetRankIndex::RankIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultLine_SetRankIndex, bIsCheckCrown) == 0x000004, "Member 'UnionRaceUIResultLine_SetRankIndex::bIsCheckCrown' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultLine.SetTotalPointValue
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultLine_SetTotalPointValue final
{
public:
	int32                                         TotalPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultLine_SetTotalPointValue) == 0x000004, "Wrong alignment on UnionRaceUIResultLine_SetTotalPointValue");
static_assert(sizeof(UnionRaceUIResultLine_SetTotalPointValue) == 0x000004, "Wrong size on UnionRaceUIResultLine_SetTotalPointValue");
static_assert(offsetof(UnionRaceUIResultLine_SetTotalPointValue, TotalPoint) == 0x000000, "Member 'UnionRaceUIResultLine_SetTotalPointValue::TotalPoint' has a wrong offset!");

// Function UnionRun.UnionRaceUIGroupResultLine.SetGroupIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIGroupResultLine_SetGroupIndex final
{
public:
	int32                                         InGroupIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIGroupResultLine_SetGroupIndex) == 0x000004, "Wrong alignment on UnionRaceUIGroupResultLine_SetGroupIndex");
static_assert(sizeof(UnionRaceUIGroupResultLine_SetGroupIndex) == 0x000004, "Wrong size on UnionRaceUIGroupResultLine_SetGroupIndex");
static_assert(offsetof(UnionRaceUIGroupResultLine_SetGroupIndex, InGroupIndex) == 0x000000, "Member 'UnionRaceUIGroupResultLine_SetGroupIndex::InGroupIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIGroupResultScene.GetFestaBonusByRacerIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIGroupResultScene_GetFestaBonusByRacerIndex final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIGroupResultScene_GetFestaBonusByRacerIndex) == 0x000004, "Wrong alignment on UnionRaceUIGroupResultScene_GetFestaBonusByRacerIndex");
static_assert(sizeof(UnionRaceUIGroupResultScene_GetFestaBonusByRacerIndex) == 0x000008, "Wrong size on UnionRaceUIGroupResultScene_GetFestaBonusByRacerIndex");
static_assert(offsetof(UnionRaceUIGroupResultScene_GetFestaBonusByRacerIndex, RacerIndex) == 0x000000, "Member 'UnionRaceUIGroupResultScene_GetFestaBonusByRacerIndex::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIGroupResultScene_GetFestaBonusByRacerIndex, ReturnValue) == 0x000004, "Member 'UnionRaceUIGroupResultScene_GetFestaBonusByRacerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIGroupResultScene.GetFestaBonusByTeamIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIGroupResultScene_GetFestaBonusByTeamIndex final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIGroupResultScene_GetFestaBonusByTeamIndex) == 0x000004, "Wrong alignment on UnionRaceUIGroupResultScene_GetFestaBonusByTeamIndex");
static_assert(sizeof(UnionRaceUIGroupResultScene_GetFestaBonusByTeamIndex) == 0x000008, "Wrong size on UnionRaceUIGroupResultScene_GetFestaBonusByTeamIndex");
static_assert(offsetof(UnionRaceUIGroupResultScene_GetFestaBonusByTeamIndex, TeamIndex) == 0x000000, "Member 'UnionRaceUIGroupResultScene_GetFestaBonusByTeamIndex::TeamIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIGroupResultScene_GetFestaBonusByTeamIndex, ReturnValue) == 0x000004, "Member 'UnionRaceUIGroupResultScene_GetFestaBonusByTeamIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIGroupResultScene.GetFestaBonusType
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIGroupResultScene_GetFestaBonusType final
{
public:
	EGroupBonusType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIGroupResultScene_GetFestaBonusType) == 0x000001, "Wrong alignment on UnionRaceUIGroupResultScene_GetFestaBonusType");
static_assert(sizeof(UnionRaceUIGroupResultScene_GetFestaBonusType) == 0x000001, "Wrong size on UnionRaceUIGroupResultScene_GetFestaBonusType");
static_assert(offsetof(UnionRaceUIGroupResultScene_GetFestaBonusType, ReturnValue) == 0x000000, "Member 'UnionRaceUIGroupResultScene_GetFestaBonusType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIGroupResultScene.GetFestaResultInfo
// 0x0058 (0x0058 - 0x0000)
struct UnionRaceUIGroupResultScene_GetFestaResultInfo final
{
public:
	TArray<int32>                                 TeamPointList;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFestaResultInfo                       OutInfo;                                           // 0x0010(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         InPlayerRacerIndex;                                // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingGrouping                          RaceSettingGrouping;                               // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIGroupResultScene_GetFestaResultInfo) == 0x000008, "Wrong alignment on UnionRaceUIGroupResultScene_GetFestaResultInfo");
static_assert(sizeof(UnionRaceUIGroupResultScene_GetFestaResultInfo) == 0x000058, "Wrong size on UnionRaceUIGroupResultScene_GetFestaResultInfo");
static_assert(offsetof(UnionRaceUIGroupResultScene_GetFestaResultInfo, TeamPointList) == 0x000000, "Member 'UnionRaceUIGroupResultScene_GetFestaResultInfo::TeamPointList' has a wrong offset!");
static_assert(offsetof(UnionRaceUIGroupResultScene_GetFestaResultInfo, OutInfo) == 0x000010, "Member 'UnionRaceUIGroupResultScene_GetFestaResultInfo::OutInfo' has a wrong offset!");
static_assert(offsetof(UnionRaceUIGroupResultScene_GetFestaResultInfo, InPlayerRacerIndex) == 0x000050, "Member 'UnionRaceUIGroupResultScene_GetFestaResultInfo::InPlayerRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIGroupResultScene_GetFestaResultInfo, RaceSettingGrouping) == 0x000054, "Member 'UnionRaceUIGroupResultScene_GetFestaResultInfo::RaceSettingGrouping' has a wrong offset!");

// Function UnionRun.UnionRaceUIGroupResultScene.GetGroupRaceRule
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIGroupResultScene_GetGroupRaceRule final
{
public:
	EGroupRaceRule                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIGroupResultScene_GetGroupRaceRule) == 0x000001, "Wrong alignment on UnionRaceUIGroupResultScene_GetGroupRaceRule");
static_assert(sizeof(UnionRaceUIGroupResultScene_GetGroupRaceRule) == 0x000001, "Wrong size on UnionRaceUIGroupResultScene_GetGroupRaceRule");
static_assert(offsetof(UnionRaceUIGroupResultScene_GetGroupRaceRule, ReturnValue) == 0x000000, "Member 'UnionRaceUIGroupResultScene_GetGroupRaceRule::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIGroupResultScene.GetResultLinesPanel
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIGroupResultScene_GetResultLinesPanel final
{
public:
	TArray<class UUnionRaceUIResultPanel*>        ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIGroupResultScene_GetResultLinesPanel) == 0x000008, "Wrong alignment on UnionRaceUIGroupResultScene_GetResultLinesPanel");
static_assert(sizeof(UnionRaceUIGroupResultScene_GetResultLinesPanel) == 0x000010, "Wrong size on UnionRaceUIGroupResultScene_GetResultLinesPanel");
static_assert(offsetof(UnionRaceUIGroupResultScene_GetResultLinesPanel, ReturnValue) == 0x000000, "Member 'UnionRaceUIGroupResultScene_GetResultLinesPanel::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIGroupResultScene.SetLinesPanelRacerCount
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIGroupResultScene_SetLinesPanelRacerCount final
{
public:
	int32                                         RacerCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIGroupResultScene_SetLinesPanelRacerCount) == 0x000004, "Wrong alignment on UnionRaceUIGroupResultScene_SetLinesPanelRacerCount");
static_assert(sizeof(UnionRaceUIGroupResultScene_SetLinesPanelRacerCount) == 0x000004, "Wrong size on UnionRaceUIGroupResultScene_SetLinesPanelRacerCount");
static_assert(offsetof(UnionRaceUIGroupResultScene_SetLinesPanelRacerCount, RacerCount) == 0x000000, "Member 'UnionRaceUIGroupResultScene_SetLinesPanelRacerCount::RacerCount' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.AddAttackItemObject
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_AddAttackItemObject final
{
public:
	class UObject*                                InAttackItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_AddAttackItemObject) == 0x000008, "Wrong alignment on UnionRaceUIInterface_AddAttackItemObject");
static_assert(sizeof(UnionRaceUIInterface_AddAttackItemObject) == 0x000008, "Wrong size on UnionRaceUIInterface_AddAttackItemObject");
static_assert(offsetof(UnionRaceUIInterface_AddAttackItemObject, InAttackItem) == 0x000000, "Member 'UnionRaceUIInterface_AddAttackItemObject::InAttackItem' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.AddCourseMapActor
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIInterface_AddCourseMapActor final
{
public:
	class AActor*                                 InAttackItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       InItemId;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_AddCourseMapActor) == 0x000008, "Wrong alignment on UnionRaceUIInterface_AddCourseMapActor");
static_assert(sizeof(UnionRaceUIInterface_AddCourseMapActor) == 0x000010, "Wrong size on UnionRaceUIInterface_AddCourseMapActor");
static_assert(offsetof(UnionRaceUIInterface_AddCourseMapActor, InAttackItem) == 0x000000, "Member 'UnionRaceUIInterface_AddCourseMapActor::InAttackItem' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_AddCourseMapActor, InItemId) == 0x000008, "Member 'UnionRaceUIInterface_AddCourseMapActor::InItemId' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.AddToHUDAttackInfoWidget
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUIInterface_AddToHUDAttackInfoWidget final
{
public:
	TArray<class URaceUISubApproachWarning*>      InAttackWidget;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EUnionAttackItemInfoType                      InItemType;                                        // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InId;                                              // 0x0011(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_AddToHUDAttackInfoWidget) == 0x000008, "Wrong alignment on UnionRaceUIInterface_AddToHUDAttackInfoWidget");
static_assert(sizeof(UnionRaceUIInterface_AddToHUDAttackInfoWidget) == 0x000018, "Wrong size on UnionRaceUIInterface_AddToHUDAttackInfoWidget");
static_assert(offsetof(UnionRaceUIInterface_AddToHUDAttackInfoWidget, InAttackWidget) == 0x000000, "Member 'UnionRaceUIInterface_AddToHUDAttackInfoWidget::InAttackWidget' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_AddToHUDAttackInfoWidget, InItemType) == 0x000010, "Member 'UnionRaceUIInterface_AddToHUDAttackInfoWidget::InItemType' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_AddToHUDAttackInfoWidget, InId) == 0x000011, "Member 'UnionRaceUIInterface_AddToHUDAttackInfoWidget::InId' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.AfterFireManualAimingUI
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_AfterFireManualAimingUI final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_AfterFireManualAimingUI) == 0x000004, "Wrong alignment on UnionRaceUIInterface_AfterFireManualAimingUI");
static_assert(sizeof(UnionRaceUIInterface_AfterFireManualAimingUI) == 0x000004, "Wrong size on UnionRaceUIInterface_AfterFireManualAimingUI");
static_assert(offsetof(UnionRaceUIInterface_AfterFireManualAimingUI, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_AfterFireManualAimingUI::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.ApplyBoost
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_ApplyBoost final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_ApplyBoost) == 0x000004, "Wrong alignment on UnionRaceUIInterface_ApplyBoost");
static_assert(sizeof(UnionRaceUIInterface_ApplyBoost) == 0x000004, "Wrong size on UnionRaceUIInterface_ApplyBoost");
static_assert(offsetof(UnionRaceUIInterface_ApplyBoost, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_ApplyBoost::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.ApplyJustBoost
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_ApplyJustBoost final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_ApplyJustBoost) == 0x000004, "Wrong alignment on UnionRaceUIInterface_ApplyJustBoost");
static_assert(sizeof(UnionRaceUIInterface_ApplyJustBoost) == 0x000008, "Wrong size on UnionRaceUIInterface_ApplyJustBoost");
static_assert(offsetof(UnionRaceUIInterface_ApplyJustBoost, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_ApplyJustBoost::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_ApplyJustBoost, Level) == 0x000004, "Member 'UnionRaceUIInterface_ApplyJustBoost::Level' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.ChangeRingBoostGaugeToBoost
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_ChangeRingBoostGaugeToBoost final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_ChangeRingBoostGaugeToBoost) == 0x000004, "Wrong alignment on UnionRaceUIInterface_ChangeRingBoostGaugeToBoost");
static_assert(sizeof(UnionRaceUIInterface_ChangeRingBoostGaugeToBoost) == 0x000004, "Wrong size on UnionRaceUIInterface_ChangeRingBoostGaugeToBoost");
static_assert(offsetof(UnionRaceUIInterface_ChangeRingBoostGaugeToBoost, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_ChangeRingBoostGaugeToBoost::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.ChangeRingBoostGaugeToNormal
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_ChangeRingBoostGaugeToNormal final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_ChangeRingBoostGaugeToNormal) == 0x000004, "Wrong alignment on UnionRaceUIInterface_ChangeRingBoostGaugeToNormal");
static_assert(sizeof(UnionRaceUIInterface_ChangeRingBoostGaugeToNormal) == 0x000004, "Wrong size on UnionRaceUIInterface_ChangeRingBoostGaugeToNormal");
static_assert(offsetof(UnionRaceUIInterface_ChangeRingBoostGaugeToNormal, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_ChangeRingBoostGaugeToNormal::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.DecideLotteryItem
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIInterface_DecideLotteryItem final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InItemId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_DecideLotteryItem) == 0x000004, "Wrong alignment on UnionRaceUIInterface_DecideLotteryItem");
static_assert(sizeof(UnionRaceUIInterface_DecideLotteryItem) == 0x00000C, "Wrong size on UnionRaceUIInterface_DecideLotteryItem");
static_assert(offsetof(UnionRaceUIInterface_DecideLotteryItem, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_DecideLotteryItem::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_DecideLotteryItem, ItemInfoType) == 0x000004, "Member 'UnionRaceUIInterface_DecideLotteryItem::ItemInfoType' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_DecideLotteryItem, InItemId) == 0x000008, "Member 'UnionRaceUIInterface_DecideLotteryItem::InItemId' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.DispOffControlGuideFlight
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_DispOffControlGuideFlight final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_DispOffControlGuideFlight) == 0x000004, "Wrong alignment on UnionRaceUIInterface_DispOffControlGuideFlight");
static_assert(sizeof(UnionRaceUIInterface_DispOffControlGuideFlight) == 0x000004, "Wrong size on UnionRaceUIInterface_DispOffControlGuideFlight");
static_assert(offsetof(UnionRaceUIInterface_DispOffControlGuideFlight, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_DispOffControlGuideFlight::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.DispOffControlItemUse
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_DispOffControlItemUse final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_DispOffControlItemUse) == 0x000004, "Wrong alignment on UnionRaceUIInterface_DispOffControlItemUse");
static_assert(sizeof(UnionRaceUIInterface_DispOffControlItemUse) == 0x000004, "Wrong size on UnionRaceUIInterface_DispOffControlItemUse");
static_assert(offsetof(UnionRaceUIInterface_DispOffControlItemUse, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_DispOffControlItemUse::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.DispOffControlReleaseItemEffect
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_DispOffControlReleaseItemEffect final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_DispOffControlReleaseItemEffect) == 0x000004, "Wrong alignment on UnionRaceUIInterface_DispOffControlReleaseItemEffect");
static_assert(sizeof(UnionRaceUIInterface_DispOffControlReleaseItemEffect) == 0x000004, "Wrong size on UnionRaceUIInterface_DispOffControlReleaseItemEffect");
static_assert(offsetof(UnionRaceUIInterface_DispOffControlReleaseItemEffect, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_DispOffControlReleaseItemEffect::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.DispOffRaceActionTutorial
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_DispOffRaceActionTutorial final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_DispOffRaceActionTutorial) == 0x000004, "Wrong alignment on UnionRaceUIInterface_DispOffRaceActionTutorial");
static_assert(sizeof(UnionRaceUIInterface_DispOffRaceActionTutorial) == 0x000004, "Wrong size on UnionRaceUIInterface_DispOffRaceActionTutorial");
static_assert(offsetof(UnionRaceUIInterface_DispOffRaceActionTutorial, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_DispOffRaceActionTutorial::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.DispOnControlGuideFlight
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_DispOnControlGuideFlight final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuggestUpInput;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_DispOnControlGuideFlight) == 0x000004, "Wrong alignment on UnionRaceUIInterface_DispOnControlGuideFlight");
static_assert(sizeof(UnionRaceUIInterface_DispOnControlGuideFlight) == 0x000008, "Wrong size on UnionRaceUIInterface_DispOnControlGuideFlight");
static_assert(offsetof(UnionRaceUIInterface_DispOnControlGuideFlight, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_DispOnControlGuideFlight::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_DispOnControlGuideFlight, bSuggestUpInput) == 0x000004, "Member 'UnionRaceUIInterface_DispOnControlGuideFlight::bSuggestUpInput' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.DispOnControlItemUse
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_DispOnControlItemUse final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ItemId;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFever;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_DispOnControlItemUse) == 0x000004, "Wrong alignment on UnionRaceUIInterface_DispOnControlItemUse");
static_assert(sizeof(UnionRaceUIInterface_DispOnControlItemUse) == 0x000008, "Wrong size on UnionRaceUIInterface_DispOnControlItemUse");
static_assert(offsetof(UnionRaceUIInterface_DispOnControlItemUse, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_DispOnControlItemUse::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_DispOnControlItemUse, ItemId) == 0x000004, "Member 'UnionRaceUIInterface_DispOnControlItemUse::ItemId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_DispOnControlItemUse, bIsFever) == 0x000005, "Member 'UnionRaceUIInterface_DispOnControlItemUse::bIsFever' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.DispOnControlReleaseItemEffect
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_DispOnControlReleaseItemEffect final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ItemId;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_DispOnControlReleaseItemEffect) == 0x000004, "Wrong alignment on UnionRaceUIInterface_DispOnControlReleaseItemEffect");
static_assert(sizeof(UnionRaceUIInterface_DispOnControlReleaseItemEffect) == 0x000008, "Wrong size on UnionRaceUIInterface_DispOnControlReleaseItemEffect");
static_assert(offsetof(UnionRaceUIInterface_DispOnControlReleaseItemEffect, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_DispOnControlReleaseItemEffect::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_DispOnControlReleaseItemEffect, ItemId) == 0x000004, "Member 'UnionRaceUIInterface_DispOnControlReleaseItemEffect::ItemId' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.DispOnInterimReport
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_DispOnInterimReport final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_DispOnInterimReport) == 0x000004, "Wrong alignment on UnionRaceUIInterface_DispOnInterimReport");
static_assert(sizeof(UnionRaceUIInterface_DispOnInterimReport) == 0x000004, "Wrong size on UnionRaceUIInterface_DispOnInterimReport");
static_assert(offsetof(UnionRaceUIInterface_DispOnInterimReport, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_DispOnInterimReport::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.DispOnRaceActionTutorial
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_DispOnRaceActionTutorial final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialAction                               tutorialAction;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_DispOnRaceActionTutorial) == 0x000004, "Wrong alignment on UnionRaceUIInterface_DispOnRaceActionTutorial");
static_assert(sizeof(UnionRaceUIInterface_DispOnRaceActionTutorial) == 0x000008, "Wrong size on UnionRaceUIInterface_DispOnRaceActionTutorial");
static_assert(offsetof(UnionRaceUIInterface_DispOnRaceActionTutorial, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_DispOnRaceActionTutorial::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_DispOnRaceActionTutorial, tutorialAction) == 0x000004, "Member 'UnionRaceUIInterface_DispOnRaceActionTutorial::tutorialAction' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.FireAirTrickInfo
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIInterface_FireAirTrickInfo final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessCount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessBonusCount;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_FireAirTrickInfo) == 0x000004, "Wrong alignment on UnionRaceUIInterface_FireAirTrickInfo");
static_assert(sizeof(UnionRaceUIInterface_FireAirTrickInfo) == 0x00000C, "Wrong size on UnionRaceUIInterface_FireAirTrickInfo");
static_assert(offsetof(UnionRaceUIInterface_FireAirTrickInfo, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_FireAirTrickInfo::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_FireAirTrickInfo, SuccessCount) == 0x000004, "Member 'UnionRaceUIInterface_FireAirTrickInfo::SuccessCount' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_FireAirTrickInfo, SuccessBonusCount) == 0x000008, "Member 'UnionRaceUIInterface_FireAirTrickInfo::SuccessBonusCount' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.FireAttackInfo
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIInterface_FireAttackInfo final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackedByPlayerControllerIndex;                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_FireAttackInfo) == 0x000004, "Wrong alignment on UnionRaceUIInterface_FireAttackInfo");
static_assert(sizeof(UnionRaceUIInterface_FireAttackInfo) == 0x00000C, "Wrong size on UnionRaceUIInterface_FireAttackInfo");
static_assert(offsetof(UnionRaceUIInterface_FireAttackInfo, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_FireAttackInfo::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_FireAttackInfo, InItemId) == 0x000004, "Member 'UnionRaceUIInterface_FireAttackInfo::InItemId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_FireAttackInfo, AttackedByPlayerControllerIndex) == 0x000008, "Member 'UnionRaceUIInterface_FireAttackInfo::AttackedByPlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.FireAttackItemHitInfo
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIInterface_FireAttackItemHitInfo final
{
public:
	int32                                         AttackedByPlayerControllerIndex;                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InItemId;                                          // 0x0004(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRacerStatusObject*                AttackToRacerStatusObject;                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_FireAttackItemHitInfo) == 0x000008, "Wrong alignment on UnionRaceUIInterface_FireAttackItemHitInfo");
static_assert(sizeof(UnionRaceUIInterface_FireAttackItemHitInfo) == 0x000010, "Wrong size on UnionRaceUIInterface_FireAttackItemHitInfo");
static_assert(offsetof(UnionRaceUIInterface_FireAttackItemHitInfo, AttackedByPlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_FireAttackItemHitInfo::AttackedByPlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_FireAttackItemHitInfo, InItemId) == 0x000004, "Member 'UnionRaceUIInterface_FireAttackItemHitInfo::InItemId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_FireAttackItemHitInfo, AttackToRacerStatusObject) == 0x000008, "Member 'UnionRaceUIInterface_FireAttackItemHitInfo::AttackToRacerStatusObject' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.FireAttackItemHitInfo_New
// 0x0030 (0x0030 - 0x0000)
struct UnionRaceUIInterface_FireAttackItemHitInfo_New final
{
public:
	struct FFireAttackItemInfo                    Info;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_FireAttackItemHitInfo_New) == 0x000008, "Wrong alignment on UnionRaceUIInterface_FireAttackItemHitInfo_New");
static_assert(sizeof(UnionRaceUIInterface_FireAttackItemHitInfo_New) == 0x000030, "Wrong size on UnionRaceUIInterface_FireAttackItemHitInfo_New");
static_assert(offsetof(UnionRaceUIInterface_FireAttackItemHitInfo_New, Info) == 0x000000, "Member 'UnionRaceUIInterface_FireAttackItemHitInfo_New::Info' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.FireCourseMapCharaSpin
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_FireCourseMapCharaSpin final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_FireCourseMapCharaSpin) == 0x000004, "Wrong alignment on UnionRaceUIInterface_FireCourseMapCharaSpin");
static_assert(sizeof(UnionRaceUIInterface_FireCourseMapCharaSpin) == 0x000004, "Wrong size on UnionRaceUIInterface_FireCourseMapCharaSpin");
static_assert(offsetof(UnionRaceUIInterface_FireCourseMapCharaSpin, RacerIndex) == 0x000000, "Member 'UnionRaceUIInterface_FireCourseMapCharaSpin::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.FireFinishText
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_FireFinishText final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_FireFinishText) == 0x000004, "Wrong alignment on UnionRaceUIInterface_FireFinishText");
static_assert(sizeof(UnionRaceUIInterface_FireFinishText) == 0x000004, "Wrong size on UnionRaceUIInterface_FireFinishText");
static_assert(offsetof(UnionRaceUIInterface_FireFinishText, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_FireFinishText::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.FireItemHitInfo
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIInterface_FireItemHitInfo final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackToPlayerControllerIndex;                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_FireItemHitInfo) == 0x000004, "Wrong alignment on UnionRaceUIInterface_FireItemHitInfo");
static_assert(sizeof(UnionRaceUIInterface_FireItemHitInfo) == 0x00000C, "Wrong size on UnionRaceUIInterface_FireItemHitInfo");
static_assert(offsetof(UnionRaceUIInterface_FireItemHitInfo, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_FireItemHitInfo::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_FireItemHitInfo, InItemId) == 0x000004, "Member 'UnionRaceUIInterface_FireItemHitInfo::InItemId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_FireItemHitInfo, AttackToPlayerControllerIndex) == 0x000008, "Member 'UnionRaceUIInterface_FireItemHitInfo::AttackToPlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.FireLotteryItem
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_FireLotteryItem final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSilent;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_FireLotteryItem) == 0x000004, "Wrong alignment on UnionRaceUIInterface_FireLotteryItem");
static_assert(sizeof(UnionRaceUIInterface_FireLotteryItem) == 0x000008, "Wrong size on UnionRaceUIInterface_FireLotteryItem");
static_assert(offsetof(UnionRaceUIInterface_FireLotteryItem, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_FireLotteryItem::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_FireLotteryItem, ItemInfoType) == 0x000004, "Member 'UnionRaceUIInterface_FireLotteryItem::ItemInfoType' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_FireLotteryItem, bIsSilent) == 0x000005, "Member 'UnionRaceUIInterface_FireLotteryItem::bIsSilent' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.FireStartText
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_FireStartText final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_FireStartText) == 0x000004, "Wrong alignment on UnionRaceUIInterface_FireStartText");
static_assert(sizeof(UnionRaceUIInterface_FireStartText) == 0x000004, "Wrong size on UnionRaceUIInterface_FireStartText");
static_assert(offsetof(UnionRaceUIInterface_FireStartText, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_FireStartText::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.GetAimingUIBaseScale
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_GetAimingUIBaseScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_GetAimingUIBaseScale) == 0x000004, "Wrong alignment on UnionRaceUIInterface_GetAimingUIBaseScale");
static_assert(sizeof(UnionRaceUIInterface_GetAimingUIBaseScale) == 0x000004, "Wrong size on UnionRaceUIInterface_GetAimingUIBaseScale");
static_assert(offsetof(UnionRaceUIInterface_GetAimingUIBaseScale, ReturnValue) == 0x000000, "Member 'UnionRaceUIInterface_GetAimingUIBaseScale::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.GetCourseMapDomainNumber
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIInterface_GetCourseMapDomainNumber final
{
public:
	EDomainNumber                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_GetCourseMapDomainNumber) == 0x000001, "Wrong alignment on UnionRaceUIInterface_GetCourseMapDomainNumber");
static_assert(sizeof(UnionRaceUIInterface_GetCourseMapDomainNumber) == 0x000001, "Wrong size on UnionRaceUIInterface_GetCourseMapDomainNumber");
static_assert(offsetof(UnionRaceUIInterface_GetCourseMapDomainNumber, ReturnValue) == 0x000000, "Member 'UnionRaceUIInterface_GetCourseMapDomainNumber::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.GetRedStarRings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIInterface_GetRedStarRings final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRaceUIResultRedStarRings*         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_GetRedStarRings) == 0x000008, "Wrong alignment on UnionRaceUIInterface_GetRedStarRings");
static_assert(sizeof(UnionRaceUIInterface_GetRedStarRings) == 0x000010, "Wrong size on UnionRaceUIInterface_GetRedStarRings");
static_assert(offsetof(UnionRaceUIInterface_GetRedStarRings, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_GetRedStarRings::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_GetRedStarRings, ReturnValue) == 0x000008, "Member 'UnionRaceUIInterface_GetRedStarRings::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.GetReturnDashButtonObject
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIInterface_GetReturnDashButtonObject final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_GetReturnDashButtonObject) == 0x000008, "Wrong alignment on UnionRaceUIInterface_GetReturnDashButtonObject");
static_assert(sizeof(UnionRaceUIInterface_GetReturnDashButtonObject) == 0x000010, "Wrong size on UnionRaceUIInterface_GetReturnDashButtonObject");
static_assert(offsetof(UnionRaceUIInterface_GetReturnDashButtonObject, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_GetReturnDashButtonObject::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_GetReturnDashButtonObject, ReturnValue) == 0x000008, "Member 'UnionRaceUIInterface_GetReturnDashButtonObject::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.GetStartDashButtonObject
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIInterface_GetStartDashButtonObject final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_GetStartDashButtonObject) == 0x000008, "Wrong alignment on UnionRaceUIInterface_GetStartDashButtonObject");
static_assert(sizeof(UnionRaceUIInterface_GetStartDashButtonObject) == 0x000010, "Wrong size on UnionRaceUIInterface_GetStartDashButtonObject");
static_assert(offsetof(UnionRaceUIInterface_GetStartDashButtonObject, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_GetStartDashButtonObject::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_GetStartDashButtonObject, ReturnValue) == 0x000008, "Member 'UnionRaceUIInterface_GetStartDashButtonObject::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.GetWarningBeltVisible
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_GetWarningBeltVisible final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_GetWarningBeltVisible) == 0x000004, "Wrong alignment on UnionRaceUIInterface_GetWarningBeltVisible");
static_assert(sizeof(UnionRaceUIInterface_GetWarningBeltVisible) == 0x000008, "Wrong size on UnionRaceUIInterface_GetWarningBeltVisible");
static_assert(offsetof(UnionRaceUIInterface_GetWarningBeltVisible, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_GetWarningBeltVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_GetWarningBeltVisible, ReturnValue) == 0x000004, "Member 'UnionRaceUIInterface_GetWarningBeltVisible::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.LockOnManualAimingUI
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_LockOnManualAimingUI final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLockOn;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_LockOnManualAimingUI) == 0x000004, "Wrong alignment on UnionRaceUIInterface_LockOnManualAimingUI");
static_assert(sizeof(UnionRaceUIInterface_LockOnManualAimingUI) == 0x000008, "Wrong size on UnionRaceUIInterface_LockOnManualAimingUI");
static_assert(offsetof(UnionRaceUIInterface_LockOnManualAimingUI, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_LockOnManualAimingUI::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_LockOnManualAimingUI, bIsLockOn) == 0x000004, "Member 'UnionRaceUIInterface_LockOnManualAimingUI::bIsLockOn' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.NotifyItemCountDownBlink
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_NotifyItemCountDownBlink final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_NotifyItemCountDownBlink) == 0x000004, "Wrong alignment on UnionRaceUIInterface_NotifyItemCountDownBlink");
static_assert(sizeof(UnionRaceUIInterface_NotifyItemCountDownBlink) == 0x000008, "Wrong size on UnionRaceUIInterface_NotifyItemCountDownBlink");
static_assert(offsetof(UnionRaceUIInterface_NotifyItemCountDownBlink, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_NotifyItemCountDownBlink::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_NotifyItemCountDownBlink, ItemInfoType) == 0x000004, "Member 'UnionRaceUIInterface_NotifyItemCountDownBlink::ItemInfoType' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.OpenSerifWindow
// 0x0020 (0x0020 - 0x0000)
struct UnionRaceUIInterface_OpenSerifWindow final
{
public:
	int32                                         ScreenIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionWindow                          WindowId;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextId;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         DriverId;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_OpenSerifWindow) == 0x000008, "Wrong alignment on UnionRaceUIInterface_OpenSerifWindow");
static_assert(sizeof(UnionRaceUIInterface_OpenSerifWindow) == 0x000020, "Wrong size on UnionRaceUIInterface_OpenSerifWindow");
static_assert(offsetof(UnionRaceUIInterface_OpenSerifWindow, ScreenIndex) == 0x000000, "Member 'UnionRaceUIInterface_OpenSerifWindow::ScreenIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_OpenSerifWindow, WindowId) == 0x000004, "Member 'UnionRaceUIInterface_OpenSerifWindow::WindowId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_OpenSerifWindow, TextId) == 0x000008, "Member 'UnionRaceUIInterface_OpenSerifWindow::TextId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_OpenSerifWindow, DriverId) == 0x000018, "Member 'UnionRaceUIInterface_OpenSerifWindow::DriverId' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.OpenSerifWindowEx
// 0x00A8 (0x00A8 - 0x0000)
struct UnionRaceUIInterface_OpenSerifWindowEx final
{
public:
	int32                                         ScreenIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRacerReactionVoice                    SerifUIData;                                       // 0x0008(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_OpenSerifWindowEx) == 0x000008, "Wrong alignment on UnionRaceUIInterface_OpenSerifWindowEx");
static_assert(sizeof(UnionRaceUIInterface_OpenSerifWindowEx) == 0x0000A8, "Wrong size on UnionRaceUIInterface_OpenSerifWindowEx");
static_assert(offsetof(UnionRaceUIInterface_OpenSerifWindowEx, ScreenIndex) == 0x000000, "Member 'UnionRaceUIInterface_OpenSerifWindowEx::ScreenIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_OpenSerifWindowEx, SerifUIData) == 0x000008, "Member 'UnionRaceUIInterface_OpenSerifWindowEx::SerifUIData' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.PlayFestaIndividualChargeEffect
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_PlayFestaIndividualChargeEffect final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RacerIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_PlayFestaIndividualChargeEffect) == 0x000004, "Wrong alignment on UnionRaceUIInterface_PlayFestaIndividualChargeEffect");
static_assert(sizeof(UnionRaceUIInterface_PlayFestaIndividualChargeEffect) == 0x000008, "Wrong size on UnionRaceUIInterface_PlayFestaIndividualChargeEffect");
static_assert(offsetof(UnionRaceUIInterface_PlayFestaIndividualChargeEffect, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_PlayFestaIndividualChargeEffect::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_PlayFestaIndividualChargeEffect, RacerIndex) == 0x000004, "Member 'UnionRaceUIInterface_PlayFestaIndividualChargeEffect::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.RaceActionTutorialSuccess
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_RaceActionTutorialSuccess final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialAction                               tutorialAction;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_RaceActionTutorialSuccess) == 0x000004, "Wrong alignment on UnionRaceUIInterface_RaceActionTutorialSuccess");
static_assert(sizeof(UnionRaceUIInterface_RaceActionTutorialSuccess) == 0x000008, "Wrong size on UnionRaceUIInterface_RaceActionTutorialSuccess");
static_assert(offsetof(UnionRaceUIInterface_RaceActionTutorialSuccess, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_RaceActionTutorialSuccess::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_RaceActionTutorialSuccess, tutorialAction) == 0x000004, "Member 'UnionRaceUIInterface_RaceActionTutorialSuccess::tutorialAction' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.RemoveAttackInfoWidget
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_RemoveAttackInfoWidget final
{
public:
	class UObject*                                InAttackItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_RemoveAttackInfoWidget) == 0x000008, "Wrong alignment on UnionRaceUIInterface_RemoveAttackInfoWidget");
static_assert(sizeof(UnionRaceUIInterface_RemoveAttackInfoWidget) == 0x000008, "Wrong size on UnionRaceUIInterface_RemoveAttackInfoWidget");
static_assert(offsetof(UnionRaceUIInterface_RemoveAttackInfoWidget, InAttackItem) == 0x000000, "Member 'UnionRaceUIInterface_RemoveAttackInfoWidget::InAttackItem' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.RemoveCourseMapActor
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_RemoveCourseMapActor final
{
public:
	class AActor*                                 InAttackItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_RemoveCourseMapActor) == 0x000008, "Wrong alignment on UnionRaceUIInterface_RemoveCourseMapActor");
static_assert(sizeof(UnionRaceUIInterface_RemoveCourseMapActor) == 0x000008, "Wrong size on UnionRaceUIInterface_RemoveCourseMapActor");
static_assert(offsetof(UnionRaceUIInterface_RemoveCourseMapActor, InAttackItem) == 0x000000, "Member 'UnionRaceUIInterface_RemoveCourseMapActor::InAttackItem' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetAfterHomingAimTargetedUIVisible
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetAfterHomingAimTargetedUIVisible final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetAfterHomingAimTargetedUIVisible) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetAfterHomingAimTargetedUIVisible");
static_assert(sizeof(UnionRaceUIInterface_SetAfterHomingAimTargetedUIVisible) == 0x000008, "Wrong size on UnionRaceUIInterface_SetAfterHomingAimTargetedUIVisible");
static_assert(offsetof(UnionRaceUIInterface_SetAfterHomingAimTargetedUIVisible, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetAfterHomingAimTargetedUIVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetAfterHomingAimTargetedUIVisible, bVisible) == 0x000004, "Member 'UnionRaceUIInterface_SetAfterHomingAimTargetedUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetAfterHomingAimUIVisible
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetAfterHomingAimUIVisible final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetAfterHomingAimUIVisible) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetAfterHomingAimUIVisible");
static_assert(sizeof(UnionRaceUIInterface_SetAfterHomingAimUIVisible) == 0x000008, "Wrong size on UnionRaceUIInterface_SetAfterHomingAimUIVisible");
static_assert(offsetof(UnionRaceUIInterface_SetAfterHomingAimUIVisible, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetAfterHomingAimUIVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetAfterHomingAimUIVisible, bVisible) == 0x000004, "Member 'UnionRaceUIInterface_SetAfterHomingAimUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetAttackInfoPosition
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUIInterface_SetAttackInfoPosition final
{
public:
	class URaceUISubApproachWarning*              InAttackWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosRate;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerControllerIndex;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetAttackInfoPosition) == 0x000008, "Wrong alignment on UnionRaceUIInterface_SetAttackInfoPosition");
static_assert(sizeof(UnionRaceUIInterface_SetAttackInfoPosition) == 0x000018, "Wrong size on UnionRaceUIInterface_SetAttackInfoPosition");
static_assert(offsetof(UnionRaceUIInterface_SetAttackInfoPosition, InAttackWidget) == 0x000000, "Member 'UnionRaceUIInterface_SetAttackInfoPosition::InAttackWidget' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetAttackInfoPosition, PosRate) == 0x000008, "Member 'UnionRaceUIInterface_SetAttackInfoPosition::PosRate' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetAttackInfoPosition, Distance) == 0x00000C, "Member 'UnionRaceUIInterface_SetAttackInfoPosition::Distance' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetAttackInfoPosition, PlayerControllerIndex) == 0x000010, "Member 'UnionRaceUIInterface_SetAttackInfoPosition::PlayerControllerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetBeforeHomingAimTargetedUIVisible
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetBeforeHomingAimTargetedUIVisible final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetBeforeHomingAimTargetedUIVisible) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetBeforeHomingAimTargetedUIVisible");
static_assert(sizeof(UnionRaceUIInterface_SetBeforeHomingAimTargetedUIVisible) == 0x000008, "Wrong size on UnionRaceUIInterface_SetBeforeHomingAimTargetedUIVisible");
static_assert(offsetof(UnionRaceUIInterface_SetBeforeHomingAimTargetedUIVisible, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetBeforeHomingAimTargetedUIVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetBeforeHomingAimTargetedUIVisible, bVisible) == 0x000004, "Member 'UnionRaceUIInterface_SetBeforeHomingAimTargetedUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetBeforeHomingAimUIVisible
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetBeforeHomingAimUIVisible final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetBeforeHomingAimUIVisible) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetBeforeHomingAimUIVisible");
static_assert(sizeof(UnionRaceUIInterface_SetBeforeHomingAimUIVisible) == 0x000008, "Wrong size on UnionRaceUIInterface_SetBeforeHomingAimUIVisible");
static_assert(offsetof(UnionRaceUIInterface_SetBeforeHomingAimUIVisible, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetBeforeHomingAimUIVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetBeforeHomingAimUIVisible, bVisible) == 0x000004, "Member 'UnionRaceUIInterface_SetBeforeHomingAimUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetCourseSetting
// 0x0048 (0x0048 - 0x0000)
struct UnionRaceUIInterface_SetCourseSetting final
{
public:
	TSoftObjectPtr<class UObject>                 CourseTexture;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrthoRate;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetCourseSetting) == 0x000008, "Wrong alignment on UnionRaceUIInterface_SetCourseSetting");
static_assert(sizeof(UnionRaceUIInterface_SetCourseSetting) == 0x000048, "Wrong size on UnionRaceUIInterface_SetCourseSetting");
static_assert(offsetof(UnionRaceUIInterface_SetCourseSetting, CourseTexture) == 0x000000, "Member 'UnionRaceUIInterface_SetCourseSetting::CourseTexture' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetCourseSetting, OrthoRate) == 0x000028, "Member 'UnionRaceUIInterface_SetCourseSetting::OrthoRate' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetCourseSetting, Angle) == 0x00002C, "Member 'UnionRaceUIInterface_SetCourseSetting::Angle' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetCourseSetting, Offset) == 0x000030, "Member 'UnionRaceUIInterface_SetCourseSetting::Offset' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetEnableRedStarRing
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIInterface_SetEnableRedStarRing final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetEnableRedStarRing) == 0x000001, "Wrong alignment on UnionRaceUIInterface_SetEnableRedStarRing");
static_assert(sizeof(UnionRaceUIInterface_SetEnableRedStarRing) == 0x000001, "Wrong size on UnionRaceUIInterface_SetEnableRedStarRing");
static_assert(offsetof(UnionRaceUIInterface_SetEnableRedStarRing, bEnable) == 0x000000, "Member 'UnionRaceUIInterface_SetEnableRedStarRing::bEnable' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetGadgetIconActive
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetGadgetIconActive final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGadgetId                                     gadget;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetGadgetIconActive) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetGadgetIconActive");
static_assert(sizeof(UnionRaceUIInterface_SetGadgetIconActive) == 0x000008, "Wrong size on UnionRaceUIInterface_SetGadgetIconActive");
static_assert(offsetof(UnionRaceUIInterface_SetGadgetIconActive, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetGadgetIconActive::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetGadgetIconActive, gadget) == 0x000004, "Member 'UnionRaceUIInterface_SetGadgetIconActive::gadget' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetGadgetIconActive, bActive) == 0x000005, "Member 'UnionRaceUIInterface_SetGadgetIconActive::bActive' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetGroupRingNum
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetGroupRingNum final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetGroupRingNum) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetGroupRingNum");
static_assert(sizeof(UnionRaceUIInterface_SetGroupRingNum) == 0x000008, "Wrong size on UnionRaceUIInterface_SetGroupRingNum");
static_assert(offsetof(UnionRaceUIInterface_SetGroupRingNum, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetGroupRingNum::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetGroupRingNum, Num) == 0x000004, "Member 'UnionRaceUIInterface_SetGroupRingNum::Num' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetIrregular
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetIrregular final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetIrregular) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetIrregular");
static_assert(sizeof(UnionRaceUIInterface_SetIrregular) == 0x000008, "Wrong size on UnionRaceUIInterface_SetIrregular");
static_assert(offsetof(UnionRaceUIInterface_SetIrregular, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetIrregular::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetIrregular, EventId) == 0x000004, "Member 'UnionRaceUIInterface_SetIrregular::EventId' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetIrregularInfiniteItem
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetIrregularInfiniteItem final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetIrregularInfiniteItem) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetIrregularInfiniteItem");
static_assert(sizeof(UnionRaceUIInterface_SetIrregularInfiniteItem) == 0x000008, "Wrong size on UnionRaceUIInterface_SetIrregularInfiniteItem");
static_assert(offsetof(UnionRaceUIInterface_SetIrregularInfiniteItem, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetIrregularInfiniteItem::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetIrregularInfiniteItem, ItemInfoType) == 0x000004, "Member 'UnionRaceUIInterface_SetIrregularInfiniteItem::ItemInfoType' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetIrregularInfiniteItem, bVisible) == 0x000005, "Member 'UnionRaceUIInterface_SetIrregularInfiniteItem::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetItemId
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIInterface_SetItemId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InItemId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetItemId) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetItemId");
static_assert(sizeof(UnionRaceUIInterface_SetItemId) == 0x00000C, "Wrong size on UnionRaceUIInterface_SetItemId");
static_assert(offsetof(UnionRaceUIInterface_SetItemId, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetItemId::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetItemId, ItemInfoType) == 0x000004, "Member 'UnionRaceUIInterface_SetItemId::ItemInfoType' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetItemId, InItemId) == 0x000008, "Member 'UnionRaceUIInterface_SetItemId::InItemId' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetItemLifeTimeRate
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIInterface_SetItemLifeTimeRate final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NewRate;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetItemLifeTimeRate) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetItemLifeTimeRate");
static_assert(sizeof(UnionRaceUIInterface_SetItemLifeTimeRate) == 0x00000C, "Wrong size on UnionRaceUIInterface_SetItemLifeTimeRate");
static_assert(offsetof(UnionRaceUIInterface_SetItemLifeTimeRate, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetItemLifeTimeRate::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetItemLifeTimeRate, ItemInfoType) == 0x000004, "Member 'UnionRaceUIInterface_SetItemLifeTimeRate::ItemInfoType' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetItemLifeTimeRate, NewRate) == 0x000008, "Member 'UnionRaceUIInterface_SetItemLifeTimeRate::NewRate' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetItemPanelActive
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetItemPanelActive final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetItemPanelActive) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetItemPanelActive");
static_assert(sizeof(UnionRaceUIInterface_SetItemPanelActive) == 0x000008, "Wrong size on UnionRaceUIInterface_SetItemPanelActive");
static_assert(offsetof(UnionRaceUIInterface_SetItemPanelActive, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetItemPanelActive::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetItemPanelActive, bActive) == 0x000004, "Member 'UnionRaceUIInterface_SetItemPanelActive::bActive' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetItemPanelVisible
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetItemPanelVisible final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetItemPanelVisible) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetItemPanelVisible");
static_assert(sizeof(UnionRaceUIInterface_SetItemPanelVisible) == 0x000008, "Wrong size on UnionRaceUIInterface_SetItemPanelVisible");
static_assert(offsetof(UnionRaceUIInterface_SetItemPanelVisible, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetItemPanelVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetItemPanelVisible, bVisible) == 0x000004, "Member 'UnionRaceUIInterface_SetItemPanelVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetItemRemainCount
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIInterface_SetItemRemainCount final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainCount;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCount;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetItemRemainCount) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetItemRemainCount");
static_assert(sizeof(UnionRaceUIInterface_SetItemRemainCount) == 0x000010, "Wrong size on UnionRaceUIInterface_SetItemRemainCount");
static_assert(offsetof(UnionRaceUIInterface_SetItemRemainCount, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetItemRemainCount::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetItemRemainCount, ItemInfoType) == 0x000004, "Member 'UnionRaceUIInterface_SetItemRemainCount::ItemInfoType' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetItemRemainCount, RemainCount) == 0x000008, "Member 'UnionRaceUIInterface_SetItemRemainCount::RemainCount' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetItemRemainCount, MaxCount) == 0x00000C, "Member 'UnionRaceUIInterface_SetItemRemainCount::MaxCount' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetManualAimingUIVisible
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIInterface_SetManualAimingUIVisible final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsScaleKeepInHoming;                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetManualAimingUIVisible) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetManualAimingUIVisible");
static_assert(sizeof(UnionRaceUIInterface_SetManualAimingUIVisible) == 0x000010, "Wrong size on UnionRaceUIInterface_SetManualAimingUIVisible");
static_assert(offsetof(UnionRaceUIInterface_SetManualAimingUIVisible, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetManualAimingUIVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetManualAimingUIVisible, bVisible) == 0x000004, "Member 'UnionRaceUIInterface_SetManualAimingUIVisible::bVisible' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetManualAimingUIVisible, Scale) == 0x000008, "Member 'UnionRaceUIInterface_SetManualAimingUIVisible::Scale' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetManualAimingUIVisible, IsScaleKeepInHoming) == 0x00000C, "Member 'UnionRaceUIInterface_SetManualAimingUIVisible::IsScaleKeepInHoming' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetMinimapIconItem
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetMinimapIconItem final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       InItemId;                                          // 0x0004(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetMinimapIconItem) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetMinimapIconItem");
static_assert(sizeof(UnionRaceUIInterface_SetMinimapIconItem) == 0x000008, "Wrong size on UnionRaceUIInterface_SetMinimapIconItem");
static_assert(offsetof(UnionRaceUIInterface_SetMinimapIconItem, RacerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetMinimapIconItem::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetMinimapIconItem, InItemId) == 0x000004, "Member 'UnionRaceUIInterface_SetMinimapIconItem::InItemId' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetMinimapIconType
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetMinimapIconType final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMinimapIconType                              InMinimapIconType;                                 // 0x0004(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetMinimapIconType) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetMinimapIconType");
static_assert(sizeof(UnionRaceUIInterface_SetMinimapIconType) == 0x000008, "Wrong size on UnionRaceUIInterface_SetMinimapIconType");
static_assert(offsetof(UnionRaceUIInterface_SetMinimapIconType, RacerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetMinimapIconType::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetMinimapIconType, InMinimapIconType) == 0x000004, "Member 'UnionRaceUIInterface_SetMinimapIconType::InMinimapIconType' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetPauseFlag
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIInterface_SetPauseFlag final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetPauseFlag) == 0x000001, "Wrong alignment on UnionRaceUIInterface_SetPauseFlag");
static_assert(sizeof(UnionRaceUIInterface_SetPauseFlag) == 0x000001, "Wrong size on UnionRaceUIInterface_SetPauseFlag");
static_assert(offsetof(UnionRaceUIInterface_SetPauseFlag, bPause) == 0x000000, "Member 'UnionRaceUIInterface_SetPauseFlag::bPause' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_SetPlayerCount final
{
public:
	int32                                         PlayerCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetPlayerCount) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetPlayerCount");
static_assert(sizeof(UnionRaceUIInterface_SetPlayerCount) == 0x000004, "Wrong size on UnionRaceUIInterface_SetPlayerCount");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerCount, PlayerCount) == 0x000000, "Member 'UnionRaceUIInterface_SetPlayerCount::PlayerCount' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetPlayerName
// 0x0030 (0x0030 - 0x0000)
struct UnionRaceUIInterface_SetPlayerName final
{
public:
	int32                                         ScreenIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerControllerIndex;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name_0;                                            // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsView;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetPlayerName) == 0x000008, "Wrong alignment on UnionRaceUIInterface_SetPlayerName");
static_assert(sizeof(UnionRaceUIInterface_SetPlayerName) == 0x000030, "Wrong size on UnionRaceUIInterface_SetPlayerName");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerName, ScreenIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetPlayerName::ScreenIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerName, PlayerControllerIndex) == 0x000004, "Member 'UnionRaceUIInterface_SetPlayerName::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerName, ScreenPosition) == 0x000008, "Member 'UnionRaceUIInterface_SetPlayerName::ScreenPosition' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerName, Name_0) == 0x000018, "Member 'UnionRaceUIInterface_SetPlayerName::Name_0' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerName, bIsView) == 0x000028, "Member 'UnionRaceUIInterface_SetPlayerName::bIsView' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetPlayerNamePosition
// 0x0020 (0x0020 - 0x0000)
struct UnionRaceUIInterface_SetPlayerNamePosition final
{
public:
	int32                                         ScreenIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerControllerIndex;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsView;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetPlayerNamePosition) == 0x000008, "Wrong alignment on UnionRaceUIInterface_SetPlayerNamePosition");
static_assert(sizeof(UnionRaceUIInterface_SetPlayerNamePosition) == 0x000020, "Wrong size on UnionRaceUIInterface_SetPlayerNamePosition");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerNamePosition, ScreenIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetPlayerNamePosition::ScreenIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerNamePosition, PlayerControllerIndex) == 0x000004, "Member 'UnionRaceUIInterface_SetPlayerNamePosition::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerNamePosition, ScreenPosition) == 0x000008, "Member 'UnionRaceUIInterface_SetPlayerNamePosition::ScreenPosition' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerNamePosition, bIsView) == 0x000018, "Member 'UnionRaceUIInterface_SetPlayerNamePosition::bIsView' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetPlayerPlatformIcon
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIInterface_SetPlayerPlatformIcon final
{
public:
	int32                                         ScreenIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerControllerIndex;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrossplayPlatform                            InPlatform;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetPlayerPlatformIcon) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetPlayerPlatformIcon");
static_assert(sizeof(UnionRaceUIInterface_SetPlayerPlatformIcon) == 0x00000C, "Wrong size on UnionRaceUIInterface_SetPlayerPlatformIcon");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerPlatformIcon, ScreenIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetPlayerPlatformIcon::ScreenIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerPlatformIcon, PlayerControllerIndex) == 0x000004, "Member 'UnionRaceUIInterface_SetPlayerPlatformIcon::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetPlayerPlatformIcon, InPlatform) == 0x000008, "Member 'UnionRaceUIInterface_SetPlayerPlatformIcon::InPlatform' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetQuickDriftCharge
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetQuickDriftCharge final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetQuickDriftCharge) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetQuickDriftCharge");
static_assert(sizeof(UnionRaceUIInterface_SetQuickDriftCharge) == 0x000008, "Wrong size on UnionRaceUIInterface_SetQuickDriftCharge");
static_assert(offsetof(UnionRaceUIInterface_SetQuickDriftCharge, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetQuickDriftCharge::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetQuickDriftCharge, Enable) == 0x000004, "Member 'UnionRaceUIInterface_SetQuickDriftCharge::Enable' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetRaceMinimapRef
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetRaceMinimapRef final
{
public:
	class UUnionRaceMinimap*                      InRaceMinimap;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetRaceMinimapRef) == 0x000008, "Wrong alignment on UnionRaceUIInterface_SetRaceMinimapRef");
static_assert(sizeof(UnionRaceUIInterface_SetRaceMinimapRef) == 0x000008, "Wrong size on UnionRaceUIInterface_SetRaceMinimapRef");
static_assert(offsetof(UnionRaceUIInterface_SetRaceMinimapRef, InRaceMinimap) == 0x000000, "Member 'UnionRaceUIInterface_SetRaceMinimapRef::InRaceMinimap' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetRacerApproachInfoPosition
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIInterface_SetRacerApproachInfoPosition final
{
public:
	float                                         PosRate;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerControllerIndex;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RankAfterIndex;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     InDriverId;                                        // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetRacerApproachInfoPosition) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetRacerApproachInfoPosition");
static_assert(sizeof(UnionRaceUIInterface_SetRacerApproachInfoPosition) == 0x000010, "Wrong size on UnionRaceUIInterface_SetRacerApproachInfoPosition");
static_assert(offsetof(UnionRaceUIInterface_SetRacerApproachInfoPosition, PosRate) == 0x000000, "Member 'UnionRaceUIInterface_SetRacerApproachInfoPosition::PosRate' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRacerApproachInfoPosition, Distance) == 0x000004, "Member 'UnionRaceUIInterface_SetRacerApproachInfoPosition::Distance' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRacerApproachInfoPosition, PlayerControllerIndex) == 0x000008, "Member 'UnionRaceUIInterface_SetRacerApproachInfoPosition::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRacerApproachInfoPosition, RankAfterIndex) == 0x00000C, "Member 'UnionRaceUIInterface_SetRacerApproachInfoPosition::RankAfterIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRacerApproachInfoPosition, InDriverId) == 0x00000D, "Member 'UnionRaceUIInterface_SetRacerApproachInfoPosition::InDriverId' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetRacerApproachInfoVisible
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetRacerApproachInfoVisible final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RankAfterIndex;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetRacerApproachInfoVisible) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetRacerApproachInfoVisible");
static_assert(sizeof(UnionRaceUIInterface_SetRacerApproachInfoVisible) == 0x000008, "Wrong size on UnionRaceUIInterface_SetRacerApproachInfoVisible");
static_assert(offsetof(UnionRaceUIInterface_SetRacerApproachInfoVisible, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetRacerApproachInfoVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRacerApproachInfoVisible, RankAfterIndex) == 0x000004, "Member 'UnionRaceUIInterface_SetRacerApproachInfoVisible::RankAfterIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRacerApproachInfoVisible, bVisible) == 0x000005, "Member 'UnionRaceUIInterface_SetRacerApproachInfoVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetRacerIndex
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIInterface_SetRacerIndex final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRacerIndex;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocalPlayer;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetRacerIndex) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetRacerIndex");
static_assert(sizeof(UnionRaceUIInterface_SetRacerIndex) == 0x00000C, "Wrong size on UnionRaceUIInterface_SetRacerIndex");
static_assert(offsetof(UnionRaceUIInterface_SetRacerIndex, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetRacerIndex::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRacerIndex, InRacerIndex) == 0x000004, "Member 'UnionRaceUIInterface_SetRacerIndex::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRacerIndex, IsLocalPlayer) == 0x000008, "Member 'UnionRaceUIInterface_SetRacerIndex::IsLocalPlayer' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetRankIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetRankIndex final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRankIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetRankIndex) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetRankIndex");
static_assert(sizeof(UnionRaceUIInterface_SetRankIndex) == 0x000008, "Wrong size on UnionRaceUIInterface_SetRankIndex");
static_assert(offsetof(UnionRaceUIInterface_SetRankIndex, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetRankIndex::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRankIndex, InRankIndex) == 0x000004, "Member 'UnionRaceUIInterface_SetRankIndex::InRankIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetRedStarRingDisp
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetRedStarRingDisp final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RingIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetRedStarRingDisp) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetRedStarRingDisp");
static_assert(sizeof(UnionRaceUIInterface_SetRedStarRingDisp) == 0x000008, "Wrong size on UnionRaceUIInterface_SetRedStarRingDisp");
static_assert(offsetof(UnionRaceUIInterface_SetRedStarRingDisp, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetRedStarRingDisp::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRedStarRingDisp, RingIndex) == 0x000004, "Member 'UnionRaceUIInterface_SetRedStarRingDisp::RingIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetReturnDashSetting
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIInterface_SetReturnDashSetting final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pivot;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetReturnDashSetting) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetReturnDashSetting");
static_assert(sizeof(UnionRaceUIInterface_SetReturnDashSetting) == 0x00000C, "Wrong size on UnionRaceUIInterface_SetReturnDashSetting");
static_assert(offsetof(UnionRaceUIInterface_SetReturnDashSetting, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetReturnDashSetting::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetReturnDashSetting, Pivot) == 0x000004, "Member 'UnionRaceUIInterface_SetReturnDashSetting::Pivot' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetReturnDashSetting, Range) == 0x000008, "Member 'UnionRaceUIInterface_SetReturnDashSetting::Range' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetReturnDashUIGaugeRate
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetReturnDashUIGaugeRate final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeRate;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetReturnDashUIGaugeRate) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetReturnDashUIGaugeRate");
static_assert(sizeof(UnionRaceUIInterface_SetReturnDashUIGaugeRate) == 0x000008, "Wrong size on UnionRaceUIInterface_SetReturnDashUIGaugeRate");
static_assert(offsetof(UnionRaceUIInterface_SetReturnDashUIGaugeRate, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetReturnDashUIGaugeRate::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetReturnDashUIGaugeRate, GaugeRate) == 0x000004, "Member 'UnionRaceUIInterface_SetReturnDashUIGaugeRate::GaugeRate' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetReturnDashUIVisible
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetReturnDashUIVisible final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetReturnDashUIVisible) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetReturnDashUIVisible");
static_assert(sizeof(UnionRaceUIInterface_SetReturnDashUIVisible) == 0x000008, "Wrong size on UnionRaceUIInterface_SetReturnDashUIVisible");
static_assert(offsetof(UnionRaceUIInterface_SetReturnDashUIVisible, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetReturnDashUIVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetReturnDashUIVisible, bVisible) == 0x000004, "Member 'UnionRaceUIInterface_SetReturnDashUIVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetReturnDashUIVisibleWithAnim
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetReturnDashUIVisibleWithAnim final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetReturnDashUIVisibleWithAnim) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetReturnDashUIVisibleWithAnim");
static_assert(sizeof(UnionRaceUIInterface_SetReturnDashUIVisibleWithAnim) == 0x000008, "Wrong size on UnionRaceUIInterface_SetReturnDashUIVisibleWithAnim");
static_assert(offsetof(UnionRaceUIInterface_SetReturnDashUIVisibleWithAnim, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetReturnDashUIVisibleWithAnim::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetReturnDashUIVisibleWithAnim, bVisible) == 0x000004, "Member 'UnionRaceUIInterface_SetReturnDashUIVisibleWithAnim::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetRingBoostGaugeBoostPercent
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetRingBoostGaugeBoostPercent final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetRingBoostGaugeBoostPercent) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetRingBoostGaugeBoostPercent");
static_assert(sizeof(UnionRaceUIInterface_SetRingBoostGaugeBoostPercent) == 0x000008, "Wrong size on UnionRaceUIInterface_SetRingBoostGaugeBoostPercent");
static_assert(offsetof(UnionRaceUIInterface_SetRingBoostGaugeBoostPercent, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetRingBoostGaugeBoostPercent::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRingBoostGaugeBoostPercent, Percent) == 0x000004, "Member 'UnionRaceUIInterface_SetRingBoostGaugeBoostPercent::Percent' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetRingBoostGaugeNormalPercent
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetRingBoostGaugeNormalPercent final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetRingBoostGaugeNormalPercent) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetRingBoostGaugeNormalPercent");
static_assert(sizeof(UnionRaceUIInterface_SetRingBoostGaugeNormalPercent) == 0x000008, "Wrong size on UnionRaceUIInterface_SetRingBoostGaugeNormalPercent");
static_assert(offsetof(UnionRaceUIInterface_SetRingBoostGaugeNormalPercent, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetRingBoostGaugeNormalPercent::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRingBoostGaugeNormalPercent, Percent) == 0x000004, "Member 'UnionRaceUIInterface_SetRingBoostGaugeNormalPercent::Percent' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetRingBoostGaugeNormalPercentDirect
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetRingBoostGaugeNormalPercentDirect final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetRingBoostGaugeNormalPercentDirect) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetRingBoostGaugeNormalPercentDirect");
static_assert(sizeof(UnionRaceUIInterface_SetRingBoostGaugeNormalPercentDirect) == 0x000008, "Wrong size on UnionRaceUIInterface_SetRingBoostGaugeNormalPercentDirect");
static_assert(offsetof(UnionRaceUIInterface_SetRingBoostGaugeNormalPercentDirect, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetRingBoostGaugeNormalPercentDirect::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRingBoostGaugeNormalPercentDirect, Percent) == 0x000004, "Member 'UnionRaceUIInterface_SetRingBoostGaugeNormalPercentDirect::Percent' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetRingGroupColor
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIInterface_SetRingGroupColor final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGroup;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocalMulti;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetRingGroupColor) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetRingGroupColor");
static_assert(sizeof(UnionRaceUIInterface_SetRingGroupColor) == 0x00000C, "Wrong size on UnionRaceUIInterface_SetRingGroupColor");
static_assert(offsetof(UnionRaceUIInterface_SetRingGroupColor, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetRingGroupColor::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRingGroupColor, GroupIndex) == 0x000004, "Member 'UnionRaceUIInterface_SetRingGroupColor::GroupIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRingGroupColor, IsGroup) == 0x000008, "Member 'UnionRaceUIInterface_SetRingGroupColor::IsGroup' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRingGroupColor, IsLocalMulti) == 0x000009, "Member 'UnionRaceUIInterface_SetRingGroupColor::IsLocalMulti' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetRingNum
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetRingNum final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRingNum;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetRingNum) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetRingNum");
static_assert(sizeof(UnionRaceUIInterface_SetRingNum) == 0x000008, "Wrong size on UnionRaceUIInterface_SetRingNum");
static_assert(offsetof(UnionRaceUIInterface_SetRingNum, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetRingNum::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRingNum, InRingNum) == 0x000004, "Member 'UnionRaceUIInterface_SetRingNum::InRingNum' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetRivalStartUI
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIInterface_SetRivalStartUI final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRacerStatusObject*                RivalStatusObj;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetRivalStartUI) == 0x000008, "Wrong alignment on UnionRaceUIInterface_SetRivalStartUI");
static_assert(sizeof(UnionRaceUIInterface_SetRivalStartUI) == 0x000010, "Wrong size on UnionRaceUIInterface_SetRivalStartUI");
static_assert(offsetof(UnionRaceUIInterface_SetRivalStartUI, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetRivalStartUI::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetRivalStartUI, RivalStatusObj) == 0x000008, "Member 'UnionRaceUIInterface_SetRivalStartUI::RivalStatusObj' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetStartDashParamSetting
// 0x0034 (0x0034 - 0x0000)
struct UnionRaceUIInterface_SetStartDashParamSetting final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUnionRaceStartDashParam               InStartDashParam;                                  // 0x0004(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetStartDashParamSetting) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetStartDashParamSetting");
static_assert(sizeof(UnionRaceUIInterface_SetStartDashParamSetting) == 0x000034, "Wrong size on UnionRaceUIInterface_SetStartDashParamSetting");
static_assert(offsetof(UnionRaceUIInterface_SetStartDashParamSetting, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetStartDashParamSetting::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetStartDashParamSetting, InStartDashParam) == 0x000004, "Member 'UnionRaceUIInterface_SetStartDashParamSetting::InStartDashParam' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetStartUICountText
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIInterface_SetStartUICountText final
{
public:
	int32                                         StartCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetStartUICountText) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetStartUICountText");
static_assert(sizeof(UnionRaceUIInterface_SetStartUICountText) == 0x000004, "Wrong size on UnionRaceUIInterface_SetStartUICountText");
static_assert(offsetof(UnionRaceUIInterface_SetStartUICountText, StartCount) == 0x000000, "Member 'UnionRaceUIInterface_SetStartUICountText::StartCount' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetStartUIGaugeRate
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetStartUIGaugeRate final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeRate;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetStartUIGaugeRate) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetStartUIGaugeRate");
static_assert(sizeof(UnionRaceUIInterface_SetStartUIGaugeRate) == 0x000008, "Wrong size on UnionRaceUIInterface_SetStartUIGaugeRate");
static_assert(offsetof(UnionRaceUIInterface_SetStartUIGaugeRate, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetStartUIGaugeRate::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetStartUIGaugeRate, GaugeRate) == 0x000004, "Member 'UnionRaceUIInterface_SetStartUIGaugeRate::GaugeRate' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetTimeInfo
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIInterface_SetTimeInfo final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMinutes;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSecondes;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMilliSec;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetTimeInfo) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetTimeInfo");
static_assert(sizeof(UnionRaceUIInterface_SetTimeInfo) == 0x000010, "Wrong size on UnionRaceUIInterface_SetTimeInfo");
static_assert(offsetof(UnionRaceUIInterface_SetTimeInfo, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetTimeInfo::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetTimeInfo, InMinutes) == 0x000004, "Member 'UnionRaceUIInterface_SetTimeInfo::InMinutes' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetTimeInfo, InSecondes) == 0x000008, "Member 'UnionRaceUIInterface_SetTimeInfo::InSecondes' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetTimeInfo, InMilliSec) == 0x00000C, "Member 'UnionRaceUIInterface_SetTimeInfo::InMilliSec' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetTimeTrialLapInfo
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIInterface_SetTimeTrialLapInfo final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLapCountNow;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLapCountMax;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetTimeTrialLapInfo) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetTimeTrialLapInfo");
static_assert(sizeof(UnionRaceUIInterface_SetTimeTrialLapInfo) == 0x00000C, "Wrong size on UnionRaceUIInterface_SetTimeTrialLapInfo");
static_assert(offsetof(UnionRaceUIInterface_SetTimeTrialLapInfo, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetTimeTrialLapInfo::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetTimeTrialLapInfo, InLapCountNow) == 0x000004, "Member 'UnionRaceUIInterface_SetTimeTrialLapInfo::InLapCountNow' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetTimeTrialLapInfo, InLapCountMax) == 0x000008, "Member 'UnionRaceUIInterface_SetTimeTrialLapInfo::InLapCountMax' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SettingToHUDAttackInfoWidget
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIInterface_SettingToHUDAttackInfoWidget final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class URaceUISubApproachWarning*        InAttackWidget;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SettingToHUDAttackInfoWidget) == 0x000008, "Wrong alignment on UnionRaceUIInterface_SettingToHUDAttackInfoWidget");
static_assert(sizeof(UnionRaceUIInterface_SettingToHUDAttackInfoWidget) == 0x000010, "Wrong size on UnionRaceUIInterface_SettingToHUDAttackInfoWidget");
static_assert(offsetof(UnionRaceUIInterface_SettingToHUDAttackInfoWidget, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SettingToHUDAttackInfoWidget::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SettingToHUDAttackInfoWidget, InAttackWidget) == 0x000008, "Member 'UnionRaceUIInterface_SettingToHUDAttackInfoWidget::InAttackWidget' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetVisibilityCharge
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetVisibilityCharge final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetVisibilityCharge) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetVisibilityCharge");
static_assert(sizeof(UnionRaceUIInterface_SetVisibilityCharge) == 0x000008, "Wrong size on UnionRaceUIInterface_SetVisibilityCharge");
static_assert(offsetof(UnionRaceUIInterface_SetVisibilityCharge, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetVisibilityCharge::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetVisibilityCharge, Enable) == 0x000004, "Member 'UnionRaceUIInterface_SetVisibilityCharge::Enable' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetVisibilityRank
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetVisibilityRank final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetVisibilityRank) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetVisibilityRank");
static_assert(sizeof(UnionRaceUIInterface_SetVisibilityRank) == 0x000008, "Wrong size on UnionRaceUIInterface_SetVisibilityRank");
static_assert(offsetof(UnionRaceUIInterface_SetVisibilityRank, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetVisibilityRank::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetVisibilityRank, Enable) == 0x000004, "Member 'UnionRaceUIInterface_SetVisibilityRank::Enable' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetWarningBeltVisible
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetWarningBeltVisible final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetWarningBeltVisible) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetWarningBeltVisible");
static_assert(sizeof(UnionRaceUIInterface_SetWarningBeltVisible) == 0x000008, "Wrong size on UnionRaceUIInterface_SetWarningBeltVisible");
static_assert(offsetof(UnionRaceUIInterface_SetWarningBeltVisible, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetWarningBeltVisible::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetWarningBeltVisible, bVisible) == 0x000004, "Member 'UnionRaceUIInterface_SetWarningBeltVisible::bVisible' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetWarningItemId
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetWarningItemId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_SetWarningItemId) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetWarningItemId");
static_assert(sizeof(UnionRaceUIInterface_SetWarningItemId) == 0x000008, "Wrong size on UnionRaceUIInterface_SetWarningItemId");
static_assert(offsetof(UnionRaceUIInterface_SetWarningItemId, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetWarningItemId::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetWarningItemId, InItemId) == 0x000004, "Member 'UnionRaceUIInterface_SetWarningItemId::InItemId' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.SetYellowDrillShortTimeSoundEnable
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_SetYellowDrillShortTimeSoundEnable final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_SetYellowDrillShortTimeSoundEnable) == 0x000004, "Wrong alignment on UnionRaceUIInterface_SetYellowDrillShortTimeSoundEnable");
static_assert(sizeof(UnionRaceUIInterface_SetYellowDrillShortTimeSoundEnable) == 0x000008, "Wrong size on UnionRaceUIInterface_SetYellowDrillShortTimeSoundEnable");
static_assert(offsetof(UnionRaceUIInterface_SetYellowDrillShortTimeSoundEnable, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_SetYellowDrillShortTimeSoundEnable::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_SetYellowDrillShortTimeSoundEnable, bEnable) == 0x000004, "Member 'UnionRaceUIInterface_SetYellowDrillShortTimeSoundEnable::bEnable' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.StopLotteryItem
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_StopLotteryItem final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIInterface_StopLotteryItem) == 0x000004, "Wrong alignment on UnionRaceUIInterface_StopLotteryItem");
static_assert(sizeof(UnionRaceUIInterface_StopLotteryItem) == 0x000008, "Wrong size on UnionRaceUIInterface_StopLotteryItem");
static_assert(offsetof(UnionRaceUIInterface_StopLotteryItem, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_StopLotteryItem::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_StopLotteryItem, ItemInfoType) == 0x000004, "Member 'UnionRaceUIInterface_StopLotteryItem::ItemInfoType' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.UpdateByHoldItemInfo
// 0x0088 (0x0088 - 0x0000)
struct UnionRaceUIInterface_UpdateByHoldItemInfo final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHoldItemInfo                          InItemInfo;                                        // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_UpdateByHoldItemInfo) == 0x000008, "Wrong alignment on UnionRaceUIInterface_UpdateByHoldItemInfo");
static_assert(sizeof(UnionRaceUIInterface_UpdateByHoldItemInfo) == 0x000088, "Wrong size on UnionRaceUIInterface_UpdateByHoldItemInfo");
static_assert(offsetof(UnionRaceUIInterface_UpdateByHoldItemInfo, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_UpdateByHoldItemInfo::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_UpdateByHoldItemInfo, InItemInfo) == 0x000008, "Member 'UnionRaceUIInterface_UpdateByHoldItemInfo::InItemInfo' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.UpdateByRacers
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_UpdateByRacers final
{
public:
	class UUnionRacers*                           InRacers;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_UpdateByRacers) == 0x000008, "Wrong alignment on UnionRaceUIInterface_UpdateByRacers");
static_assert(sizeof(UnionRaceUIInterface_UpdateByRacers) == 0x000008, "Wrong size on UnionRaceUIInterface_UpdateByRacers");
static_assert(offsetof(UnionRaceUIInterface_UpdateByRacers, InRacers) == 0x000000, "Member 'UnionRaceUIInterface_UpdateByRacers::InRacers' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.UpdateCharge
// 0x000C (0x000C - 0x0000)
struct UnionRaceUIInterface_UpdateCharge final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_UpdateCharge) == 0x000004, "Wrong alignment on UnionRaceUIInterface_UpdateCharge");
static_assert(sizeof(UnionRaceUIInterface_UpdateCharge) == 0x00000C, "Wrong size on UnionRaceUIInterface_UpdateCharge");
static_assert(offsetof(UnionRaceUIInterface_UpdateCharge, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_UpdateCharge::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_UpdateCharge, Level) == 0x000004, "Member 'UnionRaceUIInterface_UpdateCharge::Level' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_UpdateCharge, Rate) == 0x000008, "Member 'UnionRaceUIInterface_UpdateCharge::Rate' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.UpdateHomingAimLocation
// 0x0020 (0x0020 - 0x0000)
struct UnionRaceUIInterface_UpdateHomingAimLocation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AimLocation;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_UpdateHomingAimLocation) == 0x000008, "Wrong alignment on UnionRaceUIInterface_UpdateHomingAimLocation");
static_assert(sizeof(UnionRaceUIInterface_UpdateHomingAimLocation) == 0x000020, "Wrong size on UnionRaceUIInterface_UpdateHomingAimLocation");
static_assert(offsetof(UnionRaceUIInterface_UpdateHomingAimLocation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_UpdateHomingAimLocation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_UpdateHomingAimLocation, AimLocation) == 0x000008, "Member 'UnionRaceUIInterface_UpdateHomingAimLocation::AimLocation' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.UpdateHomingAimTargetedLocation
// 0x0020 (0x0020 - 0x0000)
struct UnionRaceUIInterface_UpdateHomingAimTargetedLocation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_UpdateHomingAimTargetedLocation) == 0x000008, "Wrong alignment on UnionRaceUIInterface_UpdateHomingAimTargetedLocation");
static_assert(sizeof(UnionRaceUIInterface_UpdateHomingAimTargetedLocation) == 0x000020, "Wrong size on UnionRaceUIInterface_UpdateHomingAimTargetedLocation");
static_assert(offsetof(UnionRaceUIInterface_UpdateHomingAimTargetedLocation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_UpdateHomingAimTargetedLocation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_UpdateHomingAimTargetedLocation, PlayerLocation) == 0x000008, "Member 'UnionRaceUIInterface_UpdateHomingAimTargetedLocation::PlayerLocation' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.UpdateManualAimingUILocation
// 0x00A0 (0x00A0 - 0x0000)
struct UnionRaceUIInterface_UpdateManualAimingUILocation final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatrix                                Rotation;                                          // 0x0020(0x0080)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_UpdateManualAimingUILocation) == 0x000010, "Wrong alignment on UnionRaceUIInterface_UpdateManualAimingUILocation");
static_assert(sizeof(UnionRaceUIInterface_UpdateManualAimingUILocation) == 0x0000A0, "Wrong size on UnionRaceUIInterface_UpdateManualAimingUILocation");
static_assert(offsetof(UnionRaceUIInterface_UpdateManualAimingUILocation, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_UpdateManualAimingUILocation::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_UpdateManualAimingUILocation, Location) == 0x000008, "Member 'UnionRaceUIInterface_UpdateManualAimingUILocation::Location' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_UpdateManualAimingUILocation, Rotation) == 0x000020, "Member 'UnionRaceUIInterface_UpdateManualAimingUILocation::Rotation' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.UpdateMinimapIconByRacers
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_UpdateMinimapIconByRacers final
{
public:
	class UUnionRacers*                           InRacers;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_UpdateMinimapIconByRacers) == 0x000008, "Wrong alignment on UnionRaceUIInterface_UpdateMinimapIconByRacers");
static_assert(sizeof(UnionRaceUIInterface_UpdateMinimapIconByRacers) == 0x000008, "Wrong size on UnionRaceUIInterface_UpdateMinimapIconByRacers");
static_assert(offsetof(UnionRaceUIInterface_UpdateMinimapIconByRacers, InRacers) == 0x000000, "Member 'UnionRaceUIInterface_UpdateMinimapIconByRacers::InRacers' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.UpdateRank
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_UpdateRank final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeAmount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_UpdateRank) == 0x000004, "Wrong alignment on UnionRaceUIInterface_UpdateRank");
static_assert(sizeof(UnionRaceUIInterface_UpdateRank) == 0x000008, "Wrong size on UnionRaceUIInterface_UpdateRank");
static_assert(offsetof(UnionRaceUIInterface_UpdateRank, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_UpdateRank::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_UpdateRank, ChangeAmount) == 0x000004, "Member 'UnionRaceUIInterface_UpdateRank::ChangeAmount' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.UpdateSpeed
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_UpdateSpeed final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpeedKMPH;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_UpdateSpeed) == 0x000004, "Wrong alignment on UnionRaceUIInterface_UpdateSpeed");
static_assert(sizeof(UnionRaceUIInterface_UpdateSpeed) == 0x000008, "Wrong size on UnionRaceUIInterface_UpdateSpeed");
static_assert(offsetof(UnionRaceUIInterface_UpdateSpeed, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_UpdateSpeed::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_UpdateSpeed, SpeedKMPH) == 0x000004, "Member 'UnionRaceUIInterface_UpdateSpeed::SpeedKMPH' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.UpgradeItemMain
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_UpgradeItemMain final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_UpgradeItemMain) == 0x000004, "Wrong alignment on UnionRaceUIInterface_UpgradeItemMain");
static_assert(sizeof(UnionRaceUIInterface_UpgradeItemMain) == 0x000008, "Wrong size on UnionRaceUIInterface_UpgradeItemMain");
static_assert(offsetof(UnionRaceUIInterface_UpgradeItemMain, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_UpgradeItemMain::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_UpgradeItemMain, InItemId) == 0x000004, "Member 'UnionRaceUIInterface_UpgradeItemMain::InItemId' has a wrong offset!");

// Function UnionRun.UnionRaceUIInterface.UseItem
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIInterface_UseItem final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIInterface_UseItem) == 0x000004, "Wrong alignment on UnionRaceUIInterface_UseItem");
static_assert(sizeof(UnionRaceUIInterface_UseItem) == 0x000008, "Wrong size on UnionRaceUIInterface_UseItem");
static_assert(offsetof(UnionRaceUIInterface_UseItem, PlayerControllerIndex) == 0x000000, "Member 'UnionRaceUIInterface_UseItem::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIInterface_UseItem, InItemId) == 0x000004, "Member 'UnionRaceUIInterface_UseItem::InItemId' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.ApplyWaitingAddPoint
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultPanel_ApplyWaitingAddPoint final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_ApplyWaitingAddPoint) == 0x000004, "Wrong alignment on UnionRaceUIResultPanel_ApplyWaitingAddPoint");
static_assert(sizeof(UnionRaceUIResultPanel_ApplyWaitingAddPoint) == 0x000004, "Wrong size on UnionRaceUIResultPanel_ApplyWaitingAddPoint");
static_assert(offsetof(UnionRaceUIResultPanel_ApplyWaitingAddPoint, RacerIndex) == 0x000000, "Member 'UnionRaceUIResultPanel_ApplyWaitingAddPoint::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.GetRankIndexLine
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIResultPanel_GetRankIndexLine final
{
public:
	TArray<class UUnionRaceUIResultLine*>         ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_GetRankIndexLine) == 0x000008, "Wrong alignment on UnionRaceUIResultPanel_GetRankIndexLine");
static_assert(sizeof(UnionRaceUIResultPanel_GetRankIndexLine) == 0x000010, "Wrong size on UnionRaceUIResultPanel_GetRankIndexLine");
static_assert(offsetof(UnionRaceUIResultPanel_GetRankIndexLine, ReturnValue) == 0x000000, "Member 'UnionRaceUIResultPanel_GetRankIndexLine::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.InitializeBonusPoints
// 0x0070 (0x0070 - 0x0000)
struct UnionRaceUIResultPanel_InitializeBonusPoints final
{
public:
	struct FMCEventData                           EventData;                                         // 0x0000(0x0060)(Parm, NativeAccessSpecifierPublic)
	struct FMCEventBonusData                      ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_InitializeBonusPoints) == 0x000008, "Wrong alignment on UnionRaceUIResultPanel_InitializeBonusPoints");
static_assert(sizeof(UnionRaceUIResultPanel_InitializeBonusPoints) == 0x000070, "Wrong size on UnionRaceUIResultPanel_InitializeBonusPoints");
static_assert(offsetof(UnionRaceUIResultPanel_InitializeBonusPoints, EventData) == 0x000000, "Member 'UnionRaceUIResultPanel_InitializeBonusPoints::EventData' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultPanel_InitializeBonusPoints, ReturnValue) == 0x000060, "Member 'UnionRaceUIResultPanel_InitializeBonusPoints::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.InitializeRaceResult
// 0x0002 (0x0002 - 0x0000)
struct UnionRaceUIResultPanel_InitializeRaceResult final
{
public:
	bool                                          bIsRankMatch;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRaceCountOne;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_InitializeRaceResult) == 0x000001, "Wrong alignment on UnionRaceUIResultPanel_InitializeRaceResult");
static_assert(sizeof(UnionRaceUIResultPanel_InitializeRaceResult) == 0x000002, "Wrong size on UnionRaceUIResultPanel_InitializeRaceResult");
static_assert(offsetof(UnionRaceUIResultPanel_InitializeRaceResult, bIsRankMatch) == 0x000000, "Member 'UnionRaceUIResultPanel_InitializeRaceResult::bIsRankMatch' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultPanel_InitializeRaceResult, bIsRaceCountOne) == 0x000001, "Member 'UnionRaceUIResultPanel_InitializeRaceResult::bIsRaceCountOne' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.InitializeResultData
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIResultPanel_InitializeResultData final
{
public:
	bool                                          bIsTotalDisp;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_InitializeResultData) == 0x000001, "Wrong alignment on UnionRaceUIResultPanel_InitializeResultData");
static_assert(sizeof(UnionRaceUIResultPanel_InitializeResultData) == 0x000001, "Wrong size on UnionRaceUIResultPanel_InitializeResultData");
static_assert(offsetof(UnionRaceUIResultPanel_InitializeResultData, bIsTotalDisp) == 0x000000, "Member 'UnionRaceUIResultPanel_InitializeResultData::bIsTotalDisp' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.PlayGetAnimation
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultPanel_PlayGetAnimation final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_PlayGetAnimation) == 0x000004, "Wrong alignment on UnionRaceUIResultPanel_PlayGetAnimation");
static_assert(sizeof(UnionRaceUIResultPanel_PlayGetAnimation) == 0x000004, "Wrong size on UnionRaceUIResultPanel_PlayGetAnimation");
static_assert(offsetof(UnionRaceUIResultPanel_PlayGetAnimation, RacerIndex) == 0x000000, "Member 'UnionRaceUIResultPanel_PlayGetAnimation::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.PlayPlayerEffect
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultPanel_PlayPlayerEffect final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_PlayPlayerEffect) == 0x000004, "Wrong alignment on UnionRaceUIResultPanel_PlayPlayerEffect");
static_assert(sizeof(UnionRaceUIResultPanel_PlayPlayerEffect) == 0x000004, "Wrong size on UnionRaceUIResultPanel_PlayPlayerEffect");
static_assert(offsetof(UnionRaceUIResultPanel_PlayPlayerEffect, RacerIndex) == 0x000000, "Member 'UnionRaceUIResultPanel_PlayPlayerEffect::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.PlayTotalPoint_Loop_After2nd
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultPanel_PlayTotalPoint_Loop_After2nd final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_PlayTotalPoint_Loop_After2nd) == 0x000004, "Wrong alignment on UnionRaceUIResultPanel_PlayTotalPoint_Loop_After2nd");
static_assert(sizeof(UnionRaceUIResultPanel_PlayTotalPoint_Loop_After2nd) == 0x000004, "Wrong size on UnionRaceUIResultPanel_PlayTotalPoint_Loop_After2nd");
static_assert(offsetof(UnionRaceUIResultPanel_PlayTotalPoint_Loop_After2nd, RacerIndex) == 0x000000, "Member 'UnionRaceUIResultPanel_PlayTotalPoint_Loop_After2nd::RacerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.SetArrowIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIResultPanel_SetArrowIndex final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrowIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_SetArrowIndex) == 0x000004, "Wrong alignment on UnionRaceUIResultPanel_SetArrowIndex");
static_assert(sizeof(UnionRaceUIResultPanel_SetArrowIndex) == 0x000008, "Wrong size on UnionRaceUIResultPanel_SetArrowIndex");
static_assert(offsetof(UnionRaceUIResultPanel_SetArrowIndex, RacerIndex) == 0x000000, "Member 'UnionRaceUIResultPanel_SetArrowIndex::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultPanel_SetArrowIndex, ArrowIndex) == 0x000004, "Member 'UnionRaceUIResultPanel_SetArrowIndex::ArrowIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.SetCharacterId
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIResultPanel_SetCharacterId final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     CharaId;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIResultPanel_SetCharacterId) == 0x000004, "Wrong alignment on UnionRaceUIResultPanel_SetCharacterId");
static_assert(sizeof(UnionRaceUIResultPanel_SetCharacterId) == 0x000008, "Wrong size on UnionRaceUIResultPanel_SetCharacterId");
static_assert(offsetof(UnionRaceUIResultPanel_SetCharacterId, RacerIndex) == 0x000000, "Member 'UnionRaceUIResultPanel_SetCharacterId::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultPanel_SetCharacterId, CharaId) == 0x000004, "Member 'UnionRaceUIResultPanel_SetCharacterId::CharaId' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.SetEarnPointValue
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIResultPanel_SetEarnPointValue final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EarnPoint;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_SetEarnPointValue) == 0x000004, "Wrong alignment on UnionRaceUIResultPanel_SetEarnPointValue");
static_assert(sizeof(UnionRaceUIResultPanel_SetEarnPointValue) == 0x000008, "Wrong size on UnionRaceUIResultPanel_SetEarnPointValue");
static_assert(offsetof(UnionRaceUIResultPanel_SetEarnPointValue, RacerIndex) == 0x000000, "Member 'UnionRaceUIResultPanel_SetEarnPointValue::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultPanel_SetEarnPointValue, EarnPoint) == 0x000004, "Member 'UnionRaceUIResultPanel_SetEarnPointValue::EarnPoint' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.SetPlayerIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIResultPanel_SetPlayerIndex final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_SetPlayerIndex) == 0x000004, "Wrong alignment on UnionRaceUIResultPanel_SetPlayerIndex");
static_assert(sizeof(UnionRaceUIResultPanel_SetPlayerIndex) == 0x000008, "Wrong size on UnionRaceUIResultPanel_SetPlayerIndex");
static_assert(offsetof(UnionRaceUIResultPanel_SetPlayerIndex, RacerIndex) == 0x000000, "Member 'UnionRaceUIResultPanel_SetPlayerIndex::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultPanel_SetPlayerIndex, PlayerIndex) == 0x000004, "Member 'UnionRaceUIResultPanel_SetPlayerIndex::PlayerIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.SetRacerCount
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultPanel_SetRacerCount final
{
public:
	int32                                         RacerCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_SetRacerCount) == 0x000004, "Wrong alignment on UnionRaceUIResultPanel_SetRacerCount");
static_assert(sizeof(UnionRaceUIResultPanel_SetRacerCount) == 0x000004, "Wrong size on UnionRaceUIResultPanel_SetRacerCount");
static_assert(offsetof(UnionRaceUIResultPanel_SetRacerCount, RacerCount) == 0x000000, "Member 'UnionRaceUIResultPanel_SetRacerCount::RacerCount' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.SetRacerName
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUIResultPanel_SetRacerName final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RacerName;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_SetRacerName) == 0x000008, "Wrong alignment on UnionRaceUIResultPanel_SetRacerName");
static_assert(sizeof(UnionRaceUIResultPanel_SetRacerName) == 0x000018, "Wrong size on UnionRaceUIResultPanel_SetRacerName");
static_assert(offsetof(UnionRaceUIResultPanel_SetRacerName, RacerIndex) == 0x000000, "Member 'UnionRaceUIResultPanel_SetRacerName::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultPanel_SetRacerName, RacerName) == 0x000008, "Member 'UnionRaceUIResultPanel_SetRacerName::RacerName' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.SetRacersRef
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIResultPanel_SetRacersRef final
{
public:
	class UUnionRacers*                           InRacers;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_SetRacersRef) == 0x000008, "Wrong alignment on UnionRaceUIResultPanel_SetRacersRef");
static_assert(sizeof(UnionRaceUIResultPanel_SetRacersRef) == 0x000008, "Wrong size on UnionRaceUIResultPanel_SetRacersRef");
static_assert(offsetof(UnionRaceUIResultPanel_SetRacersRef, InRacers) == 0x000000, "Member 'UnionRaceUIResultPanel_SetRacersRef::InRacers' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.SetRankIndex
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIResultPanel_SetRankIndex final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaceRankIndex;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_SetRankIndex) == 0x000004, "Wrong alignment on UnionRaceUIResultPanel_SetRankIndex");
static_assert(sizeof(UnionRaceUIResultPanel_SetRankIndex) == 0x000008, "Wrong size on UnionRaceUIResultPanel_SetRankIndex");
static_assert(offsetof(UnionRaceUIResultPanel_SetRankIndex, RacerIndex) == 0x000000, "Member 'UnionRaceUIResultPanel_SetRankIndex::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultPanel_SetRankIndex, RaceRankIndex) == 0x000004, "Member 'UnionRaceUIResultPanel_SetRankIndex::RaceRankIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultPanel.UpdateTotalRank
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIResultPanel_UpdateTotalRank final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultPanel_UpdateTotalRank) == 0x000001, "Wrong alignment on UnionRaceUIResultPanel_UpdateTotalRank");
static_assert(sizeof(UnionRaceUIResultPanel_UpdateTotalRank) == 0x000001, "Wrong size on UnionRaceUIResultPanel_UpdateTotalRank");
static_assert(offsetof(UnionRaceUIResultPanel_UpdateTotalRank, ReturnValue) == 0x000000, "Member 'UnionRaceUIResultPanel_UpdateTotalRank::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultRedStarRing.InitRing
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIResultRedStarRing_InitRing final
{
public:
	bool                                          bPickUp;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultRedStarRing_InitRing) == 0x000001, "Wrong alignment on UnionRaceUIResultRedStarRing_InitRing");
static_assert(sizeof(UnionRaceUIResultRedStarRing_InitRing) == 0x000001, "Wrong size on UnionRaceUIResultRedStarRing_InitRing");
static_assert(offsetof(UnionRaceUIResultRedStarRing_InitRing, bPickUp) == 0x000000, "Member 'UnionRaceUIResultRedStarRing_InitRing::bPickUp' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultRedStarRings.GetOtherResultRedStarRingAcquisitionType
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUIResultRedStarRings_GetOtherResultRedStarRingAcquisitionType final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERedStarRingAcquisitionType>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultRedStarRings_GetOtherResultRedStarRingAcquisitionType) == 0x000008, "Wrong alignment on UnionRaceUIResultRedStarRings_GetOtherResultRedStarRingAcquisitionType");
static_assert(sizeof(UnionRaceUIResultRedStarRings_GetOtherResultRedStarRingAcquisitionType) == 0x000018, "Wrong size on UnionRaceUIResultRedStarRings_GetOtherResultRedStarRingAcquisitionType");
static_assert(offsetof(UnionRaceUIResultRedStarRings_GetOtherResultRedStarRingAcquisitionType, Index_0) == 0x000000, "Member 'UnionRaceUIResultRedStarRings_GetOtherResultRedStarRingAcquisitionType::Index_0' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultRedStarRings_GetOtherResultRedStarRingAcquisitionType, ReturnValue) == 0x000008, "Member 'UnionRaceUIResultRedStarRings_GetOtherResultRedStarRingAcquisitionType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultRedStarRings.GetRaceRedStarRingAcquisitionType
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIResultRedStarRings_GetRaceRedStarRingAcquisitionType final
{
public:
	TArray<ERedStarRingAcquisitionType>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultRedStarRings_GetRaceRedStarRingAcquisitionType) == 0x000008, "Wrong alignment on UnionRaceUIResultRedStarRings_GetRaceRedStarRingAcquisitionType");
static_assert(sizeof(UnionRaceUIResultRedStarRings_GetRaceRedStarRingAcquisitionType) == 0x000010, "Wrong size on UnionRaceUIResultRedStarRings_GetRaceRedStarRingAcquisitionType");
static_assert(offsetof(UnionRaceUIResultRedStarRings_GetRaceRedStarRingAcquisitionType, ReturnValue) == 0x000000, "Member 'UnionRaceUIResultRedStarRings_GetRaceRedStarRingAcquisitionType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultRedStarRings.GetResultRedStarRingAcquisitionType
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUIResultRedStarRings_GetResultRedStarRingAcquisitionType final
{
public:
	EStageId                                      InStageId;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERedStarRingAcquisitionType>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultRedStarRings_GetResultRedStarRingAcquisitionType) == 0x000008, "Wrong alignment on UnionRaceUIResultRedStarRings_GetResultRedStarRingAcquisitionType");
static_assert(sizeof(UnionRaceUIResultRedStarRings_GetResultRedStarRingAcquisitionType) == 0x000018, "Wrong size on UnionRaceUIResultRedStarRings_GetResultRedStarRingAcquisitionType");
static_assert(offsetof(UnionRaceUIResultRedStarRings_GetResultRedStarRingAcquisitionType, InStageId) == 0x000000, "Member 'UnionRaceUIResultRedStarRings_GetResultRedStarRingAcquisitionType::InStageId' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultRedStarRings_GetResultRedStarRingAcquisitionType, ReturnValue) == 0x000008, "Member 'UnionRaceUIResultRedStarRings_GetResultRedStarRingAcquisitionType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultRedStarRings.GetResultRedStarRingAllGetType
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUIResultRedStarRings_GetResultRedStarRingAllGetType final
{
public:
	TArray<ERedStarRingAcquisitionType>           AcquisitionType;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERedstarRingAllGetType                        ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIResultRedStarRings_GetResultRedStarRingAllGetType) == 0x000008, "Wrong alignment on UnionRaceUIResultRedStarRings_GetResultRedStarRingAllGetType");
static_assert(sizeof(UnionRaceUIResultRedStarRings_GetResultRedStarRingAllGetType) == 0x000018, "Wrong size on UnionRaceUIResultRedStarRings_GetResultRedStarRingAllGetType");
static_assert(offsetof(UnionRaceUIResultRedStarRings_GetResultRedStarRingAllGetType, AcquisitionType) == 0x000000, "Member 'UnionRaceUIResultRedStarRings_GetResultRedStarRingAllGetType::AcquisitionType' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultRedStarRings_GetResultRedStarRingAllGetType, PlayerIndex) == 0x000010, "Member 'UnionRaceUIResultRedStarRings_GetResultRedStarRingAllGetType::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultRedStarRings_GetResultRedStarRingAllGetType, ReturnValue) == 0x000014, "Member 'UnionRaceUIResultRedStarRings_GetResultRedStarRingAllGetType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultRedStarRings.InitRings
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIResultRedStarRings_InitRings final
{
public:
	TArray<bool>                                  Rings;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultRedStarRings_InitRings) == 0x000008, "Wrong alignment on UnionRaceUIResultRedStarRings_InitRings");
static_assert(sizeof(UnionRaceUIResultRedStarRings_InitRings) == 0x000010, "Wrong size on UnionRaceUIResultRedStarRings_InitRings");
static_assert(offsetof(UnionRaceUIResultRedStarRings_InitRings, Rings) == 0x000000, "Member 'UnionRaceUIResultRedStarRings_InitRings::Rings' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultRedStarRings.PickUpRing
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIResultRedStarRings_PickUpRing final
{
public:
	uint8                                         RingIndex;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultRedStarRings_PickUpRing) == 0x000001, "Wrong alignment on UnionRaceUIResultRedStarRings_PickUpRing");
static_assert(sizeof(UnionRaceUIResultRedStarRings_PickUpRing) == 0x000001, "Wrong size on UnionRaceUIResultRedStarRings_PickUpRing");
static_assert(offsetof(UnionRaceUIResultRedStarRings_PickUpRing, RingIndex) == 0x000000, "Member 'UnionRaceUIResultRedStarRings_PickUpRing::RingIndex' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultRedStarRings.SetRedStarRingsRef
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIResultRedStarRings_SetRedStarRingsRef final
{
public:
	TArray<class UUnionRaceUIResultRedStarRing*>  Rings;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultRedStarRings_SetRedStarRingsRef) == 0x000008, "Wrong alignment on UnionRaceUIResultRedStarRings_SetRedStarRingsRef");
static_assert(sizeof(UnionRaceUIResultRedStarRings_SetRedStarRingsRef) == 0x000010, "Wrong size on UnionRaceUIResultRedStarRings_SetRedStarRingsRef");
static_assert(offsetof(UnionRaceUIResultRedStarRings_SetRedStarRingsRef, Rings) == 0x000000, "Member 'UnionRaceUIResultRedStarRings_SetRedStarRingsRef::Rings' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultScene.GetGhostDiffLapTime
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUIResultScene_GetGhostDiffLapTime final
{
public:
	int32                                         LapNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutIsUpTime;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutIsSameTime;                                     // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultScene_GetGhostDiffLapTime) == 0x000008, "Wrong alignment on UnionRaceUIResultScene_GetGhostDiffLapTime");
static_assert(sizeof(UnionRaceUIResultScene_GetGhostDiffLapTime) == 0x000018, "Wrong size on UnionRaceUIResultScene_GetGhostDiffLapTime");
static_assert(offsetof(UnionRaceUIResultScene_GetGhostDiffLapTime, LapNo) == 0x000000, "Member 'UnionRaceUIResultScene_GetGhostDiffLapTime::LapNo' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultScene_GetGhostDiffLapTime, OutIsUpTime) == 0x000004, "Member 'UnionRaceUIResultScene_GetGhostDiffLapTime::OutIsUpTime' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultScene_GetGhostDiffLapTime, OutIsSameTime) == 0x000005, "Member 'UnionRaceUIResultScene_GetGhostDiffLapTime::OutIsSameTime' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultScene_GetGhostDiffLapTime, ReturnValue) == 0x000008, "Member 'UnionRaceUIResultScene_GetGhostDiffLapTime::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultScene.GetGhostDiffTotalLapTime
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUIResultScene_GetGhostDiffTotalLapTime final
{
public:
	bool                                          OutIsUpTime;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutIsSameTime;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultScene_GetGhostDiffTotalLapTime) == 0x000008, "Wrong alignment on UnionRaceUIResultScene_GetGhostDiffTotalLapTime");
static_assert(sizeof(UnionRaceUIResultScene_GetGhostDiffTotalLapTime) == 0x000018, "Wrong size on UnionRaceUIResultScene_GetGhostDiffTotalLapTime");
static_assert(offsetof(UnionRaceUIResultScene_GetGhostDiffTotalLapTime, OutIsUpTime) == 0x000000, "Member 'UnionRaceUIResultScene_GetGhostDiffTotalLapTime::OutIsUpTime' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultScene_GetGhostDiffTotalLapTime, OutIsSameTime) == 0x000001, "Member 'UnionRaceUIResultScene_GetGhostDiffTotalLapTime::OutIsSameTime' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultScene_GetGhostDiffTotalLapTime, ReturnValue) == 0x000008, "Member 'UnionRaceUIResultScene_GetGhostDiffTotalLapTime::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultScene.GetLapTime
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIResultScene_GetLapTime final
{
public:
	int32                                         LapNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultScene_GetLapTime) == 0x000004, "Wrong alignment on UnionRaceUIResultScene_GetLapTime");
static_assert(sizeof(UnionRaceUIResultScene_GetLapTime) == 0x000008, "Wrong size on UnionRaceUIResultScene_GetLapTime");
static_assert(offsetof(UnionRaceUIResultScene_GetLapTime, LapNo) == 0x000000, "Member 'UnionRaceUIResultScene_GetLapTime::LapNo' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultScene_GetLapTime, ReturnValue) == 0x000004, "Member 'UnionRaceUIResultScene_GetLapTime::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultScene.GetLapTimeText
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUIResultScene_GetLapTimeText final
{
public:
	int32                                         LapNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultScene_GetLapTimeText) == 0x000008, "Wrong alignment on UnionRaceUIResultScene_GetLapTimeText");
static_assert(sizeof(UnionRaceUIResultScene_GetLapTimeText) == 0x000018, "Wrong size on UnionRaceUIResultScene_GetLapTimeText");
static_assert(offsetof(UnionRaceUIResultScene_GetLapTimeText, LapNo) == 0x000000, "Member 'UnionRaceUIResultScene_GetLapTimeText::LapNo' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultScene_GetLapTimeText, ReturnValue) == 0x000008, "Member 'UnionRaceUIResultScene_GetLapTimeText::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultScene.GetResultLinesPanel
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIResultScene_GetResultLinesPanel final
{
public:
	class UUnionRaceUIResultPanel*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultScene_GetResultLinesPanel) == 0x000008, "Wrong alignment on UnionRaceUIResultScene_GetResultLinesPanel");
static_assert(sizeof(UnionRaceUIResultScene_GetResultLinesPanel) == 0x000008, "Wrong size on UnionRaceUIResultScene_GetResultLinesPanel");
static_assert(offsetof(UnionRaceUIResultScene_GetResultLinesPanel, ReturnValue) == 0x000000, "Member 'UnionRaceUIResultScene_GetResultLinesPanel::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultScene.GetTotalLapTime
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultScene_GetTotalLapTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultScene_GetTotalLapTime) == 0x000004, "Wrong alignment on UnionRaceUIResultScene_GetTotalLapTime");
static_assert(sizeof(UnionRaceUIResultScene_GetTotalLapTime) == 0x000004, "Wrong size on UnionRaceUIResultScene_GetTotalLapTime");
static_assert(offsetof(UnionRaceUIResultScene_GetTotalLapTime, ReturnValue) == 0x000000, "Member 'UnionRaceUIResultScene_GetTotalLapTime::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultScene.GetTotalLapTimeText
// 0x0010 (0x0010 - 0x0000)
struct UnionRaceUIResultScene_GetTotalLapTimeText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultScene_GetTotalLapTimeText) == 0x000008, "Wrong alignment on UnionRaceUIResultScene_GetTotalLapTimeText");
static_assert(sizeof(UnionRaceUIResultScene_GetTotalLapTimeText) == 0x000010, "Wrong size on UnionRaceUIResultScene_GetTotalLapTimeText");
static_assert(offsetof(UnionRaceUIResultScene_GetTotalLapTimeText, ReturnValue) == 0x000000, "Member 'UnionRaceUIResultScene_GetTotalLapTimeText::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultScene.IsViewDiffLapTime
// 0x0008 (0x0008 - 0x0000)
struct UnionRaceUIResultScene_IsViewDiffLapTime final
{
public:
	int32                                         LapNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIResultScene_IsViewDiffLapTime) == 0x000004, "Wrong alignment on UnionRaceUIResultScene_IsViewDiffLapTime");
static_assert(sizeof(UnionRaceUIResultScene_IsViewDiffLapTime) == 0x000008, "Wrong size on UnionRaceUIResultScene_IsViewDiffLapTime");
static_assert(offsetof(UnionRaceUIResultScene_IsViewDiffLapTime, LapNo) == 0x000000, "Member 'UnionRaceUIResultScene_IsViewDiffLapTime::LapNo' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultScene_IsViewDiffLapTime, ReturnValue) == 0x000004, "Member 'UnionRaceUIResultScene_IsViewDiffLapTime::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultScene.SetLinesPanelRacerCount
// 0x0004 (0x0004 - 0x0000)
struct UnionRaceUIResultScene_SetLinesPanelRacerCount final
{
public:
	int32                                         RacerCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultScene_SetLinesPanelRacerCount) == 0x000004, "Wrong alignment on UnionRaceUIResultScene_SetLinesPanelRacerCount");
static_assert(sizeof(UnionRaceUIResultScene_SetLinesPanelRacerCount) == 0x000004, "Wrong size on UnionRaceUIResultScene_SetLinesPanelRacerCount");
static_assert(offsetof(UnionRaceUIResultScene_SetLinesPanelRacerCount, RacerCount) == 0x000000, "Member 'UnionRaceUIResultScene_SetLinesPanelRacerCount::RacerCount' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultScene.IsEnableGhost
// 0x0001 (0x0001 - 0x0000)
struct UnionRaceUIResultScene_IsEnableGhost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRaceUIResultScene_IsEnableGhost) == 0x000001, "Wrong alignment on UnionRaceUIResultScene_IsEnableGhost");
static_assert(sizeof(UnionRaceUIResultScene_IsEnableGhost) == 0x000001, "Wrong size on UnionRaceUIResultScene_IsEnableGhost");
static_assert(offsetof(UnionRaceUIResultScene_IsEnableGhost, ReturnValue) == 0x000000, "Member 'UnionRaceUIResultScene_IsEnableGhost::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRaceUIResultUtils.GetResultParam
// 0x0018 (0x0018 - 0x0000)
struct UnionRaceUIResultUtils_GetResultParam final
{
public:
	class FString                                 InParamString;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRaceUIResultUtils_GetResultParam) == 0x000008, "Wrong alignment on UnionRaceUIResultUtils_GetResultParam");
static_assert(sizeof(UnionRaceUIResultUtils_GetResultParam) == 0x000018, "Wrong size on UnionRaceUIResultUtils_GetResultParam");
static_assert(offsetof(UnionRaceUIResultUtils_GetResultParam, InParamString) == 0x000000, "Member 'UnionRaceUIResultUtils_GetResultParam::InParamString' has a wrong offset!");
static_assert(offsetof(UnionRaceUIResultUtils_GetResultParam, ReturnValue) == 0x000010, "Member 'UnionRaceUIResultUtils_GetResultParam::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionReplayManager.OnLoadComplete
// 0x0001 (0x0001 - 0x0000)
struct UnionReplayManager_OnLoadComplete final
{
public:
	ESaveDataStatus                               Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionReplayManager_OnLoadComplete) == 0x000001, "Wrong alignment on UnionReplayManager_OnLoadComplete");
static_assert(sizeof(UnionReplayManager_OnLoadComplete) == 0x000001, "Wrong size on UnionReplayManager_OnLoadComplete");
static_assert(offsetof(UnionReplayManager_OnLoadComplete, Status) == 0x000000, "Member 'UnionReplayManager_OnLoadComplete::Status' has a wrong offset!");

// Function UnionRun.UnionReplayManager.OnSaveComplete
// 0x0001 (0x0001 - 0x0000)
struct UnionReplayManager_OnSaveComplete final
{
public:
	ESaveDataStatus                               Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionReplayManager_OnSaveComplete) == 0x000001, "Wrong alignment on UnionReplayManager_OnSaveComplete");
static_assert(sizeof(UnionReplayManager_OnSaveComplete) == 0x000001, "Wrong size on UnionReplayManager_OnSaveComplete");
static_assert(offsetof(UnionReplayManager_OnSaveComplete, Status) == 0x000000, "Member 'UnionReplayManager_OnSaveComplete::Status' has a wrong offset!");

// Function UnionRun.UnionRingInfoInterface.NoticeTakeRedStarRingEvent
// 0x0008 (0x0008 - 0x0000)
struct UnionRingInfoInterface_NoticeTakeRedStarRingEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RingIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRingInfoInterface_NoticeTakeRedStarRingEvent) == 0x000004, "Wrong alignment on UnionRingInfoInterface_NoticeTakeRedStarRingEvent");
static_assert(sizeof(UnionRingInfoInterface_NoticeTakeRedStarRingEvent) == 0x000008, "Wrong size on UnionRingInfoInterface_NoticeTakeRedStarRingEvent");
static_assert(offsetof(UnionRingInfoInterface_NoticeTakeRedStarRingEvent, RacerIndex) == 0x000000, "Member 'UnionRingInfoInterface_NoticeTakeRedStarRingEvent::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRingInfoInterface_NoticeTakeRedStarRingEvent, RingIndex) == 0x000004, "Member 'UnionRingInfoInterface_NoticeTakeRedStarRingEvent::RingIndex' has a wrong offset!");

// Function UnionRun.UnionRingInfoInterface.NoticeTakeRingEvent
// 0x000C (0x000C - 0x0000)
struct UnionRingInfoInterface_NoticeTakeRingEvent final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUnionTakeRingInfo                     Info;                                              // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRingInfoInterface_NoticeTakeRingEvent) == 0x000004, "Wrong alignment on UnionRingInfoInterface_NoticeTakeRingEvent");
static_assert(sizeof(UnionRingInfoInterface_NoticeTakeRingEvent) == 0x00000C, "Wrong size on UnionRingInfoInterface_NoticeTakeRingEvent");
static_assert(offsetof(UnionRingInfoInterface_NoticeTakeRingEvent, RacerIndex) == 0x000000, "Member 'UnionRingInfoInterface_NoticeTakeRingEvent::RacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRingInfoInterface_NoticeTakeRingEvent, Info) == 0x000004, "Member 'UnionRingInfoInterface_NoticeTakeRingEvent::Info' has a wrong offset!");

// Function UnionRun.UnionRunDebugBPFL.IsForcedCom
// 0x0008 (0x0008 - 0x0000)
struct UnionRunDebugBPFL_IsForcedCom final
{
public:
	int32                                         InRacerIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRunDebugBPFL_IsForcedCom) == 0x000004, "Wrong alignment on UnionRunDebugBPFL_IsForcedCom");
static_assert(sizeof(UnionRunDebugBPFL_IsForcedCom) == 0x000008, "Wrong size on UnionRunDebugBPFL_IsForcedCom");
static_assert(offsetof(UnionRunDebugBPFL_IsForcedCom, InRacerIndex) == 0x000000, "Member 'UnionRunDebugBPFL_IsForcedCom::InRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionRunDebugBPFL_IsForcedCom, ReturnValue) == 0x000004, "Member 'UnionRunDebugBPFL_IsForcedCom::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRunDebugBPFL.RegisterAttackItemDevOnly
// 0x0008 (0x0008 - 0x0000)
struct UnionRunDebugBPFL_RegisterAttackItemDevOnly final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRunDebugBPFL_RegisterAttackItemDevOnly) == 0x000008, "Wrong alignment on UnionRunDebugBPFL_RegisterAttackItemDevOnly");
static_assert(sizeof(UnionRunDebugBPFL_RegisterAttackItemDevOnly) == 0x000008, "Wrong size on UnionRunDebugBPFL_RegisterAttackItemDevOnly");
static_assert(offsetof(UnionRunDebugBPFL_RegisterAttackItemDevOnly, InObject) == 0x000000, "Member 'UnionRunDebugBPFL_RegisterAttackItemDevOnly::InObject' has a wrong offset!");

// Function UnionRun.UnionRunDebugBPFL.RemoveAttackItemDevOnly
// 0x0008 (0x0008 - 0x0000)
struct UnionRunDebugBPFL_RemoveAttackItemDevOnly final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRunDebugBPFL_RemoveAttackItemDevOnly) == 0x000008, "Wrong alignment on UnionRunDebugBPFL_RemoveAttackItemDevOnly");
static_assert(sizeof(UnionRunDebugBPFL_RemoveAttackItemDevOnly) == 0x000008, "Wrong size on UnionRunDebugBPFL_RemoveAttackItemDevOnly");
static_assert(offsetof(UnionRunDebugBPFL_RemoveAttackItemDevOnly, InObject) == 0x000000, "Member 'UnionRunDebugBPFL_RemoveAttackItemDevOnly::InObject' has a wrong offset!");

// Function UnionRun.UnionRunDebugPacketReplay.GetOnlineRaceReplayData
// 0x0010 (0x0010 - 0x0000)
struct UnionRunDebugPacketReplay_GetOnlineRaceReplayData final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRunDebugPacketReplay_GetOnlineRaceReplayData) == 0x000008, "Wrong alignment on UnionRunDebugPacketReplay_GetOnlineRaceReplayData");
static_assert(sizeof(UnionRunDebugPacketReplay_GetOnlineRaceReplayData) == 0x000010, "Wrong size on UnionRunDebugPacketReplay_GetOnlineRaceReplayData");
static_assert(offsetof(UnionRunDebugPacketReplay_GetOnlineRaceReplayData, Data) == 0x000000, "Member 'UnionRunDebugPacketReplay_GetOnlineRaceReplayData::Data' has a wrong offset!");

// Function UnionRun.UnionRunDebugPacketReplay.LoadOnlineRaceReplay
// 0x0268 (0x0268 - 0x0000)
struct UnionRunDebugPacketReplay_LoadOnlineRaceReplay final
{
public:
	struct FOnlineRaceReplay                      RaceReplayData;                                    // 0x0000(0x0260)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0260(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionRunDebugPacketReplay_LoadOnlineRaceReplay) == 0x000008, "Wrong alignment on UnionRunDebugPacketReplay_LoadOnlineRaceReplay");
static_assert(sizeof(UnionRunDebugPacketReplay_LoadOnlineRaceReplay) == 0x000268, "Wrong size on UnionRunDebugPacketReplay_LoadOnlineRaceReplay");
static_assert(offsetof(UnionRunDebugPacketReplay_LoadOnlineRaceReplay, RaceReplayData) == 0x000000, "Member 'UnionRunDebugPacketReplay_LoadOnlineRaceReplay::RaceReplayData' has a wrong offset!");
static_assert(offsetof(UnionRunDebugPacketReplay_LoadOnlineRaceReplay, ReturnValue) == 0x000260, "Member 'UnionRunDebugPacketReplay_LoadOnlineRaceReplay::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionRunDebugPacketReplay.SetOnlineRaceReplay
// 0x0260 (0x0260 - 0x0000)
struct UnionRunDebugPacketReplay_SetOnlineRaceReplay final
{
public:
	struct FOnlineRaceReplay                      RaceReplayData;                                    // 0x0000(0x0260)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionRunDebugPacketReplay_SetOnlineRaceReplay) == 0x000008, "Wrong alignment on UnionRunDebugPacketReplay_SetOnlineRaceReplay");
static_assert(sizeof(UnionRunDebugPacketReplay_SetOnlineRaceReplay) == 0x000260, "Wrong size on UnionRunDebugPacketReplay_SetOnlineRaceReplay");
static_assert(offsetof(UnionRunDebugPacketReplay_SetOnlineRaceReplay, RaceReplayData) == 0x000000, "Member 'UnionRunDebugPacketReplay_SetOnlineRaceReplay::RaceReplayData' has a wrong offset!");

// Function UnionRun.UnionSplineComponent.GetCurrentLocationAndRotation
// 0x0050 (0x0050 - 0x0000)
struct UnionSplineComponent_GetCurrentLocationAndRotation final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutLocation;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutDirection;                                      // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineComponent_GetCurrentLocationAndRotation) == 0x000008, "Wrong alignment on UnionSplineComponent_GetCurrentLocationAndRotation");
static_assert(sizeof(UnionSplineComponent_GetCurrentLocationAndRotation) == 0x000050, "Wrong size on UnionSplineComponent_GetCurrentLocationAndRotation");
static_assert(offsetof(UnionSplineComponent_GetCurrentLocationAndRotation, Length) == 0x000000, "Member 'UnionSplineComponent_GetCurrentLocationAndRotation::Length' has a wrong offset!");
static_assert(offsetof(UnionSplineComponent_GetCurrentLocationAndRotation, bLoop) == 0x000004, "Member 'UnionSplineComponent_GetCurrentLocationAndRotation::bLoop' has a wrong offset!");
static_assert(offsetof(UnionSplineComponent_GetCurrentLocationAndRotation, OutLocation) == 0x000008, "Member 'UnionSplineComponent_GetCurrentLocationAndRotation::OutLocation' has a wrong offset!");
static_assert(offsetof(UnionSplineComponent_GetCurrentLocationAndRotation, OutDirection) == 0x000020, "Member 'UnionSplineComponent_GetCurrentLocationAndRotation::OutDirection' has a wrong offset!");
static_assert(offsetof(UnionSplineComponent_GetCurrentLocationAndRotation, OutRotation) == 0x000038, "Member 'UnionSplineComponent_GetCurrentLocationAndRotation::OutRotation' has a wrong offset!");

// Function UnionRun.UnionSplineComponent.GetSplineParamByArrayIndex
// 0x00D0 (0x00D0 - 0x0000)
struct UnionSplineComponent_GetSplineParamByArrayIndex final
{
public:
	int32                                         ArrayIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSplinePointParam                      returnParam;                                       // 0x0008(0x00C0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionSplineComponent_GetSplineParamByArrayIndex) == 0x000008, "Wrong alignment on UnionSplineComponent_GetSplineParamByArrayIndex");
static_assert(sizeof(UnionSplineComponent_GetSplineParamByArrayIndex) == 0x0000D0, "Wrong size on UnionSplineComponent_GetSplineParamByArrayIndex");
static_assert(offsetof(UnionSplineComponent_GetSplineParamByArrayIndex, ArrayIndex) == 0x000000, "Member 'UnionSplineComponent_GetSplineParamByArrayIndex::ArrayIndex' has a wrong offset!");
static_assert(offsetof(UnionSplineComponent_GetSplineParamByArrayIndex, returnParam) == 0x000008, "Member 'UnionSplineComponent_GetSplineParamByArrayIndex::returnParam' has a wrong offset!");
static_assert(offsetof(UnionSplineComponent_GetSplineParamByArrayIndex, ReturnValue) == 0x0000C8, "Member 'UnionSplineComponent_GetSplineParamByArrayIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionSplineComponent.GetSplineParamByIndex
// 0x00D0 (0x00D0 - 0x0000)
struct UnionSplineComponent_GetSplineParamByIndex final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSplinePointParam                      returnParam;                                       // 0x0008(0x00C0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionSplineComponent_GetSplineParamByIndex) == 0x000008, "Wrong alignment on UnionSplineComponent_GetSplineParamByIndex");
static_assert(sizeof(UnionSplineComponent_GetSplineParamByIndex) == 0x0000D0, "Wrong size on UnionSplineComponent_GetSplineParamByIndex");
static_assert(offsetof(UnionSplineComponent_GetSplineParamByIndex, PointIndex) == 0x000000, "Member 'UnionSplineComponent_GetSplineParamByIndex::PointIndex' has a wrong offset!");
static_assert(offsetof(UnionSplineComponent_GetSplineParamByIndex, returnParam) == 0x000008, "Member 'UnionSplineComponent_GetSplineParamByIndex::returnParam' has a wrong offset!");
static_assert(offsetof(UnionSplineComponent_GetSplineParamByIndex, ReturnValue) == 0x0000C8, "Member 'UnionSplineComponent_GetSplineParamByIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionSplineComponent.InitSplinePointParam
// 0x0010 (0x0010 - 0x0000)
struct UnionSplineComponent_InitSplinePointParam final
{
public:
	TArray<struct FSplinePointParam>              SplineParamArray;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineComponent_InitSplinePointParam) == 0x000008, "Wrong alignment on UnionSplineComponent_InitSplinePointParam");
static_assert(sizeof(UnionSplineComponent_InitSplinePointParam) == 0x000010, "Wrong size on UnionSplineComponent_InitSplinePointParam");
static_assert(offsetof(UnionSplineComponent_InitSplinePointParam, SplineParamArray) == 0x000000, "Member 'UnionSplineComponent_InitSplinePointParam::SplineParamArray' has a wrong offset!");

// Function UnionRun.UnionSplineComponent.PrePointParamUpdate
// 0x0008 (0x0008 - 0x0000)
struct UnionSplineComponent_PrePointParamUpdate final
{
public:
	int32                                         RouteIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPointIndex;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineComponent_PrePointParamUpdate) == 0x000004, "Wrong alignment on UnionSplineComponent_PrePointParamUpdate");
static_assert(sizeof(UnionSplineComponent_PrePointParamUpdate) == 0x000008, "Wrong size on UnionSplineComponent_PrePointParamUpdate");
static_assert(offsetof(UnionSplineComponent_PrePointParamUpdate, RouteIndex) == 0x000000, "Member 'UnionSplineComponent_PrePointParamUpdate::RouteIndex' has a wrong offset!");
static_assert(offsetof(UnionSplineComponent_PrePointParamUpdate, StartPointIndex) == 0x000004, "Member 'UnionSplineComponent_PrePointParamUpdate::StartPointIndex' has a wrong offset!");

// Function UnionRun.UnionSplineComponent.RemovePointByIndex
// 0x0010 (0x0010 - 0x0000)
struct UnionSplineComponent_RemovePointByIndex final
{
public:
	TArray<int32>                                 RemoveIndex;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineComponent_RemovePointByIndex) == 0x000008, "Wrong alignment on UnionSplineComponent_RemovePointByIndex");
static_assert(sizeof(UnionSplineComponent_RemovePointByIndex) == 0x000010, "Wrong size on UnionSplineComponent_RemovePointByIndex");
static_assert(offsetof(UnionSplineComponent_RemovePointByIndex, RemoveIndex) == 0x000000, "Member 'UnionSplineComponent_RemovePointByIndex::RemoveIndex' has a wrong offset!");

// Function UnionRun.UnionSplineComponent.RemovePointByPointIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionSplineComponent_RemovePointByPointIndex final
{
public:
	int32                                         RemovePointIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineComponent_RemovePointByPointIndex) == 0x000004, "Wrong alignment on UnionSplineComponent_RemovePointByPointIndex");
static_assert(sizeof(UnionSplineComponent_RemovePointByPointIndex) == 0x000004, "Wrong size on UnionSplineComponent_RemovePointByPointIndex");
static_assert(offsetof(UnionSplineComponent_RemovePointByPointIndex, RemovePointIndex) == 0x000000, "Member 'UnionSplineComponent_RemovePointByPointIndex::RemovePointIndex' has a wrong offset!");

// Function UnionRun.UnionSplineComponent.GetSplineType
// 0x0001 (0x0001 - 0x0000)
struct UnionSplineComponent_GetSplineType final
{
public:
	EUnionSplineType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineComponent_GetSplineType) == 0x000001, "Wrong alignment on UnionSplineComponent_GetSplineType");
static_assert(sizeof(UnionSplineComponent_GetSplineType) == 0x000001, "Wrong size on UnionSplineComponent_GetSplineType");
static_assert(offsetof(UnionSplineComponent_GetSplineType, ReturnValue) == 0x000000, "Member 'UnionSplineComponent_GetSplineType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionSplineComponent.IsArrived
// 0x0008 (0x0008 - 0x0000)
struct UnionSplineComponent_IsArrived final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionSplineComponent_IsArrived) == 0x000004, "Wrong alignment on UnionSplineComponent_IsArrived");
static_assert(sizeof(UnionSplineComponent_IsArrived) == 0x000008, "Wrong size on UnionSplineComponent_IsArrived");
static_assert(offsetof(UnionSplineComponent_IsArrived, Length) == 0x000000, "Member 'UnionSplineComponent_IsArrived::Length' has a wrong offset!");
static_assert(offsetof(UnionSplineComponent_IsArrived, ReturnValue) == 0x000004, "Member 'UnionSplineComponent_IsArrived::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionSplineMoveComponent.AddMoveDistance
// 0x0004 (0x0004 - 0x0000)
struct UnionSplineMoveComponent_AddMoveDistance final
{
public:
	float                                         AddDistance;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineMoveComponent_AddMoveDistance) == 0x000004, "Wrong alignment on UnionSplineMoveComponent_AddMoveDistance");
static_assert(sizeof(UnionSplineMoveComponent_AddMoveDistance) == 0x000004, "Wrong size on UnionSplineMoveComponent_AddMoveDistance");
static_assert(offsetof(UnionSplineMoveComponent_AddMoveDistance, AddDistance) == 0x000000, "Member 'UnionSplineMoveComponent_AddMoveDistance::AddDistance' has a wrong offset!");

// Function UnionRun.UnionSplineMoveComponent.ForceReverse
// 0x0001 (0x0001 - 0x0000)
struct UnionSplineMoveComponent_ForceReverse final
{
public:
	bool                                          RotReverse;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineMoveComponent_ForceReverse) == 0x000001, "Wrong alignment on UnionSplineMoveComponent_ForceReverse");
static_assert(sizeof(UnionSplineMoveComponent_ForceReverse) == 0x000001, "Wrong size on UnionSplineMoveComponent_ForceReverse");
static_assert(offsetof(UnionSplineMoveComponent_ForceReverse, RotReverse) == 0x000000, "Member 'UnionSplineMoveComponent_ForceReverse::RotReverse' has a wrong offset!");

// Function UnionRun.UnionSplineMoveComponent.IsArrived
// 0x0001 (0x0001 - 0x0000)
struct UnionSplineMoveComponent_IsArrived final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineMoveComponent_IsArrived) == 0x000001, "Wrong alignment on UnionSplineMoveComponent_IsArrived");
static_assert(sizeof(UnionSplineMoveComponent_IsArrived) == 0x000001, "Wrong size on UnionSplineMoveComponent_IsArrived");
static_assert(offsetof(UnionSplineMoveComponent_IsArrived, ReturnValue) == 0x000000, "Member 'UnionSplineMoveComponent_IsArrived::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionSplineMoveComponent.IsOverSplineMoveRate
// 0x0008 (0x0008 - 0x0000)
struct UnionSplineMoveComponent_IsOverSplineMoveRate final
{
public:
	float                                         checkRate;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionSplineMoveComponent_IsOverSplineMoveRate) == 0x000004, "Wrong alignment on UnionSplineMoveComponent_IsOverSplineMoveRate");
static_assert(sizeof(UnionSplineMoveComponent_IsOverSplineMoveRate) == 0x000008, "Wrong size on UnionSplineMoveComponent_IsOverSplineMoveRate");
static_assert(offsetof(UnionSplineMoveComponent_IsOverSplineMoveRate, checkRate) == 0x000000, "Member 'UnionSplineMoveComponent_IsOverSplineMoveRate::checkRate' has a wrong offset!");
static_assert(offsetof(UnionSplineMoveComponent_IsOverSplineMoveRate, ReturnValue) == 0x000004, "Member 'UnionSplineMoveComponent_IsOverSplineMoveRate::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionSplineMoveComponent.IsStartWait
// 0x0008 (0x0008 - 0x0000)
struct UnionSplineMoveComponent_IsStartWait final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionSplineMoveComponent_IsStartWait) == 0x000004, "Wrong alignment on UnionSplineMoveComponent_IsStartWait");
static_assert(sizeof(UnionSplineMoveComponent_IsStartWait) == 0x000008, "Wrong size on UnionSplineMoveComponent_IsStartWait");
static_assert(offsetof(UnionSplineMoveComponent_IsStartWait, DeltaTime) == 0x000000, "Member 'UnionSplineMoveComponent_IsStartWait::DeltaTime' has a wrong offset!");
static_assert(offsetof(UnionSplineMoveComponent_IsStartWait, ReturnValue) == 0x000004, "Member 'UnionSplineMoveComponent_IsStartWait::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionSplineMoveComponent.IsValidSpline
// 0x0001 (0x0001 - 0x0000)
struct UnionSplineMoveComponent_IsValidSpline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineMoveComponent_IsValidSpline) == 0x000001, "Wrong alignment on UnionSplineMoveComponent_IsValidSpline");
static_assert(sizeof(UnionSplineMoveComponent_IsValidSpline) == 0x000001, "Wrong size on UnionSplineMoveComponent_IsValidSpline");
static_assert(offsetof(UnionSplineMoveComponent_IsValidSpline, ReturnValue) == 0x000000, "Member 'UnionSplineMoveComponent_IsValidSpline::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionSplineMoveComponent.MoveReset
// 0x0001 (0x0001 - 0x0000)
struct UnionSplineMoveComponent_MoveReset final
{
public:
	bool                                          ForceMove;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineMoveComponent_MoveReset) == 0x000001, "Wrong alignment on UnionSplineMoveComponent_MoveReset");
static_assert(sizeof(UnionSplineMoveComponent_MoveReset) == 0x000001, "Wrong size on UnionSplineMoveComponent_MoveReset");
static_assert(offsetof(UnionSplineMoveComponent_MoveReset, ForceMove) == 0x000000, "Member 'UnionSplineMoveComponent_MoveReset::ForceMove' has a wrong offset!");

// Function UnionRun.UnionSplineMoveComponent.MoveUpdate
// 0x0008 (0x0008 - 0x0000)
struct UnionSplineMoveComponent_MoveUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransform;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnionSplineMoveComponent_MoveUpdate) == 0x000004, "Wrong alignment on UnionSplineMoveComponent_MoveUpdate");
static_assert(sizeof(UnionSplineMoveComponent_MoveUpdate) == 0x000008, "Wrong size on UnionSplineMoveComponent_MoveUpdate");
static_assert(offsetof(UnionSplineMoveComponent_MoveUpdate, DeltaTime) == 0x000000, "Member 'UnionSplineMoveComponent_MoveUpdate::DeltaTime' has a wrong offset!");
static_assert(offsetof(UnionSplineMoveComponent_MoveUpdate, IsTransform) == 0x000004, "Member 'UnionSplineMoveComponent_MoveUpdate::IsTransform' has a wrong offset!");

// Function UnionRun.UnionSplineMoveComponent.SetLoopType
// 0x0001 (0x0001 - 0x0000)
struct UnionSplineMoveComponent_SetLoopType final
{
public:
	ESplineMoveLoopType                           LoopType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineMoveComponent_SetLoopType) == 0x000001, "Wrong alignment on UnionSplineMoveComponent_SetLoopType");
static_assert(sizeof(UnionSplineMoveComponent_SetLoopType) == 0x000001, "Wrong size on UnionSplineMoveComponent_SetLoopType");
static_assert(offsetof(UnionSplineMoveComponent_SetLoopType, LoopType) == 0x000000, "Member 'UnionSplineMoveComponent_SetLoopType::LoopType' has a wrong offset!");

// Function UnionRun.UnionSplineMoveComponent.SetMoveDistance
// 0x0004 (0x0004 - 0x0000)
struct UnionSplineMoveComponent_SetMoveDistance final
{
public:
	float                                         NewDistance;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineMoveComponent_SetMoveDistance) == 0x000004, "Wrong alignment on UnionSplineMoveComponent_SetMoveDistance");
static_assert(sizeof(UnionSplineMoveComponent_SetMoveDistance) == 0x000004, "Wrong size on UnionSplineMoveComponent_SetMoveDistance");
static_assert(offsetof(UnionSplineMoveComponent_SetMoveDistance, NewDistance) == 0x000000, "Member 'UnionSplineMoveComponent_SetMoveDistance::NewDistance' has a wrong offset!");

// Function UnionRun.UnionSplineMoveComponent.SetSpline
// 0x0008 (0x0008 - 0x0000)
struct UnionSplineMoveComponent_SetSpline final
{
public:
	class UUnionSplineComponent*                  NewSpline;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionSplineMoveComponent_SetSpline) == 0x000008, "Wrong alignment on UnionSplineMoveComponent_SetSpline");
static_assert(sizeof(UnionSplineMoveComponent_SetSpline) == 0x000008, "Wrong size on UnionSplineMoveComponent_SetSpline");
static_assert(offsetof(UnionSplineMoveComponent_SetSpline, NewSpline) == 0x000000, "Member 'UnionSplineMoveComponent_SetSpline::NewSpline' has a wrong offset!");

// Function UnionRun.UnionUcccLibrary.GetUserUcccParamData
// 0x0028 (0x0028 - 0x0000)
struct UnionUcccLibrary_GetUserUcccParamData final
{
public:
	int32                                         OnlineRacerIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_UserCheatParamData             ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionUcccLibrary_GetUserUcccParamData) == 0x000008, "Wrong alignment on UnionUcccLibrary_GetUserUcccParamData");
static_assert(sizeof(UnionUcccLibrary_GetUserUcccParamData) == 0x000028, "Wrong size on UnionUcccLibrary_GetUserUcccParamData");
static_assert(offsetof(UnionUcccLibrary_GetUserUcccParamData, OnlineRacerIndex) == 0x000000, "Member 'UnionUcccLibrary_GetUserUcccParamData::OnlineRacerIndex' has a wrong offset!");
static_assert(offsetof(UnionUcccLibrary_GetUserUcccParamData, ReturnValue) == 0x000008, "Member 'UnionUcccLibrary_GetUserUcccParamData::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.ActivateCameraIF
// 0x0001 (0x0001 - 0x0000)
struct UnionVehicleRaceObjectInterface_ActivateCameraIF final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_ActivateCameraIF) == 0x000001, "Wrong alignment on UnionVehicleRaceObjectInterface_ActivateCameraIF");
static_assert(sizeof(UnionVehicleRaceObjectInterface_ActivateCameraIF) == 0x000001, "Wrong size on UnionVehicleRaceObjectInterface_ActivateCameraIF");
static_assert(offsetof(UnionVehicleRaceObjectInterface_ActivateCameraIF, bActivate) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_ActivateCameraIF::bActivate' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.AddInputRecieveObject
// 0x0008 (0x0008 - 0x0000)
struct UnionVehicleRaceObjectInterface_AddInputRecieveObject final
{
public:
	class UObject*                                InObjectRef;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_AddInputRecieveObject) == 0x000008, "Wrong alignment on UnionVehicleRaceObjectInterface_AddInputRecieveObject");
static_assert(sizeof(UnionVehicleRaceObjectInterface_AddInputRecieveObject) == 0x000008, "Wrong size on UnionVehicleRaceObjectInterface_AddInputRecieveObject");
static_assert(offsetof(UnionVehicleRaceObjectInterface_AddInputRecieveObject, InObjectRef) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_AddInputRecieveObject::InObjectRef' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.ExecVehicleControlEventAttackedInfo
// 0x0070 (0x0070 - 0x0000)
struct UnionVehicleRaceObjectInterface_ExecVehicleControlEventAttackedInfo final
{
public:
	EVehicleControlEvent                          EventId;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttackedInfo                          Value;                                             // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventAttackedInfo) == 0x000008, "Wrong alignment on UnionVehicleRaceObjectInterface_ExecVehicleControlEventAttackedInfo");
static_assert(sizeof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventAttackedInfo) == 0x000070, "Wrong size on UnionVehicleRaceObjectInterface_ExecVehicleControlEventAttackedInfo");
static_assert(offsetof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventAttackedInfo, EventId) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_ExecVehicleControlEventAttackedInfo::EventId' has a wrong offset!");
static_assert(offsetof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventAttackedInfo, Value) == 0x000008, "Member 'UnionVehicleRaceObjectInterface_ExecVehicleControlEventAttackedInfo::Value' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.ExecVehicleControlEventFloat
// 0x0008 (0x0008 - 0x0000)
struct UnionVehicleRaceObjectInterface_ExecVehicleControlEventFloat final
{
public:
	EVehicleControlEvent                          EventId;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventFloat) == 0x000004, "Wrong alignment on UnionVehicleRaceObjectInterface_ExecVehicleControlEventFloat");
static_assert(sizeof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventFloat) == 0x000008, "Wrong size on UnionVehicleRaceObjectInterface_ExecVehicleControlEventFloat");
static_assert(offsetof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventFloat, EventId) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_ExecVehicleControlEventFloat::EventId' has a wrong offset!");
static_assert(offsetof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventFloat, Value) == 0x000004, "Member 'UnionVehicleRaceObjectInterface_ExecVehicleControlEventFloat::Value' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.ExecVehicleControlEventInt
// 0x0008 (0x0008 - 0x0000)
struct UnionVehicleRaceObjectInterface_ExecVehicleControlEventInt final
{
public:
	EVehicleControlEvent                          EventId;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventInt) == 0x000004, "Wrong alignment on UnionVehicleRaceObjectInterface_ExecVehicleControlEventInt");
static_assert(sizeof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventInt) == 0x000008, "Wrong size on UnionVehicleRaceObjectInterface_ExecVehicleControlEventInt");
static_assert(offsetof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventInt, EventId) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_ExecVehicleControlEventInt::EventId' has a wrong offset!");
static_assert(offsetof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventInt, Value) == 0x000004, "Member 'UnionVehicleRaceObjectInterface_ExecVehicleControlEventInt::Value' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.ExecVehicleControlEventSpecialStatus
// 0x0002 (0x0002 - 0x0000)
struct UnionVehicleRaceObjectInterface_ExecVehicleControlEventSpecialStatus final
{
public:
	EVehicleSpecialStatusEvent                    EventId;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleSpecialStatusType                     Value;                                             // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventSpecialStatus) == 0x000001, "Wrong alignment on UnionVehicleRaceObjectInterface_ExecVehicleControlEventSpecialStatus");
static_assert(sizeof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventSpecialStatus) == 0x000002, "Wrong size on UnionVehicleRaceObjectInterface_ExecVehicleControlEventSpecialStatus");
static_assert(offsetof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventSpecialStatus, EventId) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_ExecVehicleControlEventSpecialStatus::EventId' has a wrong offset!");
static_assert(offsetof(UnionVehicleRaceObjectInterface_ExecVehicleControlEventSpecialStatus, Value) == 0x000001, "Member 'UnionVehicleRaceObjectInterface_ExecVehicleControlEventSpecialStatus::Value' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.GetActiveItemPerfomanceObjects
// 0x0010 (0x0010 - 0x0000)
struct UnionVehicleRaceObjectInterface_GetActiveItemPerfomanceObjects final
{
public:
	TArray<class AActor*>                         OutList;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_GetActiveItemPerfomanceObjects) == 0x000008, "Wrong alignment on UnionVehicleRaceObjectInterface_GetActiveItemPerfomanceObjects");
static_assert(sizeof(UnionVehicleRaceObjectInterface_GetActiveItemPerfomanceObjects) == 0x000010, "Wrong size on UnionVehicleRaceObjectInterface_GetActiveItemPerfomanceObjects");
static_assert(offsetof(UnionVehicleRaceObjectInterface_GetActiveItemPerfomanceObjects, OutList) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_GetActiveItemPerfomanceObjects::OutList' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.GetDrone
// 0x0008 (0x0008 - 0x0000)
struct UnionVehicleRaceObjectInterface_GetDrone final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_GetDrone) == 0x000008, "Wrong alignment on UnionVehicleRaceObjectInterface_GetDrone");
static_assert(sizeof(UnionVehicleRaceObjectInterface_GetDrone) == 0x000008, "Wrong size on UnionVehicleRaceObjectInterface_GetDrone");
static_assert(offsetof(UnionVehicleRaceObjectInterface_GetDrone, ReturnValue) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_GetDrone::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.RemoveInputRecieveObject
// 0x0008 (0x0008 - 0x0000)
struct UnionVehicleRaceObjectInterface_RemoveInputRecieveObject final
{
public:
	class UObject*                                InObjectRef;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_RemoveInputRecieveObject) == 0x000008, "Wrong alignment on UnionVehicleRaceObjectInterface_RemoveInputRecieveObject");
static_assert(sizeof(UnionVehicleRaceObjectInterface_RemoveInputRecieveObject) == 0x000008, "Wrong size on UnionVehicleRaceObjectInterface_RemoveInputRecieveObject");
static_assert(offsetof(UnionVehicleRaceObjectInterface_RemoveInputRecieveObject, InObjectRef) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_RemoveInputRecieveObject::InObjectRef' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.SetCockpitMeshSize
// 0x0004 (0x0004 - 0x0000)
struct UnionVehicleRaceObjectInterface_SetCockpitMeshSize final
{
public:
	float                                         NewSize;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_SetCockpitMeshSize) == 0x000004, "Wrong alignment on UnionVehicleRaceObjectInterface_SetCockpitMeshSize");
static_assert(sizeof(UnionVehicleRaceObjectInterface_SetCockpitMeshSize) == 0x000004, "Wrong size on UnionVehicleRaceObjectInterface_SetCockpitMeshSize");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetCockpitMeshSize, NewSize) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_SetCockpitMeshSize::NewSize' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.SetLightChannel
// 0x0004 (0x0004 - 0x0000)
struct UnionVehicleRaceObjectInterface_SetLightChannel final
{
public:
	int32                                         LightChannel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_SetLightChannel) == 0x000004, "Wrong alignment on UnionVehicleRaceObjectInterface_SetLightChannel");
static_assert(sizeof(UnionVehicleRaceObjectInterface_SetLightChannel) == 0x000004, "Wrong size on UnionVehicleRaceObjectInterface_SetLightChannel");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetLightChannel, LightChannel) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_SetLightChannel::LightChannel' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.SetLoadSkipForMonster
// 0x0001 (0x0001 - 0x0000)
struct UnionVehicleRaceObjectInterface_SetLoadSkipForMonster final
{
public:
	bool                                          bSkip;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_SetLoadSkipForMonster) == 0x000001, "Wrong alignment on UnionVehicleRaceObjectInterface_SetLoadSkipForMonster");
static_assert(sizeof(UnionVehicleRaceObjectInterface_SetLoadSkipForMonster) == 0x000001, "Wrong size on UnionVehicleRaceObjectInterface_SetLoadSkipForMonster");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetLoadSkipForMonster, bSkip) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_SetLoadSkipForMonster::bSkip' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.SetRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionVehicleRaceObjectInterface_SetRacerIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_SetRacerIndex) == 0x000004, "Wrong alignment on UnionVehicleRaceObjectInterface_SetRacerIndex");
static_assert(sizeof(UnionVehicleRaceObjectInterface_SetRacerIndex) == 0x000004, "Wrong size on UnionVehicleRaceObjectInterface_SetRacerIndex");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetRacerIndex, NewIndex) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_SetRacerIndex::NewIndex' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.SetRacerStatusObject
// 0x0008 (0x0008 - 0x0000)
struct UnionVehicleRaceObjectInterface_SetRacerStatusObject final
{
public:
	class UUnionRacerStatusObject*                NewObject;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_SetRacerStatusObject) == 0x000008, "Wrong alignment on UnionVehicleRaceObjectInterface_SetRacerStatusObject");
static_assert(sizeof(UnionVehicleRaceObjectInterface_SetRacerStatusObject) == 0x000008, "Wrong size on UnionVehicleRaceObjectInterface_SetRacerStatusObject");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetRacerStatusObject, NewObject) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_SetRacerStatusObject::NewObject' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.SetVehicleDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct UnionVehicleRaceObjectInterface_SetVehicleDisplayMode final
{
public:
	EVehicleDisplayMode                           NewVehicleDisplayMode;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_SetVehicleDisplayMode) == 0x000001, "Wrong alignment on UnionVehicleRaceObjectInterface_SetVehicleDisplayMode");
static_assert(sizeof(UnionVehicleRaceObjectInterface_SetVehicleDisplayMode) == 0x000001, "Wrong size on UnionVehicleRaceObjectInterface_SetVehicleDisplayMode");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetVehicleDisplayMode, NewVehicleDisplayMode) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_SetVehicleDisplayMode::NewVehicleDisplayMode' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.SetVehicleMeshVisibility
// 0x0002 (0x0002 - 0x0000)
struct UnionVehicleRaceObjectInterface_SetVehicleMeshVisibility final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRootCockpitComponent;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_SetVehicleMeshVisibility) == 0x000001, "Wrong alignment on UnionVehicleRaceObjectInterface_SetVehicleMeshVisibility");
static_assert(sizeof(UnionVehicleRaceObjectInterface_SetVehicleMeshVisibility) == 0x000002, "Wrong size on UnionVehicleRaceObjectInterface_SetVehicleMeshVisibility");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetVehicleMeshVisibility, NewVisibility) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_SetVehicleMeshVisibility::NewVisibility' has a wrong offset!");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetVehicleMeshVisibility, bRootCockpitComponent) == 0x000001, "Member 'UnionVehicleRaceObjectInterface_SetVehicleMeshVisibility::bRootCockpitComponent' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.SetVehicleSound
// 0x0018 (0x0018 - 0x0000)
struct UnionVehicleRaceObjectInterface_SetVehicleSound final
{
public:
	EVehicleSound                                 VehicleSound;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          NewSound;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_SetVehicleSound) == 0x000008, "Wrong alignment on UnionVehicleRaceObjectInterface_SetVehicleSound");
static_assert(sizeof(UnionVehicleRaceObjectInterface_SetVehicleSound) == 0x000018, "Wrong size on UnionVehicleRaceObjectInterface_SetVehicleSound");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetVehicleSound, VehicleSound) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_SetVehicleSound::VehicleSound' has a wrong offset!");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetVehicleSound, NewSound) == 0x000008, "Member 'UnionVehicleRaceObjectInterface_SetVehicleSound::NewSound' has a wrong offset!");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetVehicleSound, ReturnValue) == 0x000010, "Member 'UnionVehicleRaceObjectInterface_SetVehicleSound::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.SetVehicleSurfaceTypeSound
// 0x0018 (0x0018 - 0x0000)
struct UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound final
{
public:
	EVehicleSound                                 VehicleSound;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnionSurfaceType                             SurfaceType;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          NewSound;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound) == 0x000008, "Wrong alignment on UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound");
static_assert(sizeof(UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound) == 0x000018, "Wrong size on UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound, VehicleSound) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound::VehicleSound' has a wrong offset!");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound, SurfaceType) == 0x000001, "Member 'UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound::SurfaceType' has a wrong offset!");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound, NewSound) == 0x000008, "Member 'UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound::NewSound' has a wrong offset!");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound, ReturnValue) == 0x000010, "Member 'UnionVehicleRaceObjectInterface_SetVehicleSurfaceTypeSound::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.SetVisibilityMachineBody
// 0x0001 (0x0001 - 0x0000)
struct UnionVehicleRaceObjectInterface_SetVisibilityMachineBody final
{
public:
	bool                                          NewVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_SetVisibilityMachineBody) == 0x000001, "Wrong alignment on UnionVehicleRaceObjectInterface_SetVisibilityMachineBody");
static_assert(sizeof(UnionVehicleRaceObjectInterface_SetVisibilityMachineBody) == 0x000001, "Wrong size on UnionVehicleRaceObjectInterface_SetVisibilityMachineBody");
static_assert(offsetof(UnionVehicleRaceObjectInterface_SetVisibilityMachineBody, NewVisible) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_SetVisibilityMachineBody::NewVisible' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.UpdateLocalPlayerSetting
// 0x0008 (0x0008 - 0x0000)
struct UnionVehicleRaceObjectInterface_UpdateLocalPlayerSetting final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalPlayerCount;                                  // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_UpdateLocalPlayerSetting) == 0x000004, "Wrong alignment on UnionVehicleRaceObjectInterface_UpdateLocalPlayerSetting");
static_assert(sizeof(UnionVehicleRaceObjectInterface_UpdateLocalPlayerSetting) == 0x000008, "Wrong size on UnionVehicleRaceObjectInterface_UpdateLocalPlayerSetting");
static_assert(offsetof(UnionVehicleRaceObjectInterface_UpdateLocalPlayerSetting, PlayerControllerIndex) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_UpdateLocalPlayerSetting::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(UnionVehicleRaceObjectInterface_UpdateLocalPlayerSetting, LocalPlayerCount) == 0x000004, "Member 'UnionVehicleRaceObjectInterface_UpdateLocalPlayerSetting::LocalPlayerCount' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.GetCurrentSurfaceType
// 0x0001 (0x0001 - 0x0000)
struct UnionVehicleRaceObjectInterface_GetCurrentSurfaceType final
{
public:
	EUnionSurfaceType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_GetCurrentSurfaceType) == 0x000001, "Wrong alignment on UnionVehicleRaceObjectInterface_GetCurrentSurfaceType");
static_assert(sizeof(UnionVehicleRaceObjectInterface_GetCurrentSurfaceType) == 0x000001, "Wrong size on UnionVehicleRaceObjectInterface_GetCurrentSurfaceType");
static_assert(offsetof(UnionVehicleRaceObjectInterface_GetCurrentSurfaceType, ReturnValue) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_GetCurrentSurfaceType::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.GetRacerIndex
// 0x0004 (0x0004 - 0x0000)
struct UnionVehicleRaceObjectInterface_GetRacerIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_GetRacerIndex) == 0x000004, "Wrong alignment on UnionVehicleRaceObjectInterface_GetRacerIndex");
static_assert(sizeof(UnionVehicleRaceObjectInterface_GetRacerIndex) == 0x000004, "Wrong size on UnionVehicleRaceObjectInterface_GetRacerIndex");
static_assert(offsetof(UnionVehicleRaceObjectInterface_GetRacerIndex, ReturnValue) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_GetRacerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionVehicleRaceObjectInterface.IsInAir
// 0x0001 (0x0001 - 0x0000)
struct UnionVehicleRaceObjectInterface_IsInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleRaceObjectInterface_IsInAir) == 0x000001, "Wrong alignment on UnionVehicleRaceObjectInterface_IsInAir");
static_assert(sizeof(UnionVehicleRaceObjectInterface_IsInAir) == 0x000001, "Wrong size on UnionVehicleRaceObjectInterface_IsInAir");
static_assert(offsetof(UnionVehicleRaceObjectInterface_IsInAir, ReturnValue) == 0x000000, "Member 'UnionVehicleRaceObjectInterface_IsInAir::ReturnValue' has a wrong offset!");

// Function UnionRun.UnionVehicleModelInfo.GetRootDomainPosition
// 0x0018 (0x0018 - 0x0000)
struct UnionVehicleModelInfo_GetRootDomainPosition final
{
public:
	struct FVector                                OutRootDomainPosition;                             // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleModelInfo_GetRootDomainPosition) == 0x000008, "Wrong alignment on UnionVehicleModelInfo_GetRootDomainPosition");
static_assert(sizeof(UnionVehicleModelInfo_GetRootDomainPosition) == 0x000018, "Wrong size on UnionVehicleModelInfo_GetRootDomainPosition");
static_assert(offsetof(UnionVehicleModelInfo_GetRootDomainPosition, OutRootDomainPosition) == 0x000000, "Member 'UnionVehicleModelInfo_GetRootDomainPosition::OutRootDomainPosition' has a wrong offset!");

// Function UnionRun.UnionVehicleModelInfo.GetRootDomainRotation
// 0x0020 (0x0020 - 0x0000)
struct UnionVehicleModelInfo_GetRootDomainRotation final
{
public:
	struct FQuat                                  OutRootDomainRotation;                             // 0x0000(0x0020)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleModelInfo_GetRootDomainRotation) == 0x000010, "Wrong alignment on UnionVehicleModelInfo_GetRootDomainRotation");
static_assert(sizeof(UnionVehicleModelInfo_GetRootDomainRotation) == 0x000020, "Wrong size on UnionVehicleModelInfo_GetRootDomainRotation");
static_assert(offsetof(UnionVehicleModelInfo_GetRootDomainRotation, OutRootDomainRotation) == 0x000000, "Member 'UnionVehicleModelInfo_GetRootDomainRotation::OutRootDomainRotation' has a wrong offset!");

// Function UnionRun.UnionVehicleModelInfo.InitTire
// 0x0004 (0x0004 - 0x0000)
struct UnionVehicleModelInfo_InitTire final
{
public:
	int32                                         InTireCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionVehicleModelInfo_InitTire) == 0x000004, "Wrong alignment on UnionVehicleModelInfo_InitTire");
static_assert(sizeof(UnionVehicleModelInfo_InitTire) == 0x000004, "Wrong size on UnionVehicleModelInfo_InitTire");
static_assert(offsetof(UnionVehicleModelInfo_InitTire, InTireCount) == 0x000000, "Member 'UnionVehicleModelInfo_InitTire::InTireCount' has a wrong offset!");

// Function UnionRun.UnionGameCameraInfo.GetDomainPosition
// 0x0018 (0x0018 - 0x0000)
struct UnionGameCameraInfo_GetDomainPosition final
{
public:
	struct FVector                                OutDomainPosition;                                 // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionGameCameraInfo_GetDomainPosition) == 0x000008, "Wrong alignment on UnionGameCameraInfo_GetDomainPosition");
static_assert(sizeof(UnionGameCameraInfo_GetDomainPosition) == 0x000018, "Wrong size on UnionGameCameraInfo_GetDomainPosition");
static_assert(offsetof(UnionGameCameraInfo_GetDomainPosition, OutDomainPosition) == 0x000000, "Member 'UnionGameCameraInfo_GetDomainPosition::OutDomainPosition' has a wrong offset!");

// Function UnionRun.UnionGameCameraInfo.GetDomainTarget
// 0x0018 (0x0018 - 0x0000)
struct UnionGameCameraInfo_GetDomainTarget final
{
public:
	struct FVector                                OutDomainTarget;                                   // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionGameCameraInfo_GetDomainTarget) == 0x000008, "Wrong alignment on UnionGameCameraInfo_GetDomainTarget");
static_assert(sizeof(UnionGameCameraInfo_GetDomainTarget) == 0x000018, "Wrong size on UnionGameCameraInfo_GetDomainTarget");
static_assert(offsetof(UnionGameCameraInfo_GetDomainTarget, OutDomainTarget) == 0x000000, "Member 'UnionGameCameraInfo_GetDomainTarget::OutDomainTarget' has a wrong offset!");

// Function UnionRun.UnionGameCameraInfo.GetDomainUp
// 0x0018 (0x0018 - 0x0000)
struct UnionGameCameraInfo_GetDomainUp final
{
public:
	struct FVector                                OutDomainUp;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionGameCameraInfo_GetDomainUp) == 0x000008, "Wrong alignment on UnionGameCameraInfo_GetDomainUp");
static_assert(sizeof(UnionGameCameraInfo_GetDomainUp) == 0x000018, "Wrong size on UnionGameCameraInfo_GetDomainUp");
static_assert(offsetof(UnionGameCameraInfo_GetDomainUp, OutDomainUp) == 0x000000, "Member 'UnionGameCameraInfo_GetDomainUp::OutDomainUp' has a wrong offset!");

// Function UnionRun.UnionGameCameraInfo.GetFovY
// 0x0004 (0x0004 - 0x0000)
struct UnionGameCameraInfo_GetFovY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnionGameCameraInfo_GetFovY) == 0x000004, "Wrong alignment on UnionGameCameraInfo_GetFovY");
static_assert(sizeof(UnionGameCameraInfo_GetFovY) == 0x000004, "Wrong size on UnionGameCameraInfo_GetFovY");
static_assert(offsetof(UnionGameCameraInfo_GetFovY, ReturnValue) == 0x000000, "Member 'UnionGameCameraInfo_GetFovY::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.GetItemHoldCount
// 0x000C (0x000C - 0x0000)
struct URaceUISubItemIconSet_GetItemHoldCount final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_GetItemHoldCount) == 0x000004, "Wrong alignment on URaceUISubItemIconSet_GetItemHoldCount");
static_assert(sizeof(URaceUISubItemIconSet_GetItemHoldCount) == 0x00000C, "Wrong size on URaceUISubItemIconSet_GetItemHoldCount");
static_assert(offsetof(URaceUISubItemIconSet_GetItemHoldCount, PlayerIndex) == 0x000000, "Member 'URaceUISubItemIconSet_GetItemHoldCount::PlayerIndex' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_GetItemHoldCount, ItemInfoType) == 0x000004, "Member 'URaceUISubItemIconSet_GetItemHoldCount::ItemInfoType' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_GetItemHoldCount, ReturnValue) == 0x000008, "Member 'URaceUISubItemIconSet_GetItemHoldCount::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.GetItemPackageRingCount
// 0x000C (0x000C - 0x0000)
struct URaceUISubItemIconSet_GetItemPackageRingCount final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_GetItemPackageRingCount) == 0x000004, "Wrong alignment on URaceUISubItemIconSet_GetItemPackageRingCount");
static_assert(sizeof(URaceUISubItemIconSet_GetItemPackageRingCount) == 0x00000C, "Wrong size on URaceUISubItemIconSet_GetItemPackageRingCount");
static_assert(offsetof(URaceUISubItemIconSet_GetItemPackageRingCount, PlayerIndex) == 0x000000, "Member 'URaceUISubItemIconSet_GetItemPackageRingCount::PlayerIndex' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_GetItemPackageRingCount, ItemInfoType) == 0x000004, "Member 'URaceUISubItemIconSet_GetItemPackageRingCount::ItemInfoType' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_GetItemPackageRingCount, ReturnValue) == 0x000008, "Member 'URaceUISubItemIconSet_GetItemPackageRingCount::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.GetTradeCoolTimeParam
// 0x0008 (0x0008 - 0x0000)
struct URaceUISubItemIconSet_GetTradeCoolTimeParam final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_GetTradeCoolTimeParam) == 0x000004, "Wrong alignment on URaceUISubItemIconSet_GetTradeCoolTimeParam");
static_assert(sizeof(URaceUISubItemIconSet_GetTradeCoolTimeParam) == 0x000008, "Wrong size on URaceUISubItemIconSet_GetTradeCoolTimeParam");
static_assert(offsetof(URaceUISubItemIconSet_GetTradeCoolTimeParam, PlayerIndex) == 0x000000, "Member 'URaceUISubItemIconSet_GetTradeCoolTimeParam::PlayerIndex' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_GetTradeCoolTimeParam, ReturnValue) == 0x000004, "Member 'URaceUISubItemIconSet_GetTradeCoolTimeParam::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.IsSummonAvailable
// 0x0008 (0x0008 - 0x0000)
struct URaceUISubItemIconSet_IsSummonAvailable final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoType                                 ItemInfoType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(URaceUISubItemIconSet_IsSummonAvailable) == 0x000004, "Wrong alignment on URaceUISubItemIconSet_IsSummonAvailable");
static_assert(sizeof(URaceUISubItemIconSet_IsSummonAvailable) == 0x000008, "Wrong size on URaceUISubItemIconSet_IsSummonAvailable");
static_assert(offsetof(URaceUISubItemIconSet_IsSummonAvailable, PlayerIndex) == 0x000000, "Member 'URaceUISubItemIconSet_IsSummonAvailable::PlayerIndex' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_IsSummonAvailable, ItemInfoType) == 0x000004, "Member 'URaceUISubItemIconSet_IsSummonAvailable::ItemInfoType' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_IsSummonAvailable, ReturnValue) == 0x000005, "Member 'URaceUISubItemIconSet_IsSummonAvailable::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.IsTradeCoolTime
// 0x0008 (0x0008 - 0x0000)
struct URaceUISubItemIconSet_IsTradeCoolTime final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(URaceUISubItemIconSet_IsTradeCoolTime) == 0x000004, "Wrong alignment on URaceUISubItemIconSet_IsTradeCoolTime");
static_assert(sizeof(URaceUISubItemIconSet_IsTradeCoolTime) == 0x000008, "Wrong size on URaceUISubItemIconSet_IsTradeCoolTime");
static_assert(offsetof(URaceUISubItemIconSet_IsTradeCoolTime, PlayerIndex) == 0x000000, "Member 'URaceUISubItemIconSet_IsTradeCoolTime::PlayerIndex' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_IsTradeCoolTime, ReturnValue) == 0x000004, "Member 'URaceUISubItemIconSet_IsTradeCoolTime::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.SetItemPanelVisibility
// 0x0001 (0x0001 - 0x0000)
struct URaceUISubItemIconSet_SetItemPanelVisibility final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_SetItemPanelVisibility) == 0x000001, "Wrong alignment on URaceUISubItemIconSet_SetItemPanelVisibility");
static_assert(sizeof(URaceUISubItemIconSet_SetItemPanelVisibility) == 0x000001, "Wrong size on URaceUISubItemIconSet_SetItemPanelVisibility");
static_assert(offsetof(URaceUISubItemIconSet_SetItemPanelVisibility, bVisibility) == 0x000000, "Member 'URaceUISubItemIconSet_SetItemPanelVisibility::bVisibility' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.SetItemTradeKey
// 0x0020 (0x0020 - 0x0000)
struct URaceUISubItemIconSet_SetItemTradeKey final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKeyboard;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(URaceUISubItemIconSet_SetItemTradeKey) == 0x000008, "Wrong alignment on URaceUISubItemIconSet_SetItemTradeKey");
static_assert(sizeof(URaceUISubItemIconSet_SetItemTradeKey) == 0x000020, "Wrong size on URaceUISubItemIconSet_SetItemTradeKey");
static_assert(offsetof(URaceUISubItemIconSet_SetItemTradeKey, InKey) == 0x000000, "Member 'URaceUISubItemIconSet_SetItemTradeKey::InKey' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_SetItemTradeKey, IsKeyboard) == 0x000018, "Member 'URaceUISubItemIconSet_SetItemTradeKey::IsKeyboard' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.SetTradeActive
// 0x0001 (0x0001 - 0x0000)
struct URaceUISubItemIconSet_SetTradeActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_SetTradeActive) == 0x000001, "Wrong alignment on URaceUISubItemIconSet_SetTradeActive");
static_assert(sizeof(URaceUISubItemIconSet_SetTradeActive) == 0x000001, "Wrong size on URaceUISubItemIconSet_SetTradeActive");
static_assert(offsetof(URaceUISubItemIconSet_SetTradeActive, bActive) == 0x000000, "Member 'URaceUISubItemIconSet_SetTradeActive::bActive' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.SetVisibilityIrregular
// 0x0002 (0x0002 - 0x0000)
struct URaceUISubItemIconSet_SetVisibilityIrregular final
{
public:
	EItemInfoType                                 ItemInfoType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible_0;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_SetVisibilityIrregular) == 0x000001, "Wrong alignment on URaceUISubItemIconSet_SetVisibilityIrregular");
static_assert(sizeof(URaceUISubItemIconSet_SetVisibilityIrregular) == 0x000002, "Wrong size on URaceUISubItemIconSet_SetVisibilityIrregular");
static_assert(offsetof(URaceUISubItemIconSet_SetVisibilityIrregular, ItemInfoType) == 0x000000, "Member 'URaceUISubItemIconSet_SetVisibilityIrregular::ItemInfoType' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_SetVisibilityIrregular, IsVisible_0) == 0x000001, "Member 'URaceUISubItemIconSet_SetVisibilityIrregular::IsVisible_0' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.GetHoldItemCount
// 0x0008 (0x0008 - 0x0000)
struct URaceUISubItemIconSet_GetHoldItemCount final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_GetHoldItemCount) == 0x000004, "Wrong alignment on URaceUISubItemIconSet_GetHoldItemCount");
static_assert(sizeof(URaceUISubItemIconSet_GetHoldItemCount) == 0x000008, "Wrong size on URaceUISubItemIconSet_GetHoldItemCount");
static_assert(offsetof(URaceUISubItemIconSet_GetHoldItemCount, RacerIndex) == 0x000000, "Member 'URaceUISubItemIconSet_GetHoldItemCount::RacerIndex' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_GetHoldItemCount, ReturnValue) == 0x000004, "Member 'URaceUISubItemIconSet_GetHoldItemCount::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.GetHoldItemInfo
// 0x0003 (0x0003 - 0x0000)
struct URaceUISubItemIconSet_GetHoldItemInfo final
{
public:
	struct FItemSet                               ReturnValue;                                       // 0x0000(0x0003)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_GetHoldItemInfo) == 0x000001, "Wrong alignment on URaceUISubItemIconSet_GetHoldItemInfo");
static_assert(sizeof(URaceUISubItemIconSet_GetHoldItemInfo) == 0x000003, "Wrong size on URaceUISubItemIconSet_GetHoldItemInfo");
static_assert(offsetof(URaceUISubItemIconSet_GetHoldItemInfo, ReturnValue) == 0x000000, "Member 'URaceUISubItemIconSet_GetHoldItemInfo::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.GetItemStatus
// 0x0002 (0x0002 - 0x0000)
struct URaceUISubItemIconSet_GetItemStatus final
{
public:
	EItemInfoType                                 ItemInfoType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemStatus                                   ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_GetItemStatus) == 0x000001, "Wrong alignment on URaceUISubItemIconSet_GetItemStatus");
static_assert(sizeof(URaceUISubItemIconSet_GetItemStatus) == 0x000002, "Wrong size on URaceUISubItemIconSet_GetItemStatus");
static_assert(offsetof(URaceUISubItemIconSet_GetItemStatus, ItemInfoType) == 0x000000, "Member 'URaceUISubItemIconSet_GetItemStatus::ItemInfoType' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_GetItemStatus, ReturnValue) == 0x000001, "Member 'URaceUISubItemIconSet_GetItemStatus::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.GetRacerIndex
// 0x0008 (0x0008 - 0x0000)
struct URaceUISubItemIconSet_GetRacerIndex final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_GetRacerIndex) == 0x000004, "Wrong alignment on URaceUISubItemIconSet_GetRacerIndex");
static_assert(sizeof(URaceUISubItemIconSet_GetRacerIndex) == 0x000008, "Wrong size on URaceUISubItemIconSet_GetRacerIndex");
static_assert(offsetof(URaceUISubItemIconSet_GetRacerIndex, PlayerIndex) == 0x000000, "Member 'URaceUISubItemIconSet_GetRacerIndex::PlayerIndex' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_GetRacerIndex, ReturnValue) == 0x000004, "Member 'URaceUISubItemIconSet_GetRacerIndex::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.HasItemStockPlus
// 0x0001 (0x0001 - 0x0000)
struct URaceUISubItemIconSet_HasItemStockPlus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_HasItemStockPlus) == 0x000001, "Wrong alignment on URaceUISubItemIconSet_HasItemStockPlus");
static_assert(sizeof(URaceUISubItemIconSet_HasItemStockPlus) == 0x000001, "Wrong size on URaceUISubItemIconSet_HasItemStockPlus");
static_assert(offsetof(URaceUISubItemIconSet_HasItemStockPlus, ReturnValue) == 0x000000, "Member 'URaceUISubItemIconSet_HasItemStockPlus::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.HasItemStockTrade
// 0x0001 (0x0001 - 0x0000)
struct URaceUISubItemIconSet_HasItemStockTrade final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_HasItemStockTrade) == 0x000001, "Wrong alignment on URaceUISubItemIconSet_HasItemStockTrade");
static_assert(sizeof(URaceUISubItemIconSet_HasItemStockTrade) == 0x000001, "Wrong size on URaceUISubItemIconSet_HasItemStockTrade");
static_assert(offsetof(URaceUISubItemIconSet_HasItemStockTrade, ReturnValue) == 0x000000, "Member 'URaceUISubItemIconSet_HasItemStockTrade::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.HasItemSummon
// 0x0001 (0x0001 - 0x0000)
struct URaceUISubItemIconSet_HasItemSummon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_HasItemSummon) == 0x000001, "Wrong alignment on URaceUISubItemIconSet_HasItemSummon");
static_assert(sizeof(URaceUISubItemIconSet_HasItemSummon) == 0x000001, "Wrong size on URaceUISubItemIconSet_HasItemSummon");
static_assert(offsetof(URaceUISubItemIconSet_HasItemSummon, ReturnValue) == 0x000000, "Member 'URaceUISubItemIconSet_HasItemSummon::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.IsHideIconOnLost
// 0x0008 (0x0008 - 0x0000)
struct URaceUISubItemIconSet_IsHideIconOnLost final
{
public:
	int32                                         LostItemCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(URaceUISubItemIconSet_IsHideIconOnLost) == 0x000004, "Wrong alignment on URaceUISubItemIconSet_IsHideIconOnLost");
static_assert(sizeof(URaceUISubItemIconSet_IsHideIconOnLost) == 0x000008, "Wrong size on URaceUISubItemIconSet_IsHideIconOnLost");
static_assert(offsetof(URaceUISubItemIconSet_IsHideIconOnLost, LostItemCount) == 0x000000, "Member 'URaceUISubItemIconSet_IsHideIconOnLost::LostItemCount' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_IsHideIconOnLost, ReturnValue) == 0x000004, "Member 'URaceUISubItemIconSet_IsHideIconOnLost::ReturnValue' has a wrong offset!");

// Function UnionRun.URaceUISubItemIconSet.IsIrregularChargeItem
// 0x0002 (0x0002 - 0x0000)
struct URaceUISubItemIconSet_IsIrregularChargeItem final
{
public:
	EItemInfoType                                 ItemInfoType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(URaceUISubItemIconSet_IsIrregularChargeItem) == 0x000001, "Wrong alignment on URaceUISubItemIconSet_IsIrregularChargeItem");
static_assert(sizeof(URaceUISubItemIconSet_IsIrregularChargeItem) == 0x000002, "Wrong size on URaceUISubItemIconSet_IsIrregularChargeItem");
static_assert(offsetof(URaceUISubItemIconSet_IsIrregularChargeItem, ItemInfoType) == 0x000000, "Member 'URaceUISubItemIconSet_IsIrregularChargeItem::ItemInfoType' has a wrong offset!");
static_assert(offsetof(URaceUISubItemIconSet_IsIrregularChargeItem, ReturnValue) == 0x000001, "Member 'URaceUISubItemIconSet_IsIrregularChargeItem::ReturnValue' has a wrong offset!");

// Function UnionRun.WhaleAnimInstance.GetIsJamp
// 0x0001 (0x0001 - 0x0000)
struct WhaleAnimInstance_GetIsJamp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WhaleAnimInstance_GetIsJamp) == 0x000001, "Wrong alignment on WhaleAnimInstance_GetIsJamp");
static_assert(sizeof(WhaleAnimInstance_GetIsJamp) == 0x000001, "Wrong size on WhaleAnimInstance_GetIsJamp");
static_assert(offsetof(WhaleAnimInstance_GetIsJamp, ReturnValue) == 0x000000, "Member 'WhaleAnimInstance_GetIsJamp::ReturnValue' has a wrong offset!");

// Function UnionRun.WhaleAnimInstance.GetIsJampTwist
// 0x0001 (0x0001 - 0x0000)
struct WhaleAnimInstance_GetIsJampTwist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WhaleAnimInstance_GetIsJampTwist) == 0x000001, "Wrong alignment on WhaleAnimInstance_GetIsJampTwist");
static_assert(sizeof(WhaleAnimInstance_GetIsJampTwist) == 0x000001, "Wrong size on WhaleAnimInstance_GetIsJampTwist");
static_assert(offsetof(WhaleAnimInstance_GetIsJampTwist, ReturnValue) == 0x000000, "Member 'WhaleAnimInstance_GetIsJampTwist::ReturnValue' has a wrong offset!");

// Function UnionRun.WhaleAnimInstance.SetIsJamp
// 0x0001 (0x0001 - 0x0000)
struct WhaleAnimInstance_SetIsJamp final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WhaleAnimInstance_SetIsJamp) == 0x000001, "Wrong alignment on WhaleAnimInstance_SetIsJamp");
static_assert(sizeof(WhaleAnimInstance_SetIsJamp) == 0x000001, "Wrong size on WhaleAnimInstance_SetIsJamp");
static_assert(offsetof(WhaleAnimInstance_SetIsJamp, flag) == 0x000000, "Member 'WhaleAnimInstance_SetIsJamp::flag' has a wrong offset!");

// Function UnionRun.WhaleAnimInstance.SetIsJampTwist
// 0x0001 (0x0001 - 0x0000)
struct WhaleAnimInstance_SetIsJampTwist final
{
public:
	bool                                          flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WhaleAnimInstance_SetIsJampTwist) == 0x000001, "Wrong alignment on WhaleAnimInstance_SetIsJampTwist");
static_assert(sizeof(WhaleAnimInstance_SetIsJampTwist) == 0x000001, "Wrong size on WhaleAnimInstance_SetIsJampTwist");
static_assert(offsetof(WhaleAnimInstance_SetIsJampTwist, flag) == 0x000000, "Member 'WhaleAnimInstance_SetIsJampTwist::flag' has a wrong offset!");

}

