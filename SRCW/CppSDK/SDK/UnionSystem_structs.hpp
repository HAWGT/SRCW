#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnionSystem

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// Enum UnionSystem.EMenuInputKey
// NumValues: 0x000E
enum class EMenuInputKey : uint8
{
	UpKey                                    = 0,
	DownKey                                  = 1,
	LeftKey                                  = 2,
	RightKey                                 = 3,
	AcceptKey                                = 4,
	BackKey                                  = 5,
	FaceButtonLeft                           = 6,
	FaceButtonTop                            = 7,
	LeftShoulder                             = 8,
	RightShoulder                            = 9,
	LeftStickButton                          = 10,
	RightStickButton                         = 11,
	Special                                  = 12,
	EMenuInputKey_MAX                        = 13,
};

// Enum UnionSystem.EAppControllerInputType
// NumValues: 0x0006
enum class EAppControllerInputType : uint8
{
	Mouse                                    = 0,
	Keyboard                                 = 1,
	Gamepad                                  = 2,
	Touch                                    = 3,
	Count                                    = 4,
	EAppControllerInputType_MAX              = 5,
};

// Enum UnionSystem.EMainMenuRegistPriority
// NumValues: 0x0004
enum class EMainMenuRegistPriority : uint8
{
	AppUI                                    = 0,
	PopupWindow                              = 1,
	ErrorPopupWindow                         = 2,
	EMainMenuRegistPriority_MAX              = 3,
};

// Enum UnionSystem.EMachineAuraId
// NumValues: 0x0021
enum class EMachineAuraId : uint8
{
	MACHINE_AURA_NONE                        = 0,
	MACHINE_AURA_001                         = 1,
	MACHINE_AURA_002                         = 2,
	MACHINE_AURA_003                         = 3,
	MACHINE_AURA_004                         = 4,
	MACHINE_AURA_005                         = 5,
	MACHINE_AURA_006                         = 6,
	MACHINE_AURA_007                         = 7,
	MACHINE_AURA_008                         = 8,
	MACHINE_AURA_009                         = 9,
	MACHINE_AURA_010                         = 10,
	MACHINE_AURA_011                         = 11,
	MACHINE_AURA_012                         = 12,
	MACHINE_AURA_013                         = 13,
	MACHINE_AURA_014                         = 14,
	MACHINE_AURA_015                         = 15,
	MACHINE_AURA_016                         = 16,
	MACHINE_AURA_017                         = 17,
	MACHINE_AURA_018                         = 18,
	MACHINE_AURA_019                         = 19,
	MACHINE_AURA_020                         = 20,
	MACHINE_AURA_021                         = 21,
	MACHINE_AURA_022                         = 22,
	MACHINE_AURA_023                         = 23,
	MACHINE_AURA_024                         = 24,
	MACHINE_AURA_025                         = 25,
	MACHINE_AURA_026                         = 26,
	MACHINE_AURA_027                         = 27,
	MACHINE_AURA_028                         = 28,
	MACHINE_AURA_029                         = 29,
	MACHINE_AURA_030                         = 30,
	Num                                      = 31,
	EMachineAuraId_MAX                       = 32,
};

// Enum UnionSystem.EMachineHornType
// NumValues: 0x0047
enum class EMachineHornType : uint8
{
	HORNTYPE_01                              = 0,
	HORNTYPE_02                              = 1,
	HORNTYPE_03                              = 2,
	HORNTYPE_04                              = 3,
	HORNTYPE_05                              = 4,
	HORNTYPE_06                              = 5,
	HORNTYPE_07                              = 6,
	HORNTYPE_08                              = 7,
	HORNTYPE_09                              = 8,
	HORNTYPE_10                              = 9,
	HORNTYPE_11                              = 10,
	HORNTYPE_12                              = 11,
	HORNTYPE_13                              = 12,
	HORNTYPE_14                              = 13,
	HORNTYPE_15                              = 14,
	HORNTYPE_16                              = 15,
	HORNTYPE_17                              = 16,
	HORNTYPE_18                              = 17,
	HORNTYPE_19                              = 18,
	HORNTYPE_20                              = 19,
	HORNTYPE_21                              = 20,
	HORNTYPE_22                              = 21,
	HORNTYPE_23                              = 22,
	HORNTYPE_24                              = 23,
	HORNTYPE_25                              = 24,
	HORNTYPE_26                              = 25,
	HORNTYPE_27                              = 26,
	HORNTYPE_28                              = 27,
	HORNTYPE_29                              = 28,
	HORNTYPE_30                              = 29,
	HORNTYPE_31                              = 30,
	HORNTYPE_32                              = 31,
	HORNTYPE_33                              = 32,
	HORNTYPE_34                              = 33,
	HORNTYPE_35                              = 34,
	HORNTYPE_36                              = 35,
	HORNTYPE_37                              = 36,
	HORNTYPE_38                              = 37,
	HORNTYPE_39                              = 38,
	HORNTYPE_EXTND_01                        = 39,
	HORNTYPE_EXTND_02                        = 40,
	HORNTYPE_EXTND_03                        = 41,
	HORNTYPE_EXTND_04                        = 42,
	HORNTYPE_EXTND_05                        = 43,
	HORNTYPE_EXTND_06                        = 44,
	HORNTYPE_EXTND_07                        = 45,
	HORNTYPE_EXTND_08                        = 46,
	HORNTYPE_EXTND_09                        = 47,
	HORNTYPE_EXTND_10                        = 48,
	HORNTYPE_EXTND_11                        = 49,
	HORNTYPE_EXTND_12                        = 50,
	HORNTYPE_EXTND_13                        = 51,
	HORNTYPE_EXTND_14                        = 52,
	HORNTYPE_EXTND_15                        = 53,
	HORNTYPE_EXTND_16                        = 54,
	HORNTYPE_EXTND_17                        = 55,
	HORNTYPE_EXTND_18                        = 56,
	HORNTYPE_EXTND_19                        = 57,
	HORNTYPE_EXTND_20                        = 58,
	HORNTYPE_EXTND_21                        = 59,
	HORNTYPE_EXTND_22                        = 60,
	HORNTYPE_EXTND_23                        = 61,
	HORNTYPE_EXTND_24                        = 62,
	HORNTYPE_EXTND_25                        = 63,
	HORNTYPE_EXTND_26                        = 64,
	HORNTYPE_EXTND_27                        = 65,
	HORNTYPE_EXTND_28                        = 66,
	HORNTYPE_EXTND_29                        = 67,
	HORNTYPE_EXTND_30                        = 68,
	Num                                      = 69,
	EMachineHornType_MAX                     = 70,
};

// Enum UnionSystem.EMachineColorPresetId
// NumValues: 0x00C9
enum class EMachineColorPresetId : uint8
{
	ColorPreset01                            = 0,
	ColorPreset02                            = 1,
	ColorPreset03                            = 2,
	ColorPreset04                            = 3,
	ColorPreset05                            = 4,
	ColorPreset06                            = 5,
	ColorPreset07                            = 6,
	ColorPreset08                            = 7,
	ColorPreset09                            = 8,
	ColorPreset10                            = 9,
	ColorPreset11                            = 10,
	ColorPreset12                            = 11,
	ColorPreset13                            = 12,
	ColorPreset14                            = 13,
	ColorPreset15                            = 14,
	ColorPreset16                            = 15,
	ColorPreset17                            = 16,
	ColorPreset18                            = 17,
	ColorPreset19                            = 18,
	ColorPreset20                            = 19,
	ColorPreset21                            = 20,
	ColorPreset22                            = 21,
	ColorPreset23                            = 22,
	ColorPreset24                            = 23,
	ColorPreset25                            = 24,
	ColorPreset26                            = 25,
	ColorPreset27                            = 26,
	ColorPreset28                            = 27,
	ColorPreset29                            = 28,
	ColorPreset30                            = 29,
	ColorPreset31                            = 30,
	ColorPreset32                            = 31,
	ColorPreset33                            = 32,
	ColorPreset34                            = 33,
	ColorPreset35                            = 34,
	ColorPreset36                            = 35,
	ColorPreset37                            = 36,
	ColorPreset38                            = 37,
	ColorPreset39                            = 38,
	ColorPreset40                            = 39,
	ColorPreset41                            = 40,
	ColorPreset42                            = 41,
	ColorPreset43                            = 42,
	ColorPreset44                            = 43,
	ColorPreset45                            = 44,
	ColorPreset46                            = 45,
	ColorPreset47                            = 46,
	ColorPreset48                            = 47,
	ColorPreset49                            = 48,
	ColorPreset50                            = 49,
	ColorPreset51                            = 50,
	ColorPreset52                            = 51,
	ColorPreset53                            = 52,
	ColorPreset54                            = 53,
	ColorPreset55                            = 54,
	ColorPreset56                            = 55,
	ColorPreset57                            = 56,
	ColorPreset58                            = 57,
	ColorPreset59                            = 58,
	ColorPreset60                            = 59,
	ColorPreset61                            = 60,
	ColorPreset62                            = 61,
	ColorPreset63                            = 62,
	ColorPreset64                            = 63,
	ColorPreset65                            = 64,
	ColorPreset66                            = 65,
	ColorPreset67                            = 66,
	ColorPreset68                            = 67,
	ColorPreset69                            = 68,
	ColorPreset70                            = 69,
	ColorPreset71                            = 70,
	ColorPreset72                            = 71,
	ColorPreset73                            = 72,
	ColorPreset74                            = 73,
	ColorPreset75                            = 74,
	ColorPreset76                            = 75,
	ColorPreset77                            = 76,
	ColorPreset78                            = 77,
	ColorPreset79                            = 78,
	ColorPreset80                            = 79,
	ColorPreset81                            = 80,
	ColorPreset82                            = 81,
	ColorPreset83                            = 82,
	ColorPreset84                            = 83,
	ColorPreset85                            = 84,
	ColorPreset86                            = 85,
	ColorPreset87                            = 86,
	ColorPreset88                            = 87,
	ColorPreset89                            = 88,
	ColorPreset90                            = 89,
	ColorPreset91                            = 90,
	ColorPreset92                            = 91,
	ColorPreset93                            = 92,
	ColorPreset94                            = 93,
	ColorPreset95                            = 94,
	ColorPreset96                            = 95,
	ColorPreset97                            = 96,
	ColorPreset98                            = 97,
	ColorPreset99                            = 98,
	ColorPreset100                           = 99,
	ColorPreset101                           = 100,
	ColorPreset102                           = 101,
	ColorPreset103                           = 102,
	ColorPreset104                           = 103,
	ColorPreset105                           = 104,
	ColorPreset106                           = 105,
	ColorPreset107                           = 106,
	ColorPreset108                           = 107,
	ColorPreset109                           = 108,
	ColorPreset110                           = 109,
	ColorPreset111                           = 110,
	ColorPreset112                           = 111,
	ColorPreset113                           = 112,
	ColorPreset114                           = 113,
	ColorPreset115                           = 114,
	ColorPreset116                           = 115,
	ColorPreset117                           = 116,
	ColorPreset118                           = 117,
	ColorPreset119                           = 118,
	ColorPreset120                           = 119,
	ColorPreset121                           = 120,
	ColorPreset122                           = 121,
	ColorPreset123                           = 122,
	ColorPreset124                           = 123,
	ColorPreset125                           = 124,
	ColorPreset126                           = 125,
	ColorPreset127                           = 126,
	ColorPreset128                           = 127,
	ColorPreset129                           = 128,
	ColorPreset130                           = 129,
	ColorPreset131                           = 130,
	ColorPreset132                           = 131,
	ColorPreset133                           = 132,
	ColorPreset134                           = 133,
	ColorPreset135                           = 134,
	ColorPreset136                           = 135,
	ColorPreset137                           = 136,
	ColorPreset138                           = 137,
	ColorPreset139                           = 138,
	ColorPreset140                           = 139,
	ColorPreset141                           = 140,
	ColorPreset142                           = 141,
	ColorPreset143                           = 142,
	ColorPreset144                           = 143,
	ColorPreset145                           = 144,
	ColorPreset146                           = 145,
	ColorPreset147                           = 146,
	ColorPreset148                           = 147,
	ColorPreset149                           = 148,
	ColorPreset150                           = 149,
	ColorPreset151                           = 150,
	ColorPreset152                           = 151,
	ColorPreset153                           = 152,
	ColorPreset154                           = 153,
	ColorPreset155                           = 154,
	ColorPreset156                           = 155,
	ColorPreset157                           = 156,
	ColorPreset158                           = 157,
	ColorPreset159                           = 158,
	ColorPreset160                           = 159,
	ColorPreset161                           = 160,
	ColorPreset162                           = 161,
	ColorPreset163                           = 162,
	ColorPreset164                           = 163,
	ColorPreset165                           = 164,
	ColorPreset166                           = 165,
	ColorPreset167                           = 166,
	ColorPreset168                           = 167,
	ColorPreset169                           = 168,
	ColorPreset170                           = 169,
	ColorPreset171                           = 170,
	ColorPreset172                           = 171,
	ColorPreset173                           = 172,
	ColorPreset174                           = 173,
	ColorPreset175                           = 174,
	ColorPreset176                           = 175,
	ColorPreset177                           = 176,
	ColorPreset178                           = 177,
	ColorPreset179                           = 178,
	ColorPreset180                           = 179,
	ColorPreset181                           = 180,
	ColorPreset182                           = 181,
	ColorPreset183                           = 182,
	ColorPreset184                           = 183,
	ColorPreset185                           = 184,
	ColorPreset186                           = 185,
	ColorPreset187                           = 186,
	ColorPreset188                           = 187,
	ColorPreset189                           = 188,
	ColorPreset190                           = 189,
	ColorPreset191                           = 190,
	ColorPreset192                           = 191,
	ColorPreset193                           = 192,
	ColorPreset194                           = 193,
	ColorPreset195                           = 194,
	ColorPreset196                           = 195,
	ColorPreset197                           = 196,
	ColorPreset198                           = 197,
	ColorPreset199                           = 198,
	Num                                      = 199,
	EMachineColorPresetId_MAX                = 200,
};

// Enum UnionSystem.EMachineColorMode
// NumValues: 0x0004
enum class EMachineColorMode : uint8
{
	Default                                  = 0,
	Preset                                   = 1,
	Custom                                   = 2,
	EMachineColorMode_MAX                    = 3,
};

// Enum UnionSystem.EMachineId
// NumValues: 0x0099
enum class EMachineId : uint8
{
	SPD_01                                   = 0,
	SPD_02                                   = 1,
	SPD_03                                   = 2,
	SPD_04                                   = 3,
	SPD_05                                   = 4,
	SPD_06                                   = 5,
	SPD_07                                   = 6,
	SPD_08                                   = 7,
	SPD_09                                   = 8,
	SPD_10                                   = 9,
	SPD_11                                   = 10,
	SPD_12                                   = 11,
	SPD_13                                   = 12,
	SPD_14                                   = 13,
	SPD_15                                   = 14,
	SPD_16                                   = 15,
	SPD_17                                   = 16,
	SPD_18                                   = 17,
	SPD_19                                   = 18,
	SPD_20                                   = 19,
	SPD_51                                   = 20,
	SPD_101                                  = 21,
	SPD_102                                  = 22,
	SPD_103                                  = 23,
	SPD_104                                  = 24,
	SPD_105                                  = 25,
	SPD_151                                  = 26,
	SPD_152                                  = 27,
	SPD_153                                  = 28,
	SPD_154                                  = 29,
	ACL_01                                   = 30,
	ACL_02                                   = 31,
	ACL_03                                   = 32,
	ACL_04                                   = 33,
	ACL_05                                   = 34,
	ACL_06                                   = 35,
	ACL_07                                   = 36,
	ACL_08                                   = 37,
	ACL_09                                   = 38,
	ACL_10                                   = 39,
	ACL_11                                   = 40,
	ACL_12                                   = 41,
	ACL_13                                   = 42,
	ACL_14                                   = 43,
	ACL_15                                   = 44,
	ACL_16                                   = 45,
	ACL_17                                   = 46,
	ACL_18                                   = 47,
	ACL_19                                   = 48,
	ACL_20                                   = 49,
	ACL_51                                   = 50,
	ACL_101                                  = 51,
	ACL_102                                  = 52,
	ACL_103                                  = 53,
	ACL_104                                  = 54,
	ACL_105                                  = 55,
	ACL_151                                  = 56,
	ACL_152                                  = 57,
	ACL_153                                  = 58,
	ACL_154                                  = 59,
	HND_01                                   = 60,
	HND_02                                   = 61,
	HND_03                                   = 62,
	HND_04                                   = 63,
	HND_05                                   = 64,
	HND_06                                   = 65,
	HND_07                                   = 66,
	HND_08                                   = 67,
	HND_09                                   = 68,
	HND_10                                   = 69,
	HND_11                                   = 70,
	HND_12                                   = 71,
	HND_13                                   = 72,
	HND_14                                   = 73,
	HND_15                                   = 74,
	HND_16                                   = 75,
	HND_17                                   = 76,
	HND_18                                   = 77,
	HND_19                                   = 78,
	HND_20                                   = 79,
	HND_51                                   = 80,
	HND_101                                  = 81,
	HND_102                                  = 82,
	HND_103                                  = 83,
	HND_104                                  = 84,
	HND_105                                  = 85,
	HND_151                                  = 86,
	HND_152                                  = 87,
	HND_153                                  = 88,
	HND_154                                  = 89,
	POW_01                                   = 90,
	POW_02                                   = 91,
	POW_03                                   = 92,
	POW_04                                   = 93,
	POW_05                                   = 94,
	POW_06                                   = 95,
	POW_07                                   = 96,
	POW_08                                   = 97,
	POW_09                                   = 98,
	POW_10                                   = 99,
	POW_11                                   = 100,
	POW_12                                   = 101,
	POW_13                                   = 102,
	POW_14                                   = 103,
	POW_15                                   = 104,
	POW_16                                   = 105,
	POW_17                                   = 106,
	POW_18                                   = 107,
	POW_19                                   = 108,
	POW_20                                   = 109,
	POW_51                                   = 110,
	POW_101                                  = 111,
	POW_102                                  = 112,
	POW_103                                  = 113,
	POW_104                                  = 114,
	POW_105                                  = 115,
	POW_151                                  = 116,
	POW_152                                  = 117,
	POW_153                                  = 118,
	POW_154                                  = 119,
	DSH_01                                   = 120,
	DSH_02                                   = 121,
	DSH_03                                   = 122,
	DSH_04                                   = 123,
	DSH_05                                   = 124,
	DSH_06                                   = 125,
	DSH_07                                   = 126,
	DSH_08                                   = 127,
	DSH_09                                   = 128,
	DSH_10                                   = 129,
	DSH_11                                   = 130,
	DSH_12                                   = 131,
	DSH_13                                   = 132,
	DSH_14                                   = 133,
	DSH_15                                   = 134,
	DSH_16                                   = 135,
	DSH_17                                   = 136,
	DSH_18                                   = 137,
	DSH_19                                   = 138,
	DSH_20                                   = 139,
	DSH_51                                   = 140,
	DSH_101                                  = 141,
	DSH_102                                  = 142,
	DSH_103                                  = 143,
	DSH_104                                  = 144,
	DSH_105                                  = 145,
	DSH_151                                  = 146,
	DSH_152                                  = 147,
	DSH_153                                  = 148,
	DSH_154                                  = 149,
	Num                                      = 150,
	None                                     = 255,
	EMachineId_MAX                           = 256,
};

// Enum UnionSystem.EResponseCodeAbstract
// NumValues: 0x000B
enum class EResponseCodeAbstract : uint8
{
	RES_SUCCESS                              = 0,
	RES_FAILURE_COMMUNICATION                = 1,
	RES_FAILURE_SECURITY                     = 2,
	RES_FAILURE_ACCOUNT                      = 3,
	RES_FAILURE_OPERATION                    = 4,
	RES_FAILURE_FRIEND                       = 5,
	RES_FAILURE_MATCHING                     = 6,
	RES_FAILURE_SANCTION                     = 7,
	RES_FAILURE_INTERNAL                     = 8,
	RES_FAILURE_MAINTENANCE                  = 9,
	RES_MAX                                  = 10,
};

// Enum UnionSystem.EStageId
// NumValues: 0x0072
enum class EStageId : uint8
{
	STG1001                                  = 0,
	STG1002                                  = 1,
	STG1003                                  = 2,
	STG1004                                  = 3,
	STG1005                                  = 4,
	STG1006                                  = 5,
	STG1007                                  = 6,
	STG1008                                  = 7,
	STG1009                                  = 8,
	STG1010                                  = 9,
	STG1011                                  = 10,
	STG1012                                  = 11,
	STG1013                                  = 12,
	STG1014                                  = 13,
	STG1015                                  = 14,
	STG1016                                  = 15,
	STG1017                                  = 16,
	STG1018                                  = 17,
	STG1019                                  = 18,
	STG1020                                  = 19,
	STG1021                                  = 20,
	STG1022                                  = 21,
	STG1023                                  = 22,
	STG1024                                  = 23,
	STG1025                                  = 24,
	STG1026                                  = 25,
	STG1027                                  = 26,
	STG1028                                  = 27,
	STG1029                                  = 28,
	STG1030                                  = 29,
	STG1031                                  = 30,
	STG1032                                  = 31,
	STG1033                                  = 32,
	STG1034                                  = 33,
	STG1035                                  = 34,
	STG1036                                  = 35,
	STG1037                                  = 36,
	STG1038                                  = 37,
	STG1039                                  = 38,
	STG1040                                  = 39,
	STG1041                                  = 40,
	STG1042                                  = 41,
	STG1501                                  = 42,
	STG1502                                  = 43,
	STG1503                                  = 44,
	STG1504                                  = 45,
	STG1505                                  = 46,
	STG1506                                  = 47,
	STG1507                                  = 48,
	STG1508                                  = 49,
	STG1509                                  = 50,
	STG1510                                  = 51,
	STG1901                                  = 52,
	STG1902                                  = 53,
	STG2001                                  = 54,
	STG2002                                  = 55,
	STG2003                                  = 56,
	STG2004                                  = 57,
	STG2005                                  = 58,
	STG2006                                  = 59,
	STG2007                                  = 60,
	STG2008                                  = 61,
	STG2009                                  = 62,
	STG2010                                  = 63,
	STG2011                                  = 64,
	STG2012                                  = 65,
	STG2013                                  = 66,
	STG2014                                  = 67,
	STG2015                                  = 68,
	STG2016                                  = 69,
	STG2017                                  = 70,
	STG2018                                  = 71,
	STG2019                                  = 72,
	STG2020                                  = 73,
	STG3001                                  = 74,
	STG3002                                  = 75,
	STG3003                                  = 76,
	STG3004                                  = 77,
	STG3005                                  = 78,
	STG3006                                  = 79,
	STG3007                                  = 80,
	STG3008                                  = 81,
	STG3009                                  = 82,
	STG3010                                  = 83,
	STG4001                                  = 84,
	STG4002                                  = 85,
	STG4003                                  = 86,
	STG4004                                  = 87,
	STG4005                                  = 88,
	STG4006                                  = 89,
	STG4007                                  = 90,
	STG4008                                  = 91,
	STG4009                                  = 92,
	STG4010                                  = 93,
	Num                                      = 94,
	MainBegin                                = 0,
	MainEnd                                  = 41,
	AnotherBegin                             = 54,
	AnotherEnd                               = 73,
	ExtndMainBegin                           = 42,
	ExtndMainEnd                             = 51,
	CommonBegin                              = 52,
	CommonEnd                                = 53,
	MainNum                                  = 42,
	ExtndMainNum                             = 10,
	CommonNum                                = 2,
	AnotherNum                               = 20,
	DebugMainBegin                           = 74,
	DebugMainEnd                             = 83,
	DebugAnotherBegin                        = 84,
	DebugAnotherEnd                          = 93,
	UnKnown                                  = 94,
	Invalid                                  = 255,
	EStageId_MAX                             = 256,
};

// Enum UnionSystem.ESpeedClassId
// NumValues: 0x0006
enum class ESpeedClassId : uint8
{
	NormalSpeed                              = 0,
	HighSpeed                                = 1,
	SonicSpeed                               = 2,
	SuperSonicSpeed                          = 3,
	Num                                      = 4,
	ESpeedClassId_MAX                        = 5,
};

// Enum UnionSystem.EBlockPlayerErrorCode
// NumValues: 0x0006
enum class EBlockPlayerErrorCode : uint8
{
	None                                     = 0,
	OverLimit                                = 1,
	NetworkError                             = 2,
	InternalError                            = 3,
	AlreadyRegistered                        = 4,
	EBlockPlayerErrorCode_MAX                = 5,
};

// Enum UnionSystem.EAppSupportedPlatform
// NumValues: 0x0009
enum class EAppSupportedPlatform : uint8
{
	PC                                       = 0,
	Steam                                    = 1,
	PS4                                      = 2,
	PS5                                      = 3,
	XBX                                      = 4,
	XBO                                      = 5,
	Switch                                   = 6,
	None                                     = 7,
	EAppSupportedPlatform_MAX                = 8,
};

// Enum UnionSystem.EBlockPlayerFilter
// NumValues: 0x0004
enum class EBlockPlayerFilter : uint8
{
	None                                     = 0,
	Terra                                    = 1,
	Platform                                 = 2,
	EBlockPlayerFilter_MAX                   = 3,
};

// Enum UnionSystem.EBlockPlayerState
// NumValues: 0x0005
enum class EBlockPlayerState : uint8
{
	None                                     = 0,
	Terra                                    = 1,
	Platform                                 = 2,
	FullyBlocked                             = 3,
	EBlockPlayerState_MAX                    = 4,
};

// Enum UnionSystem.ECrossplayPlatform
// NumValues: 0x0009
enum class ECrossplayPlatform : uint8
{
	Xbox                                     = 0,
	Switch                                   = 1,
	PlayStation                              = 2,
	Steam_PC                                 = 3,
	Console                                  = 4,
	Com                                      = 5,
	CopyRacer                                = 6,
	None                                     = 7,
	ECrossplayPlatform_MAX                   = 8,
};

// Enum UnionSystem.EGetUserProfileError
// NumValues: 0x0008
enum class EGetUserProfileError : uint8
{
	None                                     = 0,
	AccessLimit                              = 1,
	Busy                                     = 2,
	TooMuchRequest                           = 3,
	InitError                                = 4,
	PlatformFunctionError                    = 5,
	TooManyData                              = 6,
	EGetUserProfileError_MAX                 = 7,
};

// Enum UnionSystem.EFriendsListUserSearchCacheType
// NumValues: 0x0007
enum class EFriendsListUserSearchCacheType : uint8
{
	SearchPlayerID                           = 0,
	SearchLobbyID                            = 1,
	PFFriend                                 = 2,
	LobbyInvitation                          = 3,
	BlockPlayer                              = 4,
	RecentPlayer                             = 5,
	EFriendsListUserSearchCacheType_MAX      = 6,
};

// Enum UnionSystem.EUploadState
// NumValues: 0x0004
enum class EUploadState : uint8
{
	None                                     = 0,
	Ghost                                    = 1,
	Result                                   = 2,
	EUploadState_MAX                         = 3,
};

// Enum UnionSystem.ELocalStorageStatus
// NumValues: 0x0008
enum class ELocalStorageStatus : uint8
{
	OK                                       = 0,
	FileNotFound                             = 1,
	ErrorRead                                = 2,
	ErrorWrite                               = 3,
	ErrorDelete                              = 4,
	Unexpected                               = 5,
	Unimplemented                            = 6,
	ELocalStorageStatus_MAX                  = 7,
};

// Enum UnionSystem.EGameActivityOutcomeType
// NumValues: 0x0004
enum class EGameActivityOutcomeType : uint8
{
	Completed                                = 0,
	Failed                                   = 1,
	Cancelled                                = 2,
	EGameActivityOutcomeType_MAX             = 3,
};

// Enum UnionSystem.EGameModeId
// NumValues: 0x000D
enum class EGameModeId : uint8
{
	None                                     = 0,
	GrandPrix                                = 1,
	PartyRace                                = 2,
	TimeTrial                                = 3,
	RankMatch                                = 4,
	FriendMatch                              = 5,
	FriendMatch_NSW                          = 6,
	Fest                                     = 7,
	Legend                                   = 8,
	Garage                                   = 9,
	Dev_FreeRun                              = 10,
	Num                                      = 11,
	EGameModeId_MAX                          = 12,
};

// Enum UnionSystem.EMainSubCourseIndex
// NumValues: 0x0004
enum class EMainSubCourseIndex : uint8
{
	Sub0                                     = 0,
	Sub1                                     = 1,
	Sub2                                     = 2,
	EMainSubCourseIndex_MAX                  = 3,
};

// Enum UnionSystem.EGameMatchmakingCompleteStatus
// NumValues: 0x0004
enum class EGameMatchmakingCompleteStatus : uint8
{
	Success                                  = 0,
	Failed                                   = 1,
	Canceled                                 = 2,
	EGameMatchmakingCompleteStatus_MAX       = 3,
};

// Enum UnionSystem.EDriverId
// NumValues: 0x005C
enum class EDriverId : uint8
{
	Sonic                                    = 0,
	Tails                                    = 1,
	Knuckles                                 = 2,
	Amy                                      = 3,
	DrEggman                                 = 4,
	Shadow                                   = 5,
	Rouge                                    = 6,
	Silver                                   = 7,
	Blaze                                    = 8,
	MetalSonic                               = 9,
	Omega                                    = 10,
	Vector                                   = 11,
	Espio                                    = 12,
	Charmy                                   = 13,
	Zavok                                    = 14,
	Zazz                                     = 15,
	Cream                                    = 16,
	Big                                      = 17,
	Eggpawn                                  = 18,
	Sage                                     = 19,
	Jet                                      = 20,
	Wave                                     = 21,
	Storm                                    = 22,
	SonicRacer                               = 23,
	TailsRacer                               = 24,
	KnucklesRacer                            = 25,
	AmyRacer                                 = 26,
	DrEggmanRacer                            = 27,
	ShadowRacer                              = 28,
	RougeRacer                               = 29,
	SilverRacer                              = 30,
	BlazeRacer                               = 31,
	MetalSonicRacer                          = 32,
	OmegaRacer                               = 33,
	VectorRacer                              = 34,
	EspioRacer                               = 35,
	CharmyRacer                              = 36,
	ZavokRacer                               = 37,
	ZazzRacer                                = 38,
	CreamRacer                               = 39,
	BigRacer                                 = 40,
	EggpawnRacer                             = 41,
	SageRacer                                = 42,
	JetRacer                                 = 43,
	WaveRacer                                = 44,
	StormRacer                               = 45,
	SuperSonic                               = 46,
	EggpawnBlue                              = 47,
	EggpawnRed                               = 48,
	EggpawnYellow                            = 49,
	EggpawnGreen                             = 50,
	SageBlack                                = 51,
	Werehog                                  = 52,
	TailsPrime                               = 53,
	AmyPrime                                 = 54,
	KnucklesPrime                            = 55,
	Extnd04_Character04001                   = 56,
	Extnd04_Character04002                   = 57,
	Extnd04_Character04003                   = 58,
	Extnd05_Character05001                   = 59,
	Extnd05_Character05002                   = 60,
	Extnd06_Character06001                   = 61,
	Extnd06_Character06002                   = 62,
	Extnd06_Character06003                   = 63,
	Extnd06_Character06004                   = 64,
	Extnd06_Character06005                   = 65,
	Extnd07_Character07001                   = 66,
	Extnd07_Character07002                   = 67,
	Extnd08_Character08001                   = 68,
	Extnd08_Character08002                   = 69,
	Extnd08_Character08003                   = 70,
	Extnd08_Character08004                   = 71,
	Extnd09_Character09001                   = 72,
	Extnd09_Character09002                   = 73,
	Extnd10_Character10001                   = 74,
	Extnd11_Character11002                   = 75,
	Extnd12_Character12001                   = 76,
	Extnd13_Character13001                   = 77,
	Extnd13_Character13002                   = 78,
	Extnd14_Character14001                   = 79,
	Extnd15_Character15001                   = 80,
	Extnd16_Character16001                   = 81,
	Extnd17_Character17001                   = 82,
	Extnd18_Character18001                   = 83,
	Extnd19_Character19001                   = 84,
	Extnd19_Character19002                   = 85,
	Extnd20_Character20001                   = 86,
	Extnd20_Character20002                   = 87,
	Extnd21_Character21001                   = 88,
	Num                                      = 89,
	None                                     = 255,
	EDriverId_MAX                            = 256,
};

// Enum UnionSystem.ESaveDataStatus
// NumValues: 0x0004
enum class ESaveDataStatus : uint8
{
	OK                                       = 0,
	Invalid                                  = 1,
	UserNotFound                             = 2,
	ESaveDataStatus_MAX                      = 3,
};

// Enum UnionSystem.EStatsEventId
// NumValues: 0x0033
enum class EStatsEventId : uint8
{
	Unknown                                  = 0,
	TotalDrivingDistance                     = 1,
	TotalPlayingTime                         = 2,
	TotalRacesCount                          = 3,
	TotalVictoryCount                        = 4,
	UsedItemCount                            = 5,
	AttackItemCount                          = 6,
	BackAttackItemCount                      = 7,
	SpecialItemBoxCount                      = 8,
	StartDashCount                           = 9,
	DriftDashCount                           = 10,
	AirTrickCount                            = 11,
	ChargeLv3Count                           = 12,
	DashPanelCount                           = 13,
	OvertakingBeforeGoalCount                = 14,
	RingsCount                               = 15,
	ShortCutRingCount                        = 16,
	SelectedTravelRingCount                  = 17,
	SafetyDriver                             = 18,
	FirstFastChargeCount                     = 19,
	BoatJumpUpCount                          = 20,
	PlaneTurnCount                           = 21,
	SwitchQuickChargeCount                   = 22,
	JustChargeDashCount                      = 23,
	EnhanceRocketPunchCount                  = 24,
	WarpRingCount                            = 25,
	TouchDashCount                           = 26,
	RingStoleCount                           = 27,
	TechnicalDriftCount                      = 28,
	SpinDriftHitCount                        = 29,
	UltimateChargeCount                      = 30,
	ScratchesCount                           = 31,
	GadgetFragmentsCount                     = 32,
	RedStarRingsCount                        = 33,
	DonpaTicketsCount                        = 34,
	GP_CompletionRacesCount                  = 35,
	GP_VictoriesCount                        = 36,
	GP_AllRacesVictoriesCount                = 37,
	GP_1stPlaceCount                         = 38,
	GP_WonRivalCount                         = 39,
	TimeTrialCount                           = 40,
	TimeTrialSafetyDriver                    = 41,
	TimeTrialItemBoxCount                    = 42,
	FriendMatchCount                         = 43,
	FriendFrandPrixCount                     = 44,
	FriendPlayedWithCount                    = 45,
	UsedMachineCount                         = 46,
	UsedCharactersCount                      = 47,
	WinCharactersCount                       = 48,
	Num                                      = 49,
	EStatsEventId_MAX                        = 50,
};

// Enum UnionSystem.ECommendationCategory
// NumValues: 0x0006
enum class ECommendationCategory : uint8
{
	Unknown                                  = 0,
	OneStar                                  = 1,
	TwoStars                                 = 2,
	ThreeStars                               = 3,
	Num                                      = 4,
	ECommendationCategory_MAX                = 5,
};

// Enum UnionSystem.EHonorId
// NumValues: 0x0017
enum class EHonorId : uint8
{
	Unknown                                  = 0,
	SelectedTravelRing                       = 1,
	OvertakingAndTake1stPlaceBeforeGoal      = 2,
	OvertakingOnFinalLap                     = 3,
	NoHitsTaken                              = 4,
	Take1stPlaceFromLast                     = 5,
	ItemAttackFirst                          = 6,
	SpecialItemBoxCount                      = 7,
	TimeInFirstPlace                         = 8,
	AverageSpeed                             = 9,
	RingsCount                               = 10,
	ItemBoxCount                             = 11,
	ItemHitCount                             = 12,
	UsedItemCount                            = 13,
	TrappedCount                             = 14,
	DriftDashCount                           = 15,
	AirTrickCount                            = 16,
	DashPanelCount                           = 17,
	TouchDashCount                           = 18,
	TotalBoostCount                          = 19,
	MultiPlayBonus                           = 20,
	Num                                      = 21,
	EHonorId_MAX                             = 22,
};

// Enum UnionSystem.EUnionVATPlayMode
// NumValues: 0x0005
enum class EUnionVATPlayMode : uint8
{
	MaterialDriven                           = 0,
	TickDriven                               = 1,
	FrameDriven                              = 2,
	OuterDriven                              = 3,
	EUnionVATPlayMode_MAX                    = 4,
};

// Enum UnionSystem.EVisibilityBasedVatUpdateOption
// NumValues: 0x0004
enum class EVisibilityBasedVatUpdateOption : uint8
{
	AlwaysUpdate                             = 0,
	OnlyUpdateWhenRendered                   = 1,
	NeverUpdate                              = 2,
	EVisibilityBasedVatUpdateOption_MAX      = 3,
};

// Enum UnionSystem.EPlatformIconIndex
// NumValues: 0x0009
enum class EPlatformIconIndex : uint8
{
	Xbox                                     = 0,
	Switch                                   = 1,
	PlayStation                              = 2,
	Steam_PC                                 = 3,
	CS                                       = 4,
	Com                                      = 4,
	CopyRacer                                = 4,
	None                                     = 4,
	EPlatformIconIndex_MAX                   = 5,
};

// Enum UnionSystem.EAppLogLevel
// NumValues: 0x0006
enum class EAppLogLevel : uint8
{
	Log                                      = 0,
	Verbose                                  = 1,
	VeryVerbose                              = 2,
	Warning                                  = 3,
	Error                                    = 4,
	EAppLogLevel_MAX                         = 5,
};

// Enum UnionSystem.EMenuMockChoiceType
// NumValues: 0x0009
enum class EMenuMockChoiceType : uint8
{
	TypeBool                                 = 0,
	TypeInt                                  = 1,
	TypeFloat                                = 2,
	TypeVector                               = 3,
	TypeDTInt                                = 4,
	TypeDTFloat                              = 5,
	TypeText                                 = 6,
	TypeTextArray                            = 7,
	EMenuMockChoiceType_MAX                  = 8,
};

// Enum UnionSystem.EUserStickerFlagBits
// NumValues: 0x0005
enum class EUserStickerFlagBits : uint8
{
	None                                     = 0,
	ReverseU                                 = 1,
	ReverseV                                 = 2,
	ReverseUV                                = 3,
	EUserStickerFlagBits_MAX                 = 4,
};

// Enum UnionSystem.EGrandPrixEventFlag
// NumValues: 0x000B
enum class EGrandPrixEventFlag : uint8
{
	GRANDPRIX_OPENING                        = 0,
	IRREGULAR_INTRO                          = 1,
	GADGET_COSTOM_GUIDE                      = 2,
	RACE_PARK_EXPLANATION                    = 3,
	FESTA_OPENING                            = 4,
	RACE_PARK_CLEAR                          = 5,
	GRANDPRIX_ENDING                         = 6,
	LEGEND_COMPE_OPENING                     = 7,
	Num                                      = 8,
	INVALID                                  = 9,
	EGrandPrixEventFlag_MAX                  = 10,
};

// Enum UnionSystem.ESequenceMainType
// NumValues: 0x0022
enum class ESequenceMainType : uint8
{
	None                                     = 0,
	Advertise                                = 1,
	LoadSaveData                             = 2,
	TitleMovie                               = 3,
	Title                                    = 4,
	GhostData                                = 5,
	NetworkLogin_Title                       = 6,
	TopMenu                                  = 7,
	PlayLogUpload                            = 8,
	NetworkLogin_TopMenu                     = 9,
	SelectOfflinePlay                        = 10,
	Grandprix                                = 11,
	Racepark                                 = 12,
	Timetrial                                = 13,
	SelectOnlinePlay                         = 14,
	Lobby_Fest                               = 15,
	Lobby_FriendMatch                        = 16,
	Lobby_LegendCompe                        = 17,
	Lobby_RankMatch                          = 18,
	Lobby_Squad                              = 19,
	Lobby_Wireless                           = 20,
	ConectP2P                                = 21,
	ConsecutiveBattleMenu                    = 22,
	OnlineRaceEndMenu                        = 23,
	Race                                     = 24,
	SendRaceStart                            = 25,
	SendRaceEnd                              = 26,
	RaceError                                = 27,
	Result                                   = 28,
	Ending                                   = 29,
	NetworkLogin_TimeTrial                   = 30,
	PreRace                                  = 31,
	Max_Num                                  = 32,
	ESequenceMainType_MAX                    = 33,
};

// Enum UnionSystem.ESequenceSubType
// NumValues: 0x0085
enum class ESequenceSubType : uint8
{
	None                                     = 0,
	Param1                                   = 1,
	Param2                                   = 2,
	Param3                                   = 3,
	Param4                                   = 4,
	Param5                                   = 5,
	Param6                                   = 6,
	Param7                                   = 7,
	Param8                                   = 8,
	Param9                                   = 9,
	Param10                                  = 10,
	Param11                                  = 11,
	Param12                                  = 12,
	Param13                                  = 13,
	Param14                                  = 14,
	Param15                                  = 15,
	Param16                                  = 16,
	Param17                                  = 17,
	Param18                                  = 18,
	Param19                                  = 19,
	Param20                                  = 20,
	Param21                                  = 21,
	Param22                                  = 22,
	Param23                                  = 23,
	Param24                                  = 24,
	Param25                                  = 25,
	Param26                                  = 26,
	Param27                                  = 27,
	Param28                                  = 28,
	Param29                                  = 29,
	Param30                                  = 30,
	Param31                                  = 31,
	Param32                                  = 32,
	Param33                                  = 33,
	Param34                                  = 34,
	Param35                                  = 35,
	Param36                                  = 36,
	Param37                                  = 37,
	Param38                                  = 38,
	Param39                                  = 39,
	Param40                                  = 40,
	Param41                                  = 41,
	Param42                                  = 42,
	Param43                                  = 43,
	Param44                                  = 44,
	Param45                                  = 45,
	Param46                                  = 46,
	Param47                                  = 47,
	Param48                                  = 48,
	Param49                                  = 49,
	Param50                                  = 50,
	Param51                                  = 51,
	Param52                                  = 52,
	Param53                                  = 53,
	Param54                                  = 54,
	Param55                                  = 55,
	Param56                                  = 56,
	Param57                                  = 57,
	Param58                                  = 58,
	Param59                                  = 59,
	Param60                                  = 60,
	Param61                                  = 61,
	Param62                                  = 62,
	Param63                                  = 63,
	Param64                                  = 64,
	Param65                                  = 65,
	Param66                                  = 66,
	Param67                                  = 67,
	Param68                                  = 68,
	Param69                                  = 69,
	Param70                                  = 70,
	Param71                                  = 71,
	Param72                                  = 72,
	Param73                                  = 73,
	Param74                                  = 74,
	Param75                                  = 75,
	Param76                                  = 76,
	Param77                                  = 77,
	Param78                                  = 78,
	Param79                                  = 79,
	Param80                                  = 80,
	Param81                                  = 81,
	Param82                                  = 82,
	Param83                                  = 83,
	Param84                                  = 84,
	Param85                                  = 85,
	Param86                                  = 86,
	Param87                                  = 87,
	Param88                                  = 88,
	Param89                                  = 89,
	Param90                                  = 90,
	Param91                                  = 91,
	Param92                                  = 92,
	Param93                                  = 93,
	Param94                                  = 94,
	Param95                                  = 95,
	Param96                                  = 96,
	Param97                                  = 97,
	Param98                                  = 98,
	Param99                                  = 99,
	Param100                                 = 100,
	Param101                                 = 101,
	Param102                                 = 102,
	Param103                                 = 103,
	Param104                                 = 104,
	Param105                                 = 105,
	Param106                                 = 106,
	Param107                                 = 107,
	Param108                                 = 108,
	Param109                                 = 109,
	Param110                                 = 110,
	Param111                                 = 111,
	Param112                                 = 112,
	Param113                                 = 113,
	Param114                                 = 114,
	Param115                                 = 115,
	Param116                                 = 116,
	Param117                                 = 117,
	Param118                                 = 118,
	Param119                                 = 119,
	Param120                                 = 120,
	Param121                                 = 121,
	Param122                                 = 122,
	Param123                                 = 123,
	Param124                                 = 124,
	Param125                                 = 125,
	Param126                                 = 126,
	Param127                                 = 127,
	Param128                                 = 128,
	Param129                                 = 129,
	Param130                                 = 130,
	Max_Num                                  = 131,
	ESequenceSubType_MAX                     = 132,
};

// Enum UnionSystem.EViewSplitMode
// NumValues: 0x0005
enum class EViewSplitMode : uint8
{
	Split1                                   = 0,
	Split2                                   = 1,
	Split3                                   = 2,
	Split4                                   = 3,
	EViewSplitMode_MAX                       = 4,
};

// Enum UnionSystem.EViewSplitId
// NumValues: 0x0009
enum class EViewSplitId : uint8
{
	None                                     = 0,
	Split1_1P                                = 1,
	Split2_Left_1P                           = 2,
	Split2_Right_2P                          = 3,
	Split4_UpLeft_1P                         = 4,
	Split4_UpRight_2P                        = 5,
	Split4_DownLeft_3P                       = 6,
	Split4_DownRight_4P                      = 7,
	EViewSplitId_MAX                         = 8,
};

// Enum UnionSystem.EViewResolution
// NumValues: 0x0004
enum class EViewResolution : uint8
{
	High                                     = 0,
	Middle                                   = 1,
	Low                                      = 2,
	EViewResolution_MAX                      = 3,
};

// Enum UnionSystem.EShortcutViewScale
// NumValues: 0x0004
enum class EShortcutViewScale : uint8
{
	Full                                     = 0,
	Half                                     = 1,
	Quater                                   = 2,
	EShortcutViewScale_MAX                   = 3,
};

// Enum UnionSystem.EResourceQuality
// NumValues: 0x0003
enum class EResourceQuality : uint8
{
	Low                                      = 0,
	High                                     = 1,
	Max                                      = 1,
};

// Enum UnionSystem.EMaterialQuality
// NumValues: 0x0005
enum class EMaterialQuality : uint8
{
	Low                                      = 0,
	Medium                                   = 2,
	High                                     = 1,
	Epic                                     = 3,
	EMaterialQuality_MAX                     = 4,
};

// Enum UnionSystem.ENiagaraQuality
// NumValues: 0x0006
enum class ENiagaraQuality : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Epic                                     = 3,
	Cinematic                                = 4,
	ENiagaraQuality_MAX                      = 5,
};

// Enum UnionSystem.EAppInputValid
// NumValues: 0x0003
enum class EAppInputValid : uint8
{
	Valid                                    = 0,
	InValid                                  = 1,
	EAppInputValid_MAX                       = 2,
};

// Enum UnionSystem.EChallengeId
// NumValues: 0x005A
enum class EChallengeId : uint8
{
	CHALLENGE001                             = 0,
	CHALLENGE002                             = 1,
	CHALLENGE003                             = 2,
	CHALLENGE004                             = 3,
	CHALLENGE005                             = 4,
	CHALLENGE006                             = 5,
	CHALLENGE007                             = 6,
	CHALLENGE008                             = 7,
	CHALLENGE009                             = 8,
	CHALLENGE010                             = 9,
	CHALLENGE011                             = 10,
	CHALLENGE012                             = 11,
	CHALLENGE013                             = 12,
	CHALLENGE014                             = 13,
	CHALLENGE015                             = 14,
	CHALLENGE016                             = 15,
	CHALLENGE017                             = 16,
	CHALLENGE018                             = 17,
	CHALLENGE019                             = 18,
	CHALLENGE020                             = 19,
	CHALLENGE021                             = 20,
	CHALLENGE022                             = 21,
	CHALLENGE023                             = 22,
	CHALLENGE024                             = 23,
	CHALLENGE025                             = 24,
	CHALLENGE026                             = 25,
	CHALLENGE027                             = 26,
	CHALLENGE028                             = 27,
	CHALLENGE029                             = 28,
	CHALLENGE030                             = 29,
	CHALLENGE031                             = 30,
	CHALLENGE032                             = 31,
	CHALLENGE033                             = 32,
	CHALLENGE034                             = 33,
	CHALLENGE035                             = 34,
	CHALLENGE036                             = 35,
	CHALLENGE037                             = 36,
	CHALLENGE038                             = 37,
	CHALLENGE039                             = 38,
	CHALLENGE040                             = 39,
	CHALLENGE041                             = 40,
	CHALLENGE042                             = 41,
	CHALLENGE043                             = 42,
	CHALLENGE044                             = 43,
	CHALLENGE045                             = 44,
	CHALLENGE046                             = 45,
	CHALLENGE047                             = 46,
	CHALLENGE048                             = 47,
	CHALLENGE049                             = 48,
	CHALLENGE050                             = 49,
	CHALLENGE051                             = 50,
	CHALLENGE052                             = 51,
	CHALLENGE053                             = 52,
	CHALLENGE054                             = 53,
	CHALLENGE055                             = 54,
	CHALLENGE056                             = 55,
	CHALLENGE057                             = 56,
	CHALLENGE058                             = 57,
	CHALLENGE059                             = 58,
	CHALLENGE060                             = 59,
	CHALLENGE061                             = 60,
	CHALLENGE062                             = 61,
	CHALLENGE063                             = 62,
	CHALLENGE064                             = 63,
	CHALLENGE065                             = 64,
	CHALLENGE066                             = 65,
	CHALLENGE067                             = 66,
	CHALLENGE068                             = 67,
	CHALLENGE069                             = 68,
	CHALLENGE070                             = 69,
	Num                                      = 70,
	DefaultBegin                             = 0,
	DefaultEnd                               = 59,
	RaceBegin                                = 0,
	RaceEnd                                  = 9,
	GrandprixBegin                           = 10,
	GrandprixEnd                             = 19,
	RaceParkBegin                            = 20,
	RaceParkEnd                              = 29,
	TimeTrialBegin                           = 30,
	TimeTrialEnd                             = 39,
	MachineCustomBegin                       = 40,
	MachineCustomEnd                         = 49,
	GadgetBegin                              = 50,
	GadgetEnd                                = 59,
	SpecialBegin                             = 60,
	SpecialEnd                               = 69,
	CategoryMax                              = 10,
	DefaultMax                               = 60,
	EChallengeId_MAX                         = 71,
};

// Enum UnionSystem.EChallengeProgressState
// NumValues: 0x0006
enum class EChallengeProgressState : uint8
{
	NotAcquired                              = 0,
	InProgress                               = 1,
	Acquired                                 = 2,
	Verified                                 = 3,
	Num                                      = 4,
	EChallengeProgressState_MAX              = 5,
};

// Enum UnionSystem.EContentId
// NumValues: 0x0019
enum class EContentId : uint8
{
	Content01                                = 0,
	Content02                                = 1,
	Content03                                = 2,
	Content04                                = 3,
	Content05                                = 4,
	Content06                                = 5,
	Content07                                = 6,
	Content08                                = 7,
	Content09                                = 8,
	Content10                                = 9,
	Content11                                = 10,
	Content12                                = 11,
	Content13                                = 12,
	Content14                                = 13,
	Content15                                = 14,
	Content16                                = 15,
	Content17                                = 16,
	Content18                                = 17,
	Content19                                = 18,
	Content20                                = 19,
	Content21                                = 20,
	Content22                                = 21,
	Num                                      = 22,
	None                                     = 255,
	EContentId_MAX                           = 256,
};

// Enum UnionSystem.ESelectedState
// NumValues: 0x0005
enum class ESelectedState : uint8
{
	NONE                                     = 0,
	ALBUM                                    = 1,
	TRACK                                    = 2,
	Num                                      = 3,
	ESelectedState_MAX                       = 4,
};

// Enum UnionSystem.ERaceSettingGroupMode
// NumValues: 0x0003
enum class ERaceSettingGroupMode : uint8
{
	Normal                                   = 0,
	FestRule                                 = 1,
	ERaceSettingGroupMode_MAX                = 2,
};

// Enum UnionSystem.ERaceSettingGrouping
// NumValues: 0x0004
enum class ERaceSettingGrouping : uint8
{
	Individual                               = 0,
	Group_2Group                             = 1,
	Group_3Group                             = 2,
	ERaceSettingGrouping_MAX                 = 3,
};

// Enum UnionSystem.ERaceMirrorSetting
// NumValues: 0x0004
enum class ERaceMirrorSetting : uint8
{
	Normal                                   = 0,
	Mirror                                   = 1,
	Num                                      = 2,
	ERaceMirrorSetting_MAX                   = 3,
};

// Enum UnionSystem.ERaceSettingMatchRule
// NumValues: 0x0004
enum class ERaceSettingMatchRule : uint8
{
	Point                                    = 0,
	Time                                     = 1,
	TopPoint                                 = 2,
	ERaceSettingMatchRule_MAX                = 3,
};

// Enum UnionSystem.ERaceSettingGoalPoint
// NumValues: 0x0003
enum class ERaceSettingGoalPoint : uint8
{
	Normal                                   = 0,
	Flat                                     = 1,
	ERaceSettingGoalPoint_MAX                = 2,
};

// Enum UnionSystem.ERaceSettingComSpeed
// NumValues: 0x0005
enum class ERaceSettingComSpeed : uint8
{
	NothingCom                               = 0,
	Weak                                     = 1,
	Normal                                   = 2,
	Strong                                   = 3,
	ERaceSettingComSpeed_MAX                 = 4,
};

// Enum UnionSystem.ERaceSettingHandicap
// NumValues: 0x0004
enum class ERaceSettingHandicap : uint8
{
	NothingHandicap                          = 0,
	Auto                                     = 1,
	Manual                                   = 2,
	ERaceSettingHandicap_MAX                 = 3,
};

// Enum UnionSystem.ERaceSettingCourseSelecting
// NumValues: 0x0004
enum class ERaceSettingCourseSelecting : uint8
{
	EveryTimeManualSelect                    = 0,
	RandomAutoSelect                         = 1,
	VoteSelect                               = 2,
	ERaceSettingCourseSelecting_MAX          = 3,
};

// Enum UnionSystem.ERaceSettingSpecialMCEvent
// NumValues: 0x0004
enum class ERaceSettingSpecialMCEvent : uint8
{
	Disable                                  = 0,
	EnableNormal                             = 1,
	EnableMany                               = 2,
	ERaceSettingSpecialMCEvent_MAX           = 3,
};

// Enum UnionSystem.EMCEventSwitch
// NumValues: 0x0006
enum class EMCEventSwitch : uint8
{
	PointUpChance                            = 0,
	TravelCourseChange                       = 1,
	Irregular                                = 2,
	FesOnly_GadgetPieceGet                   = 3,
	FesOnly_ItemGet                          = 4,
	EMCEventSwitch_MAX                       = 5,
};

// Enum UnionSystem.ECustomRaceSettingPointUpChance
// NumValues: 0x0003
enum class ECustomRaceSettingPointUpChance : uint8
{
	Enable                                   = 0,
	Disable                                  = 1,
	ECustomRaceSettingPointUpChance_MAX      = 2,
};

// Enum UnionSystem.EMCEventPointUpChance
// NumValues: 0x0011
enum class EMCEventPointUpChance : uint8
{
	None                                     = 0,
	AllUp                                    = 1,
	OnlyTop                                  = 2,
	LuckySeven                               = 3,
	TopThree                                 = 4,
	EvenNumOnly                              = 5,
	DLC_01                                   = 6,
	DLC_02                                   = 7,
	DLC_03                                   = 8,
	DLC_04                                   = 9,
	DLC_05                                   = 10,
	DLC_06                                   = 11,
	DLC_07                                   = 12,
	DLC_08                                   = 13,
	DLC_09                                   = 14,
	DLC_10                                   = 15,
	EMCEventPointUpChance_MAX                = 16,
};

// Enum UnionSystem.EMCEventTravelCourseChange
// NumValues: 0x000F
enum class EMCEventTravelCourseChange : uint8
{
	None                                     = 0,
	Adventure                                = 1,
	SEGA_ALL_STARS                           = 2,
	Traveler                                 = 3,
	DLC_01                                   = 4,
	DLC_02                                   = 5,
	DLC_03                                   = 6,
	DLC_04                                   = 7,
	DLC_05                                   = 8,
	DLC_06                                   = 9,
	DLC_07                                   = 10,
	DLC_08                                   = 11,
	DLC_09                                   = 12,
	DLC_10                                   = 13,
	EMCEventTravelCourseChange_MAX           = 14,
};

// Enum UnionSystem.EMCEventIrregularGate
// NumValues: 0x0012
enum class EMCEventIrregularGate : uint8
{
	None                                     = 0,
	IrregularRandom                          = 1,
	IrregularMini                            = 2,
	IrregularDriftCharge                     = 3,
	IrregularFixedItemCategory               = 4,
	IrregularOnlyRocketPunch                 = 5,
	IrregularOnlyThornBalls                  = 6,
	DLC_01                                   = 7,
	DLC_02                                   = 8,
	DLC_03                                   = 9,
	DLC_04                                   = 10,
	DLC_05                                   = 11,
	DLC_06                                   = 12,
	DLC_07                                   = 13,
	DLC_08                                   = 14,
	DLC_09                                   = 15,
	DLC_10                                   = 16,
	EMCEventIrregularGate_MAX                = 17,
};

// Enum UnionSystem.ERaceSettingSpecialGadgetUsing
// NumValues: 0x0003
enum class ERaceSettingSpecialGadgetUsing : uint8
{
	EnableGadget                             = 0,
	DisableGadget                            = 1,
	ERaceSettingSpecialGadgetUsing_MAX       = 2,
};

// Enum UnionSystem.ERaceSettingSpecialAutoGetItem
// NumValues: 0x0003
enum class ERaceSettingSpecialAutoGetItem : uint8
{
	DisableAutoItemGet                       = 0,
	EnableAutoItemGet                        = 1,
	ERaceSettingSpecialAutoGetItem_MAX       = 2,
};

// Enum UnionSystem.EPartyRacePreset
// NumValues: 0x0013
enum class EPartyRacePreset : uint8
{
	Casual                                   = 0,
	Festival                                 = 1,
	KingRace                                 = 2,
	RocketShooting                           = 3,
	MonsterTruck                             = 4,
	Custom                                   = 5,
	QuickMatch                               = 6,
	BattleRush                               = 7,
	GroupMatch                               = 8,
	BoostTimeRace                            = 9,
	Dangerous                                = 10,
	Group3_RingGet                           = 11,
	Group2_TouchDash                         = 12,
	Group2_ItemHit                           = 13,
	Group3_TouchDash                         = 14,
	Group2_DashPanel                         = 15,
	Extreme                                  = 16,
	Num                                      = 17,
	EPartyRacePreset_MAX                     = 18,
};

// Enum UnionSystem.EItemSwitchType
// NumValues: 0x0003
enum class EItemSwitchType : uint8
{
	Normal                                   = 0,
	Custom                                   = 1,
	EItemSwitchType_MAX                      = 2,
};

// Enum UnionSystem.ECustomRaceIrregularSetting
// NumValues: 0x0006
enum class ECustomRaceIrregularSetting : uint8
{
	Nothing                                  = 0,
	Shuffle                                  = 1,
	AddObject                                = 2,
	UnlimitedItem                            = 3,
	QuickDriftCharge                         = 4,
	ECustomRaceIrregularSetting_MAX          = 5,
};

// Enum UnionSystem.ECustomRaceRingLostSetting
// NumValues: 0x0004
enum class ECustomRaceRingLostSetting : uint8
{
	Few                                      = 0,
	Normal                                   = 1,
	All                                      = 2,
	ECustomRaceRingLostSetting_MAX           = 3,
};

// Enum UnionSystem.ECustomRaceThornBallType
// NumValues: 0x0003
enum class ECustomRaceThornBallType : uint8
{
	Normal                                   = 0,
	Large                                    = 1,
	ECustomRaceThornBallType_MAX             = 2,
};

// Enum UnionSystem.ECustomRaceTripleCourseSetting
// NumValues: 0x0003
enum class ECustomRaceTripleCourseSetting : uint8
{
	Enable                                   = 0,
	Disable                                  = 1,
	ECustomRaceTripleCourseSetting_MAX       = 2,
};

// Enum UnionSystem.ECustomRaceSettingLine
// NumValues: 0x0017
enum class ECustomRaceSettingLine : uint8
{
	SpeedClass                               = 0,
	GroupSetting                             = 1,
	MatchRule                                = 2,
	RaceCount                                = 3,
	TopPointSettlement                       = 4,
	ComSpeed                                 = 5,
	Handicap                                 = 6,
	ItemAppearanceRule                       = 7,
	CourseSelecting                          = 8,
	MCEvent                                  = 9,
	MCEventSwitchArr                         = 10,
	GadgetUsing                              = 11,
	AutoGetItem                              = 12,
	Irregular                                = 13,
	PointUpChance                            = 14,
	RingLost                                 = 15,
	TripleCourse                             = 16,
	ObjectPlacementType                      = 17,
	FestaRaceRule                            = 18,
	GroupRaceRule                            = 19,
	RaceBonus                                = 20,
	GoalPoint                                = 21,
	ECustomRaceSettingLine_MAX               = 22,
};

// Enum UnionSystem.EItemSwitchSettingPreset
// NumValues: 0x0004
enum class EItemSwitchSettingPreset : uint8
{
	Wisp                                     = 0,
	AttackAndDefence                         = 1,
	Acceleration                             = 2,
	EItemSwitchSettingPreset_MAX             = 3,
};

// Enum UnionSystem.ERaceBonus
// NumValues: 0x0003
enum class ERaceBonus : uint8
{
	None                                     = 0,
	ItemHitCount                             = 1,
	ERaceBonus_MAX                           = 2,
};

// Enum UnionSystem.EDLCType
// NumValues: 0x0006
enum class EDLCType : uint8
{
	None                                     = 0,
	Free                                     = 1,
	Price                                    = 2,
	Bonus                                    = 3,
	Num                                      = 4,
	EDLCType_MAX                             = 5,
};

// Enum UnionSystem.EDriverSize
// NumValues: 0x0005
enum class EDriverSize : uint8
{
	S                                        = 0,
	L                                        = 1,
	XL                                       = 2,
	Num                                      = 3,
	EDriverSize_MAX                          = 4,
};

// Enum UnionSystem.EDriverPose
// NumValues: 0x0005
enum class EDriverPose : uint8
{
	Car                                      = 0,
	Boat                                     = 1,
	Hoverboard                               = 2,
	Num                                      = 3,
	EDriverPose_MAX                          = 4,
};

// Enum UnionSystem.EDriverType
// NumValues: 0x0007
enum class EDriverType : uint8
{
	Speed                                    = 0,
	Accele                                   = 1,
	Handle                                   = 2,
	Power                                    = 3,
	Dash                                     = 4,
	Num                                      = 5,
	EDriverType_MAX                          = 6,
};

// Enum UnionSystem.EErrorId
// NumValues: 0x0003
enum class EErrorId : uint8
{
	NonError                                 = 0,
	Num                                      = 1,
	EErrorId_MAX                             = 2,
};

// Enum UnionSystem.EOnlineErrorId
// NumValues: 0x0041
enum class EOnlineErrorId : uint8
{
	NonError                                 = 0,
	CommonError                              = 1,
	NoConnection                             = 2,
	NoConnectionNotOnline                    = 3,
	DisconnectHost                           = 4,
	DisconnectHostNotOnline                  = 5,
	DelayGameTime                            = 6,
	NoInputSignal                            = 7,
	ReverseRunRecoverCount                   = 8,
	FailedToSynchronize                      = 9,
	TimeOut                                  = 10,
	NoMatchFound                             = 11,
	SquadHostAbortedMatch                    = 12,
	SquadLobbyEntryBlocked                   = 13,
	FailedLogin                              = 14,
	FailedSaveServer                         = 15,
	NotOnline                                = 16,
	LogoutUser                               = 17,
	NoOnlinePrivilege                        = 18,
	ParentalControlled                       = 19,
	XBOXCommunicationBlocked                 = 20,
	HighTrafficProfile                       = 21,
	NoMatchCrossPlayy                        = 22,
	LobbyTooManyPlayers                      = 23,
	NoLobby                                  = 24,
	HostKicked                               = 25,
	HostBlocked                              = 26,
	AlreadyInLobby                           = 27,
	FailedCreatePrivateLobby                 = 28,
	ForeverBan                               = 29,
	TemporalBan                              = 30,
	ForeverBanNotification                   = 31,
	TemporalBanNotification                  = 32,
	NoSquadLobby                             = 33,
	DisconnectSquadHost                      = 34,
	NoConncectionBackTopMenu                 = 35,
	NoInternet                               = 36,
	NotLatestApplication                     = 37,
	PSNNotSignedIn                           = 38,
	XBOXNetworkNotSignedIn                   = 39,
	NewFestaStarted                          = 40,
	CurrentFestaEnded                        = 41,
	NewFreeContentsOpened                    = 42,
	LegendCompeStarted                       = 43,
	BanBackTopMenu                           = 44,
	Wireless_EntryLobbyPlayerFull            = 45,
	Wireless_EntryLobbyNotExists             = 46,
	Wireless_UnMatchedRomVersion             = 47,
	Wireless_EntryLobbyInRace                = 48,
	Wireless_EntryFailedError                = 49,
	Wireless_CommonError                     = 50,
	Wireless_ConnectionErrorNotOnline        = 51,
	LoginMaintenanceDisablePlay              = 52,
	LoginMaintenanceEnablePlayWithSchedule   = 53,
	LoginMaintenanceDisablePlayWithSchedule  = 54,
	LoginNsaIdTokenUserInfoRefresh           = 55,
	ExpiredShortLobbyId                      = 56,
	NoMatchGuestAndHostLobbyType             = 57,
	LobbyDeleted                             = 58,
	EpicAccountMismatch                      = 59,
	ReachedNetworkErrorLimit                 = 60,
	Wireless_TimeOut                         = 61,
	FailedSDKApi                             = 62,
	Num                                      = 63,
	EOnlineErrorId_MAX                       = 64,
};

// Enum UnionSystem.EErrorLevel
// NumValues: 0x0006
enum class EErrorLevel : uint8
{
	NonError                                 = 0,
	Warning                                  = 1,
	ForcedEnd                                = 2,
	SignedOut                                = 3,
	Num                                      = 4,
	EErrorLevel_MAX                          = 5,
};

// Enum UnionSystem.EUnionEventId
// NumValues: 0x000D
enum class EUnionEventId : uint8
{
	None                                     = 0,
	TravelRing                               = 1,
	RaceInitialized                          = 2,
	DomainStart                              = 3,
	DomainEnd                                = 4,
	FirstLapEnd                              = 5,
	SecondLapEnd                             = 6,
	StartFireworks                           = 7,
	StartEnemy                               = 8,
	StartGimmick                             = 9,
	ActiveDomainObject                       = 10,
	StageCommon                              = 11,
	EUnionEventId_MAX                        = 12,
};

// Enum UnionSystem.EExtraMenuType
// NumValues: 0x0003
enum class EExtraMenuType : uint8
{
	None                                     = 0,
	Num                                      = 1,
	EExtraMenuType_MAX                       = 2,
};

// Enum UnionSystem.EFestaRaceRule
// NumValues: 0x0005
enum class EFestaRaceRule : uint8
{
	NoFesta                                  = 0,
	DefaultFestaRule                         = 1,
	RingFestaRule                            = 2,
	ItemFestaRule                            = 3,
	EFestaRaceRule_MAX                       = 4,
};

// Enum UnionSystem.EFestaChanceUpType
// NumValues: 0x0006
enum class EFestaChanceUpType : uint8
{
	None                                     = 0,
	PointDoubleUp                            = 1,
	DonpaThreeTickets                        = 2,
	RandomGadjet                             = 3,
	Num                                      = 4,
	EFestaChanceUpType_MAX                   = 5,
};

// Enum UnionSystem.EFestaRewardType
// NumValues: 0x0006
enum class EFestaRewardType : uint8
{
	None                                     = 0,
	Nomal                                    = 1,
	Loop                                     = 2,
	Streak                                   = 3,
	Num                                      = 4,
	EFestaRewardType_MAX                     = 5,
};

// Enum UnionSystem.EFlagFile
// NumValues: 0x0003
enum class EFlagFile : uint8
{
	FF_CNT1_IN_PROGRESS                      = 0,
	FF_CRM_RESTRICTION                       = 1,
	FF_MAX                                   = 2,
};

// Enum UnionSystem.ERaceFrameRate
// NumValues: 0x0007
enum class ERaceFrameRate : uint8
{
	None                                     = 0,
	Fps25                                    = 1,
	Fps30                                    = 2,
	Fps50                                    = 3,
	Fps60                                    = 4,
	Num                                      = 5,
	ERaceFrameRate_MAX                       = 6,
};

// Enum UnionSystem.EFriendType
// NumValues: 0x0004
enum class EFriendType : uint8
{
	None                                     = 0,
	PlatformFriend                           = 1,
	AppFriend                                = 2,
	EFriendType_MAX                          = 3,
};

// Enum UnionSystem.EGadgetCategory
// NumValues: 0x000F
enum class EGadgetCategory : uint8
{
	Item                                     = 0,
	Run                                      = 1,
	Ring                                     = 2,
	Various                                  = 3,
	StarterKit                               = 4,
	MachineTypeKit                           = 5,
	CharacterTypeKit                         = 6,
	AdvancedKit                              = 7,
	ItemEnhanceAndAdd                        = 8,
	ItemBoxControll                          = 9,
	Support                                  = 10,
	Status                                   = 11,
	Technique                                = 12,
	RingAbility                              = 13,
	EGadgetCategory_MAX                      = 14,
};

// Enum UnionSystem.EGadgetId
// NumValues: 0x007D
enum class EGadgetId : uint8
{
	NonGadget                                = 0,
	Item1_TradeStock                         = 1,
	Item2_PlusStock                          = 2,
	Item3_AddWarp                            = 3,
	Item6_UpLuckAttack                       = 4,
	Item7_UpLuckDefence                      = 5,
	Item8_UpLuckSpeed                        = 6,
	Item9_UpLuckTrap                         = 7,
	Item10_EnhanceRocketPunch                = 8,
	Item11_UpLuckWisps                       = 9,
	Item12_EnhanceThornBall                  = 10,
	Item13_EnhanceBomb                       = 11,
	Item15_AddDoubleWisps                    = 12,
	Item16_InitialEquipeDarkchao             = 13,
	Item18_InitialEquipeWhiteWisp            = 14,
	Item21_InitialEquipeMonsterTruck         = 15,
	Item22_CreateItemNormal                  = 16,
	Item23_CreateItemSpeed                   = 17,
	Item24_CreateItemDefence                 = 18,
	Item25_CreateItemAttack                  = 19,
	Item26_CreateItemTrap                    = 20,
	Item27_DoubleItemOccasionally            = 21,
	Item28_DoubleItem                        = 22,
	Item29_DisableItemLost                   = 23,
	Run1_UltimateDrift                       = 24,
	Run2_QuickAirtrick                       = 25,
	Run3_SkateDrift                          = 26,
	Run4_JustDash                            = 27,
	Run6_FirstFastCharge                     = 28,
	Run7_SwitchDriftQuickCharge              = 29,
	Run8_SeconFastCharge                     = 30,
	Run9_ThirdFastCharge                     = 31,
	Run10_QuickAirtrickMini                  = 32,
	Run12_UltimateChargeAttack               = 33,
	Run13_UltimateChargeIgnoreRunOff         = 34,
	Run14_HyperChargeDrift                   = 35,
	Run15_SpinDrift                          = 36,
	Run16_ShortenDamageMotion                = 37,
	Run19_SuppressHitWallDeceleration        = 38,
	Run22_EnhanceGrip                        = 39,
	Run25_SpeedTune                          = 40,
	Run26_SpeedTuneBeta                      = 41,
	Run27_AccelTune                          = 42,
	Run28_AccelTuneBeta                      = 43,
	Run29_HandlingTune                       = 44,
	Run30_HandlingTuneBeta                   = 45,
	Run31_PowerTune                          = 46,
	Run32_PowerTuneBeta                      = 47,
	Run33_DashTune                           = 48,
	Run34_DashTuneBeta                       = 49,
	Run35_Starter                            = 50,
	Run36_SuperStarter                       = 51,
	Run37_Slowter                            = 52,
	Run38_SuperSlowter                       = 53,
	Run41_CourseOutGetWisp                   = 54,
	Run42_EnhanceHookTurn                    = 55,
	Run43_ImmuneItemDamageOnce               = 56,
	Run44_BoatChargeJumpUp                   = 57,
	Various2_TouchDash                       = 58,
	Various4_EnforceSlipstream               = 59,
	Ring1_DashUp                             = 60,
	Ring2_LostSpeed                          = 61,
	Ring4_UpperLimit                         = 62,
	Ring5_Stole                              = 63,
	Ring6_Guard                              = 64,
	Ring7_BonusDashPanel                     = 65,
	Ring8_RunoffNegateBonus                  = 66,
	Ring9_ExpandGetRingRange                 = 67,
	Ring10_ItemAttackRingBonus               = 68,
	Ring11_BonusRotateRing                   = 69,
	Ring12_BonusRotateRingMini               = 70,
	Ring13_SlipstreamBonus                   = 71,
	Ring14_BonusDashPanelMini                = 72,
	Ring15_BonusDashPanelCombo               = 73,
	Ring16_StoleMini                         = 74,
	Ring17_UpperLimitMini                    = 75,
	Ring18_DashUpMini                        = 76,
	Ring19_BonusDriftJust                    = 77,
	Ring20_BonusStartDashSecced              = 78,
	Ring21_BonusTravelRing                   = 79,
	Ring23_BonusTransformAction              = 80,
	Various5_LotsOfItems                     = 81,
	Various6_DamageSupport                   = 82,
	Various7_CollectRings                    = 83,
	Various8_JumpAction                      = 84,
	Various9_FastShortCut                    = 85,
	Various10_QuikenDriftCharge              = 86,
	Various11_SpeedMachineCustom             = 87,
	Various12_AccelMachineCustom             = 88,
	Various13_HandleMachineCustom            = 89,
	Various14_PowerMachineCustom             = 90,
	Various15_DashMachineCustom              = 91,
	Various16_SpeedCharaCustom               = 92,
	Various17_AccelCharaCustom               = 93,
	Various18_HandleCharaCustom              = 94,
	Various19_PowerCharaCustom               = 95,
	Various20_DashCharaCustom                = 96,
	Various21_RunAhead                       = 97,
	Various22_RunAheadBeta                   = 98,
	Various23_CatchUp                        = 99,
	Various25_PlaneOperateCustom             = 100,
	Various26_BoatOperateCustom              = 101,
	Various27_LotsOfWisps                    = 102,
	Various28_CollectRings2                  = 103,
	Various29_HandleCharaCustom2             = 104,
	Hidden01_2LapGetItem                     = 105,
	Hidden02_3LapGetItem                     = 106,
	Hidden03_DriftDashBonus                  = 107,
	Hidden04_ImmuneWeightAndBoomBooOnce      = 108,
	Hidden05_PlaneFormParamUP                = 109,
	Hidden06_BoatFormParamUP                 = 110,
	Hidden07_ShortenDamageMotionMini         = 111,
	Hidden08_ImmuneHitWallDamage             = 112,
	Hidden09_SuppressRunoff                  = 113,
	Item4_AddSplash                          = 114,
	Run23_BoatJumpSplash                     = 115,
	Ring3_DoubleRing                         = 116,
	Run5_AddActionBoatPlane                  = 117,
	Various1_TeamFriendDash                  = 118,
	Various5_TeamEnforceSlipstream           = 119,
	ShortenDamageTime                        = 120,
	LowRankRingBonus                         = 121,
	ShortenItemSlotTime                      = 122,
	Num                                      = 123,
	EGadgetId_MAX                            = 124,
};

// Enum UnionSystem.EGameTaskType
// NumValues: 0x0004
enum class EGameTaskType : uint8
{
	None                                     = 0,
	WinAll                                   = 1,
	BeatAllRival                             = 2,
	EGameTaskType_MAX                        = 3,
};

// Enum UnionSystem.EGhostResultType
// NumValues: 0x0006
enum class EGhostResultType : uint8
{
	Non                                      = 0,
	Processing                               = 1,
	Success                                  = 2,
	Failed                                   = 3,
	Cancel                                   = 4,
	EGhostResultType_MAX                     = 5,
};

// Enum UnionSystem.EDownloadState
// NumValues: 0x0004
enum class EDownloadState : uint8
{
	None                                     = 0,
	Ranking                                  = 1,
	Ghost                                    = 2,
	EDownloadState_MAX                       = 3,
};

// Enum UnionSystem.EGrandPrixRivalResult
// NumValues: 0x0004
enum class EGrandPrixRivalResult : uint8
{
	Invalid                                  = 0,
	Win                                      = 1,
	Lose                                     = 2,
	EGrandPrixRivalResult_MAX                = 3,
};

// Enum UnionSystem.EGrandPrixEndingId
// NumValues: 0x0005
enum class EGrandPrixEndingId : uint8
{
	OrbotCubotEnding                         = 0,
	MemoryEnding                             = 1,
	Num                                      = 2,
	Invalid                                  = 255,
	EGrandPrixEndingId_MAX                   = 256,
};

// Enum UnionSystem.EGrandPrixId
// NumValues: 0x0017
enum class EGrandPrixId : uint8
{
	InValid                                  = 0,
	Purple_01                                = 1,
	Yellow_02                                = 2,
	Red_03                                   = 3,
	Blue_04                                  = 4,
	Cyan_05                                  = 5,
	White_06                                 = 6,
	Green_07                                 = 7,
	SegaGP_01                                = 8,
	SegaGP_02                                = 9,
	SegaGP_03                                = 10,
	Collabo_01                               = 11,
	Collabo_02                               = 12,
	Collabo_03                               = 13,
	AnotherWorld                             = 14,
	Num                                      = 15,
	FirstGP                                  = 1,
	FinalGP                                  = 7,
	OpenFinalGPTargetNum                     = 7,
	FinalExtraGP                             = 8,
	FirstCollaboGP                           = 11,
	FinalCollaboGP                           = 12,
	EGrandPrixId_MAX                         = 16,
};

// Enum UnionSystem.EGrandPrixProgressId
// NumValues: 0x0009
enum class EGrandPrixProgressId : uint8
{
	None                                     = 0,
	Bronze_Ticket                            = 1,
	Bronze                                   = 2,
	Silver_Ticket                            = 3,
	Silver                                   = 4,
	Gold_Ticket                              = 5,
	Gold                                     = 6,
	Num                                      = 7,
	EGrandPrixProgressId_MAX                 = 8,
};

// Enum UnionSystem.EGroupColorId
// NumValues: 0x005B
enum class EGroupColorId : uint8
{
	None                                     = 0,
	Player1                                  = 1,
	Player2                                  = 2,
	Player3                                  = 3,
	Player4                                  = 4,
	CPU                                      = 5,
	Rival                                    = 6,
	DefaultGroupA                            = 7,
	DefaultGroupB                            = 8,
	DefaultGroupC                            = 9,
	Festa0GroupA                             = 10,
	Festa0GroupB                             = 11,
	Festa0GroupC                             = 12,
	Festa0GroupD                             = 13,
	Festa1GroupA                             = 14,
	Festa1GroupB                             = 15,
	Festa1GroupC                             = 16,
	Festa1GroupD                             = 17,
	Festa2GroupA                             = 18,
	Festa2GroupB                             = 19,
	Festa2GroupC                             = 20,
	Festa2GroupD                             = 21,
	Festa3GroupA                             = 22,
	Festa3GroupB                             = 23,
	Festa3GroupC                             = 24,
	Festa3GroupD                             = 25,
	Festa4GroupA                             = 26,
	Festa4GroupB                             = 27,
	Festa4GroupC                             = 28,
	Festa4GroupD                             = 29,
	Festa5GroupA                             = 30,
	Festa5GroupB                             = 31,
	Festa5GroupC                             = 32,
	Festa5GroupD                             = 33,
	Festa6GroupA                             = 34,
	Festa6GroupB                             = 35,
	Festa6GroupC                             = 36,
	Festa6GroupD                             = 37,
	Festa7GroupA                             = 38,
	Festa7GroupB                             = 39,
	Festa7GroupC                             = 40,
	Festa7GroupD                             = 41,
	Festa8GroupA                             = 42,
	Festa8GroupB                             = 43,
	Festa8GroupC                             = 44,
	Festa8GroupD                             = 45,
	Festa9GroupA                             = 46,
	Festa9GroupB                             = 47,
	Festa9GroupC                             = 48,
	Festa9GroupD                             = 49,
	Festa10GroupA                            = 50,
	Festa10GroupB                            = 51,
	Festa10GroupC                            = 52,
	Festa10GroupD                            = 53,
	Festa11GroupA                            = 54,
	Festa11GroupB                            = 55,
	Festa11GroupC                            = 56,
	Festa11GroupD                            = 57,
	Festa12GroupA                            = 58,
	Festa12GroupB                            = 59,
	Festa12GroupC                            = 60,
	Festa12GroupD                            = 61,
	Festa13GroupA                            = 62,
	Festa13GroupB                            = 63,
	Festa13GroupC                            = 64,
	Festa13GroupD                            = 65,
	Festa14GroupA                            = 66,
	Festa14GroupB                            = 67,
	Festa14GroupC                            = 68,
	Festa14GroupD                            = 69,
	Festa15GroupA                            = 70,
	Festa15GroupB                            = 71,
	Festa15GroupC                            = 72,
	Festa15GroupD                            = 73,
	Festa16GroupA                            = 74,
	Festa16GroupB                            = 75,
	Festa16GroupC                            = 76,
	Festa16GroupD                            = 77,
	Festa17GroupA                            = 78,
	Festa17GroupB                            = 79,
	Festa17GroupC                            = 80,
	Festa17GroupD                            = 81,
	Festa18GroupA                            = 82,
	Festa18GroupB                            = 83,
	Festa18GroupC                            = 84,
	Festa18GroupD                            = 85,
	Festa99GroupA                            = 86,
	Festa99GroupB                            = 87,
	Festa99GroupC                            = 88,
	Num                                      = 89,
	EGroupColorId_MAX                        = 90,
};

// Enum UnionSystem.EGroupRaceRule
// NumValues: 0x007C
enum class EGroupRaceRule : uint8
{
	None                                     = 0,
	TouchDash                                = 1,
	AllTouchDash                             = 2,
	JumpTrick                                = 3,
	DashPanel                                = 4,
	RocketPunch                              = 5,
	DriftFest                                = 6,
	SpinDrift                                = 7,
	JustDash                                 = 8,
	Slipstream                               = 9,
	ItemFest                                 = 10,
	BlackBombFest                            = 11,
	BoomBooFest                              = 12,
	OddNumRank                               = 13,
	RingGet                                  = 14,
	RingGetSteal                             = 15,
	RingGetDashPanelBonus                    = 16,
	RingGetRunoffBonus                       = 17,
	ItemHitRocketPunch                       = 18,
	ItemHitAttackItem                        = 19,
	CustomRule01                             = 20,
	CustomRule02                             = 21,
	CustomRule03                             = 22,
	FestaRule00                              = 23,
	FestaRule01                              = 24,
	FestaRule02                              = 25,
	FestaRule03                              = 26,
	FestaRule04                              = 27,
	FestaRule05                              = 28,
	FestaRule06                              = 29,
	FestaRule07                              = 30,
	FestaRule08                              = 31,
	FestaRule09                              = 32,
	FestaRule10                              = 33,
	FestaRule11                              = 34,
	FestaRule12                              = 35,
	FestaRule13                              = 36,
	FestaRule14                              = 37,
	FestaRule15                              = 38,
	FestaRule16                              = 39,
	FestaRule17                              = 40,
	FestaRule18                              = 41,
	FestaRule19                              = 42,
	FestaRule20                              = 43,
	FestaRule21                              = 44,
	FestaRule22                              = 45,
	FestaRule23                              = 46,
	FestaRule24                              = 47,
	FestaRule25                              = 48,
	FestaRule26                              = 49,
	FestaRule27                              = 50,
	FestaRule28                              = 51,
	FestaRule29                              = 52,
	FestaRule30                              = 53,
	FestaRule31                              = 54,
	FestaRule32                              = 55,
	FestaRule33                              = 56,
	FestaRule34                              = 57,
	FestaRule35                              = 58,
	FestaRule36                              = 59,
	FestaRule37                              = 60,
	FestaRule38                              = 61,
	FestaRule39                              = 62,
	FestaRule40                              = 63,
	FestaRule41                              = 64,
	FestaRule42                              = 65,
	FestaRule43                              = 66,
	FestaRule44                              = 67,
	FestaRule45                              = 68,
	FestaRule46                              = 69,
	FestaRule47                              = 70,
	FestaRule48                              = 71,
	FestaRule49                              = 72,
	FestaRule50                              = 73,
	FestaRule51                              = 74,
	FestaRule52                              = 75,
	FestaRule53                              = 76,
	FestaRule54                              = 77,
	FestaRule55                              = 78,
	FestaRule56                              = 79,
	FestaRule57                              = 80,
	FestaRule58                              = 81,
	FestaRule59                              = 82,
	FestaRule60                              = 83,
	FestaRule61                              = 84,
	FestaRule62                              = 85,
	FestaRule63                              = 86,
	FestaRule64                              = 87,
	FestaRule65                              = 88,
	FestaRule66                              = 89,
	FestaRule67                              = 90,
	FestaRule68                              = 91,
	FestaRule69                              = 92,
	FestaRule70                              = 93,
	FestaRule71                              = 94,
	FestaRule72                              = 95,
	FestaRule73                              = 96,
	FestaRule74                              = 97,
	FestaRule75                              = 98,
	FestaRule76                              = 99,
	FestaRule77                              = 100,
	FestaRule78                              = 101,
	FestaRule79                              = 102,
	FestaRule80                              = 103,
	FestaRule81                              = 104,
	FestaRule82                              = 105,
	FestaRule83                              = 106,
	FestaRule84                              = 107,
	FestaRule85                              = 108,
	FestaRule86                              = 109,
	FestaRule87                              = 110,
	FestaRule88                              = 111,
	FestaRule89                              = 112,
	FestaRule90                              = 113,
	FestaRule91                              = 114,
	FestaRule92                              = 115,
	FestaRule93                              = 116,
	FestaRule94                              = 117,
	FestaRule95                              = 118,
	FestaRule96                              = 119,
	FestaRule97                              = 120,
	FestaRule98                              = 121,
	FestaRule99                              = 122,
	EGroupRaceRule_MAX                       = 123,
};

// Enum UnionSystem.EGroupRaceItemLotteryCorrectionType
// NumValues: 0x0006
enum class EGroupRaceItemLotteryCorrectionType : uint8
{
	None                                     = 0,
	RingRelatedItems                         = 1,
	RocketPunch                              = 2,
	BlackBomb                                = 3,
	BoomBoo                                  = 4,
	EGroupRaceItemLotteryCorrectionType_MAX  = 5,
};

// Enum UnionSystem.EEnergyAddBehaviorType
// NumValues: 0x000F
enum class EEnergyAddBehaviorType : uint8
{
	UnKnown                                  = 0,
	ItemHit                                  = 1,
	TouchDash                                = 2,
	AllTouchDash                             = 3,
	DriftDash                                = 4,
	AirTrick                                 = 5,
	DashPanel                                = 6,
	DriftCharge                              = 7,
	JustDash                                 = 8,
	SpinDrift                                = 9,
	Ring                                     = 10,
	Slipstream                               = 11,
	OddNumRank                               = 12,
	Num                                      = 13,
	EEnergyAddBehaviorType_MAX               = 14,
};

// Enum UnionSystem.EGroupBonusType
// NumValues: 0x0011
enum class EGroupBonusType : uint8
{
	UnKnown                                  = 0,
	GetRing                                  = 1,
	ItemHit                                  = 2,
	DriftBoost                               = 3,
	ChargeDashMax                            = 4,
	JustDash                                 = 5,
	SpinDrift                                = 6,
	AirTrickRotation                         = 7,
	TouchDash                                = 8,
	AllTouchDash                             = 9,
	RocketPunchHit                           = 10,
	DashPanel                                = 11,
	Slipstream                               = 12,
	OddNumRank                               = 13,
	Extreme                                  = 14,
	Num                                      = 15,
	EGroupBonusType_MAX                      = 16,
};

// Enum UnionSystem.EHintId
// NumValues: 0x0099
enum class EHintId : uint8
{
	None                                     = 0,
	Tips10001                                = 1,
	Tips10002                                = 2,
	Tips10003                                = 3,
	Tips10004                                = 4,
	Tips10005                                = 5,
	Tips10006                                = 6,
	Tips10007                                = 7,
	Tips10008                                = 8,
	Tips10009                                = 9,
	Tips10010                                = 10,
	Tips10011                                = 11,
	Tips10012                                = 12,
	Tips10013                                = 13,
	Tips10014                                = 14,
	Tips10015                                = 15,
	Tips10016                                = 16,
	Tips10017                                = 17,
	Tips10018                                = 18,
	Tips10019                                = 19,
	Tips10020                                = 20,
	Tips10021                                = 21,
	Tips10022                                = 22,
	Tips10023                                = 23,
	Tips10024                                = 24,
	Tips10025                                = 25,
	Tips10026                                = 26,
	Tips10027                                = 27,
	Tips10028                                = 28,
	Tips10029                                = 29,
	Tips10030                                = 30,
	Tips10031                                = 31,
	Tips10032                                = 32,
	Tips10033                                = 33,
	Tips10034                                = 34,
	Tips10035                                = 35,
	Tips10036                                = 36,
	Tips10037                                = 37,
	Tips10038                                = 38,
	Tips10039                                = 39,
	Tips10040                                = 40,
	Tips10041                                = 41,
	Tips10042                                = 42,
	Tips10043                                = 43,
	Tips10044                                = 44,
	Tips10045                                = 45,
	Tips10046                                = 46,
	Tips10047                                = 47,
	Tips10048                                = 48,
	Tips10049                                = 49,
	Tips10050                                = 50,
	Tips11001                                = 51,
	Tips11002                                = 52,
	Tips11003                                = 53,
	Tips11004                                = 54,
	Tips11005                                = 55,
	Tips11006                                = 56,
	Tips11007                                = 57,
	Tips11008                                = 58,
	Tips11009                                = 59,
	Tips11010                                = 60,
	Tips11011                                = 61,
	Tips11012                                = 62,
	Tips11013                                = 63,
	Tips11014                                = 64,
	Tips11015                                = 65,
	Tips11016                                = 66,
	Tips11017                                = 67,
	Tips11018                                = 68,
	Tips11019                                = 69,
	Tips11020                                = 70,
	Tips11021                                = 71,
	Tips11022                                = 72,
	Tips11023                                = 73,
	Tips11024                                = 74,
	Tips11025                                = 75,
	Tips11026                                = 76,
	Tips11027                                = 77,
	Tips11028                                = 78,
	Tips11029                                = 79,
	Tips11030                                = 80,
	Tips11031                                = 81,
	Tips11032                                = 82,
	Tips11033                                = 83,
	Tips11034                                = 84,
	Tips11035                                = 85,
	Tips11036                                = 86,
	Tips11037                                = 87,
	Tips11038                                = 88,
	Tips11039                                = 89,
	Tips11040                                = 90,
	Tips11041                                = 91,
	Tips11042                                = 92,
	Tips11043                                = 93,
	Tips11044                                = 94,
	Tips11045                                = 95,
	Tips11046                                = 96,
	Tips11047                                = 97,
	Tips11048                                = 98,
	Tips11049                                = 99,
	Tips11050                                = 100,
	Tips11051                                = 101,
	Tips11052                                = 102,
	Tips11053                                = 103,
	Tips11054                                = 104,
	Tips11055                                = 105,
	Tips11056                                = 106,
	Tips11057                                = 107,
	Tips11058                                = 108,
	Tips11059                                = 109,
	Tips11060                                = 110,
	Tips11061                                = 111,
	Tips11062                                = 112,
	Tips11063                                = 113,
	Tips11064                                = 114,
	Tips11065                                = 115,
	Tips11066                                = 116,
	Tips11067                                = 117,
	Tips11068                                = 118,
	Tips11069                                = 119,
	Tips11070                                = 120,
	Tips11071                                = 121,
	Tips11072                                = 122,
	Tips11073                                = 123,
	Tips11074                                = 124,
	Tips11075                                = 125,
	Tips11076                                = 126,
	Tips11077                                = 127,
	Tips11078                                = 128,
	Tips11079                                = 129,
	Tips11080                                = 130,
	Tips11081                                = 131,
	Tips11082                                = 132,
	Tips11083                                = 133,
	Tips11084                                = 134,
	Tips11085                                = 135,
	Tips11086                                = 136,
	Tips11087                                = 137,
	Tips11088                                = 138,
	Tips11089                                = 139,
	Tips11090                                = 140,
	Tips11091                                = 141,
	Tips11092                                = 142,
	Tips11093                                = 143,
	Tips11094                                = 144,
	Tips11095                                = 145,
	Tips11096                                = 146,
	Tips11097                                = 147,
	Tips11098                                = 148,
	Tips11099                                = 149,
	Tips11100                                = 150,
	Num                                      = 151,
	EHintId_MAX                              = 152,
};

// Enum UnionSystem.EHintCategory
// NumValues: 0x000D
enum class EHintCategory : uint8
{
	None                                     = 0,
	Control                                  = 1,
	Item                                     = 2,
	Course                                   = 3,
	GrandPrix                                = 4,
	PartyRace                                = 5,
	TimeTrial                                = 6,
	Challenge                                = 7,
	Lobby                                    = 8,
	RankMatch                                = 9,
	Other                                    = 10,
	Num                                      = 11,
	EHintCategory_MAX                        = 12,
};

// Enum UnionSystem.EHonorTitleFontColor
// NumValues: 0x0006
enum class EHonorTitleFontColor : uint8
{
	Default                                  = 0,
	Bronze                                   = 1,
	Silver                                   = 2,
	Gold                                     = 3,
	Rainbow                                  = 4,
	EHonorTitleFontColor_MAX                 = 5,
};

// Enum UnionSystem.EInputMappingOptions
// NumValues: 0x0004
enum class EInputMappingOptions : uint8
{
	None                                     = 0,
	Keyboard                                 = 1,
	OnlyDebug                                = 2,
	EInputMappingOptions_MAX                 = 3,
};

// Enum UnionSystem.EIrregularEventId
// NumValues: 0x000F
enum class EIrregularEventId : uint8
{
	None                                     = 0,
	MiniMachine                              = 1,
	QuickDriftCharge                         = 2,
	StaticItemCategory                       = 3,
	UnlimitedRocketPunches                   = 4,
	ItemBoxFull                              = 5,
	DashGateFull                             = 6,
	UnlimitedThornBalls                      = 7,
	UnlimitedBlackBomb                       = 8,
	UnlimitedSlicer                          = 9,
	UnlimitedWhiteBoost                      = 10,
	UnlimitedMonsterTruck                    = 11,
	UnlimitedSplash                          = 12,
	Num                                      = 13,
	EIrregularEventId_MAX                    = 14,
};

// Enum UnionSystem.EItemId
// NumValues: 0x0023
enum class EItemId : uint8
{
	NonItem                                  = 0,
	PackageRing                              = 1,
	HomingPunch                              = 2,
	YellowDrill                              = 3,
	ThornBall                                = 4,
	WhiteBoost                               = 5,
	MonsterTruck                             = 6,
	KingBoomBoo                              = 7,
	RocketPunch                              = 8,
	KingWhiteBoost                           = 9,
	CyanLaser                                = 10,
	VioletVoid                               = 11,
	BodyCut                                  = 12,
	Slicer                                   = 13,
	Slime                                    = 14,
	Splash                                   = 15,
	DarkChao                                 = 16,
	Magnet                                   = 17,
	BlackBomb                                = 18,
	BlackBomb_Lv2                            = 19,
	BlackBomb_Lv3                            = 20,
	WarpRing                                 = 21,
	Omochao                                  = 22,
	Shield                                   = 23,
	DoubleWhiteBoost                         = 24,
	DoubleHomingPunch                        = 25,
	TripleHomingPunch                        = 26,
	DoubleRocketPunch                        = 27,
	TripleRocketPunch                        = 28,
	TeamWarpRing                             = 29,
	Weight                                   = 30,
	Extnd09                                  = 31,
	Num                                      = 32,
	LostItemBox                              = 33,
	EItemId_MAX                              = 34,
};

// Enum UnionSystem.EItemCategoryType
// NumValues: 0x0006
enum class EItemCategoryType : uint8
{
	Non                                      = 0,
	Myself                                   = 1,
	Target                                   = 2,
	Groud                                    = 3,
	Num                                      = 4,
	EItemCategoryType_MAX                    = 5,
};

// Enum UnionSystem.EItemRarityType
// NumValues: 0x0004
enum class EItemRarityType : uint8
{
	Normal                                   = 0,
	Rare                                     = 1,
	Num                                      = 2,
	EItemRarityType_MAX                      = 3,
};

// Enum UnionSystem.EItemUseType
// NumValues: 0x0006
enum class EItemUseType : uint8
{
	Once                                     = 0,
	MultipleTimes                            = 1,
	Timer                                    = 2,
	MeasuringTimer                           = 3,
	Num                                      = 4,
	EItemUseType_MAX                         = 5,
};

// Enum UnionSystem.EEnemyItemId
// NumValues: 0x0003
enum class EEnemyItemId : uint8
{
	NonItem                                  = 0,
	T_Rex                                    = 10,
	EEnemyItemId_MAX                         = 11,
};

// Enum UnionSystem.EItemBoxType
// NumValues: 0x000A
enum class EItemBoxType : uint8
{
	Normal                                   = 0,
	Double                                   = 1,
	Special                                  = 2,
	Irregular                                = 3,
	Triple                                   = 4,
	Extnd09                                  = 5,
	ReLottery                                = 8,
	Reserve                                  = 14,
	Num                                      = 15,
	EItemBoxType_MAX                         = 16,
};

// Enum UnionSystem.EItemThrowType
// NumValues: 0x0007
enum class EItemThrowType : uint8
{
	Front                                    = 0,
	Front_Back                               = 1,
	Back                                     = 2,
	Back_Front                               = 3,
	Myself                                   = 4,
	Num                                      = 5,
	EItemThrowType_MAX                       = 6,
};

// Enum UnionSystem.EItemThrowDirection
// NumValues: 0x0004
enum class EItemThrowDirection : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Myself                                   = 2,
	EItemThrowDirection_MAX                  = 3,
};

// Enum UnionSystem.EItemStatus
// NumValues: 0x0008
enum class EItemStatus : uint8
{
	NonItem                                  = 0,
	Lottery                                  = 1,
	EndRequest                               = 2,
	Available                                = 3,
	Activating                               = 4,
	Upgrade                                  = 5,
	ChargingGauge                            = 6,
	EItemStatus_MAX                          = 7,
};

// Enum UnionSystem.EItemUsage
// NumValues: 0x0006
enum class EItemUsage : uint8
{
	None                                     = 0,
	Accel                                    = 1,
	Defense                                  = 2,
	Offense                                  = 3,
	Place                                    = 4,
	EItemUsage_MAX                           = 5,
};

// Enum UnionSystem.EItemCancelType
// NumValues: 0x000A
enum class EItemCancelType : uint8
{
	Unknown                                  = 0,
	ForcedTermination                        = 1,
	FootCut                                  = 2,
	Depleted                                 = 3,
	Goaled                                   = 4,
	Upgrade                                  = 5,
	TradeItem                                = 6,
	Lost                                     = 7,
	ReLottery                                = 8,
	EItemCancelType_MAX                      = 9,
};

// Enum UnionSystem.EItemInfoType
// NumValues: 0x0005
enum class EItemInfoType : uint8
{
	First                                    = 0,
	Second                                   = 1,
	Third                                    = 2,
	Num                                      = 3,
	EItemInfoType_MAX                        = 4,
};

// Enum UnionSystem.EItemBoxRelocateType
// NumValues: 0x0007
enum class EItemBoxRelocateType : uint8
{
	Normal                                   = 0,
	RankMatch                                = 1,
	LegendMatch                              = 2,
	Festa                                    = 3,
	FriendMatch                              = 4,
	LocalCommunication                       = 5,
	EItemBoxRelocateType_MAX                 = 6,
};

// Enum UnionSystem.ELotteryTableType
// NumValues: 0x0006
enum class ELotteryTableType : uint8
{
	Unknown                                  = 0,
	GrandPrix                                = 1,
	Group                                    = 2,
	Dangerous                                = 3,
	Other                                    = 4,
	ELotteryTableType_MAX                    = 5,
};

// Enum UnionSystem.ERaceSettingItemAppearanceRule
// NumValues: 0x0004
enum class ERaceSettingItemAppearanceRule : uint8
{
	Normal                                   = 0,
	Extreme                                  = 1,
	Revenge                                  = 2,
	ERaceSettingItemAppearanceRule_MAX       = 3,
};

// Enum UnionSystem.EHoldItemMeshType
// NumValues: 0x0005
enum class EHoldItemMeshType : uint8
{
	StaticMesh                               = 0,
	SkeletalMesh                             = 1,
	VertexAnimationTexture                   = 2,
	Num                                      = 3,
	EHoldItemMeshType_MAX                    = 4,
};

// Enum UnionSystem.EAvailableLap
// NumValues: 0x0006
enum class EAvailableLap : uint8
{
	NONE                                     = 0,
	FIRST_SECOUND_LAP                        = 1,
	FINAL_LAP                                = 2,
	ALL                                      = 3,
	Num                                      = 4,
	EAvailableLap_MAX                        = 5,
};

// Enum UnionSystem.EKeyConfigMenu
// NumValues: 0x000B
enum class EKeyConfigMenu : uint8
{
	AcceptKeyInverse                         = 0,
	ButtonAppearance                         = 1,
	SelectPlayer                             = 2,
	AssistHandle                             = 3,
	AssistAccel                              = 4,
	AssistTrick                              = 5,
	GyroTrick                                = 6,
	ForceFeedback                            = 7,
	OperationType                            = 8,
	KeyConfig                                = 9,
	EKeyConfigMenu_MAX                       = 10,
};

// Enum UnionSystem.EKeyConfigRace
// NumValues: 0x0011
enum class EKeyConfigRace : uint8
{
	SteerL                                   = 0,
	SteerR                                   = 1,
	PitchU                                   = 2,
	PitchD                                   = 3,
	TrickL                                   = 4,
	TrickR                                   = 5,
	TrickU                                   = 6,
	TrickD                                   = 7,
	Accel                                    = 8,
	Brake                                    = 9,
	RearView                                 = 10,
	UseItem                                  = 11,
	Drift                                    = 12,
	Gadget                                   = 13,
	Horn                                     = 14,
	Pause                                    = 15,
	EKeyConfigRace_MAX                       = 16,
};

// Enum UnionSystem.EMenuControllerViewType
// NumValues: 0x0006
enum class EMenuControllerViewType : uint8
{
	Auto                                     = 0,
	DualShock4                               = 1,
	DualSence                                = 2,
	XInput                                   = 3,
	SwitchPro                                = 4,
	EMenuControllerViewType_MAX              = 5,
};

// Enum UnionSystem.EMenuControllerTutorialTipsViewType
// NumValues: 0x000A
enum class EMenuControllerTutorialTipsViewType : uint8
{
	PS4                                      = 0,
	PS5                                      = 1,
	SwitchPro                                = 2,
	SwitchDualJoyCon                         = 3,
	SwitchJoyConSingle                       = 4,
	SwitchHandheld                           = 5,
	Windows                                  = 6,
	XBOne                                    = 7,
	XBX                                      = 8,
	EMenuControllerTutorialTipsViewType_MAX  = 9,
};

// Enum UnionSystem.EControllerButtonTextureType
// NumValues: 0x0007
enum class EControllerButtonTextureType : uint8
{
	PS4                                      = 0,
	PS5                                      = 1,
	NX                                       = 2,
	NX_JoyCon                                = 3,
	XBOX                                     = 4,
	Num                                      = 5,
	EControllerButtonTextureType_MAX         = 6,
};

// Enum UnionSystem.EControllerButtonGameType
// NumValues: 0x0003
enum class EControllerButtonGameType : uint8
{
	Menu                                     = 0,
	Race                                     = 1,
	EControllerButtonGameType_MAX            = 2,
};

// Enum UnionSystem.EControllerButtonType
// NumValues: 0x0007
enum class EControllerButtonType : uint8
{
	GamePadFaceButton                        = 0,
	GamePadOthers                            = 1,
	KeyBoardShort                            = 2,
	KeyBoardLong                             = 3,
	KeyBoardArrow                            = 4,
	Mouse                                    = 5,
	EControllerButtonType_MAX                = 6,
};

// Enum UnionSystem.EControllerButtonDirectionType
// NumValues: 0x0009
enum class EControllerButtonDirectionType : uint8
{
	None                                     = 0,
	Up                                       = 1,
	Right                                    = 2,
	Down                                     = 3,
	Left                                     = 4,
	RightLeft                                = 5,
	UpDown                                   = 6,
	Roll                                     = 7,
	EControllerButtonDirectionType_MAX       = 8,
};

// Enum UnionSystem.EControllerFaceButtonType
// NumValues: 0x0005
enum class EControllerFaceButtonType : uint8
{
	FaceUp                                   = 0,
	FaceRight                                = 1,
	FaceDown                                 = 2,
	FaceLeft                                 = 3,
	EControllerFaceButtonType_MAX            = 4,
};

// Enum UnionSystem.EControllerButtonTextureIndex
// NumValues: 0x0034
enum class EControllerButtonTextureIndex : uint8
{
	L1                                       = 0,
	R1                                       = 1,
	L2                                       = 2,
	R2                                       = 3,
	L_Tmp1                                   = 4,
	R_Tmp1                                   = 5,
	L_Tmp2                                   = 6,
	R_Tmp2                                   = 7,
	Face_Tmp1                                = 8,
	Face_Tmp2                                = 9,
	Face_Tmp3                                = 10,
	Face_Tmp4                                = 11,
	FaceUp                                   = 12,
	FaceRight                                = 13,
	FaceDown                                 = 14,
	FaceLeft                                 = 15,
	LStick                                   = 16,
	LStickUpDown                             = 17,
	LStickLeftRight                          = 18,
	LStickPush                               = 19,
	LStickUp                                 = 20,
	LStickRight                              = 21,
	LStickDown                               = 22,
	LStickLeft                               = 23,
	RStick                                   = 24,
	RStickUpDown                             = 25,
	RStickLeftRight                          = 26,
	RStickPush                               = 27,
	RStickUp                                 = 28,
	RStickRight                              = 29,
	RStickDown                               = 30,
	RStickLeft                               = 31,
	LStickRoll                               = 32,
	RStickRoll                               = 33,
	LStickTmp1                               = 34,
	RStickTmp1                               = 35,
	LStickTmp2                               = 36,
	RStickTmp2                               = 37,
	LStickTmp3                               = 38,
	RStickTmp3                               = 39,
	Cross                                    = 40,
	CrossUpDown                              = 41,
	CrossLeftRight                           = 42,
	CrossTmp1                                = 43,
	CrossUp                                  = 44,
	CrossRight                               = 45,
	CrossDown                                = 46,
	CrossLeft                                = 47,
	Start                                    = 48,
	Select                                   = 49,
	Center                                   = 50,
	EControllerButtonTextureIndex_MAX        = 51,
};

// Enum UnionSystem.EMenuKeyboardButtonTextureIndex
// NumValues: 0x0021
enum class EMenuKeyboardButtonTextureIndex : uint8
{
	L1_Q_A                                   = 0,
	R1_E_E                                   = 1,
	L2_Q_A                                   = 2,
	R2_E_E                                   = 3,
	FaceUp_T_T                               = 4,
	FaceRight_C_C                            = 5,
	FaceDown_Space_Space                     = 6,
	FaceLeft_F_F                             = 7,
	LStick_WASD_ZQSD                         = 8,
	LStickUpDown_WS_ZS                       = 9,
	LStickLeftRight_AD_QD                    = 10,
	LStickButton_H_H                         = 11,
	LStickUp_W_Z                             = 12,
	LStickRight_D_D                          = 13,
	LStickDown_S_S                           = 14,
	LStickLeft_A_Z                           = 15,
	RStick_IJKL_IJKL                         = 16,
	RStickUpDown_IK_IK                       = 17,
	RStickLeftRight_JL_JL                    = 18,
	RStickButton_N_N                         = 19,
	RStickUp_I_I                             = 20,
	RStickRight_L_L                          = 21,
	RStickDown_K_K                           = 22,
	RStickLeft_J_J                           = 23,
	LStickRoll_WASD_ZQSD                     = 24,
	RStickRoll_IJKL_IJKL                     = 25,
	Empty_26                                 = 26,
	Empty_27                                 = 27,
	Empty_28                                 = 28,
	Empty_29                                 = 29,
	Empty_30                                 = 30,
	Special_Tab_Tab                          = 31,
	EMenuKeyboardButtonTextureIndex_MAX      = 32,
};

// Enum UnionSystem.EKeyConfigOperationType
// NumValues: 0x0006
enum class EKeyConfigOperationType : uint8
{
	TypeA                                    = 0,
	TypeB                                    = 1,
	TypeC                                    = 2,
	Custom                                   = 3,
	Num                                      = 4,
	EKeyConfigOperationType_MAX              = 5,
};

// Enum UnionSystem.EKeyConfigDeviceType
// NumValues: 0x0003
enum class EKeyConfigDeviceType : uint8
{
	Gamepad                                  = 0,
	Keyboard                                 = 1,
	EKeyConfigDeviceType_MAX                 = 2,
};

// Enum UnionSystem.ELobbyContextStatus
// NumValues: 0x0008
enum class ELobbyContextStatus : uint8
{
	Idle                                     = 0,
	Creating                                 = 1,
	Joining                                  = 2,
	PendingExit                              = 3,
	PendingDestroy                           = 4,
	Searching                                = 5,
	UpdatingLobby                            = 6,
	ELobbyContextStatus_MAX                  = 7,
};

// Enum UnionSystem.EConnectionResult
// NumValues: 0x0004
enum class EConnectionResult : uint8
{
	Wait                                     = 0,
	Complete                                 = 1,
	Error                                    = 2,
	EConnectionResult_MAX                    = 3,
};

// Enum UnionSystem.ELobbyInviteType
// NumValues: 0x0004
enum class ELobbyInviteType : uint8
{
	None                                     = 0,
	FriendInvite                             = 1,
	SearchLobbyId                            = 2,
	ELobbyInviteType_MAX                     = 3,
};

// Enum UnionSystem.ELobbyErrorType
// NumValues: 0x000F
enum class ELobbyErrorType : uint8
{
	Success                                  = 0,
	InternalError                            = 1,
	Timeout                                  = 2,
	EOSError                                 = 3,
	InviteBlocked                            = 4,
	OtherMemberInRace                        = 5,
	TooManyPlayers                           = 6,
	Kicked                                   = 7,
	Blocked                                  = 8,
	NotFound                                 = 9,
	AlreadyInLobby                           = 10,
	DuplicateExecution                       = 11,
	RomVersion                               = 12,
	ConnectionRejected                       = 13,
	ELobbyErrorType_MAX                      = 14,
};

// Enum UnionSystem.ELobbySubsystemLobbySearchQueryFilterComparator
// NumValues: 0x0007
enum class ELobbySubsystemLobbySearchQueryFilterComparator : uint8
{
	Equal                                    = 0,
	NotEqual                                 = 1,
	LessThan                                 = 2,
	LessThanOrEqual                          = 3,
	GreaterThan                              = 4,
	GreaterThanOrEqual                       = 5,
	ELobbySubsystemLobbySearchQueryFilterComparator_MAX = 6,
};

// Enum UnionSystem.ELanguage
// NumValues: 0x0011
enum class ELanguage : uint8
{
	Ja                                       = 0,
	En                                       = 1,
	Fr                                       = 2,
	It                                       = 3,
	De                                       = 4,
	Es                                       = 5,
	EsUS                                     = 6,
	Ru                                       = 7,
	Pl                                       = 8,
	Pt                                       = 9,
	Ko                                       = 10,
	ZhHans                                   = 11,
	ZhHant                                   = 12,
	Th                                       = 13,
	Num                                      = 14,
	Invalid                                  = 255,
	ELanguage_MAX                            = 256,
};

// Enum UnionSystem.ELockType
// NumValues: 0x0004
enum class ELockType : uint8
{
	None                                     = 0,
	Price                                    = 1,
	Norm                                     = 2,
	ELockType_MAX                            = 3,
};

// Enum UnionSystem.ERom1stMachineId
// NumValues: 0x0020
enum class ERom1stMachineId : uint8
{
	SPD_1st_01                               = 0,
	SPD_1st_02                               = 1,
	SPD_1st_03                               = 2,
	SPD_1st_04                               = 3,
	SPD_1st_05                               = 4,
	SPD_1st_06                               = 5,
	SPD_1st_07                               = 6,
	SPD_1st_08                               = 7,
	SPD_1st_09                               = 8,
	HND_1st_01                               = 9,
	HND_1st_02                               = 10,
	HND_1st_03                               = 11,
	HND_1st_04                               = 12,
	POW_1st_01                               = 13,
	ACL_1st_01                               = 14,
	ACL_1st_02                               = 15,
	ACL_1st_03                               = 16,
	ACL_1st_04                               = 17,
	DSH_1st_01                               = 18,
	DSH_1st_02                               = 19,
	DSH_1st_03                               = 20,
	DSH_1st_04                               = 21,
	DSH_1st_05                               = 22,
	DSH_1st_06                               = 23,
	DSH_1st_07                               = 24,
	DSH_1st_08                               = 25,
	DSH_1st_09                               = 26,
	POW_1st_02                               = 27,
	POW_1st_03                               = 28,
	POW_1st_04                               = 29,
	Num                                      = 30,
	ERom1stMachineId_MAX                     = 31,
};

// Enum UnionSystem.EVehicleMeshType
// NumValues: 0x0006
enum class EVehicleMeshType : uint8
{
	Default                                  = 0,
	Simple                                   = 1,
	Optimization                             = 2,
	SkeletalMeshAll                          = 3,
	StaticMeshAll                            = 4,
	EVehicleMeshType_MAX                     = 5,
};

// Enum UnionSystem.EVehicleEngineSoundType
// NumValues: 0x0008
enum class EVehicleEngineSoundType : uint8
{
	Default                                  = 0,
	Front                                    = 1,
	Rear                                     = 2,
	DefaultLow                               = 3,
	FrontLow                                 = 4,
	RearLow                                  = 5,
	None                                     = 6,
	EVehicleEngineSoundType_MAX              = 7,
};

// Enum UnionSystem.EPopupWindowType
// NumValues: 0x0007
enum class EPopupWindowType : uint8
{
	Basic                                    = 0,
	Error                                    = 1,
	Simple                                   = 2,
	UseDonpaTicket                           = 3,
	TextScroll                               = 4,
	LobbyInvitation                          = 5,
	EPopupWindowType_MAX                     = 6,
};

// Enum UnionSystem.EPopupWindowButtonType
// NumValues: 0x0003
enum class EPopupWindowButtonType : uint8
{
	Nothing                                  = 0,
	YesAndNo                                 = 1,
	EPopupWindowButtonType_MAX               = 2,
};

// Enum UnionSystem.EMilestoneVersion
// NumValues: 0x000B
enum class EMilestoneVersion : uint8
{
	None                                     = 0,
	Second                                   = 1,
	Alpha                                    = 2,
	ClosedNetworkTest                        = 3,
	Beta                                     = 4,
	Show1                                    = 5,
	Show2                                    = 6,
	OpenNetworkTest                          = 7,
	Demo                                     = 8,
	Show3                                    = 9,
	EMilestoneVersion_MAX                    = 10,
};

// Enum UnionSystem.ENewsCategory
// NumValues: 0x0009
enum class ENewsCategory : uint8
{
	EventEndReward                           = 0,
	EmergencyInfoNotice                      = 1,
	FestaAnnounce                            = 2,
	LegendCompe                              = 3,
	ExtndNotice                              = 4,
	FreeCollaboContent                       = 5,
	BonusInfo                                = 6,
	Num                                      = 7,
	ENewsCategory_MAX                        = 8,
};

// Enum UnionSystem.EObjectPlacementType
// NumValues: 0x0005
enum class EObjectPlacementType : uint8
{
	Common                                   = 0,
	Standard                                 = 1,
	Strategy                                 = 2,
	Num                                      = 3,
	EObjectPlacementType_MAX                 = 4,
};

// Enum UnionSystem.EOptionLocalPlayerNumber
// NumValues: 0x0006
enum class EOptionLocalPlayerNumber : uint8
{
	Player_1                                 = 0,
	Player_2                                 = 1,
	Player_3                                 = 2,
	Player_4                                 = 3,
	Num                                      = 4,
	EOptionLocalPlayerNumber_MAX             = 5,
};

// Enum UnionSystem.EGraphicMode
// NumValues: 0x0004
enum class EGraphicMode : uint8
{
	Quality                                  = 0,
	Performance                              = 1,
	Num                                      = 2,
	EGraphicMode_MAX                         = 3,
};

// Enum UnionSystem.EFullscreenMode
// NumValues: 0x0005
enum class EFullscreenMode : uint8
{
	Fullscreen                               = 0,
	Borderless                               = 1,
	Window                                   = 2,
	Num                                      = 3,
	EFullscreenMode_MAX                      = 4,
};

// Enum UnionSystem.EFrameRateLimit
// NumValues: 0x0004
enum class EFrameRateLimit : uint8
{
	Limit30                                  = 0,
	Limit60                                  = 1,
	Num                                      = 2,
	EFrameRateLimit_MAX                      = 3,
};

// Enum UnionSystem.EGraphicQualityPreset
// NumValues: 0x0005
enum class EGraphicQualityPreset : uint8
{
	Low                                      = 0,
	High                                     = 1,
	Custom                                   = 2,
	Num                                      = 3,
	EGraphicQualityPreset_MAX                = 4,
};

// Enum UnionSystem.ERenderingScale
// NumValues: 0x0007
enum class ERenderingScale : uint8
{
	Lowest                                   = 0,
	Low                                      = 1,
	Native                                   = 2,
	High                                     = 3,
	Highest                                  = 4,
	Num                                      = 5,
	ERenderingScale_MAX                      = 6,
};

// Enum UnionSystem.EModelQuality
// NumValues: 0x0004
enum class EModelQuality : uint8
{
	Low                                      = 0,
	High                                     = 1,
	Num                                      = 2,
	EModelQuality_MAX                        = 3,
};

// Enum UnionSystem.EShadowQuality
// NumValues: 0x0004
enum class EShadowQuality : uint8
{
	Low                                      = 0,
	High                                     = 1,
	Num                                      = 2,
	EShadowQuality_MAX                       = 3,
};

// Enum UnionSystem.EReflectionQuality
// NumValues: 0x0004
enum class EReflectionQuality : uint8
{
	Low                                      = 0,
	High                                     = 1,
	Num                                      = 2,
	EReflectionQuality_MAX                   = 3,
};

// Enum UnionSystem.EAntiAliasMethod
// NumValues: 0x0006
enum class EAntiAliasMethod : uint8
{
	None                                     = 0,
	FXAA                                     = 1,
	TAA                                      = 2,
	TSR                                      = 3,
	Num                                      = 4,
	EAntiAliasMethod_MAX                     = 5,
};

// Enum UnionSystem.EOptionCategory
// NumValues: 0x000F
enum class EOptionCategory : uint8
{
	RaceTop                                  = 0,
	ControlTop                               = 1,
	ControlUI                                = 2,
	ControlRace                              = 3,
	CustomTop                                = 4,
	CustomAction                             = 5,
	CustomPrimary                            = 6,
	CustomSecondary                          = 7,
	CustomGamePad                            = 8,
	LanguageTop                              = 9,
	GraphicTop                               = 10,
	BrightnessTop                            = 11,
	AudioTop                                 = 12,
	OnlineTop                                = 13,
	EOptionCategory_MAX                      = 14,
};

// Enum UnionSystem.EOptionValidPlatform
// NumValues: 0x000A
enum class EOptionValidPlatform : uint8
{
	All                                      = 0,
	OnlyPC                                   = 1,
	OnlyCS                                   = 2,
	OnlyFF4STEP                              = 3,
	OnlyFF2STEP                              = 4,
	OnlyHighendCS                            = 5,
	OnlyGyroEnable                           = 6,
	ExceptXbox                               = 7,
	Num                                      = 8,
	EOptionValidPlatform_MAX                 = 9,
};

// Enum UnionSystem.EOptionRaceCell
// NumValues: 0x000B
enum class EOptionRaceCell : uint8
{
	CameraType                               = 0,
	FPS                                      = 1,
	TeamRankAndMap                           = 2,
	ItemInfoVisible                          = 3,
	RaceSerif                                = 4,
	DriftAndTrick                            = 5,
	Gadget                                   = 6,
	RingAndMeter                             = 7,
	RaceRank                                 = 8,
	ItemSlot                                 = 9,
	EOptionRaceCell_MAX                      = 10,
};

// Enum UnionSystem.ERaceCameraType
// NumValues: 0x0004
enum class ERaceCameraType : uint8
{
	Original                                 = 0,
	Dynamic                                  = 1,
	Num                                      = 2,
	ERaceCameraType_MAX                      = 3,
};

// Enum UnionSystem.ETeamRankAndMap
// NumValues: 0x0005
enum class ETeamRankAndMap : uint8
{
	TeamRankAndMap                           = 0,
	MapOnly                                  = 1,
	Invisible                                = 2,
	Num                                      = 3,
	ETeamRankAndMap_MAX                      = 4,
};

// Enum UnionSystem.EItemInfoVisible
// NumValues: 0x0005
enum class EItemInfoVisible : uint8
{
	Visible                                  = 0,
	WarningOnly                              = 1,
	Invisible                                = 2,
	Num                                      = 3,
	EItemInfoVisible_MAX                     = 4,
};

// Enum UnionSystem.EOptionGraphicCell
// NumValues: 0x0010
enum class EOptionGraphicCell : uint8
{
	Brightness                               = 0,
	GraphicMode                              = 1,
	Resolusion                               = 2,
	FullScreenMode                           = 3,
	Monitor                                  = 4,
	VSync                                    = 5,
	FrameRateLimit                           = 6,
	GraphicQualityPreset                     = 7,
	ModelQuality                             = 8,
	ShadowQuality                            = 9,
	AntiAliasMethod                          = 10,
	ReflectionQuality                        = 11,
	AmbientOcclusion                         = 12,
	RenderingScale                           = 13,
	Blur                                     = 14,
	EOptionGraphicCell_MAX                   = 15,
};

// Enum UnionSystem.EOptionControlCell
// NumValues: 0x0011
enum class EOptionControlCell : uint8
{
	SubCategory_UI_Custom                    = 0,
	InverseAccept                            = 1,
	ButtonDisplayType                        = 2,
	SubCategory_Race_Custom                  = 3,
	PlayerNumber                             = 4,
	AssistHandle                             = 5,
	AssistAccelerator                        = 6,
	AssistAirTrick                           = 7,
	GyroAssist                               = 8,
	ForceFeedback                            = 9,
	ForceFeedback_4STEP                      = 10,
	KeyOperationType_PC                      = 11,
	KeyOperationType_CS                      = 12,
	CustomKeyConfig                          = 13,
	FlyModeReverse                           = 14,
	StickSense                               = 15,
	EOptionControlCell_MAX                   = 16,
};

// Enum UnionSystem.EOptionAudioCell
// NumValues: 0x0005
enum class EOptionAudioCell : uint8
{
	Master                                   = 0,
	BGM                                      = 1,
	SE                                       = 2,
	Voice                                    = 3,
	EOptionAudioCell_MAX                     = 4,
};

// Enum UnionSystem.ECaptionVisible
// NumValues: 0x0005
enum class ECaptionVisible : uint8
{
	Visible                                  = 0,
	SerifOnly                                = 1,
	Invisible                                = 2,
	Num                                      = 3,
	ECaptionVisible_MAX                      = 4,
};

// Enum UnionSystem.EOptionLanguageCell
// NumValues: 0x0004
enum class EOptionLanguageCell : uint8
{
	Language                                 = 0,
	Voice                                    = 1,
	Caption                                  = 2,
	EOptionLanguageCell_MAX                  = 3,
};

// Enum UnionSystem.EOptionOnlineCell
// NumValues: 0x0007
enum class EOptionOnlineCell : uint8
{
	PlayStatus                               = 0,
	CrossPlay                                = 1,
	FriendRequest                            = 2,
	IdSearch                                 = 3,
	InviteLobby                              = 4,
	InviteLobbyInRace                        = 5,
	EOptionOnlineCell_MAX                    = 6,
};

// Enum UnionSystem.EPadStyle
// NumValues: 0x0007
enum class EPadStyle : uint8
{
	None                                     = 0,
	Pro                                      = 1,
	DualJoyCon                               = 2,
	SingleJoyCon                             = 3,
	Handheld                                 = 4,
	Num                                      = 5,
	EPadStyle_MAX                            = 6,
};

// Enum UnionSystem.EPartyRaceMissionLotteryGroup
// NumValues: 0x0004
enum class EPartyRaceMissionLotteryGroup : uint8
{
	Individual                               = 0,
	Group                                    = 1,
	None                                     = 255,
	EPartyRaceMissionLotteryGroup_MAX        = 256,
};

// Enum UnionSystem.EPartyRaceMissionType
// NumValues: 0x0010
enum class EPartyRaceMissionType : uint8
{
	Invalid                                  = 0,
	OvertakingCount                          = 1,
	HitTakenCount                            = 2,
	TimeInFirstPlace                         = 3,
	RingCount                                = 4,
	ItemBoxCount                             = 5,
	SpecialItemBoxCount                      = 6,
	UsedItemCount                            = 7,
	AttackItemCount                          = 8,
	DriftDashCount                           = 9,
	AirTrickCount                            = 10,
	DashPanelCount                           = 11,
	SelectedTravelRing                       = 12,
	Num                                      = 13,
	None                                     = 255,
	EPartyRaceMissionType_MAX                = 256,
};

// Enum UnionSystem.EPlatformStoreType
// NumValues: 0x0006
enum class EPlatformStoreType : uint8
{
	PlayStationStore                         = 0,
	XboxStore                                = 1,
	SwitchStore                              = 2,
	SteamStore                               = 3,
	EpicStore                                = 4,
	EPlatformStoreType_MAX                   = 5,
};

// Enum UnionSystem.EPlayNum
// NumValues: 0x0005
enum class EPlayNum : uint8
{
	_1P                                      = 0,
	_2P                                      = 1,
	_3P                                      = 2,
	_4P                                      = 3,
	Max                                      = 4,
};

// Enum UnionSystem.EPlayLogGameModeId
// NumValues: 0x000C
enum class EPlayLogGameModeId : uint8
{
	GrandPrix                                = 0,
	PartyRace                                = 1,
	TimeTrial                                = 2,
	RankMatch                                = 3,
	FriendMatch                              = 4,
	FriendMatch_NSW                          = 5,
	Fest                                     = 6,
	Legend                                   = 7,
	Garage                                   = 8,
	GadgetCustom                             = 9,
	Num                                      = 10,
	EPlayLogGameModeId_MAX                   = 11,
};

// Enum UnionSystem.ERaceRunDataType
// NumValues: 0x0025
enum class ERaceRunDataType : uint8
{
	GroupRaceRunParam                        = 0,
	ReactionEventParam                       = 1,
	GadgetParam                              = 2,
	GroupColorTable_Effect                   = 3,
	GroupColorTable_Material                 = 4,
	RunPlane                                 = 5,
	RaceActionTutorial                       = 6,
	ItemLockOnParam                          = 7,
	GroupRaceRule                            = 8,
	TravelRingMainCourseData                 = 9,
	TravelRingAnotherCourseData              = 10,
	RunCamera                                = 11,
	ComLevelParams                           = 12,
	RunMachine                               = 13,
	Situation                                = 14,
	ItemMiscParam                            = 15,
	ComDriverTier                            = 16,
	SwingCamera                              = 17,
	ItemInfo4System                          = 18,
	GadgetCRMID                              = 19,
	ComCommonParams                          = 20,
	GadgetVariousDefine                      = 21,
	RaceResultSetting                        = 22,
	CommonRunParam                           = 23,
	MenuGroupRaceRule                        = 24,
	MenuGroupRaceEnergy                      = 25,
	MenuGroupRaceBonus                       = 26,
	SlimeInput                               = 27,
	UseItemUI                                = 28,
	ItemSystemObjInfo                        = 29,
	ComResultParams                          = 30,
	RingMeshData                             = 31,
	ObjectRandomData                         = 32,
	BreakObjectRandomData                    = 33,
	GimmickCurringData                       = 34,
	ItemBoxMeshData                          = 35,
	Max                                      = 36,
};

// Enum UnionSystem.ERacePlayerControllerSubMode
// NumValues: 0x0003
enum class ERacePlayerControllerSubMode : uint8
{
	Race                                     = 0,
	Menu                                     = 1,
	ERacePlayerControllerSubMode_MAX         = 2,
};

// Enum UnionSystem.ERaceInputKey
// NumValues: 0x0012
enum class ERaceInputKey : uint8
{
	Steer                                    = 0,
	Accel                                    = 1,
	Brake                                    = 2,
	Pitch                                    = 3,
	TrickX                                   = 4,
	TrickY                                   = 5,
	TrickX2                                  = 6,
	TrickY2                                  = 7,
	SlimeCancelX                             = 8,
	SlimeCancelY                             = 9,
	Drift                                    = 10,
	UseItem                                  = 11,
	TradeItem                                = 12,
	RearView                                 = 13,
	Emote                                    = 14,
	Horn                                     = 15,
	Pause                                    = 16,
	ERaceInputKey_MAX                        = 17,
};

// Enum UnionSystem.ERaceType
// NumValues: 0x0007
enum class ERaceType : uint8
{
	TravelRace                               = 0,
	Travel3Main                              = 1,
	MainTimeTrial                            = 2,
	AnotherTimeTrial                         = 3,
	FreeRun                                  = 4,
	Num                                      = 5,
	ERaceType_MAX                            = 6,
};

// Enum UnionSystem.ERateRank
// NumValues: 0x001C
enum class ERateRank : uint8
{
	None                                     = 0,
	Eminus                                   = 1,
	E                                        = 2,
	Eplus                                    = 3,
	Dminus                                   = 4,
	D                                        = 5,
	Dplus                                    = 6,
	Cminus                                   = 7,
	C                                        = 8,
	Cplus                                    = 9,
	Bminus                                   = 10,
	B                                        = 11,
	Bplus                                    = 12,
	Aminus                                   = 13,
	A                                        = 14,
	Aplus                                    = 15,
	S1                                       = 16,
	S2                                       = 17,
	S3                                       = 18,
	S4                                       = 19,
	S5                                       = 20,
	S6                                       = 21,
	S7                                       = 22,
	S8                                       = 23,
	S9                                       = 24,
	S10                                      = 25,
	Max                                      = 26,
	Num                                      = 27,
};

// Enum UnionSystem.ERegionIpAbstract
// NumValues: 0x0007
enum class ERegionIpAbstract : uint8
{
	REG_AFRINIC                              = 0,
	REG_APNIC                                = 1,
	REG_ARIN                                 = 2,
	REG_LACNIC                               = 3,
	REG_RIPE_NCC                             = 4,
	REG_ND                                   = 5,
	REG_MAX                                  = 6,
};

// Enum UnionSystem.ETimeTrialSpeedClassId
// NumValues: 0x0004
enum class ETimeTrialSpeedClassId : uint8
{
	SonicSpeed                               = 0,
	SuperSonicSpeed                          = 1,
	Num                                      = 2,
	ETimeTrialSpeedClassId_MAX               = 3,
};

// Enum UnionSystem.EResultCameraProductionType
// NumValues: 0x0015
enum class EResultCameraProductionType : uint8
{
	DEFAULT                                  = 0,
	GO_AROUND_CLOCKWISE                      = 1,
	GO_AROUND_CLOCKWISE_COUNTER              = 2,
	REAR_VIEW                                = 3,
	FRONT_VIEW                               = 4,
	DIAGONALLY_BACK_LEFT                     = 5,
	DIAGONALLY_BACK_RIGHT                    = 6,
	DIAGONALLY_FRONT_LEFT                    = 7,
	DIAGONALLY_FRONT_RIGHT                   = 8,
	CUSTOM_PATTERN_1                         = 9,
	CUSTOM_PATTERN_2                         = 10,
	CUSTOM_PATTERN_3                         = 11,
	CUSTOM_PATTERN_4                         = 12,
	CUSTOM_PATTERN_5                         = 13,
	CUSTOM_PATTERN_6                         = 14,
	CUSTOM_PATTERN_7                         = 15,
	CUSTOM_PATTERN_8                         = 16,
	CUSTOM_PATTERN_9                         = 17,
	CUSTOM_PATTERN_10                        = 18,
	NUM                                      = 19,
	EResultCameraProductionType_MAX          = 20,
};

// Enum UnionSystem.ERewardType
// NumValues: 0x0015
enum class ERewardType : uint8
{
	GadgetFragment                           = 0,
	FrontParts                               = 1,
	RearParts                                = 2,
	TireParts                                = 3,
	FixedGadget                              = 4,
	Character                                = 5,
	CharacterSkin                            = 6,
	Title                                    = 7,
	Sticker                                  = 8,
	Horn                                     = 9,
	Aura                                     = 10,
	ChanceItem                               = 11,
	DonpaTicket                              = 12,
	Machine                                  = 13,
	GadgetPlate                              = 14,
	StageCourse                              = 15,
	BgmAlbum                                 = 16,
	BgmTrack                                 = 17,
	Num                                      = 18,
	None                                     = 19,
	ERewardType_MAX                          = 20,
};

// Enum UnionSystem.ERewardRedStarRingType
// NumValues: 0x004F
enum class ERewardRedStarRingType : uint8
{
	None                                     = 0,
	GrandPrix_1                              = 1,
	GrandPrix_2                              = 2,
	GrandPrix_3                              = 3,
	GrandPrix_4                              = 4,
	GrandPrix_5                              = 5,
	GrandPrix_6                              = 6,
	GrandPrix_7                              = 7,
	GrandPrix_8                              = 8,
	GrandPrix_9                              = 9,
	GrandPrix_10                             = 10,
	GrandPrix_11                             = 11,
	GrandPrix_12                             = 12,
	PartyRace_1                              = 13,
	PartyRace_2                              = 14,
	PartyRace_3                              = 15,
	PartyRace_4                              = 16,
	PartyRace_5                              = 17,
	PartyRace_6                              = 18,
	PartyRace_7                              = 19,
	PartyRace_8                              = 20,
	PartyRace_9                              = 21,
	PartyRace_10                             = 22,
	PartyRace_11                             = 23,
	PartyRace_12                             = 24,
	RankMatch_1                              = 25,
	RankMatch_2                              = 26,
	RankMatch_3                              = 27,
	RankMatch_4                              = 28,
	RankMatch_5                              = 29,
	RankMatch_6                              = 30,
	RankMatch_7                              = 31,
	RankMatch_8                              = 32,
	RankMatch_9                              = 33,
	RankMatch_10                             = 34,
	RankMatch_11                             = 35,
	RankMatch_12                             = 36,
	RankMatch_DailyBonus                     = 37,
	FrinedMatch_1                            = 38,
	FrinedMatch_2                            = 39,
	FrinedMatch_3                            = 40,
	FrinedMatch_4                            = 41,
	FrinedMatch_5                            = 42,
	FrinedMatch_6                            = 43,
	FrinedMatch_7                            = 44,
	FrinedMatch_8                            = 45,
	FrinedMatch_9                            = 46,
	FrinedMatch_10                           = 47,
	FrinedMatch_11                           = 48,
	FrinedMatch_12                           = 49,
	LocalMatch_1                             = 50,
	LocalMatch_2                             = 51,
	LocalMatch_3                             = 52,
	LocalMatch_4                             = 53,
	LocalMatch_5                             = 54,
	LocalMatch_6                             = 55,
	LocalMatch_7                             = 56,
	LocalMatch_8                             = 57,
	LocalMatch_9                             = 58,
	LocalMatch_10                            = 59,
	LocalMatch_11                            = 60,
	LocalMatch_12                            = 61,
	TimeTrial_None                           = 62,
	TimeTrial_Bronze                         = 63,
	TimeTrial_Silver                         = 64,
	TimeTrial_Gold                           = 65,
	TimeTrial_Platinum                       = 66,
	TimeTrial_CourseBonus                    = 67,
	CopyPlayer_Win                           = 68,
	CopyPlayer_Lose                          = 69,
	GetRSR_1                                 = 70,
	GetRSR_2                                 = 71,
	GetRSR_3                                 = 72,
	GetRSR_4                                 = 73,
	GetRSR_5                                 = 74,
	GetRSR_FirstComplete                     = 75,
	GetRSR_Perfect                           = 76,
	Num                                      = 77,
	ERewardRedStarRingType_MAX               = 78,
};

// Enum UnionSystem.ERewardAchievementType
// NumValues: 0x004A
enum class ERewardAchievementType : uint8
{
	RivalFirstWin                            = 0,
	RivalFirstWinCount                       = 1,
	RivalSecondWinCount                      = 2,
	RivalLoopWinCount                        = 3,
	RivalWinAfterComplete                    = 4,
	GrandPrixWinNormalAll                    = 5,
	GrandPrixWinMirrorAll                    = 6,
	GrandPrixWin01                           = 7,
	GrandPrixWin02                           = 8,
	GrandPrixWin03                           = 9,
	GrandPrixWin04                           = 10,
	GrandPrixWin05                           = 11,
	GrandPrixWin06                           = 12,
	GrandPrixWin07                           = 13,
	GrandPrixWin08                           = 14,
	GrandPrixWin09                           = 15,
	GrandPrixWin10                           = 16,
	GrandPrixWin11                           = 17,
	GrandPrixWin12                           = 18,
	GrandPrixWin13                           = 19,
	GrandPrixWin14                           = 20,
	GrandPrixWin15                           = 21,
	GrandPrixWinOver                         = 22,
	RivalFirstWin01                          = 23,
	RivalFirstWin02                          = 24,
	RivalFirstWin03                          = 25,
	RivalFirstWin04                          = 26,
	RivalFirstWin05                          = 27,
	RivalFirstWin06                          = 28,
	RivalFirstWin07                          = 29,
	RivalFirstWin08                          = 30,
	RivalFirstWin09                          = 31,
	RivalFirstWin10                          = 32,
	RivalFirstWin11                          = 33,
	RivalFirstWin12                          = 34,
	RivalFirstWin13                          = 35,
	RivalFirstWin14                          = 36,
	RivalFirstWin15                          = 37,
	RivalFirstWin16                          = 38,
	RivalFirstWin17                          = 39,
	RivalFirstWin18                          = 40,
	RivalFirstWin19                          = 41,
	RivalFirstWin20                          = 42,
	RivalFirstWin21                          = 43,
	RivalFirstWin22                          = 44,
	RivalFirstWin23                          = 45,
	PartyRaceRivalTeamEliminate              = 46,
	OnlineRank_E_01                          = 47,
	OnlineRank_E_02                          = 48,
	OnlineRank_E_03                          = 49,
	OnlineRank_D_01                          = 50,
	OnlineRank_D_02                          = 51,
	OnlineRank_D_03                          = 52,
	OnlineRank_C_01                          = 53,
	OnlineRank_C_02                          = 54,
	OnlineRank_C_03                          = 55,
	OnlineRank_B_01                          = 56,
	OnlineRank_B_02                          = 57,
	OnlineRank_B_03                          = 58,
	OnlineRank_A_01                          = 59,
	OnlineRank_A_02                          = 60,
	OnlineRank_A_03                          = 61,
	OnlineRank_LEGEND_09                     = 62,
	OnlineRank_LEGEND_08                     = 63,
	OnlineRank_LEGEND_07                     = 64,
	OnlineRank_LEGEND_06                     = 65,
	OnlineRank_LEGEND_05                     = 66,
	OnlineRank_LEGEND_04                     = 67,
	OnlineRank_LEGEND_03                     = 68,
	OnlineRank_LEGEND_02                     = 69,
	OnlineRank_LEGEND_01                     = 70,
	Num                                      = 71,
	None                                     = 255,
	ERewardAchievementType_MAX               = 256,
};

// Enum UnionSystem.ERewardGrandPrixRivalWinHonorId
// NumValues: 0x0033
enum class ERewardGrandPrixRivalWinHonorId : uint8
{
	GrandPrix_RivalWin_Normal_LV01           = 0,
	GrandPrix_RivalWin_Normal_LV02           = 1,
	GrandPrix_RivalWin_Normal_LV03           = 2,
	GrandPrix_RivalWin_Normal_LV04           = 3,
	GrandPrix_RivalWin_Normal_LV05           = 4,
	GrandPrix_RivalWin_Normal_LV06           = 5,
	GrandPrix_RivalWin_Normal_LV07           = 6,
	GrandPrix_RivalWin_Normal_LV08           = 7,
	GrandPrix_RivalWin_Normal_LV09           = 8,
	GrandPrix_RivalWin_Normal_LV10           = 9,
	GrandPrix_RivalWin_High_LV01             = 10,
	GrandPrix_RivalWin_High_LV02             = 11,
	GrandPrix_RivalWin_High_LV03             = 12,
	GrandPrix_RivalWin_High_LV04             = 13,
	GrandPrix_RivalWin_High_LV05             = 14,
	GrandPrix_RivalWin_High_LV06             = 15,
	GrandPrix_RivalWin_High_LV07             = 16,
	GrandPrix_RivalWin_High_LV08             = 17,
	GrandPrix_RivalWin_High_LV09             = 18,
	GrandPrix_RivalWin_High_LV10             = 19,
	GrandPrix_RivalWin_Sonic_LV01            = 20,
	GrandPrix_RivalWin_Sonic_LV02            = 21,
	GrandPrix_RivalWin_Sonic_LV03            = 22,
	GrandPrix_RivalWin_Sonic_LV04            = 23,
	GrandPrix_RivalWin_Sonic_LV05            = 24,
	GrandPrix_RivalWin_Sonic_LV06            = 25,
	GrandPrix_RivalWin_Sonic_LV07            = 26,
	GrandPrix_RivalWin_Sonic_LV08            = 27,
	GrandPrix_RivalWin_Sonic_LV09            = 28,
	GrandPrix_RivalWin_Sonic_LV10            = 29,
	GrandPrix_RivalWin_SuperSonic_LV01       = 30,
	GrandPrix_RivalWin_SuperSonic_LV02       = 31,
	GrandPrix_RivalWin_SuperSonic_LV03       = 32,
	GrandPrix_RivalWin_SuperSonic_LV04       = 33,
	GrandPrix_RivalWin_SuperSonic_LV05       = 34,
	GrandPrix_RivalWin_SuperSonic_LV06       = 35,
	GrandPrix_RivalWin_SuperSonic_LV07       = 36,
	GrandPrix_RivalWin_SuperSonic_LV08       = 37,
	GrandPrix_RivalWin_SuperSonic_LV09       = 38,
	GrandPrix_RivalWin_SuperSonic_LV10       = 39,
	GrandPrix_RivalWin_Mirror_LV01           = 40,
	GrandPrix_RivalWin_Mirror_LV02           = 41,
	GrandPrix_RivalWin_Mirror_LV03           = 42,
	GrandPrix_RivalWin_Mirror_LV04           = 43,
	GrandPrix_RivalWin_Mirror_LV05           = 44,
	GrandPrix_RivalWin_Mirror_LV06           = 45,
	GrandPrix_RivalWin_Mirror_LV07           = 46,
	GrandPrix_RivalWin_Mirror_LV08           = 47,
	GrandPrix_RivalWin_Mirror_LV09           = 48,
	GrandPrix_RivalWin_Mirror_LV10           = 49,
	GrandPrix_RivalWin_MAX                   = 50,
};

// Enum UnionSystem.ERewardAchievementDriverType
// NumValues: 0x0003
enum class ERewardAchievementDriverType : uint8
{
	RivalFirstWin                            = 0,
	Num                                      = 1,
	ERewardAchievementDriverType_MAX         = 2,
};

// Enum UnionSystem.EResultRewardType
// NumValues: 0x0008
enum class EResultRewardType : uint8
{
	Invalid                                  = 0,
	Rank                                     = 1,
	Honor                                    = 2,
	RedStarRing                              = 3,
	GrandPrixRivalWin                        = 4,
	RaceParkRivalTeamWin                     = 5,
	MultiplayBonus                           = 6,
	EResultRewardType_MAX                    = 7,
};

// Enum UnionSystem.EItemReleaseType
// NumValues: 0x000A
enum class EItemReleaseType : uint8
{
	Unknown                                  = 0,
	DLC_Paid                                 = 1,
	DLC_Free                                 = 2,
	DLC_DeluxeBonus                          = 3,
	DLC_SeasonPassBonus                      = 4,
	DLC_EarlyBookingBonus                    = 5,
	DLC_CNTBonus                             = 6,
	ServerTime                               = 7,
	Num                                      = 8,
	EItemReleaseType_MAX                     = 9,
};

// Enum UnionSystem.ERivalType
// NumValues: 0x0004
enum class ERivalType : uint8
{
	None                                     = 0,
	RivalNormal                              = 1,
	RivalPower                               = 2,
	ERivalType_MAX                           = 3,
};

// Enum UnionSystem.EPerformRivalOutcome
// NumValues: 0x0005
enum class EPerformRivalOutcome : uint8
{
	RivalLose                                = 0,
	RivalWin                                 = 1,
	RivalDraw                                = 2,
	Num                                      = 3,
	EPerformRivalOutcome_MAX                 = 4,
};

// Enum UnionSystem.ERivalTeamId
// NumValues: 0x000B
enum class ERivalTeamId : uint8
{
	Alpha01                                  = 0,
	Alpha02                                  = 1,
	Alpha03                                  = 2,
	Alpha04                                  = 3,
	Alpha05                                  = 4,
	Alpha06                                  = 5,
	Alpha07                                  = 6,
	Alpha08                                  = 7,
	Num                                      = 8,
	None                                     = 255,
	ERivalTeamId_MAX                         = 256,
};

// Enum UnionSystem.EMenuSpeedClassId
// NumValues: 0x0007
enum class EMenuSpeedClassId : uint8
{
	NormalSpeed                              = 0,
	HighSpeed                                = 1,
	SonicSpeed                               = 2,
	SuperSonicSpeed                          = 3,
	Mirror                                   = 4,
	Num                                      = 5,
	EMenuSpeedClassId_MAX                    = 6,
};

// Enum UnionSystem.EStatsRules
// NumValues: 0x0005
enum class EStatsRules : uint8
{
	Unknown                                  = 0,
	Sum                                      = 1,
	Max                                      = 2,
	Min                                      = 3,
	Num                                      = 4,
};

// Enum UnionSystem.ERedStarRingId
// NumValues: 0x0017
enum class ERedStarRingId : uint8
{
	Unknown                                  = 0,
	Player1Index1                            = 1,
	Player1Index2                            = 2,
	Player1Index3                            = 3,
	Player1Index4                            = 4,
	Player1Index5                            = 5,
	Player2Index1                            = 6,
	Player2Index2                            = 7,
	Player2Index3                            = 8,
	Player2Index4                            = 9,
	Player2Index5                            = 10,
	Player3Index1                            = 11,
	Player3Index2                            = 12,
	Player3Index3                            = 13,
	Player3Index4                            = 14,
	Player3Index5                            = 15,
	Player4Index1                            = 16,
	Player4Index2                            = 17,
	Player4Index3                            = 18,
	Player4Index4                            = 19,
	Player4Index5                            = 20,
	Num                                      = 21,
	ERedStarRingId_MAX                       = 22,
};

// Enum UnionSystem.EMatchmakingSubscribeErrorType
// NumValues: 0x0009
enum class EMatchmakingSubscribeErrorType : uint8
{
	None                                     = 0,
	EntryRequirement                         = 1,
	PlatformSetting                          = 2,
	Ban                                      = 3,
	Dishonor                                 = 4,
	ROMVersion                               = 5,
	MasterDataVersion                        = 6,
	EventClosed                              = 7,
	EMatchmakingSubscribeErrorType_MAX       = 8,
};

// Enum UnionSystem.ESupportedCulture
// NumValues: 0x000F
enum class ESupportedCulture : uint8
{
	en                                       = 0,
	ja                                       = 1,
	fr                                       = 2,
	it                                       = 3,
	de                                       = 4,
	es                                       = 5,
	ru                                       = 6,
	pl                                       = 7,
	pt                                       = 8,
	ko                                       = 9,
	zh_Hans                                  = 10,
	zh_Hant                                  = 11,
	th                                       = 12,
	Num                                      = 13,
	ESupportedCulture_MAX                    = 14,
};

// Enum UnionSystem.ETimeTrialClearRankId
// NumValues: 0x0007
enum class ETimeTrialClearRankId : uint8
{
	None                                     = 0,
	Bronze                                   = 1,
	Silver                                   = 2,
	Gold                                     = 3,
	Platinum                                 = 4,
	Num                                      = 5,
	ETimeTrialClearRankId_MAX                = 6,
};

// Enum UnionSystem.ETimeTrialWinLoseDispId
// NumValues: 0x0005
enum class ETimeTrialWinLoseDispId : uint8
{
	NewBestRecord                            = 0,
	NiceTry                                  = 1,
	GhostWin                                 = 2,
	GhostLose                                = 3,
	Max                                      = 4,
};

// Enum UnionSystem.ETravelRingType
// NumValues: 0x000A
enum class ETravelRingType : uint8
{
	Invalid                                  = 0,
	Left                                     = 1,
	Right                                    = 2,
	Enter                                    = 3,
	Exit                                     = 4,
	NotEffect_Entrance                       = 5,
	NotEffect_Exit                           = 6,
	Shortcut_Entrance                        = 7,
	Shortcut_Exit                            = 8,
	ETravelRingType_MAX                      = 9,
};

// Enum UnionSystem.ETravelRingSizeType
// NumValues: 0x0003
enum class ETravelRingSizeType : uint8
{
	Small                                    = 0,
	Middle                                   = 1,
	Max                                      = 2,
};

// Enum UnionSystem.ETravelRingMoonPhase
// NumValues: 0x0003
enum class ETravelRingMoonPhase : uint8
{
	Full                                     = 0,
	Half                                     = 1,
	ETravelRingMoonPhase_MAX                 = 2,
};

// Enum UnionSystem.ETravelRingSequence
// NumValues: 0x000E
enum class ETravelRingSequence : uint8
{
	Neutral                                  = 0,
	StartSelect                              = 1,
	SwitchLeft                               = 2,
	SwitchRight                              = 3,
	ConfirmLeft                              = 4,
	ConfirmRight                             = 5,
	JustBeforeOnLeft                         = 6,
	JustBeforeOnRight                        = 7,
	ConflictStart                            = 8,
	ConflictFixLeft                          = 9,
	ConflictFixRight                         = 10,
	Main3OpenLeft                            = 11,
	CloseRing                                = 12,
	ETravelRingSequence_MAX                  = 13,
};

// Enum UnionSystem.ETravelRingScreenType
// NumValues: 0x0003
enum class ETravelRingScreenType : uint8
{
	Open                                     = 0,
	Close                                    = 1,
	ETravelRingScreenType_MAX                = 2,
};

// Enum UnionSystem.EUnionTravelRingStageId
// NumValues: 0x0067
enum class EUnionTravelRingStageId : uint8
{
	Stage1001                                = 0,
	Stage1002                                = 1,
	Stage1003                                = 2,
	Stage1004                                = 3,
	Stage1005                                = 4,
	Stage1006                                = 5,
	Stage1007                                = 6,
	Stage1008                                = 7,
	Stage1009                                = 8,
	Stage1010                                = 9,
	Stage1011                                = 10,
	Stage1012                                = 11,
	Stage1013                                = 12,
	Stage1014                                = 13,
	Stage1015                                = 14,
	Stage1016                                = 15,
	Stage1017                                = 16,
	Stage1018                                = 17,
	Stage1019                                = 18,
	Stage1020                                = 19,
	Stage1021                                = 20,
	Stage1022                                = 21,
	Stage1023                                = 22,
	Stage1024                                = 23,
	Stage1025                                = 24,
	Stage1026                                = 25,
	Stage1027                                = 26,
	Stage1028                                = 27,
	Stage1029                                = 28,
	Stage1030                                = 29,
	Stage1031                                = 30,
	Stage1032                                = 31,
	Stage1033                                = 32,
	Stage1034                                = 33,
	Stage1035                                = 34,
	Stage1036                                = 35,
	Stage1037                                = 36,
	Stage1038                                = 37,
	Stage1039                                = 38,
	Stage1040                                = 39,
	Stage1041                                = 40,
	Stage1042                                = 41,
	Stage1501                                = 42,
	Stage1502                                = 43,
	Stage1503                                = 44,
	Stage1504                                = 45,
	Stage1505                                = 46,
	Stage1506                                = 47,
	Stage1507                                = 48,
	Stage1508                                = 49,
	Stage1509                                = 50,
	Stage1510                                = 51,
	Stage1901                                = 52,
	Stage1902                                = 53,
	Stage2001                                = 54,
	Stage2002                                = 55,
	Stage2003                                = 56,
	Stage2004                                = 57,
	Stage2005                                = 58,
	Stage2006                                = 59,
	Stage2007                                = 60,
	Stage2008                                = 61,
	Stage2009                                = 62,
	Stage2010                                = 63,
	Stage2011                                = 64,
	Stage2012                                = 65,
	Stage2013                                = 66,
	Stage2014                                = 67,
	Stage2015                                = 68,
	Stage2016                                = 69,
	Stage2017                                = 70,
	Stage2018                                = 71,
	Stage2019                                = 72,
	Stage2020                                = 73,
	Stg3001                                  = 74,
	Stg3002                                  = 75,
	Stg3003                                  = 76,
	Stg3004                                  = 77,
	Stg3005                                  = 78,
	Stg3006                                  = 79,
	Stg3007                                  = 80,
	Stg3008                                  = 81,
	Stg3009                                  = 82,
	Stg3010                                  = 83,
	Stg4001                                  = 84,
	Stg4002                                  = 85,
	Stg4003                                  = 86,
	Stg4004                                  = 87,
	Stg4005                                  = 88,
	Stg4006                                  = 89,
	Stg4007                                  = 90,
	Stg4008                                  = 91,
	Stg4009                                  = 92,
	Stg4010                                  = 93,
	Pictogram0001                            = 94,
	Pictogram1001                            = 95,
	Pictogram1002                            = 96,
	Pictogram1003                            = 97,
	Pictogram1004                            = 98,
	Random                                   = 99,
	Num                                      = 100,
	Invalid                                  = 255,
	EUnionTravelRingStageId_MAX              = 256,
};

// Enum UnionSystem.ETutorialAction
// NumValues: 0x000B
enum class ETutorialAction : uint8
{
	None                                     = 0,
	Drift                                    = 1,
	AirTrick                                 = 2,
	FlightAccel                              = 3,
	FlightDrift                              = 4,
	BoatCharge                               = 5,
	StartDash                                = 6,
	UseItem                                  = 7,
	FlightPitchU                             = 8,
	FlightPitchD                             = 9,
	ETutorialAction_MAX                      = 10,
};

// Enum UnionSystem.ETutorialControllerOperation
// NumValues: 0x0004
enum class ETutorialControllerOperation : uint8
{
	None                                     = 0,
	Hold                                     = 1,
	Release                                  = 2,
	ETutorialControllerOperation_MAX         = 3,
};

// Enum UnionSystem.ETutorialControllerDirection
// NumValues: 0x0005
enum class ETutorialControllerDirection : uint8
{
	Up                                       = 0,
	Right                                    = 1,
	Down                                     = 2,
	Left                                     = 3,
	ETutorialControllerDirection_MAX         = 4,
};

// Enum UnionSystem.EUcccParamType
// NumValues: 0x003E
enum class EUcccParamType : uint8
{
	None                                     = 0,
	MaxSpeedRunItem                          = 1,
	MaxSpeedRun                              = 2,
	MaxSpeedNotRun                           = 3,
	RaceStartTiming                          = 4,
	CheckpointNotPassed                      = 5,
	CheckpointPassingTime                    = 6,
	GoalTime                                 = 7,
	DriveFormItem                            = 8,
	DriveFormBoatPlane                       = 9,
	FrameAccelerationTime                    = 10,
	SpeedAccelerationTime                    = 11,
	FootCutCount                             = 12,
	ElapseScoreByFootCut                     = 13,
	TopElapseScoreAtFootCut                  = 14,
	ShortWarpTotalDistance                   = 15,
	OnlinePlayerPacket                       = 16,
	ReSpotPosition                           = 17,
	ItemUsedBeforeStart                      = 18,
	ItemGetLog                               = 19,
	ItemUsedCount                            = 20,
	TeamTouchCount                           = 21,
	TeamRingCount                            = 22,
	TeamAirTrickount                         = 23,
	TeamItemHitCount                         = 24,
	TeamDriftDashCount                       = 25,
	TeamSpinDriftCount                       = 26,
	TeamTouchDashCount                       = 27,
	TeamDashCount                            = 28,
	TeamAttackCount                          = 29,
	SuperTeamDash                            = 30,
	SpeedValue                               = 31,
	AccelValue                               = 32,
	DashValue                                = 33,
	HandlingValue                            = 34,
	PowerValue                               = 35,
	AllParamsTotalValue                      = 36,
	DriverUsed                               = 37,
	FrontPartsUsed                           = 38,
	RearPartsUsed                            = 39,
	TirePartsUsed                            = 40,
	TotalCostOfGadgetsUsed                   = 41,
	NumberOfGadgetsUsed                      = 42,
	GhostHeader                              = 43,
	GhostCheckpointPassing                   = 44,
	TARanking                                = 45,
	TAItemUsed                               = 46,
	TAItemEffect                             = 47,
	TADisabledGadgetsUsed                    = 48,
	TAGadgetEffect                           = 49,
	TeamDriftLevelCount                      = 50,
	TotalCostOfExGadgetsUsed                 = 51,
	NumberOfExGadgetsUsed                    = 52,
	ItemEffect                               = 53,
	DamageParam                              = 54,
	MachineRunParam                          = 55,
	MaxSpeedRunItem2                         = 56,
	MaxSpeedRun2                             = 57,
	ReSpotPosition2                          = 58,
	Num                                      = 59,
	Invalid                                  = 255,
	EUcccParamType_MAX                       = 256,
};

// Enum UnionSystem.EUIZOrderType
// NumValues: 0x0026
enum class EUIZOrderType : uint8
{
	Default                                  = 0,
	OnlineLobbyUIBaseScene                   = 1,
	PartyRacePreset                          = 2,
	CustomizeRule                            = 3,
	CourseSelect                             = 4,
	RivalSelect                              = 5,
	SelectClass                              = 6,
	OffScreenIcon                            = 7,
	ControlGuide                             = 8,
	RaceSpecificHUD                          = 9,
	RadarMap                                 = 10,
	Ranking                                  = 11,
	Evaluation                               = 12,
	RoundDisplay                             = 13,
	Info                                     = 14,
	ScreenSplitLine                          = 15,
	ScoreDisplay                             = 16,
	ResultSet                                = 17,
	Timer                                    = 18,
	PauseMenu                                = 19,
	MenuShortcut                             = 20,
	ControlsWindow                           = 21,
	HowToPlayWindow                          = 22,
	ChatStampWindow                          = 23,
	FooterMenu                               = 24,
	GenericWindow                            = 25,
	ForcedProgressTimer                      = 26,
	NotificationDisplay                      = 27,
	LobbyInvitationNotificationDisplay       = 28,
	TransitionFade                           = 100,
	NowLoading                               = 101,
	GenericWindowError                       = 102,
	OnlineNetConnectingIcon                  = 103,
	AutoSaveIcon                             = 104,
	PlayLogDisplay                           = 105,
	Development                              = 250,
	Num                                      = 251,
	EUIZOrderType_MAX                        = 252,
};

// Enum UnionSystem.ECommonMenuButtonType
// NumValues: 0x001A
enum class ECommonMenuButtonType : uint8
{
	None                                     = 0,
	GrandPrix                                = 1,
	Party                                    = 2,
	TimeTrial                                = 3,
	RankMatch                                = 4,
	FriendMatch                              = 5,
	Festa                                    = 6,
	Legend                                   = 7,
	InviteFriends                            = 8,
	GadgetCustomize                          = 9,
	Garage                                   = 10,
	FriendList                               = 11,
	Etcetera                                 = 12,
	CharaMachine                             = 13,
	PlayerInfo                               = 14,
	Config                                   = 15,
	GameSettings                             = 16,
	Challenge                                = 17,
	JukeBox                                  = 18,
	Credit                                   = 19,
	Hint                                     = 20,
	Ready                                    = 21,
	Achievement                              = 22,
	FriendShip                               = 23,
	Store                                    = 24,
	Max                                      = 25,
};

// Enum UnionSystem.EChallengeCategory
// NumValues: 0x0009
enum class EChallengeCategory : uint8
{
	ECM_Race                                 = 0,
	ECM_Grandprix                            = 1,
	ECM_PartyRace                            = 2,
	ECM_TimeTrial                            = 3,
	ECM_MachineCustom                        = 4,
	ECM_Gadget                               = 5,
	ECM_Special                              = 6,
	Num                                      = 7,
	EChallengeCategory_MAX                   = 8,
};

// Enum UnionSystem.EChallengeAchivement
// NumValues: 0x0006
enum class EChallengeAchivement : uint8
{
	ECA_None                                 = 0,
	ECA_Bronze                               = 1,
	ECA_Silver                               = 2,
	ECA_Gold                                 = 3,
	ECA_Platinum                             = 4,
	ECA_Max                                  = 5,
};

// Enum UnionSystem.EContentUnlockType
// NumValues: 0x0005
enum class EContentUnlockType : uint8
{
	Non                                      = 0,
	DLC                                      = 1,
	ServerTime                               = 2,
	ServerRewards                            = 3,
	EContentUnlockType_MAX                   = 4,
};

// Enum UnionSystem.EUnionOpenStoreResultType
// NumValues: 0x0006
enum class EUnionOpenStoreResultType : uint8
{
	Unknown                                  = 0,
	StoreCantOpen                            = 1,
	StoreClose                               = 2,
	StoreOpen                                = 3,
	Num                                      = 4,
	EUnionOpenStoreResultType_MAX            = 5,
};

// Enum UnionSystem.EForceFeedbackLevel
// NumValues: 0x0006
enum class EForceFeedbackLevel : uint8
{
	Off                                      = 0,
	Weak                                     = 1,
	Normal                                   = 2,
	Strong                                   = 3,
	Num                                      = 4,
	EForceFeedbackLevel_MAX                  = 5,
};

// Enum UnionSystem.EPresetForceFeedbackType
// NumValues: 0x002E
enum class EPresetForceFeedbackType : uint8
{
	DEFAULT_SHORT_S                          = 0,
	DEFAULT_SHORT_S_L                        = 1,
	DEFAULT_SHORT_S_R                        = 2,
	DEFAULT_SHORT_L                          = 3,
	DEFAULT_SHORT_L_L                        = 4,
	DEFAULT_SHORT_L_R                        = 5,
	DEFAULT_LONG_S                           = 6,
	DEFAULT_LONG_S_L                         = 7,
	DEFAULT_LONG_S_R                         = 8,
	DEFAULT_LONG_L                           = 9,
	DEFAULT_LONG_L_L                         = 10,
	DEFAULT_LONG_L_R                         = 11,
	DEFAULT_LOOP_S                           = 12,
	DEFAULT_LOOP_S_L                         = 13,
	DEFAULT_LOOP_S_R                         = 14,
	DEFAULT_LOOP_L                           = 15,
	DEFAULT_LOOP_L_L                         = 16,
	DEFAULT_LOOP_L_R                         = 17,
	HIT_SHORT_S                              = 18,
	HIT_SHORT_S_L                            = 19,
	HIT_SHORT_S_R                            = 20,
	HIT_SHORT_L                              = 21,
	HIT_SHORT_L_L                            = 22,
	HIT_SHORT_L_R                            = 23,
	ZEBRA_LOOP_S                             = 24,
	ZEBRA_LOOP_S_L                           = 25,
	ZEBRA_LOOP_S_R                           = 26,
	RUNOFF_LOOP_S                            = 27,
	RUNOFF_LOOP_S_L                          = 28,
	RUNOFF_LOOP_S_R                          = 29,
	QUAKE_SHORT_S                            = 30,
	QUAKE_SHORT_L                            = 31,
	CAR_SHORT_S                              = 32,
	CAR_SHORT_L                              = 33,
	BOAT_SHORT_S                             = 34,
	BOAT_SHORT_L                             = 35,
	TRUCK_LONG_E                             = 36,
	BOAT_LONG_E                              = 37,
	GET_SHORT_S                              = 38,
	IRREGULAR_LONG_L                         = 39,
	STUNT_SHORT_S                            = 40,
	STUNT_SHORT_L                            = 41,
	PRING_LONG_S                             = 42,
	DRIFT_SHORT_S                            = 43,
	Num                                      = 44,
	EPresetForceFeedbackType_MAX             = 45,
};

// Enum UnionSystem.ECRMSquadMemberFlag
// NumValues: 0x0004
enum class ECRMSquadMemberFlag : uint8
{
	NotSquad                                 = 0,
	Host                                     = 1,
	Guest                                    = 2,
	ECRMSquadMemberFlag_MAX                  = 3,
};

// Enum UnionSystem.EGrandPrixWinSubTask
// NumValues: 0x000A
enum class EGrandPrixWinSubTask : uint8
{
	GrandPrix_Win_None                       = 0,
	GrandPrix_Purple_01                      = 1,
	GrandPrix_Yellow_02                      = 2,
	GrandPrix_Red_03                         = 4,
	GrandPrix_Blue_04                        = 8,
	GrandPrix_Cyan_05                        = 16,
	GrandPrix_White_06                       = 32,
	GrandPrix_Green_07                       = 64,
	GrandPrix_SegaGP_01                      = 128,
	GrandPrix_MAX                            = 129,
};

// Enum UnionSystem.EGrandPrixBeatSubTask
// NumValues: 0x0018
enum class EGrandPrixBeatSubTask : uint32
{
	GrandPrix_Beat_None                      = 0,
	GrandPrix_Sonic                          = 1,
	GrandPrix_Tails                          = 2,
	GrandPrix_Knuckles                       = 4,
	GrandPrix_Amy                            = 8,
	GrandPrix_DrEggman                       = 16,
	GrandPrix_Shadow                         = 32,
	GrandPrix_Rouge                          = 64,
	GrandPrix_Silver                         = 128,
	GrandPrix_Blaze                          = 256,
	GrandPrix_MetalSonic                     = 512,
	GrandPrix_Omega                          = 1024,
	GrandPrix_Vector                         = 2048,
	GrandPrix_Espio                          = 4096,
	GrandPrix_Charmy                         = 8192,
	GrandPrix_Zavok                          = 16384,
	GrandPrix_Zazz                           = 32768,
	GrandPrix_Cream                          = 65536,
	GrandPrix_Big                            = 131072,
	GrandPrix_Eggpawn                        = 262144,
	GrandPrix_Sage                           = 524288,
	GrandPrix_Jet                            = 1048576,
	GrandPrix_Wave                           = 2097152,
	GrandPrix_Storm                          = 4194304,
};

// Enum UnionSystem.EPartyRaceBeatSubTask
// NumValues: 0x000A
enum class EPartyRaceBeatSubTask : uint8
{
	PartyRace_Beat_None                      = 0,
	PartyRace_Alpha01                        = 1,
	PartyRace_Alpha02                        = 2,
	PartyRace_Alpha03                        = 4,
	PartyRace_Alpha04                        = 8,
	PartyRace_Alpha05                        = 16,
	PartyRace_Alpha06                        = 32,
	PartyRace_Alpha07                        = 64,
	PartyRace_Alpha08                        = 128,
	PartyRace_MAX                            = 129,
};

// Enum UnionSystem.ETimeTrialSonicSpeedSubTask
// NumValues: 0x0029
enum class ETimeTrialSonicSpeedSubTask : uint64
{
	TimeTrial_SonicSpeed_None                = 0,
	STG1016_SonicSpeed                       = 1,
	STG1017_SonicSpeed                       = 2,
	STG1018_SonicSpeed                       = 4,
	STG1029_SonicSpeed                       = 8,
	STG1005_SonicSpeed                       = 16,
	STG1026_SonicSpeed                       = 32,
	STG1027_SonicSpeed                       = 64,
	STG1025_SonicSpeed                       = 128,
	STG1024_SonicSpeed                       = 256,
	STG1028_SonicSpeed                       = 512,
	STG1032_SonicSpeed                       = 1024,
	STG1033_SonicSpeed                       = 2048,
	STG1022_SonicSpeed                       = 4096,
	STG1003_SonicSpeed                       = 8192,
	STG1030_SonicSpeed                       = 16384,
	STG1020_SonicSpeed                       = 32768,
	STG1001_SonicSpeed                       = 65536,
	STG1034_SonicSpeed                       = 131072,
	STG1023_SonicSpeed                       = 262144,
	STG1021_SonicSpeed                       = 524288,
	STG1031_SonicSpeed                       = 1048576,
	STG1035_SonicSpeed                       = 2097152,
	STG1036_SonicSpeed                       = 4194304,
	STG1037_SonicSpeed                       = 8388608,
	STG2009_SonicSpeed                       = 16777216,
	STG2014_SonicSpeed                       = 33554432,
	STG2003_SonicSpeed                       = 67108864,
	STG2004_SonicSpeed                       = 134217728,
	STG2005_SonicSpeed                       = 268435456,
	STG2007_SonicSpeed                       = 536870912,
	STG2001_SonicSpeed                       = 1073741824,
	STG2010_SonicSpeed                       = 2147483648,
	STG2011_SonicSpeed                       = 4294967296,
	STG2012_SonicSpeed                       = 8589934592,
	STG2002_SonicSpeed                       = 17179869184,
	STG2015_SonicSpeed                       = 34359738368,
	STG2016_SonicSpeed                       = 68719476736,
	STG2017_SonicSpeed                       = 137438953472,
	STG2019_SonicSpeed                       = 274877906944,
	ETimeTrialSonicSpeedSubTask_MAX          = 274877906945,
};

// Enum UnionSystem.ETimeTrialSuperSonicSpeedSubTask
// NumValues: 0x0029
enum class ETimeTrialSuperSonicSpeedSubTask : uint64
{
	TimeTrial_SuperSonicSpeed_None           = 0,
	STG1016_SuperSonicSpeed                  = 1,
	STG1017_SuperSonicSpeed                  = 2,
	STG1018_SuperSonicSpeed                  = 4,
	STG1029_SuperSonicSpeed                  = 8,
	STG1005_SuperSonicSpeed                  = 16,
	STG1026_SuperSonicSpeed                  = 32,
	STG1027_SuperSonicSpeed                  = 64,
	STG1025_SuperSonicSpeed                  = 128,
	STG1024_SuperSonicSpeed                  = 256,
	STG1028_SuperSonicSpeed                  = 512,
	STG1032_SuperSonicSpeed                  = 1024,
	STG1033_SuperSonicSpeed                  = 2048,
	STG1022_SuperSonicSpeed                  = 4096,
	STG1003_SuperSonicSpeed                  = 8192,
	STG1030_SuperSonicSpeed                  = 16384,
	STG1020_SuperSonicSpeed                  = 32768,
	STG1001_SuperSonicSpeed                  = 65536,
	STG1034_SuperSonicSpeed                  = 131072,
	STG1023_SuperSonicSpeed                  = 262144,
	STG1021_SuperSonicSpeed                  = 524288,
	STG1031_SuperSonicSpeed                  = 1048576,
	STG1035_SuperSonicSpeed                  = 2097152,
	STG1036_SuperSonicSpeed                  = 4194304,
	STG1037_SuperSonicSpeed                  = 8388608,
	STG2009_SuperSonicSpeed                  = 16777216,
	STG2014_SuperSonicSpeed                  = 33554432,
	STG2003_SuperSonicSpeed                  = 67108864,
	STG2004_SuperSonicSpeed                  = 134217728,
	STG2005_SuperSonicSpeed                  = 268435456,
	STG2007_SuperSonicSpeed                  = 536870912,
	STG2001_SuperSonicSpeed                  = 1073741824,
	STG2010_SuperSonicSpeed                  = 2147483648,
	STG2011_SuperSonicSpeed                  = 4294967296,
	STG2012_SuperSonicSpeed                  = 8589934592,
	STG2002_SuperSonicSpeed                  = 17179869184,
	STG2015_SuperSonicSpeed                  = 34359738368,
	STG2016_SuperSonicSpeed                  = 68719476736,
	STG2017_SuperSonicSpeed                  = 137438953472,
	STG2019_SuperSonicSpeed                  = 274877906944,
	ETimeTrialSuperSonicSpeedSubTask_MAX     = 274877906945,
};

// Enum UnionSystem.EUnionPlatformEvent
// NumValues: 0x000C
enum class EUnionPlatformEvent : uint8
{
	Unknown                                  = 0,
	Suspend                                  = 1,
	Resume                                   = 2,
	Deactivate                               = 3,
	Reactivated                              = 4,
	PreInstallation                          = 5,
	GameIntent                               = 6,
	DisConnectDevice                         = 7,
	NonControllerUser                        = 8,
	DefaultUserLogout                        = 9,
	Num                                      = 10,
	EUnionPlatformEvent_MAX                  = 11,
};

// Enum UnionSystem.EUnionPlatformOnlineRestrictionType
// NumValues: 0x0006
enum class EUnionPlatformOnlineRestrictionType : uint8
{
	NoRestriction                            = 0,
	NoOnlineSubscription                     = 1,
	ParentalControlRestricted                = 2,
	Unknown                                  = 3,
	Num                                      = 4,
	EUnionPlatformOnlineRestrictionType_MAX  = 5,
};

// Enum UnionSystem.EUnionPlatformPrivilegeType
// NumValues: 0x0007
enum class EUnionPlatformPrivilegeType : uint8
{
	Unknown                                  = 0,
	CanOnlinePlay                            = 1,
	CommunicateOnline                        = 2,
	UserGeneratedContent                     = 3,
	CrossPlay                                = 4,
	Num                                      = 5,
	EUnionPlatformPrivilegeType_MAX          = 6,
};

// Enum UnionSystem.ENXPrivilegeType
// NumValues: 0x0005
enum class ENXPrivilegeType : uint8
{
	Unavailable                              = 0,
	Available                                = 1,
	ErrorOccurred                            = 2,
	Num                                      = 3,
	ENXPrivilegeType_MAX                     = 4,
};

// Enum UnionSystem.ESoftwareKeyboardType
// NumValues: 0x0004
enum class ESoftwareKeyboardType : uint8
{
	Normal                                   = 0,
	Floating                                 = 1,
	Num                                      = 2,
	ESoftwareKeyboardType_MAX                = 3,
};

// Enum UnionSystem.ESoftwareKeyboardFloatingType
// NumValues: 0x0006
enum class ESoftwareKeyboardFloatingType : uint8
{
	SingleLine                               = 0,
	MultipleLines                            = 1,
	ModeEmail                                = 2,
	ModeNumeric                              = 3,
	Num                                      = 4,
	ESoftwareKeyboardFloatingType_MAX        = 5,
};

// Enum UnionSystem.EUnionPresenceType
// NumValues: 0x000A
enum class EUnionPresenceType : uint8
{
	Unknown                                  = 0,
	PlayingGrandPrix                         = 1,
	PlayingPartyRace                         = 2,
	PlayingTimeTrial                         = 3,
	PlayingRankMatch                         = 4,
	PlayingFest                              = 5,
	PlayingChampionship                      = 6,
	PlayingApplication                       = 7,
	Num                                      = 8,
	EUnionPresenceType_MAX                   = 9,
};

// Enum UnionSystem.EUnionTextureCompressType
// NumValues: 0x0009
enum class EUnionTextureCompressType : uint8
{
	BC1                                      = 0,
	BC1A                                     = 1,
	BC2                                      = 2,
	BC3                                      = 3,
	BC4                                      = 4,
	BC5                                      = 5,
	BC6H                                     = 6,
	BC7                                      = 7,
	EUnionTextureCompressType_MAX            = 8,
};

// Enum UnionSystem.EResultSearchTrialSaveData
// NumValues: 0x0006
enum class EResultSearchTrialSaveData : uint8
{
	Non                                      = 0,
	Found                                    = 1,
	NotFound                                 = 2,
	FoundError                               = 3,
	Error                                    = 4,
	EResultSearchTrialSaveData_MAX           = 5,
};

// Enum UnionSystem.EResultTransferTrialSaveData
// NumValues: 0x0004
enum class EResultTransferTrialSaveData : uint8
{
	Non                                      = 0,
	Success                                  = 1,
	Failed                                   = 2,
	EResultTransferTrialSaveData_MAX         = 3,
};

// Enum UnionSystem.ESoundPan
// NumValues: 0x0005
enum class ESoundPan : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Center                                   = 2,
	Unset                                    = 3,
	ESoundPan_MAX                            = 4,
};

// Enum UnionSystem.ESoundCuesheetLoadStatus
// NumValues: 0x0005
enum class ESoundCuesheetLoadStatus : uint8
{
	Unload                                   = 0,
	Loading                                  = 1,
	Loaded                                   = 2,
	Num                                      = 3,
	ESoundCuesheetLoadStatus_MAX             = 4,
};

// Enum UnionSystem.EUnionSystem
// NumValues: 0x000C
enum class EUnionSystem : uint8
{
	Object                                   = 0,
	Sound                                    = 1,
	Event                                    = 2,
	Debug                                    = 3,
	ConsoleCommand                           = 4,
	OnlineMatchDebug                         = 5,
	Log                                      = 6,
	GyroDebug                                = 7,
	RemoteDebug                              = 8,
	OnlineAutoDebug                          = 9,
	Num                                      = 10,
	EUnionSystem_MAX                         = 11,
};

// Enum UnionSystem.EUnionPlatform
// NumValues: 0x0007
enum class EUnionPlatform : uint8
{
	Windows                                  = 0,
	PS4                                      = 1,
	PS5                                      = 2,
	XB1                                      = 3,
	XSX                                      = 4,
	Switch                                   = 5,
	EUnionPlatform_MAX                       = 6,
};

// Enum UnionSystem.EUnionControllerType
// NumValues: 0x0005
enum class EUnionControllerType : uint8
{
	Pro                                      = 0,
	DualJoyCon                               = 1,
	Handheld                                 = 2,
	JoyCon                                   = 3,
	EUnionControllerType_MAX                 = 4,
};

// Enum UnionSystem.EUnionRomVersion
// NumValues: 0x0006
enum class EUnionRomVersion : uint8
{
	Unspecified                              = 0,
	Beta                                     = 1,
	Launch                                   = 2,
	Patch1                                   = 3,
	Patch2                                   = 4,
	EUnionRomVersion_MAX                     = 5,
};

// Enum UnionSystem.EUnionWidgetSlotType
// NumValues: 0x0005
enum class EUnionWidgetSlotType : uint8
{
	None                                     = 0,
	Canvas                                   = 1,
	Overlay                                  = 2,
	WidgetSwitcher                           = 3,
	EUnionWidgetSlotType_MAX                 = 4,
};

// Enum UnionSystem.EBanStatus
// NumValues: 0x0006
enum class EBanStatus : uint8
{
	None                                     = 0,
	ForeverBan                               = 1,
	TemporalBan                              = 2,
	ForeverBanNotification                   = 3,
	TemporalBanNotification                  = 4,
	Max                                      = 5,
};

// Enum UnionSystem.EOnlineEnvironmentSpec
// NumValues: 0x0005
enum class EOnlineEnvironmentSpec : uint8
{
	Development                              = 0,
	Test                                     = 1,
	Stage                                    = 2,
	Production                               = 3,
	EOnlineEnvironmentSpec_MAX               = 4,
};

// ScriptStruct UnionSystem.LocalizeRuntimeTextArray
// 0x0010 (0x0018 - 0x0008)
struct FLocalizeRuntimeTextArray final : public FTableRowBase
{
public:
	TArray<class FText>                           Texts;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizeRuntimeTextArray) == 0x000008, "Wrong alignment on FLocalizeRuntimeTextArray");
static_assert(sizeof(FLocalizeRuntimeTextArray) == 0x000018, "Wrong size on FLocalizeRuntimeTextArray");
static_assert(offsetof(FLocalizeRuntimeTextArray, Texts) == 0x000008, "Member 'FLocalizeRuntimeTextArray::Texts' has a wrong offset!");

// ScriptStruct UnionSystem.LocalizeRuntimeKeytopText
// 0x0030 (0x0038 - 0x0008)
struct FLocalizeRuntimeKeytopText final : public FTableRowBase
{
public:
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLocalizeRuntimeTextArray              Texts;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizeRuntimeKeytopText) == 0x000008, "Wrong alignment on FLocalizeRuntimeKeytopText");
static_assert(sizeof(FLocalizeRuntimeKeytopText) == 0x000038, "Wrong size on FLocalizeRuntimeKeytopText");
static_assert(offsetof(FLocalizeRuntimeKeytopText, Key) == 0x000008, "Member 'FLocalizeRuntimeKeytopText::Key' has a wrong offset!");
static_assert(offsetof(FLocalizeRuntimeKeytopText, Texts) == 0x000020, "Member 'FLocalizeRuntimeKeytopText::Texts' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstReleaseVersionData
// 0x0020 (0x0020 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstReleaseVersionData final
{
public:
	class FString                                 versionId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 releaseTime;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstReleaseVersionData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstReleaseVersionData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstReleaseVersionData) == 0x000020, "Wrong size on FMasterDataGetMasterDataResponse_MstReleaseVersionData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseVersionData, versionId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstReleaseVersionData::versionId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseVersionData, releaseTime) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstReleaseVersionData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataShortWarp
// 0x0088 (0x0088 - 0x0000)
struct FCRM_RadjDataShortWarp final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataShortWarp) == 0x000008, "Wrong alignment on FCRM_RadjDataShortWarp");
static_assert(sizeof(FCRM_RadjDataShortWarp) == 0x000088, "Wrong size on FCRM_RadjDataShortWarp");
static_assert(offsetof(FCRM_RadjDataShortWarp, action_type) == 0x000000, "Member 'FCRM_RadjDataShortWarp::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortWarp, key1) == 0x000010, "Member 'FCRM_RadjDataShortWarp::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortWarp, key2) == 0x000018, "Member 'FCRM_RadjDataShortWarp::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortWarp, key3) == 0x000028, "Member 'FCRM_RadjDataShortWarp::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortWarp, key4) == 0x000038, "Member 'FCRM_RadjDataShortWarp::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortWarp, key5) == 0x000048, "Member 'FCRM_RadjDataShortWarp::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortWarp, key6) == 0x000058, "Member 'FCRM_RadjDataShortWarp::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortWarp, key7) == 0x000068, "Member 'FCRM_RadjDataShortWarp::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortWarp, key8) == 0x000078, "Member 'FCRM_RadjDataShortWarp::key8' has a wrong offset!");

// ScriptStruct UnionSystem.ReplayKeyDataBuffer
// 0x0010 (0x0010 - 0x0000)
struct FReplayKeyDataBuffer final
{
public:
	TArray<uint8>                                 RowData;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayKeyDataBuffer) == 0x000008, "Wrong alignment on FReplayKeyDataBuffer");
static_assert(sizeof(FReplayKeyDataBuffer) == 0x000010, "Wrong size on FReplayKeyDataBuffer");
static_assert(offsetof(FReplayKeyDataBuffer, RowData) == 0x000000, "Member 'FReplayKeyDataBuffer::RowData' has a wrong offset!");

// ScriptStruct UnionSystem.ReplayHeader
// 0x00C8 (0x00C8 - 0x0000)
struct alignas(0x08) FReplayHeader final
{
public:
	uint8                                         hashCode[0x10];                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ID;                                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         userIdBytes[0x28];                                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        RomVersion;                                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        GhostDataVersion;                                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CourseVersion;                                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PFId;                                              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        DriverId;                                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StageId;                                           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartClockCount;                                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoalClockCount;                                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Time_1Rap;                                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Time_2Rap;                                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Time_3Rap;                                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Pad32_1;                                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Pad32_2;                                           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Pad32_3;                                           // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Pad32_4;                                           // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GadgetCRMID_1;                                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GadgetCRMID_2;                                     // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GadgetCRMID_3;                                     // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GadgetCRMID_4;                                     // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GadgetCRMID_5;                                     // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GadgetCRMID_6;                                     // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TotalEventCount;                                   // 0x007E(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TotalWriteCount;                                   // 0x0080(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RaceCameraType;                                    // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Dummy2[0x45];                                      // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayHeader) == 0x000008, "Wrong alignment on FReplayHeader");
static_assert(sizeof(FReplayHeader) == 0x0000C8, "Wrong size on FReplayHeader");
static_assert(offsetof(FReplayHeader, hashCode) == 0x000000, "Member 'FReplayHeader::hashCode' has a wrong offset!");
static_assert(offsetof(FReplayHeader, ID) == 0x000010, "Member 'FReplayHeader::ID' has a wrong offset!");
static_assert(offsetof(FReplayHeader, userIdBytes) == 0x000014, "Member 'FReplayHeader::userIdBytes' has a wrong offset!");
static_assert(offsetof(FReplayHeader, RomVersion) == 0x00003C, "Member 'FReplayHeader::RomVersion' has a wrong offset!");
static_assert(offsetof(FReplayHeader, GhostDataVersion) == 0x000040, "Member 'FReplayHeader::GhostDataVersion' has a wrong offset!");
static_assert(offsetof(FReplayHeader, CourseVersion) == 0x000044, "Member 'FReplayHeader::CourseVersion' has a wrong offset!");
static_assert(offsetof(FReplayHeader, PFId) == 0x000048, "Member 'FReplayHeader::PFId' has a wrong offset!");
static_assert(offsetof(FReplayHeader, DriverId) == 0x00004C, "Member 'FReplayHeader::DriverId' has a wrong offset!");
static_assert(offsetof(FReplayHeader, StageId) == 0x000050, "Member 'FReplayHeader::StageId' has a wrong offset!");
static_assert(offsetof(FReplayHeader, StartClockCount) == 0x000054, "Member 'FReplayHeader::StartClockCount' has a wrong offset!");
static_assert(offsetof(FReplayHeader, GoalClockCount) == 0x000058, "Member 'FReplayHeader::GoalClockCount' has a wrong offset!");
static_assert(offsetof(FReplayHeader, Time_1Rap) == 0x00005C, "Member 'FReplayHeader::Time_1Rap' has a wrong offset!");
static_assert(offsetof(FReplayHeader, Time_2Rap) == 0x000060, "Member 'FReplayHeader::Time_2Rap' has a wrong offset!");
static_assert(offsetof(FReplayHeader, Time_3Rap) == 0x000064, "Member 'FReplayHeader::Time_3Rap' has a wrong offset!");
static_assert(offsetof(FReplayHeader, Pad32_1) == 0x000068, "Member 'FReplayHeader::Pad32_1' has a wrong offset!");
static_assert(offsetof(FReplayHeader, Pad32_2) == 0x00006C, "Member 'FReplayHeader::Pad32_2' has a wrong offset!");
static_assert(offsetof(FReplayHeader, Pad32_3) == 0x000070, "Member 'FReplayHeader::Pad32_3' has a wrong offset!");
static_assert(offsetof(FReplayHeader, Pad32_4) == 0x000074, "Member 'FReplayHeader::Pad32_4' has a wrong offset!");
static_assert(offsetof(FReplayHeader, GadgetCRMID_1) == 0x000078, "Member 'FReplayHeader::GadgetCRMID_1' has a wrong offset!");
static_assert(offsetof(FReplayHeader, GadgetCRMID_2) == 0x000079, "Member 'FReplayHeader::GadgetCRMID_2' has a wrong offset!");
static_assert(offsetof(FReplayHeader, GadgetCRMID_3) == 0x00007A, "Member 'FReplayHeader::GadgetCRMID_3' has a wrong offset!");
static_assert(offsetof(FReplayHeader, GadgetCRMID_4) == 0x00007B, "Member 'FReplayHeader::GadgetCRMID_4' has a wrong offset!");
static_assert(offsetof(FReplayHeader, GadgetCRMID_5) == 0x00007C, "Member 'FReplayHeader::GadgetCRMID_5' has a wrong offset!");
static_assert(offsetof(FReplayHeader, GadgetCRMID_6) == 0x00007D, "Member 'FReplayHeader::GadgetCRMID_6' has a wrong offset!");
static_assert(offsetof(FReplayHeader, TotalEventCount) == 0x00007E, "Member 'FReplayHeader::TotalEventCount' has a wrong offset!");
static_assert(offsetof(FReplayHeader, TotalWriteCount) == 0x000080, "Member 'FReplayHeader::TotalWriteCount' has a wrong offset!");
static_assert(offsetof(FReplayHeader, RaceCameraType) == 0x000082, "Member 'FReplayHeader::RaceCameraType' has a wrong offset!");
static_assert(offsetof(FReplayHeader, Dummy2) == 0x000083, "Member 'FReplayHeader::Dummy2' has a wrong offset!");

// ScriptStruct UnionSystem.ReplayEventDataBuffer
// 0x0010 (0x0010 - 0x0000)
struct FReplayEventDataBuffer final
{
public:
	TArray<uint8>                                 RowData;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayEventDataBuffer) == 0x000008, "Wrong alignment on FReplayEventDataBuffer");
static_assert(sizeof(FReplayEventDataBuffer) == 0x000010, "Wrong size on FReplayEventDataBuffer");
static_assert(offsetof(FReplayEventDataBuffer, RowData) == 0x000000, "Member 'FReplayEventDataBuffer::RowData' has a wrong offset!");

// ScriptStruct UnionSystem.ReplayMachineData
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FReplayMachineData final
{
public:
	bool                                          bIsUsed;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    FrontPartsId;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    RearPartsId;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    TirePartsId;                                       // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineColorMode                             ColorMode;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineColorPresetId                         ColorPresetId;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineHornType                              HornType;                                          // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineAuraId                                AuraId;                                            // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyColorArea1;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyColorArea2;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyColorArea3;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodySurfaceArea1;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodySurfaceArea2;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodySurfaceArea3;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CockpitColorArea1;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CockpitColorArea2;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CockpitColorArea3;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CockpitSurfaceArea1;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CockpitSurfaceArea2;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CockpitSurfaceArea3;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireColorArea1;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireColorArea2;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireColorArea3;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireSurfaceArea1;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireSurfaceArea2;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireSurfaceArea3;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyGlowColor;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireGlowColor;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayMachineData) == 0x000008, "Wrong alignment on FReplayMachineData");
static_assert(sizeof(FReplayMachineData) == 0x000058, "Wrong size on FReplayMachineData");
static_assert(offsetof(FReplayMachineData, bIsUsed) == 0x000000, "Member 'FReplayMachineData::bIsUsed' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, FrontPartsId) == 0x000001, "Member 'FReplayMachineData::FrontPartsId' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, RearPartsId) == 0x000002, "Member 'FReplayMachineData::RearPartsId' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, TirePartsId) == 0x000003, "Member 'FReplayMachineData::TirePartsId' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, ColorMode) == 0x000004, "Member 'FReplayMachineData::ColorMode' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, ColorPresetId) == 0x000005, "Member 'FReplayMachineData::ColorPresetId' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, HornType) == 0x000006, "Member 'FReplayMachineData::HornType' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, AuraId) == 0x000007, "Member 'FReplayMachineData::AuraId' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, BodyColorArea1) == 0x000008, "Member 'FReplayMachineData::BodyColorArea1' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, BodyColorArea2) == 0x00000C, "Member 'FReplayMachineData::BodyColorArea2' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, BodyColorArea3) == 0x000010, "Member 'FReplayMachineData::BodyColorArea3' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, BodySurfaceArea1) == 0x000014, "Member 'FReplayMachineData::BodySurfaceArea1' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, BodySurfaceArea2) == 0x000018, "Member 'FReplayMachineData::BodySurfaceArea2' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, BodySurfaceArea3) == 0x00001C, "Member 'FReplayMachineData::BodySurfaceArea3' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, CockpitColorArea1) == 0x000020, "Member 'FReplayMachineData::CockpitColorArea1' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, CockpitColorArea2) == 0x000024, "Member 'FReplayMachineData::CockpitColorArea2' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, CockpitColorArea3) == 0x000028, "Member 'FReplayMachineData::CockpitColorArea3' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, CockpitSurfaceArea1) == 0x00002C, "Member 'FReplayMachineData::CockpitSurfaceArea1' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, CockpitSurfaceArea2) == 0x000030, "Member 'FReplayMachineData::CockpitSurfaceArea2' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, CockpitSurfaceArea3) == 0x000034, "Member 'FReplayMachineData::CockpitSurfaceArea3' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, TireColorArea1) == 0x000038, "Member 'FReplayMachineData::TireColorArea1' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, TireColorArea2) == 0x00003C, "Member 'FReplayMachineData::TireColorArea2' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, TireColorArea3) == 0x000040, "Member 'FReplayMachineData::TireColorArea3' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, TireSurfaceArea1) == 0x000044, "Member 'FReplayMachineData::TireSurfaceArea1' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, TireSurfaceArea2) == 0x000048, "Member 'FReplayMachineData::TireSurfaceArea2' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, TireSurfaceArea3) == 0x00004C, "Member 'FReplayMachineData::TireSurfaceArea3' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, BodyGlowColor) == 0x000050, "Member 'FReplayMachineData::BodyGlowColor' has a wrong offset!");
static_assert(offsetof(FReplayMachineData, TireGlowColor) == 0x000054, "Member 'FReplayMachineData::TireGlowColor' has a wrong offset!");

// ScriptStruct UnionSystem.ReplayStatusDataBuffer
// 0x0010 (0x0010 - 0x0000)
struct FReplayStatusDataBuffer final
{
public:
	TArray<uint8>                                 RowData;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayStatusDataBuffer) == 0x000008, "Wrong alignment on FReplayStatusDataBuffer");
static_assert(sizeof(FReplayStatusDataBuffer) == 0x000010, "Wrong size on FReplayStatusDataBuffer");
static_assert(offsetof(FReplayStatusDataBuffer, RowData) == 0x000000, "Member 'FReplayStatusDataBuffer::RowData' has a wrong offset!");

// ScriptStruct UnionSystem.ReplaySaveInfo
// 0x0140 (0x0140 - 0x0000)
struct FReplaySaveInfo final
{
public:
	struct FReplayHeader                          Header;                                            // 0x0000(0x00C8)(NoDestructor, NativeAccessSpecifierPublic)
	struct FReplayMachineData                     MachineData;                                       // 0x00C8(0x0058)(NoDestructor, NativeAccessSpecifierPublic)
	struct FReplayStatusDataBuffer                StatusData;                                        // 0x0120(0x0010)(NativeAccessSpecifierPublic)
	struct FReplayEventDataBuffer                 ReplayEventData;                                   // 0x0130(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplaySaveInfo) == 0x000008, "Wrong alignment on FReplaySaveInfo");
static_assert(sizeof(FReplaySaveInfo) == 0x000140, "Wrong size on FReplaySaveInfo");
static_assert(offsetof(FReplaySaveInfo, Header) == 0x000000, "Member 'FReplaySaveInfo::Header' has a wrong offset!");
static_assert(offsetof(FReplaySaveInfo, MachineData) == 0x0000C8, "Member 'FReplaySaveInfo::MachineData' has a wrong offset!");
static_assert(offsetof(FReplaySaveInfo, StatusData) == 0x000120, "Member 'FReplaySaveInfo::StatusData' has a wrong offset!");
static_assert(offsetof(FReplaySaveInfo, ReplayEventData) == 0x000130, "Member 'FReplaySaveInfo::ReplayEventData' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogRanking
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPlayLogRanking final
{
public:
	int32                                         Average;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0x14];                                       // 0x0004(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayLogRanking) == 0x000008, "Wrong alignment on FPlayLogRanking");
static_assert(sizeof(FPlayLogRanking) == 0x000018, "Wrong size on FPlayLogRanking");
static_assert(offsetof(FPlayLogRanking, Average) == 0x000000, "Member 'FPlayLogRanking::Average' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameParty
// 0x0220 (0x0220 - 0x0000)
struct FPlayLogSaveGameParty final
{
public:
	struct FPlayLogRanking                        Ranking[0x11];                                     // 0x0000(0x0018)(NativeAccessSpecifierPrivate)
	int32                                         PlayCount[0x11];                                   // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PlayTime[0x11];                                    // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSaveGameParty) == 0x000008, "Wrong alignment on FPlayLogSaveGameParty");
static_assert(sizeof(FPlayLogSaveGameParty) == 0x000220, "Wrong size on FPlayLogSaveGameParty");
static_assert(offsetof(FPlayLogSaveGameParty, Ranking) == 0x000000, "Member 'FPlayLogSaveGameParty::Ranking' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameParty, PlayCount) == 0x000198, "Member 'FPlayLogSaveGameParty::PlayCount' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameParty, PlayTime) == 0x0001DC, "Member 'FPlayLogSaveGameParty::PlayTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFreeContentData
// 0x0018 (0x0018 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFreeContentData final
{
public:
	int32                                         contentType;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         contentId;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFreeContentData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFreeContentData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFreeContentData) == 0x000018, "Wrong size on FMasterDataGetMasterDataResponse_MstFreeContentData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFreeContentData, contentType) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFreeContentData::contentType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFreeContentData, contentId) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFreeContentData::contentId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFreeContentData, releaseTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFreeContentData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataUserNoteCarParts
// 0x000C (0x000C - 0x0000)
struct FRankingDataUserNoteCarParts final
{
public:
	int32                                         frontId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rearId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         tireId;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataUserNoteCarParts) == 0x000004, "Wrong alignment on FRankingDataUserNoteCarParts");
static_assert(sizeof(FRankingDataUserNoteCarParts) == 0x00000C, "Wrong size on FRankingDataUserNoteCarParts");
static_assert(offsetof(FRankingDataUserNoteCarParts, frontId) == 0x000000, "Member 'FRankingDataUserNoteCarParts::frontId' has a wrong offset!");
static_assert(offsetof(FRankingDataUserNoteCarParts, rearId) == 0x000004, "Member 'FRankingDataUserNoteCarParts::rearId' has a wrong offset!");
static_assert(offsetof(FRankingDataUserNoteCarParts, tireId) == 0x000008, "Member 'FRankingDataUserNoteCarParts::tireId' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_GadgetPossession
// 0x0020 (0x0020 - 0x0000)
struct FCRM_GadgetPossession final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_GadgetPossession) == 0x000008, "Wrong alignment on FCRM_GadgetPossession");
static_assert(sizeof(FCRM_GadgetPossession) == 0x000020, "Wrong size on FCRM_GadgetPossession");
static_assert(offsetof(FCRM_GadgetPossession, action_type) == 0x000000, "Member 'FCRM_GadgetPossession::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_GadgetPossession, key1) == 0x000010, "Member 'FCRM_GadgetPossession::key1' has a wrong offset!");

// ScriptStruct UnionSystem.TimeTrialWorldRankingOperationData
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FTimeTrialWorldRankingOperationData final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeTrialWorldRankingOperationData) == 0x000008, "Wrong alignment on FTimeTrialWorldRankingOperationData");
static_assert(sizeof(FTimeTrialWorldRankingOperationData) == 0x000058, "Wrong size on FTimeTrialWorldRankingOperationData");

// ScriptStruct UnionSystem.NetMasterData_FestaData
// 0x0058 (0x0058 - 0x0000)
struct FNetMasterData_FestaData final
{
public:
	int32                                         festaId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         raceRuleId;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bonusChanceId;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardConditionsId;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointRaceOrderId;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointTeamWldId;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointBonusId;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         courseLotteryId;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rankingId;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         timeSceduleId;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         timeSceduleLoopCount;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNetMasterData_FestaData) == 0x000008, "Wrong alignment on FNetMasterData_FestaData");
static_assert(sizeof(FNetMasterData_FestaData) == 0x000058, "Wrong size on FNetMasterData_FestaData");
static_assert(offsetof(FNetMasterData_FestaData, festaId) == 0x000000, "Member 'FNetMasterData_FestaData::festaId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, StartTime) == 0x000008, "Member 'FNetMasterData_FestaData::StartTime' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, endTime) == 0x000018, "Member 'FNetMasterData_FestaData::endTime' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, raceRuleId) == 0x000028, "Member 'FNetMasterData_FestaData::raceRuleId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, bonusChanceId) == 0x00002C, "Member 'FNetMasterData_FestaData::bonusChanceId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, rewardId) == 0x000030, "Member 'FNetMasterData_FestaData::rewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, rewardConditionsId) == 0x000034, "Member 'FNetMasterData_FestaData::rewardConditionsId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, pointRaceOrderId) == 0x000038, "Member 'FNetMasterData_FestaData::pointRaceOrderId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, pointTeamWldId) == 0x00003C, "Member 'FNetMasterData_FestaData::pointTeamWldId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, pointBonusId) == 0x000040, "Member 'FNetMasterData_FestaData::pointBonusId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, courseLotteryId) == 0x000044, "Member 'FNetMasterData_FestaData::courseLotteryId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, rankingId) == 0x000048, "Member 'FNetMasterData_FestaData::rankingId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, timeSceduleId) == 0x00004C, "Member 'FNetMasterData_FestaData::timeSceduleId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaData, timeSceduleLoopCount) == 0x000050, "Member 'FNetMasterData_FestaData::timeSceduleLoopCount' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         participateCount;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData, ID) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData::ID' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData, participateCount) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData::participateCount' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData, rewardType) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData::rewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData, rewardId) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData::rewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData, rewardNum) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.TimeTrialTargetTimeTableData
// 0x0018 (0x0020 - 0x0008)
struct FTimeTrialTargetTimeTableData final : public FTableRowBase
{
public:
	EStageId                                      StageId;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RankTime;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeTrialTargetTimeTableData) == 0x000008, "Wrong alignment on FTimeTrialTargetTimeTableData");
static_assert(sizeof(FTimeTrialTargetTimeTableData) == 0x000020, "Wrong size on FTimeTrialTargetTimeTableData");
static_assert(offsetof(FTimeTrialTargetTimeTableData, StageId) == 0x000008, "Member 'FTimeTrialTargetTimeTableData::StageId' has a wrong offset!");
static_assert(offsetof(FTimeTrialTargetTimeTableData, RankTime) == 0x000010, "Member 'FTimeTrialTargetTimeTableData::RankTime' has a wrong offset!");

// ScriptStruct UnionSystem.OnlineErrorBP
// 0x0038 (0x0038 - 0x0000)
struct FOnlineErrorBP final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorRaw;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorCode;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ErrorMessage;                                      // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnlineErrorBP) == 0x000008, "Wrong alignment on FOnlineErrorBP");
static_assert(sizeof(FOnlineErrorBP) == 0x000038, "Wrong size on FOnlineErrorBP");
static_assert(offsetof(FOnlineErrorBP, bSucceeded) == 0x000000, "Member 'FOnlineErrorBP::bSucceeded' has a wrong offset!");
static_assert(offsetof(FOnlineErrorBP, ErrorRaw) == 0x000008, "Member 'FOnlineErrorBP::ErrorRaw' has a wrong offset!");
static_assert(offsetof(FOnlineErrorBP, ErrorCode) == 0x000018, "Member 'FOnlineErrorBP::ErrorCode' has a wrong offset!");
static_assert(offsetof(FOnlineErrorBP, ErrorMessage) == 0x000028, "Member 'FOnlineErrorBP::ErrorMessage' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaData
// 0x0058 (0x0058 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaData final
{
public:
	int32                                         festaId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         raceRuleId;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bonusChanceId;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardConditionsId;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointRaceOrderId;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointTeamWldId;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointBonusId;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         courseLotteryId;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rankingId;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         timeSceduleId;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         timeSceduleLoopCount;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaData) == 0x000058, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, festaId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::festaId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, StartTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::StartTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, endTime) == 0x000018, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::endTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, raceRuleId) == 0x000028, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::raceRuleId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, bonusChanceId) == 0x00002C, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::bonusChanceId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, rewardId) == 0x000030, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::rewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, rewardConditionsId) == 0x000034, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::rewardConditionsId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, pointRaceOrderId) == 0x000038, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::pointRaceOrderId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, pointTeamWldId) == 0x00003C, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::pointTeamWldId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, pointBonusId) == 0x000040, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::pointBonusId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, courseLotteryId) == 0x000044, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::courseLotteryId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, rankingId) == 0x000048, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::rankingId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, timeSceduleId) == 0x00004C, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::timeSceduleId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaData, timeSceduleLoopCount) == 0x000050, "Member 'FMasterDataGetMasterDataResponse_MstFestaData::timeSceduleLoopCount' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaCourseLotteryData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData final
{
public:
	int32                                         courseLotteryId;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Active;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         courseId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lottery;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Launch;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          collaborationDlc;                                  // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          notCollaborationDlc;                               // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData, courseLotteryId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData::courseLotteryId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData, Active) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData::Active' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData, courseId) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData::courseId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData, Lottery) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData::Lottery' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData, Launch) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData::Launch' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData, collaborationDlc) == 0x000011, "Member 'FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData::collaborationDlc' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData, notCollaborationDlc) == 0x000012, "Member 'FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData::notCollaborationDlc' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaPointBonusData
// 0x001C (0x001C - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaPointBonusData final
{
public:
	int32                                         pointBonusId;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         friendBonusPoint1;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         friendBonusPoint2;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         friendBonusPoint3;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         winStreakBonusPoint;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         leadTimeNo1Point;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         winBonusNo1Point;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaPointBonusData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaPointBonusData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaPointBonusData) == 0x00001C, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaPointBonusData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointBonusData, pointBonusId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointBonusData::pointBonusId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointBonusData, friendBonusPoint1) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointBonusData::friendBonusPoint1' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointBonusData, friendBonusPoint2) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointBonusData::friendBonusPoint2' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointBonusData, friendBonusPoint3) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointBonusData::friendBonusPoint3' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointBonusData, winStreakBonusPoint) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointBonusData::winStreakBonusPoint' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointBonusData, leadTimeNo1Point) == 0x000014, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointBonusData::leadTimeNo1Point' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointBonusData, winBonusNo1Point) == 0x000018, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointBonusData::winBonusNo1Point' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaPointRaceOrderData
// 0x0034 (0x0034 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData final
{
public:
	int32                                         pointRaceOrderId;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint1;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint2;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint3;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint4;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint5;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint6;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint7;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint8;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint9;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint10;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint11;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint12;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData) == 0x000034, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, pointRaceOrderId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::pointRaceOrderId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, orderPoint1) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::orderPoint1' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, orderPoint2) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::orderPoint2' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, orderPoint3) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::orderPoint3' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, orderPoint4) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::orderPoint4' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, orderPoint5) == 0x000014, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::orderPoint5' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, orderPoint6) == 0x000018, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::orderPoint6' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, orderPoint7) == 0x00001C, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::orderPoint7' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, orderPoint8) == 0x000020, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::orderPoint8' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, orderPoint9) == 0x000024, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::orderPoint9' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, orderPoint10) == 0x000028, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::orderPoint10' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, orderPoint11) == 0x00002C, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::orderPoint11' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData, orderPoint12) == 0x000030, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData::orderPoint12' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaPointRewardData
// 0x0020 (0x0020 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaPointRewardData final
{
public:
	int32                                         pointRewardId;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         isNext;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNumber;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         itemType;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         itemNum;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaPointRewardData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaPointRewardData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaPointRewardData) == 0x000020, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaPointRewardData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardData, pointRewardId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardData::pointRewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardData, rewardId) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardData::rewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardData, rewardType) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardData::rewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardData, isNext) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardData::isNext' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardData, rewardNumber) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardData::rewardNumber' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardData, itemType) == 0x000014, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardData::itemType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardData, ItemId) == 0x000018, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardData::ItemId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardData, itemNum) == 0x00001C, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardData::itemNum' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData final
{
public:
	int32                                         pointRewardConditionsId;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardConditionsId;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNumber;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointValue;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData, pointRewardConditionsId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData::pointRewardConditionsId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData, rewardConditionsId) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData::rewardConditionsId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData, rewardType) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData::rewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData, rewardNumber) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData::rewardNumber' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData, pointValue) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData::pointValue' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaPointSetData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaPointSetData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointRaceOrderId;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointTeamContribAttackHitId;                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointTeamContribRingId;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointTeamWldId;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaPointSetData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaPointSetData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaPointSetData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaPointSetData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointSetData, ID) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointSetData::ID' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointSetData, pointRaceOrderId) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointSetData::pointRaceOrderId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointSetData, pointTeamContribAttackHitId) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointSetData::pointTeamContribAttackHitId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointSetData, pointTeamContribRingId) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointSetData::pointTeamContribRingId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointSetData, pointTeamWldId) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointSetData::pointTeamWldId' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint1;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint2;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint3;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint4;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData, ID) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData::ID' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData, teamOrderPoint1) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData::teamOrderPoint1' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData, teamOrderPoint2) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData::teamOrderPoint2' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData, teamOrderPoint3) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData::teamOrderPoint3' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData, teamOrderPoint4) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData::teamOrderPoint4' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint1;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint2;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint3;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint4;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData, ID) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData::ID' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData, teamOrderPoint1) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData::teamOrderPoint1' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData, teamOrderPoint2) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData::teamOrderPoint2' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData, teamOrderPoint3) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData::teamOrderPoint3' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData, teamOrderPoint4) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData::teamOrderPoint4' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaPointTeamWldData
// 0x0010 (0x0010 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData final
{
public:
	int32                                         pointTeamWldId;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint1;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint2;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint3;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData) == 0x000010, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData, pointTeamWldId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData::pointTeamWldId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData, teamOrderPoint1) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData::teamOrderPoint1' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData, teamOrderPoint2) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData::teamOrderPoint2' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData, teamOrderPoint3) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData::teamOrderPoint3' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaRankingRewardData
// 0x0018 (0x0018 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaRankingRewardData final
{
public:
	int32                                         rankingRewardId;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rankingId;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNumber;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         upper;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         titleId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ticketNum;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaRankingRewardData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaRankingRewardData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaRankingRewardData) == 0x000018, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaRankingRewardData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRankingRewardData, rankingRewardId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaRankingRewardData::rankingRewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRankingRewardData, rankingId) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFestaRankingRewardData::rankingId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRankingRewardData, rewardNumber) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaRankingRewardData::rewardNumber' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRankingRewardData, upper) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFestaRankingRewardData::upper' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRankingRewardData, titleId) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstFestaRankingRewardData::titleId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRankingRewardData, ticketNum) == 0x000014, "Member 'FMasterDataGetMasterDataResponse_MstFestaRankingRewardData::ticketNum' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaRoundRewardData
// 0x004C (0x004C - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaRoundRewardData final
{
public:
	int32                                         festaId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeFirstRewardType;                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeFirstReward;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeFirstRewardNum;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeSecondRewardType;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeSecondReward;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeSecondRewardNum;                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeThirdRewardType;                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeThirdReward;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeThirdRewardNum;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericFirstRewardType;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericFirstReward;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericFirstRewardNum;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericSecondRewardType;                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericSecondReward;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericSecondRewardNum;                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericThirdRewardType;                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericThirdReward;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericThirdRewardNum;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaRoundRewardData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData) == 0x00004C, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaRoundRewardData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, festaId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::festaId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, firstTimeFirstRewardType) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::firstTimeFirstRewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, firstTimeFirstReward) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::firstTimeFirstReward' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, firstTimeFirstRewardNum) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::firstTimeFirstRewardNum' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, firstTimeSecondRewardType) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::firstTimeSecondRewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, firstTimeSecondReward) == 0x000014, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::firstTimeSecondReward' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, firstTimeSecondRewardNum) == 0x000018, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::firstTimeSecondRewardNum' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, firstTimeThirdRewardType) == 0x00001C, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::firstTimeThirdRewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, firstTimeThirdReward) == 0x000020, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::firstTimeThirdReward' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, firstTimeThirdRewardNum) == 0x000024, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::firstTimeThirdRewardNum' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, genericFirstRewardType) == 0x000028, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::genericFirstRewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, genericFirstReward) == 0x00002C, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::genericFirstReward' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, genericFirstRewardNum) == 0x000030, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::genericFirstRewardNum' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, genericSecondRewardType) == 0x000034, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::genericSecondRewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, genericSecondReward) == 0x000038, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::genericSecondReward' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, genericSecondRewardNum) == 0x00003C, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::genericSecondRewardNum' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, genericThirdRewardType) == 0x000040, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::genericThirdRewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, genericThirdReward) == 0x000044, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::genericThirdReward' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaRoundRewardData, genericThirdRewardNum) == 0x000048, "Member 'FMasterDataGetMasterDataResponse_MstFestaRoundRewardData::genericThirdRewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFestaTimeSceduleData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData final
{
public:
	int32                                         timeSceduleId;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sequence;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSp;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         raceRuleId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         timeMinute;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData, timeSceduleId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData::timeSceduleId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData, Sequence) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData::Sequence' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData, isSp) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData::isSp' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData, raceRuleId) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData::raceRuleId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData, timeMinute) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData::timeMinute' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstLegendCompeData
// 0x0040 (0x0040 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstLegendCompeData final
{
public:
	int32                                         compeId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         compeSeason;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartTime;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         endExtensionTime;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         legendGradeId;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gradeAdjustValue;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rankingRewardId;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gradeRewardId;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstLegendCompeData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstLegendCompeData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstLegendCompeData) == 0x000040, "Wrong size on FMasterDataGetMasterDataResponse_MstLegendCompeData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeData, compeId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeData::compeId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeData, compeSeason) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeData::compeSeason' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeData, StartTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeData::StartTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeData, endTime) == 0x000018, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeData::endTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeData, endExtensionTime) == 0x000028, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeData::endExtensionTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeData, legendGradeId) == 0x00002C, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeData::legendGradeId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeData, gradeAdjustValue) == 0x000030, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeData::gradeAdjustValue' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeData, rankingRewardId) == 0x000034, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeData::rankingRewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeData, gradeRewardId) == 0x000038, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeData::gradeRewardId' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstLegendCompeGradeTableData
// 0x000C (0x000C - 0x0000)
struct FMasterDataGetMasterDataResponse_MstLegendCompeGradeTableData final
{
public:
	int32                                         legendGradeId;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gradeValue;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rateValue;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstLegendCompeGradeTableData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstLegendCompeGradeTableData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstLegendCompeGradeTableData) == 0x00000C, "Wrong size on FMasterDataGetMasterDataResponse_MstLegendCompeGradeTableData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeGradeTableData, legendGradeId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeGradeTableData::legendGradeId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeGradeTableData, gradeValue) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeGradeTableData::gradeValue' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeGradeTableData, rateValue) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeGradeTableData::rateValue' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData final
{
public:
	int32                                         gradeRewardId;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gradeValue;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData, gradeRewardId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData::gradeRewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData, gradeValue) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData::gradeValue' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData, rewardType) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData::rewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData, rewardId) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData::rewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData, rewardNum) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData final
{
public:
	int32                                         rankingRewardId;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         upper;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData, rankingRewardId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData::rankingRewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData, upper) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData::upper' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData, rewardType) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData::rewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData, rewardId) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData::rewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData, rewardNum) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstLegendCompeRankTableData
// 0x0020 (0x0020 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstLegendCompeRankTableData final
{
public:
	int32                                         rankId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 rankValue;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rateValue;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstLegendCompeRankTableData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstLegendCompeRankTableData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstLegendCompeRankTableData) == 0x000020, "Wrong size on FMasterDataGetMasterDataResponse_MstLegendCompeRankTableData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRankTableData, rankId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRankTableData::rankId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRankTableData, rankValue) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRankTableData::rankValue' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRankTableData, rateValue) == 0x000018, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRankTableData::rateValue' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstLegendCompeRewardData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstLegendCompeRewardData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardPatternId;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstLegendCompeRewardData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstLegendCompeRewardData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardData, ID) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardData::ID' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardData, rewardPatternId) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardData::rewardPatternId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardData, rewardType) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardData::rewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardData, rewardId) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardData::rewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardData, rewardNum) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstCount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData, ID) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData::ID' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData, firstCount) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData::firstCount' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData, rewardType) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData::rewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData, rewardId) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData::rewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData, rewardNum) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         raceCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData, ID) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData::ID' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData, raceCount) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData::raceCount' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData, rewardType) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData::rewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData, rewardId) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData::rewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData, rewardNum) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData
// 0x0014 (0x0014 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardPatternId;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData) == 0x000014, "Wrong size on FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData, ID) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData::ID' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData, rewardPatternId) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData::rewardPatternId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData, rewardType) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData::rewardType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData, rewardId) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData::rewardId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData, rewardNum) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstRankMatchRankTableData
// 0x0020 (0x0020 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstRankMatchRankTableData final
{
public:
	int32                                         rankId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 rankValue;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rateValue;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstRankMatchRankTableData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstRankMatchRankTableData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstRankMatchRankTableData) == 0x000020, "Wrong size on FMasterDataGetMasterDataResponse_MstRankMatchRankTableData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstRankMatchRankTableData, rankId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstRankMatchRankTableData::rankId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstRankMatchRankTableData, rankValue) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstRankMatchRankTableData::rankValue' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstRankMatchRankTableData, rateValue) == 0x000018, "Member 'FMasterDataGetMasterDataResponse_MstRankMatchRankTableData::rateValue' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFairPlayPointData
// 0x0010 (0x0010 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFairPlayPointData final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lower;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         upper;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFairPlayPointData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFairPlayPointData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFairPlayPointData) == 0x000010, "Wrong size on FMasterDataGetMasterDataResponse_MstFairPlayPointData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFairPlayPointData, Type) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFairPlayPointData::Type' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFairPlayPointData, lower) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstFairPlayPointData::lower' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFairPlayPointData, upper) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFairPlayPointData::upper' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFairPlayPointData, Num) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstFairPlayPointData::Num' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstBanReleaseData
// 0x0010 (0x0010 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstBanReleaseData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         banLower;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         banUpper;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         releaseHour;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstBanReleaseData) == 0x000004, "Wrong alignment on FMasterDataGetMasterDataResponse_MstBanReleaseData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstBanReleaseData) == 0x000010, "Wrong size on FMasterDataGetMasterDataResponse_MstBanReleaseData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBanReleaseData, ID) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstBanReleaseData::ID' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBanReleaseData, banLower) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstBanReleaseData::banLower' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBanReleaseData, banUpper) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstBanReleaseData::banUpper' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBanReleaseData, releaseHour) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstBanReleaseData::releaseHour' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstGeneralizedParameterData
// 0x0030 (0x0030 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstGeneralizedParameterData final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValueType;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstGeneralizedParameterData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstGeneralizedParameterData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstGeneralizedParameterData) == 0x000030, "Wrong size on FMasterDataGetMasterDataResponse_MstGeneralizedParameterData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstGeneralizedParameterData, ParameterName) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstGeneralizedParameterData::ParameterName' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstGeneralizedParameterData, ValueType) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstGeneralizedParameterData::ValueType' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstGeneralizedParameterData, Value) == 0x000020, "Member 'FMasterDataGetMasterDataResponse_MstGeneralizedParameterData::Value' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstBannerData
// 0x0050 (0x0050 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstBannerData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          notice;                                            // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          afterEnd;                                          // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 changeTime1;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 changeTime2;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstBannerData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstBannerData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstBannerData) == 0x000050, "Wrong size on FMasterDataGetMasterDataResponse_MstBannerData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBannerData, ID) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstBannerData::ID' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBannerData, characterId) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstBannerData::characterId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBannerData, Priority) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstBannerData::Priority' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBannerData, notice) == 0x00000C, "Member 'FMasterDataGetMasterDataResponse_MstBannerData::notice' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBannerData, afterEnd) == 0x00000D, "Member 'FMasterDataGetMasterDataResponse_MstBannerData::afterEnd' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBannerData, StartTime) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstBannerData::StartTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBannerData, changeTime1) == 0x000020, "Member 'FMasterDataGetMasterDataResponse_MstBannerData::changeTime1' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBannerData, changeTime2) == 0x000030, "Member 'FMasterDataGetMasterDataResponse_MstBannerData::changeTime2' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstBannerData, endTime) == 0x000040, "Member 'FMasterDataGetMasterDataResponse_MstBannerData::endTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstFreeDlcData
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstFreeDlcData final
{
public:
	int32                                         dlcId;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstFreeDlcData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstFreeDlcData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstFreeDlcData) == 0x000028, "Wrong size on FMasterDataGetMasterDataResponse_MstFreeDlcData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFreeDlcData, dlcId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstFreeDlcData::dlcId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFreeDlcData, StartTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstFreeDlcData::StartTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstFreeDlcData, endTime) == 0x000018, "Member 'FMasterDataGetMasterDataResponse_MstFreeDlcData::endTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstDlcTeaserData
// 0x0030 (0x0030 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstDlcTeaserData final
{
public:
	class FString                                 dlcTeaserId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartTime;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstDlcTeaserData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstDlcTeaserData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstDlcTeaserData) == 0x000030, "Wrong size on FMasterDataGetMasterDataResponse_MstDlcTeaserData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstDlcTeaserData, dlcTeaserId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstDlcTeaserData::dlcTeaserId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstDlcTeaserData, StartTime) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstDlcTeaserData::StartTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstDlcTeaserData, endTime) == 0x000020, "Member 'FMasterDataGetMasterDataResponse_MstDlcTeaserData::endTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstNewsData
// 0x0040 (0x0040 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstNewsData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         noticeId;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Category;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayTime;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstNewsData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstNewsData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstNewsData) == 0x000040, "Wrong size on FMasterDataGetMasterDataResponse_MstNewsData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstNewsData, ID) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstNewsData::ID' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstNewsData, noticeId) == 0x000004, "Member 'FMasterDataGetMasterDataResponse_MstNewsData::noticeId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstNewsData, Category) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstNewsData::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstNewsData, StartTime) == 0x000010, "Member 'FMasterDataGetMasterDataResponse_MstNewsData::StartTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstNewsData, endTime) == 0x000020, "Member 'FMasterDataGetMasterDataResponse_MstNewsData::endTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstNewsData, DisplayTime) == 0x000030, "Member 'FMasterDataGetMasterDataResponse_MstNewsData::DisplayTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstReleaseAuraData
// 0x0018 (0x0018 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstReleaseAuraData final
{
public:
	int32                                         AuraId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstReleaseAuraData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstReleaseAuraData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstReleaseAuraData) == 0x000018, "Wrong size on FMasterDataGetMasterDataResponse_MstReleaseAuraData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseAuraData, AuraId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstReleaseAuraData::AuraId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseAuraData, releaseTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstReleaseAuraData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstReleaseCharacterData
// 0x0018 (0x0018 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstReleaseCharacterData final
{
public:
	int32                                         characterId;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstReleaseCharacterData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstReleaseCharacterData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstReleaseCharacterData) == 0x000018, "Wrong size on FMasterDataGetMasterDataResponse_MstReleaseCharacterData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseCharacterData, characterId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstReleaseCharacterData::characterId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseCharacterData, releaseTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstReleaseCharacterData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstReleaseDegreeData
// 0x0018 (0x0018 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstReleaseDegreeData final
{
public:
	int32                                         degreeId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstReleaseDegreeData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstReleaseDegreeData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstReleaseDegreeData) == 0x000018, "Wrong size on FMasterDataGetMasterDataResponse_MstReleaseDegreeData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseDegreeData, degreeId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstReleaseDegreeData::degreeId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseDegreeData, releaseTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstReleaseDegreeData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstReleaseFrontPartsData
// 0x0018 (0x0018 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstReleaseFrontPartsData final
{
public:
	int32                                         FrontPartsId;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstReleaseFrontPartsData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstReleaseFrontPartsData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstReleaseFrontPartsData) == 0x000018, "Wrong size on FMasterDataGetMasterDataResponse_MstReleaseFrontPartsData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseFrontPartsData, FrontPartsId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstReleaseFrontPartsData::FrontPartsId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseFrontPartsData, releaseTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstReleaseFrontPartsData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstReleaseGadgetData
// 0x0018 (0x0018 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstReleaseGadgetData final
{
public:
	int32                                         gadgetId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstReleaseGadgetData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstReleaseGadgetData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstReleaseGadgetData) == 0x000018, "Wrong size on FMasterDataGetMasterDataResponse_MstReleaseGadgetData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseGadgetData, gadgetId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstReleaseGadgetData::gadgetId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseGadgetData, releaseTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstReleaseGadgetData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstReleaseHornData
// 0x0018 (0x0018 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstReleaseHornData final
{
public:
	int32                                         hornId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstReleaseHornData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstReleaseHornData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstReleaseHornData) == 0x000018, "Wrong size on FMasterDataGetMasterDataResponse_MstReleaseHornData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseHornData, hornId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstReleaseHornData::hornId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseHornData, releaseTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstReleaseHornData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstReleaseRearPartsData
// 0x0018 (0x0018 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstReleaseRearPartsData final
{
public:
	int32                                         RearPartsId;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstReleaseRearPartsData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstReleaseRearPartsData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstReleaseRearPartsData) == 0x000018, "Wrong size on FMasterDataGetMasterDataResponse_MstReleaseRearPartsData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseRearPartsData, RearPartsId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstReleaseRearPartsData::RearPartsId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseRearPartsData, releaseTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstReleaseRearPartsData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstReleaseStickerData
// 0x0018 (0x0018 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstReleaseStickerData final
{
public:
	int32                                         stickerId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstReleaseStickerData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstReleaseStickerData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstReleaseStickerData) == 0x000018, "Wrong size on FMasterDataGetMasterDataResponse_MstReleaseStickerData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseStickerData, stickerId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstReleaseStickerData::stickerId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseStickerData, releaseTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstReleaseStickerData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstReleaseTirePartsData
// 0x0018 (0x0018 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstReleaseTirePartsData final
{
public:
	int32                                         TirePartsId;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstReleaseTirePartsData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstReleaseTirePartsData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstReleaseTirePartsData) == 0x000018, "Wrong size on FMasterDataGetMasterDataResponse_MstReleaseTirePartsData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseTirePartsData, TirePartsId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstReleaseTirePartsData::TirePartsId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseTirePartsData, releaseTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstReleaseTirePartsData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstReleaseCourseData
// 0x0018 (0x0018 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstReleaseCourseData final
{
public:
	int32                                         courseId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstReleaseCourseData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstReleaseCourseData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstReleaseCourseData) == 0x000018, "Wrong size on FMasterDataGetMasterDataResponse_MstReleaseCourseData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseCourseData, courseId) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstReleaseCourseData::courseId' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstReleaseCourseData, releaseTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstReleaseCourseData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse_MstCourseSettingData
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataGetMasterDataResponse_MstCourseSettingData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 appearCourseIds;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse_MstCourseSettingData) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse_MstCourseSettingData");
static_assert(sizeof(FMasterDataGetMasterDataResponse_MstCourseSettingData) == 0x000028, "Wrong size on FMasterDataGetMasterDataResponse_MstCourseSettingData");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstCourseSettingData, ID) == 0x000000, "Member 'FMasterDataGetMasterDataResponse_MstCourseSettingData::ID' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstCourseSettingData, releaseTime) == 0x000008, "Member 'FMasterDataGetMasterDataResponse_MstCourseSettingData::releaseTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse_MstCourseSettingData, appearCourseIds) == 0x000018, "Member 'FMasterDataGetMasterDataResponse_MstCourseSettingData::appearCourseIds' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataResponse
// 0x02C0 (0x02C0 - 0x0000)
struct FMasterDataGetMasterDataResponse final
{
public:
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaData> mstFestaDatas;                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaCourseLotteryData> mstFestaCourseLotteryDatas; // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaPointBonusData> mstFestaPointBonusDatas;  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaPointRaceOrderData> mstFestaPointRaceOrderDatas; // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaPointRewardData> mstFestaPointRewardDatas; // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaPointRewardConditionsData> mstFestaPointRewardConditionsDatas; // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaPointSetData> mstFestaPointSetDatas;      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaPointTeamContribAttackHitData> mstFestaPointTeamContribAttackHitDatas; // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaPointTeamContribRingData> mstFestaPointTeamContribRingDatas; // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaPointTeamWldData> mstFestaPointTeamWldDatas; // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaRankingRewardData> mstFestaRankingRewardDatas; // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaRoundRewardData> mstFestaRoundRewardDatas; // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFestaTimeSceduleData> mstFestaTimeSceduleDatas; // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstLegendCompeData> mstLegendCompeDatas;          // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstLegendCompeGradeTableData> mstLegendCompeGradeTableDatas; // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstLegendCompeGradeRewardData> mstLegendCompeGradeRewardDatas; // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstLegendCompeRankingRewardData> mstLegendCompeRankingRewardDatas; // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstLegendCompeRankTableData> mstLegendCompeRankTableDatas; // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstLegendCompeRewardData> mstLegendCompeRewardDatas; // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstLegendCompeRewardFirstCountData> mstLegendCompeRewardFirstCountDatas; // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstLegendCompeRewardParticipateCountData> mstLegendCompeRewardParticipateCountDatas; // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstLegendCompeRewardRaceCountData> mstLegendCompeRewardRaceCountDatas; // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstLegendCompeUniqueRewardData> mstLegendCompeUniqueRewardDatas; // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstRankMatchRankTableData> mstRankMatchRankTableDatas; // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFairPlayPointData> mstFairPlayPointDatas;      // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstBanReleaseData> mstBanReleaseDatas;            // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstGeneralizedParameterData> mstGeneralizedParameterDatas; // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstBannerData> mstBannerDatas;                    // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFreeDlcData> mstFreeDlcDatas;                  // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstFreeContentData> mstFreeContentDatas;          // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstDlcTeaserData> mstDlcTeaserDatas;              // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstNewsData> mstNewsDatas;                        // 0x01F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstReleaseAuraData> mstReleaseAuraDatas;          // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstReleaseCharacterData> mstReleaseCharacterDatas; // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstReleaseDegreeData> mstReleaseDegreeDatas;      // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstReleaseFrontPartsData> mstReleaseFrontPartsDatas; // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstReleaseGadgetData> mstReleaseGadgetDatas;      // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstReleaseHornData> mstReleaseHornDatas;          // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstReleaseRearPartsData> mstReleaseRearPartsDatas; // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstReleaseStickerData> mstReleaseStickerDatas;    // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstReleaseTirePartsData> mstReleaseTirePartsDatas; // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstReleaseCourseData> mstReleaseCourseDatas;      // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstReleaseVersionData> mstReleaseVersionDatas;    // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataGetMasterDataResponse_MstCourseSettingData> mstCourseSettingDatas;      // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataResponse) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataResponse");
static_assert(sizeof(FMasterDataGetMasterDataResponse) == 0x0002C0, "Wrong size on FMasterDataGetMasterDataResponse");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaDatas) == 0x000000, "Member 'FMasterDataGetMasterDataResponse::mstFestaDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaCourseLotteryDatas) == 0x000010, "Member 'FMasterDataGetMasterDataResponse::mstFestaCourseLotteryDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaPointBonusDatas) == 0x000020, "Member 'FMasterDataGetMasterDataResponse::mstFestaPointBonusDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaPointRaceOrderDatas) == 0x000030, "Member 'FMasterDataGetMasterDataResponse::mstFestaPointRaceOrderDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaPointRewardDatas) == 0x000040, "Member 'FMasterDataGetMasterDataResponse::mstFestaPointRewardDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaPointRewardConditionsDatas) == 0x000050, "Member 'FMasterDataGetMasterDataResponse::mstFestaPointRewardConditionsDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaPointSetDatas) == 0x000060, "Member 'FMasterDataGetMasterDataResponse::mstFestaPointSetDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaPointTeamContribAttackHitDatas) == 0x000070, "Member 'FMasterDataGetMasterDataResponse::mstFestaPointTeamContribAttackHitDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaPointTeamContribRingDatas) == 0x000080, "Member 'FMasterDataGetMasterDataResponse::mstFestaPointTeamContribRingDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaPointTeamWldDatas) == 0x000090, "Member 'FMasterDataGetMasterDataResponse::mstFestaPointTeamWldDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaRankingRewardDatas) == 0x0000A0, "Member 'FMasterDataGetMasterDataResponse::mstFestaRankingRewardDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaRoundRewardDatas) == 0x0000B0, "Member 'FMasterDataGetMasterDataResponse::mstFestaRoundRewardDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFestaTimeSceduleDatas) == 0x0000C0, "Member 'FMasterDataGetMasterDataResponse::mstFestaTimeSceduleDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstLegendCompeDatas) == 0x0000D0, "Member 'FMasterDataGetMasterDataResponse::mstLegendCompeDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstLegendCompeGradeTableDatas) == 0x0000E0, "Member 'FMasterDataGetMasterDataResponse::mstLegendCompeGradeTableDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstLegendCompeGradeRewardDatas) == 0x0000F0, "Member 'FMasterDataGetMasterDataResponse::mstLegendCompeGradeRewardDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstLegendCompeRankingRewardDatas) == 0x000100, "Member 'FMasterDataGetMasterDataResponse::mstLegendCompeRankingRewardDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstLegendCompeRankTableDatas) == 0x000110, "Member 'FMasterDataGetMasterDataResponse::mstLegendCompeRankTableDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstLegendCompeRewardDatas) == 0x000120, "Member 'FMasterDataGetMasterDataResponse::mstLegendCompeRewardDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstLegendCompeRewardFirstCountDatas) == 0x000130, "Member 'FMasterDataGetMasterDataResponse::mstLegendCompeRewardFirstCountDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstLegendCompeRewardParticipateCountDatas) == 0x000140, "Member 'FMasterDataGetMasterDataResponse::mstLegendCompeRewardParticipateCountDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstLegendCompeRewardRaceCountDatas) == 0x000150, "Member 'FMasterDataGetMasterDataResponse::mstLegendCompeRewardRaceCountDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstLegendCompeUniqueRewardDatas) == 0x000160, "Member 'FMasterDataGetMasterDataResponse::mstLegendCompeUniqueRewardDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstRankMatchRankTableDatas) == 0x000170, "Member 'FMasterDataGetMasterDataResponse::mstRankMatchRankTableDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFairPlayPointDatas) == 0x000180, "Member 'FMasterDataGetMasterDataResponse::mstFairPlayPointDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstBanReleaseDatas) == 0x000190, "Member 'FMasterDataGetMasterDataResponse::mstBanReleaseDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstGeneralizedParameterDatas) == 0x0001A0, "Member 'FMasterDataGetMasterDataResponse::mstGeneralizedParameterDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstBannerDatas) == 0x0001B0, "Member 'FMasterDataGetMasterDataResponse::mstBannerDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFreeDlcDatas) == 0x0001C0, "Member 'FMasterDataGetMasterDataResponse::mstFreeDlcDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstFreeContentDatas) == 0x0001D0, "Member 'FMasterDataGetMasterDataResponse::mstFreeContentDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstDlcTeaserDatas) == 0x0001E0, "Member 'FMasterDataGetMasterDataResponse::mstDlcTeaserDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstNewsDatas) == 0x0001F0, "Member 'FMasterDataGetMasterDataResponse::mstNewsDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstReleaseAuraDatas) == 0x000200, "Member 'FMasterDataGetMasterDataResponse::mstReleaseAuraDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstReleaseCharacterDatas) == 0x000210, "Member 'FMasterDataGetMasterDataResponse::mstReleaseCharacterDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstReleaseDegreeDatas) == 0x000220, "Member 'FMasterDataGetMasterDataResponse::mstReleaseDegreeDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstReleaseFrontPartsDatas) == 0x000230, "Member 'FMasterDataGetMasterDataResponse::mstReleaseFrontPartsDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstReleaseGadgetDatas) == 0x000240, "Member 'FMasterDataGetMasterDataResponse::mstReleaseGadgetDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstReleaseHornDatas) == 0x000250, "Member 'FMasterDataGetMasterDataResponse::mstReleaseHornDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstReleaseRearPartsDatas) == 0x000260, "Member 'FMasterDataGetMasterDataResponse::mstReleaseRearPartsDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstReleaseStickerDatas) == 0x000270, "Member 'FMasterDataGetMasterDataResponse::mstReleaseStickerDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstReleaseTirePartsDatas) == 0x000280, "Member 'FMasterDataGetMasterDataResponse::mstReleaseTirePartsDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstReleaseCourseDatas) == 0x000290, "Member 'FMasterDataGetMasterDataResponse::mstReleaseCourseDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstReleaseVersionDatas) == 0x0002A0, "Member 'FMasterDataGetMasterDataResponse::mstReleaseVersionDatas' has a wrong offset!");
static_assert(offsetof(FMasterDataGetMasterDataResponse, mstCourseSettingDatas) == 0x0002B0, "Member 'FMasterDataGetMasterDataResponse::mstCourseSettingDatas' has a wrong offset!");

// ScriptStruct UnionSystem.CompensationGetCompensationsResponse_CompensationItem
// 0x000C (0x000C - 0x0000)
struct FCompensationGetCompensationsResponse_CompensationItem final
{
public:
	int32                                         itemCategoryId;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompensationGetCompensationsResponse_CompensationItem) == 0x000004, "Wrong alignment on FCompensationGetCompensationsResponse_CompensationItem");
static_assert(sizeof(FCompensationGetCompensationsResponse_CompensationItem) == 0x00000C, "Wrong size on FCompensationGetCompensationsResponse_CompensationItem");
static_assert(offsetof(FCompensationGetCompensationsResponse_CompensationItem, itemCategoryId) == 0x000000, "Member 'FCompensationGetCompensationsResponse_CompensationItem::itemCategoryId' has a wrong offset!");
static_assert(offsetof(FCompensationGetCompensationsResponse_CompensationItem, ItemId) == 0x000004, "Member 'FCompensationGetCompensationsResponse_CompensationItem::ItemId' has a wrong offset!");
static_assert(offsetof(FCompensationGetCompensationsResponse_CompensationItem, ItemCount) == 0x000008, "Member 'FCompensationGetCompensationsResponse_CompensationItem::ItemCount' has a wrong offset!");

// ScriptStruct UnionSystem.CompensationGetCompensationsResponse_ReceivableCompensationData
// 0x0040 (0x0040 - 0x0000)
struct FCompensationGetCompensationsResponse_ReceivableCompensationData final
{
public:
	int32                                         compensationId;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         headerTextId;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bodyTextId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCompensationGetCompensationsResponse_CompensationItem> Items;                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 receivablePeriodStartTime;                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 receivablePeriodEndTime;                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompensationGetCompensationsResponse_ReceivableCompensationData) == 0x000008, "Wrong alignment on FCompensationGetCompensationsResponse_ReceivableCompensationData");
static_assert(sizeof(FCompensationGetCompensationsResponse_ReceivableCompensationData) == 0x000040, "Wrong size on FCompensationGetCompensationsResponse_ReceivableCompensationData");
static_assert(offsetof(FCompensationGetCompensationsResponse_ReceivableCompensationData, compensationId) == 0x000000, "Member 'FCompensationGetCompensationsResponse_ReceivableCompensationData::compensationId' has a wrong offset!");
static_assert(offsetof(FCompensationGetCompensationsResponse_ReceivableCompensationData, headerTextId) == 0x000004, "Member 'FCompensationGetCompensationsResponse_ReceivableCompensationData::headerTextId' has a wrong offset!");
static_assert(offsetof(FCompensationGetCompensationsResponse_ReceivableCompensationData, bodyTextId) == 0x000008, "Member 'FCompensationGetCompensationsResponse_ReceivableCompensationData::bodyTextId' has a wrong offset!");
static_assert(offsetof(FCompensationGetCompensationsResponse_ReceivableCompensationData, Items) == 0x000010, "Member 'FCompensationGetCompensationsResponse_ReceivableCompensationData::Items' has a wrong offset!");
static_assert(offsetof(FCompensationGetCompensationsResponse_ReceivableCompensationData, receivablePeriodStartTime) == 0x000020, "Member 'FCompensationGetCompensationsResponse_ReceivableCompensationData::receivablePeriodStartTime' has a wrong offset!");
static_assert(offsetof(FCompensationGetCompensationsResponse_ReceivableCompensationData, receivablePeriodEndTime) == 0x000030, "Member 'FCompensationGetCompensationsResponse_ReceivableCompensationData::receivablePeriodEndTime' has a wrong offset!");

// ScriptStruct UnionSystem.CompensationGetCompensationsResponse
// 0x0010 (0x0010 - 0x0000)
struct FCompensationGetCompensationsResponse final
{
public:
	TArray<struct FCompensationGetCompensationsResponse_ReceivableCompensationData> compensations;   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompensationGetCompensationsResponse) == 0x000008, "Wrong alignment on FCompensationGetCompensationsResponse");
static_assert(sizeof(FCompensationGetCompensationsResponse) == 0x000010, "Wrong size on FCompensationGetCompensationsResponse");
static_assert(offsetof(FCompensationGetCompensationsResponse, compensations) == 0x000000, "Member 'FCompensationGetCompensationsResponse::compensations' has a wrong offset!");

// ScriptStruct UnionSystem.LobbySubsystemLobbySearchQueryFilter
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FLobbySubsystemLobbySearchQueryFilter final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbySubsystemLobbySearchQueryFilter) == 0x000008, "Wrong alignment on FLobbySubsystemLobbySearchQueryFilter");
static_assert(sizeof(FLobbySubsystemLobbySearchQueryFilter) == 0x000038, "Wrong size on FLobbySubsystemLobbySearchQueryFilter");

// ScriptStruct UnionSystem.RankMatchWorldRankingOperationData
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FRankMatchWorldRankingOperationData final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankMatchWorldRankingOperationData) == 0x000008, "Wrong alignment on FRankMatchWorldRankingOperationData");
static_assert(sizeof(FRankMatchWorldRankingOperationData) == 0x000050, "Wrong size on FRankMatchWorldRankingOperationData");

// ScriptStruct UnionSystem.Common_HistoryData_CharacterUsage
// 0x000C (0x000C - 0x0000)
struct FCommon_HistoryData_CharacterUsage final
{
public:
	int32                                         rankingOrder;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         usageCount;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_HistoryData_CharacterUsage) == 0x000004, "Wrong alignment on FCommon_HistoryData_CharacterUsage");
static_assert(sizeof(FCommon_HistoryData_CharacterUsage) == 0x00000C, "Wrong size on FCommon_HistoryData_CharacterUsage");
static_assert(offsetof(FCommon_HistoryData_CharacterUsage, rankingOrder) == 0x000000, "Member 'FCommon_HistoryData_CharacterUsage::rankingOrder' has a wrong offset!");
static_assert(offsetof(FCommon_HistoryData_CharacterUsage, characterId) == 0x000004, "Member 'FCommon_HistoryData_CharacterUsage::characterId' has a wrong offset!");
static_assert(offsetof(FCommon_HistoryData_CharacterUsage, usageCount) == 0x000008, "Member 'FCommon_HistoryData_CharacterUsage::usageCount' has a wrong offset!");

// ScriptStruct UnionSystem.Common_HistoryData_MachineTypeUsage
// 0x0008 (0x0008 - 0x0000)
struct FCommon_HistoryData_MachineTypeUsage final
{
public:
	int32                                         machineType;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         usageCount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_HistoryData_MachineTypeUsage) == 0x000004, "Wrong alignment on FCommon_HistoryData_MachineTypeUsage");
static_assert(sizeof(FCommon_HistoryData_MachineTypeUsage) == 0x000008, "Wrong size on FCommon_HistoryData_MachineTypeUsage");
static_assert(offsetof(FCommon_HistoryData_MachineTypeUsage, machineType) == 0x000000, "Member 'FCommon_HistoryData_MachineTypeUsage::machineType' has a wrong offset!");
static_assert(offsetof(FCommon_HistoryData_MachineTypeUsage, usageCount) == 0x000004, "Member 'FCommon_HistoryData_MachineTypeUsage::usageCount' has a wrong offset!");

// ScriptStruct UnionSystem.Common_HistoryData
// 0x0020 (0x0020 - 0x0000)
struct FCommon_HistoryData final
{
public:
	TArray<struct FCommon_HistoryData_CharacterUsage> characterUsages;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCommon_HistoryData_MachineTypeUsage> machineTypeUsages;                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_HistoryData) == 0x000008, "Wrong alignment on FCommon_HistoryData");
static_assert(sizeof(FCommon_HistoryData) == 0x000020, "Wrong size on FCommon_HistoryData");
static_assert(offsetof(FCommon_HistoryData, characterUsages) == 0x000000, "Member 'FCommon_HistoryData::characterUsages' has a wrong offset!");
static_assert(offsetof(FCommon_HistoryData, machineTypeUsages) == 0x000010, "Member 'FCommon_HistoryData::machineTypeUsages' has a wrong offset!");

// ScriptStruct UnionSystem.Common_UserPlayState
// 0x0018 (0x0018 - 0x0000)
struct FCommon_UserPlayState final
{
public:
	class FString                                 lastAccess;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlaying;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommon_UserPlayState) == 0x000008, "Wrong alignment on FCommon_UserPlayState");
static_assert(sizeof(FCommon_UserPlayState) == 0x000018, "Wrong size on FCommon_UserPlayState");
static_assert(offsetof(FCommon_UserPlayState, lastAccess) == 0x000000, "Member 'FCommon_UserPlayState::lastAccess' has a wrong offset!");
static_assert(offsetof(FCommon_UserPlayState, IsPlaying) == 0x000010, "Member 'FCommon_UserPlayState::IsPlaying' has a wrong offset!");

// ScriptStruct UnionSystem.Common_RatingData
// 0x0004 (0x0004 - 0x0000)
struct FCommon_RatingData final
{
public:
	int32                                         Rate;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_RatingData) == 0x000004, "Wrong alignment on FCommon_RatingData");
static_assert(sizeof(FCommon_RatingData) == 0x000004, "Wrong size on FCommon_RatingData");
static_assert(offsetof(FCommon_RatingData, Rate) == 0x000000, "Member 'FCommon_RatingData::Rate' has a wrong offset!");

// ScriptStruct UnionSystem.Common_DegreeData
// 0x0008 (0x0008 - 0x0000)
struct FCommon_DegreeData final
{
public:
	int32                                         degreeId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         plateId;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_DegreeData) == 0x000004, "Wrong alignment on FCommon_DegreeData");
static_assert(sizeof(FCommon_DegreeData) == 0x000008, "Wrong size on FCommon_DegreeData");
static_assert(offsetof(FCommon_DegreeData, degreeId) == 0x000000, "Member 'FCommon_DegreeData::degreeId' has a wrong offset!");
static_assert(offsetof(FCommon_DegreeData, plateId) == 0x000004, "Member 'FCommon_DegreeData::plateId' has a wrong offset!");

// ScriptStruct UnionSystem.Common_UserSearchData
// 0x00D8 (0x00D8 - 0x0000)
struct FCommon_UserSearchData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 displayCode;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         playerIconId;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 playerBgColor;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 identityProviderId;                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 userName;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCrossPlay;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isProfilePublished;                                // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOnlineStatusPublished;                           // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAcceptLobbyInvitation;                           // 0x006B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_HistoryData                    history;                                           // 0x0070(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommon_UserPlayState                  PlayState;                                         // 0x00A0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_RatingData                     rating;                                            // 0x00B8(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_DegreeData                     degree;                                            // 0x00BC(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId;                                    // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_UserSearchData) == 0x000008, "Wrong alignment on FCommon_UserSearchData");
static_assert(sizeof(FCommon_UserSearchData) == 0x0000D8, "Wrong size on FCommon_UserSearchData");
static_assert(offsetof(FCommon_UserSearchData, UserId) == 0x000000, "Member 'FCommon_UserSearchData::UserId' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, ProductUserId) == 0x000010, "Member 'FCommon_UserSearchData::ProductUserId' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, displayCode) == 0x000020, "Member 'FCommon_UserSearchData::displayCode' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, playerIconId) == 0x000030, "Member 'FCommon_UserSearchData::playerIconId' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, playerBgColor) == 0x000038, "Member 'FCommon_UserSearchData::playerBgColor' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, identityProviderId) == 0x000048, "Member 'FCommon_UserSearchData::identityProviderId' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, userName) == 0x000058, "Member 'FCommon_UserSearchData::userName' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, isCrossPlay) == 0x000068, "Member 'FCommon_UserSearchData::isCrossPlay' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, isProfilePublished) == 0x000069, "Member 'FCommon_UserSearchData::isProfilePublished' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, isOnlineStatusPublished) == 0x00006A, "Member 'FCommon_UserSearchData::isOnlineStatusPublished' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, isAcceptLobbyInvitation) == 0x00006B, "Member 'FCommon_UserSearchData::isAcceptLobbyInvitation' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, history) == 0x000070, "Member 'FCommon_UserSearchData::history' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, Platform) == 0x000090, "Member 'FCommon_UserSearchData::Platform' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, PlayState) == 0x0000A0, "Member 'FCommon_UserSearchData::PlayState' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, rating) == 0x0000B8, "Member 'FCommon_UserSearchData::rating' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, degree) == 0x0000BC, "Member 'FCommon_UserSearchData::degree' has a wrong offset!");
static_assert(offsetof(FCommon_UserSearchData, PlatformUserId) == 0x0000C8, "Member 'FCommon_UserSearchData::PlatformUserId' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataWiden
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataWiden final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataWiden) == 0x000008, "Wrong alignment on FCRM_RadjDataWiden");
static_assert(sizeof(FCRM_RadjDataWiden) == 0x000038, "Wrong size on FCRM_RadjDataWiden");
static_assert(offsetof(FCRM_RadjDataWiden, action_type) == 0x000000, "Member 'FCRM_RadjDataWiden::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataWiden, key1) == 0x000010, "Member 'FCRM_RadjDataWiden::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataWiden, key2) == 0x000018, "Member 'FCRM_RadjDataWiden::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataWiden, key3) == 0x000028, "Member 'FCRM_RadjDataWiden::key3' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingUnsubscribeResponse
// 0x0001 (0x0001 - 0x0000)
struct FMatchmakingUnsubscribeResponse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakingUnsubscribeResponse) == 0x000001, "Wrong alignment on FMatchmakingUnsubscribeResponse");
static_assert(sizeof(FMatchmakingUnsubscribeResponse) == 0x000001, "Wrong size on FMatchmakingUnsubscribeResponse");

// ScriptStruct UnionSystem.LobbyOperationResult
// 0x0068 (0x0068 - 0x0000)
struct FLobbyOperationResult final
{
public:
	struct FOnlineErrorBP                         Error;                                             // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UserId;                                            // 0x0038(0x0030)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyOperationResult) == 0x000008, "Wrong alignment on FLobbyOperationResult");
static_assert(sizeof(FLobbyOperationResult) == 0x000068, "Wrong size on FLobbyOperationResult");
static_assert(offsetof(FLobbyOperationResult, Error) == 0x000000, "Member 'FLobbyOperationResult::Error' has a wrong offset!");
static_assert(offsetof(FLobbyOperationResult, UserId) == 0x000038, "Member 'FLobbyOperationResult::UserId' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataJumpStart
// 0x0098 (0x0098 - 0x0000)
struct FCRM_RadjDataJumpStart final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataJumpStart) == 0x000008, "Wrong alignment on FCRM_RadjDataJumpStart");
static_assert(sizeof(FCRM_RadjDataJumpStart) == 0x000098, "Wrong size on FCRM_RadjDataJumpStart");
static_assert(offsetof(FCRM_RadjDataJumpStart, action_type) == 0x000000, "Member 'FCRM_RadjDataJumpStart::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpStart, key1) == 0x000010, "Member 'FCRM_RadjDataJumpStart::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpStart, key2) == 0x000018, "Member 'FCRM_RadjDataJumpStart::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpStart, key3) == 0x000028, "Member 'FCRM_RadjDataJumpStart::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpStart, key4) == 0x000038, "Member 'FCRM_RadjDataJumpStart::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpStart, key5) == 0x000048, "Member 'FCRM_RadjDataJumpStart::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpStart, key6) == 0x000058, "Member 'FCRM_RadjDataJumpStart::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpStart, key7) == 0x000068, "Member 'FCRM_RadjDataJumpStart::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpStart, key8) == 0x000078, "Member 'FCRM_RadjDataJumpStart::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpStart, key9) == 0x000088, "Member 'FCRM_RadjDataJumpStart::key9' has a wrong offset!");

// ScriptStruct UnionSystem.Common_LoginData
// 0x0060 (0x0060 - 0x0000)
struct FCommon_LoginData final
{
public:
	class FString                                 identityProviderId;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 firstLogin;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 lastLogin;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 firstRegionCode;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 lastRegionCode;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RomVersion;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_LoginData) == 0x000008, "Wrong alignment on FCommon_LoginData");
static_assert(sizeof(FCommon_LoginData) == 0x000060, "Wrong size on FCommon_LoginData");
static_assert(offsetof(FCommon_LoginData, identityProviderId) == 0x000000, "Member 'FCommon_LoginData::identityProviderId' has a wrong offset!");
static_assert(offsetof(FCommon_LoginData, firstLogin) == 0x000010, "Member 'FCommon_LoginData::firstLogin' has a wrong offset!");
static_assert(offsetof(FCommon_LoginData, lastLogin) == 0x000020, "Member 'FCommon_LoginData::lastLogin' has a wrong offset!");
static_assert(offsetof(FCommon_LoginData, firstRegionCode) == 0x000030, "Member 'FCommon_LoginData::firstRegionCode' has a wrong offset!");
static_assert(offsetof(FCommon_LoginData, lastRegionCode) == 0x000040, "Member 'FCommon_LoginData::lastRegionCode' has a wrong offset!");
static_assert(offsetof(FCommon_LoginData, RomVersion) == 0x000050, "Member 'FCommon_LoginData::RomVersion' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_WorldMatch
// 0x0028 (0x0028 - 0x0000)
struct FCRM_WorldMatch final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRM_WorldMatch) == 0x000008, "Wrong alignment on FCRM_WorldMatch");
static_assert(sizeof(FCRM_WorldMatch) == 0x000028, "Wrong size on FCRM_WorldMatch");
static_assert(offsetof(FCRM_WorldMatch, action_type) == 0x000000, "Member 'FCRM_WorldMatch::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_WorldMatch, key1) == 0x000010, "Member 'FCRM_WorldMatch::key1' has a wrong offset!");
static_assert(offsetof(FCRM_WorldMatch, key3) == 0x000020, "Member 'FCRM_WorldMatch::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_Dlc
// 0x0020 (0x0020 - 0x0000)
struct FCRM_Dlc final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_Dlc) == 0x000008, "Wrong alignment on FCRM_Dlc");
static_assert(sizeof(FCRM_Dlc) == 0x000020, "Wrong size on FCRM_Dlc");
static_assert(offsetof(FCRM_Dlc, action_type) == 0x000000, "Member 'FCRM_Dlc::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_Dlc, key1) == 0x000010, "Member 'FCRM_Dlc::key1' has a wrong offset!");

// ScriptStruct UnionSystem.FriendCommonPart_FriendFestaData
// 0x0004 (0x0004 - 0x0000)
struct FFriendCommonPart_FriendFestaData final
{
public:
	int32                                         winCount;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendCommonPart_FriendFestaData) == 0x000004, "Wrong alignment on FFriendCommonPart_FriendFestaData");
static_assert(sizeof(FFriendCommonPart_FriendFestaData) == 0x000004, "Wrong size on FFriendCommonPart_FriendFestaData");
static_assert(offsetof(FFriendCommonPart_FriendFestaData, winCount) == 0x000000, "Member 'FFriendCommonPart_FriendFestaData::winCount' has a wrong offset!");

// ScriptStruct UnionSystem.Common_UserOrderData
// 0x0018 (0x0018 - 0x0000)
struct FCommon_UserOrderData final
{
public:
	int32                                         order;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_UserOrderData) == 0x000008, "Wrong alignment on FCommon_UserOrderData");
static_assert(sizeof(FCommon_UserOrderData) == 0x000018, "Wrong size on FCommon_UserOrderData");
static_assert(offsetof(FCommon_UserOrderData, order) == 0x000000, "Member 'FCommon_UserOrderData::order' has a wrong offset!");
static_assert(offsetof(FCommon_UserOrderData, UserId) == 0x000008, "Member 'FCommon_UserOrderData::UserId' has a wrong offset!");

// ScriptStruct UnionSystem.Common_TeamOrderData
// 0x0018 (0x0018 - 0x0000)
struct FCommon_TeamOrderData final
{
public:
	int32                                         order;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         UserIds;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_TeamOrderData) == 0x000008, "Wrong alignment on FCommon_TeamOrderData");
static_assert(sizeof(FCommon_TeamOrderData) == 0x000018, "Wrong size on FCommon_TeamOrderData");
static_assert(offsetof(FCommon_TeamOrderData, order) == 0x000000, "Member 'FCommon_TeamOrderData::order' has a wrong offset!");
static_assert(offsetof(FCommon_TeamOrderData, UserIds) == 0x000008, "Member 'FCommon_TeamOrderData::UserIds' has a wrong offset!");

// ScriptStruct UnionSystem.Common_MachineStickerData
// 0x0068 (0x0068 - 0x0000)
struct FCommon_MachineStickerData final
{
public:
	int32                                         textureId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LocationX;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocationY;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Rotation;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 scaleX;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 scaleY;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         colorId;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         surfaceId;                                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         flag;                                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommon_MachineStickerData) == 0x000008, "Wrong alignment on FCommon_MachineStickerData");
static_assert(sizeof(FCommon_MachineStickerData) == 0x000068, "Wrong size on FCommon_MachineStickerData");
static_assert(offsetof(FCommon_MachineStickerData, textureId) == 0x000000, "Member 'FCommon_MachineStickerData::textureId' has a wrong offset!");
static_assert(offsetof(FCommon_MachineStickerData, LocationX) == 0x000008, "Member 'FCommon_MachineStickerData::LocationX' has a wrong offset!");
static_assert(offsetof(FCommon_MachineStickerData, LocationY) == 0x000018, "Member 'FCommon_MachineStickerData::LocationY' has a wrong offset!");
static_assert(offsetof(FCommon_MachineStickerData, Rotation) == 0x000028, "Member 'FCommon_MachineStickerData::Rotation' has a wrong offset!");
static_assert(offsetof(FCommon_MachineStickerData, scaleX) == 0x000038, "Member 'FCommon_MachineStickerData::scaleX' has a wrong offset!");
static_assert(offsetof(FCommon_MachineStickerData, scaleY) == 0x000048, "Member 'FCommon_MachineStickerData::scaleY' has a wrong offset!");
static_assert(offsetof(FCommon_MachineStickerData, colorId) == 0x000058, "Member 'FCommon_MachineStickerData::colorId' has a wrong offset!");
static_assert(offsetof(FCommon_MachineStickerData, surfaceId) == 0x00005C, "Member 'FCommon_MachineStickerData::surfaceId' has a wrong offset!");
static_assert(offsetof(FCommon_MachineStickerData, flag) == 0x000060, "Member 'FCommon_MachineStickerData::flag' has a wrong offset!");

// ScriptStruct UnionSystem.Common_MachineData
// 0x0370 (0x0370 - 0x0000)
struct FCommon_MachineData final
{
public:
	int32                                         machineFront;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineRear;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineWheel;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineFrontGadget1;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineFrontGadget2;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineFrontGadget3;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineRearGadget1;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineRearGadget2;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineRearGadget3;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineColor;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommon_MachineStickerData             machineFrontStickerSlot1;                          // 0x0028(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_MachineStickerData             machineFrontStickerSlot2;                          // 0x0090(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_MachineStickerData             machineFrontStickerSlot3;                          // 0x00F8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_MachineStickerData             machineFrontStickerSlot4;                          // 0x0160(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_MachineStickerData             machineRearStickerSlot1;                           // 0x01C8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_MachineStickerData             machineRearStickerSlot2;                           // 0x0230(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_MachineStickerData             machineRearStickerSlot3;                           // 0x0298(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_MachineStickerData             machineRearStickerSlot4;                           // 0x0300(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         machineAura;                                       // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineHorn;                                       // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_MachineData) == 0x000008, "Wrong alignment on FCommon_MachineData");
static_assert(sizeof(FCommon_MachineData) == 0x000370, "Wrong size on FCommon_MachineData");
static_assert(offsetof(FCommon_MachineData, machineFront) == 0x000000, "Member 'FCommon_MachineData::machineFront' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineRear) == 0x000004, "Member 'FCommon_MachineData::machineRear' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineWheel) == 0x000008, "Member 'FCommon_MachineData::machineWheel' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineFrontGadget1) == 0x00000C, "Member 'FCommon_MachineData::machineFrontGadget1' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineFrontGadget2) == 0x000010, "Member 'FCommon_MachineData::machineFrontGadget2' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineFrontGadget3) == 0x000014, "Member 'FCommon_MachineData::machineFrontGadget3' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineRearGadget1) == 0x000018, "Member 'FCommon_MachineData::machineRearGadget1' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineRearGadget2) == 0x00001C, "Member 'FCommon_MachineData::machineRearGadget2' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineRearGadget3) == 0x000020, "Member 'FCommon_MachineData::machineRearGadget3' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineColor) == 0x000024, "Member 'FCommon_MachineData::machineColor' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineFrontStickerSlot1) == 0x000028, "Member 'FCommon_MachineData::machineFrontStickerSlot1' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineFrontStickerSlot2) == 0x000090, "Member 'FCommon_MachineData::machineFrontStickerSlot2' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineFrontStickerSlot3) == 0x0000F8, "Member 'FCommon_MachineData::machineFrontStickerSlot3' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineFrontStickerSlot4) == 0x000160, "Member 'FCommon_MachineData::machineFrontStickerSlot4' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineRearStickerSlot1) == 0x0001C8, "Member 'FCommon_MachineData::machineRearStickerSlot1' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineRearStickerSlot2) == 0x000230, "Member 'FCommon_MachineData::machineRearStickerSlot2' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineRearStickerSlot3) == 0x000298, "Member 'FCommon_MachineData::machineRearStickerSlot3' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineRearStickerSlot4) == 0x000300, "Member 'FCommon_MachineData::machineRearStickerSlot4' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineAura) == 0x000368, "Member 'FCommon_MachineData::machineAura' has a wrong offset!");
static_assert(offsetof(FCommon_MachineData, machineHorn) == 0x00036C, "Member 'FCommon_MachineData::machineHorn' has a wrong offset!");

// ScriptStruct UnionSystem.Common_GadgetData
// 0x001C (0x001C - 0x0000)
struct FCommon_GadgetData final
{
public:
	int32                                         plateId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId1;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId2;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId3;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId4;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId5;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId6;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_GadgetData) == 0x000004, "Wrong alignment on FCommon_GadgetData");
static_assert(sizeof(FCommon_GadgetData) == 0x00001C, "Wrong size on FCommon_GadgetData");
static_assert(offsetof(FCommon_GadgetData, plateId) == 0x000000, "Member 'FCommon_GadgetData::plateId' has a wrong offset!");
static_assert(offsetof(FCommon_GadgetData, gadgetId1) == 0x000004, "Member 'FCommon_GadgetData::gadgetId1' has a wrong offset!");
static_assert(offsetof(FCommon_GadgetData, gadgetId2) == 0x000008, "Member 'FCommon_GadgetData::gadgetId2' has a wrong offset!");
static_assert(offsetof(FCommon_GadgetData, gadgetId3) == 0x00000C, "Member 'FCommon_GadgetData::gadgetId3' has a wrong offset!");
static_assert(offsetof(FCommon_GadgetData, gadgetId4) == 0x000010, "Member 'FCommon_GadgetData::gadgetId4' has a wrong offset!");
static_assert(offsetof(FCommon_GadgetData, gadgetId5) == 0x000014, "Member 'FCommon_GadgetData::gadgetId5' has a wrong offset!");
static_assert(offsetof(FCommon_GadgetData, gadgetId6) == 0x000018, "Member 'FCommon_GadgetData::gadgetId6' has a wrong offset!");

// ScriptStruct UnionSystem.Common_UserCheatParamData_CheatParamData
// 0x0018 (0x0018 - 0x0000)
struct FCommon_UserCheatParamData_CheatParamData final
{
public:
	int32                                         ParamType;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_UserCheatParamData_CheatParamData) == 0x000008, "Wrong alignment on FCommon_UserCheatParamData_CheatParamData");
static_assert(sizeof(FCommon_UserCheatParamData_CheatParamData) == 0x000018, "Wrong size on FCommon_UserCheatParamData_CheatParamData");
static_assert(offsetof(FCommon_UserCheatParamData_CheatParamData, ParamType) == 0x000000, "Member 'FCommon_UserCheatParamData_CheatParamData::ParamType' has a wrong offset!");
static_assert(offsetof(FCommon_UserCheatParamData_CheatParamData, Value) == 0x000008, "Member 'FCommon_UserCheatParamData_CheatParamData::Value' has a wrong offset!");

// ScriptStruct UnionSystem.Common_UserCheatParamData
// 0x0020 (0x0020 - 0x0000)
struct FCommon_UserCheatParamData final
{
public:
	class FString                                 cheatUserId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCommon_UserCheatParamData_CheatParamData> cheatParams;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_UserCheatParamData) == 0x000008, "Wrong alignment on FCommon_UserCheatParamData");
static_assert(sizeof(FCommon_UserCheatParamData) == 0x000020, "Wrong size on FCommon_UserCheatParamData");
static_assert(offsetof(FCommon_UserCheatParamData, cheatUserId) == 0x000000, "Member 'FCommon_UserCheatParamData::cheatUserId' has a wrong offset!");
static_assert(offsetof(FCommon_UserCheatParamData, cheatParams) == 0x000010, "Member 'FCommon_UserCheatParamData::cheatParams' has a wrong offset!");

// ScriptStruct UnionSystem.ResultSaveFestaResultRequest
// 0x0418 (0x0418 - 0x0000)
struct FResultSaveFestaResultRequest final
{
public:
	int32                                         festaId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 entryRaceId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCommon_UserOrderData>          UserOrder;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCommon_TeamOrderData>          teamOrder;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         FriendNum;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLead1;                                           // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isBonus1;                                          // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         characterId;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_MachineData                    MachineData;                                       // 0x0048(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_GadgetData                     GadgetData;                                        // 0x03B8(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_DegreeData                     DegreeData;                                        // 0x03D4(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_HistoryData                    HistoryData;                                       // 0x03E0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsHost;                                            // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCommon_UserCheatParamData>     userCheatParams;                                   // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultSaveFestaResultRequest) == 0x000008, "Wrong alignment on FResultSaveFestaResultRequest");
static_assert(sizeof(FResultSaveFestaResultRequest) == 0x000418, "Wrong size on FResultSaveFestaResultRequest");
static_assert(offsetof(FResultSaveFestaResultRequest, festaId) == 0x000000, "Member 'FResultSaveFestaResultRequest::festaId' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, entryRaceId) == 0x000008, "Member 'FResultSaveFestaResultRequest::entryRaceId' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, UserOrder) == 0x000018, "Member 'FResultSaveFestaResultRequest::UserOrder' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, teamOrder) == 0x000028, "Member 'FResultSaveFestaResultRequest::teamOrder' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, FriendNum) == 0x000038, "Member 'FResultSaveFestaResultRequest::FriendNum' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, isLead1) == 0x00003C, "Member 'FResultSaveFestaResultRequest::isLead1' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, isBonus1) == 0x00003D, "Member 'FResultSaveFestaResultRequest::isBonus1' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, characterId) == 0x000040, "Member 'FResultSaveFestaResultRequest::characterId' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, MachineData) == 0x000048, "Member 'FResultSaveFestaResultRequest::MachineData' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, GadgetData) == 0x0003B8, "Member 'FResultSaveFestaResultRequest::GadgetData' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, DegreeData) == 0x0003D4, "Member 'FResultSaveFestaResultRequest::DegreeData' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, HistoryData) == 0x0003E0, "Member 'FResultSaveFestaResultRequest::HistoryData' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, IsHost) == 0x000400, "Member 'FResultSaveFestaResultRequest::IsHost' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultRequest, userCheatParams) == 0x000408, "Member 'FResultSaveFestaResultRequest::userCheatParams' has a wrong offset!");

// ScriptStruct UnionSystem.ResultSavePredictCarPacketRequest
// 0x0020 (0x0020 - 0x0000)
struct FResultSavePredictCarPacketRequest final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Binary;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultSavePredictCarPacketRequest) == 0x000008, "Wrong alignment on FResultSavePredictCarPacketRequest");
static_assert(sizeof(FResultSavePredictCarPacketRequest) == 0x000020, "Wrong size on FResultSavePredictCarPacketRequest");
static_assert(offsetof(FResultSavePredictCarPacketRequest, Name) == 0x000000, "Member 'FResultSavePredictCarPacketRequest::Name' has a wrong offset!");
static_assert(offsetof(FResultSavePredictCarPacketRequest, Binary) == 0x000010, "Member 'FResultSavePredictCarPacketRequest::Binary' has a wrong offset!");

// ScriptStruct UnionSystem.AppUserBaseData
// 0x0078 (0x0078 - 0x0000)
struct FAppUserBaseData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 displayCode;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 userName;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppSupportedPlatform                         PlatformType;                                      // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FairPlayPoint;                                     // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionName;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppUserBaseData) == 0x000008, "Wrong alignment on FAppUserBaseData");
static_assert(sizeof(FAppUserBaseData) == 0x000078, "Wrong size on FAppUserBaseData");
static_assert(offsetof(FAppUserBaseData, UserId) == 0x000000, "Member 'FAppUserBaseData::UserId' has a wrong offset!");
static_assert(offsetof(FAppUserBaseData, displayCode) == 0x000010, "Member 'FAppUserBaseData::displayCode' has a wrong offset!");
static_assert(offsetof(FAppUserBaseData, userName) == 0x000020, "Member 'FAppUserBaseData::userName' has a wrong offset!");
static_assert(offsetof(FAppUserBaseData, ProductUserId) == 0x000030, "Member 'FAppUserBaseData::ProductUserId' has a wrong offset!");
static_assert(offsetof(FAppUserBaseData, Platform) == 0x000040, "Member 'FAppUserBaseData::Platform' has a wrong offset!");
static_assert(offsetof(FAppUserBaseData, PlatformUserId) == 0x000050, "Member 'FAppUserBaseData::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FAppUserBaseData, PlatformType) == 0x000060, "Member 'FAppUserBaseData::PlatformType' has a wrong offset!");
static_assert(offsetof(FAppUserBaseData, FairPlayPoint) == 0x000064, "Member 'FAppUserBaseData::FairPlayPoint' has a wrong offset!");
static_assert(offsetof(FAppUserBaseData, RegionName) == 0x000068, "Member 'FAppUserBaseData::RegionName' has a wrong offset!");

// ScriptStruct UnionSystem.UserHonorTitleProperty
// 0x0001 (0x0001 - 0x0000)
struct FUserHonorTitleProperty final
{
public:
	bool                                          bIsNew;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserHonorTitleProperty) == 0x000001, "Wrong alignment on FUserHonorTitleProperty");
static_assert(sizeof(FUserHonorTitleProperty) == 0x000001, "Wrong size on FUserHonorTitleProperty");
static_assert(offsetof(FUserHonorTitleProperty, bIsNew) == 0x000000, "Member 'FUserHonorTitleProperty::bIsNew' has a wrong offset!");

// ScriptStruct UnionSystem.UserHonorTitleData
// 0x0068 (0x0068 - 0x0000)
struct FUserHonorTitleData final
{
public:
	TMap<int32, struct FUserHonorTitleProperty>   HonorTitleList;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         HonorTitleIndex;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 UnlockedHonorTitleList;                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserHonorTitleData) == 0x000008, "Wrong alignment on FUserHonorTitleData");
static_assert(sizeof(FUserHonorTitleData) == 0x000068, "Wrong size on FUserHonorTitleData");
static_assert(offsetof(FUserHonorTitleData, HonorTitleList) == 0x000000, "Member 'FUserHonorTitleData::HonorTitleList' has a wrong offset!");
static_assert(offsetof(FUserHonorTitleData, HonorTitleIndex) == 0x000050, "Member 'FUserHonorTitleData::HonorTitleIndex' has a wrong offset!");
static_assert(offsetof(FUserHonorTitleData, UnlockedHonorTitleList) == 0x000058, "Member 'FUserHonorTitleData::UnlockedHonorTitleList' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBackStart
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataBackStart final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBackStart) == 0x000008, "Wrong alignment on FCRM_RadjDataBackStart");
static_assert(sizeof(FCRM_RadjDataBackStart) == 0x000038, "Wrong size on FCRM_RadjDataBackStart");
static_assert(offsetof(FCRM_RadjDataBackStart, action_type) == 0x000000, "Member 'FCRM_RadjDataBackStart::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBackStart, key1) == 0x000010, "Member 'FCRM_RadjDataBackStart::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBackStart, key2) == 0x000018, "Member 'FCRM_RadjDataBackStart::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBackStart, key3) == 0x000028, "Member 'FCRM_RadjDataBackStart::key3' has a wrong offset!");

// ScriptStruct UnionSystem.Common_RankingOrder_UserNote_CarParts
// 0x000C (0x000C - 0x0000)
struct FCommon_RankingOrder_UserNote_CarParts final
{
public:
	int32                                         frontId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rearId;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         tireId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_RankingOrder_UserNote_CarParts) == 0x000004, "Wrong alignment on FCommon_RankingOrder_UserNote_CarParts");
static_assert(sizeof(FCommon_RankingOrder_UserNote_CarParts) == 0x00000C, "Wrong size on FCommon_RankingOrder_UserNote_CarParts");
static_assert(offsetof(FCommon_RankingOrder_UserNote_CarParts, frontId) == 0x000000, "Member 'FCommon_RankingOrder_UserNote_CarParts::frontId' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote_CarParts, rearId) == 0x000004, "Member 'FCommon_RankingOrder_UserNote_CarParts::rearId' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote_CarParts, tireId) == 0x000008, "Member 'FCommon_RankingOrder_UserNote_CarParts::tireId' has a wrong offset!");

// ScriptStruct UnionSystem.Common_RankingOrder_UserNote_Gadget
// 0x001C (0x001C - 0x0000)
struct FCommon_RankingOrder_UserNote_Gadget final
{
public:
	int32                                         plateId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId1;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId2;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId3;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId4;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId5;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId6;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_RankingOrder_UserNote_Gadget) == 0x000004, "Wrong alignment on FCommon_RankingOrder_UserNote_Gadget");
static_assert(sizeof(FCommon_RankingOrder_UserNote_Gadget) == 0x00001C, "Wrong size on FCommon_RankingOrder_UserNote_Gadget");
static_assert(offsetof(FCommon_RankingOrder_UserNote_Gadget, plateId) == 0x000000, "Member 'FCommon_RankingOrder_UserNote_Gadget::plateId' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote_Gadget, gadgetId1) == 0x000004, "Member 'FCommon_RankingOrder_UserNote_Gadget::gadgetId1' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote_Gadget, gadgetId2) == 0x000008, "Member 'FCommon_RankingOrder_UserNote_Gadget::gadgetId2' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote_Gadget, gadgetId3) == 0x00000C, "Member 'FCommon_RankingOrder_UserNote_Gadget::gadgetId3' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote_Gadget, gadgetId4) == 0x000010, "Member 'FCommon_RankingOrder_UserNote_Gadget::gadgetId4' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote_Gadget, gadgetId5) == 0x000014, "Member 'FCommon_RankingOrder_UserNote_Gadget::gadgetId5' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote_Gadget, gadgetId6) == 0x000018, "Member 'FCommon_RankingOrder_UserNote_Gadget::gadgetId6' has a wrong offset!");

// ScriptStruct UnionSystem.Common_RankingOrder_UserNote_CharacterUsage
// 0x000C (0x000C - 0x0000)
struct FCommon_RankingOrder_UserNote_CharacterUsage final
{
public:
	int32                                         rankingOrder;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         usageCount;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_RankingOrder_UserNote_CharacterUsage) == 0x000004, "Wrong alignment on FCommon_RankingOrder_UserNote_CharacterUsage");
static_assert(sizeof(FCommon_RankingOrder_UserNote_CharacterUsage) == 0x00000C, "Wrong size on FCommon_RankingOrder_UserNote_CharacterUsage");
static_assert(offsetof(FCommon_RankingOrder_UserNote_CharacterUsage, rankingOrder) == 0x000000, "Member 'FCommon_RankingOrder_UserNote_CharacterUsage::rankingOrder' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote_CharacterUsage, characterId) == 0x000004, "Member 'FCommon_RankingOrder_UserNote_CharacterUsage::characterId' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote_CharacterUsage, usageCount) == 0x000008, "Member 'FCommon_RankingOrder_UserNote_CharacterUsage::usageCount' has a wrong offset!");

// ScriptStruct UnionSystem.Common_RankingOrder_UserNote_MachineTypeUsage
// 0x0008 (0x0008 - 0x0000)
struct FCommon_RankingOrder_UserNote_MachineTypeUsage final
{
public:
	int32                                         machineType;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         usageCount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_RankingOrder_UserNote_MachineTypeUsage) == 0x000004, "Wrong alignment on FCommon_RankingOrder_UserNote_MachineTypeUsage");
static_assert(sizeof(FCommon_RankingOrder_UserNote_MachineTypeUsage) == 0x000008, "Wrong size on FCommon_RankingOrder_UserNote_MachineTypeUsage");
static_assert(offsetof(FCommon_RankingOrder_UserNote_MachineTypeUsage, machineType) == 0x000000, "Member 'FCommon_RankingOrder_UserNote_MachineTypeUsage::machineType' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote_MachineTypeUsage, usageCount) == 0x000004, "Member 'FCommon_RankingOrder_UserNote_MachineTypeUsage::usageCount' has a wrong offset!");

// ScriptStruct UnionSystem.Common_RankingOrder_UserNote
// 0x00C0 (0x00C0 - 0x0000)
struct FCommon_RankingOrder_UserNote final
{
public:
	int32                                         playerIconId;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         playerBgColor;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 playerName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         degreeId;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         plateId;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lapTime1;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lapTime2;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lapTime3;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lapTime4;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         goalTime;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 entryTime;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMask;                                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_RankingOrder_UserNote_CarParts carParts;                                          // 0x0074(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_RankingOrder_UserNote_Gadget   gadget;                                            // 0x0080(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCommon_RankingOrder_UserNote_CharacterUsage> characterUsages;                     // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCommon_RankingOrder_UserNote_MachineTypeUsage> machineTypeUsages;                 // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_RankingOrder_UserNote) == 0x000008, "Wrong alignment on FCommon_RankingOrder_UserNote");
static_assert(sizeof(FCommon_RankingOrder_UserNote) == 0x0000C0, "Wrong size on FCommon_RankingOrder_UserNote");
static_assert(offsetof(FCommon_RankingOrder_UserNote, playerIconId) == 0x000000, "Member 'FCommon_RankingOrder_UserNote::playerIconId' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, playerBgColor) == 0x000004, "Member 'FCommon_RankingOrder_UserNote::playerBgColor' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, playerName) == 0x000008, "Member 'FCommon_RankingOrder_UserNote::playerName' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, Platform) == 0x000018, "Member 'FCommon_RankingOrder_UserNote::Platform' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, PlatformUserId) == 0x000028, "Member 'FCommon_RankingOrder_UserNote::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, characterId) == 0x000038, "Member 'FCommon_RankingOrder_UserNote::characterId' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, degreeId) == 0x00003C, "Member 'FCommon_RankingOrder_UserNote::degreeId' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, plateId) == 0x000040, "Member 'FCommon_RankingOrder_UserNote::plateId' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, Point) == 0x000044, "Member 'FCommon_RankingOrder_UserNote::Point' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, Rate) == 0x000048, "Member 'FCommon_RankingOrder_UserNote::Rate' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, lapTime1) == 0x00004C, "Member 'FCommon_RankingOrder_UserNote::lapTime1' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, lapTime2) == 0x000050, "Member 'FCommon_RankingOrder_UserNote::lapTime2' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, lapTime3) == 0x000054, "Member 'FCommon_RankingOrder_UserNote::lapTime3' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, lapTime4) == 0x000058, "Member 'FCommon_RankingOrder_UserNote::lapTime4' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, goalTime) == 0x00005C, "Member 'FCommon_RankingOrder_UserNote::goalTime' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, entryTime) == 0x000060, "Member 'FCommon_RankingOrder_UserNote::entryTime' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, isMask) == 0x000070, "Member 'FCommon_RankingOrder_UserNote::isMask' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, carParts) == 0x000074, "Member 'FCommon_RankingOrder_UserNote::carParts' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, gadget) == 0x000080, "Member 'FCommon_RankingOrder_UserNote::gadget' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, characterUsages) == 0x0000A0, "Member 'FCommon_RankingOrder_UserNote::characterUsages' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder_UserNote, machineTypeUsages) == 0x0000B0, "Member 'FCommon_RankingOrder_UserNote::machineTypeUsages' has a wrong offset!");

// ScriptStruct UnionSystem.Common_RankingOrder
// 0x00F0 (0x00F0 - 0x0000)
struct FCommon_RankingOrder final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 score;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 order;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommon_RankingOrder_UserNote          userNote;                                          // 0x0030(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_RankingOrder) == 0x000008, "Wrong alignment on FCommon_RankingOrder");
static_assert(sizeof(FCommon_RankingOrder) == 0x0000F0, "Wrong size on FCommon_RankingOrder");
static_assert(offsetof(FCommon_RankingOrder, UserId) == 0x000000, "Member 'FCommon_RankingOrder::UserId' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder, score) == 0x000010, "Member 'FCommon_RankingOrder::score' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder, order) == 0x000020, "Member 'FCommon_RankingOrder::order' has a wrong offset!");
static_assert(offsetof(FCommon_RankingOrder, userNote) == 0x000030, "Member 'FCommon_RankingOrder::userNote' has a wrong offset!");

// ScriptStruct UnionSystem.ResultSaveRankMatchResultResponse
// 0x00F8 (0x00F8 - 0x0000)
struct FResultSaveRankMatchResultResponse final
{
public:
	int32                                         Rate;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_RankingOrder                   myRanking;                                         // 0x0008(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultSaveRankMatchResultResponse) == 0x000008, "Wrong alignment on FResultSaveRankMatchResultResponse");
static_assert(sizeof(FResultSaveRankMatchResultResponse) == 0x0000F8, "Wrong size on FResultSaveRankMatchResultResponse");
static_assert(offsetof(FResultSaveRankMatchResultResponse, Rate) == 0x000000, "Member 'FResultSaveRankMatchResultResponse::Rate' has a wrong offset!");
static_assert(offsetof(FResultSaveRankMatchResultResponse, myRanking) == 0x000008, "Member 'FResultSaveRankMatchResultResponse::myRanking' has a wrong offset!");

// ScriptStruct UnionSystem.HoldItemInfo
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FHoldItemInfo final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHoldItemInfo) == 0x000008, "Wrong alignment on FHoldItemInfo");
static_assert(sizeof(FHoldItemInfo) == 0x000080, "Wrong size on FHoldItemInfo");

// ScriptStruct UnionSystem.EffectColorInfo
// 0x0018 (0x0020 - 0x0008)
struct FEffectColorInfo final : public FTableRowBase
{
public:
	EGroupColorId                                 colorId;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 Color;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorScale;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondColorScale;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorHue;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEffectColorInfo) == 0x000008, "Wrong alignment on FEffectColorInfo");
static_assert(sizeof(FEffectColorInfo) == 0x000020, "Wrong size on FEffectColorInfo");
static_assert(offsetof(FEffectColorInfo, colorId) == 0x000008, "Member 'FEffectColorInfo::colorId' has a wrong offset!");
static_assert(offsetof(FEffectColorInfo, Color) == 0x00000C, "Member 'FEffectColorInfo::Color' has a wrong offset!");
static_assert(offsetof(FEffectColorInfo, ColorScale) == 0x000010, "Member 'FEffectColorInfo::ColorScale' has a wrong offset!");
static_assert(offsetof(FEffectColorInfo, SecondColorScale) == 0x000014, "Member 'FEffectColorInfo::SecondColorScale' has a wrong offset!");
static_assert(offsetof(FEffectColorInfo, ColorHue) == 0x000018, "Member 'FEffectColorInfo::ColorHue' has a wrong offset!");

// ScriptStruct UnionSystem.Common_UserBaseData
// 0x0068 (0x0068 - 0x0000)
struct FCommon_UserBaseData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 userName;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 displayCode;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isRestrictReporting;                               // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommon_UserBaseData) == 0x000008, "Wrong alignment on FCommon_UserBaseData");
static_assert(sizeof(FCommon_UserBaseData) == 0x000068, "Wrong size on FCommon_UserBaseData");
static_assert(offsetof(FCommon_UserBaseData, UserId) == 0x000000, "Member 'FCommon_UserBaseData::UserId' has a wrong offset!");
static_assert(offsetof(FCommon_UserBaseData, ProductUserId) == 0x000010, "Member 'FCommon_UserBaseData::ProductUserId' has a wrong offset!");
static_assert(offsetof(FCommon_UserBaseData, userName) == 0x000020, "Member 'FCommon_UserBaseData::userName' has a wrong offset!");
static_assert(offsetof(FCommon_UserBaseData, displayCode) == 0x000030, "Member 'FCommon_UserBaseData::displayCode' has a wrong offset!");
static_assert(offsetof(FCommon_UserBaseData, Platform) == 0x000040, "Member 'FCommon_UserBaseData::Platform' has a wrong offset!");
static_assert(offsetof(FCommon_UserBaseData, PlatformUserId) == 0x000050, "Member 'FCommon_UserBaseData::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FCommon_UserBaseData, isRestrictReporting) == 0x000060, "Member 'FCommon_UserBaseData::isRestrictReporting' has a wrong offset!");

// ScriptStruct UnionSystem.Common_UserNetworkSettings
// 0x0030 (0x0030 - 0x0000)
struct FCommon_UserNetworkSettings final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         playerIconId;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 playerBgColor;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isProfilePublished;                                // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOnlineStatusPublished;                           // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCopyPlayerPublished;                             // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCrossPlay;                                       // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAllowFriendRequest;                              // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAcceptLobbyInvitation;                           // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommon_UserNetworkSettings) == 0x000008, "Wrong alignment on FCommon_UserNetworkSettings");
static_assert(sizeof(FCommon_UserNetworkSettings) == 0x000030, "Wrong size on FCommon_UserNetworkSettings");
static_assert(offsetof(FCommon_UserNetworkSettings, UserId) == 0x000000, "Member 'FCommon_UserNetworkSettings::UserId' has a wrong offset!");
static_assert(offsetof(FCommon_UserNetworkSettings, playerIconId) == 0x000010, "Member 'FCommon_UserNetworkSettings::playerIconId' has a wrong offset!");
static_assert(offsetof(FCommon_UserNetworkSettings, playerBgColor) == 0x000018, "Member 'FCommon_UserNetworkSettings::playerBgColor' has a wrong offset!");
static_assert(offsetof(FCommon_UserNetworkSettings, isProfilePublished) == 0x000028, "Member 'FCommon_UserNetworkSettings::isProfilePublished' has a wrong offset!");
static_assert(offsetof(FCommon_UserNetworkSettings, isOnlineStatusPublished) == 0x000029, "Member 'FCommon_UserNetworkSettings::isOnlineStatusPublished' has a wrong offset!");
static_assert(offsetof(FCommon_UserNetworkSettings, isCopyPlayerPublished) == 0x00002A, "Member 'FCommon_UserNetworkSettings::isCopyPlayerPublished' has a wrong offset!");
static_assert(offsetof(FCommon_UserNetworkSettings, isCrossPlay) == 0x00002B, "Member 'FCommon_UserNetworkSettings::isCrossPlay' has a wrong offset!");
static_assert(offsetof(FCommon_UserNetworkSettings, isAllowFriendRequest) == 0x00002C, "Member 'FCommon_UserNetworkSettings::isAllowFriendRequest' has a wrong offset!");
static_assert(offsetof(FCommon_UserNetworkSettings, isAcceptLobbyInvitation) == 0x00002D, "Member 'FCommon_UserNetworkSettings::isAcceptLobbyInvitation' has a wrong offset!");

// ScriptStruct UnionSystem.Common_PlayState
// 0x0018 (0x0018 - 0x0000)
struct FCommon_PlayState final
{
public:
	class FString                                 lastAccess;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlaying;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommon_PlayState) == 0x000008, "Wrong alignment on FCommon_PlayState");
static_assert(sizeof(FCommon_PlayState) == 0x000018, "Wrong size on FCommon_PlayState");
static_assert(offsetof(FCommon_PlayState, lastAccess) == 0x000000, "Member 'FCommon_PlayState::lastAccess' has a wrong offset!");
static_assert(offsetof(FCommon_PlayState, IsPlaying) == 0x000010, "Member 'FCommon_PlayState::IsPlaying' has a wrong offset!");

// ScriptStruct UnionSystem.FriendCommonPart_FriendData
// 0x0468 (0x0468 - 0x0000)
struct FFriendCommonPart_FriendData final
{
public:
	struct FCommon_UserBaseData                   userBase;                                          // 0x0000(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_UserNetworkSettings            network;                                           // 0x0068(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_PlayState                      PlayState;                                         // 0x0098(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_RatingData                     rating;                                            // 0x00B0(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFriendCommonPart_FriendFestaData      festa;                                             // 0x00B4(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_DegreeData                     degree;                                            // 0x00B8(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_MachineData                    machine;                                           // 0x00C0(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_HistoryData                    history;                                           // 0x0430(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          isManualBan;                                       // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 updatedAt;                                         // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendCommonPart_FriendData) == 0x000008, "Wrong alignment on FFriendCommonPart_FriendData");
static_assert(sizeof(FFriendCommonPart_FriendData) == 0x000468, "Wrong size on FFriendCommonPart_FriendData");
static_assert(offsetof(FFriendCommonPart_FriendData, userBase) == 0x000000, "Member 'FFriendCommonPart_FriendData::userBase' has a wrong offset!");
static_assert(offsetof(FFriendCommonPart_FriendData, network) == 0x000068, "Member 'FFriendCommonPart_FriendData::network' has a wrong offset!");
static_assert(offsetof(FFriendCommonPart_FriendData, PlayState) == 0x000098, "Member 'FFriendCommonPart_FriendData::PlayState' has a wrong offset!");
static_assert(offsetof(FFriendCommonPart_FriendData, rating) == 0x0000B0, "Member 'FFriendCommonPart_FriendData::rating' has a wrong offset!");
static_assert(offsetof(FFriendCommonPart_FriendData, festa) == 0x0000B4, "Member 'FFriendCommonPart_FriendData::festa' has a wrong offset!");
static_assert(offsetof(FFriendCommonPart_FriendData, degree) == 0x0000B8, "Member 'FFriendCommonPart_FriendData::degree' has a wrong offset!");
static_assert(offsetof(FFriendCommonPart_FriendData, machine) == 0x0000C0, "Member 'FFriendCommonPart_FriendData::machine' has a wrong offset!");
static_assert(offsetof(FFriendCommonPart_FriendData, history) == 0x000430, "Member 'FFriendCommonPart_FriendData::history' has a wrong offset!");
static_assert(offsetof(FFriendCommonPart_FriendData, isManualBan) == 0x000450, "Member 'FFriendCommonPart_FriendData::isManualBan' has a wrong offset!");
static_assert(offsetof(FFriendCommonPart_FriendData, updatedAt) == 0x000458, "Member 'FFriendCommonPart_FriendData::updatedAt' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSpeedSelectPlayCount
// 0x0014 (0x0014 - 0x0000)
struct FPlayLogSpeedSelectPlayCount final
{
public:
	int32                                         Normal;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HighSpeed;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SonicSpeed;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SuperSonicSpeed;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Mirror;                                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSpeedSelectPlayCount) == 0x000004, "Wrong alignment on FPlayLogSpeedSelectPlayCount");
static_assert(sizeof(FPlayLogSpeedSelectPlayCount) == 0x000014, "Wrong size on FPlayLogSpeedSelectPlayCount");
static_assert(offsetof(FPlayLogSpeedSelectPlayCount, Normal) == 0x000000, "Member 'FPlayLogSpeedSelectPlayCount::Normal' has a wrong offset!");
static_assert(offsetof(FPlayLogSpeedSelectPlayCount, HighSpeed) == 0x000004, "Member 'FPlayLogSpeedSelectPlayCount::HighSpeed' has a wrong offset!");
static_assert(offsetof(FPlayLogSpeedSelectPlayCount, SonicSpeed) == 0x000008, "Member 'FPlayLogSpeedSelectPlayCount::SonicSpeed' has a wrong offset!");
static_assert(offsetof(FPlayLogSpeedSelectPlayCount, SuperSonicSpeed) == 0x00000C, "Member 'FPlayLogSpeedSelectPlayCount::SuperSonicSpeed' has a wrong offset!");
static_assert(offsetof(FPlayLogSpeedSelectPlayCount, Mirror) == 0x000010, "Member 'FPlayLogSpeedSelectPlayCount::Mirror' has a wrong offset!");

// ScriptStruct UnionSystem.RivalTicket
// 0x000C (0x000C - 0x0000)
struct FRivalTicket final
{
public:
	int32                                         TicketCount;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PowerBonusNormal;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PowerBonusChallenge;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRivalTicket) == 0x000004, "Wrong alignment on FRivalTicket");
static_assert(sizeof(FRivalTicket) == 0x00000C, "Wrong size on FRivalTicket");
static_assert(offsetof(FRivalTicket, TicketCount) == 0x000000, "Member 'FRivalTicket::TicketCount' has a wrong offset!");
static_assert(offsetof(FRivalTicket, PowerBonusNormal) == 0x000004, "Member 'FRivalTicket::PowerBonusNormal' has a wrong offset!");
static_assert(offsetof(FRivalTicket, PowerBonusChallenge) == 0x000008, "Member 'FRivalTicket::PowerBonusChallenge' has a wrong offset!");

// ScriptStruct UnionSystem.RivalLevelData
// 0x0030 (0x0038 - 0x0008)
struct FRivalLevelData final : public FTableRowBase
{
public:
	struct FRivalTicket                           NormalSpeed;                                       // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRivalTicket                           HighSpeed;                                         // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRivalTicket                           SonicSpeed;                                        // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRivalTicket                           SuperSonicSpeed;                                   // 0x002C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRivalLevelData) == 0x000008, "Wrong alignment on FRivalLevelData");
static_assert(sizeof(FRivalLevelData) == 0x000038, "Wrong size on FRivalLevelData");
static_assert(offsetof(FRivalLevelData, NormalSpeed) == 0x000008, "Member 'FRivalLevelData::NormalSpeed' has a wrong offset!");
static_assert(offsetof(FRivalLevelData, HighSpeed) == 0x000014, "Member 'FRivalLevelData::HighSpeed' has a wrong offset!");
static_assert(offsetof(FRivalLevelData, SonicSpeed) == 0x000020, "Member 'FRivalLevelData::SonicSpeed' has a wrong offset!");
static_assert(offsetof(FRivalLevelData, SuperSonicSpeed) == 0x00002C, "Member 'FRivalLevelData::SuperSonicSpeed' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataStart
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataStart final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataStart) == 0x000008, "Wrong alignment on FCRM_RadjDataStart");
static_assert(sizeof(FCRM_RadjDataStart) == 0x000038, "Wrong size on FCRM_RadjDataStart");
static_assert(offsetof(FCRM_RadjDataStart, action_type) == 0x000000, "Member 'FCRM_RadjDataStart::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataStart, key1) == 0x000010, "Member 'FCRM_RadjDataStart::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataStart, key2) == 0x000018, "Member 'FCRM_RadjDataStart::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataStart, key3) == 0x000028, "Member 'FCRM_RadjDataStart::key3' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_ReleaseCharacterData
// 0x0018 (0x0018 - 0x0000)
struct FNetMasterData_ReleaseCharacterData final
{
public:
	int32                                         characterId;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_ReleaseCharacterData) == 0x000008, "Wrong alignment on FNetMasterData_ReleaseCharacterData");
static_assert(sizeof(FNetMasterData_ReleaseCharacterData) == 0x000018, "Wrong size on FNetMasterData_ReleaseCharacterData");
static_assert(offsetof(FNetMasterData_ReleaseCharacterData, characterId) == 0x000000, "Member 'FNetMasterData_ReleaseCharacterData::characterId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_ReleaseCharacterData, releaseTime) == 0x000008, "Member 'FNetMasterData_ReleaseCharacterData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.MaterialColorInfo
// 0x0018 (0x0020 - 0x0008)
struct FMaterialColorInfo final : public FTableRowBase
{
public:
	EGroupColorId                                 colorId;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 Color;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorScale;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LuminanceRing;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LuminanceOutline;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaterialColorInfo) == 0x000008, "Wrong alignment on FMaterialColorInfo");
static_assert(sizeof(FMaterialColorInfo) == 0x000020, "Wrong size on FMaterialColorInfo");
static_assert(offsetof(FMaterialColorInfo, colorId) == 0x000008, "Member 'FMaterialColorInfo::colorId' has a wrong offset!");
static_assert(offsetof(FMaterialColorInfo, Color) == 0x00000C, "Member 'FMaterialColorInfo::Color' has a wrong offset!");
static_assert(offsetof(FMaterialColorInfo, ColorScale) == 0x000010, "Member 'FMaterialColorInfo::ColorScale' has a wrong offset!");
static_assert(offsetof(FMaterialColorInfo, LuminanceRing) == 0x000014, "Member 'FMaterialColorInfo::LuminanceRing' has a wrong offset!");
static_assert(offsetof(FMaterialColorInfo, LuminanceOutline) == 0x000018, "Member 'FMaterialColorInfo::LuminanceOutline' has a wrong offset!");

// ScriptStruct UnionSystem.ItemSwitchSettingSingle
// 0x0058 (0x0058 - 0x0000)
struct FItemSwitchSettingSingle final
{
public:
	TMap<EItemId, bool>                           ItemSwitchInfo;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemSwitchSettingSingle) == 0x000008, "Wrong alignment on FItemSwitchSettingSingle");
static_assert(sizeof(FItemSwitchSettingSingle) == 0x000058, "Wrong size on FItemSwitchSettingSingle");
static_assert(offsetof(FItemSwitchSettingSingle, ItemSwitchInfo) == 0x000000, "Member 'FItemSwitchSettingSingle::ItemSwitchInfo' has a wrong offset!");

// ScriptStruct UnionSystem.ItemSwitchSettingSave
// 0x0010 (0x0010 - 0x0000)
struct FItemSwitchSettingSave final
{
public:
	TArray<struct FItemSwitchSettingSingle>       ItemSwitchSettingArr;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSwitchSettingSave) == 0x000008, "Wrong alignment on FItemSwitchSettingSave");
static_assert(sizeof(FItemSwitchSettingSave) == 0x000010, "Wrong size on FItemSwitchSettingSave");
static_assert(offsetof(FItemSwitchSettingSave, ItemSwitchSettingArr) == 0x000000, "Member 'FItemSwitchSettingSave::ItemSwitchSettingArr' has a wrong offset!");

// ScriptStruct UnionSystem.UIColorInfoData
// 0x0018 (0x0018 - 0x0000)
struct FUIColorInfoData final
{
public:
	EGroupColorId                                 colorId;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 MainColor;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 PlayerNumberBaseArea;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 PlayerNameOutline;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RankMain;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RankOutline;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIColorInfoData) == 0x000004, "Wrong alignment on FUIColorInfoData");
static_assert(sizeof(FUIColorInfoData) == 0x000018, "Wrong size on FUIColorInfoData");
static_assert(offsetof(FUIColorInfoData, colorId) == 0x000000, "Member 'FUIColorInfoData::colorId' has a wrong offset!");
static_assert(offsetof(FUIColorInfoData, MainColor) == 0x000004, "Member 'FUIColorInfoData::MainColor' has a wrong offset!");
static_assert(offsetof(FUIColorInfoData, PlayerNumberBaseArea) == 0x000008, "Member 'FUIColorInfoData::PlayerNumberBaseArea' has a wrong offset!");
static_assert(offsetof(FUIColorInfoData, PlayerNameOutline) == 0x00000C, "Member 'FUIColorInfoData::PlayerNameOutline' has a wrong offset!");
static_assert(offsetof(FUIColorInfoData, RankMain) == 0x000010, "Member 'FUIColorInfoData::RankMain' has a wrong offset!");
static_assert(offsetof(FUIColorInfoData, RankOutline) == 0x000014, "Member 'FUIColorInfoData::RankOutline' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_ProgressRivalTeam
// 0x0020 (0x0020 - 0x0000)
struct FCRM_ProgressRivalTeam final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_ProgressRivalTeam) == 0x000008, "Wrong alignment on FCRM_ProgressRivalTeam");
static_assert(sizeof(FCRM_ProgressRivalTeam) == 0x000020, "Wrong size on FCRM_ProgressRivalTeam");
static_assert(offsetof(FCRM_ProgressRivalTeam, action_type) == 0x000000, "Member 'FCRM_ProgressRivalTeam::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressRivalTeam, key1) == 0x000010, "Member 'FCRM_ProgressRivalTeam::key1' has a wrong offset!");

// ScriptStruct UnionSystem.Common_TimeTrialMachineStickerData
// 0x0068 (0x0068 - 0x0000)
struct FCommon_TimeTrialMachineStickerData final
{
public:
	int32                                         textureId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LocationX;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocationY;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Rotation;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 scaleX;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 scaleY;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         colorId;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         surfaceId;                                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         flag;                                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommon_TimeTrialMachineStickerData) == 0x000008, "Wrong alignment on FCommon_TimeTrialMachineStickerData");
static_assert(sizeof(FCommon_TimeTrialMachineStickerData) == 0x000068, "Wrong size on FCommon_TimeTrialMachineStickerData");
static_assert(offsetof(FCommon_TimeTrialMachineStickerData, textureId) == 0x000000, "Member 'FCommon_TimeTrialMachineStickerData::textureId' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineStickerData, LocationX) == 0x000008, "Member 'FCommon_TimeTrialMachineStickerData::LocationX' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineStickerData, LocationY) == 0x000018, "Member 'FCommon_TimeTrialMachineStickerData::LocationY' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineStickerData, Rotation) == 0x000028, "Member 'FCommon_TimeTrialMachineStickerData::Rotation' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineStickerData, scaleX) == 0x000038, "Member 'FCommon_TimeTrialMachineStickerData::scaleX' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineStickerData, scaleY) == 0x000048, "Member 'FCommon_TimeTrialMachineStickerData::scaleY' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineStickerData, colorId) == 0x000058, "Member 'FCommon_TimeTrialMachineStickerData::colorId' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineStickerData, surfaceId) == 0x00005C, "Member 'FCommon_TimeTrialMachineStickerData::surfaceId' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineStickerData, flag) == 0x000060, "Member 'FCommon_TimeTrialMachineStickerData::flag' has a wrong offset!");

// ScriptStruct UnionSystem.Common_TimeTrialMachineData
// 0x0378 (0x0378 - 0x0000)
struct FCommon_TimeTrialMachineData final
{
public:
	int32                                         machineType;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineFront;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineRear;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineWheel;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineFrontGadget1;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineFrontGadget2;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineFrontGadget3;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineRearGadget1;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineRearGadget2;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineRearGadget3;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineColor;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_TimeTrialMachineStickerData    machineFrontStickerSlot1;                          // 0x0030(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_TimeTrialMachineStickerData    machineFrontStickerSlot2;                          // 0x0098(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_TimeTrialMachineStickerData    machineFrontStickerSlot3;                          // 0x0100(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_TimeTrialMachineStickerData    machineFrontStickerSlot4;                          // 0x0168(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_TimeTrialMachineStickerData    machineRearStickerSlot1;                           // 0x01D0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_TimeTrialMachineStickerData    machineRearStickerSlot2;                           // 0x0238(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_TimeTrialMachineStickerData    machineRearStickerSlot3;                           // 0x02A0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_TimeTrialMachineStickerData    machineRearStickerSlot4;                           // 0x0308(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         machineAura;                                       // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         machineHorn;                                       // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_TimeTrialMachineData) == 0x000008, "Wrong alignment on FCommon_TimeTrialMachineData");
static_assert(sizeof(FCommon_TimeTrialMachineData) == 0x000378, "Wrong size on FCommon_TimeTrialMachineData");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineType) == 0x000000, "Member 'FCommon_TimeTrialMachineData::machineType' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineFront) == 0x000004, "Member 'FCommon_TimeTrialMachineData::machineFront' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineRear) == 0x000008, "Member 'FCommon_TimeTrialMachineData::machineRear' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineWheel) == 0x00000C, "Member 'FCommon_TimeTrialMachineData::machineWheel' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineFrontGadget1) == 0x000010, "Member 'FCommon_TimeTrialMachineData::machineFrontGadget1' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineFrontGadget2) == 0x000014, "Member 'FCommon_TimeTrialMachineData::machineFrontGadget2' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineFrontGadget3) == 0x000018, "Member 'FCommon_TimeTrialMachineData::machineFrontGadget3' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineRearGadget1) == 0x00001C, "Member 'FCommon_TimeTrialMachineData::machineRearGadget1' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineRearGadget2) == 0x000020, "Member 'FCommon_TimeTrialMachineData::machineRearGadget2' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineRearGadget3) == 0x000024, "Member 'FCommon_TimeTrialMachineData::machineRearGadget3' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineColor) == 0x000028, "Member 'FCommon_TimeTrialMachineData::machineColor' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineFrontStickerSlot1) == 0x000030, "Member 'FCommon_TimeTrialMachineData::machineFrontStickerSlot1' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineFrontStickerSlot2) == 0x000098, "Member 'FCommon_TimeTrialMachineData::machineFrontStickerSlot2' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineFrontStickerSlot3) == 0x000100, "Member 'FCommon_TimeTrialMachineData::machineFrontStickerSlot3' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineFrontStickerSlot4) == 0x000168, "Member 'FCommon_TimeTrialMachineData::machineFrontStickerSlot4' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineRearStickerSlot1) == 0x0001D0, "Member 'FCommon_TimeTrialMachineData::machineRearStickerSlot1' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineRearStickerSlot2) == 0x000238, "Member 'FCommon_TimeTrialMachineData::machineRearStickerSlot2' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineRearStickerSlot3) == 0x0002A0, "Member 'FCommon_TimeTrialMachineData::machineRearStickerSlot3' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineRearStickerSlot4) == 0x000308, "Member 'FCommon_TimeTrialMachineData::machineRearStickerSlot4' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineAura) == 0x000370, "Member 'FCommon_TimeTrialMachineData::machineAura' has a wrong offset!");
static_assert(offsetof(FCommon_TimeTrialMachineData, machineHorn) == 0x000374, "Member 'FCommon_TimeTrialMachineData::machineHorn' has a wrong offset!");

// ScriptStruct UnionSystem.FriendGetFriendListResponse
// 0x0030 (0x0030 - 0x0000)
struct FFriendGetFriendListResponse final
{
public:
	TArray<struct FFriendCommonPart_FriendData>   appFriendDatas;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFriendCommonPart_FriendData>   applyingFriendDatas;                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFriendCommonPart_FriendData>   acceptWaitingFriendDatas;                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendGetFriendListResponse) == 0x000008, "Wrong alignment on FFriendGetFriendListResponse");
static_assert(sizeof(FFriendGetFriendListResponse) == 0x000030, "Wrong size on FFriendGetFriendListResponse");
static_assert(offsetof(FFriendGetFriendListResponse, appFriendDatas) == 0x000000, "Member 'FFriendGetFriendListResponse::appFriendDatas' has a wrong offset!");
static_assert(offsetof(FFriendGetFriendListResponse, applyingFriendDatas) == 0x000010, "Member 'FFriendGetFriendListResponse::applyingFriendDatas' has a wrong offset!");
static_assert(offsetof(FFriendGetFriendListResponse, acceptWaitingFriendDatas) == 0x000020, "Member 'FFriendGetFriendListResponse::acceptWaitingFriendDatas' has a wrong offset!");

// ScriptStruct UnionSystem.MCEventData
// 0x0060 (0x0060 - 0x0000)
struct FMCEventData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventNameTable;                                    // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventNameId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ResultBonusName;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMCEventSwitch                                Genre;                                             // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DescriptionTable;                                  // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DescriptionId;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMCEventPointUpChance                         TargetRank;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PointMul;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointAdd;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomWait;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCEventData) == 0x000008, "Wrong alignment on FMCEventData");
static_assert(sizeof(FMCEventData) == 0x000060, "Wrong size on FMCEventData");
static_assert(offsetof(FMCEventData, ID) == 0x000000, "Member 'FMCEventData::ID' has a wrong offset!");
static_assert(offsetof(FMCEventData, EventNameTable) == 0x000004, "Member 'FMCEventData::EventNameTable' has a wrong offset!");
static_assert(offsetof(FMCEventData, EventNameId) == 0x000010, "Member 'FMCEventData::EventNameId' has a wrong offset!");
static_assert(offsetof(FMCEventData, ResultBonusName) == 0x000020, "Member 'FMCEventData::ResultBonusName' has a wrong offset!");
static_assert(offsetof(FMCEventData, Genre) == 0x000030, "Member 'FMCEventData::Genre' has a wrong offset!");
static_assert(offsetof(FMCEventData, DescriptionTable) == 0x000034, "Member 'FMCEventData::DescriptionTable' has a wrong offset!");
static_assert(offsetof(FMCEventData, DescriptionId) == 0x000040, "Member 'FMCEventData::DescriptionId' has a wrong offset!");
static_assert(offsetof(FMCEventData, TargetRank) == 0x000050, "Member 'FMCEventData::TargetRank' has a wrong offset!");
static_assert(offsetof(FMCEventData, PointMul) == 0x000054, "Member 'FMCEventData::PointMul' has a wrong offset!");
static_assert(offsetof(FMCEventData, PointAdd) == 0x000058, "Member 'FMCEventData::PointAdd' has a wrong offset!");
static_assert(offsetof(FMCEventData, RandomWait) == 0x00005C, "Member 'FMCEventData::RandomWait' has a wrong offset!");

// ScriptStruct UnionSystem.DriverDataCore
// 0x02C0 (0x02C8 - 0x0008)
struct FDriverDataCore : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   ShortName;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDefaultSelect;                                   // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCom;                                            // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDLC;                                             // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDLCType                                      DLCType;                                           // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReleaseSeason;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     OriginalDriverId;                                  // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverSize                                   DriverSize;                                        // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverSize                                   CharaSelectSize;                                   // 0x002F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverType                                   DriverType;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    DefaultMachineId;                                  // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaSelectIndex;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnlockText;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HudOffsetY;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        HoldItemLeftHandLocations;                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        HoldItemRightHandLocations;                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SceneSkeletalMesh;                                 // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             SteeringWheelMesh;                                 // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   RaceAnimInstance;                                  // 0x00F0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MenuAnimInstance;                                  // 0x0118(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SceneAnimInstance;                                 // 0x0140(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0168(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTextureHUD;                                    // 0x0190(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CutInTexture;                                      // 0x01B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TeamIconTexture;                                   // 0x01E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TeamCutInTexture;                                  // 0x0208(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           DecideSE;                                          // 0x0230(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           BGM;                                               // 0x0258(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStringTable>            VoiceTable;                                        // 0x0280(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectorLabel;                                     // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        DriverAssetId;                                     // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDriverDataCore) == 0x000008, "Wrong alignment on FDriverDataCore");
static_assert(sizeof(FDriverDataCore) == 0x0002C8, "Wrong size on FDriverDataCore");
static_assert(offsetof(FDriverDataCore, Name) == 0x000008, "Member 'FDriverDataCore::Name' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, ShortName) == 0x000018, "Member 'FDriverDataCore::ShortName' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, IsEnabled) == 0x000020, "Member 'FDriverDataCore::IsEnabled' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, IsDefaultSelect) == 0x000021, "Member 'FDriverDataCore::IsDefaultSelect' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, UseCom) == 0x000022, "Member 'FDriverDataCore::UseCom' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, IsDLC) == 0x000023, "Member 'FDriverDataCore::IsDLC' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, DLCType) == 0x000024, "Member 'FDriverDataCore::DLCType' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, ReleaseSeason) == 0x000028, "Member 'FDriverDataCore::ReleaseSeason' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, DriverId) == 0x00002C, "Member 'FDriverDataCore::DriverId' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, OriginalDriverId) == 0x00002D, "Member 'FDriverDataCore::OriginalDriverId' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, DriverSize) == 0x00002E, "Member 'FDriverDataCore::DriverSize' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, CharaSelectSize) == 0x00002F, "Member 'FDriverDataCore::CharaSelectSize' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, DriverType) == 0x000030, "Member 'FDriverDataCore::DriverType' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, DefaultMachineId) == 0x000031, "Member 'FDriverDataCore::DefaultMachineId' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, CharaSelectIndex) == 0x000034, "Member 'FDriverDataCore::CharaSelectIndex' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, Price) == 0x000038, "Member 'FDriverDataCore::Price' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, UnlockText) == 0x000040, "Member 'FDriverDataCore::UnlockText' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, SortID) == 0x000050, "Member 'FDriverDataCore::SortID' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, HudOffsetY) == 0x000054, "Member 'FDriverDataCore::HudOffsetY' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, HoldItemLeftHandLocations) == 0x000058, "Member 'FDriverDataCore::HoldItemLeftHandLocations' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, HoldItemRightHandLocations) == 0x000068, "Member 'FDriverDataCore::HoldItemRightHandLocations' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, SkeletalMesh) == 0x000078, "Member 'FDriverDataCore::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, SceneSkeletalMesh) == 0x0000A0, "Member 'FDriverDataCore::SceneSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, SteeringWheelMesh) == 0x0000C8, "Member 'FDriverDataCore::SteeringWheelMesh' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, RaceAnimInstance) == 0x0000F0, "Member 'FDriverDataCore::RaceAnimInstance' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, MenuAnimInstance) == 0x000118, "Member 'FDriverDataCore::MenuAnimInstance' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, SceneAnimInstance) == 0x000140, "Member 'FDriverDataCore::SceneAnimInstance' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, IconTexture) == 0x000168, "Member 'FDriverDataCore::IconTexture' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, IconTextureHUD) == 0x000190, "Member 'FDriverDataCore::IconTextureHUD' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, CutInTexture) == 0x0001B8, "Member 'FDriverDataCore::CutInTexture' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, TeamIconTexture) == 0x0001E0, "Member 'FDriverDataCore::TeamIconTexture' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, TeamCutInTexture) == 0x000208, "Member 'FDriverDataCore::TeamCutInTexture' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, DecideSE) == 0x000230, "Member 'FDriverDataCore::DecideSE' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, BGM) == 0x000258, "Member 'FDriverDataCore::BGM' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, VoiceTable) == 0x000280, "Member 'FDriverDataCore::VoiceTable' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, SelectorLabel) == 0x0002A8, "Member 'FDriverDataCore::SelectorLabel' has a wrong offset!");
static_assert(offsetof(FDriverDataCore, DriverAssetId) == 0x0002B8, "Member 'FDriverDataCore::DriverAssetId' has a wrong offset!");

// ScriptStruct UnionSystem.UserAlbumTrackID
// 0x000C (0x000C - 0x0000)
struct FUserAlbumTrackID final
{
public:
	ESelectedState                                State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AlbumID;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrackID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserAlbumTrackID) == 0x000004, "Wrong alignment on FUserAlbumTrackID");
static_assert(sizeof(FUserAlbumTrackID) == 0x00000C, "Wrong size on FUserAlbumTrackID");
static_assert(offsetof(FUserAlbumTrackID, State) == 0x000000, "Member 'FUserAlbumTrackID::State' has a wrong offset!");
static_assert(offsetof(FUserAlbumTrackID, AlbumID) == 0x000004, "Member 'FUserAlbumTrackID::AlbumID' has a wrong offset!");
static_assert(offsetof(FUserAlbumTrackID, TrackID) == 0x000008, "Member 'FUserAlbumTrackID::TrackID' has a wrong offset!");

// ScriptStruct UnionSystem.UserCustomLapBGMData
// 0x0010 (0x0010 - 0x0000)
struct FUserCustomLapBGMData final
{
public:
	TArray<struct FUserAlbumTrackID>              AlbumTrackList;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserCustomLapBGMData) == 0x000008, "Wrong alignment on FUserCustomLapBGMData");
static_assert(sizeof(FUserCustomLapBGMData) == 0x000010, "Wrong size on FUserCustomLapBGMData");
static_assert(offsetof(FUserCustomLapBGMData, AlbumTrackList) == 0x000000, "Member 'FUserCustomLapBGMData::AlbumTrackList' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetMyRankingFestaPointRequest
// 0x0004 (0x0004 - 0x0000)
struct FRankingGetMyRankingFestaPointRequest
{
public:
	int32                                         festaId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetMyRankingFestaPointRequest) == 0x000004, "Wrong alignment on FRankingGetMyRankingFestaPointRequest");
static_assert(sizeof(FRankingGetMyRankingFestaPointRequest) == 0x000004, "Wrong size on FRankingGetMyRankingFestaPointRequest");
static_assert(offsetof(FRankingGetMyRankingFestaPointRequest, festaId) == 0x000000, "Member 'FRankingGetMyRankingFestaPointRequest::festaId' has a wrong offset!");

// ScriptStruct UnionSystem.FestaMyRankingCacheKey
// 0x0000 (0x0004 - 0x0004)
struct FFestaMyRankingCacheKey final : public FRankingGetMyRankingFestaPointRequest
{
};
static_assert(alignof(FFestaMyRankingCacheKey) == 0x000004, "Wrong alignment on FFestaMyRankingCacheKey");
static_assert(sizeof(FFestaMyRankingCacheKey) == 0x000004, "Wrong size on FFestaMyRankingCacheKey");

// ScriptStruct UnionSystem.UserGetUserSearchRequest_TargetId
// 0x0020 (0x0020 - 0x0000)
struct FUserGetUserSearchRequest_TargetId final
{
public:
	class FString                                 ProductUserId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 displayCode;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetUserSearchRequest_TargetId) == 0x000008, "Wrong alignment on FUserGetUserSearchRequest_TargetId");
static_assert(sizeof(FUserGetUserSearchRequest_TargetId) == 0x000020, "Wrong size on FUserGetUserSearchRequest_TargetId");
static_assert(offsetof(FUserGetUserSearchRequest_TargetId, ProductUserId) == 0x000000, "Member 'FUserGetUserSearchRequest_TargetId::ProductUserId' has a wrong offset!");
static_assert(offsetof(FUserGetUserSearchRequest_TargetId, displayCode) == 0x000010, "Member 'FUserGetUserSearchRequest_TargetId::displayCode' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetUserSearchRequest
// 0x0018 (0x0018 - 0x0000)
struct FUserGetUserSearchRequest final
{
public:
	TArray<struct FUserGetUserSearchRequest_TargetId> targetIds;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         selectFlg;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserGetUserSearchRequest) == 0x000008, "Wrong alignment on FUserGetUserSearchRequest");
static_assert(sizeof(FUserGetUserSearchRequest) == 0x000018, "Wrong size on FUserGetUserSearchRequest");
static_assert(offsetof(FUserGetUserSearchRequest, targetIds) == 0x000000, "Member 'FUserGetUserSearchRequest::targetIds' has a wrong offset!");
static_assert(offsetof(FUserGetUserSearchRequest, selectFlg) == 0x000010, "Member 'FUserGetUserSearchRequest::selectFlg' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_FriendMatch
// 0x0050 (0x0050 - 0x0000)
struct FCRM_FriendMatch final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 key6;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_FriendMatch) == 0x000008, "Wrong alignment on FCRM_FriendMatch");
static_assert(sizeof(FCRM_FriendMatch) == 0x000050, "Wrong size on FCRM_FriendMatch");
static_assert(offsetof(FCRM_FriendMatch, action_type) == 0x000000, "Member 'FCRM_FriendMatch::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_FriendMatch, key1) == 0x000010, "Member 'FCRM_FriendMatch::key1' has a wrong offset!");
static_assert(offsetof(FCRM_FriendMatch, key4) == 0x000020, "Member 'FCRM_FriendMatch::key4' has a wrong offset!");
static_assert(offsetof(FCRM_FriendMatch, key5) == 0x000030, "Member 'FCRM_FriendMatch::key5' has a wrong offset!");
static_assert(offsetof(FCRM_FriendMatch, key6) == 0x000040, "Member 'FCRM_FriendMatch::key6' has a wrong offset!");

// ScriptStruct UnionSystem.HealthCheckResponse
// 0x0001 (0x0001 - 0x0000)
struct FHealthCheckResponse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHealthCheckResponse) == 0x000001, "Wrong alignment on FHealthCheckResponse");
static_assert(sizeof(FHealthCheckResponse) == 0x000001, "Wrong size on FHealthCheckResponse");

// ScriptStruct UnionSystem.UserAssistData
// 0x0005 (0x0005 - 0x0000)
struct FUserAssistData final
{
public:
	bool                                          HandleAssist;                                      // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceleratorAssist;                                 // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TSRKeyAssign;                                      // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AirTrickAssist;                                    // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoItemAssist;                                    // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserAssistData) == 0x000001, "Wrong alignment on FUserAssistData");
static_assert(sizeof(FUserAssistData) == 0x000005, "Wrong size on FUserAssistData");
static_assert(offsetof(FUserAssistData, HandleAssist) == 0x000000, "Member 'FUserAssistData::HandleAssist' has a wrong offset!");
static_assert(offsetof(FUserAssistData, AcceleratorAssist) == 0x000001, "Member 'FUserAssistData::AcceleratorAssist' has a wrong offset!");
static_assert(offsetof(FUserAssistData, TSRKeyAssign) == 0x000002, "Member 'FUserAssistData::TSRKeyAssign' has a wrong offset!");
static_assert(offsetof(FUserAssistData, AirTrickAssist) == 0x000003, "Member 'FUserAssistData::AirTrickAssist' has a wrong offset!");
static_assert(offsetof(FUserAssistData, AutoItemAssist) == 0x000004, "Member 'FUserAssistData::AutoItemAssist' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetUserSearchResponse
// 0x0010 (0x0010 - 0x0000)
struct FUserGetUserSearchResponse final
{
public:
	TArray<struct FCommon_UserSearchData>         userSearchDatas;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetUserSearchResponse) == 0x000008, "Wrong alignment on FUserGetUserSearchResponse");
static_assert(sizeof(FUserGetUserSearchResponse) == 0x000010, "Wrong size on FUserGetUserSearchResponse");
static_assert(offsetof(FUserGetUserSearchResponse, userSearchDatas) == 0x000000, "Member 'FUserGetUserSearchResponse::userSearchDatas' has a wrong offset!");

// ScriptStruct UnionSystem.OnlineSettings
// 0x0006 (0x0006 - 0x0000)
struct FOnlineSettings final
{
public:
	bool                                          bShowPlayStatus;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowCrossplay;                                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowReceiveFriendRequests;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSearchByPlayerId;                            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowReceiveLobbyInvites;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowNotifyLobbyInvitesInRace;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnlineSettings) == 0x000001, "Wrong alignment on FOnlineSettings");
static_assert(sizeof(FOnlineSettings) == 0x000006, "Wrong size on FOnlineSettings");
static_assert(offsetof(FOnlineSettings, bShowPlayStatus) == 0x000000, "Member 'FOnlineSettings::bShowPlayStatus' has a wrong offset!");
static_assert(offsetof(FOnlineSettings, bAllowCrossplay) == 0x000001, "Member 'FOnlineSettings::bAllowCrossplay' has a wrong offset!");
static_assert(offsetof(FOnlineSettings, bAllowReceiveFriendRequests) == 0x000002, "Member 'FOnlineSettings::bAllowReceiveFriendRequests' has a wrong offset!");
static_assert(offsetof(FOnlineSettings, bAllowSearchByPlayerId) == 0x000003, "Member 'FOnlineSettings::bAllowSearchByPlayerId' has a wrong offset!");
static_assert(offsetof(FOnlineSettings, bAllowReceiveLobbyInvites) == 0x000004, "Member 'FOnlineSettings::bAllowReceiveLobbyInvites' has a wrong offset!");
static_assert(offsetof(FOnlineSettings, bAllowNotifyLobbyInvitesInRace) == 0x000005, "Member 'FOnlineSettings::bAllowNotifyLobbyInvitesInRace' has a wrong offset!");

// ScriptStruct UnionSystem.AppFriendUserData
// 0x0078 (0x0078 - 0x0000)
struct FAppFriendUserData final
{
public:
	TMap<class FString, class FString>            _RecentPlayers;                                    // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TArray<class FString>                         _BlockPlayers;                                     // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          _NoticeLobbyInvitationOnRace;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _PlayerIconId;                                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _PlayerBgColor;                                    // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppFriendUserData) == 0x000008, "Wrong alignment on FAppFriendUserData");
static_assert(sizeof(FAppFriendUserData) == 0x000078, "Wrong size on FAppFriendUserData");
static_assert(offsetof(FAppFriendUserData, _RecentPlayers) == 0x000000, "Member 'FAppFriendUserData::_RecentPlayers' has a wrong offset!");
static_assert(offsetof(FAppFriendUserData, _BlockPlayers) == 0x000050, "Member 'FAppFriendUserData::_BlockPlayers' has a wrong offset!");
static_assert(offsetof(FAppFriendUserData, _NoticeLobbyInvitationOnRace) == 0x000060, "Member 'FAppFriendUserData::_NoticeLobbyInvitationOnRace' has a wrong offset!");
static_assert(offsetof(FAppFriendUserData, _PlayerIconId) == 0x000064, "Member 'FAppFriendUserData::_PlayerIconId' has a wrong offset!");
static_assert(offsetof(FAppFriendUserData, _PlayerBgColor) == 0x000068, "Member 'FAppFriendUserData::_PlayerBgColor' has a wrong offset!");

// ScriptStruct UnionSystem.LegendCompeFriendRankingCache
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FLegendCompeFriendRankingCache final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLegendCompeFriendRankingCache) == 0x000008, "Wrong alignment on FLegendCompeFriendRankingCache");
static_assert(sizeof(FLegendCompeFriendRankingCache) == 0x000018, "Wrong size on FLegendCompeFriendRankingCache");

// ScriptStruct UnionSystem.CRM_RadjDataSteerRightOff
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataSteerRightOff final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataSteerRightOff) == 0x000008, "Wrong alignment on FCRM_RadjDataSteerRightOff");
static_assert(sizeof(FCRM_RadjDataSteerRightOff) == 0x000038, "Wrong size on FCRM_RadjDataSteerRightOff");
static_assert(offsetof(FCRM_RadjDataSteerRightOff, action_type) == 0x000000, "Member 'FCRM_RadjDataSteerRightOff::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerRightOff, key1) == 0x000010, "Member 'FCRM_RadjDataSteerRightOff::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerRightOff, key2) == 0x000018, "Member 'FCRM_RadjDataSteerRightOff::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerRightOff, key3) == 0x000028, "Member 'FCRM_RadjDataSteerRightOff::key3' has a wrong offset!");

// ScriptStruct UnionSystem.LobbyId
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FLobbyId final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyId) == 0x000008, "Wrong alignment on FLobbyId");
static_assert(sizeof(FLobbyId) == 0x000010, "Wrong size on FLobbyId");

// ScriptStruct UnionSystem.LobbyGenerateLobbyResponse
// 0x0028 (0x0028 - 0x0000)
struct FLobbyGenerateLobbyResponse final
{
public:
	class FString                                 ShortLobbyId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 generateAt;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpirationTimeSec;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyGenerateLobbyResponse) == 0x000008, "Wrong alignment on FLobbyGenerateLobbyResponse");
static_assert(sizeof(FLobbyGenerateLobbyResponse) == 0x000028, "Wrong size on FLobbyGenerateLobbyResponse");
static_assert(offsetof(FLobbyGenerateLobbyResponse, ShortLobbyId) == 0x000000, "Member 'FLobbyGenerateLobbyResponse::ShortLobbyId' has a wrong offset!");
static_assert(offsetof(FLobbyGenerateLobbyResponse, generateAt) == 0x000010, "Member 'FLobbyGenerateLobbyResponse::generateAt' has a wrong offset!");
static_assert(offsetof(FLobbyGenerateLobbyResponse, ExpirationTimeSec) == 0x000020, "Member 'FLobbyGenerateLobbyResponse::ExpirationTimeSec' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataOvertake
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataOvertake final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataOvertake) == 0x000008, "Wrong alignment on FCRM_RadjDataOvertake");
static_assert(sizeof(FCRM_RadjDataOvertake) == 0x000038, "Wrong size on FCRM_RadjDataOvertake");
static_assert(offsetof(FCRM_RadjDataOvertake, action_type) == 0x000000, "Member 'FCRM_RadjDataOvertake::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataOvertake, key1) == 0x000010, "Member 'FCRM_RadjDataOvertake::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataOvertake, key2) == 0x000018, "Member 'FCRM_RadjDataOvertake::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataOvertake, key3) == 0x000028, "Member 'FCRM_RadjDataOvertake::key3' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_RankMatchRankTableData
// 0x0020 (0x0020 - 0x0000)
struct FNetMasterData_RankMatchRankTableData final
{
public:
	int32                                         rankId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 rankValue;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rateValue;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNetMasterData_RankMatchRankTableData) == 0x000008, "Wrong alignment on FNetMasterData_RankMatchRankTableData");
static_assert(sizeof(FNetMasterData_RankMatchRankTableData) == 0x000020, "Wrong size on FNetMasterData_RankMatchRankTableData");
static_assert(offsetof(FNetMasterData_RankMatchRankTableData, rankId) == 0x000000, "Member 'FNetMasterData_RankMatchRankTableData::rankId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_RankMatchRankTableData, rankValue) == 0x000008, "Member 'FNetMasterData_RankMatchRankTableData::rankValue' has a wrong offset!");
static_assert(offsetof(FNetMasterData_RankMatchRankTableData, rateValue) == 0x000018, "Member 'FNetMasterData_RankMatchRankTableData::rateValue' has a wrong offset!");

// ScriptStruct UnionSystem.CreateOrConnectLobbyResult
// 0x00A8 (0x00A8 - 0x0000)
struct FCreateOrConnectLobbyResult final
{
public:
	struct FOnlineErrorBP                         Error;                                             // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UserId;                                            // 0x0038(0x0030)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       OwnerUserId;                                       // 0x0068(0x0030)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLobbyId                               LobbyId;                                           // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreateOrConnectLobbyResult) == 0x000008, "Wrong alignment on FCreateOrConnectLobbyResult");
static_assert(sizeof(FCreateOrConnectLobbyResult) == 0x0000A8, "Wrong size on FCreateOrConnectLobbyResult");
static_assert(offsetof(FCreateOrConnectLobbyResult, Error) == 0x000000, "Member 'FCreateOrConnectLobbyResult::Error' has a wrong offset!");
static_assert(offsetof(FCreateOrConnectLobbyResult, UserId) == 0x000038, "Member 'FCreateOrConnectLobbyResult::UserId' has a wrong offset!");
static_assert(offsetof(FCreateOrConnectLobbyResult, OwnerUserId) == 0x000068, "Member 'FCreateOrConnectLobbyResult::OwnerUserId' has a wrong offset!");
static_assert(offsetof(FCreateOrConnectLobbyResult, LobbyId) == 0x000098, "Member 'FCreateOrConnectLobbyResult::LobbyId' has a wrong offset!");

// ScriptStruct UnionSystem.SearchLobbyResult
// 0x0078 (0x0078 - 0x0000)
struct FSearchLobbyResult final
{
public:
	struct FOnlineErrorBP                         Error;                                             // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UserId;                                            // 0x0038(0x0030)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLobbyId>                       LobbyIds;                                          // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSearchLobbyResult) == 0x000008, "Wrong alignment on FSearchLobbyResult");
static_assert(sizeof(FSearchLobbyResult) == 0x000078, "Wrong size on FSearchLobbyResult");
static_assert(offsetof(FSearchLobbyResult, Error) == 0x000000, "Member 'FSearchLobbyResult::Error' has a wrong offset!");
static_assert(offsetof(FSearchLobbyResult, UserId) == 0x000038, "Member 'FSearchLobbyResult::UserId' has a wrong offset!");
static_assert(offsetof(FSearchLobbyResult, LobbyIds) == 0x000068, "Member 'FSearchLobbyResult::LobbyIds' has a wrong offset!");

// ScriptStruct UnionSystem.GrandPrixStatus
// 0x0028 (0x0028 - 0x0000)
struct FGrandPrixStatus final
{
public:
	TArray<uint8>                                 Normal;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Mirror;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOpened;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeast1Play;                                       // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGrandPrixStatus) == 0x000008, "Wrong alignment on FGrandPrixStatus");
static_assert(sizeof(FGrandPrixStatus) == 0x000028, "Wrong size on FGrandPrixStatus");
static_assert(offsetof(FGrandPrixStatus, Normal) == 0x000000, "Member 'FGrandPrixStatus::Normal' has a wrong offset!");
static_assert(offsetof(FGrandPrixStatus, Mirror) == 0x000010, "Member 'FGrandPrixStatus::Mirror' has a wrong offset!");
static_assert(offsetof(FGrandPrixStatus, bOpened) == 0x000020, "Member 'FGrandPrixStatus::bOpened' has a wrong offset!");
static_assert(offsetof(FGrandPrixStatus, bLeast1Play) == 0x000021, "Member 'FGrandPrixStatus::bLeast1Play' has a wrong offset!");

// ScriptStruct UnionSystem.UserGrandPrixData
// 0x01D0 (0x01D0 - 0x0000)
struct FUserGrandPrixData final
{
public:
	TArray<bool>                                  EventCompleted;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         RivalWinRewardEventCount;                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGrandPrixStatus>               GrandPrixCompletionStatus;                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         GrandPrixWinCount;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GrandPrixFinishesCount;                            // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GrandPrixLeast1Play;                               // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GrandPrixFirstIrregularAppeared;                   // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int16>                                 RivalAppearanceCount;                              // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int16>                                 RivalWinCount;                                     // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSpawnPowerRival;                                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMenuSpeedClassId, uint8>                RivalLevels;                                       // 0x0058(0x0050)(NativeAccessSpecifierPublic)
	TMap<EMenuSpeedClassId, uint8>                BeforeRivalLevels;                                 // 0x00A8(0x0050)(NativeAccessSpecifierPublic)
	TArray<uint8>                                 KnockdownRivalLevelNormalSpeed;                    // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 KnockdownRivalLevelHighSpeed;                      // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 KnockdownRivalLevelSonicSpeed;                     // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 KnockdownRivalLevelSuperSonicSpeed;                // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 KnockdownRivalLevelMirror;                         // 0x0138(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	ESpeedClassId                                 LastFocusedClassId;                                // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuSpeedClassId                             LastFocusedMenuSpeedClassId;                       // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuSpeedClassId                             LastPlayedMenuSpeedClassId;                        // 0x014A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B[0x5];                                      // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMenuSpeedClassId, bool>                 SpawnLevelDownUIFlags;                             // 0x0150(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OpenSuperSonicSpeed;                               // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenMirror;                                        // 0x01A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A2[0x6];                                      // 0x01A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EStageId>                              PlayedAnotherStageIds;                             // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EGrandPrixEndingId>                    ClearedEndingIds;                                  // 0x01B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          GrandPrixSelectTimeTrialLinkFirst;                 // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWinBeforeNonFixedGrandPrix;                      // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA[0x6];                                      // 0x01CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserGrandPrixData) == 0x000008, "Wrong alignment on FUserGrandPrixData");
static_assert(sizeof(FUserGrandPrixData) == 0x0001D0, "Wrong size on FUserGrandPrixData");
static_assert(offsetof(FUserGrandPrixData, EventCompleted) == 0x000000, "Member 'FUserGrandPrixData::EventCompleted' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, RivalWinRewardEventCount) == 0x000010, "Member 'FUserGrandPrixData::RivalWinRewardEventCount' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, GrandPrixCompletionStatus) == 0x000018, "Member 'FUserGrandPrixData::GrandPrixCompletionStatus' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, GrandPrixWinCount) == 0x000028, "Member 'FUserGrandPrixData::GrandPrixWinCount' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, GrandPrixFinishesCount) == 0x000029, "Member 'FUserGrandPrixData::GrandPrixFinishesCount' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, GrandPrixLeast1Play) == 0x00002A, "Member 'FUserGrandPrixData::GrandPrixLeast1Play' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, GrandPrixFirstIrregularAppeared) == 0x00002B, "Member 'FUserGrandPrixData::GrandPrixFirstIrregularAppeared' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, RivalAppearanceCount) == 0x000030, "Member 'FUserGrandPrixData::RivalAppearanceCount' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, RivalWinCount) == 0x000040, "Member 'FUserGrandPrixData::RivalWinCount' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, bSpawnPowerRival) == 0x000050, "Member 'FUserGrandPrixData::bSpawnPowerRival' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, RivalLevels) == 0x000058, "Member 'FUserGrandPrixData::RivalLevels' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, BeforeRivalLevels) == 0x0000A8, "Member 'FUserGrandPrixData::BeforeRivalLevels' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, KnockdownRivalLevelNormalSpeed) == 0x0000F8, "Member 'FUserGrandPrixData::KnockdownRivalLevelNormalSpeed' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, KnockdownRivalLevelHighSpeed) == 0x000108, "Member 'FUserGrandPrixData::KnockdownRivalLevelHighSpeed' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, KnockdownRivalLevelSonicSpeed) == 0x000118, "Member 'FUserGrandPrixData::KnockdownRivalLevelSonicSpeed' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, KnockdownRivalLevelSuperSonicSpeed) == 0x000128, "Member 'FUserGrandPrixData::KnockdownRivalLevelSuperSonicSpeed' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, KnockdownRivalLevelMirror) == 0x000138, "Member 'FUserGrandPrixData::KnockdownRivalLevelMirror' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, LastFocusedClassId) == 0x000148, "Member 'FUserGrandPrixData::LastFocusedClassId' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, LastFocusedMenuSpeedClassId) == 0x000149, "Member 'FUserGrandPrixData::LastFocusedMenuSpeedClassId' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, LastPlayedMenuSpeedClassId) == 0x00014A, "Member 'FUserGrandPrixData::LastPlayedMenuSpeedClassId' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, SpawnLevelDownUIFlags) == 0x000150, "Member 'FUserGrandPrixData::SpawnLevelDownUIFlags' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, OpenSuperSonicSpeed) == 0x0001A0, "Member 'FUserGrandPrixData::OpenSuperSonicSpeed' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, OpenMirror) == 0x0001A1, "Member 'FUserGrandPrixData::OpenMirror' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, PlayedAnotherStageIds) == 0x0001A8, "Member 'FUserGrandPrixData::PlayedAnotherStageIds' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, ClearedEndingIds) == 0x0001B8, "Member 'FUserGrandPrixData::ClearedEndingIds' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, GrandPrixSelectTimeTrialLinkFirst) == 0x0001C8, "Member 'FUserGrandPrixData::GrandPrixSelectTimeTrialLinkFirst' has a wrong offset!");
static_assert(offsetof(FUserGrandPrixData, IsWinBeforeNonFixedGrandPrix) == 0x0001C9, "Member 'FUserGrandPrixData::IsWinBeforeNonFixedGrandPrix' has a wrong offset!");

// ScriptStruct UnionSystem.LobbyOnlineSettings
// 0x0030 (0x0030 - 0x0000)
struct FLobbyOnlineSettings final
{
public:
	bool                                          bAllowCrossplay;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Platform;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RomVersion;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasterDataVersionSum;                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyOnlineSettings) == 0x000008, "Wrong alignment on FLobbyOnlineSettings");
static_assert(sizeof(FLobbyOnlineSettings) == 0x000030, "Wrong size on FLobbyOnlineSettings");
static_assert(offsetof(FLobbyOnlineSettings, bAllowCrossplay) == 0x000000, "Member 'FLobbyOnlineSettings::bAllowCrossplay' has a wrong offset!");
static_assert(offsetof(FLobbyOnlineSettings, Platform) == 0x000008, "Member 'FLobbyOnlineSettings::Platform' has a wrong offset!");
static_assert(offsetof(FLobbyOnlineSettings, RomVersion) == 0x000018, "Member 'FLobbyOnlineSettings::RomVersion' has a wrong offset!");
static_assert(offsetof(FLobbyOnlineSettings, MasterDataVersionSum) == 0x000028, "Member 'FLobbyOnlineSettings::MasterDataVersionSum' has a wrong offset!");

// ScriptStruct UnionSystem.RankMatchFriendRankingCache
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FRankMatchFriendRankingCache final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankMatchFriendRankingCache) == 0x000008, "Wrong alignment on FRankMatchFriendRankingCache");
static_assert(sizeof(FRankMatchFriendRankingCache) == 0x000018, "Wrong size on FRankMatchFriendRankingCache");

// ScriptStruct UnionSystem.CRM_RadjDataSteerDownOff
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataSteerDownOff final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataSteerDownOff) == 0x000008, "Wrong alignment on FCRM_RadjDataSteerDownOff");
static_assert(sizeof(FCRM_RadjDataSteerDownOff) == 0x000038, "Wrong size on FCRM_RadjDataSteerDownOff");
static_assert(offsetof(FCRM_RadjDataSteerDownOff, action_type) == 0x000000, "Member 'FCRM_RadjDataSteerDownOff::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerDownOff, key1) == 0x000010, "Member 'FCRM_RadjDataSteerDownOff::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerDownOff, key2) == 0x000018, "Member 'FCRM_RadjDataSteerDownOff::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerDownOff, key3) == 0x000028, "Member 'FCRM_RadjDataSteerDownOff::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataSteerLeftOff
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataSteerLeftOff final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataSteerLeftOff) == 0x000008, "Wrong alignment on FCRM_RadjDataSteerLeftOff");
static_assert(sizeof(FCRM_RadjDataSteerLeftOff) == 0x000038, "Wrong size on FCRM_RadjDataSteerLeftOff");
static_assert(offsetof(FCRM_RadjDataSteerLeftOff, action_type) == 0x000000, "Member 'FCRM_RadjDataSteerLeftOff::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerLeftOff, key1) == 0x000010, "Member 'FCRM_RadjDataSteerLeftOff::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerLeftOff, key2) == 0x000018, "Member 'FCRM_RadjDataSteerLeftOff::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerLeftOff, key3) == 0x000028, "Member 'FCRM_RadjDataSteerLeftOff::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_GameLogin
// 0x0020 (0x0020 - 0x0000)
struct FCRM_GameLogin final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_GameLogin) == 0x000008, "Wrong alignment on FCRM_GameLogin");
static_assert(sizeof(FCRM_GameLogin) == 0x000020, "Wrong size on FCRM_GameLogin");
static_assert(offsetof(FCRM_GameLogin, action_type) == 0x000000, "Member 'FCRM_GameLogin::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_GameLogin, key1) == 0x000010, "Member 'FCRM_GameLogin::key1' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogOption
// 0x0020 (0x0020 - 0x0000)
struct FPlayLogOption final
{
public:
	int32                                         AssistNumHandle;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AssistNumAccelerator;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AssistNumAirTrick;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AssistNumGyro;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AssistNumOperation[0x4];                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogOption) == 0x000004, "Wrong alignment on FPlayLogOption");
static_assert(sizeof(FPlayLogOption) == 0x000020, "Wrong size on FPlayLogOption");
static_assert(offsetof(FPlayLogOption, AssistNumHandle) == 0x000000, "Member 'FPlayLogOption::AssistNumHandle' has a wrong offset!");
static_assert(offsetof(FPlayLogOption, AssistNumAccelerator) == 0x000004, "Member 'FPlayLogOption::AssistNumAccelerator' has a wrong offset!");
static_assert(offsetof(FPlayLogOption, AssistNumAirTrick) == 0x000008, "Member 'FPlayLogOption::AssistNumAirTrick' has a wrong offset!");
static_assert(offsetof(FPlayLogOption, AssistNumGyro) == 0x00000C, "Member 'FPlayLogOption::AssistNumGyro' has a wrong offset!");
static_assert(offsetof(FPlayLogOption, AssistNumOperation) == 0x000010, "Member 'FPlayLogOption::AssistNumOperation' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameCondition
// 0x0040 (0x0040 - 0x0000)
struct FPlayLogSaveGameCondition final
{
public:
	class FString                                 PlayTrialTimeStamp;                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FriendNum;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LoginDay;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Revision;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPlayLogOption                         Option;                                            // 0x001C(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayLogSaveGameCondition) == 0x000008, "Wrong alignment on FPlayLogSaveGameCondition");
static_assert(sizeof(FPlayLogSaveGameCondition) == 0x000040, "Wrong size on FPlayLogSaveGameCondition");
static_assert(offsetof(FPlayLogSaveGameCondition, PlayTrialTimeStamp) == 0x000000, "Member 'FPlayLogSaveGameCondition::PlayTrialTimeStamp' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameCondition, FriendNum) == 0x000010, "Member 'FPlayLogSaveGameCondition::FriendNum' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameCondition, LoginDay) == 0x000014, "Member 'FPlayLogSaveGameCondition::LoginDay' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameCondition, Revision) == 0x000018, "Member 'FPlayLogSaveGameCondition::Revision' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameCondition, Option) == 0x00001C, "Member 'FPlayLogSaveGameCondition::Option' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_Sequence
// 0x0020 (0x0020 - 0x0000)
struct FCRM_Sequence final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_Sequence) == 0x000008, "Wrong alignment on FCRM_Sequence");
static_assert(sizeof(FCRM_Sequence) == 0x000020, "Wrong size on FCRM_Sequence");
static_assert(offsetof(FCRM_Sequence, action_type) == 0x000000, "Member 'FCRM_Sequence::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_Sequence, key1) == 0x000010, "Member 'FCRM_Sequence::key1' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_SubMode
// 0x0020 (0x0020 - 0x0000)
struct FCRM_SubMode final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key2;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key4;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_SubMode) == 0x000008, "Wrong alignment on FCRM_SubMode");
static_assert(sizeof(FCRM_SubMode) == 0x000020, "Wrong size on FCRM_SubMode");
static_assert(offsetof(FCRM_SubMode, action_type) == 0x000000, "Member 'FCRM_SubMode::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_SubMode, key1) == 0x000010, "Member 'FCRM_SubMode::key1' has a wrong offset!");
static_assert(offsetof(FCRM_SubMode, key2) == 0x000014, "Member 'FCRM_SubMode::key2' has a wrong offset!");
static_assert(offsetof(FCRM_SubMode, key3) == 0x000018, "Member 'FCRM_SubMode::key3' has a wrong offset!");
static_assert(offsetof(FCRM_SubMode, key4) == 0x00001C, "Member 'FCRM_SubMode::key4' has a wrong offset!");

// ScriptStruct UnionSystem.HealthCheckRequest
// 0x0001 (0x0001 - 0x0000)
struct FHealthCheckRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHealthCheckRequest) == 0x000001, "Wrong alignment on FHealthCheckRequest");
static_assert(sizeof(FHealthCheckRequest) == 0x000001, "Wrong size on FHealthCheckRequest");

// ScriptStruct UnionSystem.GhostUploadResultInfo
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FGhostUploadResultInfo final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGhostUploadResultInfo) == 0x000004, "Wrong alignment on FGhostUploadResultInfo");
static_assert(sizeof(FGhostUploadResultInfo) == 0x000014, "Wrong size on FGhostUploadResultInfo");

// ScriptStruct UnionSystem.MatchmakingDescribeResponse_RankMatchRate
// 0x0018 (0x0018 - 0x0000)
struct FMatchmakingDescribeResponse_RankMatchRate final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakingDescribeResponse_RankMatchRate) == 0x000008, "Wrong alignment on FMatchmakingDescribeResponse_RankMatchRate");
static_assert(sizeof(FMatchmakingDescribeResponse_RankMatchRate) == 0x000018, "Wrong size on FMatchmakingDescribeResponse_RankMatchRate");
static_assert(offsetof(FMatchmakingDescribeResponse_RankMatchRate, PlayerId) == 0x000000, "Member 'FMatchmakingDescribeResponse_RankMatchRate::PlayerId' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse_RankMatchRate, Rate) == 0x000010, "Member 'FMatchmakingDescribeResponse_RankMatchRate::Rate' has a wrong offset!");

// ScriptStruct UnionSystem.OptionInternationalization
// 0x0003 (0x0003 - 0x0000)
struct FOptionInternationalization final
{
public:
	uint8                                         TextLang;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VoiceLang;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CaptionLang;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionInternationalization) == 0x000001, "Wrong alignment on FOptionInternationalization");
static_assert(sizeof(FOptionInternationalization) == 0x000003, "Wrong size on FOptionInternationalization");
static_assert(offsetof(FOptionInternationalization, TextLang) == 0x000000, "Member 'FOptionInternationalization::TextLang' has a wrong offset!");
static_assert(offsetof(FOptionInternationalization, VoiceLang) == 0x000001, "Member 'FOptionInternationalization::VoiceLang' has a wrong offset!");
static_assert(offsetof(FOptionInternationalization, CaptionLang) == 0x000002, "Member 'FOptionInternationalization::CaptionLang' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataSteerUpOff
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataSteerUpOff final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataSteerUpOff) == 0x000008, "Wrong alignment on FCRM_RadjDataSteerUpOff");
static_assert(sizeof(FCRM_RadjDataSteerUpOff) == 0x000038, "Wrong size on FCRM_RadjDataSteerUpOff");
static_assert(offsetof(FCRM_RadjDataSteerUpOff, action_type) == 0x000000, "Member 'FCRM_RadjDataSteerUpOff::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerUpOff, key1) == 0x000010, "Member 'FCRM_RadjDataSteerUpOff::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerUpOff, key2) == 0x000018, "Member 'FCRM_RadjDataSteerUpOff::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerUpOff, key3) == 0x000028, "Member 'FCRM_RadjDataSteerUpOff::key3' has a wrong offset!");

// ScriptStruct UnionSystem.HonorTitleListData
// 0x0050 (0x0050 - 0x0000)
struct FHonorTitleListData final
{
public:
	class FName                                   HonorTitleName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HonorTitleVB;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Rarity;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHonorTitleFontColor                          FontColor;                                         // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              PlateImage;                                        // 0x0020(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDLC;                                             // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCom;                                            // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHonorTitleListData) == 0x000008, "Wrong alignment on FHonorTitleListData");
static_assert(sizeof(FHonorTitleListData) == 0x000050, "Wrong size on FHonorTitleListData");
static_assert(offsetof(FHonorTitleListData, HonorTitleName) == 0x000000, "Member 'FHonorTitleListData::HonorTitleName' has a wrong offset!");
static_assert(offsetof(FHonorTitleListData, HonorTitleVB) == 0x000008, "Member 'FHonorTitleListData::HonorTitleVB' has a wrong offset!");
static_assert(offsetof(FHonorTitleListData, Rarity) == 0x000018, "Member 'FHonorTitleListData::Rarity' has a wrong offset!");
static_assert(offsetof(FHonorTitleListData, FontColor) == 0x00001C, "Member 'FHonorTitleListData::FontColor' has a wrong offset!");
static_assert(offsetof(FHonorTitleListData, PlateImage) == 0x000020, "Member 'FHonorTitleListData::PlateImage' has a wrong offset!");
static_assert(offsetof(FHonorTitleListData, SortID) == 0x000048, "Member 'FHonorTitleListData::SortID' has a wrong offset!");
static_assert(offsetof(FHonorTitleListData, IsDLC) == 0x00004C, "Member 'FHonorTitleListData::IsDLC' has a wrong offset!");
static_assert(offsetof(FHonorTitleListData, UseCom) == 0x00004D, "Member 'FHonorTitleListData::UseCom' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataSteerUpOn
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataSteerUpOn final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataSteerUpOn) == 0x000008, "Wrong alignment on FCRM_RadjDataSteerUpOn");
static_assert(sizeof(FCRM_RadjDataSteerUpOn) == 0x000038, "Wrong size on FCRM_RadjDataSteerUpOn");
static_assert(offsetof(FCRM_RadjDataSteerUpOn, action_type) == 0x000000, "Member 'FCRM_RadjDataSteerUpOn::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerUpOn, key1) == 0x000010, "Member 'FCRM_RadjDataSteerUpOn::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerUpOn, key2) == 0x000018, "Member 'FCRM_RadjDataSteerUpOn::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerUpOn, key3) == 0x000028, "Member 'FCRM_RadjDataSteerUpOn::key3' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingCommonRequest_EntryData
// 0x03C8 (0x03C8 - 0x0000)
struct FMatchmakingCommonRequest_EntryData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romVersionId;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romType;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         masterVersionSum;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommon_MachineData                    MachineData;                                       // 0x0030(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_GadgetData                     GadgetData;                                        // 0x03A0(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_DegreeData                     DegreeData;                                        // 0x03BC(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakingCommonRequest_EntryData) == 0x000008, "Wrong alignment on FMatchmakingCommonRequest_EntryData");
static_assert(sizeof(FMatchmakingCommonRequest_EntryData) == 0x0003C8, "Wrong size on FMatchmakingCommonRequest_EntryData");
static_assert(offsetof(FMatchmakingCommonRequest_EntryData, UserId) == 0x000000, "Member 'FMatchmakingCommonRequest_EntryData::UserId' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonRequest_EntryData, ProductUserId) == 0x000010, "Member 'FMatchmakingCommonRequest_EntryData::ProductUserId' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonRequest_EntryData, romVersionId) == 0x000020, "Member 'FMatchmakingCommonRequest_EntryData::romVersionId' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonRequest_EntryData, romType) == 0x000024, "Member 'FMatchmakingCommonRequest_EntryData::romType' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonRequest_EntryData, masterVersionSum) == 0x000028, "Member 'FMatchmakingCommonRequest_EntryData::masterVersionSum' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonRequest_EntryData, characterId) == 0x00002C, "Member 'FMatchmakingCommonRequest_EntryData::characterId' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonRequest_EntryData, MachineData) == 0x000030, "Member 'FMatchmakingCommonRequest_EntryData::MachineData' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonRequest_EntryData, GadgetData) == 0x0003A0, "Member 'FMatchmakingCommonRequest_EntryData::GadgetData' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonRequest_EntryData, DegreeData) == 0x0003BC, "Member 'FMatchmakingCommonRequest_EntryData::DegreeData' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingSubscribeLegendCompeRequest
// 0x0058 (0x0058 - 0x0000)
struct FMatchmakingSubscribeLegendCompeRequest final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIds;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 matchVersion;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeries;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMatchmakingCommonRequest_EntryData> entryDataList;                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingSubscribeLegendCompeRequest) == 0x000008, "Wrong alignment on FMatchmakingSubscribeLegendCompeRequest");
static_assert(sizeof(FMatchmakingSubscribeLegendCompeRequest) == 0x000058, "Wrong size on FMatchmakingSubscribeLegendCompeRequest");
static_assert(offsetof(FMatchmakingSubscribeLegendCompeRequest, LobbyId) == 0x000000, "Member 'FMatchmakingSubscribeLegendCompeRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeLegendCompeRequest, UserIds) == 0x000010, "Member 'FMatchmakingSubscribeLegendCompeRequest::UserIds' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeLegendCompeRequest, Region) == 0x000020, "Member 'FMatchmakingSubscribeLegendCompeRequest::Region' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeLegendCompeRequest, matchVersion) == 0x000030, "Member 'FMatchmakingSubscribeLegendCompeRequest::matchVersion' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeLegendCompeRequest, IsSeries) == 0x000040, "Member 'FMatchmakingSubscribeLegendCompeRequest::IsSeries' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeLegendCompeRequest, entryDataList) == 0x000048, "Member 'FMatchmakingSubscribeLegendCompeRequest::entryDataList' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_ReleaseTirePartsData
// 0x0018 (0x0018 - 0x0000)
struct FNetMasterData_ReleaseTirePartsData final
{
public:
	int32                                         TirePartsId;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_ReleaseTirePartsData) == 0x000008, "Wrong alignment on FNetMasterData_ReleaseTirePartsData");
static_assert(sizeof(FNetMasterData_ReleaseTirePartsData) == 0x000018, "Wrong size on FNetMasterData_ReleaseTirePartsData");
static_assert(offsetof(FNetMasterData_ReleaseTirePartsData, TirePartsId) == 0x000000, "Member 'FNetMasterData_ReleaseTirePartsData::TirePartsId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_ReleaseTirePartsData, releaseTime) == 0x000008, "Member 'FNetMasterData_ReleaseTirePartsData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingDescribeResponse_MatchPlayerInfo
// 0x0018 (0x0018 - 0x0000)
struct FMatchmakingDescribeResponse_MatchPlayerInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FairPlayPoint;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         fairPlayPointInside;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingDescribeResponse_MatchPlayerInfo) == 0x000008, "Wrong alignment on FMatchmakingDescribeResponse_MatchPlayerInfo");
static_assert(sizeof(FMatchmakingDescribeResponse_MatchPlayerInfo) == 0x000018, "Wrong size on FMatchmakingDescribeResponse_MatchPlayerInfo");
static_assert(offsetof(FMatchmakingDescribeResponse_MatchPlayerInfo, UserId) == 0x000000, "Member 'FMatchmakingDescribeResponse_MatchPlayerInfo::UserId' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse_MatchPlayerInfo, FairPlayPoint) == 0x000010, "Member 'FMatchmakingDescribeResponse_MatchPlayerInfo::FairPlayPoint' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse_MatchPlayerInfo, fairPlayPointInside) == 0x000014, "Member 'FMatchmakingDescribeResponse_MatchPlayerInfo::fairPlayPointInside' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjMachine
// 0x0140 (0x0140 - 0x0000)
struct FCRM_RadjMachine final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         key6;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 key7;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key10;                                             // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key11;                                             // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key12;                                             // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key13;                                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key14;                                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key15;                                             // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key16;                                             // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key17;                                             // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key18;                                             // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key19;                                             // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key20;                                             // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key21;                                             // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjMachine) == 0x000008, "Wrong alignment on FCRM_RadjMachine");
static_assert(sizeof(FCRM_RadjMachine) == 0x000140, "Wrong size on FCRM_RadjMachine");
static_assert(offsetof(FCRM_RadjMachine, action_type) == 0x000000, "Member 'FCRM_RadjMachine::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key1) == 0x000010, "Member 'FCRM_RadjMachine::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key2) == 0x000018, "Member 'FCRM_RadjMachine::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key3) == 0x000028, "Member 'FCRM_RadjMachine::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key5) == 0x000038, "Member 'FCRM_RadjMachine::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key6) == 0x000048, "Member 'FCRM_RadjMachine::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key7) == 0x000050, "Member 'FCRM_RadjMachine::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key8) == 0x000060, "Member 'FCRM_RadjMachine::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key9) == 0x000070, "Member 'FCRM_RadjMachine::key9' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key10) == 0x000080, "Member 'FCRM_RadjMachine::key10' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key11) == 0x000090, "Member 'FCRM_RadjMachine::key11' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key12) == 0x0000A0, "Member 'FCRM_RadjMachine::key12' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key13) == 0x0000B0, "Member 'FCRM_RadjMachine::key13' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key14) == 0x0000C0, "Member 'FCRM_RadjMachine::key14' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key15) == 0x0000D0, "Member 'FCRM_RadjMachine::key15' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key16) == 0x0000E0, "Member 'FCRM_RadjMachine::key16' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key17) == 0x0000F0, "Member 'FCRM_RadjMachine::key17' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key18) == 0x000100, "Member 'FCRM_RadjMachine::key18' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key19) == 0x000110, "Member 'FCRM_RadjMachine::key19' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key20) == 0x000120, "Member 'FCRM_RadjMachine::key20' has a wrong offset!");
static_assert(offsetof(FCRM_RadjMachine, key21) == 0x000130, "Member 'FCRM_RadjMachine::key21' has a wrong offset!");

// ScriptStruct UnionSystem.UserGadgetData
// 0x0008 (0x0008 - 0x0000)
struct FUserGadgetData final
{
public:
	EGadgetId                                     gadgetId;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGadgetData) == 0x000004, "Wrong alignment on FUserGadgetData");
static_assert(sizeof(FUserGadgetData) == 0x000008, "Wrong size on FUserGadgetData");
static_assert(offsetof(FUserGadgetData, gadgetId) == 0x000000, "Member 'FUserGadgetData::gadgetId' has a wrong offset!");
static_assert(offsetof(FUserGadgetData, SlotIndex) == 0x000004, "Member 'FUserGadgetData::SlotIndex' has a wrong offset!");

// ScriptStruct UnionSystem.UserGadgetPresetData
// 0x0010 (0x0010 - 0x0000)
struct FUserGadgetPresetData final
{
public:
	TArray<struct FUserGadgetData>                GadgetDataList;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGadgetPresetData) == 0x000008, "Wrong alignment on FUserGadgetPresetData");
static_assert(sizeof(FUserGadgetPresetData) == 0x000010, "Wrong size on FUserGadgetPresetData");
static_assert(offsetof(FUserGadgetPresetData, GadgetDataList) == 0x000000, "Member 'FUserGadgetPresetData::GadgetDataList' has a wrong offset!");

// ScriptStruct UnionSystem.GroupRaceRuleData
// 0x0048 (0x0050 - 0x0008)
struct FGroupRaceRuleData final : public FTableRowBase
{
public:
	EGroupRaceRule                                GroupRaceRule;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RuleName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bOverrideItemAppearanceRule;                       // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingItemAppearanceRule                ItemAppearanceRule;                                // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideIrregular;                                // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIrregularEventId                             FixedIrregularId;                                  // 0x0023(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupRaceItemLotteryCorrectionType           ItemLotteryCorrectionType;                         // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUserGadgetPresetData                  FixedGadgetPreset;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RentalGadgetName;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EEnergyAddBehaviorType                        EnergyAddBehaviorType;                             // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupBonusType                               GroupBonusType;                                    // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroupRaceRuleData) == 0x000008, "Wrong alignment on FGroupRaceRuleData");
static_assert(sizeof(FGroupRaceRuleData) == 0x000050, "Wrong size on FGroupRaceRuleData");
static_assert(offsetof(FGroupRaceRuleData, GroupRaceRule) == 0x000008, "Member 'FGroupRaceRuleData::GroupRaceRule' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleData, RuleName) == 0x000010, "Member 'FGroupRaceRuleData::RuleName' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleData, bOverrideItemAppearanceRule) == 0x000020, "Member 'FGroupRaceRuleData::bOverrideItemAppearanceRule' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleData, ItemAppearanceRule) == 0x000021, "Member 'FGroupRaceRuleData::ItemAppearanceRule' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleData, bOverrideIrregular) == 0x000022, "Member 'FGroupRaceRuleData::bOverrideIrregular' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleData, FixedIrregularId) == 0x000023, "Member 'FGroupRaceRuleData::FixedIrregularId' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleData, ItemLotteryCorrectionType) == 0x000024, "Member 'FGroupRaceRuleData::ItemLotteryCorrectionType' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleData, FixedGadgetPreset) == 0x000028, "Member 'FGroupRaceRuleData::FixedGadgetPreset' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleData, RentalGadgetName) == 0x000038, "Member 'FGroupRaceRuleData::RentalGadgetName' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleData, EnergyAddBehaviorType) == 0x000048, "Member 'FGroupRaceRuleData::EnergyAddBehaviorType' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleData, GroupBonusType) == 0x000049, "Member 'FGroupRaceRuleData::GroupBonusType' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingCommonResponse_ValetComPlayer
// 0x0028 (0x0028 - 0x0000)
struct FMatchmakingCommonResponse_ValetComPlayer final
{
public:
	class FString                                 comPlayerId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetPlayerId;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         adjustRate;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingCommonResponse_ValetComPlayer) == 0x000008, "Wrong alignment on FMatchmakingCommonResponse_ValetComPlayer");
static_assert(sizeof(FMatchmakingCommonResponse_ValetComPlayer) == 0x000028, "Wrong size on FMatchmakingCommonResponse_ValetComPlayer");
static_assert(offsetof(FMatchmakingCommonResponse_ValetComPlayer, comPlayerId) == 0x000000, "Member 'FMatchmakingCommonResponse_ValetComPlayer::comPlayerId' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_ValetComPlayer, targetPlayerId) == 0x000010, "Member 'FMatchmakingCommonResponse_ValetComPlayer::targetPlayerId' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_ValetComPlayer, Rate) == 0x000020, "Member 'FMatchmakingCommonResponse_ValetComPlayer::Rate' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_ValetComPlayer, adjustRate) == 0x000024, "Member 'FMatchmakingCommonResponse_ValetComPlayer::adjustRate' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingCommonResponse_Subscribe
// 0x0088 (0x0088 - 0x0000)
struct FMatchmakingCommonResponse_Subscribe final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ticketId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enableCrossPlatform;                               // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeries;                                          // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 matchVersion;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         divisionId;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         UserIds;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMatchmakingCommonResponse_ValetComPlayer> valetComPlayers;                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 matchPlatform;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaceType;                                          // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakingCommonResponse_Subscribe) == 0x000008, "Wrong alignment on FMatchmakingCommonResponse_Subscribe");
static_assert(sizeof(FMatchmakingCommonResponse_Subscribe) == 0x000088, "Wrong size on FMatchmakingCommonResponse_Subscribe");
static_assert(offsetof(FMatchmakingCommonResponse_Subscribe, LobbyId) == 0x000000, "Member 'FMatchmakingCommonResponse_Subscribe::LobbyId' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_Subscribe, ticketId) == 0x000010, "Member 'FMatchmakingCommonResponse_Subscribe::ticketId' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_Subscribe, enableCrossPlatform) == 0x000020, "Member 'FMatchmakingCommonResponse_Subscribe::enableCrossPlatform' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_Subscribe, IsSeries) == 0x000021, "Member 'FMatchmakingCommonResponse_Subscribe::IsSeries' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_Subscribe, Region) == 0x000028, "Member 'FMatchmakingCommonResponse_Subscribe::Region' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_Subscribe, matchVersion) == 0x000038, "Member 'FMatchmakingCommonResponse_Subscribe::matchVersion' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_Subscribe, divisionId) == 0x000048, "Member 'FMatchmakingCommonResponse_Subscribe::divisionId' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_Subscribe, UserIds) == 0x000050, "Member 'FMatchmakingCommonResponse_Subscribe::UserIds' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_Subscribe, valetComPlayers) == 0x000060, "Member 'FMatchmakingCommonResponse_Subscribe::valetComPlayers' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_Subscribe, matchPlatform) == 0x000070, "Member 'FMatchmakingCommonResponse_Subscribe::matchPlatform' has a wrong offset!");
static_assert(offsetof(FMatchmakingCommonResponse_Subscribe, RaceType) == 0x000080, "Member 'FMatchmakingCommonResponse_Subscribe::RaceType' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingSubscribeRankMatchResponse
// 0x00A8 (0x00A8 - 0x0000)
struct FMatchmakingSubscribeRankMatchResponse final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ticketId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchmakingCommonResponse_Subscribe   subscribe;                                         // 0x0020(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingSubscribeRankMatchResponse) == 0x000008, "Wrong alignment on FMatchmakingSubscribeRankMatchResponse");
static_assert(sizeof(FMatchmakingSubscribeRankMatchResponse) == 0x0000A8, "Wrong size on FMatchmakingSubscribeRankMatchResponse");
static_assert(offsetof(FMatchmakingSubscribeRankMatchResponse, LobbyId) == 0x000000, "Member 'FMatchmakingSubscribeRankMatchResponse::LobbyId' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeRankMatchResponse, ticketId) == 0x000010, "Member 'FMatchmakingSubscribeRankMatchResponse::ticketId' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeRankMatchResponse, subscribe) == 0x000020, "Member 'FMatchmakingSubscribeRankMatchResponse::subscribe' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingDescribeRequest
// 0x0010 (0x0010 - 0x0000)
struct FMatchmakingDescribeRequest final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingDescribeRequest) == 0x000008, "Wrong alignment on FMatchmakingDescribeRequest");
static_assert(sizeof(FMatchmakingDescribeRequest) == 0x000010, "Wrong size on FMatchmakingDescribeRequest");
static_assert(offsetof(FMatchmakingDescribeRequest, LobbyId) == 0x000000, "Member 'FMatchmakingDescribeRequest::LobbyId' has a wrong offset!");

// ScriptStruct UnionSystem.DebugMatchmakingCommonRequest_EntryData
// 0x03C8 (0x03C8 - 0x0000)
struct FDebugMatchmakingCommonRequest_EntryData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romVersionId;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romType;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         masterVersionSum;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommon_MachineData                    MachineData;                                       // 0x0030(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_GadgetData                     GadgetData;                                        // 0x03A0(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_DegreeData                     DegreeData;                                        // 0x03BC(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugMatchmakingCommonRequest_EntryData) == 0x000008, "Wrong alignment on FDebugMatchmakingCommonRequest_EntryData");
static_assert(sizeof(FDebugMatchmakingCommonRequest_EntryData) == 0x0003C8, "Wrong size on FDebugMatchmakingCommonRequest_EntryData");
static_assert(offsetof(FDebugMatchmakingCommonRequest_EntryData, UserId) == 0x000000, "Member 'FDebugMatchmakingCommonRequest_EntryData::UserId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonRequest_EntryData, ProductUserId) == 0x000010, "Member 'FDebugMatchmakingCommonRequest_EntryData::ProductUserId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonRequest_EntryData, romVersionId) == 0x000020, "Member 'FDebugMatchmakingCommonRequest_EntryData::romVersionId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonRequest_EntryData, romType) == 0x000024, "Member 'FDebugMatchmakingCommonRequest_EntryData::romType' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonRequest_EntryData, masterVersionSum) == 0x000028, "Member 'FDebugMatchmakingCommonRequest_EntryData::masterVersionSum' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonRequest_EntryData, characterId) == 0x00002C, "Member 'FDebugMatchmakingCommonRequest_EntryData::characterId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonRequest_EntryData, MachineData) == 0x000030, "Member 'FDebugMatchmakingCommonRequest_EntryData::MachineData' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonRequest_EntryData, GadgetData) == 0x0003A0, "Member 'FDebugMatchmakingCommonRequest_EntryData::GadgetData' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonRequest_EntryData, DegreeData) == 0x0003BC, "Member 'FDebugMatchmakingCommonRequest_EntryData::DegreeData' has a wrong offset!");

// ScriptStruct UnionSystem.DebugMatchmakingSubscribeFestaRequest
// 0x0060 (0x0060 - 0x0000)
struct FDebugMatchmakingSubscribeFestaRequest final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIds;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         divisionId;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ruleNumber;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 matchVersion;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeries;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDebugMatchmakingCommonRequest_EntryData> entryDataList;                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugMatchmakingSubscribeFestaRequest) == 0x000008, "Wrong alignment on FDebugMatchmakingSubscribeFestaRequest");
static_assert(sizeof(FDebugMatchmakingSubscribeFestaRequest) == 0x000060, "Wrong size on FDebugMatchmakingSubscribeFestaRequest");
static_assert(offsetof(FDebugMatchmakingSubscribeFestaRequest, LobbyId) == 0x000000, "Member 'FDebugMatchmakingSubscribeFestaRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeFestaRequest, UserIds) == 0x000010, "Member 'FDebugMatchmakingSubscribeFestaRequest::UserIds' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeFestaRequest, divisionId) == 0x000020, "Member 'FDebugMatchmakingSubscribeFestaRequest::divisionId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeFestaRequest, ruleNumber) == 0x000024, "Member 'FDebugMatchmakingSubscribeFestaRequest::ruleNumber' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeFestaRequest, Region) == 0x000028, "Member 'FDebugMatchmakingSubscribeFestaRequest::Region' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeFestaRequest, matchVersion) == 0x000038, "Member 'FDebugMatchmakingSubscribeFestaRequest::matchVersion' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeFestaRequest, IsSeries) == 0x000048, "Member 'FDebugMatchmakingSubscribeFestaRequest::IsSeries' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeFestaRequest, entryDataList) == 0x000050, "Member 'FDebugMatchmakingSubscribeFestaRequest::entryDataList' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_Grandprix
// 0x00D0 (0x00D0 - 0x0000)
struct FCRM_Grandprix final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key2;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         key9;                                              // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key10;                                             // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key11;                                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key12;                                             // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key13;                                             // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         key14;                                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 key15;                                             // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key16;                                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 key17;                                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_Grandprix) == 0x000008, "Wrong alignment on FCRM_Grandprix");
static_assert(sizeof(FCRM_Grandprix) == 0x0000D0, "Wrong size on FCRM_Grandprix");
static_assert(offsetof(FCRM_Grandprix, action_type) == 0x000000, "Member 'FCRM_Grandprix::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key1) == 0x000010, "Member 'FCRM_Grandprix::key1' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key2) == 0x000020, "Member 'FCRM_Grandprix::key2' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key3) == 0x000024, "Member 'FCRM_Grandprix::key3' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key4) == 0x000028, "Member 'FCRM_Grandprix::key4' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key5) == 0x000038, "Member 'FCRM_Grandprix::key5' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key6) == 0x000048, "Member 'FCRM_Grandprix::key6' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key7) == 0x000058, "Member 'FCRM_Grandprix::key7' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key8) == 0x000068, "Member 'FCRM_Grandprix::key8' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key9) == 0x000078, "Member 'FCRM_Grandprix::key9' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key10) == 0x00007C, "Member 'FCRM_Grandprix::key10' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key11) == 0x000080, "Member 'FCRM_Grandprix::key11' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key12) == 0x000084, "Member 'FCRM_Grandprix::key12' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key13) == 0x000088, "Member 'FCRM_Grandprix::key13' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key14) == 0x000098, "Member 'FCRM_Grandprix::key14' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key15) == 0x0000A0, "Member 'FCRM_Grandprix::key15' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key16) == 0x0000B0, "Member 'FCRM_Grandprix::key16' has a wrong offset!");
static_assert(offsetof(FCRM_Grandprix, key17) == 0x0000C0, "Member 'FCRM_Grandprix::key17' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_LobbyBasic
// 0x0030 (0x0030 - 0x0000)
struct FCRM_LobbyBasic final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key4;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_LobbyBasic) == 0x000008, "Wrong alignment on FCRM_LobbyBasic");
static_assert(sizeof(FCRM_LobbyBasic) == 0x000030, "Wrong size on FCRM_LobbyBasic");
static_assert(offsetof(FCRM_LobbyBasic, action_type) == 0x000000, "Member 'FCRM_LobbyBasic::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyBasic, key1) == 0x000010, "Member 'FCRM_LobbyBasic::key1' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyBasic, key2) == 0x000018, "Member 'FCRM_LobbyBasic::key2' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyBasic, key3) == 0x000028, "Member 'FCRM_LobbyBasic::key3' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyBasic, key4) == 0x00002C, "Member 'FCRM_LobbyBasic::key4' has a wrong offset!");

// ScriptStruct UnionSystem.DebugChangeFairPlayPointResponse
// 0x0004 (0x0004 - 0x0000)
struct FDebugChangeFairPlayPointResponse final
{
public:
	int32                                         FairPlayPoint;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugChangeFairPlayPointResponse) == 0x000004, "Wrong alignment on FDebugChangeFairPlayPointResponse");
static_assert(sizeof(FDebugChangeFairPlayPointResponse) == 0x000004, "Wrong size on FDebugChangeFairPlayPointResponse");
static_assert(offsetof(FDebugChangeFairPlayPointResponse, FairPlayPoint) == 0x000000, "Member 'FDebugChangeFairPlayPointResponse::FairPlayPoint' has a wrong offset!");

// ScriptStruct UnionSystem.DebugChangeRankMatchRateResponse
// 0x0004 (0x0004 - 0x0000)
struct FDebugChangeRankMatchRateResponse final
{
public:
	int32                                         Rate;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugChangeRankMatchRateResponse) == 0x000004, "Wrong alignment on FDebugChangeRankMatchRateResponse");
static_assert(sizeof(FDebugChangeRankMatchRateResponse) == 0x000004, "Wrong size on FDebugChangeRankMatchRateResponse");
static_assert(offsetof(FDebugChangeRankMatchRateResponse, Rate) == 0x000000, "Member 'FDebugChangeRankMatchRateResponse::Rate' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_MatchingRaceStart
// 0x0040 (0x0040 - 0x0000)
struct FCRM_MatchingRaceStart final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key4;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key5;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_MatchingRaceStart) == 0x000008, "Wrong alignment on FCRM_MatchingRaceStart");
static_assert(sizeof(FCRM_MatchingRaceStart) == 0x000040, "Wrong size on FCRM_MatchingRaceStart");
static_assert(offsetof(FCRM_MatchingRaceStart, action_type) == 0x000000, "Member 'FCRM_MatchingRaceStart::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRaceStart, key1) == 0x000010, "Member 'FCRM_MatchingRaceStart::key1' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRaceStart, key2) == 0x000018, "Member 'FCRM_MatchingRaceStart::key2' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRaceStart, key3) == 0x000028, "Member 'FCRM_MatchingRaceStart::key3' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRaceStart, key4) == 0x00002C, "Member 'FCRM_MatchingRaceStart::key4' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRaceStart, key5) == 0x000030, "Member 'FCRM_MatchingRaceStart::key5' has a wrong offset!");

// ScriptStruct UnionSystem.FairPointAddFairPointResponse
// 0x0001 (0x0001 - 0x0000)
struct FFairPointAddFairPointResponse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFairPointAddFairPointResponse) == 0x000001, "Wrong alignment on FFairPointAddFairPointResponse");
static_assert(sizeof(FFairPointAddFairPointResponse) == 0x000001, "Wrong size on FFairPointAddFairPointResponse");

// ScriptStruct UnionSystem.MatchmakingStopResponse
// 0x0001 (0x0001 - 0x0000)
struct FMatchmakingStopResponse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakingStopResponse) == 0x000001, "Wrong alignment on FMatchmakingStopResponse");
static_assert(sizeof(FMatchmakingStopResponse) == 0x000001, "Wrong size on FMatchmakingStopResponse");

// ScriptStruct UnionSystem.RankingDataUserNoteGadget
// 0x001C (0x001C - 0x0000)
struct FRankingDataUserNoteGadget final
{
public:
	int32                                         plateId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId1;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId2;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId3;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId4;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId5;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gadgetId6;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataUserNoteGadget) == 0x000004, "Wrong alignment on FRankingDataUserNoteGadget");
static_assert(sizeof(FRankingDataUserNoteGadget) == 0x00001C, "Wrong size on FRankingDataUserNoteGadget");
static_assert(offsetof(FRankingDataUserNoteGadget, plateId) == 0x000000, "Member 'FRankingDataUserNoteGadget::plateId' has a wrong offset!");
static_assert(offsetof(FRankingDataUserNoteGadget, gadgetId1) == 0x000004, "Member 'FRankingDataUserNoteGadget::gadgetId1' has a wrong offset!");
static_assert(offsetof(FRankingDataUserNoteGadget, gadgetId2) == 0x000008, "Member 'FRankingDataUserNoteGadget::gadgetId2' has a wrong offset!");
static_assert(offsetof(FRankingDataUserNoteGadget, gadgetId3) == 0x00000C, "Member 'FRankingDataUserNoteGadget::gadgetId3' has a wrong offset!");
static_assert(offsetof(FRankingDataUserNoteGadget, gadgetId4) == 0x000010, "Member 'FRankingDataUserNoteGadget::gadgetId4' has a wrong offset!");
static_assert(offsetof(FRankingDataUserNoteGadget, gadgetId5) == 0x000014, "Member 'FRankingDataUserNoteGadget::gadgetId5' has a wrong offset!");
static_assert(offsetof(FRankingDataUserNoteGadget, gadgetId6) == 0x000018, "Member 'FRankingDataUserNoteGadget::gadgetId6' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataFestaPointUserNote
// 0x0088 (0x0088 - 0x0000)
struct FRankingDataFestaPointUserNote final
{
public:
	int32                                         playerIconId;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         playerBgColor;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 playerName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         degreeId;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         plateId;                                           // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRankingDataUserNoteCarParts           carParts;                                          // 0x0044(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRankingDataUserNoteGadget             gadget;                                            // 0x0050(0x001C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 entryTime;                                         // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataFestaPointUserNote) == 0x000008, "Wrong alignment on FRankingDataFestaPointUserNote");
static_assert(sizeof(FRankingDataFestaPointUserNote) == 0x000088, "Wrong size on FRankingDataFestaPointUserNote");
static_assert(offsetof(FRankingDataFestaPointUserNote, playerIconId) == 0x000000, "Member 'FRankingDataFestaPointUserNote::playerIconId' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPointUserNote, playerBgColor) == 0x000004, "Member 'FRankingDataFestaPointUserNote::playerBgColor' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPointUserNote, playerName) == 0x000008, "Member 'FRankingDataFestaPointUserNote::playerName' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPointUserNote, Platform) == 0x000018, "Member 'FRankingDataFestaPointUserNote::Platform' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPointUserNote, PlatformUserId) == 0x000028, "Member 'FRankingDataFestaPointUserNote::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPointUserNote, characterId) == 0x000038, "Member 'FRankingDataFestaPointUserNote::characterId' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPointUserNote, degreeId) == 0x00003C, "Member 'FRankingDataFestaPointUserNote::degreeId' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPointUserNote, plateId) == 0x000040, "Member 'FRankingDataFestaPointUserNote::plateId' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPointUserNote, carParts) == 0x000044, "Member 'FRankingDataFestaPointUserNote::carParts' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPointUserNote, gadget) == 0x000050, "Member 'FRankingDataFestaPointUserNote::gadget' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPointUserNote, Point) == 0x00006C, "Member 'FRankingDataFestaPointUserNote::Point' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPointUserNote, Rate) == 0x000070, "Member 'FRankingDataFestaPointUserNote::Rate' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPointUserNote, entryTime) == 0x000078, "Member 'FRankingDataFestaPointUserNote::entryTime' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataFestaPoint
// 0x00B8 (0x00B8 - 0x0000)
struct FRankingDataFestaPoint final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 score;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 order;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRankingDataFestaPointUserNote         userNote;                                          // 0x0030(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataFestaPoint) == 0x000008, "Wrong alignment on FRankingDataFestaPoint");
static_assert(sizeof(FRankingDataFestaPoint) == 0x0000B8, "Wrong size on FRankingDataFestaPoint");
static_assert(offsetof(FRankingDataFestaPoint, UserId) == 0x000000, "Member 'FRankingDataFestaPoint::UserId' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPoint, score) == 0x000010, "Member 'FRankingDataFestaPoint::score' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPoint, order) == 0x000020, "Member 'FRankingDataFestaPoint::order' has a wrong offset!");
static_assert(offsetof(FRankingDataFestaPoint, userNote) == 0x000030, "Member 'FRankingDataFestaPoint::userNote' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataFestaPointList
// 0x0010 (0x0010 - 0x0000)
struct FRankingDataFestaPointList
{
public:
	TArray<struct FRankingDataFestaPoint>         RankingData;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataFestaPointList) == 0x000008, "Wrong alignment on FRankingDataFestaPointList");
static_assert(sizeof(FRankingDataFestaPointList) == 0x000010, "Wrong size on FRankingDataFestaPointList");
static_assert(offsetof(FRankingDataFestaPointList, RankingData) == 0x000000, "Member 'FRankingDataFestaPointList::RankingData' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetRankingFestaPointRequest
// 0x0020 (0x0020 - 0x0000)
struct FRankingGetRankingFestaPointRequest
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         festaId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romVersionId;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romType;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankingGetRankingFestaPointRequest) == 0x000008, "Wrong alignment on FRankingGetRankingFestaPointRequest");
static_assert(sizeof(FRankingGetRankingFestaPointRequest) == 0x000020, "Wrong size on FRankingGetRankingFestaPointRequest");
static_assert(offsetof(FRankingGetRankingFestaPointRequest, Platform) == 0x000000, "Member 'FRankingGetRankingFestaPointRequest::Platform' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingFestaPointRequest, festaId) == 0x000010, "Member 'FRankingGetRankingFestaPointRequest::festaId' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingFestaPointRequest, romVersionId) == 0x000014, "Member 'FRankingGetRankingFestaPointRequest::romVersionId' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingFestaPointRequest, romType) == 0x000018, "Member 'FRankingGetRankingFestaPointRequest::romType' has a wrong offset!");

// ScriptStruct UnionSystem.FestaWorldRankingCacheKey
// 0x0000 (0x0020 - 0x0020)
struct FFestaWorldRankingCacheKey final : public FRankingGetRankingFestaPointRequest
{
};
static_assert(alignof(FFestaWorldRankingCacheKey) == 0x000008, "Wrong alignment on FFestaWorldRankingCacheKey");
static_assert(sizeof(FFestaWorldRankingCacheKey) == 0x000020, "Wrong size on FFestaWorldRankingCacheKey");

// ScriptStruct UnionSystem.CRM_EventLegend
// 0x0028 (0x0028 - 0x0000)
struct FCRM_EventLegend final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key2;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRM_EventLegend) == 0x000008, "Wrong alignment on FCRM_EventLegend");
static_assert(sizeof(FCRM_EventLegend) == 0x000028, "Wrong size on FCRM_EventLegend");
static_assert(offsetof(FCRM_EventLegend, action_type) == 0x000000, "Member 'FCRM_EventLegend::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_EventLegend, key1) == 0x000010, "Member 'FCRM_EventLegend::key1' has a wrong offset!");
static_assert(offsetof(FCRM_EventLegend, key2) == 0x000020, "Member 'FCRM_EventLegend::key2' has a wrong offset!");

// ScriptStruct UnionSystem.LegendCompeFriendRankingCacheKey
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FLegendCompeFriendRankingCacheKey final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLegendCompeFriendRankingCacheKey) == 0x000008, "Wrong alignment on FLegendCompeFriendRankingCacheKey");
static_assert(sizeof(FLegendCompeFriendRankingCacheKey) == 0x000018, "Wrong size on FLegendCompeFriendRankingCacheKey");

// ScriptStruct UnionSystem.RankingDataLegendCompeUserNote
// 0x0090 (0x0090 - 0x0000)
struct FRankingDataLegendCompeUserNote final
{
public:
	int32                                         playerIconId;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         playerBgColor;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 playerName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         degreeId;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         plateId;                                           // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRankingDataUserNoteCarParts           carParts;                                          // 0x0044(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRankingDataUserNoteGadget             gadget;                                            // 0x0050(0x001C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 entryTime;                                         // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMask;                                            // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankingDataLegendCompeUserNote) == 0x000008, "Wrong alignment on FRankingDataLegendCompeUserNote");
static_assert(sizeof(FRankingDataLegendCompeUserNote) == 0x000090, "Wrong size on FRankingDataLegendCompeUserNote");
static_assert(offsetof(FRankingDataLegendCompeUserNote, playerIconId) == 0x000000, "Member 'FRankingDataLegendCompeUserNote::playerIconId' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, playerBgColor) == 0x000004, "Member 'FRankingDataLegendCompeUserNote::playerBgColor' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, playerName) == 0x000008, "Member 'FRankingDataLegendCompeUserNote::playerName' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, Platform) == 0x000018, "Member 'FRankingDataLegendCompeUserNote::Platform' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, PlatformUserId) == 0x000028, "Member 'FRankingDataLegendCompeUserNote::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, characterId) == 0x000038, "Member 'FRankingDataLegendCompeUserNote::characterId' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, degreeId) == 0x00003C, "Member 'FRankingDataLegendCompeUserNote::degreeId' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, plateId) == 0x000040, "Member 'FRankingDataLegendCompeUserNote::plateId' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, carParts) == 0x000044, "Member 'FRankingDataLegendCompeUserNote::carParts' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, gadget) == 0x000050, "Member 'FRankingDataLegendCompeUserNote::gadget' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, Point) == 0x00006C, "Member 'FRankingDataLegendCompeUserNote::Point' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, Rate) == 0x000070, "Member 'FRankingDataLegendCompeUserNote::Rate' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, entryTime) == 0x000078, "Member 'FRankingDataLegendCompeUserNote::entryTime' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompeUserNote, isMask) == 0x000088, "Member 'FRankingDataLegendCompeUserNote::isMask' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataLegendCompe
// 0x00C0 (0x00C0 - 0x0000)
struct FRankingDataLegendCompe final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 score;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 order;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRankingDataLegendCompeUserNote        userNote;                                          // 0x0030(0x0090)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataLegendCompe) == 0x000008, "Wrong alignment on FRankingDataLegendCompe");
static_assert(sizeof(FRankingDataLegendCompe) == 0x0000C0, "Wrong size on FRankingDataLegendCompe");
static_assert(offsetof(FRankingDataLegendCompe, UserId) == 0x000000, "Member 'FRankingDataLegendCompe::UserId' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompe, score) == 0x000010, "Member 'FRankingDataLegendCompe::score' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompe, order) == 0x000020, "Member 'FRankingDataLegendCompe::order' has a wrong offset!");
static_assert(offsetof(FRankingDataLegendCompe, userNote) == 0x000030, "Member 'FRankingDataLegendCompe::userNote' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataLegendCompeList
// 0x0010 (0x0010 - 0x0000)
struct FRankingDataLegendCompeList
{
public:
	TArray<struct FRankingDataLegendCompe>        RankingData;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataLegendCompeList) == 0x000008, "Wrong alignment on FRankingDataLegendCompeList");
static_assert(sizeof(FRankingDataLegendCompeList) == 0x000010, "Wrong size on FRankingDataLegendCompeList");
static_assert(offsetof(FRankingDataLegendCompeList, RankingData) == 0x000000, "Member 'FRankingDataLegendCompeList::RankingData' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataShortCutRing
// 0x0078 (0x0078 - 0x0000)
struct FCRM_RadjDataShortCutRing final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataShortCutRing) == 0x000008, "Wrong alignment on FCRM_RadjDataShortCutRing");
static_assert(sizeof(FCRM_RadjDataShortCutRing) == 0x000078, "Wrong size on FCRM_RadjDataShortCutRing");
static_assert(offsetof(FCRM_RadjDataShortCutRing, action_type) == 0x000000, "Member 'FCRM_RadjDataShortCutRing::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortCutRing, key1) == 0x000010, "Member 'FCRM_RadjDataShortCutRing::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortCutRing, key2) == 0x000018, "Member 'FCRM_RadjDataShortCutRing::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortCutRing, key3) == 0x000028, "Member 'FCRM_RadjDataShortCutRing::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortCutRing, key4) == 0x000038, "Member 'FCRM_RadjDataShortCutRing::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortCutRing, key5) == 0x000048, "Member 'FCRM_RadjDataShortCutRing::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortCutRing, key6) == 0x000058, "Member 'FCRM_RadjDataShortCutRing::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataShortCutRing, key7) == 0x000068, "Member 'FCRM_RadjDataShortCutRing::key7' has a wrong offset!");

// ScriptStruct UnionSystem.GhostGetRankingGhostDataRequest
// 0x0028 (0x0028 - 0x0000)
struct FGhostGetRankingGhostDataRequest final
{
public:
	class FString                                 TargetUserId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         courseId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         speedType;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DrivingTime;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGhostGetRankingGhostDataRequest) == 0x000008, "Wrong alignment on FGhostGetRankingGhostDataRequest");
static_assert(sizeof(FGhostGetRankingGhostDataRequest) == 0x000028, "Wrong size on FGhostGetRankingGhostDataRequest");
static_assert(offsetof(FGhostGetRankingGhostDataRequest, TargetUserId) == 0x000000, "Member 'FGhostGetRankingGhostDataRequest::TargetUserId' has a wrong offset!");
static_assert(offsetof(FGhostGetRankingGhostDataRequest, courseId) == 0x000010, "Member 'FGhostGetRankingGhostDataRequest::courseId' has a wrong offset!");
static_assert(offsetof(FGhostGetRankingGhostDataRequest, speedType) == 0x000014, "Member 'FGhostGetRankingGhostDataRequest::speedType' has a wrong offset!");
static_assert(offsetof(FGhostGetRankingGhostDataRequest, DrivingTime) == 0x000018, "Member 'FGhostGetRankingGhostDataRequest::DrivingTime' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataRankMatchUserNote
// 0x0080 (0x0080 - 0x0000)
struct FRankingDataRankMatchUserNote final
{
public:
	int32                                         playerIconId;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         playerBgColor;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 playerName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         degreeId;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         plateId;                                           // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRankingDataUserNoteCarParts           carParts;                                          // 0x0044(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRankingDataUserNoteGadget             gadget;                                            // 0x0050(0x001C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 entryTime;                                         // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataRankMatchUserNote) == 0x000008, "Wrong alignment on FRankingDataRankMatchUserNote");
static_assert(sizeof(FRankingDataRankMatchUserNote) == 0x000080, "Wrong size on FRankingDataRankMatchUserNote");
static_assert(offsetof(FRankingDataRankMatchUserNote, playerIconId) == 0x000000, "Member 'FRankingDataRankMatchUserNote::playerIconId' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNote, playerBgColor) == 0x000004, "Member 'FRankingDataRankMatchUserNote::playerBgColor' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNote, playerName) == 0x000008, "Member 'FRankingDataRankMatchUserNote::playerName' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNote, Platform) == 0x000018, "Member 'FRankingDataRankMatchUserNote::Platform' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNote, PlatformUserId) == 0x000028, "Member 'FRankingDataRankMatchUserNote::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNote, characterId) == 0x000038, "Member 'FRankingDataRankMatchUserNote::characterId' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNote, degreeId) == 0x00003C, "Member 'FRankingDataRankMatchUserNote::degreeId' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNote, plateId) == 0x000040, "Member 'FRankingDataRankMatchUserNote::plateId' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNote, carParts) == 0x000044, "Member 'FRankingDataRankMatchUserNote::carParts' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNote, gadget) == 0x000050, "Member 'FRankingDataRankMatchUserNote::gadget' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNote, Rate) == 0x00006C, "Member 'FRankingDataRankMatchUserNote::Rate' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNote, entryTime) == 0x000070, "Member 'FRankingDataRankMatchUserNote::entryTime' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataRankMatch
// 0x00B0 (0x00B0 - 0x0000)
struct FRankingDataRankMatch final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 score;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 order;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRankingDataRankMatchUserNote          userNote;                                          // 0x0030(0x0080)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataRankMatch) == 0x000008, "Wrong alignment on FRankingDataRankMatch");
static_assert(sizeof(FRankingDataRankMatch) == 0x0000B0, "Wrong size on FRankingDataRankMatch");
static_assert(offsetof(FRankingDataRankMatch, UserId) == 0x000000, "Member 'FRankingDataRankMatch::UserId' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatch, score) == 0x000010, "Member 'FRankingDataRankMatch::score' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatch, order) == 0x000020, "Member 'FRankingDataRankMatch::order' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatch, userNote) == 0x000030, "Member 'FRankingDataRankMatch::userNote' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataRankMatchList
// 0x0010 (0x0010 - 0x0000)
struct FRankingDataRankMatchList
{
public:
	TArray<struct FRankingDataRankMatch>          RankingData;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataRankMatchList) == 0x000008, "Wrong alignment on FRankingDataRankMatchList");
static_assert(sizeof(FRankingDataRankMatchList) == 0x000010, "Wrong size on FRankingDataRankMatchList");
static_assert(offsetof(FRankingDataRankMatchList, RankingData) == 0x000000, "Member 'FRankingDataRankMatchList::RankingData' has a wrong offset!");

// ScriptStruct UnionSystem.OperationSaveAutoReportRequest
// 0x0040 (0x0040 - 0x0000)
struct FOperationSaveAutoReportRequest final
{
public:
	class FString                                 TargetUserId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         reasonId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Location;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 reasonMemo;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameMode;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 entryRaceId;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOperationSaveAutoReportRequest) == 0x000008, "Wrong alignment on FOperationSaveAutoReportRequest");
static_assert(sizeof(FOperationSaveAutoReportRequest) == 0x000040, "Wrong size on FOperationSaveAutoReportRequest");
static_assert(offsetof(FOperationSaveAutoReportRequest, TargetUserId) == 0x000000, "Member 'FOperationSaveAutoReportRequest::TargetUserId' has a wrong offset!");
static_assert(offsetof(FOperationSaveAutoReportRequest, reasonId) == 0x000010, "Member 'FOperationSaveAutoReportRequest::reasonId' has a wrong offset!");
static_assert(offsetof(FOperationSaveAutoReportRequest, Location) == 0x000014, "Member 'FOperationSaveAutoReportRequest::Location' has a wrong offset!");
static_assert(offsetof(FOperationSaveAutoReportRequest, reasonMemo) == 0x000018, "Member 'FOperationSaveAutoReportRequest::reasonMemo' has a wrong offset!");
static_assert(offsetof(FOperationSaveAutoReportRequest, GameMode) == 0x000028, "Member 'FOperationSaveAutoReportRequest::GameMode' has a wrong offset!");
static_assert(offsetof(FOperationSaveAutoReportRequest, entryRaceId) == 0x000030, "Member 'FOperationSaveAutoReportRequest::entryRaceId' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameProgressRival
// 0x0190 (0x0190 - 0x0000)
struct FPlayLogSaveGameProgressRival final
{
public:
	struct FPlayLogSpeedSelectPlayCount           PlayCount[0xA];                                    // 0x0000(0x0014)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FPlayLogSpeedSelectPlayCount           ClearCount[0xA];                                   // 0x00C8(0x0014)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSaveGameProgressRival) == 0x000004, "Wrong alignment on FPlayLogSaveGameProgressRival");
static_assert(sizeof(FPlayLogSaveGameProgressRival) == 0x000190, "Wrong size on FPlayLogSaveGameProgressRival");
static_assert(offsetof(FPlayLogSaveGameProgressRival, PlayCount) == 0x000000, "Member 'FPlayLogSaveGameProgressRival::PlayCount' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameProgressRival, ClearCount) == 0x0000C8, "Member 'FPlayLogSaveGameProgressRival::ClearCount' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetRankingTimeTrialRequest
// 0x0020 (0x0020 - 0x0000)
struct FRankingGetRankingTimeTrialRequest
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         courseId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         speedType;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romVersionId;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romType;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetRankingTimeTrialRequest) == 0x000008, "Wrong alignment on FRankingGetRankingTimeTrialRequest");
static_assert(sizeof(FRankingGetRankingTimeTrialRequest) == 0x000020, "Wrong size on FRankingGetRankingTimeTrialRequest");
static_assert(offsetof(FRankingGetRankingTimeTrialRequest, Platform) == 0x000000, "Member 'FRankingGetRankingTimeTrialRequest::Platform' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingTimeTrialRequest, courseId) == 0x000010, "Member 'FRankingGetRankingTimeTrialRequest::courseId' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingTimeTrialRequest, speedType) == 0x000014, "Member 'FRankingGetRankingTimeTrialRequest::speedType' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingTimeTrialRequest, romVersionId) == 0x000018, "Member 'FRankingGetRankingTimeTrialRequest::romVersionId' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingTimeTrialRequest, romType) == 0x00001C, "Member 'FRankingGetRankingTimeTrialRequest::romType' has a wrong offset!");

// ScriptStruct UnionSystem.TimeTrialWorldRankingCacheKey
// 0x0000 (0x0020 - 0x0020)
struct FTimeTrialWorldRankingCacheKey final : public FRankingGetRankingTimeTrialRequest
{
};
static_assert(alignof(FTimeTrialWorldRankingCacheKey) == 0x000008, "Wrong alignment on FTimeTrialWorldRankingCacheKey");
static_assert(sizeof(FTimeTrialWorldRankingCacheKey) == 0x000020, "Wrong size on FTimeTrialWorldRankingCacheKey");

// ScriptStruct UnionSystem.RankingDataTimeTrialUserNoteRapTime
// 0x000C (0x000C - 0x0000)
struct FRankingDataTimeTrialUserNoteRapTime final
{
public:
	int32                                         rapTime1;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rapTime2;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rapTime3;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataTimeTrialUserNoteRapTime) == 0x000004, "Wrong alignment on FRankingDataTimeTrialUserNoteRapTime");
static_assert(sizeof(FRankingDataTimeTrialUserNoteRapTime) == 0x00000C, "Wrong size on FRankingDataTimeTrialUserNoteRapTime");
static_assert(offsetof(FRankingDataTimeTrialUserNoteRapTime, rapTime1) == 0x000000, "Member 'FRankingDataTimeTrialUserNoteRapTime::rapTime1' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNoteRapTime, rapTime2) == 0x000004, "Member 'FRankingDataTimeTrialUserNoteRapTime::rapTime2' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNoteRapTime, rapTime3) == 0x000008, "Member 'FRankingDataTimeTrialUserNoteRapTime::rapTime3' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataTimeTrialUserNote
// 0x00A0 (0x00A0 - 0x0000)
struct FRankingDataTimeTrialUserNote final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         playerIconId;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         playerBgColor;                                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 playerName;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         degreeId;                                          // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         plateId;                                           // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRankingDataUserNoteCarParts           carParts;                                          // 0x0054(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRankingDataUserNoteGadget             gadget;                                            // 0x0060(0x001C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRankingDataTimeTrialUserNoteRapTime   rapTime;                                           // 0x007C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         goalTime;                                          // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 entryTime;                                         // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataTimeTrialUserNote) == 0x000008, "Wrong alignment on FRankingDataTimeTrialUserNote");
static_assert(sizeof(FRankingDataTimeTrialUserNote) == 0x0000A0, "Wrong size on FRankingDataTimeTrialUserNote");
static_assert(offsetof(FRankingDataTimeTrialUserNote, UserId) == 0x000000, "Member 'FRankingDataTimeTrialUserNote::UserId' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, playerIconId) == 0x000010, "Member 'FRankingDataTimeTrialUserNote::playerIconId' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, playerBgColor) == 0x000014, "Member 'FRankingDataTimeTrialUserNote::playerBgColor' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, playerName) == 0x000018, "Member 'FRankingDataTimeTrialUserNote::playerName' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, Platform) == 0x000028, "Member 'FRankingDataTimeTrialUserNote::Platform' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, PlatformUserId) == 0x000038, "Member 'FRankingDataTimeTrialUserNote::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, characterId) == 0x000048, "Member 'FRankingDataTimeTrialUserNote::characterId' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, degreeId) == 0x00004C, "Member 'FRankingDataTimeTrialUserNote::degreeId' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, plateId) == 0x000050, "Member 'FRankingDataTimeTrialUserNote::plateId' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, carParts) == 0x000054, "Member 'FRankingDataTimeTrialUserNote::carParts' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, gadget) == 0x000060, "Member 'FRankingDataTimeTrialUserNote::gadget' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, rapTime) == 0x00007C, "Member 'FRankingDataTimeTrialUserNote::rapTime' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, goalTime) == 0x000088, "Member 'FRankingDataTimeTrialUserNote::goalTime' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, Rate) == 0x00008C, "Member 'FRankingDataTimeTrialUserNote::Rate' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrialUserNote, entryTime) == 0x000090, "Member 'FRankingDataTimeTrialUserNote::entryTime' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataTimeTrial
// 0x00D0 (0x00D0 - 0x0000)
struct FRankingDataTimeTrial final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 score;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 order;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRankingDataTimeTrialUserNote          userNote;                                          // 0x0030(0x00A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataTimeTrial) == 0x000008, "Wrong alignment on FRankingDataTimeTrial");
static_assert(sizeof(FRankingDataTimeTrial) == 0x0000D0, "Wrong size on FRankingDataTimeTrial");
static_assert(offsetof(FRankingDataTimeTrial, UserId) == 0x000000, "Member 'FRankingDataTimeTrial::UserId' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrial, score) == 0x000010, "Member 'FRankingDataTimeTrial::score' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrial, order) == 0x000020, "Member 'FRankingDataTimeTrial::order' has a wrong offset!");
static_assert(offsetof(FRankingDataTimeTrial, userNote) == 0x000030, "Member 'FRankingDataTimeTrial::userNote' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataTimeTrialList
// 0x0010 (0x0010 - 0x0000)
struct FRankingDataTimeTrialList
{
public:
	TArray<struct FRankingDataTimeTrial>          RankingData;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataTimeTrialList) == 0x000008, "Wrong alignment on FRankingDataTimeTrialList");
static_assert(sizeof(FRankingDataTimeTrialList) == 0x000010, "Wrong size on FRankingDataTimeTrialList");
static_assert(offsetof(FRankingDataTimeTrialList, RankingData) == 0x000000, "Member 'FRankingDataTimeTrialList::RankingData' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_CustomMachineParts
// 0x0100 (0x0100 - 0x0000)
struct FCRM_CustomMachineParts final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key2;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key13;                                             // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key14;                                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key15;                                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key16;                                             // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key17;                                             // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key18;                                             // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_CustomMachineParts) == 0x000008, "Wrong alignment on FCRM_CustomMachineParts");
static_assert(sizeof(FCRM_CustomMachineParts) == 0x000100, "Wrong size on FCRM_CustomMachineParts");
static_assert(offsetof(FCRM_CustomMachineParts, action_type) == 0x000000, "Member 'FCRM_CustomMachineParts::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key1) == 0x000010, "Member 'FCRM_CustomMachineParts::key1' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key2) == 0x000020, "Member 'FCRM_CustomMachineParts::key2' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key3) == 0x000030, "Member 'FCRM_CustomMachineParts::key3' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key4) == 0x000040, "Member 'FCRM_CustomMachineParts::key4' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key5) == 0x000050, "Member 'FCRM_CustomMachineParts::key5' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key6) == 0x000060, "Member 'FCRM_CustomMachineParts::key6' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key7) == 0x000070, "Member 'FCRM_CustomMachineParts::key7' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key8) == 0x000080, "Member 'FCRM_CustomMachineParts::key8' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key9) == 0x000090, "Member 'FCRM_CustomMachineParts::key9' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key13) == 0x0000A0, "Member 'FCRM_CustomMachineParts::key13' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key14) == 0x0000B0, "Member 'FCRM_CustomMachineParts::key14' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key15) == 0x0000C0, "Member 'FCRM_CustomMachineParts::key15' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key16) == 0x0000D0, "Member 'FCRM_CustomMachineParts::key16' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key17) == 0x0000E0, "Member 'FCRM_CustomMachineParts::key17' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachineParts, key18) == 0x0000F0, "Member 'FCRM_CustomMachineParts::key18' has a wrong offset!");

// ScriptStruct UnionSystem.FriendNotifyFriendRequest
// 0x0001 (0x0001 - 0x0000)
struct FFriendNotifyFriendRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendNotifyFriendRequest) == 0x000001, "Wrong alignment on FFriendNotifyFriendRequest");
static_assert(sizeof(FFriendNotifyFriendRequest) == 0x000001, "Wrong size on FFriendNotifyFriendRequest");

// ScriptStruct UnionSystem.FriendNotifyFriendResponse
// 0x0001 (0x0001 - 0x0000)
struct FFriendNotifyFriendResponse final
{
public:
	bool                                          isReceive;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendNotifyFriendResponse) == 0x000001, "Wrong alignment on FFriendNotifyFriendResponse");
static_assert(sizeof(FFriendNotifyFriendResponse) == 0x000001, "Wrong size on FFriendNotifyFriendResponse");
static_assert(offsetof(FFriendNotifyFriendResponse, isReceive) == 0x000000, "Member 'FFriendNotifyFriendResponse::isReceive' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_CourseSettingData
// 0x0028 (0x0028 - 0x0000)
struct FNetMasterData_CourseSettingData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 appearCourseIds;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_CourseSettingData) == 0x000008, "Wrong alignment on FNetMasterData_CourseSettingData");
static_assert(sizeof(FNetMasterData_CourseSettingData) == 0x000028, "Wrong size on FNetMasterData_CourseSettingData");
static_assert(offsetof(FNetMasterData_CourseSettingData, ID) == 0x000000, "Member 'FNetMasterData_CourseSettingData::ID' has a wrong offset!");
static_assert(offsetof(FNetMasterData_CourseSettingData, releaseTime) == 0x000008, "Member 'FNetMasterData_CourseSettingData::releaseTime' has a wrong offset!");
static_assert(offsetof(FNetMasterData_CourseSettingData, appearCourseIds) == 0x000018, "Member 'FNetMasterData_CourseSettingData::appearCourseIds' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_BanReleaseData
// 0x0010 (0x0010 - 0x0000)
struct FNetMasterData_BanReleaseData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         banLower;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         banUpper;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         releaseHour;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_BanReleaseData) == 0x000004, "Wrong alignment on FNetMasterData_BanReleaseData");
static_assert(sizeof(FNetMasterData_BanReleaseData) == 0x000010, "Wrong size on FNetMasterData_BanReleaseData");
static_assert(offsetof(FNetMasterData_BanReleaseData, ID) == 0x000000, "Member 'FNetMasterData_BanReleaseData::ID' has a wrong offset!");
static_assert(offsetof(FNetMasterData_BanReleaseData, banLower) == 0x000004, "Member 'FNetMasterData_BanReleaseData::banLower' has a wrong offset!");
static_assert(offsetof(FNetMasterData_BanReleaseData, banUpper) == 0x000008, "Member 'FNetMasterData_BanReleaseData::banUpper' has a wrong offset!");
static_assert(offsetof(FNetMasterData_BanReleaseData, releaseHour) == 0x00000C, "Member 'FNetMasterData_BanReleaseData::releaseHour' has a wrong offset!");

// ScriptStruct UnionSystem.AppRaceEventGoalData
// 0x0008 (0x0008 - 0x0000)
struct FAppRaceEventGoalData final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppRaceEventGoalData) == 0x000004, "Wrong alignment on FAppRaceEventGoalData");
static_assert(sizeof(FAppRaceEventGoalData) == 0x000008, "Wrong size on FAppRaceEventGoalData");
static_assert(offsetof(FAppRaceEventGoalData, Rank) == 0x000000, "Member 'FAppRaceEventGoalData::Rank' has a wrong offset!");
static_assert(offsetof(FAppRaceEventGoalData, DriverId) == 0x000004, "Member 'FAppRaceEventGoalData::DriverId' has a wrong offset!");

// ScriptStruct UnionSystem.GhostGetFriendGhostDataResponse
// 0x0010 (0x0010 - 0x0000)
struct FGhostGetFriendGhostDataResponse final
{
public:
	class FString                                 signedUrl;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGhostGetFriendGhostDataResponse) == 0x000008, "Wrong alignment on FGhostGetFriendGhostDataResponse");
static_assert(sizeof(FGhostGetFriendGhostDataResponse) == 0x000010, "Wrong size on FGhostGetFriendGhostDataResponse");
static_assert(offsetof(FGhostGetFriendGhostDataResponse, signedUrl) == 0x000000, "Member 'FGhostGetFriendGhostDataResponse::signedUrl' has a wrong offset!");

// ScriptStruct UnionSystem.UserSaveUserNetworkSettingsRequest
// 0x0020 (0x0020 - 0x0000)
struct FUserSaveUserNetworkSettingsRequest final
{
public:
	int32                                         playerIconId;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 playerBgColor;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isProfilePublished;                                // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOnlineStatusPublished;                           // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCopyPlayerPublished;                             // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCrossPlay;                                       // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAllowFriendRequest;                              // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAcceptLobbyInvitation;                           // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserSaveUserNetworkSettingsRequest) == 0x000008, "Wrong alignment on FUserSaveUserNetworkSettingsRequest");
static_assert(sizeof(FUserSaveUserNetworkSettingsRequest) == 0x000020, "Wrong size on FUserSaveUserNetworkSettingsRequest");
static_assert(offsetof(FUserSaveUserNetworkSettingsRequest, playerIconId) == 0x000000, "Member 'FUserSaveUserNetworkSettingsRequest::playerIconId' has a wrong offset!");
static_assert(offsetof(FUserSaveUserNetworkSettingsRequest, playerBgColor) == 0x000008, "Member 'FUserSaveUserNetworkSettingsRequest::playerBgColor' has a wrong offset!");
static_assert(offsetof(FUserSaveUserNetworkSettingsRequest, isProfilePublished) == 0x000018, "Member 'FUserSaveUserNetworkSettingsRequest::isProfilePublished' has a wrong offset!");
static_assert(offsetof(FUserSaveUserNetworkSettingsRequest, isOnlineStatusPublished) == 0x000019, "Member 'FUserSaveUserNetworkSettingsRequest::isOnlineStatusPublished' has a wrong offset!");
static_assert(offsetof(FUserSaveUserNetworkSettingsRequest, isCopyPlayerPublished) == 0x00001A, "Member 'FUserSaveUserNetworkSettingsRequest::isCopyPlayerPublished' has a wrong offset!");
static_assert(offsetof(FUserSaveUserNetworkSettingsRequest, isCrossPlay) == 0x00001B, "Member 'FUserSaveUserNetworkSettingsRequest::isCrossPlay' has a wrong offset!");
static_assert(offsetof(FUserSaveUserNetworkSettingsRequest, isAllowFriendRequest) == 0x00001C, "Member 'FUserSaveUserNetworkSettingsRequest::isAllowFriendRequest' has a wrong offset!");
static_assert(offsetof(FUserSaveUserNetworkSettingsRequest, isAcceptLobbyInvitation) == 0x00001D, "Member 'FUserSaveUserNetworkSettingsRequest::isAcceptLobbyInvitation' has a wrong offset!");

// ScriptStruct UnionSystem.UserStickerData
// 0x0028 (0x0028 - 0x0000)
struct FUserStickerData final
{
public:
	int32                                         stickerId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationX;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationY;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         scaleX;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         scaleY;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         textureId;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         colorId;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         surfaceId;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserStickerFlagBits                          flag;                                              // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserStickerData) == 0x000004, "Wrong alignment on FUserStickerData");
static_assert(sizeof(FUserStickerData) == 0x000028, "Wrong size on FUserStickerData");
static_assert(offsetof(FUserStickerData, stickerId) == 0x000000, "Member 'FUserStickerData::stickerId' has a wrong offset!");
static_assert(offsetof(FUserStickerData, LocationX) == 0x000004, "Member 'FUserStickerData::LocationX' has a wrong offset!");
static_assert(offsetof(FUserStickerData, LocationY) == 0x000008, "Member 'FUserStickerData::LocationY' has a wrong offset!");
static_assert(offsetof(FUserStickerData, Rotation) == 0x00000C, "Member 'FUserStickerData::Rotation' has a wrong offset!");
static_assert(offsetof(FUserStickerData, scaleX) == 0x000010, "Member 'FUserStickerData::scaleX' has a wrong offset!");
static_assert(offsetof(FUserStickerData, scaleY) == 0x000014, "Member 'FUserStickerData::scaleY' has a wrong offset!");
static_assert(offsetof(FUserStickerData, textureId) == 0x000018, "Member 'FUserStickerData::textureId' has a wrong offset!");
static_assert(offsetof(FUserStickerData, colorId) == 0x00001C, "Member 'FUserStickerData::colorId' has a wrong offset!");
static_assert(offsetof(FUserStickerData, surfaceId) == 0x000020, "Member 'FUserStickerData::surfaceId' has a wrong offset!");
static_assert(offsetof(FUserStickerData, flag) == 0x000024, "Member 'FUserStickerData::flag' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_Connection
// 0x0070 (0x0070 - 0x0000)
struct FCRM_Connection final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key4;                                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key5;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key6;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key7;                                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key8;                                              // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key9;                                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key10;                                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_Connection) == 0x000008, "Wrong alignment on FCRM_Connection");
static_assert(sizeof(FCRM_Connection) == 0x000070, "Wrong size on FCRM_Connection");
static_assert(offsetof(FCRM_Connection, action_type) == 0x000000, "Member 'FCRM_Connection::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_Connection, key1) == 0x000010, "Member 'FCRM_Connection::key1' has a wrong offset!");
static_assert(offsetof(FCRM_Connection, key2) == 0x000018, "Member 'FCRM_Connection::key2' has a wrong offset!");
static_assert(offsetof(FCRM_Connection, key3) == 0x000028, "Member 'FCRM_Connection::key3' has a wrong offset!");
static_assert(offsetof(FCRM_Connection, key4) == 0x000038, "Member 'FCRM_Connection::key4' has a wrong offset!");
static_assert(offsetof(FCRM_Connection, key5) == 0x000040, "Member 'FCRM_Connection::key5' has a wrong offset!");
static_assert(offsetof(FCRM_Connection, key6) == 0x000050, "Member 'FCRM_Connection::key6' has a wrong offset!");
static_assert(offsetof(FCRM_Connection, key7) == 0x000060, "Member 'FCRM_Connection::key7' has a wrong offset!");
static_assert(offsetof(FCRM_Connection, key8) == 0x000064, "Member 'FCRM_Connection::key8' has a wrong offset!");
static_assert(offsetof(FCRM_Connection, key9) == 0x000068, "Member 'FCRM_Connection::key9' has a wrong offset!");
static_assert(offsetof(FCRM_Connection, key10) == 0x00006C, "Member 'FCRM_Connection::key10' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_LegendCompeData
// 0x0040 (0x0040 - 0x0000)
struct FNetMasterData_LegendCompeData final
{
public:
	int32                                         compeId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         compeSeason;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartTime;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         endExtensionTime;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         legendGradeId;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gradeAdjustValue;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rankingRewardId;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gradeRewardId;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNetMasterData_LegendCompeData) == 0x000008, "Wrong alignment on FNetMasterData_LegendCompeData");
static_assert(sizeof(FNetMasterData_LegendCompeData) == 0x000040, "Wrong size on FNetMasterData_LegendCompeData");
static_assert(offsetof(FNetMasterData_LegendCompeData, compeId) == 0x000000, "Member 'FNetMasterData_LegendCompeData::compeId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeData, compeSeason) == 0x000004, "Member 'FNetMasterData_LegendCompeData::compeSeason' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeData, StartTime) == 0x000008, "Member 'FNetMasterData_LegendCompeData::StartTime' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeData, endTime) == 0x000018, "Member 'FNetMasterData_LegendCompeData::endTime' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeData, endExtensionTime) == 0x000028, "Member 'FNetMasterData_LegendCompeData::endExtensionTime' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeData, legendGradeId) == 0x00002C, "Member 'FNetMasterData_LegendCompeData::legendGradeId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeData, gradeAdjustValue) == 0x000030, "Member 'FNetMasterData_LegendCompeData::gradeAdjustValue' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeData, rankingRewardId) == 0x000034, "Member 'FNetMasterData_LegendCompeData::rankingRewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeData, gradeRewardId) == 0x000038, "Member 'FNetMasterData_LegendCompeData::gradeRewardId' has a wrong offset!");

// ScriptStruct UnionSystem.UnionPlatformEventInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FUnionPlatformEventInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionPlatformEventInfo) == 0x000008, "Wrong alignment on FUnionPlatformEventInfo");
static_assert(sizeof(FUnionPlatformEventInfo) == 0x000018, "Wrong size on FUnionPlatformEventInfo");

// ScriptStruct UnionSystem.MyUserNote
// 0x0080 (0x0080 - 0x0000)
struct FMyUserNote final
{
public:
	int32                                         playerIconId;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 playerName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         degreeId;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         plateId;                                           // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRankingDataUserNoteCarParts           carParts;                                          // 0x0044(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRankingDataUserNoteGadget             gadget;                                            // 0x0050(0x001C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 entryTime;                                         // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyUserNote) == 0x000008, "Wrong alignment on FMyUserNote");
static_assert(sizeof(FMyUserNote) == 0x000080, "Wrong size on FMyUserNote");
static_assert(offsetof(FMyUserNote, playerIconId) == 0x000000, "Member 'FMyUserNote::playerIconId' has a wrong offset!");
static_assert(offsetof(FMyUserNote, playerName) == 0x000008, "Member 'FMyUserNote::playerName' has a wrong offset!");
static_assert(offsetof(FMyUserNote, Platform) == 0x000018, "Member 'FMyUserNote::Platform' has a wrong offset!");
static_assert(offsetof(FMyUserNote, PlatformUserId) == 0x000028, "Member 'FMyUserNote::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FMyUserNote, characterId) == 0x000038, "Member 'FMyUserNote::characterId' has a wrong offset!");
static_assert(offsetof(FMyUserNote, degreeId) == 0x00003C, "Member 'FMyUserNote::degreeId' has a wrong offset!");
static_assert(offsetof(FMyUserNote, plateId) == 0x000040, "Member 'FMyUserNote::plateId' has a wrong offset!");
static_assert(offsetof(FMyUserNote, carParts) == 0x000044, "Member 'FMyUserNote::carParts' has a wrong offset!");
static_assert(offsetof(FMyUserNote, gadget) == 0x000050, "Member 'FMyUserNote::gadget' has a wrong offset!");
static_assert(offsetof(FMyUserNote, Rate) == 0x00006C, "Member 'FMyUserNote::Rate' has a wrong offset!");
static_assert(offsetof(FMyUserNote, entryTime) == 0x000070, "Member 'FMyUserNote::entryTime' has a wrong offset!");

// ScriptStruct UnionSystem.MyRankingOrder
// 0x0088 (0x0088 - 0x0000)
struct FMyRankingOrder final
{
public:
	int32                                         score;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         order;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMyUserNote                            userNote;                                          // 0x0008(0x0080)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyRankingOrder) == 0x000008, "Wrong alignment on FMyRankingOrder");
static_assert(sizeof(FMyRankingOrder) == 0x000088, "Wrong size on FMyRankingOrder");
static_assert(offsetof(FMyRankingOrder, score) == 0x000000, "Member 'FMyRankingOrder::score' has a wrong offset!");
static_assert(offsetof(FMyRankingOrder, order) == 0x000004, "Member 'FMyRankingOrder::order' has a wrong offset!");
static_assert(offsetof(FMyRankingOrder, userNote) == 0x000008, "Member 'FMyRankingOrder::userNote' has a wrong offset!");

// ScriptStruct UnionSystem.MyRankingData
// 0x0120 (0x0120 - 0x0000)
struct FMyRankingData
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMyRankingOrder                        All;                                               // 0x0010(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMyRankingOrder                        Platform;                                          // 0x0098(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyRankingData) == 0x000008, "Wrong alignment on FMyRankingData");
static_assert(sizeof(FMyRankingData) == 0x000120, "Wrong size on FMyRankingData");
static_assert(offsetof(FMyRankingData, UserId) == 0x000000, "Member 'FMyRankingData::UserId' has a wrong offset!");
static_assert(offsetof(FMyRankingData, All) == 0x000010, "Member 'FMyRankingData::All' has a wrong offset!");
static_assert(offsetof(FMyRankingData, Platform) == 0x000098, "Member 'FMyRankingData::Platform' has a wrong offset!");

// ScriptStruct UnionSystem.Common_FestaPointData
// 0x0020 (0x0020 - 0x0000)
struct FCommon_FestaPointData final
{
public:
	int32                                         AddFestaPoint;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         userOrderPoint;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         friendBonusPoint;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         winBonusPoint;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         leadNo1Point;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bonusNo1Point;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ratio;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_FestaPointData) == 0x000004, "Wrong alignment on FCommon_FestaPointData");
static_assert(sizeof(FCommon_FestaPointData) == 0x000020, "Wrong size on FCommon_FestaPointData");
static_assert(offsetof(FCommon_FestaPointData, AddFestaPoint) == 0x000000, "Member 'FCommon_FestaPointData::AddFestaPoint' has a wrong offset!");
static_assert(offsetof(FCommon_FestaPointData, teamOrderPoint) == 0x000004, "Member 'FCommon_FestaPointData::teamOrderPoint' has a wrong offset!");
static_assert(offsetof(FCommon_FestaPointData, userOrderPoint) == 0x000008, "Member 'FCommon_FestaPointData::userOrderPoint' has a wrong offset!");
static_assert(offsetof(FCommon_FestaPointData, friendBonusPoint) == 0x00000C, "Member 'FCommon_FestaPointData::friendBonusPoint' has a wrong offset!");
static_assert(offsetof(FCommon_FestaPointData, winBonusPoint) == 0x000010, "Member 'FCommon_FestaPointData::winBonusPoint' has a wrong offset!");
static_assert(offsetof(FCommon_FestaPointData, leadNo1Point) == 0x000014, "Member 'FCommon_FestaPointData::leadNo1Point' has a wrong offset!");
static_assert(offsetof(FCommon_FestaPointData, bonusNo1Point) == 0x000018, "Member 'FCommon_FestaPointData::bonusNo1Point' has a wrong offset!");
static_assert(offsetof(FCommon_FestaPointData, Ratio) == 0x00001C, "Member 'FCommon_FestaPointData::Ratio' has a wrong offset!");

// ScriptStruct UnionSystem.LobbyGenerateLobbyRequest
// 0x0010 (0x0010 - 0x0000)
struct FLobbyGenerateLobbyRequest final
{
public:
	class FString                                 eosLobbyId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyGenerateLobbyRequest) == 0x000008, "Wrong alignment on FLobbyGenerateLobbyRequest");
static_assert(sizeof(FLobbyGenerateLobbyRequest) == 0x000010, "Wrong size on FLobbyGenerateLobbyRequest");
static_assert(offsetof(FLobbyGenerateLobbyRequest, eosLobbyId) == 0x000000, "Member 'FLobbyGenerateLobbyRequest::eosLobbyId' has a wrong offset!");

// ScriptStruct UnionSystem.HonorCommendationData
// 0x0002 (0x0002 - 0x0000)
struct FHonorCommendationData final
{
public:
	EHonorId                                      HonorId;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommendationCategory                         CommendationCategory;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHonorCommendationData) == 0x000001, "Wrong alignment on FHonorCommendationData");
static_assert(sizeof(FHonorCommendationData) == 0x000002, "Wrong size on FHonorCommendationData");
static_assert(offsetof(FHonorCommendationData, HonorId) == 0x000000, "Member 'FHonorCommendationData::HonorId' has a wrong offset!");
static_assert(offsetof(FHonorCommendationData, CommendationCategory) == 0x000001, "Member 'FHonorCommendationData::CommendationCategory' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataItemHitMachine
// 0x0098 (0x0098 - 0x0000)
struct FCRM_RadjDataItemHitMachine final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataItemHitMachine) == 0x000008, "Wrong alignment on FCRM_RadjDataItemHitMachine");
static_assert(sizeof(FCRM_RadjDataItemHitMachine) == 0x000098, "Wrong size on FCRM_RadjDataItemHitMachine");
static_assert(offsetof(FCRM_RadjDataItemHitMachine, action_type) == 0x000000, "Member 'FCRM_RadjDataItemHitMachine::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemHitMachine, key1) == 0x000010, "Member 'FCRM_RadjDataItemHitMachine::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemHitMachine, key2) == 0x000018, "Member 'FCRM_RadjDataItemHitMachine::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemHitMachine, key3) == 0x000028, "Member 'FCRM_RadjDataItemHitMachine::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemHitMachine, key4) == 0x000038, "Member 'FCRM_RadjDataItemHitMachine::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemHitMachine, key5) == 0x000048, "Member 'FCRM_RadjDataItemHitMachine::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemHitMachine, key6) == 0x000058, "Member 'FCRM_RadjDataItemHitMachine::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemHitMachine, key7) == 0x000068, "Member 'FCRM_RadjDataItemHitMachine::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemHitMachine, key8) == 0x000078, "Member 'FCRM_RadjDataItemHitMachine::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemHitMachine, key9) == 0x000088, "Member 'FCRM_RadjDataItemHitMachine::key9' has a wrong offset!");

// ScriptStruct UnionSystem.FHonorCommendationDataSet
// 0x0018 (0x0018 - 0x0000)
struct FFHonorCommendationDataSet final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHonorCommendationData>         DataList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFHonorCommendationDataSet) == 0x000008, "Wrong alignment on FFHonorCommendationDataSet");
static_assert(sizeof(FFHonorCommendationDataSet) == 0x000018, "Wrong size on FFHonorCommendationDataSet");
static_assert(offsetof(FFHonorCommendationDataSet, RacerIndex) == 0x000000, "Member 'FFHonorCommendationDataSet::RacerIndex' has a wrong offset!");
static_assert(offsetof(FFHonorCommendationDataSet, DataList) == 0x000008, "Member 'FFHonorCommendationDataSet::DataList' has a wrong offset!");

// ScriptStruct UnionSystem.HonorCommendationDataSetList
// 0x0010 (0x0010 - 0x0000)
struct FHonorCommendationDataSetList final
{
public:
	TArray<struct FFHonorCommendationDataSet>     DataSets;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHonorCommendationDataSetList) == 0x000008, "Wrong alignment on FHonorCommendationDataSetList");
static_assert(sizeof(FHonorCommendationDataSetList) == 0x000010, "Wrong size on FHonorCommendationDataSetList");
static_assert(offsetof(FHonorCommendationDataSetList, DataSets) == 0x000000, "Member 'FHonorCommendationDataSetList::DataSets' has a wrong offset!");

// ScriptStruct UnionSystem.CompensationData
// 0x0010 (0x0010 - 0x0000)
struct FCompensationData final
{
public:
	TArray<int32>                                 CompensationIdArray;                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompensationData) == 0x000008, "Wrong alignment on FCompensationData");
static_assert(sizeof(FCompensationData) == 0x000010, "Wrong size on FCompensationData");
static_assert(offsetof(FCompensationData, CompensationIdArray) == 0x000000, "Member 'FCompensationData::CompensationIdArray' has a wrong offset!");

// ScriptStruct UnionSystem.DeviceChangeInterfacesPerPlayer
// 0x0010 (0x0010 - 0x0000)
struct FDeviceChangeInterfacesPerPlayer final
{
public:
	TArray<TWeakObjectPtr<class UObject>>         DeviceChangesIF;                                   // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeviceChangeInterfacesPerPlayer) == 0x000008, "Wrong alignment on FDeviceChangeInterfacesPerPlayer");
static_assert(sizeof(FDeviceChangeInterfacesPerPlayer) == 0x000010, "Wrong size on FDeviceChangeInterfacesPerPlayer");
static_assert(offsetof(FDeviceChangeInterfacesPerPlayer, DeviceChangesIF) == 0x000000, "Member 'FDeviceChangeInterfacesPerPlayer::DeviceChangesIF' has a wrong offset!");

// ScriptStruct UnionSystem.UnionVATSequenceInfo
// 0x000C (0x000C - 0x0000)
struct FUnionVATSequenceInfo final
{
public:
	int32                                         AnimationIndex;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrevPosition;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Position;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionVATSequenceInfo) == 0x000004, "Wrong alignment on FUnionVATSequenceInfo");
static_assert(sizeof(FUnionVATSequenceInfo) == 0x00000C, "Wrong size on FUnionVATSequenceInfo");
static_assert(offsetof(FUnionVATSequenceInfo, AnimationIndex) == 0x000000, "Member 'FUnionVATSequenceInfo::AnimationIndex' has a wrong offset!");
static_assert(offsetof(FUnionVATSequenceInfo, PrevPosition) == 0x000004, "Member 'FUnionVATSequenceInfo::PrevPosition' has a wrong offset!");
static_assert(offsetof(FUnionVATSequenceInfo, Position) == 0x000008, "Member 'FUnionVATSequenceInfo::Position' has a wrong offset!");

// ScriptStruct UnionSystem.StatsDataTable
// 0x0008 (0x0010 - 0x0008)
struct FStatsDataTable final : public FTableRowBase
{
public:
	EStatsEventId                                 StatsEventId;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatsRules                                   EStatsRules;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatsDataTable) == 0x000008, "Wrong alignment on FStatsDataTable");
static_assert(sizeof(FStatsDataTable) == 0x000010, "Wrong size on FStatsDataTable");
static_assert(offsetof(FStatsDataTable, StatsEventId) == 0x000008, "Member 'FStatsDataTable::StatsEventId' has a wrong offset!");
static_assert(offsetof(FStatsDataTable, EStatsRules) == 0x000009, "Member 'FStatsDataTable::EStatsRules' has a wrong offset!");

// ScriptStruct UnionSystem.UserStickerCustomizeData
// 0x0020 (0x0020 - 0x0000)
struct FUserStickerCustomizeData final
{
public:
	TArray<struct FUserStickerData>               FrontStickerArray;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUserStickerData>               RearStickerArray;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserStickerCustomizeData) == 0x000008, "Wrong alignment on FUserStickerCustomizeData");
static_assert(sizeof(FUserStickerCustomizeData) == 0x000020, "Wrong size on FUserStickerCustomizeData");
static_assert(offsetof(FUserStickerCustomizeData, FrontStickerArray) == 0x000000, "Member 'FUserStickerCustomizeData::FrontStickerArray' has a wrong offset!");
static_assert(offsetof(FUserStickerCustomizeData, RearStickerArray) == 0x000010, "Member 'FUserStickerCustomizeData::RearStickerArray' has a wrong offset!");

// ScriptStruct UnionSystem.UserMachineCustomizeData
// 0x0078 (0x0078 - 0x0000)
struct FUserMachineCustomizeData final
{
public:
	bool                                          bIsUsed;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    FrontPartsId;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    RearPartsId;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    TirePartsId;                                       // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineColorMode                             ColorMode;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineColorPresetId                         ColorPresetId;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineHornType                              HornType;                                          // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineAuraId                                AuraId;                                            // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyColorArea1;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyColorArea2;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyColorArea3;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodySurfaceArea1;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodySurfaceArea2;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodySurfaceArea3;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CockpitColorArea1;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CockpitColorArea2;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CockpitColorArea3;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CockpitSurfaceArea1;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CockpitSurfaceArea2;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CockpitSurfaceArea3;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireColorArea1;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireColorArea2;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireColorArea3;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireSurfaceArea1;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireSurfaceArea2;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireSurfaceArea3;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyGlowColor;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TireGlowColor;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserStickerCustomizeData              Sticker;                                           // 0x0058(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserMachineCustomizeData) == 0x000008, "Wrong alignment on FUserMachineCustomizeData");
static_assert(sizeof(FUserMachineCustomizeData) == 0x000078, "Wrong size on FUserMachineCustomizeData");
static_assert(offsetof(FUserMachineCustomizeData, bIsUsed) == 0x000000, "Member 'FUserMachineCustomizeData::bIsUsed' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, FrontPartsId) == 0x000001, "Member 'FUserMachineCustomizeData::FrontPartsId' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, RearPartsId) == 0x000002, "Member 'FUserMachineCustomizeData::RearPartsId' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, TirePartsId) == 0x000003, "Member 'FUserMachineCustomizeData::TirePartsId' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, ColorMode) == 0x000004, "Member 'FUserMachineCustomizeData::ColorMode' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, ColorPresetId) == 0x000005, "Member 'FUserMachineCustomizeData::ColorPresetId' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, HornType) == 0x000006, "Member 'FUserMachineCustomizeData::HornType' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, AuraId) == 0x000007, "Member 'FUserMachineCustomizeData::AuraId' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, BodyColorArea1) == 0x000008, "Member 'FUserMachineCustomizeData::BodyColorArea1' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, BodyColorArea2) == 0x00000C, "Member 'FUserMachineCustomizeData::BodyColorArea2' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, BodyColorArea3) == 0x000010, "Member 'FUserMachineCustomizeData::BodyColorArea3' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, BodySurfaceArea1) == 0x000014, "Member 'FUserMachineCustomizeData::BodySurfaceArea1' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, BodySurfaceArea2) == 0x000018, "Member 'FUserMachineCustomizeData::BodySurfaceArea2' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, BodySurfaceArea3) == 0x00001C, "Member 'FUserMachineCustomizeData::BodySurfaceArea3' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, CockpitColorArea1) == 0x000020, "Member 'FUserMachineCustomizeData::CockpitColorArea1' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, CockpitColorArea2) == 0x000024, "Member 'FUserMachineCustomizeData::CockpitColorArea2' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, CockpitColorArea3) == 0x000028, "Member 'FUserMachineCustomizeData::CockpitColorArea3' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, CockpitSurfaceArea1) == 0x00002C, "Member 'FUserMachineCustomizeData::CockpitSurfaceArea1' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, CockpitSurfaceArea2) == 0x000030, "Member 'FUserMachineCustomizeData::CockpitSurfaceArea2' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, CockpitSurfaceArea3) == 0x000034, "Member 'FUserMachineCustomizeData::CockpitSurfaceArea3' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, TireColorArea1) == 0x000038, "Member 'FUserMachineCustomizeData::TireColorArea1' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, TireColorArea2) == 0x00003C, "Member 'FUserMachineCustomizeData::TireColorArea2' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, TireColorArea3) == 0x000040, "Member 'FUserMachineCustomizeData::TireColorArea3' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, TireSurfaceArea1) == 0x000044, "Member 'FUserMachineCustomizeData::TireSurfaceArea1' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, TireSurfaceArea2) == 0x000048, "Member 'FUserMachineCustomizeData::TireSurfaceArea2' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, TireSurfaceArea3) == 0x00004C, "Member 'FUserMachineCustomizeData::TireSurfaceArea3' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, BodyGlowColor) == 0x000050, "Member 'FUserMachineCustomizeData::BodyGlowColor' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, TireGlowColor) == 0x000054, "Member 'FUserMachineCustomizeData::TireGlowColor' has a wrong offset!");
static_assert(offsetof(FUserMachineCustomizeData, Sticker) == 0x000058, "Member 'FUserMachineCustomizeData::Sticker' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetUserIdsByUidResponse_UserIds
// 0x0040 (0x0040 - 0x0000)
struct FUserGetUserIdsByUidResponse_UserIds final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 identityProviderId;                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 providerEnv;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetUserIdsByUidResponse_UserIds) == 0x000008, "Wrong alignment on FUserGetUserIdsByUidResponse_UserIds");
static_assert(sizeof(FUserGetUserIdsByUidResponse_UserIds) == 0x000040, "Wrong size on FUserGetUserIdsByUidResponse_UserIds");
static_assert(offsetof(FUserGetUserIdsByUidResponse_UserIds, UserId) == 0x000000, "Member 'FUserGetUserIdsByUidResponse_UserIds::UserId' has a wrong offset!");
static_assert(offsetof(FUserGetUserIdsByUidResponse_UserIds, ProductUserId) == 0x000010, "Member 'FUserGetUserIdsByUidResponse_UserIds::ProductUserId' has a wrong offset!");
static_assert(offsetof(FUserGetUserIdsByUidResponse_UserIds, identityProviderId) == 0x000020, "Member 'FUserGetUserIdsByUidResponse_UserIds::identityProviderId' has a wrong offset!");
static_assert(offsetof(FUserGetUserIdsByUidResponse_UserIds, providerEnv) == 0x000030, "Member 'FUserGetUserIdsByUidResponse_UserIds::providerEnv' has a wrong offset!");

// ScriptStruct UnionSystem.AlbumCondition
// 0x0004 (0x0004 - 0x0000)
struct FAlbumCondition final
{
public:
	bool                                          bUnlocked;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvailable;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFavorite;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlbumCondition) == 0x000001, "Wrong alignment on FAlbumCondition");
static_assert(sizeof(FAlbumCondition) == 0x000004, "Wrong size on FAlbumCondition");
static_assert(offsetof(FAlbumCondition, bUnlocked) == 0x000000, "Member 'FAlbumCondition::bUnlocked' has a wrong offset!");
static_assert(offsetof(FAlbumCondition, bAvailable) == 0x000001, "Member 'FAlbumCondition::bAvailable' has a wrong offset!");
static_assert(offsetof(FAlbumCondition, bFavorite) == 0x000002, "Member 'FAlbumCondition::bFavorite' has a wrong offset!");
static_assert(offsetof(FAlbumCondition, bNew) == 0x000003, "Member 'FAlbumCondition::bNew' has a wrong offset!");

// ScriptStruct UnionSystem.ItemStatusOption
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FItemStatusOption final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemStatusOption) == 0x000008, "Wrong alignment on FItemStatusOption");
static_assert(sizeof(FItemStatusOption) == 0x000020, "Wrong size on FItemStatusOption");

// ScriptStruct UnionSystem.CRM_RadjDataLap
// 0x0078 (0x0078 - 0x0000)
struct FCRM_RadjDataLap final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataLap) == 0x000008, "Wrong alignment on FCRM_RadjDataLap");
static_assert(sizeof(FCRM_RadjDataLap) == 0x000078, "Wrong size on FCRM_RadjDataLap");
static_assert(offsetof(FCRM_RadjDataLap, action_type) == 0x000000, "Member 'FCRM_RadjDataLap::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataLap, key1) == 0x000010, "Member 'FCRM_RadjDataLap::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataLap, key2) == 0x000018, "Member 'FCRM_RadjDataLap::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataLap, key3) == 0x000028, "Member 'FCRM_RadjDataLap::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataLap, key4) == 0x000038, "Member 'FCRM_RadjDataLap::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataLap, key5) == 0x000048, "Member 'FCRM_RadjDataLap::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataLap, key6) == 0x000058, "Member 'FCRM_RadjDataLap::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataLap, key7) == 0x000068, "Member 'FCRM_RadjDataLap::key7' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataFrameRateBoostingStart
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataFrameRateBoostingStart final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataFrameRateBoostingStart) == 0x000008, "Wrong alignment on FCRM_RadjDataFrameRateBoostingStart");
static_assert(sizeof(FCRM_RadjDataFrameRateBoostingStart) == 0x000038, "Wrong size on FCRM_RadjDataFrameRateBoostingStart");
static_assert(offsetof(FCRM_RadjDataFrameRateBoostingStart, action_type) == 0x000000, "Member 'FCRM_RadjDataFrameRateBoostingStart::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataFrameRateBoostingStart, key1) == 0x000010, "Member 'FCRM_RadjDataFrameRateBoostingStart::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataFrameRateBoostingStart, key2) == 0x000018, "Member 'FCRM_RadjDataFrameRateBoostingStart::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataFrameRateBoostingStart, key3) == 0x000028, "Member 'FCRM_RadjDataFrameRateBoostingStart::key3' has a wrong offset!");

// ScriptStruct UnionSystem.TrackCondition
// 0x0003 (0x0003 - 0x0000)
struct FTrackCondition final
{
public:
	bool                                          bAvailable;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFavorite;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackCondition) == 0x000001, "Wrong alignment on FTrackCondition");
static_assert(sizeof(FTrackCondition) == 0x000003, "Wrong size on FTrackCondition");
static_assert(offsetof(FTrackCondition, bAvailable) == 0x000000, "Member 'FTrackCondition::bAvailable' has a wrong offset!");
static_assert(offsetof(FTrackCondition, bFavorite) == 0x000001, "Member 'FTrackCondition::bFavorite' has a wrong offset!");
static_assert(offsetof(FTrackCondition, bNew) == 0x000002, "Member 'FTrackCondition::bNew' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBrakeOn
// 0x0068 (0x0068 - 0x0000)
struct FCRM_RadjDataBrakeOn final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBrakeOn) == 0x000008, "Wrong alignment on FCRM_RadjDataBrakeOn");
static_assert(sizeof(FCRM_RadjDataBrakeOn) == 0x000068, "Wrong size on FCRM_RadjDataBrakeOn");
static_assert(offsetof(FCRM_RadjDataBrakeOn, action_type) == 0x000000, "Member 'FCRM_RadjDataBrakeOn::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBrakeOn, key1) == 0x000010, "Member 'FCRM_RadjDataBrakeOn::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBrakeOn, key2) == 0x000018, "Member 'FCRM_RadjDataBrakeOn::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBrakeOn, key3) == 0x000028, "Member 'FCRM_RadjDataBrakeOn::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBrakeOn, key4) == 0x000038, "Member 'FCRM_RadjDataBrakeOn::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBrakeOn, key5) == 0x000048, "Member 'FCRM_RadjDataBrakeOn::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBrakeOn, key6) == 0x000058, "Member 'FCRM_RadjDataBrakeOn::key6' has a wrong offset!");

// ScriptStruct UnionSystem.Common_RewardData
// 0x000C (0x000C - 0x0000)
struct FCommon_RewardData final
{
public:
	int32                                         rewardType;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_RewardData) == 0x000004, "Wrong alignment on FCommon_RewardData");
static_assert(sizeof(FCommon_RewardData) == 0x00000C, "Wrong size on FCommon_RewardData");
static_assert(offsetof(FCommon_RewardData, rewardType) == 0x000000, "Member 'FCommon_RewardData::rewardType' has a wrong offset!");
static_assert(offsetof(FCommon_RewardData, rewardId) == 0x000004, "Member 'FCommon_RewardData::rewardId' has a wrong offset!");
static_assert(offsetof(FCommon_RewardData, rewardNum) == 0x000008, "Member 'FCommon_RewardData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.LegendCompeCheckLegendCompeRewardResponse
// 0x0010 (0x0010 - 0x0000)
struct FLegendCompeCheckLegendCompeRewardResponse final
{
public:
	TArray<struct FCommon_RewardData>             rewardList;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLegendCompeCheckLegendCompeRewardResponse) == 0x000008, "Wrong alignment on FLegendCompeCheckLegendCompeRewardResponse");
static_assert(sizeof(FLegendCompeCheckLegendCompeRewardResponse) == 0x000010, "Wrong size on FLegendCompeCheckLegendCompeRewardResponse");
static_assert(offsetof(FLegendCompeCheckLegendCompeRewardResponse, rewardList) == 0x000000, "Member 'FLegendCompeCheckLegendCompeRewardResponse::rewardList' has a wrong offset!");

// ScriptStruct UnionSystem.FriendAcceptFriendResponse
// 0x0468 (0x0468 - 0x0000)
struct FFriendAcceptFriendResponse final
{
public:
	struct FFriendCommonPart_FriendData           friendTarget;                                      // 0x0000(0x0468)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendAcceptFriendResponse) == 0x000008, "Wrong alignment on FFriendAcceptFriendResponse");
static_assert(sizeof(FFriendAcceptFriendResponse) == 0x000468, "Wrong size on FFriendAcceptFriendResponse");
static_assert(offsetof(FFriendAcceptFriendResponse, friendTarget) == 0x000000, "Member 'FFriendAcceptFriendResponse::friendTarget' has a wrong offset!");

// ScriptStruct UnionSystem.LobbyInitData
// 0x0010 (0x0010 - 0x0000)
struct FLobbyInitData final
{
public:
	TArray<EStageId>                              CourseMainID;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyInitData) == 0x000008, "Wrong alignment on FLobbyInitData");
static_assert(sizeof(FLobbyInitData) == 0x000010, "Wrong size on FLobbyInitData");
static_assert(offsetof(FLobbyInitData, CourseMainID) == 0x000000, "Member 'FLobbyInitData::CourseMainID' has a wrong offset!");

// ScriptStruct UnionSystem.UserGadgetPresetDataList
// 0x0010 (0x0010 - 0x0000)
struct FUserGadgetPresetDataList final
{
public:
	TArray<struct FUserGadgetPresetData>          list;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGadgetPresetDataList) == 0x000008, "Wrong alignment on FUserGadgetPresetDataList");
static_assert(sizeof(FUserGadgetPresetDataList) == 0x000010, "Wrong size on FUserGadgetPresetDataList");
static_assert(offsetof(FUserGadgetPresetDataList, list) == 0x000000, "Member 'FUserGadgetPresetDataList::list' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FestaRankingRewardData
// 0x0018 (0x0018 - 0x0000)
struct FNetMasterData_FestaRankingRewardData final
{
public:
	int32                                         rankingRewardId;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rankingId;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNumber;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         upper;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         titleId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ticketNum;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FestaRankingRewardData) == 0x000004, "Wrong alignment on FNetMasterData_FestaRankingRewardData");
static_assert(sizeof(FNetMasterData_FestaRankingRewardData) == 0x000018, "Wrong size on FNetMasterData_FestaRankingRewardData");
static_assert(offsetof(FNetMasterData_FestaRankingRewardData, rankingRewardId) == 0x000000, "Member 'FNetMasterData_FestaRankingRewardData::rankingRewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRankingRewardData, rankingId) == 0x000004, "Member 'FNetMasterData_FestaRankingRewardData::rankingId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRankingRewardData, rewardNumber) == 0x000008, "Member 'FNetMasterData_FestaRankingRewardData::rewardNumber' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRankingRewardData, upper) == 0x00000C, "Member 'FNetMasterData_FestaRankingRewardData::upper' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRankingRewardData, titleId) == 0x000010, "Member 'FNetMasterData_FestaRankingRewardData::titleId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRankingRewardData, ticketNum) == 0x000014, "Member 'FNetMasterData_FestaRankingRewardData::ticketNum' has a wrong offset!");

// ScriptStruct UnionSystem.SoundHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FSoundHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoundHandle) == 0x000004, "Wrong alignment on FSoundHandle");
static_assert(sizeof(FSoundHandle) == 0x000004, "Wrong size on FSoundHandle");

// ScriptStruct UnionSystem.GrandPrixTravelStageSetting
// 0x0008 (0x0010 - 0x0008)
struct FGrandPrixTravelStageSetting final : public FTableRowBase
{
public:
	EStageId                                      TravelStageId;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpen;                                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIrregular;                                        // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGrandPrixTravelStageSetting) == 0x000008, "Wrong alignment on FGrandPrixTravelStageSetting");
static_assert(sizeof(FGrandPrixTravelStageSetting) == 0x000010, "Wrong size on FGrandPrixTravelStageSetting");
static_assert(offsetof(FGrandPrixTravelStageSetting, TravelStageId) == 0x000008, "Member 'FGrandPrixTravelStageSetting::TravelStageId' has a wrong offset!");
static_assert(offsetof(FGrandPrixTravelStageSetting, bOpen) == 0x000009, "Member 'FGrandPrixTravelStageSetting::bOpen' has a wrong offset!");
static_assert(offsetof(FGrandPrixTravelStageSetting, bIrregular) == 0x00000A, "Member 'FGrandPrixTravelStageSetting::bIrregular' has a wrong offset!");

// ScriptStruct UnionSystem.GrandPrixStageSetting
// 0x0018 (0x0020 - 0x0008)
struct FGrandPrixStageSetting final : public FTableRowBase
{
public:
	EStageId                                      MainStageId;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGrandPrixTravelStageSetting>   DefaultTravelStageSettings;                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGrandPrixStageSetting) == 0x000008, "Wrong alignment on FGrandPrixStageSetting");
static_assert(sizeof(FGrandPrixStageSetting) == 0x000020, "Wrong size on FGrandPrixStageSetting");
static_assert(offsetof(FGrandPrixStageSetting, MainStageId) == 0x000008, "Member 'FGrandPrixStageSetting::MainStageId' has a wrong offset!");
static_assert(offsetof(FGrandPrixStageSetting, DefaultTravelStageSettings) == 0x000010, "Member 'FGrandPrixStageSetting::DefaultTravelStageSettings' has a wrong offset!");

// ScriptStruct UnionSystem.GrandPrixStages
// 0x0048 (0x0050 - 0x0008)
struct FGrandPrixStages final : public FTableRowBase
{
public:
	EGrandPrixId                                  GrandPrixId;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   GrandPrixName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GrandPrixFinalRoundInfo;                           // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<EStageId>                              StageId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGrandPrixStageSetting>         Stages;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGrandPrixStages) == 0x000008, "Wrong alignment on FGrandPrixStages");
static_assert(sizeof(FGrandPrixStages) == 0x000050, "Wrong size on FGrandPrixStages");
static_assert(offsetof(FGrandPrixStages, GrandPrixId) == 0x000008, "Member 'FGrandPrixStages::GrandPrixId' has a wrong offset!");
static_assert(offsetof(FGrandPrixStages, GrandPrixName) == 0x000010, "Member 'FGrandPrixStages::GrandPrixName' has a wrong offset!");
static_assert(offsetof(FGrandPrixStages, GrandPrixFinalRoundInfo) == 0x000020, "Member 'FGrandPrixStages::GrandPrixFinalRoundInfo' has a wrong offset!");
static_assert(offsetof(FGrandPrixStages, StageId) == 0x000030, "Member 'FGrandPrixStages::StageId' has a wrong offset!");
static_assert(offsetof(FGrandPrixStages, Stages) == 0x000040, "Member 'FGrandPrixStages::Stages' has a wrong offset!");

// ScriptStruct UnionSystem.EndActivityOption
// 0x0001 (0x0001 - 0x0000)
struct FEndActivityOption final
{
public:
	EGameActivityOutcomeType                      Outcome;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndActivityOption) == 0x000001, "Wrong alignment on FEndActivityOption");
static_assert(sizeof(FEndActivityOption) == 0x000001, "Wrong size on FEndActivityOption");
static_assert(offsetof(FEndActivityOption, Outcome) == 0x000000, "Member 'FEndActivityOption::Outcome' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingSubscribeFestaRequest
// 0x0058 (0x0058 - 0x0000)
struct FMatchmakingSubscribeFestaRequest final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIds;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 matchVersion;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeries;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMatchmakingCommonRequest_EntryData> entryDataList;                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingSubscribeFestaRequest) == 0x000008, "Wrong alignment on FMatchmakingSubscribeFestaRequest");
static_assert(sizeof(FMatchmakingSubscribeFestaRequest) == 0x000058, "Wrong size on FMatchmakingSubscribeFestaRequest");
static_assert(offsetof(FMatchmakingSubscribeFestaRequest, LobbyId) == 0x000000, "Member 'FMatchmakingSubscribeFestaRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeFestaRequest, UserIds) == 0x000010, "Member 'FMatchmakingSubscribeFestaRequest::UserIds' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeFestaRequest, Region) == 0x000020, "Member 'FMatchmakingSubscribeFestaRequest::Region' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeFestaRequest, matchVersion) == 0x000030, "Member 'FMatchmakingSubscribeFestaRequest::matchVersion' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeFestaRequest, IsSeries) == 0x000040, "Member 'FMatchmakingSubscribeFestaRequest::IsSeries' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeFestaRequest, entryDataList) == 0x000048, "Member 'FMatchmakingSubscribeFestaRequest::entryDataList' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingSubscribeFestaResponse
// 0x00A8 (0x00A8 - 0x0000)
struct FMatchmakingSubscribeFestaResponse final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ticketId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchmakingCommonResponse_Subscribe   subscribe;                                         // 0x0020(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingSubscribeFestaResponse) == 0x000008, "Wrong alignment on FMatchmakingSubscribeFestaResponse");
static_assert(sizeof(FMatchmakingSubscribeFestaResponse) == 0x0000A8, "Wrong size on FMatchmakingSubscribeFestaResponse");
static_assert(offsetof(FMatchmakingSubscribeFestaResponse, LobbyId) == 0x000000, "Member 'FMatchmakingSubscribeFestaResponse::LobbyId' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeFestaResponse, ticketId) == 0x000010, "Member 'FMatchmakingSubscribeFestaResponse::ticketId' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeFestaResponse, subscribe) == 0x000020, "Member 'FMatchmakingSubscribeFestaResponse::subscribe' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_ProgressRival
// 0x00B0 (0x00B0 - 0x0000)
struct FCRM_ProgressRival final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key2;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key10;                                             // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_ProgressRival) == 0x000008, "Wrong alignment on FCRM_ProgressRival");
static_assert(sizeof(FCRM_ProgressRival) == 0x0000B0, "Wrong size on FCRM_ProgressRival");
static_assert(offsetof(FCRM_ProgressRival, action_type) == 0x000000, "Member 'FCRM_ProgressRival::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressRival, key1) == 0x000010, "Member 'FCRM_ProgressRival::key1' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressRival, key2) == 0x000020, "Member 'FCRM_ProgressRival::key2' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressRival, key3) == 0x000030, "Member 'FCRM_ProgressRival::key3' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressRival, key4) == 0x000040, "Member 'FCRM_ProgressRival::key4' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressRival, key5) == 0x000050, "Member 'FCRM_ProgressRival::key5' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressRival, key6) == 0x000060, "Member 'FCRM_ProgressRival::key6' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressRival, key7) == 0x000070, "Member 'FCRM_ProgressRival::key7' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressRival, key8) == 0x000080, "Member 'FCRM_ProgressRival::key8' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressRival, key9) == 0x000090, "Member 'FCRM_ProgressRival::key9' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressRival, key10) == 0x0000A0, "Member 'FCRM_ProgressRival::key10' has a wrong offset!");

// ScriptStruct UnionSystem.CustomRaceSettingLine
// 0x0050 (0x0058 - 0x0008)
struct FCustomRaceSettingLine final : public FTableRowBase
{
public:
	ECustomRaceSettingLine                        SettingLineNumber;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SettingLineName;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         ButtonNum;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DefaultIndex;                                      // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ButtonTextArr;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           ExplainArr;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CountNumArr;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomRaceSettingLine) == 0x000008, "Wrong alignment on FCustomRaceSettingLine");
static_assert(sizeof(FCustomRaceSettingLine) == 0x000058, "Wrong size on FCustomRaceSettingLine");
static_assert(offsetof(FCustomRaceSettingLine, SettingLineNumber) == 0x000008, "Member 'FCustomRaceSettingLine::SettingLineNumber' has a wrong offset!");
static_assert(offsetof(FCustomRaceSettingLine, SettingLineName) == 0x000010, "Member 'FCustomRaceSettingLine::SettingLineName' has a wrong offset!");
static_assert(offsetof(FCustomRaceSettingLine, ButtonNum) == 0x000020, "Member 'FCustomRaceSettingLine::ButtonNum' has a wrong offset!");
static_assert(offsetof(FCustomRaceSettingLine, DefaultIndex) == 0x000021, "Member 'FCustomRaceSettingLine::DefaultIndex' has a wrong offset!");
static_assert(offsetof(FCustomRaceSettingLine, ButtonTextArr) == 0x000028, "Member 'FCustomRaceSettingLine::ButtonTextArr' has a wrong offset!");
static_assert(offsetof(FCustomRaceSettingLine, ExplainArr) == 0x000038, "Member 'FCustomRaceSettingLine::ExplainArr' has a wrong offset!");
static_assert(offsetof(FCustomRaceSettingLine, CountNumArr) == 0x000048, "Member 'FCustomRaceSettingLine::CountNumArr' has a wrong offset!");

// ScriptStruct UnionSystem.MatereialPlayerBindInfo
// 0x0020 (0x0020 - 0x0000)
struct FMatereialPlayerBindInfo final
{
public:
	class UMeshComponent*                         TargetComponent;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                            CurveTable;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterial>>       TargetMaterials;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatereialPlayerBindInfo) == 0x000008, "Wrong alignment on FMatereialPlayerBindInfo");
static_assert(sizeof(FMatereialPlayerBindInfo) == 0x000020, "Wrong size on FMatereialPlayerBindInfo");
static_assert(offsetof(FMatereialPlayerBindInfo, TargetComponent) == 0x000000, "Member 'FMatereialPlayerBindInfo::TargetComponent' has a wrong offset!");
static_assert(offsetof(FMatereialPlayerBindInfo, CurveTable) == 0x000008, "Member 'FMatereialPlayerBindInfo::CurveTable' has a wrong offset!");
static_assert(offsetof(FMatereialPlayerBindInfo, TargetMaterials) == 0x000010, "Member 'FMatereialPlayerBindInfo::TargetMaterials' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_LegendCompeRewardData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_LegendCompeRewardData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardPatternId;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_LegendCompeRewardData) == 0x000004, "Wrong alignment on FNetMasterData_LegendCompeRewardData");
static_assert(sizeof(FNetMasterData_LegendCompeRewardData) == 0x000014, "Wrong size on FNetMasterData_LegendCompeRewardData");
static_assert(offsetof(FNetMasterData_LegendCompeRewardData, ID) == 0x000000, "Member 'FNetMasterData_LegendCompeRewardData::ID' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardData, rewardPatternId) == 0x000004, "Member 'FNetMasterData_LegendCompeRewardData::rewardPatternId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardData, rewardType) == 0x000008, "Member 'FNetMasterData_LegendCompeRewardData::rewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardData, rewardId) == 0x00000C, "Member 'FNetMasterData_LegendCompeRewardData::rewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardData, rewardNum) == 0x000010, "Member 'FNetMasterData_LegendCompeRewardData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetRankingRankMatchResponse
// 0x0020 (0x0020 - 0x0000)
struct FRankingGetRankingRankMatchResponse final
{
public:
	class FString                                 signedUrl;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 updatedAt;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetRankingRankMatchResponse) == 0x000008, "Wrong alignment on FRankingGetRankingRankMatchResponse");
static_assert(sizeof(FRankingGetRankingRankMatchResponse) == 0x000020, "Wrong size on FRankingGetRankingRankMatchResponse");
static_assert(offsetof(FRankingGetRankingRankMatchResponse, signedUrl) == 0x000000, "Member 'FRankingGetRankingRankMatchResponse::signedUrl' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingRankMatchResponse, updatedAt) == 0x000010, "Member 'FRankingGetRankingRankMatchResponse::updatedAt' has a wrong offset!");

// ScriptStruct UnionSystem.Common_FestaData
// 0x0008 (0x0008 - 0x0000)
struct FCommon_FestaData final
{
public:
	int32                                         festaPoint;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         winCount;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_FestaData) == 0x000004, "Wrong alignment on FCommon_FestaData");
static_assert(sizeof(FCommon_FestaData) == 0x000008, "Wrong size on FCommon_FestaData");
static_assert(offsetof(FCommon_FestaData, festaPoint) == 0x000000, "Member 'FCommon_FestaData::festaPoint' has a wrong offset!");
static_assert(offsetof(FCommon_FestaData, winCount) == 0x000004, "Member 'FCommon_FestaData::winCount' has a wrong offset!");

// ScriptStruct UnionSystem.Common_FestaBonusData
// 0x0028 (0x0028 - 0x0000)
struct FCommon_FestaBonusData final
{
public:
	bool                                          isBonus;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         bonusRatio;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 bonusStartTime;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 bonusEndTime;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_FestaBonusData) == 0x000008, "Wrong alignment on FCommon_FestaBonusData");
static_assert(sizeof(FCommon_FestaBonusData) == 0x000028, "Wrong size on FCommon_FestaBonusData");
static_assert(offsetof(FCommon_FestaBonusData, isBonus) == 0x000000, "Member 'FCommon_FestaBonusData::isBonus' has a wrong offset!");
static_assert(offsetof(FCommon_FestaBonusData, bonusRatio) == 0x000004, "Member 'FCommon_FestaBonusData::bonusRatio' has a wrong offset!");
static_assert(offsetof(FCommon_FestaBonusData, bonusStartTime) == 0x000008, "Member 'FCommon_FestaBonusData::bonusStartTime' has a wrong offset!");
static_assert(offsetof(FCommon_FestaBonusData, bonusEndTime) == 0x000018, "Member 'FCommon_FestaBonusData::bonusEndTime' has a wrong offset!");

// ScriptStruct UnionSystem.Common_FestaTimeData
// 0x0028 (0x0028 - 0x0000)
struct FCommon_FestaTimeData final
{
public:
	int32                                         raceRuleId;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_FestaTimeData) == 0x000008, "Wrong alignment on FCommon_FestaTimeData");
static_assert(sizeof(FCommon_FestaTimeData) == 0x000028, "Wrong size on FCommon_FestaTimeData");
static_assert(offsetof(FCommon_FestaTimeData, raceRuleId) == 0x000000, "Member 'FCommon_FestaTimeData::raceRuleId' has a wrong offset!");
static_assert(offsetof(FCommon_FestaTimeData, StartTime) == 0x000008, "Member 'FCommon_FestaTimeData::StartTime' has a wrong offset!");
static_assert(offsetof(FCommon_FestaTimeData, endTime) == 0x000018, "Member 'FCommon_FestaTimeData::endTime' has a wrong offset!");

// ScriptStruct UnionSystem.FestaFestaTopResponse
// 0x0048 (0x0048 - 0x0000)
struct FFestaFestaTopResponse final
{
public:
	struct FCommon_FestaData                      festaData;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_FestaBonusData                 bonusData;                                         // 0x0008(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          isVoltage;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ruleId;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCommon_FestaTimeData>          timeSchedule;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaFestaTopResponse) == 0x000008, "Wrong alignment on FFestaFestaTopResponse");
static_assert(sizeof(FFestaFestaTopResponse) == 0x000048, "Wrong size on FFestaFestaTopResponse");
static_assert(offsetof(FFestaFestaTopResponse, festaData) == 0x000000, "Member 'FFestaFestaTopResponse::festaData' has a wrong offset!");
static_assert(offsetof(FFestaFestaTopResponse, bonusData) == 0x000008, "Member 'FFestaFestaTopResponse::bonusData' has a wrong offset!");
static_assert(offsetof(FFestaFestaTopResponse, isVoltage) == 0x000030, "Member 'FFestaFestaTopResponse::isVoltage' has a wrong offset!");
static_assert(offsetof(FFestaFestaTopResponse, ruleId) == 0x000034, "Member 'FFestaFestaTopResponse::ruleId' has a wrong offset!");
static_assert(offsetof(FFestaFestaTopResponse, timeSchedule) == 0x000038, "Member 'FFestaFestaTopResponse::timeSchedule' has a wrong offset!");

// ScriptStruct UnionSystem.ItemSwitchSetting
// 0x0010 (0x0018 - 0x0008)
struct FItemSwitchSetting final : public FTableRowBase
{
public:
	TArray<struct FItemSwitchSettingSingle>       ItemSwitchSettingArr;                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSwitchSetting) == 0x000008, "Wrong alignment on FItemSwitchSetting");
static_assert(sizeof(FItemSwitchSetting) == 0x000018, "Wrong size on FItemSwitchSetting");
static_assert(offsetof(FItemSwitchSetting, ItemSwitchSettingArr) == 0x000008, "Member 'FItemSwitchSetting::ItemSwitchSettingArr' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetRankingFestaPointResponse
// 0x0020 (0x0020 - 0x0000)
struct FRankingGetRankingFestaPointResponse final
{
public:
	class FString                                 signedUrl;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 updatedAt;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetRankingFestaPointResponse) == 0x000008, "Wrong alignment on FRankingGetRankingFestaPointResponse");
static_assert(sizeof(FRankingGetRankingFestaPointResponse) == 0x000020, "Wrong size on FRankingGetRankingFestaPointResponse");
static_assert(offsetof(FRankingGetRankingFestaPointResponse, signedUrl) == 0x000000, "Member 'FRankingGetRankingFestaPointResponse::signedUrl' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingFestaPointResponse, updatedAt) == 0x000010, "Member 'FRankingGetRankingFestaPointResponse::updatedAt' has a wrong offset!");

// ScriptStruct UnionSystem.UserFestaRewardProgressData
// 0x0010 (0x0010 - 0x0000)
struct FUserFestaRewardProgressData final
{
public:
	int32                                         festaId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetRoundRewardSheetNo;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetPointRewardSheetNo;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetPointRewardIndex;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserFestaRewardProgressData) == 0x000004, "Wrong alignment on FUserFestaRewardProgressData");
static_assert(sizeof(FUserFestaRewardProgressData) == 0x000010, "Wrong size on FUserFestaRewardProgressData");
static_assert(offsetof(FUserFestaRewardProgressData, festaId) == 0x000000, "Member 'FUserFestaRewardProgressData::festaId' has a wrong offset!");
static_assert(offsetof(FUserFestaRewardProgressData, GetRoundRewardSheetNo) == 0x000004, "Member 'FUserFestaRewardProgressData::GetRoundRewardSheetNo' has a wrong offset!");
static_assert(offsetof(FUserFestaRewardProgressData, GetPointRewardSheetNo) == 0x000008, "Member 'FUserFestaRewardProgressData::GetPointRewardSheetNo' has a wrong offset!");
static_assert(offsetof(FUserFestaRewardProgressData, GetPointRewardIndex) == 0x00000C, "Member 'FUserFestaRewardProgressData::GetPointRewardIndex' has a wrong offset!");

// ScriptStruct UnionSystem.StartActivityOption
// 0x0001 (0x0001 - 0x0000)
struct FStartActivityOption final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStartActivityOption) == 0x000001, "Wrong alignment on FStartActivityOption");
static_assert(sizeof(FStartActivityOption) == 0x000001, "Wrong size on FStartActivityOption");

// ScriptStruct UnionSystem.Common_FestaBonusChanceData
// 0x0008 (0x0008 - 0x0000)
struct FCommon_FestaBonusChanceData final
{
public:
	int32                                         BonusChanceType;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_FestaBonusChanceData) == 0x000004, "Wrong alignment on FCommon_FestaBonusChanceData");
static_assert(sizeof(FCommon_FestaBonusChanceData) == 0x000008, "Wrong size on FCommon_FestaBonusChanceData");
static_assert(offsetof(FCommon_FestaBonusChanceData, BonusChanceType) == 0x000000, "Member 'FCommon_FestaBonusChanceData::BonusChanceType' has a wrong offset!");
static_assert(offsetof(FCommon_FestaBonusChanceData, Param) == 0x000004, "Member 'FCommon_FestaBonusChanceData::Param' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_ReleaseStickerData
// 0x0018 (0x0018 - 0x0000)
struct FNetMasterData_ReleaseStickerData final
{
public:
	int32                                         stickerId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_ReleaseStickerData) == 0x000008, "Wrong alignment on FNetMasterData_ReleaseStickerData");
static_assert(sizeof(FNetMasterData_ReleaseStickerData) == 0x000018, "Wrong size on FNetMasterData_ReleaseStickerData");
static_assert(offsetof(FNetMasterData_ReleaseStickerData, stickerId) == 0x000000, "Member 'FNetMasterData_ReleaseStickerData::stickerId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_ReleaseStickerData, releaseTime) == 0x000008, "Member 'FNetMasterData_ReleaseStickerData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.FestaPointRewardUIData
// 0x0050 (0x0050 - 0x0000)
struct FFestaPointRewardUIData final
{
public:
	EFestaRewardType                              rewardType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         rewardNumber;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardType                                   itemType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TypeName;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ItemName;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          IsDisplayItemCount;                                // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemCount;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         isNext;                                            // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLastNormalReward;                                // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFestaPointRewardUIData) == 0x000008, "Wrong alignment on FFestaPointRewardUIData");
static_assert(sizeof(FFestaPointRewardUIData) == 0x000050, "Wrong size on FFestaPointRewardUIData");
static_assert(offsetof(FFestaPointRewardUIData, rewardType) == 0x000000, "Member 'FFestaPointRewardUIData::rewardType' has a wrong offset!");
static_assert(offsetof(FFestaPointRewardUIData, rewardNumber) == 0x000004, "Member 'FFestaPointRewardUIData::rewardNumber' has a wrong offset!");
static_assert(offsetof(FFestaPointRewardUIData, itemType) == 0x000008, "Member 'FFestaPointRewardUIData::itemType' has a wrong offset!");
static_assert(offsetof(FFestaPointRewardUIData, ItemId) == 0x00000C, "Member 'FFestaPointRewardUIData::ItemId' has a wrong offset!");
static_assert(offsetof(FFestaPointRewardUIData, Texture) == 0x000010, "Member 'FFestaPointRewardUIData::Texture' has a wrong offset!");
static_assert(offsetof(FFestaPointRewardUIData, TypeName) == 0x000018, "Member 'FFestaPointRewardUIData::TypeName' has a wrong offset!");
static_assert(offsetof(FFestaPointRewardUIData, ItemName) == 0x000028, "Member 'FFestaPointRewardUIData::ItemName' has a wrong offset!");
static_assert(offsetof(FFestaPointRewardUIData, IsDisplayItemCount) == 0x000038, "Member 'FFestaPointRewardUIData::IsDisplayItemCount' has a wrong offset!");
static_assert(offsetof(FFestaPointRewardUIData, ItemCount) == 0x00003C, "Member 'FFestaPointRewardUIData::ItemCount' has a wrong offset!");
static_assert(offsetof(FFestaPointRewardUIData, Point) == 0x000040, "Member 'FFestaPointRewardUIData::Point' has a wrong offset!");
static_assert(offsetof(FFestaPointRewardUIData, isNext) == 0x000044, "Member 'FFestaPointRewardUIData::isNext' has a wrong offset!");
static_assert(offsetof(FFestaPointRewardUIData, IsLastNormalReward) == 0x000048, "Member 'FFestaPointRewardUIData::IsLastNormalReward' has a wrong offset!");

// ScriptStruct UnionSystem.DebugChangeRankMatchRateRequest
// 0x0004 (0x0004 - 0x0000)
struct FDebugChangeRankMatchRateRequest final
{
public:
	int32                                         Rate;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugChangeRankMatchRateRequest) == 0x000004, "Wrong alignment on FDebugChangeRankMatchRateRequest");
static_assert(sizeof(FDebugChangeRankMatchRateRequest) == 0x000004, "Wrong size on FDebugChangeRankMatchRateRequest");
static_assert(offsetof(FDebugChangeRankMatchRateRequest, Rate) == 0x000000, "Member 'FDebugChangeRankMatchRateRequest::Rate' has a wrong offset!");

// ScriptStruct UnionSystem.GroupUIData
// 0x0028 (0x0030 - 0x0008)
struct FGroupUIData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupUIData) == 0x000008, "Wrong alignment on FGroupUIData");
static_assert(sizeof(FGroupUIData) == 0x000030, "Wrong size on FGroupUIData");
static_assert(offsetof(FGroupUIData, IconTexture) == 0x000008, "Member 'FGroupUIData::IconTexture' has a wrong offset!");

// ScriptStruct UnionSystem.SoftwareKeyboardResult
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FSoftwareKeyboardResult final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoftwareKeyboardResult) == 0x000008, "Wrong alignment on FSoftwareKeyboardResult");
static_assert(sizeof(FSoftwareKeyboardResult) == 0x000018, "Wrong size on FSoftwareKeyboardResult");

// ScriptStruct UnionSystem.NetMasterDataVersion
// 0x0020 (0x0020 - 0x0000)
struct FNetMasterDataVersion final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterDataVersion) == 0x000008, "Wrong alignment on FNetMasterDataVersion");
static_assert(sizeof(FNetMasterDataVersion) == 0x000020, "Wrong size on FNetMasterDataVersion");
static_assert(offsetof(FNetMasterDataVersion, Name) == 0x000000, "Member 'FNetMasterDataVersion::Name' has a wrong offset!");
static_assert(offsetof(FNetMasterDataVersion, Version) == 0x000010, "Member 'FNetMasterDataVersion::Version' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_GadgetUsage
// 0x0020 (0x0020 - 0x0000)
struct FCRM_GadgetUsage final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_GadgetUsage) == 0x000008, "Wrong alignment on FCRM_GadgetUsage");
static_assert(sizeof(FCRM_GadgetUsage) == 0x000020, "Wrong size on FCRM_GadgetUsage");
static_assert(offsetof(FCRM_GadgetUsage, action_type) == 0x000000, "Member 'FCRM_GadgetUsage::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_GadgetUsage, key1) == 0x000010, "Member 'FCRM_GadgetUsage::key1' has a wrong offset!");

// ScriptStruct UnionSystem.MyRankingAsyncResult
// 0x0018 (0x0138 - 0x0120)
struct FMyRankingAsyncResult final : public FMyRankingData
{
public:
	uint8                                         Pad_120[0x18];                                     // 0x0120(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMyRankingAsyncResult) == 0x000008, "Wrong alignment on FMyRankingAsyncResult");
static_assert(sizeof(FMyRankingAsyncResult) == 0x000138, "Wrong size on FMyRankingAsyncResult");

// ScriptStruct UnionSystem.TutorialControllerKey
// 0x0020 (0x0020 - 0x0000)
struct FTutorialControllerKey final
{
public:
	ERaceInputKey                                 RaceKey;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETutorialControllerDirection>          Directions;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ETutorialControllerOperation                  KeyOperation;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTutorialControllerKey) == 0x000008, "Wrong alignment on FTutorialControllerKey");
static_assert(sizeof(FTutorialControllerKey) == 0x000020, "Wrong size on FTutorialControllerKey");
static_assert(offsetof(FTutorialControllerKey, RaceKey) == 0x000000, "Member 'FTutorialControllerKey::RaceKey' has a wrong offset!");
static_assert(offsetof(FTutorialControllerKey, Directions) == 0x000008, "Member 'FTutorialControllerKey::Directions' has a wrong offset!");
static_assert(offsetof(FTutorialControllerKey, KeyOperation) == 0x000018, "Member 'FTutorialControllerKey::KeyOperation' has a wrong offset!");

// ScriptStruct UnionSystem.TutorialControllerKeys
// 0x0010 (0x0010 - 0x0000)
struct FTutorialControllerKeys final
{
public:
	TArray<struct FTutorialControllerKey>         KeyOperations;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialControllerKeys) == 0x000008, "Wrong alignment on FTutorialControllerKeys");
static_assert(sizeof(FTutorialControllerKeys) == 0x000010, "Wrong size on FTutorialControllerKeys");
static_assert(offsetof(FTutorialControllerKeys, KeyOperations) == 0x000000, "Member 'FTutorialControllerKeys::KeyOperations' has a wrong offset!");

// ScriptStruct UnionSystem.ControllerSettings
// 0x0068 (0x0068 - 0x0000)
struct FControllerSettings final
{
public:
	bool                                          bInverseAcceptAndCancel;                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuControllerViewType                       MenuControllerViewType;                            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserAssistData                        UserAssistData;                                    // 0x0002(0x0005)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bControllerGyroAssist;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableForceFeedback;                               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyConfigOperationType                       KeyConfigOperationType;                            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class FString>                    _CustomKeyConfigs;                                 // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StickSensitivity;                                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControllerSettings) == 0x000008, "Wrong alignment on FControllerSettings");
static_assert(sizeof(FControllerSettings) == 0x000068, "Wrong size on FControllerSettings");
static_assert(offsetof(FControllerSettings, bInverseAcceptAndCancel) == 0x000000, "Member 'FControllerSettings::bInverseAcceptAndCancel' has a wrong offset!");
static_assert(offsetof(FControllerSettings, MenuControllerViewType) == 0x000001, "Member 'FControllerSettings::MenuControllerViewType' has a wrong offset!");
static_assert(offsetof(FControllerSettings, UserAssistData) == 0x000002, "Member 'FControllerSettings::UserAssistData' has a wrong offset!");
static_assert(offsetof(FControllerSettings, bControllerGyroAssist) == 0x000007, "Member 'FControllerSettings::bControllerGyroAssist' has a wrong offset!");
static_assert(offsetof(FControllerSettings, EnableForceFeedback) == 0x000008, "Member 'FControllerSettings::EnableForceFeedback' has a wrong offset!");
static_assert(offsetof(FControllerSettings, KeyConfigOperationType) == 0x000009, "Member 'FControllerSettings::KeyConfigOperationType' has a wrong offset!");
static_assert(offsetof(FControllerSettings, _CustomKeyConfigs) == 0x000010, "Member 'FControllerSettings::_CustomKeyConfigs' has a wrong offset!");
static_assert(offsetof(FControllerSettings, bReverse) == 0x000060, "Member 'FControllerSettings::bReverse' has a wrong offset!");
static_assert(offsetof(FControllerSettings, StickSensitivity) == 0x000064, "Member 'FControllerSettings::StickSensitivity' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataFinish
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataFinish final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataFinish) == 0x000008, "Wrong alignment on FCRM_RadjDataFinish");
static_assert(sizeof(FCRM_RadjDataFinish) == 0x000038, "Wrong size on FCRM_RadjDataFinish");
static_assert(offsetof(FCRM_RadjDataFinish, action_type) == 0x000000, "Member 'FCRM_RadjDataFinish::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataFinish, key1) == 0x000010, "Member 'FCRM_RadjDataFinish::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataFinish, key2) == 0x000018, "Member 'FCRM_RadjDataFinish::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataFinish, key3) == 0x000028, "Member 'FCRM_RadjDataFinish::key3' has a wrong offset!");

// ScriptStruct UnionSystem.PartyRacePresetSetting
// 0x00B0 (0x00B8 - 0x0008)
struct FPartyRacePresetSetting final : public FTableRowBase
{
public:
	EPartyRacePreset                              PartyRacePresetType;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PartyRacePresetName;                               // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PartyRacePresetDetail;                             // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           PartyRacePresetColor;                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              PartyRacePresetImage;                              // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ECustomRaceSettingLine>                SettingPickUp;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ESpeedClassId                                 SpeedClass;                                        // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuSpeedClassId                             MenuSpeedClassId;                                  // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingGrouping                          GroupSetting;                                      // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingMatchRule                         MatchRule;                                         // 0x007B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaceCountIndex;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopPointSettlementIndex;                           // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         raceCount;                                         // 0x0084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopPointSettlement;                                // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingComSpeed                          ComSpeed;                                          // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingHandicap                          Handicap;                                          // 0x008D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingItemAppearanceRule                ItemAppearanceRule;                                // 0x008E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingCourseSelecting                   CourseSelecting;                                   // 0x008F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceIrregularSetting                   IrregularSetting;                                  // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceSettingPointUpChance               PointUpChance;                                     // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingSpecialMCEvent                    MCEvent;                                           // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  MCEventSwitchArr;                                  // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MCEventDataId;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMCEventTravelCourseChange                    TravelCourseChange;                                // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMCEventIrregularGate                         IrregularGate;                                     // 0x00AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingSpecialGadgetUsing                GadgetUsing;                                       // 0x00AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingSpecialAutoGetItem                AutoGetItem;                                       // 0x00AF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceRingLostSetting                    RingLost;                                          // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceTripleCourseSetting                TripleCourse;                                      // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectPlacementType                          ObjectPlacementType;                               // 0x00B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFestaRaceRule                                FestaRaceRule;                                     // 0x00B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupRaceRule                                GroupRaceRule;                                     // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceBonus                                    RaceBonus;                                         // 0x00B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingGoalPoint                         GoalPoint;                                         // 0x00B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B7[0x1];                                       // 0x00B7(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyRacePresetSetting) == 0x000008, "Wrong alignment on FPartyRacePresetSetting");
static_assert(sizeof(FPartyRacePresetSetting) == 0x0000B8, "Wrong size on FPartyRacePresetSetting");
static_assert(offsetof(FPartyRacePresetSetting, PartyRacePresetType) == 0x000008, "Member 'FPartyRacePresetSetting::PartyRacePresetType' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, PartyRacePresetName) == 0x000010, "Member 'FPartyRacePresetSetting::PartyRacePresetName' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, PartyRacePresetDetail) == 0x000020, "Member 'FPartyRacePresetSetting::PartyRacePresetDetail' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, PartyRacePresetColor) == 0x000030, "Member 'FPartyRacePresetSetting::PartyRacePresetColor' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, PartyRacePresetImage) == 0x000040, "Member 'FPartyRacePresetSetting::PartyRacePresetImage' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, SettingPickUp) == 0x000068, "Member 'FPartyRacePresetSetting::SettingPickUp' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, SpeedClass) == 0x000078, "Member 'FPartyRacePresetSetting::SpeedClass' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, MenuSpeedClassId) == 0x000079, "Member 'FPartyRacePresetSetting::MenuSpeedClassId' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, GroupSetting) == 0x00007A, "Member 'FPartyRacePresetSetting::GroupSetting' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, MatchRule) == 0x00007B, "Member 'FPartyRacePresetSetting::MatchRule' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, RaceCountIndex) == 0x00007C, "Member 'FPartyRacePresetSetting::RaceCountIndex' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, TopPointSettlementIndex) == 0x000080, "Member 'FPartyRacePresetSetting::TopPointSettlementIndex' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, raceCount) == 0x000084, "Member 'FPartyRacePresetSetting::raceCount' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, TopPointSettlement) == 0x000088, "Member 'FPartyRacePresetSetting::TopPointSettlement' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, ComSpeed) == 0x00008C, "Member 'FPartyRacePresetSetting::ComSpeed' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, Handicap) == 0x00008D, "Member 'FPartyRacePresetSetting::Handicap' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, ItemAppearanceRule) == 0x00008E, "Member 'FPartyRacePresetSetting::ItemAppearanceRule' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, CourseSelecting) == 0x00008F, "Member 'FPartyRacePresetSetting::CourseSelecting' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, IrregularSetting) == 0x000090, "Member 'FPartyRacePresetSetting::IrregularSetting' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, PointUpChance) == 0x000091, "Member 'FPartyRacePresetSetting::PointUpChance' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, MCEvent) == 0x000092, "Member 'FPartyRacePresetSetting::MCEvent' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, MCEventSwitchArr) == 0x000098, "Member 'FPartyRacePresetSetting::MCEventSwitchArr' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, MCEventDataId) == 0x0000A8, "Member 'FPartyRacePresetSetting::MCEventDataId' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, TravelCourseChange) == 0x0000AC, "Member 'FPartyRacePresetSetting::TravelCourseChange' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, IrregularGate) == 0x0000AD, "Member 'FPartyRacePresetSetting::IrregularGate' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, GadgetUsing) == 0x0000AE, "Member 'FPartyRacePresetSetting::GadgetUsing' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, AutoGetItem) == 0x0000AF, "Member 'FPartyRacePresetSetting::AutoGetItem' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, RingLost) == 0x0000B0, "Member 'FPartyRacePresetSetting::RingLost' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, TripleCourse) == 0x0000B1, "Member 'FPartyRacePresetSetting::TripleCourse' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, ObjectPlacementType) == 0x0000B2, "Member 'FPartyRacePresetSetting::ObjectPlacementType' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, FestaRaceRule) == 0x0000B3, "Member 'FPartyRacePresetSetting::FestaRaceRule' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, GroupRaceRule) == 0x0000B4, "Member 'FPartyRacePresetSetting::GroupRaceRule' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, RaceBonus) == 0x0000B5, "Member 'FPartyRacePresetSetting::RaceBonus' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSetting, GoalPoint) == 0x0000B6, "Member 'FPartyRacePresetSetting::GoalPoint' has a wrong offset!");

// ScriptStruct UnionSystem.DebugMatchmakingCommonResponse_ValetComPlayer
// 0x0028 (0x0028 - 0x0000)
struct FDebugMatchmakingCommonResponse_ValetComPlayer final
{
public:
	class FString                                 comPlayerId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetPlayerId;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         adjustRate;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugMatchmakingCommonResponse_ValetComPlayer) == 0x000008, "Wrong alignment on FDebugMatchmakingCommonResponse_ValetComPlayer");
static_assert(sizeof(FDebugMatchmakingCommonResponse_ValetComPlayer) == 0x000028, "Wrong size on FDebugMatchmakingCommonResponse_ValetComPlayer");
static_assert(offsetof(FDebugMatchmakingCommonResponse_ValetComPlayer, comPlayerId) == 0x000000, "Member 'FDebugMatchmakingCommonResponse_ValetComPlayer::comPlayerId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonResponse_ValetComPlayer, targetPlayerId) == 0x000010, "Member 'FDebugMatchmakingCommonResponse_ValetComPlayer::targetPlayerId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonResponse_ValetComPlayer, Rate) == 0x000020, "Member 'FDebugMatchmakingCommonResponse_ValetComPlayer::Rate' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonResponse_ValetComPlayer, adjustRate) == 0x000024, "Member 'FDebugMatchmakingCommonResponse_ValetComPlayer::adjustRate' has a wrong offset!");

// ScriptStruct UnionSystem.DebugMatchmakingCommonResponse_Subscribe
// 0x0080 (0x0080 - 0x0000)
struct FDebugMatchmakingCommonResponse_Subscribe final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ticketId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enableCrossPlatform;                               // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeries;                                          // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 matchVersion;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         divisionId;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         UserIds;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDebugMatchmakingCommonResponse_ValetComPlayer> valetComPlayers;                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 matchPlatform;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugMatchmakingCommonResponse_Subscribe) == 0x000008, "Wrong alignment on FDebugMatchmakingCommonResponse_Subscribe");
static_assert(sizeof(FDebugMatchmakingCommonResponse_Subscribe) == 0x000080, "Wrong size on FDebugMatchmakingCommonResponse_Subscribe");
static_assert(offsetof(FDebugMatchmakingCommonResponse_Subscribe, LobbyId) == 0x000000, "Member 'FDebugMatchmakingCommonResponse_Subscribe::LobbyId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonResponse_Subscribe, ticketId) == 0x000010, "Member 'FDebugMatchmakingCommonResponse_Subscribe::ticketId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonResponse_Subscribe, enableCrossPlatform) == 0x000020, "Member 'FDebugMatchmakingCommonResponse_Subscribe::enableCrossPlatform' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonResponse_Subscribe, IsSeries) == 0x000021, "Member 'FDebugMatchmakingCommonResponse_Subscribe::IsSeries' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonResponse_Subscribe, Region) == 0x000028, "Member 'FDebugMatchmakingCommonResponse_Subscribe::Region' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonResponse_Subscribe, matchVersion) == 0x000038, "Member 'FDebugMatchmakingCommonResponse_Subscribe::matchVersion' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonResponse_Subscribe, divisionId) == 0x000048, "Member 'FDebugMatchmakingCommonResponse_Subscribe::divisionId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonResponse_Subscribe, UserIds) == 0x000050, "Member 'FDebugMatchmakingCommonResponse_Subscribe::UserIds' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonResponse_Subscribe, valetComPlayers) == 0x000060, "Member 'FDebugMatchmakingCommonResponse_Subscribe::valetComPlayers' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingCommonResponse_Subscribe, matchPlatform) == 0x000070, "Member 'FDebugMatchmakingCommonResponse_Subscribe::matchPlatform' has a wrong offset!");

// ScriptStruct UnionSystem.DebugMatchmakingSubscribeRankMatchResponse
// 0x00A0 (0x00A0 - 0x0000)
struct FDebugMatchmakingSubscribeRankMatchResponse final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ticketId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDebugMatchmakingCommonResponse_Subscribe subscribe;                                      // 0x0020(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugMatchmakingSubscribeRankMatchResponse) == 0x000008, "Wrong alignment on FDebugMatchmakingSubscribeRankMatchResponse");
static_assert(sizeof(FDebugMatchmakingSubscribeRankMatchResponse) == 0x0000A0, "Wrong size on FDebugMatchmakingSubscribeRankMatchResponse");
static_assert(offsetof(FDebugMatchmakingSubscribeRankMatchResponse, LobbyId) == 0x000000, "Member 'FDebugMatchmakingSubscribeRankMatchResponse::LobbyId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeRankMatchResponse, ticketId) == 0x000010, "Member 'FDebugMatchmakingSubscribeRankMatchResponse::ticketId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeRankMatchResponse, subscribe) == 0x000020, "Member 'FDebugMatchmakingSubscribeRankMatchResponse::subscribe' has a wrong offset!");

// ScriptStruct UnionSystem.RewardBaseData
// 0x000C (0x000C - 0x0000)
struct FRewardBaseData
{
public:
	ERewardType                                   Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardBaseData) == 0x000004, "Wrong alignment on FRewardBaseData");
static_assert(sizeof(FRewardBaseData) == 0x00000C, "Wrong size on FRewardBaseData");
static_assert(offsetof(FRewardBaseData, Type) == 0x000000, "Member 'FRewardBaseData::Type' has a wrong offset!");
static_assert(offsetof(FRewardBaseData, ID) == 0x000004, "Member 'FRewardBaseData::ID' has a wrong offset!");
static_assert(offsetof(FRewardBaseData, Num) == 0x000008, "Member 'FRewardBaseData::Num' has a wrong offset!");

// ScriptStruct UnionSystem.CustomRaceSetting
// 0x0120 (0x0120 - 0x0000)
struct FCustomRaceSetting final
{
public:
	ESpeedClassId                                 SpeedClass;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceMirrorSetting                            RaceMirrorSetting;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingGrouping                          GroupSetting;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingGroupMode                         GroupMode;                                         // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, EGroupColorId>                    GroupIdGroupColorIdMap;                            // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, EMachineColorPresetId>            GroupIdMachineColorPresetIdMap;                    // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ERaceSettingMatchRule                         MatchRule;                                         // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         raceCount;                                         // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopPointSettlement;                                // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingComSpeed                          ComSpeed;                                          // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingHandicap                          Handicap;                                          // 0x00B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingItemAppearanceRule                ItemAppearanceRule;                                // 0x00B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingCourseSelecting                   CourseSelecting;                                   // 0x00B7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingSpecialMCEvent                    MCEvent;                                           // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  MCEventSwitchArr;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MCEventDataId;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMCEventTravelCourseChange                    TravelCourseChange;                                // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMCEventIrregularGate                         IrregularGate;                                     // 0x00D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingSpecialGadgetUsing                GadgetUsing;                                       // 0x00D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingSpecialAutoGetItem                AutoGetItem;                                       // 0x00D7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemSwitchSetting                     ItemSwitchSetting;                                 // 0x00D8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ECustomRaceIrregularSetting                   CustomRaceIrregularSetting;                        // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceSettingPointUpChance               CustomRaceSettingPointUpChance;                    // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceRingLostSetting                    CustomRaceRingLostSetting;                         // 0x00F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceTripleCourseSetting                CustomRaceTripleCourseSetting;                     // 0x00F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectPlacementType                          ObjectPlacementType;                               // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFestaRaceRule                                FestaRaceRule;                                     // 0x00F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupRaceRule                                GroupRaceRule;                                     // 0x00F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceThornBallType                      ThornBallType;                                     // 0x00F7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceBonus                                    RaceBonus;                                         // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingGoalPoint                         GoalPoint;                                         // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EGadgetId>                             AdditionalGadgets;                                 // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x10];                                     // 0x0110(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomRaceSetting) == 0x000008, "Wrong alignment on FCustomRaceSetting");
static_assert(sizeof(FCustomRaceSetting) == 0x000120, "Wrong size on FCustomRaceSetting");
static_assert(offsetof(FCustomRaceSetting, SpeedClass) == 0x000000, "Member 'FCustomRaceSetting::SpeedClass' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, RaceMirrorSetting) == 0x000001, "Member 'FCustomRaceSetting::RaceMirrorSetting' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, GroupSetting) == 0x000002, "Member 'FCustomRaceSetting::GroupSetting' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, GroupMode) == 0x000003, "Member 'FCustomRaceSetting::GroupMode' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, GroupIdGroupColorIdMap) == 0x000008, "Member 'FCustomRaceSetting::GroupIdGroupColorIdMap' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, GroupIdMachineColorPresetIdMap) == 0x000058, "Member 'FCustomRaceSetting::GroupIdMachineColorPresetIdMap' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, MatchRule) == 0x0000A8, "Member 'FCustomRaceSetting::MatchRule' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, raceCount) == 0x0000AC, "Member 'FCustomRaceSetting::raceCount' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, TopPointSettlement) == 0x0000B0, "Member 'FCustomRaceSetting::TopPointSettlement' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, ComSpeed) == 0x0000B4, "Member 'FCustomRaceSetting::ComSpeed' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, Handicap) == 0x0000B5, "Member 'FCustomRaceSetting::Handicap' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, ItemAppearanceRule) == 0x0000B6, "Member 'FCustomRaceSetting::ItemAppearanceRule' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, CourseSelecting) == 0x0000B7, "Member 'FCustomRaceSetting::CourseSelecting' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, MCEvent) == 0x0000B8, "Member 'FCustomRaceSetting::MCEvent' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, MCEventSwitchArr) == 0x0000C0, "Member 'FCustomRaceSetting::MCEventSwitchArr' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, MCEventDataId) == 0x0000D0, "Member 'FCustomRaceSetting::MCEventDataId' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, TravelCourseChange) == 0x0000D4, "Member 'FCustomRaceSetting::TravelCourseChange' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, IrregularGate) == 0x0000D5, "Member 'FCustomRaceSetting::IrregularGate' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, GadgetUsing) == 0x0000D6, "Member 'FCustomRaceSetting::GadgetUsing' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, AutoGetItem) == 0x0000D7, "Member 'FCustomRaceSetting::AutoGetItem' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, ItemSwitchSetting) == 0x0000D8, "Member 'FCustomRaceSetting::ItemSwitchSetting' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, CustomRaceIrregularSetting) == 0x0000F0, "Member 'FCustomRaceSetting::CustomRaceIrregularSetting' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, CustomRaceSettingPointUpChance) == 0x0000F1, "Member 'FCustomRaceSetting::CustomRaceSettingPointUpChance' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, CustomRaceRingLostSetting) == 0x0000F2, "Member 'FCustomRaceSetting::CustomRaceRingLostSetting' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, CustomRaceTripleCourseSetting) == 0x0000F3, "Member 'FCustomRaceSetting::CustomRaceTripleCourseSetting' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, ObjectPlacementType) == 0x0000F4, "Member 'FCustomRaceSetting::ObjectPlacementType' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, FestaRaceRule) == 0x0000F5, "Member 'FCustomRaceSetting::FestaRaceRule' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, GroupRaceRule) == 0x0000F6, "Member 'FCustomRaceSetting::GroupRaceRule' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, ThornBallType) == 0x0000F7, "Member 'FCustomRaceSetting::ThornBallType' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, RaceBonus) == 0x0000F8, "Member 'FCustomRaceSetting::RaceBonus' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, GoalPoint) == 0x0000F9, "Member 'FCustomRaceSetting::GoalPoint' has a wrong offset!");
static_assert(offsetof(FCustomRaceSetting, AdditionalGadgets) == 0x000100, "Member 'FCustomRaceSetting::AdditionalGadgets' has a wrong offset!");

// ScriptStruct UnionSystem.MenuMockChoicesInt
// 0x0010 (0x0018 - 0x0008)
struct FMenuMockChoicesInt final : public FTableRowBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMenuMockChoicesInt) == 0x000008, "Wrong alignment on FMenuMockChoicesInt");
static_assert(sizeof(FMenuMockChoicesInt) == 0x000018, "Wrong size on FMenuMockChoicesInt");
static_assert(offsetof(FMenuMockChoicesInt, Name) == 0x000008, "Member 'FMenuMockChoicesInt::Name' has a wrong offset!");
static_assert(offsetof(FMenuMockChoicesInt, Value) == 0x000010, "Member 'FMenuMockChoicesInt::Value' has a wrong offset!");

// ScriptStruct UnionSystem.MenuMockChoicesFloat
// 0x0010 (0x0018 - 0x0008)
struct FMenuMockChoicesFloat final : public FTableRowBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMenuMockChoicesFloat) == 0x000008, "Wrong alignment on FMenuMockChoicesFloat");
static_assert(sizeof(FMenuMockChoicesFloat) == 0x000018, "Wrong size on FMenuMockChoicesFloat");
static_assert(offsetof(FMenuMockChoicesFloat, Name) == 0x000008, "Member 'FMenuMockChoicesFloat::Name' has a wrong offset!");
static_assert(offsetof(FMenuMockChoicesFloat, Value) == 0x000010, "Member 'FMenuMockChoicesFloat::Value' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FestaPointBonusData
// 0x001C (0x001C - 0x0000)
struct FNetMasterData_FestaPointBonusData final
{
public:
	int32                                         pointBonusId;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         friendBonusPoint1;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         friendBonusPoint2;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         friendBonusPoint3;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         winStreakBonusPoint;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         leadTimeNo1Point;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         winBonusNo1Point;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FestaPointBonusData) == 0x000004, "Wrong alignment on FNetMasterData_FestaPointBonusData");
static_assert(sizeof(FNetMasterData_FestaPointBonusData) == 0x00001C, "Wrong size on FNetMasterData_FestaPointBonusData");
static_assert(offsetof(FNetMasterData_FestaPointBonusData, pointBonusId) == 0x000000, "Member 'FNetMasterData_FestaPointBonusData::pointBonusId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointBonusData, friendBonusPoint1) == 0x000004, "Member 'FNetMasterData_FestaPointBonusData::friendBonusPoint1' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointBonusData, friendBonusPoint2) == 0x000008, "Member 'FNetMasterData_FestaPointBonusData::friendBonusPoint2' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointBonusData, friendBonusPoint3) == 0x00000C, "Member 'FNetMasterData_FestaPointBonusData::friendBonusPoint3' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointBonusData, winStreakBonusPoint) == 0x000010, "Member 'FNetMasterData_FestaPointBonusData::winStreakBonusPoint' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointBonusData, leadTimeNo1Point) == 0x000014, "Member 'FNetMasterData_FestaPointBonusData::leadTimeNo1Point' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointBonusData, winBonusNo1Point) == 0x000018, "Member 'FNetMasterData_FestaPointBonusData::winBonusNo1Point' has a wrong offset!");

// ScriptStruct UnionSystem.OnMainMenuInputEventParam
// 0x0010 (0x0010 - 0x0000)
struct FOnMainMenuInputEventParam final
{
public:
	EMenuInputKey                                 InputKey;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnMainMenuInputEventParam) == 0x000008, "Wrong alignment on FOnMainMenuInputEventParam");
static_assert(sizeof(FOnMainMenuInputEventParam) == 0x000010, "Wrong size on FOnMainMenuInputEventParam");
static_assert(offsetof(FOnMainMenuInputEventParam, InputKey) == 0x000000, "Member 'FOnMainMenuInputEventParam::InputKey' has a wrong offset!");
static_assert(offsetof(FOnMainMenuInputEventParam, Object) == 0x000008, "Member 'FOnMainMenuInputEventParam::Object' has a wrong offset!");

// ScriptStruct UnionSystem.UserRedStarRingAcquisitionProperty
// 0x0010 (0x0010 - 0x0000)
struct FUserRedStarRingAcquisitionProperty final
{
public:
	TArray<bool>                                  Acquisition;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserRedStarRingAcquisitionProperty) == 0x000008, "Wrong alignment on FUserRedStarRingAcquisitionProperty");
static_assert(sizeof(FUserRedStarRingAcquisitionProperty) == 0x000010, "Wrong size on FUserRedStarRingAcquisitionProperty");
static_assert(offsetof(FUserRedStarRingAcquisitionProperty, Acquisition) == 0x000000, "Member 'FUserRedStarRingAcquisitionProperty::Acquisition' has a wrong offset!");

// ScriptStruct UnionSystem.UserCommonData
// 0x0078 (0x0078 - 0x0000)
struct FUserCommonData final
{
public:
	class FString                                 ProductUserId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerLevel;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRaceCount;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RedStarRing;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRedStarRing;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DonpaTicket;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDonpaTicket;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseDonpaTicket;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     SelectedDriverId;                                  // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    SelectedMachineId;                                 // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SelectedGadgetPresetIds;                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHasEnteredMachineCustomizeSequence;               // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChallengeLastShowProgress;                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUserRedStarRingAcquisitionProperty> RedStarRingAcquisitionPerStage;               // 0x0048(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RateHighPoint;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         festaPoint;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         festaId;                                           // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NiceCount;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAgreedNoticeAgreement;                         // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishedAdvertiseLogoFlow;                        // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenFever;                                        // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x1];                                       // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConfirmedPatchVersion;                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanStatus                                    LastCheckedBanStatus;                              // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserCommonData) == 0x000008, "Wrong alignment on FUserCommonData");
static_assert(sizeof(FUserCommonData) == 0x000078, "Wrong size on FUserCommonData");
static_assert(offsetof(FUserCommonData, ProductUserId) == 0x000000, "Member 'FUserCommonData::ProductUserId' has a wrong offset!");
static_assert(offsetof(FUserCommonData, PlayerLevel) == 0x000010, "Member 'FUserCommonData::PlayerLevel' has a wrong offset!");
static_assert(offsetof(FUserCommonData, TotalRaceCount) == 0x000014, "Member 'FUserCommonData::TotalRaceCount' has a wrong offset!");
static_assert(offsetof(FUserCommonData, RedStarRing) == 0x000018, "Member 'FUserCommonData::RedStarRing' has a wrong offset!");
static_assert(offsetof(FUserCommonData, TotalRedStarRing) == 0x00001C, "Member 'FUserCommonData::TotalRedStarRing' has a wrong offset!");
static_assert(offsetof(FUserCommonData, DonpaTicket) == 0x000020, "Member 'FUserCommonData::DonpaTicket' has a wrong offset!");
static_assert(offsetof(FUserCommonData, TotalDonpaTicket) == 0x000024, "Member 'FUserCommonData::TotalDonpaTicket' has a wrong offset!");
static_assert(offsetof(FUserCommonData, UseDonpaTicket) == 0x000028, "Member 'FUserCommonData::UseDonpaTicket' has a wrong offset!");
static_assert(offsetof(FUserCommonData, SelectedDriverId) == 0x00002C, "Member 'FUserCommonData::SelectedDriverId' has a wrong offset!");
static_assert(offsetof(FUserCommonData, SelectedMachineId) == 0x00002D, "Member 'FUserCommonData::SelectedMachineId' has a wrong offset!");
static_assert(offsetof(FUserCommonData, SelectedGadgetPresetIds) == 0x000030, "Member 'FUserCommonData::SelectedGadgetPresetIds' has a wrong offset!");
static_assert(offsetof(FUserCommonData, bHasEnteredMachineCustomizeSequence) == 0x000040, "Member 'FUserCommonData::bHasEnteredMachineCustomizeSequence' has a wrong offset!");
static_assert(offsetof(FUserCommonData, ChallengeLastShowProgress) == 0x000044, "Member 'FUserCommonData::ChallengeLastShowProgress' has a wrong offset!");
static_assert(offsetof(FUserCommonData, RedStarRingAcquisitionPerStage) == 0x000048, "Member 'FUserCommonData::RedStarRingAcquisitionPerStage' has a wrong offset!");
static_assert(offsetof(FUserCommonData, RateHighPoint) == 0x000058, "Member 'FUserCommonData::RateHighPoint' has a wrong offset!");
static_assert(offsetof(FUserCommonData, festaPoint) == 0x00005C, "Member 'FUserCommonData::festaPoint' has a wrong offset!");
static_assert(offsetof(FUserCommonData, festaId) == 0x000060, "Member 'FUserCommonData::festaId' has a wrong offset!");
static_assert(offsetof(FUserCommonData, NiceCount) == 0x000064, "Member 'FUserCommonData::NiceCount' has a wrong offset!");
static_assert(offsetof(FUserCommonData, bHasAgreedNoticeAgreement) == 0x000068, "Member 'FUserCommonData::bHasAgreedNoticeAgreement' has a wrong offset!");
static_assert(offsetof(FUserCommonData, bFinishedAdvertiseLogoFlow) == 0x000069, "Member 'FUserCommonData::bFinishedAdvertiseLogoFlow' has a wrong offset!");
static_assert(offsetof(FUserCommonData, bOpenFever) == 0x00006A, "Member 'FUserCommonData::bOpenFever' has a wrong offset!");
static_assert(offsetof(FUserCommonData, ConfirmedPatchVersion) == 0x00006C, "Member 'FUserCommonData::ConfirmedPatchVersion' has a wrong offset!");
static_assert(offsetof(FUserCommonData, LastCheckedBanStatus) == 0x000070, "Member 'FUserCommonData::LastCheckedBanStatus' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FestaPointSetData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_FestaPointSetData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointRaceOrderId;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointTeamContribAttackHitId;                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointTeamContribRingId;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointTeamWldId;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FestaPointSetData) == 0x000004, "Wrong alignment on FNetMasterData_FestaPointSetData");
static_assert(sizeof(FNetMasterData_FestaPointSetData) == 0x000014, "Wrong size on FNetMasterData_FestaPointSetData");
static_assert(offsetof(FNetMasterData_FestaPointSetData, ID) == 0x000000, "Member 'FNetMasterData_FestaPointSetData::ID' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointSetData, pointRaceOrderId) == 0x000004, "Member 'FNetMasterData_FestaPointSetData::pointRaceOrderId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointSetData, pointTeamContribAttackHitId) == 0x000008, "Member 'FNetMasterData_FestaPointSetData::pointTeamContribAttackHitId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointSetData, pointTeamContribRingId) == 0x00000C, "Member 'FNetMasterData_FestaPointSetData::pointTeamContribRingId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointSetData, pointTeamWldId) == 0x000010, "Member 'FNetMasterData_FestaPointSetData::pointTeamWldId' has a wrong offset!");

// ScriptStruct UnionSystem.UserPartsProperty
// 0x0001 (0x0001 - 0x0000)
struct FUserPartsProperty final
{
public:
	bool                                          bIsNew;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserPartsProperty) == 0x000001, "Wrong alignment on FUserPartsProperty");
static_assert(sizeof(FUserPartsProperty) == 0x000001, "Wrong size on FUserPartsProperty");
static_assert(offsetof(FUserPartsProperty, bIsNew) == 0x000000, "Member 'FUserPartsProperty::bIsNew' has a wrong offset!");

// ScriptStruct UnionSystem.UserItemProperty
// 0x0002 (0x0002 - 0x0000)
struct FUserItemProperty final
{
public:
	bool                                          bIsNew;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELockType                                     LockType;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserItemProperty) == 0x000001, "Wrong alignment on FUserItemProperty");
static_assert(sizeof(FUserItemProperty) == 0x000002, "Wrong size on FUserItemProperty");
static_assert(offsetof(FUserItemProperty, bIsNew) == 0x000000, "Member 'FUserItemProperty::bIsNew' has a wrong offset!");
static_assert(offsetof(FUserItemProperty, LockType) == 0x000001, "Member 'FUserItemProperty::LockType' has a wrong offset!");

// ScriptStruct UnionSystem.UserMachineAssemblyData
// 0x0390 (0x0390 - 0x0000)
struct FUserMachineAssemblyData final
{
public:
	TMap<EMachineId, struct FUserPartsProperty>   FrontPartsList;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EMachineId, struct FUserPartsProperty>   RearPartsList;                                     // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EMachineId, struct FUserPartsProperty>   TirePartsList;                                     // 0x00A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EMachineId, struct FUserItemProperty>    CompleteMachineList;                               // 0x00F0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EMachineColorPresetId, struct FUserItemProperty> ColorPresetList;                           // 0x0140(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FUserItemProperty>         StickerlList;                                      // 0x0190(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EMachineHornType, struct FUserItemProperty> HornList;                                       // 0x01E0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EMachineAuraId, struct FUserItemProperty> AuraList;                                         // 0x0230(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         GadgetFragmentNum;                                 // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EGadgetId, int32>                        FixedGadgetNumMap;                                 // 0x0288(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EGadgetId, struct FUserItemProperty>     GadgetList;                                        // 0x02D8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         GadgetSlotNum;                                     // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMachineId, struct FUserMachineCustomizeData> CustomizeDataList;                            // 0x0330(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FUserGadgetPresetDataList>      GadgetPresetDataLists;                             // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserMachineAssemblyData) == 0x000008, "Wrong alignment on FUserMachineAssemblyData");
static_assert(sizeof(FUserMachineAssemblyData) == 0x000390, "Wrong size on FUserMachineAssemblyData");
static_assert(offsetof(FUserMachineAssemblyData, FrontPartsList) == 0x000000, "Member 'FUserMachineAssemblyData::FrontPartsList' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, RearPartsList) == 0x000050, "Member 'FUserMachineAssemblyData::RearPartsList' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, TirePartsList) == 0x0000A0, "Member 'FUserMachineAssemblyData::TirePartsList' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, CompleteMachineList) == 0x0000F0, "Member 'FUserMachineAssemblyData::CompleteMachineList' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, ColorPresetList) == 0x000140, "Member 'FUserMachineAssemblyData::ColorPresetList' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, StickerlList) == 0x000190, "Member 'FUserMachineAssemblyData::StickerlList' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, HornList) == 0x0001E0, "Member 'FUserMachineAssemblyData::HornList' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, AuraList) == 0x000230, "Member 'FUserMachineAssemblyData::AuraList' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, GadgetFragmentNum) == 0x000280, "Member 'FUserMachineAssemblyData::GadgetFragmentNum' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, FixedGadgetNumMap) == 0x000288, "Member 'FUserMachineAssemblyData::FixedGadgetNumMap' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, GadgetList) == 0x0002D8, "Member 'FUserMachineAssemblyData::GadgetList' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, GadgetSlotNum) == 0x000328, "Member 'FUserMachineAssemblyData::GadgetSlotNum' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, CustomizeDataList) == 0x000330, "Member 'FUserMachineAssemblyData::CustomizeDataList' has a wrong offset!");
static_assert(offsetof(FUserMachineAssemblyData, GadgetPresetDataLists) == 0x000380, "Member 'FUserMachineAssemblyData::GadgetPresetDataLists' has a wrong offset!");

// ScriptStruct UnionSystem.UserTimeTrialRaceData
// 0x0050 (0x0050 - 0x0000)
struct FUserTimeTrialRaceData final
{
public:
	int32                                         TotalLapTime;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstLapTime;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondLapTime;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThirdLapTime;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserGadgetPresetData                  GadgetPresetData;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 DateTime;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DirverId;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    FrontPartsId;                                      // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    RearPartsId;                                       // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    TirePartsId;                                       // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidData;                                      // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGhostDataUploaded;                              // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeTrialClearRankId                         ClearRankId;                                       // 0x0036(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDammy;                                            // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GhostHash[0x10];                                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RomVersion;                                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GhostVersion;                                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserTimeTrialRaceData) == 0x000008, "Wrong alignment on FUserTimeTrialRaceData");
static_assert(sizeof(FUserTimeTrialRaceData) == 0x000050, "Wrong size on FUserTimeTrialRaceData");
static_assert(offsetof(FUserTimeTrialRaceData, TotalLapTime) == 0x000000, "Member 'FUserTimeTrialRaceData::TotalLapTime' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, FirstLapTime) == 0x000004, "Member 'FUserTimeTrialRaceData::FirstLapTime' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, SecondLapTime) == 0x000008, "Member 'FUserTimeTrialRaceData::SecondLapTime' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, ThirdLapTime) == 0x00000C, "Member 'FUserTimeTrialRaceData::ThirdLapTime' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, GadgetPresetData) == 0x000010, "Member 'FUserTimeTrialRaceData::GadgetPresetData' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, DateTime) == 0x000020, "Member 'FUserTimeTrialRaceData::DateTime' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, DirverId) == 0x000030, "Member 'FUserTimeTrialRaceData::DirverId' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, FrontPartsId) == 0x000031, "Member 'FUserTimeTrialRaceData::FrontPartsId' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, RearPartsId) == 0x000032, "Member 'FUserTimeTrialRaceData::RearPartsId' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, TirePartsId) == 0x000033, "Member 'FUserTimeTrialRaceData::TirePartsId' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, bIsValidData) == 0x000034, "Member 'FUserTimeTrialRaceData::bIsValidData' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, bIsGhostDataUploaded) == 0x000035, "Member 'FUserTimeTrialRaceData::bIsGhostDataUploaded' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, ClearRankId) == 0x000036, "Member 'FUserTimeTrialRaceData::ClearRankId' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, bDammy) == 0x000037, "Member 'FUserTimeTrialRaceData::bDammy' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, GhostHash) == 0x000038, "Member 'FUserTimeTrialRaceData::GhostHash' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, RomVersion) == 0x000048, "Member 'FUserTimeTrialRaceData::RomVersion' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialRaceData, GhostVersion) == 0x00004C, "Member 'FUserTimeTrialRaceData::GhostVersion' has a wrong offset!");

// ScriptStruct UnionSystem.UserTimeTrialCourseData
// 0x0020 (0x0020 - 0x0000)
struct FUserTimeTrialCourseData final
{
public:
	TArray<bool>                                  Acquistion;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUserTimeTrialRaceData>         RaceData;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserTimeTrialCourseData) == 0x000008, "Wrong alignment on FUserTimeTrialCourseData");
static_assert(sizeof(FUserTimeTrialCourseData) == 0x000020, "Wrong size on FUserTimeTrialCourseData");
static_assert(offsetof(FUserTimeTrialCourseData, Acquistion) == 0x000000, "Member 'FUserTimeTrialCourseData::Acquistion' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialCourseData, RaceData) == 0x000010, "Member 'FUserTimeTrialCourseData::RaceData' has a wrong offset!");

// ScriptStruct UnionSystem.TimeTrialLapTimes
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x04) FTimeTrialLapTimes final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeTrialLapTimes) == 0x000004, "Wrong alignment on FTimeTrialLapTimes");
static_assert(sizeof(FTimeTrialLapTimes) == 0x000040, "Wrong size on FTimeTrialLapTimes");

// ScriptStruct UnionSystem.UserTimeTrialData
// 0x0018 (0x0018 - 0x0000)
struct FUserTimeTrialData final
{
public:
	TArray<struct FUserTimeTrialCourseData>       TimeTrialCourseDataArray;                          // 0x0000(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardCount;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeTrialWinLoseDispId                       LastResultId;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserTimeTrialData) == 0x000008, "Wrong alignment on FUserTimeTrialData");
static_assert(sizeof(FUserTimeTrialData) == 0x000018, "Wrong size on FUserTimeTrialData");
static_assert(offsetof(FUserTimeTrialData, TimeTrialCourseDataArray) == 0x000000, "Member 'FUserTimeTrialData::TimeTrialCourseDataArray' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialData, RewardCount) == 0x000010, "Member 'FUserTimeTrialData::RewardCount' has a wrong offset!");
static_assert(offsetof(FUserTimeTrialData, LastResultId) == 0x000014, "Member 'FUserTimeTrialData::LastResultId' has a wrong offset!");

// ScriptStruct UnionSystem.ChallengeStatsData
// 0x0008 (0x0008 - 0x0000)
struct FChallengeStatsData final
{
public:
	uint32                                        StatsCount;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChallengeProgressState                       ProgressState;                                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeStatsData) == 0x000004, "Wrong alignment on FChallengeStatsData");
static_assert(sizeof(FChallengeStatsData) == 0x000008, "Wrong size on FChallengeStatsData");
static_assert(offsetof(FChallengeStatsData, StatsCount) == 0x000000, "Member 'FChallengeStatsData::StatsCount' has a wrong offset!");
static_assert(offsetof(FChallengeStatsData, ProgressState) == 0x000004, "Member 'FChallengeStatsData::ProgressState' has a wrong offset!");

// ScriptStruct UnionSystem.ChallengeSaveData
// 0x0058 (0x0058 - 0x0000)
struct FChallengeSaveData final
{
public:
	TMap<EChallengeId, struct FChallengeStatsData> ChallengeStatsList;                               // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x4];                                       // 0x0050(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsCompleteMainChallenge;                           // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCompleteSpecialChallenge;                        // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Dammy;                                             // 0x0056(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeSaveData) == 0x000008, "Wrong alignment on FChallengeSaveData");
static_assert(sizeof(FChallengeSaveData) == 0x000058, "Wrong size on FChallengeSaveData");
static_assert(offsetof(FChallengeSaveData, ChallengeStatsList) == 0x000000, "Member 'FChallengeSaveData::ChallengeStatsList' has a wrong offset!");
static_assert(offsetof(FChallengeSaveData, IsCompleteMainChallenge) == 0x000054, "Member 'FChallengeSaveData::IsCompleteMainChallenge' has a wrong offset!");
static_assert(offsetof(FChallengeSaveData, IsCompleteSpecialChallenge) == 0x000055, "Member 'FChallengeSaveData::IsCompleteSpecialChallenge' has a wrong offset!");
static_assert(offsetof(FChallengeSaveData, Dammy) == 0x000056, "Member 'FChallengeSaveData::Dammy' has a wrong offset!");

// ScriptStruct UnionSystem.UserTutorialData
// 0x00A8 (0x00A8 - 0x0000)
struct FUserTutorialData final
{
public:
	TMap<EStageId, bool>                          TutorialCompletedFlags;                            // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsTutorialPopupDisp;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserTutorialData) == 0x000008, "Wrong alignment on FUserTutorialData");
static_assert(sizeof(FUserTutorialData) == 0x0000A8, "Wrong size on FUserTutorialData");
static_assert(offsetof(FUserTutorialData, TutorialCompletedFlags) == 0x000000, "Member 'FUserTutorialData::TutorialCompletedFlags' has a wrong offset!");
static_assert(offsetof(FUserTutorialData, bIsTutorialPopupDisp) == 0x0000A0, "Member 'FUserTutorialData::bIsTutorialPopupDisp' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetRankingTimeTrialResponse_HistogramData
// 0x0010 (0x0010 - 0x0000)
struct FRankingGetRankingTimeTrialResponse_HistogramData final
{
public:
	int32                                         binNo;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lowerTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         upperTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         userNum;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetRankingTimeTrialResponse_HistogramData) == 0x000004, "Wrong alignment on FRankingGetRankingTimeTrialResponse_HistogramData");
static_assert(sizeof(FRankingGetRankingTimeTrialResponse_HistogramData) == 0x000010, "Wrong size on FRankingGetRankingTimeTrialResponse_HistogramData");
static_assert(offsetof(FRankingGetRankingTimeTrialResponse_HistogramData, binNo) == 0x000000, "Member 'FRankingGetRankingTimeTrialResponse_HistogramData::binNo' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingTimeTrialResponse_HistogramData, lowerTime) == 0x000004, "Member 'FRankingGetRankingTimeTrialResponse_HistogramData::lowerTime' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingTimeTrialResponse_HistogramData, upperTime) == 0x000008, "Member 'FRankingGetRankingTimeTrialResponse_HistogramData::upperTime' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingTimeTrialResponse_HistogramData, userNum) == 0x00000C, "Member 'FRankingGetRankingTimeTrialResponse_HistogramData::userNum' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetRankingTimeTrialResponse
// 0x0030 (0x0030 - 0x0000)
struct FRankingGetRankingTimeTrialResponse final
{
public:
	class FString                                 signedUrl;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 updatedAt;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRankingGetRankingTimeTrialResponse_HistogramData> histogram;                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetRankingTimeTrialResponse) == 0x000008, "Wrong alignment on FRankingGetRankingTimeTrialResponse");
static_assert(sizeof(FRankingGetRankingTimeTrialResponse) == 0x000030, "Wrong size on FRankingGetRankingTimeTrialResponse");
static_assert(offsetof(FRankingGetRankingTimeTrialResponse, signedUrl) == 0x000000, "Member 'FRankingGetRankingTimeTrialResponse::signedUrl' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingTimeTrialResponse, updatedAt) == 0x000010, "Member 'FRankingGetRankingTimeTrialResponse::updatedAt' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingTimeTrialResponse, histogram) == 0x000020, "Member 'FRankingGetRankingTimeTrialResponse::histogram' has a wrong offset!");

// ScriptStruct UnionSystem.UserDriverProperty
// 0x0002 (0x0002 - 0x0000)
struct FUserDriverProperty final
{
public:
	bool                                          bIsSelectable;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserDriverProperty) == 0x000001, "Wrong alignment on FUserDriverProperty");
static_assert(sizeof(FUserDriverProperty) == 0x000002, "Wrong size on FUserDriverProperty");
static_assert(offsetof(FUserDriverProperty, bIsSelectable) == 0x000000, "Member 'FUserDriverProperty::bIsSelectable' has a wrong offset!");
static_assert(offsetof(FUserDriverProperty, bIsNew) == 0x000001, "Member 'FUserDriverProperty::bIsNew' has a wrong offset!");

// ScriptStruct UnionSystem.UserDriverData
// 0x0050 (0x0050 - 0x0000)
struct FUserDriverData final
{
public:
	TMap<EDriverId, struct FUserDriverProperty>   UserDriverList;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserDriverData) == 0x000008, "Wrong alignment on FUserDriverData");
static_assert(sizeof(FUserDriverData) == 0x000050, "Wrong size on FUserDriverData");
static_assert(offsetof(FUserDriverData, UserDriverList) == 0x000000, "Member 'FUserDriverData::UserDriverList' has a wrong offset!");

// ScriptStruct UnionSystem.UserHintProperty
// 0x0002 (0x0002 - 0x0000)
struct FUserHintProperty final
{
public:
	bool                                          bIsRead;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserHintProperty) == 0x000001, "Wrong alignment on FUserHintProperty");
static_assert(sizeof(FUserHintProperty) == 0x000002, "Wrong size on FUserHintProperty");
static_assert(offsetof(FUserHintProperty, bIsRead) == 0x000000, "Member 'FUserHintProperty::bIsRead' has a wrong offset!");
static_assert(offsetof(FUserHintProperty, bIsNew) == 0x000001, "Member 'FUserHintProperty::bIsNew' has a wrong offset!");

// ScriptStruct UnionSystem.UserHintData
// 0x0018 (0x0018 - 0x0000)
struct FUserHintData final
{
public:
	TArray<struct FUserHintProperty>              UserHintArray;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         TipsDisplayIndex;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserHintData) == 0x000008, "Wrong alignment on FUserHintData");
static_assert(sizeof(FUserHintData) == 0x000018, "Wrong size on FUserHintData");
static_assert(offsetof(FUserHintData, UserHintArray) == 0x000000, "Member 'FUserHintData::UserHintArray' has a wrong offset!");
static_assert(offsetof(FUserHintData, TipsDisplayIndex) == 0x000010, "Member 'FUserHintData::TipsDisplayIndex' has a wrong offset!");

// ScriptStruct UnionSystem.UserRewardGetDisplayRequestData
// 0x0010 (0x0010 - 0x0000)
struct FUserRewardGetDisplayRequestData final
{
public:
	TArray<ERewardAchievementType>                RewardGetDisplayRequestDataArray;                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserRewardGetDisplayRequestData) == 0x000008, "Wrong alignment on FUserRewardGetDisplayRequestData");
static_assert(sizeof(FUserRewardGetDisplayRequestData) == 0x000010, "Wrong size on FUserRewardGetDisplayRequestData");
static_assert(offsetof(FUserRewardGetDisplayRequestData, RewardGetDisplayRequestDataArray) == 0x000000, "Member 'FUserRewardGetDisplayRequestData::RewardGetDisplayRequestDataArray' has a wrong offset!");

// ScriptStruct UnionSystem.UserNoticeData
// 0x0018 (0x0018 - 0x0000)
struct FUserNoticeData final
{
public:
	struct FDateTime                              ReadTimeStamp;                                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 watchedUnlockedList;                               // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserNoticeData) == 0x000008, "Wrong alignment on FUserNoticeData");
static_assert(sizeof(FUserNoticeData) == 0x000018, "Wrong size on FUserNoticeData");
static_assert(offsetof(FUserNoticeData, ReadTimeStamp) == 0x000000, "Member 'FUserNoticeData::ReadTimeStamp' has a wrong offset!");
static_assert(offsetof(FUserNoticeData, watchedUnlockedList) == 0x000008, "Member 'FUserNoticeData::watchedUnlockedList' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetFriendRankingRankMatchResponse
// 0x0010 (0x0010 - 0x0000)
struct FRankingGetFriendRankingRankMatchResponse final
{
public:
	TArray<struct FCommon_RankingOrder>           Ranking;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetFriendRankingRankMatchResponse) == 0x000008, "Wrong alignment on FRankingGetFriendRankingRankMatchResponse");
static_assert(sizeof(FRankingGetFriendRankingRankMatchResponse) == 0x000010, "Wrong size on FRankingGetFriendRankingRankMatchResponse");
static_assert(offsetof(FRankingGetFriendRankingRankMatchResponse, Ranking) == 0x000000, "Member 'FRankingGetFriendRankingRankMatchResponse::Ranking' has a wrong offset!");

// ScriptStruct UnionSystem.PartyRacePresetSettingSave
// 0x0058 (0x0058 - 0x0000)
struct FPartyRacePresetSettingSave final
{
public:
	EPartyRacePreset                              PartyRacePresetType;                               // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECustomRaceSettingLine>                SettingPickUp;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ESpeedClassId                                 SpeedClass;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuSpeedClassId                             MenuSpeedClassId;                                  // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingGrouping                          GroupSetting;                                      // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingMatchRule                         MatchRule;                                         // 0x001B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaceCountIndex;                                    // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopPointSettlementIndex;                           // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         raceCount;                                         // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopPointSettlement;                                // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingComSpeed                          ComSpeed;                                          // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingHandicap                          Handicap;                                          // 0x002D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingItemAppearanceRule                ItemAppearanceRule;                                // 0x002E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingCourseSelecting                   CourseSelecting;                                   // 0x002F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceIrregularSetting                   IrregularSetting;                                  // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceSettingPointUpChance               PointUpChance;                                     // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingSpecialMCEvent                    MCEvent;                                           // 0x0032(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  MCEventSwitchArr;                                  // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MCEventDataId;                                     // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMCEventTravelCourseChange                    TravelCourseChange;                                // 0x004C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMCEventIrregularGate                         IrregularGate;                                     // 0x004D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingSpecialGadgetUsing                GadgetUsing;                                       // 0x004E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingSpecialAutoGetItem                AutoGetItem;                                       // 0x004F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceRingLostSetting                    RingLost;                                          // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceTripleCourseSetting                TripleCourse;                                      // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectPlacementType                          ObjectPlacementType;                               // 0x0052(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFestaRaceRule                                FestaRaceRule;                                     // 0x0053(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupRaceRule                                GroupRaceRule;                                     // 0x0054(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceBonus                                    RaceBonus;                                         // 0x0055(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingGoalPoint                         GoalPoint;                                         // 0x0056(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyRacePresetSettingSave) == 0x000008, "Wrong alignment on FPartyRacePresetSettingSave");
static_assert(sizeof(FPartyRacePresetSettingSave) == 0x000058, "Wrong size on FPartyRacePresetSettingSave");
static_assert(offsetof(FPartyRacePresetSettingSave, PartyRacePresetType) == 0x000000, "Member 'FPartyRacePresetSettingSave::PartyRacePresetType' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, SettingPickUp) == 0x000008, "Member 'FPartyRacePresetSettingSave::SettingPickUp' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, SpeedClass) == 0x000018, "Member 'FPartyRacePresetSettingSave::SpeedClass' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, MenuSpeedClassId) == 0x000019, "Member 'FPartyRacePresetSettingSave::MenuSpeedClassId' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, GroupSetting) == 0x00001A, "Member 'FPartyRacePresetSettingSave::GroupSetting' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, MatchRule) == 0x00001B, "Member 'FPartyRacePresetSettingSave::MatchRule' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, RaceCountIndex) == 0x00001C, "Member 'FPartyRacePresetSettingSave::RaceCountIndex' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, TopPointSettlementIndex) == 0x000020, "Member 'FPartyRacePresetSettingSave::TopPointSettlementIndex' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, raceCount) == 0x000024, "Member 'FPartyRacePresetSettingSave::raceCount' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, TopPointSettlement) == 0x000028, "Member 'FPartyRacePresetSettingSave::TopPointSettlement' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, ComSpeed) == 0x00002C, "Member 'FPartyRacePresetSettingSave::ComSpeed' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, Handicap) == 0x00002D, "Member 'FPartyRacePresetSettingSave::Handicap' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, ItemAppearanceRule) == 0x00002E, "Member 'FPartyRacePresetSettingSave::ItemAppearanceRule' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, CourseSelecting) == 0x00002F, "Member 'FPartyRacePresetSettingSave::CourseSelecting' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, IrregularSetting) == 0x000030, "Member 'FPartyRacePresetSettingSave::IrregularSetting' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, PointUpChance) == 0x000031, "Member 'FPartyRacePresetSettingSave::PointUpChance' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, MCEvent) == 0x000032, "Member 'FPartyRacePresetSettingSave::MCEvent' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, MCEventSwitchArr) == 0x000038, "Member 'FPartyRacePresetSettingSave::MCEventSwitchArr' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, MCEventDataId) == 0x000048, "Member 'FPartyRacePresetSettingSave::MCEventDataId' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, TravelCourseChange) == 0x00004C, "Member 'FPartyRacePresetSettingSave::TravelCourseChange' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, IrregularGate) == 0x00004D, "Member 'FPartyRacePresetSettingSave::IrregularGate' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, GadgetUsing) == 0x00004E, "Member 'FPartyRacePresetSettingSave::GadgetUsing' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, AutoGetItem) == 0x00004F, "Member 'FPartyRacePresetSettingSave::AutoGetItem' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, RingLost) == 0x000050, "Member 'FPartyRacePresetSettingSave::RingLost' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, TripleCourse) == 0x000051, "Member 'FPartyRacePresetSettingSave::TripleCourse' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, ObjectPlacementType) == 0x000052, "Member 'FPartyRacePresetSettingSave::ObjectPlacementType' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, FestaRaceRule) == 0x000053, "Member 'FPartyRacePresetSettingSave::FestaRaceRule' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, GroupRaceRule) == 0x000054, "Member 'FPartyRacePresetSettingSave::GroupRaceRule' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, RaceBonus) == 0x000055, "Member 'FPartyRacePresetSettingSave::RaceBonus' has a wrong offset!");
static_assert(offsetof(FPartyRacePresetSettingSave, GoalPoint) == 0x000056, "Member 'FPartyRacePresetSettingSave::GoalPoint' has a wrong offset!");

// ScriptStruct UnionSystem.UserPartyRaceData
// 0x0120 (0x0120 - 0x0000)
struct FUserPartyRaceData final
{
public:
	TMap<ERivalTeamId, int32>                     RivalTeamWinCounts;                                // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TMap<ERivalTeamId, int32>                     RivalTeamEliminatedCounts;                         // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	ERivalTeamId                                  SelectedRivalTeamId;                               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERivalTeamId                                  LastSelectedRivalTeamId;                           // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RivalTeamCutinNextPlayRequested;                   // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0x1];                                       // 0x00A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RivalTeamAllEliminatedCount;                       // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyRacePresetSettingSave            RaceParkCustomRaceSetting;                         // 0x00A8(0x0058)(NativeAccessSpecifierPublic)
	struct FItemSwitchSettingSave                 ItemSwitchSetting;                                 // 0x0100(0x0010)(NativeAccessSpecifierPublic)
	TArray<EStageId>                              CourseSwitchSetting;                               // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserPartyRaceData) == 0x000008, "Wrong alignment on FUserPartyRaceData");
static_assert(sizeof(FUserPartyRaceData) == 0x000120, "Wrong size on FUserPartyRaceData");
static_assert(offsetof(FUserPartyRaceData, RivalTeamWinCounts) == 0x000000, "Member 'FUserPartyRaceData::RivalTeamWinCounts' has a wrong offset!");
static_assert(offsetof(FUserPartyRaceData, RivalTeamEliminatedCounts) == 0x000050, "Member 'FUserPartyRaceData::RivalTeamEliminatedCounts' has a wrong offset!");
static_assert(offsetof(FUserPartyRaceData, SelectedRivalTeamId) == 0x0000A0, "Member 'FUserPartyRaceData::SelectedRivalTeamId' has a wrong offset!");
static_assert(offsetof(FUserPartyRaceData, LastSelectedRivalTeamId) == 0x0000A1, "Member 'FUserPartyRaceData::LastSelectedRivalTeamId' has a wrong offset!");
static_assert(offsetof(FUserPartyRaceData, RivalTeamCutinNextPlayRequested) == 0x0000A2, "Member 'FUserPartyRaceData::RivalTeamCutinNextPlayRequested' has a wrong offset!");
static_assert(offsetof(FUserPartyRaceData, RivalTeamAllEliminatedCount) == 0x0000A4, "Member 'FUserPartyRaceData::RivalTeamAllEliminatedCount' has a wrong offset!");
static_assert(offsetof(FUserPartyRaceData, RaceParkCustomRaceSetting) == 0x0000A8, "Member 'FUserPartyRaceData::RaceParkCustomRaceSetting' has a wrong offset!");
static_assert(offsetof(FUserPartyRaceData, ItemSwitchSetting) == 0x000100, "Member 'FUserPartyRaceData::ItemSwitchSetting' has a wrong offset!");
static_assert(offsetof(FUserPartyRaceData, CourseSwitchSetting) == 0x000110, "Member 'FUserPartyRaceData::CourseSwitchSetting' has a wrong offset!");

// ScriptStruct UnionSystem.UserPartyRaceRivalData
// 0x0004 (0x0004 - 0x0000)
struct FUserPartyRaceRivalData final
{
public:
	int32                                         RivalTeamLevelAdjust;                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserPartyRaceRivalData) == 0x000004, "Wrong alignment on FUserPartyRaceRivalData");
static_assert(sizeof(FUserPartyRaceRivalData) == 0x000004, "Wrong size on FUserPartyRaceRivalData");
static_assert(offsetof(FUserPartyRaceRivalData, RivalTeamLevelAdjust) == 0x000000, "Member 'FUserPartyRaceRivalData::RivalTeamLevelAdjust' has a wrong offset!");

// ScriptStruct UnionSystem.UserJukeboxData
// 0x00A8 (0x00A8 - 0x0000)
struct FUserJukeboxData final
{
public:
	TMap<int32, struct FAlbumCondition>           AlbumCondition;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FTrackCondition>           TrackCondition;                                    // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAutoPlayMusic;                                    // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShuffle;                                          // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFirstEnter;                                     // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserJukeboxData) == 0x000008, "Wrong alignment on FUserJukeboxData");
static_assert(sizeof(FUserJukeboxData) == 0x0000A8, "Wrong size on FUserJukeboxData");
static_assert(offsetof(FUserJukeboxData, AlbumCondition) == 0x000000, "Member 'FUserJukeboxData::AlbumCondition' has a wrong offset!");
static_assert(offsetof(FUserJukeboxData, TrackCondition) == 0x000050, "Member 'FUserJukeboxData::TrackCondition' has a wrong offset!");
static_assert(offsetof(FUserJukeboxData, bAutoPlayMusic) == 0x0000A0, "Member 'FUserJukeboxData::bAutoPlayMusic' has a wrong offset!");
static_assert(offsetof(FUserJukeboxData, bShuffle) == 0x0000A1, "Member 'FUserJukeboxData::bShuffle' has a wrong offset!");
static_assert(offsetof(FUserJukeboxData, bIsFirstEnter) == 0x0000A2, "Member 'FUserJukeboxData::bIsFirstEnter' has a wrong offset!");

// ScriptStruct UnionSystem.ResultSaveLegendCompeResultResponse
// 0x00F8 (0x00F8 - 0x0000)
struct FResultSaveLegendCompeResultResponse final
{
public:
	int32                                         Rate;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         addRate;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommon_RankingOrder                   myRanking;                                         // 0x0008(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultSaveLegendCompeResultResponse) == 0x000008, "Wrong alignment on FResultSaveLegendCompeResultResponse");
static_assert(sizeof(FResultSaveLegendCompeResultResponse) == 0x0000F8, "Wrong size on FResultSaveLegendCompeResultResponse");
static_assert(offsetof(FResultSaveLegendCompeResultResponse, Rate) == 0x000000, "Member 'FResultSaveLegendCompeResultResponse::Rate' has a wrong offset!");
static_assert(offsetof(FResultSaveLegendCompeResultResponse, addRate) == 0x000004, "Member 'FResultSaveLegendCompeResultResponse::addRate' has a wrong offset!");
static_assert(offsetof(FResultSaveLegendCompeResultResponse, myRanking) == 0x000008, "Member 'FResultSaveLegendCompeResultResponse::myRanking' has a wrong offset!");

// ScriptStruct UnionSystem.UserFriendShipData
// 0x0050 (0x0050 - 0x0000)
struct FUserFriendShipData final
{
public:
	TMap<EDriverId, int32>                        FriendShipGivedTicketForCharacterAmount;           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserFriendShipData) == 0x000008, "Wrong alignment on FUserFriendShipData");
static_assert(sizeof(FUserFriendShipData) == 0x000050, "Wrong size on FUserFriendShipData");
static_assert(offsetof(FUserFriendShipData, FriendShipGivedTicketForCharacterAmount) == 0x000000, "Member 'FUserFriendShipData::FriendShipGivedTicketForCharacterAmount' has a wrong offset!");

// ScriptStruct UnionSystem.UserGadgetCustomizeData
// 0x0001 (0x0001 - 0x0000)
struct FUserGadgetCustomizeData final
{
public:
	uint8                                         SelectedGadgetId;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGadgetCustomizeData) == 0x000001, "Wrong alignment on FUserGadgetCustomizeData");
static_assert(sizeof(FUserGadgetCustomizeData) == 0x000001, "Wrong size on FUserGadgetCustomizeData");
static_assert(offsetof(FUserGadgetCustomizeData, SelectedGadgetId) == 0x000000, "Member 'FUserGadgetCustomizeData::SelectedGadgetId' has a wrong offset!");

// ScriptStruct UnionSystem.UserActivityCardFlagData
// 0x0028 (0x0028 - 0x0000)
struct FUserActivityCardFlagData final
{
public:
	int32                                         GrandPrixWinSubTaskFlags;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         GrandPrixBeatSubTaskFlags;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaceParkBeatSubTaskFlags;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TimeTrialSonicSpeedSubTaskFlags;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TimeTrialSuperSonicSpeedSubTaskFlags;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserActivityCardFlagData) == 0x000008, "Wrong alignment on FUserActivityCardFlagData");
static_assert(sizeof(FUserActivityCardFlagData) == 0x000028, "Wrong size on FUserActivityCardFlagData");
static_assert(offsetof(FUserActivityCardFlagData, GrandPrixWinSubTaskFlags) == 0x000000, "Member 'FUserActivityCardFlagData::GrandPrixWinSubTaskFlags' has a wrong offset!");
static_assert(offsetof(FUserActivityCardFlagData, GrandPrixBeatSubTaskFlags) == 0x000008, "Member 'FUserActivityCardFlagData::GrandPrixBeatSubTaskFlags' has a wrong offset!");
static_assert(offsetof(FUserActivityCardFlagData, RaceParkBeatSubTaskFlags) == 0x000010, "Member 'FUserActivityCardFlagData::RaceParkBeatSubTaskFlags' has a wrong offset!");
static_assert(offsetof(FUserActivityCardFlagData, TimeTrialSonicSpeedSubTaskFlags) == 0x000018, "Member 'FUserActivityCardFlagData::TimeTrialSonicSpeedSubTaskFlags' has a wrong offset!");
static_assert(offsetof(FUserActivityCardFlagData, TimeTrialSuperSonicSpeedSubTaskFlags) == 0x000020, "Member 'FUserActivityCardFlagData::TimeTrialSuperSonicSpeedSubTaskFlags' has a wrong offset!");

// ScriptStruct UnionSystem.UserTitleData
// 0x000C (0x000C - 0x0000)
struct FUserTitleData final
{
public:
	int32                                         titleId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleRibbonId;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleRibbonColorId;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserTitleData) == 0x000004, "Wrong alignment on FUserTitleData");
static_assert(sizeof(FUserTitleData) == 0x00000C, "Wrong size on FUserTitleData");
static_assert(offsetof(FUserTitleData, titleId) == 0x000000, "Member 'FUserTitleData::titleId' has a wrong offset!");
static_assert(offsetof(FUserTitleData, TitleRibbonId) == 0x000004, "Member 'FUserTitleData::TitleRibbonId' has a wrong offset!");
static_assert(offsetof(FUserTitleData, TitleRibbonColorId) == 0x000008, "Member 'FUserTitleData::TitleRibbonColorId' has a wrong offset!");

// ScriptStruct UnionSystem.CntReplayGetSignedUrlRequest
// 0x0001 (0x0001 - 0x0000)
struct FCntReplayGetSignedUrlRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCntReplayGetSignedUrlRequest) == 0x000001, "Wrong alignment on FCntReplayGetSignedUrlRequest");
static_assert(sizeof(FCntReplayGetSignedUrlRequest) == 0x000001, "Wrong size on FCntReplayGetSignedUrlRequest");

// ScriptStruct UnionSystem.CntReplayGetSignedUrlResponse
// 0x0010 (0x0010 - 0x0000)
struct FCntReplayGetSignedUrlResponse final
{
public:
	class FString                                 signedUrl;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCntReplayGetSignedUrlResponse) == 0x000008, "Wrong alignment on FCntReplayGetSignedUrlResponse");
static_assert(sizeof(FCntReplayGetSignedUrlResponse) == 0x000010, "Wrong size on FCntReplayGetSignedUrlResponse");
static_assert(offsetof(FCntReplayGetSignedUrlResponse, signedUrl) == 0x000000, "Member 'FCntReplayGetSignedUrlResponse::signedUrl' has a wrong offset!");

// ScriptStruct UnionSystem.ResultRewardItemInfo
// 0x0020 (0x0020 - 0x0000)
struct FResultRewardItemInfo final
{
public:
	EResultRewardType                             ResultRewardType;                                  // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumDonpaTicket;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommendationCategory                         CommendationCategory;                              // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DescriptionText;                                   // 0x0010(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultRewardItemInfo) == 0x000008, "Wrong alignment on FResultRewardItemInfo");
static_assert(sizeof(FResultRewardItemInfo) == 0x000020, "Wrong size on FResultRewardItemInfo");
static_assert(offsetof(FResultRewardItemInfo, ResultRewardType) == 0x000000, "Member 'FResultRewardItemInfo::ResultRewardType' has a wrong offset!");
static_assert(offsetof(FResultRewardItemInfo, NumDonpaTicket) == 0x000004, "Member 'FResultRewardItemInfo::NumDonpaTicket' has a wrong offset!");
static_assert(offsetof(FResultRewardItemInfo, Rank) == 0x000008, "Member 'FResultRewardItemInfo::Rank' has a wrong offset!");
static_assert(offsetof(FResultRewardItemInfo, CommendationCategory) == 0x00000C, "Member 'FResultRewardItemInfo::CommendationCategory' has a wrong offset!");
static_assert(offsetof(FResultRewardItemInfo, DescriptionText) == 0x000010, "Member 'FResultRewardItemInfo::DescriptionText' has a wrong offset!");

// ScriptStruct UnionSystem.CompensationGetCompensationsRequest
// 0x0010 (0x0010 - 0x0000)
struct FCompensationGetCompensationsRequest final
{
public:
	TArray<int32>                                 receivedCompensationIds;                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompensationGetCompensationsRequest) == 0x000008, "Wrong alignment on FCompensationGetCompensationsRequest");
static_assert(sizeof(FCompensationGetCompensationsRequest) == 0x000010, "Wrong size on FCompensationGetCompensationsRequest");
static_assert(offsetof(FCompensationGetCompensationsRequest, receivedCompensationIds) == 0x000000, "Member 'FCompensationGetCompensationsRequest::receivedCompensationIds' has a wrong offset!");

// ScriptStruct UnionSystem.ErrorDataAsyncResult
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FErrorDataAsyncResult final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FErrorDataAsyncResult) == 0x000008, "Wrong alignment on FErrorDataAsyncResult");
static_assert(sizeof(FErrorDataAsyncResult) == 0x000018, "Wrong size on FErrorDataAsyncResult");

// ScriptStruct UnionSystem.CompensationText
// 0x0020 (0x0028 - 0x0008)
struct FCompensationText final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 Tips;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompensationText) == 0x000008, "Wrong alignment on FCompensationText");
static_assert(sizeof(FCompensationText) == 0x000028, "Wrong size on FCompensationText");
static_assert(offsetof(FCompensationText, Text) == 0x000008, "Member 'FCompensationText::Text' has a wrong offset!");
static_assert(offsetof(FCompensationText, Tips) == 0x000018, "Member 'FCompensationText::Tips' has a wrong offset!");

// ScriptStruct UnionSystem.ContentItem
// 0x000C (0x000C - 0x0000)
struct FContentItem final
{
public:
	ERewardType                                   itemType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockSortID;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentItem) == 0x000004, "Wrong alignment on FContentItem");
static_assert(sizeof(FContentItem) == 0x00000C, "Wrong size on FContentItem");
static_assert(offsetof(FContentItem, itemType) == 0x000000, "Member 'FContentItem::itemType' has a wrong offset!");
static_assert(offsetof(FContentItem, ItemId) == 0x000004, "Member 'FContentItem::ItemId' has a wrong offset!");
static_assert(offsetof(FContentItem, UnlockSortID) == 0x000008, "Member 'FContentItem::UnlockSortID' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_BaseMachine
// 0x0060 (0x0060 - 0x0000)
struct FCRM_BaseMachine final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key2;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_BaseMachine) == 0x000008, "Wrong alignment on FCRM_BaseMachine");
static_assert(sizeof(FCRM_BaseMachine) == 0x000060, "Wrong size on FCRM_BaseMachine");
static_assert(offsetof(FCRM_BaseMachine, action_type) == 0x000000, "Member 'FCRM_BaseMachine::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_BaseMachine, key1) == 0x000010, "Member 'FCRM_BaseMachine::key1' has a wrong offset!");
static_assert(offsetof(FCRM_BaseMachine, key2) == 0x000020, "Member 'FCRM_BaseMachine::key2' has a wrong offset!");
static_assert(offsetof(FCRM_BaseMachine, key3) == 0x000030, "Member 'FCRM_BaseMachine::key3' has a wrong offset!");
static_assert(offsetof(FCRM_BaseMachine, key5) == 0x000040, "Member 'FCRM_BaseMachine::key5' has a wrong offset!");
static_assert(offsetof(FCRM_BaseMachine, key6) == 0x000050, "Member 'FCRM_BaseMachine::key6' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_Challenge
// 0x0028 (0x0028 - 0x0000)
struct FCRM_Challenge final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         key2;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRM_Challenge) == 0x000008, "Wrong alignment on FCRM_Challenge");
static_assert(sizeof(FCRM_Challenge) == 0x000028, "Wrong size on FCRM_Challenge");
static_assert(offsetof(FCRM_Challenge, action_type) == 0x000000, "Member 'FCRM_Challenge::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_Challenge, key1) == 0x000010, "Member 'FCRM_Challenge::key1' has a wrong offset!");
static_assert(offsetof(FCRM_Challenge, key2) == 0x000020, "Member 'FCRM_Challenge::key2' has a wrong offset!");

// ScriptStruct UnionSystem.LocalizeRuntimeImageArray
// 0x0010 (0x0018 - 0x0008)
struct FLocalizeRuntimeImageArray final : public FTableRowBase
{
public:
	TArray<TSoftObjectPtr<class UTexture2D>>      TextureArray;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizeRuntimeImageArray) == 0x000008, "Wrong alignment on FLocalizeRuntimeImageArray");
static_assert(sizeof(FLocalizeRuntimeImageArray) == 0x000018, "Wrong size on FLocalizeRuntimeImageArray");
static_assert(offsetof(FLocalizeRuntimeImageArray, TextureArray) == 0x000008, "Member 'FLocalizeRuntimeImageArray::TextureArray' has a wrong offset!");

// ScriptStruct UnionSystem.FestaWorldRankingAsyncResult
// 0x0018 (0x0028 - 0x0010)
struct FFestaWorldRankingAsyncResult final : public FRankingDataFestaPointList
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFestaWorldRankingAsyncResult) == 0x000008, "Wrong alignment on FFestaWorldRankingAsyncResult");
static_assert(sizeof(FFestaWorldRankingAsyncResult) == 0x000028, "Wrong size on FFestaWorldRankingAsyncResult");

// ScriptStruct UnionSystem.CRM_Character
// 0x0070 (0x0070 - 0x0000)
struct FCRM_Character final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key2;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_Character) == 0x000008, "Wrong alignment on FCRM_Character");
static_assert(sizeof(FCRM_Character) == 0x000070, "Wrong size on FCRM_Character");
static_assert(offsetof(FCRM_Character, action_type) == 0x000000, "Member 'FCRM_Character::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_Character, key1) == 0x000010, "Member 'FCRM_Character::key1' has a wrong offset!");
static_assert(offsetof(FCRM_Character, key2) == 0x000020, "Member 'FCRM_Character::key2' has a wrong offset!");
static_assert(offsetof(FCRM_Character, key3) == 0x000030, "Member 'FCRM_Character::key3' has a wrong offset!");
static_assert(offsetof(FCRM_Character, key5) == 0x000040, "Member 'FCRM_Character::key5' has a wrong offset!");
static_assert(offsetof(FCRM_Character, key6) == 0x000050, "Member 'FCRM_Character::key6' has a wrong offset!");
static_assert(offsetof(FCRM_Character, key9) == 0x000060, "Member 'FCRM_Character::key9' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_Condition
// 0x0090 (0x0090 - 0x0000)
struct FCRM_Condition final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key2;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key6;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key7;                                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key8;                                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key9;                                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key10;                                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key11;                                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key12;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key13;                                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key14;                                             // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key15;                                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key16;                                             // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         key18;                                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key19;                                             // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key20;                                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRM_Condition) == 0x000008, "Wrong alignment on FCRM_Condition");
static_assert(sizeof(FCRM_Condition) == 0x000090, "Wrong size on FCRM_Condition");
static_assert(offsetof(FCRM_Condition, action_type) == 0x000000, "Member 'FCRM_Condition::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key1) == 0x000010, "Member 'FCRM_Condition::key1' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key2) == 0x000020, "Member 'FCRM_Condition::key2' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key3) == 0x000030, "Member 'FCRM_Condition::key3' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key4) == 0x000038, "Member 'FCRM_Condition::key4' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key6) == 0x000048, "Member 'FCRM_Condition::key6' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key7) == 0x00004C, "Member 'FCRM_Condition::key7' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key8) == 0x000050, "Member 'FCRM_Condition::key8' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key9) == 0x000054, "Member 'FCRM_Condition::key9' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key10) == 0x000058, "Member 'FCRM_Condition::key10' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key11) == 0x00005C, "Member 'FCRM_Condition::key11' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key12) == 0x000060, "Member 'FCRM_Condition::key12' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key13) == 0x000064, "Member 'FCRM_Condition::key13' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key14) == 0x000068, "Member 'FCRM_Condition::key14' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key15) == 0x00006C, "Member 'FCRM_Condition::key15' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key16) == 0x000070, "Member 'FCRM_Condition::key16' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key18) == 0x000080, "Member 'FCRM_Condition::key18' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key19) == 0x000084, "Member 'FCRM_Condition::key19' has a wrong offset!");
static_assert(offsetof(FCRM_Condition, key20) == 0x000088, "Member 'FCRM_Condition::key20' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_ConnectionError
// 0x00C8 (0x00C8 - 0x0000)
struct FCRM_ConnectionError final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key2;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key4;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key5;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key6;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key7;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key8;                                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key9;                                              // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key10;                                             // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key11;                                             // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key12;                                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key13;                                             // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key14;                                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key15;                                             // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key16;                                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key17;                                             // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key18;                                             // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key19;                                             // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key20;                                             // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key21;                                             // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key22;                                             // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key23;                                             // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key24;                                             // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key25;                                             // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key26;                                             // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key99;                                             // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_ConnectionError) == 0x000008, "Wrong alignment on FCRM_ConnectionError");
static_assert(sizeof(FCRM_ConnectionError) == 0x0000C8, "Wrong size on FCRM_ConnectionError");
static_assert(offsetof(FCRM_ConnectionError, action_type) == 0x000000, "Member 'FCRM_ConnectionError::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key1) == 0x000010, "Member 'FCRM_ConnectionError::key1' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key2) == 0x000020, "Member 'FCRM_ConnectionError::key2' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key3) == 0x000024, "Member 'FCRM_ConnectionError::key3' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key4) == 0x000028, "Member 'FCRM_ConnectionError::key4' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key5) == 0x000030, "Member 'FCRM_ConnectionError::key5' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key6) == 0x000040, "Member 'FCRM_ConnectionError::key6' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key7) == 0x000050, "Member 'FCRM_ConnectionError::key7' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key8) == 0x000060, "Member 'FCRM_ConnectionError::key8' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key9) == 0x000064, "Member 'FCRM_ConnectionError::key9' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key10) == 0x000068, "Member 'FCRM_ConnectionError::key10' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key11) == 0x000078, "Member 'FCRM_ConnectionError::key11' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key12) == 0x000088, "Member 'FCRM_ConnectionError::key12' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key13) == 0x00008C, "Member 'FCRM_ConnectionError::key13' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key14) == 0x000090, "Member 'FCRM_ConnectionError::key14' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key15) == 0x000094, "Member 'FCRM_ConnectionError::key15' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key16) == 0x000098, "Member 'FCRM_ConnectionError::key16' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key17) == 0x00009C, "Member 'FCRM_ConnectionError::key17' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key18) == 0x0000A0, "Member 'FCRM_ConnectionError::key18' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key19) == 0x0000A4, "Member 'FCRM_ConnectionError::key19' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key20) == 0x0000A8, "Member 'FCRM_ConnectionError::key20' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key21) == 0x0000AC, "Member 'FCRM_ConnectionError::key21' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key22) == 0x0000B0, "Member 'FCRM_ConnectionError::key22' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key23) == 0x0000B4, "Member 'FCRM_ConnectionError::key23' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key24) == 0x0000B8, "Member 'FCRM_ConnectionError::key24' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key25) == 0x0000BC, "Member 'FCRM_ConnectionError::key25' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key26) == 0x0000C0, "Member 'FCRM_ConnectionError::key26' has a wrong offset!");
static_assert(offsetof(FCRM_ConnectionError, key99) == 0x0000C4, "Member 'FCRM_ConnectionError::key99' has a wrong offset!");

// ScriptStruct UnionSystem.LoginCheckResponse_MasterVersionDatas
// 0x0020 (0x0020 - 0x0000)
struct FLoginCheckResponse_MasterVersionDatas final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoginCheckResponse_MasterVersionDatas) == 0x000008, "Wrong alignment on FLoginCheckResponse_MasterVersionDatas");
static_assert(sizeof(FLoginCheckResponse_MasterVersionDatas) == 0x000020, "Wrong size on FLoginCheckResponse_MasterVersionDatas");
static_assert(offsetof(FLoginCheckResponse_MasterVersionDatas, Name) == 0x000000, "Member 'FLoginCheckResponse_MasterVersionDatas::Name' has a wrong offset!");
static_assert(offsetof(FLoginCheckResponse_MasterVersionDatas, Version) == 0x000010, "Member 'FLoginCheckResponse_MasterVersionDatas::Version' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_CustomMachinePartsSpot
// 0x0190 (0x0190 - 0x0000)
struct FCRM_CustomMachinePartsSpot final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key2;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key10;                                             // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key11;                                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key12;                                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key13;                                             // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key14;                                             // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key15;                                             // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key16;                                             // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key17;                                             // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key18;                                             // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key19;                                             // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key20;                                             // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key21;                                             // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key22;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key23;                                             // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key24;                                             // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_CustomMachinePartsSpot) == 0x000008, "Wrong alignment on FCRM_CustomMachinePartsSpot");
static_assert(sizeof(FCRM_CustomMachinePartsSpot) == 0x000190, "Wrong size on FCRM_CustomMachinePartsSpot");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, action_type) == 0x000000, "Member 'FCRM_CustomMachinePartsSpot::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key1) == 0x000010, "Member 'FCRM_CustomMachinePartsSpot::key1' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key2) == 0x000020, "Member 'FCRM_CustomMachinePartsSpot::key2' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key3) == 0x000030, "Member 'FCRM_CustomMachinePartsSpot::key3' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key4) == 0x000040, "Member 'FCRM_CustomMachinePartsSpot::key4' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key5) == 0x000050, "Member 'FCRM_CustomMachinePartsSpot::key5' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key6) == 0x000060, "Member 'FCRM_CustomMachinePartsSpot::key6' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key7) == 0x000070, "Member 'FCRM_CustomMachinePartsSpot::key7' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key8) == 0x000080, "Member 'FCRM_CustomMachinePartsSpot::key8' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key9) == 0x000090, "Member 'FCRM_CustomMachinePartsSpot::key9' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key10) == 0x0000A0, "Member 'FCRM_CustomMachinePartsSpot::key10' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key11) == 0x0000B0, "Member 'FCRM_CustomMachinePartsSpot::key11' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key12) == 0x0000C0, "Member 'FCRM_CustomMachinePartsSpot::key12' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key13) == 0x0000D0, "Member 'FCRM_CustomMachinePartsSpot::key13' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key14) == 0x0000E0, "Member 'FCRM_CustomMachinePartsSpot::key14' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key15) == 0x0000F0, "Member 'FCRM_CustomMachinePartsSpot::key15' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key16) == 0x000100, "Member 'FCRM_CustomMachinePartsSpot::key16' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key17) == 0x000110, "Member 'FCRM_CustomMachinePartsSpot::key17' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key18) == 0x000120, "Member 'FCRM_CustomMachinePartsSpot::key18' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key19) == 0x000130, "Member 'FCRM_CustomMachinePartsSpot::key19' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key20) == 0x000140, "Member 'FCRM_CustomMachinePartsSpot::key20' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key21) == 0x000150, "Member 'FCRM_CustomMachinePartsSpot::key21' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key22) == 0x000160, "Member 'FCRM_CustomMachinePartsSpot::key22' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key23) == 0x000170, "Member 'FCRM_CustomMachinePartsSpot::key23' has a wrong offset!");
static_assert(offsetof(FCRM_CustomMachinePartsSpot, key24) == 0x000180, "Member 'FCRM_CustomMachinePartsSpot::key24' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_EventFesta
// 0x0030 (0x0030 - 0x0000)
struct FCRM_EventFesta final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key2;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key4;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key5;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_EventFesta) == 0x000008, "Wrong alignment on FCRM_EventFesta");
static_assert(sizeof(FCRM_EventFesta) == 0x000030, "Wrong size on FCRM_EventFesta");
static_assert(offsetof(FCRM_EventFesta, action_type) == 0x000000, "Member 'FCRM_EventFesta::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_EventFesta, key1) == 0x000010, "Member 'FCRM_EventFesta::key1' has a wrong offset!");
static_assert(offsetof(FCRM_EventFesta, key2) == 0x000020, "Member 'FCRM_EventFesta::key2' has a wrong offset!");
static_assert(offsetof(FCRM_EventFesta, key3) == 0x000024, "Member 'FCRM_EventFesta::key3' has a wrong offset!");
static_assert(offsetof(FCRM_EventFesta, key4) == 0x000028, "Member 'FCRM_EventFesta::key4' has a wrong offset!");
static_assert(offsetof(FCRM_EventFesta, key5) == 0x00002C, "Member 'FCRM_EventFesta::key5' has a wrong offset!");

// ScriptStruct UnionSystem.LogTrackConfig_Member
// 0x0028 (0x0028 - 0x0000)
struct FLogTrackConfig_Member final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 textToTrack;                                       // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLogTrackConfig_Member) == 0x000008, "Wrong alignment on FLogTrackConfig_Member");
static_assert(sizeof(FLogTrackConfig_Member) == 0x000028, "Wrong size on FLogTrackConfig_Member");
static_assert(offsetof(FLogTrackConfig_Member, ID) == 0x000000, "Member 'FLogTrackConfig_Member::ID' has a wrong offset!");
static_assert(offsetof(FLogTrackConfig_Member, textToTrack) == 0x000008, "Member 'FLogTrackConfig_Member::textToTrack' has a wrong offset!");
static_assert(offsetof(FLogTrackConfig_Member, Description) == 0x000018, "Member 'FLogTrackConfig_Member::Description' has a wrong offset!");

// ScriptStruct UnionSystem.LogTrackConfig
// 0x0010 (0x0010 - 0x0000)
struct FLogTrackConfig final
{
public:
	TArray<struct FLogTrackConfig_Member>         TrackInfo;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLogTrackConfig) == 0x000008, "Wrong alignment on FLogTrackConfig");
static_assert(sizeof(FLogTrackConfig) == 0x000010, "Wrong size on FLogTrackConfig");
static_assert(offsetof(FLogTrackConfig, TrackInfo) == 0x000000, "Member 'FLogTrackConfig::TrackInfo' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_Ghost
// 0x0030 (0x0030 - 0x0000)
struct FCRM_Ghost final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key2;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key4;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key5;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key6;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key7;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRM_Ghost) == 0x000008, "Wrong alignment on FCRM_Ghost");
static_assert(sizeof(FCRM_Ghost) == 0x000030, "Wrong size on FCRM_Ghost");
static_assert(offsetof(FCRM_Ghost, action_type) == 0x000000, "Member 'FCRM_Ghost::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_Ghost, key1) == 0x000010, "Member 'FCRM_Ghost::key1' has a wrong offset!");
static_assert(offsetof(FCRM_Ghost, key2) == 0x000014, "Member 'FCRM_Ghost::key2' has a wrong offset!");
static_assert(offsetof(FCRM_Ghost, key3) == 0x000018, "Member 'FCRM_Ghost::key3' has a wrong offset!");
static_assert(offsetof(FCRM_Ghost, key4) == 0x00001C, "Member 'FCRM_Ghost::key4' has a wrong offset!");
static_assert(offsetof(FCRM_Ghost, key5) == 0x000020, "Member 'FCRM_Ghost::key5' has a wrong offset!");
static_assert(offsetof(FCRM_Ghost, key6) == 0x000024, "Member 'FCRM_Ghost::key6' has a wrong offset!");
static_assert(offsetof(FCRM_Ghost, key7) == 0x000028, "Member 'FCRM_Ghost::key7' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_LobbyInvite
// 0x0050 (0x0050 - 0x0000)
struct FCRM_LobbyInvite final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key5;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key6;                                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_LobbyInvite) == 0x000008, "Wrong alignment on FCRM_LobbyInvite");
static_assert(sizeof(FCRM_LobbyInvite) == 0x000050, "Wrong size on FCRM_LobbyInvite");
static_assert(offsetof(FCRM_LobbyInvite, action_type) == 0x000000, "Member 'FCRM_LobbyInvite::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyInvite, key1) == 0x000010, "Member 'FCRM_LobbyInvite::key1' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyInvite, key2) == 0x000018, "Member 'FCRM_LobbyInvite::key2' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyInvite, key3) == 0x000028, "Member 'FCRM_LobbyInvite::key3' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyInvite, key4) == 0x000038, "Member 'FCRM_LobbyInvite::key4' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyInvite, key5) == 0x000048, "Member 'FCRM_LobbyInvite::key5' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyInvite, key6) == 0x00004C, "Member 'FCRM_LobbyInvite::key6' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameCharacterData
// 0x0164 (0x0164 - 0x0000)
struct FPlayLogSaveGameCharacterData final
{
public:
	int32                                         UseCountDriver[0x59];                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSaveGameCharacterData) == 0x000004, "Wrong alignment on FPlayLogSaveGameCharacterData");
static_assert(sizeof(FPlayLogSaveGameCharacterData) == 0x000164, "Wrong size on FPlayLogSaveGameCharacterData");
static_assert(offsetof(FPlayLogSaveGameCharacterData, UseCountDriver) == 0x000000, "Member 'FPlayLogSaveGameCharacterData::UseCountDriver' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_LobbyStage
// 0x0030 (0x0030 - 0x0000)
struct FCRM_LobbyStage final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key2;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_LobbyStage) == 0x000008, "Wrong alignment on FCRM_LobbyStage");
static_assert(sizeof(FCRM_LobbyStage) == 0x000030, "Wrong size on FCRM_LobbyStage");
static_assert(offsetof(FCRM_LobbyStage, action_type) == 0x000000, "Member 'FCRM_LobbyStage::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyStage, key1) == 0x000010, "Member 'FCRM_LobbyStage::key1' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyStage, key2) == 0x000020, "Member 'FCRM_LobbyStage::key2' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_LobbyStamp
// 0x0040 (0x0040 - 0x0000)
struct FCRM_LobbyStamp final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key4;                                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRM_LobbyStamp) == 0x000008, "Wrong alignment on FCRM_LobbyStamp");
static_assert(sizeof(FCRM_LobbyStamp) == 0x000040, "Wrong size on FCRM_LobbyStamp");
static_assert(offsetof(FCRM_LobbyStamp, action_type) == 0x000000, "Member 'FCRM_LobbyStamp::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyStamp, key1) == 0x000010, "Member 'FCRM_LobbyStamp::key1' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyStamp, key2) == 0x000018, "Member 'FCRM_LobbyStamp::key2' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyStamp, key3) == 0x000028, "Member 'FCRM_LobbyStamp::key3' has a wrong offset!");
static_assert(offsetof(FCRM_LobbyStamp, key4) == 0x000038, "Member 'FCRM_LobbyStamp::key4' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_MatchingRegistration
// 0x0078 (0x0078 - 0x0000)
struct FCRM_MatchingRegistration final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key4;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key5;                                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key6;                                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key7;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key8;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key9;                                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key10;                                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key99;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRM_MatchingRegistration) == 0x000008, "Wrong alignment on FCRM_MatchingRegistration");
static_assert(sizeof(FCRM_MatchingRegistration) == 0x000078, "Wrong size on FCRM_MatchingRegistration");
static_assert(offsetof(FCRM_MatchingRegistration, action_type) == 0x000000, "Member 'FCRM_MatchingRegistration::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRegistration, key1) == 0x000010, "Member 'FCRM_MatchingRegistration::key1' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRegistration, key2) == 0x000018, "Member 'FCRM_MatchingRegistration::key2' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRegistration, key3) == 0x000028, "Member 'FCRM_MatchingRegistration::key3' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRegistration, key4) == 0x000030, "Member 'FCRM_MatchingRegistration::key4' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRegistration, key5) == 0x000040, "Member 'FCRM_MatchingRegistration::key5' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRegistration, key6) == 0x000044, "Member 'FCRM_MatchingRegistration::key6' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRegistration, key7) == 0x000048, "Member 'FCRM_MatchingRegistration::key7' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRegistration, key8) == 0x000058, "Member 'FCRM_MatchingRegistration::key8' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRegistration, key9) == 0x000068, "Member 'FCRM_MatchingRegistration::key9' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRegistration, key10) == 0x00006C, "Member 'FCRM_MatchingRegistration::key10' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingRegistration, key99) == 0x000070, "Member 'FCRM_MatchingRegistration::key99' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameGadget
// 0x07D0 (0x07D0 - 0x0000)
struct FPlayLogSaveGameGadget final
{
public:
	int32                                         Prossession[0xFA];                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Usage[0xFA];                                       // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSaveGameGadget) == 0x000004, "Wrong alignment on FPlayLogSaveGameGadget");
static_assert(sizeof(FPlayLogSaveGameGadget) == 0x0007D0, "Wrong size on FPlayLogSaveGameGadget");
static_assert(offsetof(FPlayLogSaveGameGadget, Prossession) == 0x000000, "Member 'FPlayLogSaveGameGadget::Prossession' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameGadget, Usage) == 0x0003E8, "Member 'FPlayLogSaveGameGadget::Usage' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_MatchingResult
// 0x0090 (0x0090 - 0x0000)
struct FCRM_MatchingResult final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key4;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key5;                                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key6;                                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key7;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key8;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key9;                                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key10;                                             // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key11;                                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key12;                                             // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key13;                                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key99;                                             // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_MatchingResult) == 0x000008, "Wrong alignment on FCRM_MatchingResult");
static_assert(sizeof(FCRM_MatchingResult) == 0x000090, "Wrong size on FCRM_MatchingResult");
static_assert(offsetof(FCRM_MatchingResult, action_type) == 0x000000, "Member 'FCRM_MatchingResult::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key1) == 0x000010, "Member 'FCRM_MatchingResult::key1' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key2) == 0x000018, "Member 'FCRM_MatchingResult::key2' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key3) == 0x000028, "Member 'FCRM_MatchingResult::key3' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key4) == 0x000030, "Member 'FCRM_MatchingResult::key4' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key5) == 0x000040, "Member 'FCRM_MatchingResult::key5' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key6) == 0x000044, "Member 'FCRM_MatchingResult::key6' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key7) == 0x000048, "Member 'FCRM_MatchingResult::key7' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key8) == 0x000058, "Member 'FCRM_MatchingResult::key8' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key9) == 0x000068, "Member 'FCRM_MatchingResult::key9' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key10) == 0x000070, "Member 'FCRM_MatchingResult::key10' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key11) == 0x000080, "Member 'FCRM_MatchingResult::key11' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key12) == 0x000084, "Member 'FCRM_MatchingResult::key12' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key13) == 0x000088, "Member 'FCRM_MatchingResult::key13' has a wrong offset!");
static_assert(offsetof(FCRM_MatchingResult, key99) == 0x00008C, "Member 'FCRM_MatchingResult::key99' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_Party
// 0x0068 (0x0068 - 0x0000)
struct FCRM_Party final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key2;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 key7;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_Party) == 0x000008, "Wrong alignment on FCRM_Party");
static_assert(sizeof(FCRM_Party) == 0x000068, "Wrong size on FCRM_Party");
static_assert(offsetof(FCRM_Party, action_type) == 0x000000, "Member 'FCRM_Party::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_Party, key1) == 0x000010, "Member 'FCRM_Party::key1' has a wrong offset!");
static_assert(offsetof(FCRM_Party, key2) == 0x000020, "Member 'FCRM_Party::key2' has a wrong offset!");
static_assert(offsetof(FCRM_Party, key3) == 0x000024, "Member 'FCRM_Party::key3' has a wrong offset!");
static_assert(offsetof(FCRM_Party, key4) == 0x000028, "Member 'FCRM_Party::key4' has a wrong offset!");
static_assert(offsetof(FCRM_Party, key5) == 0x000038, "Member 'FCRM_Party::key5' has a wrong offset!");
static_assert(offsetof(FCRM_Party, key6) == 0x000048, "Member 'FCRM_Party::key6' has a wrong offset!");
static_assert(offsetof(FCRM_Party, key7) == 0x000058, "Member 'FCRM_Party::key7' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_ProgressGrandprix
// 0x0060 (0x0060 - 0x0000)
struct FCRM_ProgressGrandprix final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key2;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_ProgressGrandprix) == 0x000008, "Wrong alignment on FCRM_ProgressGrandprix");
static_assert(sizeof(FCRM_ProgressGrandprix) == 0x000060, "Wrong size on FCRM_ProgressGrandprix");
static_assert(offsetof(FCRM_ProgressGrandprix, action_type) == 0x000000, "Member 'FCRM_ProgressGrandprix::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressGrandprix, key1) == 0x000010, "Member 'FCRM_ProgressGrandprix::key1' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressGrandprix, key2) == 0x000020, "Member 'FCRM_ProgressGrandprix::key2' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressGrandprix, key3) == 0x000030, "Member 'FCRM_ProgressGrandprix::key3' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressGrandprix, key4) == 0x000040, "Member 'FCRM_ProgressGrandprix::key4' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressGrandprix, key5) == 0x000050, "Member 'FCRM_ProgressGrandprix::key5' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_ProgressParty
// 0x0060 (0x0060 - 0x0000)
struct FCRM_ProgressParty final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key2;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_ProgressParty) == 0x000008, "Wrong alignment on FCRM_ProgressParty");
static_assert(sizeof(FCRM_ProgressParty) == 0x000060, "Wrong size on FCRM_ProgressParty");
static_assert(offsetof(FCRM_ProgressParty, action_type) == 0x000000, "Member 'FCRM_ProgressParty::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressParty, key1) == 0x000010, "Member 'FCRM_ProgressParty::key1' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressParty, key2) == 0x000020, "Member 'FCRM_ProgressParty::key2' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressParty, key3) == 0x000030, "Member 'FCRM_ProgressParty::key3' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressParty, key4) == 0x000040, "Member 'FCRM_ProgressParty::key4' has a wrong offset!");
static_assert(offsetof(FCRM_ProgressParty, key5) == 0x000050, "Member 'FCRM_ProgressParty::key5' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameFriendMatch
// 0x0088 (0x0088 - 0x0000)
struct FPlayLogSaveGameFriendMatch final
{
public:
	int32                                         PresetPlayCount[0x11];                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PresetPlayTime[0x11];                              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSaveGameFriendMatch) == 0x000004, "Wrong alignment on FPlayLogSaveGameFriendMatch");
static_assert(sizeof(FPlayLogSaveGameFriendMatch) == 0x000088, "Wrong size on FPlayLogSaveGameFriendMatch");
static_assert(offsetof(FPlayLogSaveGameFriendMatch, PresetPlayCount) == 0x000000, "Member 'FPlayLogSaveGameFriendMatch::PresetPlayCount' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameFriendMatch, PresetPlayTime) == 0x000044, "Member 'FPlayLogSaveGameFriendMatch::PresetPlayTime' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RaceLog
// 0x0138 (0x0138 - 0x0000)
struct FCRM_RaceLog final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key2;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key4;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key5;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key6;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key7;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key8;                                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key9;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key10;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key11;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key12;                                             // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key13;                                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key14;                                             // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key15;                                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key16;                                             // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key17;                                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key18;                                             // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key19;                                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key20;                                             // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key21;                                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key22;                                             // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key23;                                             // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key24;                                             // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key25;                                             // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key26;                                             // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key27;                                             // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 key28;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         key29;                                             // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key30;                                             // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key31;                                             // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key33;                                             // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key34;                                             // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key35;                                             // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key36;                                             // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key37;                                             // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key38;                                             // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key39;                                             // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key40;                                             // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key41;                                             // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key42;                                             // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key43;                                             // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key44;                                             // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key45;                                             // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key46;                                             // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key47;                                             // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key48;                                             // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key99;                                             // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRM_RaceLog) == 0x000008, "Wrong alignment on FCRM_RaceLog");
static_assert(sizeof(FCRM_RaceLog) == 0x000138, "Wrong size on FCRM_RaceLog");
static_assert(offsetof(FCRM_RaceLog, action_type) == 0x000000, "Member 'FCRM_RaceLog::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key1) == 0x000010, "Member 'FCRM_RaceLog::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key2) == 0x000014, "Member 'FCRM_RaceLog::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key3) == 0x000018, "Member 'FCRM_RaceLog::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key4) == 0x000020, "Member 'FCRM_RaceLog::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key5) == 0x000030, "Member 'FCRM_RaceLog::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key6) == 0x000038, "Member 'FCRM_RaceLog::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key7) == 0x000048, "Member 'FCRM_RaceLog::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key8) == 0x00004C, "Member 'FCRM_RaceLog::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key9) == 0x000050, "Member 'FCRM_RaceLog::key9' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key10) == 0x000060, "Member 'FCRM_RaceLog::key10' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key11) == 0x000070, "Member 'FCRM_RaceLog::key11' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key12) == 0x000074, "Member 'FCRM_RaceLog::key12' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key13) == 0x000078, "Member 'FCRM_RaceLog::key13' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key14) == 0x00007C, "Member 'FCRM_RaceLog::key14' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key15) == 0x000080, "Member 'FCRM_RaceLog::key15' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key16) == 0x000084, "Member 'FCRM_RaceLog::key16' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key17) == 0x000088, "Member 'FCRM_RaceLog::key17' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key18) == 0x00008C, "Member 'FCRM_RaceLog::key18' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key19) == 0x000090, "Member 'FCRM_RaceLog::key19' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key20) == 0x000094, "Member 'FCRM_RaceLog::key20' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key21) == 0x000098, "Member 'FCRM_RaceLog::key21' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key22) == 0x00009C, "Member 'FCRM_RaceLog::key22' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key23) == 0x0000A0, "Member 'FCRM_RaceLog::key23' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key24) == 0x0000A4, "Member 'FCRM_RaceLog::key24' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key25) == 0x0000A8, "Member 'FCRM_RaceLog::key25' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key26) == 0x0000AC, "Member 'FCRM_RaceLog::key26' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key27) == 0x0000B0, "Member 'FCRM_RaceLog::key27' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key28) == 0x0000B8, "Member 'FCRM_RaceLog::key28' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key29) == 0x0000C8, "Member 'FCRM_RaceLog::key29' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key30) == 0x0000CC, "Member 'FCRM_RaceLog::key30' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key31) == 0x0000D0, "Member 'FCRM_RaceLog::key31' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key33) == 0x0000D4, "Member 'FCRM_RaceLog::key33' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key34) == 0x0000D8, "Member 'FCRM_RaceLog::key34' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key35) == 0x0000DC, "Member 'FCRM_RaceLog::key35' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key36) == 0x0000E0, "Member 'FCRM_RaceLog::key36' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key37) == 0x0000E4, "Member 'FCRM_RaceLog::key37' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key38) == 0x0000E8, "Member 'FCRM_RaceLog::key38' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key39) == 0x0000EC, "Member 'FCRM_RaceLog::key39' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key40) == 0x0000F0, "Member 'FCRM_RaceLog::key40' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key41) == 0x0000F4, "Member 'FCRM_RaceLog::key41' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key42) == 0x0000F8, "Member 'FCRM_RaceLog::key42' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key43) == 0x0000FC, "Member 'FCRM_RaceLog::key43' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key44) == 0x000100, "Member 'FCRM_RaceLog::key44' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key45) == 0x000104, "Member 'FCRM_RaceLog::key45' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key46) == 0x000108, "Member 'FCRM_RaceLog::key46' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key47) == 0x000110, "Member 'FCRM_RaceLog::key47' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key48) == 0x000120, "Member 'FCRM_RaceLog::key48' has a wrong offset!");
static_assert(offsetof(FCRM_RaceLog, key99) == 0x000130, "Member 'FCRM_RaceLog::key99' has a wrong offset!");

// ScriptStruct UnionSystem.FestaMyRankingOperationData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFestaMyRankingOperationData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFestaMyRankingOperationData) == 0x000008, "Wrong alignment on FFestaMyRankingOperationData");
static_assert(sizeof(FFestaMyRankingOperationData) == 0x000018, "Wrong size on FFestaMyRankingOperationData");

// ScriptStruct UnionSystem.CRM_RadjCom
// 0x0078 (0x0078 - 0x0000)
struct FCRM_RadjCom final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjCom) == 0x000008, "Wrong alignment on FCRM_RadjCom");
static_assert(sizeof(FCRM_RadjCom) == 0x000078, "Wrong size on FCRM_RadjCom");
static_assert(offsetof(FCRM_RadjCom, action_type) == 0x000000, "Member 'FCRM_RadjCom::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjCom, key1) == 0x000010, "Member 'FCRM_RadjCom::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjCom, key2) == 0x000018, "Member 'FCRM_RadjCom::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjCom, key3) == 0x000028, "Member 'FCRM_RadjCom::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjCom, key4) == 0x000038, "Member 'FCRM_RadjCom::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjCom, key5) == 0x000048, "Member 'FCRM_RadjCom::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjCom, key6) == 0x000058, "Member 'FCRM_RadjCom::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjCom, key7) == 0x000068, "Member 'FCRM_RadjCom::key7' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataAccelOff
// 0x0068 (0x0068 - 0x0000)
struct FCRM_RadjDataAccelOff final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataAccelOff) == 0x000008, "Wrong alignment on FCRM_RadjDataAccelOff");
static_assert(sizeof(FCRM_RadjDataAccelOff) == 0x000068, "Wrong size on FCRM_RadjDataAccelOff");
static_assert(offsetof(FCRM_RadjDataAccelOff, action_type) == 0x000000, "Member 'FCRM_RadjDataAccelOff::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAccelOff, key1) == 0x000010, "Member 'FCRM_RadjDataAccelOff::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAccelOff, key2) == 0x000018, "Member 'FCRM_RadjDataAccelOff::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAccelOff, key3) == 0x000028, "Member 'FCRM_RadjDataAccelOff::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAccelOff, key4) == 0x000038, "Member 'FCRM_RadjDataAccelOff::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAccelOff, key5) == 0x000048, "Member 'FCRM_RadjDataAccelOff::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAccelOff, key6) == 0x000058, "Member 'FCRM_RadjDataAccelOff::key6' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataAccelOn
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataAccelOn final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataAccelOn) == 0x000008, "Wrong alignment on FCRM_RadjDataAccelOn");
static_assert(sizeof(FCRM_RadjDataAccelOn) == 0x000038, "Wrong size on FCRM_RadjDataAccelOn");
static_assert(offsetof(FCRM_RadjDataAccelOn, action_type) == 0x000000, "Member 'FCRM_RadjDataAccelOn::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAccelOn, key1) == 0x000010, "Member 'FCRM_RadjDataAccelOn::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAccelOn, key2) == 0x000018, "Member 'FCRM_RadjDataAccelOn::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAccelOn, key3) == 0x000028, "Member 'FCRM_RadjDataAccelOn::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataAirtrickEnd
// 0x0048 (0x0048 - 0x0000)
struct FCRM_RadjDataAirtrickEnd final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataAirtrickEnd) == 0x000008, "Wrong alignment on FCRM_RadjDataAirtrickEnd");
static_assert(sizeof(FCRM_RadjDataAirtrickEnd) == 0x000048, "Wrong size on FCRM_RadjDataAirtrickEnd");
static_assert(offsetof(FCRM_RadjDataAirtrickEnd, action_type) == 0x000000, "Member 'FCRM_RadjDataAirtrickEnd::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAirtrickEnd, key1) == 0x000010, "Member 'FCRM_RadjDataAirtrickEnd::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAirtrickEnd, key2) == 0x000018, "Member 'FCRM_RadjDataAirtrickEnd::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAirtrickEnd, key3) == 0x000028, "Member 'FCRM_RadjDataAirtrickEnd::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAirtrickEnd, key4) == 0x000038, "Member 'FCRM_RadjDataAirtrickEnd::key4' has a wrong offset!");

// ScriptStruct UnionSystem.LegendCompeFriendRankingOperationData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FLegendCompeFriendRankingOperationData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLegendCompeFriendRankingOperationData) == 0x000008, "Wrong alignment on FLegendCompeFriendRankingOperationData");
static_assert(sizeof(FLegendCompeFriendRankingOperationData) == 0x000020, "Wrong size on FLegendCompeFriendRankingOperationData");

// ScriptStruct UnionSystem.CRM_RadjDataAirtrickStart
// 0x0068 (0x0068 - 0x0000)
struct FCRM_RadjDataAirtrickStart final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataAirtrickStart) == 0x000008, "Wrong alignment on FCRM_RadjDataAirtrickStart");
static_assert(sizeof(FCRM_RadjDataAirtrickStart) == 0x000068, "Wrong size on FCRM_RadjDataAirtrickStart");
static_assert(offsetof(FCRM_RadjDataAirtrickStart, action_type) == 0x000000, "Member 'FCRM_RadjDataAirtrickStart::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAirtrickStart, key1) == 0x000010, "Member 'FCRM_RadjDataAirtrickStart::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAirtrickStart, key2) == 0x000018, "Member 'FCRM_RadjDataAirtrickStart::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAirtrickStart, key3) == 0x000028, "Member 'FCRM_RadjDataAirtrickStart::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAirtrickStart, key4) == 0x000038, "Member 'FCRM_RadjDataAirtrickStart::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAirtrickStart, key5) == 0x000048, "Member 'FCRM_RadjDataAirtrickStart::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataAirtrickStart, key6) == 0x000058, "Member 'FCRM_RadjDataAirtrickStart::key6' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBackEnd
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataBackEnd final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBackEnd) == 0x000008, "Wrong alignment on FCRM_RadjDataBackEnd");
static_assert(sizeof(FCRM_RadjDataBackEnd) == 0x000038, "Wrong size on FCRM_RadjDataBackEnd");
static_assert(offsetof(FCRM_RadjDataBackEnd, action_type) == 0x000000, "Member 'FCRM_RadjDataBackEnd::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBackEnd, key1) == 0x000010, "Member 'FCRM_RadjDataBackEnd::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBackEnd, key2) == 0x000018, "Member 'FCRM_RadjDataBackEnd::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBackEnd, key3) == 0x000028, "Member 'FCRM_RadjDataBackEnd::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBodyHitAssistWall
// 0x0098 (0x0098 - 0x0000)
struct FCRM_RadjDataBodyHitAssistWall final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBodyHitAssistWall) == 0x000008, "Wrong alignment on FCRM_RadjDataBodyHitAssistWall");
static_assert(sizeof(FCRM_RadjDataBodyHitAssistWall) == 0x000098, "Wrong size on FCRM_RadjDataBodyHitAssistWall");
static_assert(offsetof(FCRM_RadjDataBodyHitAssistWall, action_type) == 0x000000, "Member 'FCRM_RadjDataBodyHitAssistWall::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitAssistWall, key1) == 0x000010, "Member 'FCRM_RadjDataBodyHitAssistWall::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitAssistWall, key2) == 0x000018, "Member 'FCRM_RadjDataBodyHitAssistWall::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitAssistWall, key3) == 0x000028, "Member 'FCRM_RadjDataBodyHitAssistWall::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitAssistWall, key4) == 0x000038, "Member 'FCRM_RadjDataBodyHitAssistWall::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitAssistWall, key5) == 0x000048, "Member 'FCRM_RadjDataBodyHitAssistWall::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitAssistWall, key6) == 0x000058, "Member 'FCRM_RadjDataBodyHitAssistWall::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitAssistWall, key7) == 0x000068, "Member 'FCRM_RadjDataBodyHitAssistWall::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitAssistWall, key8) == 0x000078, "Member 'FCRM_RadjDataBodyHitAssistWall::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitAssistWall, key9) == 0x000088, "Member 'FCRM_RadjDataBodyHitAssistWall::key9' has a wrong offset!");

// ScriptStruct UnionSystem.ReplaySaveSlot
// 0x0010 (0x0010 - 0x0000)
struct FReplaySaveSlot final
{
public:
	TArray<struct FReplaySaveInfo>                ReplayInfo;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplaySaveSlot) == 0x000008, "Wrong alignment on FReplaySaveSlot");
static_assert(sizeof(FReplaySaveSlot) == 0x000010, "Wrong size on FReplaySaveSlot");
static_assert(offsetof(FReplaySaveSlot, ReplayInfo) == 0x000000, "Member 'FReplaySaveSlot::ReplayInfo' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBodyHitIrregular
// 0x0098 (0x0098 - 0x0000)
struct FCRM_RadjDataBodyHitIrregular final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBodyHitIrregular) == 0x000008, "Wrong alignment on FCRM_RadjDataBodyHitIrregular");
static_assert(sizeof(FCRM_RadjDataBodyHitIrregular) == 0x000098, "Wrong size on FCRM_RadjDataBodyHitIrregular");
static_assert(offsetof(FCRM_RadjDataBodyHitIrregular, action_type) == 0x000000, "Member 'FCRM_RadjDataBodyHitIrregular::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitIrregular, key1) == 0x000010, "Member 'FCRM_RadjDataBodyHitIrregular::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitIrregular, key2) == 0x000018, "Member 'FCRM_RadjDataBodyHitIrregular::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitIrregular, key3) == 0x000028, "Member 'FCRM_RadjDataBodyHitIrregular::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitIrregular, key4) == 0x000038, "Member 'FCRM_RadjDataBodyHitIrregular::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitIrregular, key5) == 0x000048, "Member 'FCRM_RadjDataBodyHitIrregular::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitIrregular, key6) == 0x000058, "Member 'FCRM_RadjDataBodyHitIrregular::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitIrregular, key7) == 0x000068, "Member 'FCRM_RadjDataBodyHitIrregular::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitIrregular, key8) == 0x000078, "Member 'FCRM_RadjDataBodyHitIrregular::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitIrregular, key9) == 0x000088, "Member 'FCRM_RadjDataBodyHitIrregular::key9' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBodyHitMachine
// 0x0048 (0x0048 - 0x0000)
struct FCRM_RadjDataBodyHitMachine final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBodyHitMachine) == 0x000008, "Wrong alignment on FCRM_RadjDataBodyHitMachine");
static_assert(sizeof(FCRM_RadjDataBodyHitMachine) == 0x000048, "Wrong size on FCRM_RadjDataBodyHitMachine");
static_assert(offsetof(FCRM_RadjDataBodyHitMachine, action_type) == 0x000000, "Member 'FCRM_RadjDataBodyHitMachine::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitMachine, key1) == 0x000010, "Member 'FCRM_RadjDataBodyHitMachine::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitMachine, key2) == 0x000018, "Member 'FCRM_RadjDataBodyHitMachine::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitMachine, key3) == 0x000028, "Member 'FCRM_RadjDataBodyHitMachine::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitMachine, key4) == 0x000038, "Member 'FCRM_RadjDataBodyHitMachine::key4' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBodyHitObject
// 0x0098 (0x0098 - 0x0000)
struct FCRM_RadjDataBodyHitObject final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBodyHitObject) == 0x000008, "Wrong alignment on FCRM_RadjDataBodyHitObject");
static_assert(sizeof(FCRM_RadjDataBodyHitObject) == 0x000098, "Wrong size on FCRM_RadjDataBodyHitObject");
static_assert(offsetof(FCRM_RadjDataBodyHitObject, action_type) == 0x000000, "Member 'FCRM_RadjDataBodyHitObject::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitObject, key1) == 0x000010, "Member 'FCRM_RadjDataBodyHitObject::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitObject, key2) == 0x000018, "Member 'FCRM_RadjDataBodyHitObject::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitObject, key3) == 0x000028, "Member 'FCRM_RadjDataBodyHitObject::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitObject, key4) == 0x000038, "Member 'FCRM_RadjDataBodyHitObject::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitObject, key5) == 0x000048, "Member 'FCRM_RadjDataBodyHitObject::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitObject, key6) == 0x000058, "Member 'FCRM_RadjDataBodyHitObject::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitObject, key7) == 0x000068, "Member 'FCRM_RadjDataBodyHitObject::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitObject, key8) == 0x000078, "Member 'FCRM_RadjDataBodyHitObject::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitObject, key9) == 0x000088, "Member 'FCRM_RadjDataBodyHitObject::key9' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBodyHitWall
// 0x0098 (0x0098 - 0x0000)
struct FCRM_RadjDataBodyHitWall final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBodyHitWall) == 0x000008, "Wrong alignment on FCRM_RadjDataBodyHitWall");
static_assert(sizeof(FCRM_RadjDataBodyHitWall) == 0x000098, "Wrong size on FCRM_RadjDataBodyHitWall");
static_assert(offsetof(FCRM_RadjDataBodyHitWall, action_type) == 0x000000, "Member 'FCRM_RadjDataBodyHitWall::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitWall, key1) == 0x000010, "Member 'FCRM_RadjDataBodyHitWall::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitWall, key2) == 0x000018, "Member 'FCRM_RadjDataBodyHitWall::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitWall, key3) == 0x000028, "Member 'FCRM_RadjDataBodyHitWall::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitWall, key4) == 0x000038, "Member 'FCRM_RadjDataBodyHitWall::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitWall, key5) == 0x000048, "Member 'FCRM_RadjDataBodyHitWall::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitWall, key6) == 0x000058, "Member 'FCRM_RadjDataBodyHitWall::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitWall, key7) == 0x000068, "Member 'FCRM_RadjDataBodyHitWall::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitWall, key8) == 0x000078, "Member 'FCRM_RadjDataBodyHitWall::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBodyHitWall, key9) == 0x000088, "Member 'FCRM_RadjDataBodyHitWall::key9' has a wrong offset!");

// ScriptStruct UnionSystem.Common_RaceTimeData
// 0x0010 (0x0010 - 0x0000)
struct FCommon_RaceTimeData final
{
public:
	int32                                         goalTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lapTime1;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lapTime2;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lapTime3;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommon_RaceTimeData) == 0x000004, "Wrong alignment on FCommon_RaceTimeData");
static_assert(sizeof(FCommon_RaceTimeData) == 0x000010, "Wrong size on FCommon_RaceTimeData");
static_assert(offsetof(FCommon_RaceTimeData, goalTime) == 0x000000, "Member 'FCommon_RaceTimeData::goalTime' has a wrong offset!");
static_assert(offsetof(FCommon_RaceTimeData, lapTime1) == 0x000004, "Member 'FCommon_RaceTimeData::lapTime1' has a wrong offset!");
static_assert(offsetof(FCommon_RaceTimeData, lapTime2) == 0x000008, "Member 'FCommon_RaceTimeData::lapTime2' has a wrong offset!");
static_assert(offsetof(FCommon_RaceTimeData, lapTime3) == 0x00000C, "Member 'FCommon_RaceTimeData::lapTime3' has a wrong offset!");

// ScriptStruct UnionSystem.ResultSaveTimeTrialResultRequest_TimeTrialData
// 0x03F0 (0x03F0 - 0x0000)
struct FResultSaveTimeTrialResultRequest_TimeTrialData final
{
public:
	int32                                         courseId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         speedType;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         degreeId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         plateId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_TimeTrialMachineData           MachineData;                                       // 0x0018(0x0378)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_GadgetData                     GadgetData;                                        // 0x0390(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_RaceTimeData                   raceTimeData;                                      // 0x03AC(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DateTime;                                          // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         runnigSpeed;                                       // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 hashValue;                                         // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isRaceCheat;                                       // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResultSaveTimeTrialResultRequest_TimeTrialData) == 0x000008, "Wrong alignment on FResultSaveTimeTrialResultRequest_TimeTrialData");
static_assert(sizeof(FResultSaveTimeTrialResultRequest_TimeTrialData) == 0x0003F0, "Wrong size on FResultSaveTimeTrialResultRequest_TimeTrialData");
static_assert(offsetof(FResultSaveTimeTrialResultRequest_TimeTrialData, courseId) == 0x000000, "Member 'FResultSaveTimeTrialResultRequest_TimeTrialData::courseId' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultRequest_TimeTrialData, speedType) == 0x000004, "Member 'FResultSaveTimeTrialResultRequest_TimeTrialData::speedType' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultRequest_TimeTrialData, characterId) == 0x000008, "Member 'FResultSaveTimeTrialResultRequest_TimeTrialData::characterId' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultRequest_TimeTrialData, degreeId) == 0x00000C, "Member 'FResultSaveTimeTrialResultRequest_TimeTrialData::degreeId' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultRequest_TimeTrialData, plateId) == 0x000010, "Member 'FResultSaveTimeTrialResultRequest_TimeTrialData::plateId' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultRequest_TimeTrialData, MachineData) == 0x000018, "Member 'FResultSaveTimeTrialResultRequest_TimeTrialData::MachineData' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultRequest_TimeTrialData, GadgetData) == 0x000390, "Member 'FResultSaveTimeTrialResultRequest_TimeTrialData::GadgetData' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultRequest_TimeTrialData, raceTimeData) == 0x0003AC, "Member 'FResultSaveTimeTrialResultRequest_TimeTrialData::raceTimeData' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultRequest_TimeTrialData, DateTime) == 0x0003C0, "Member 'FResultSaveTimeTrialResultRequest_TimeTrialData::DateTime' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultRequest_TimeTrialData, runnigSpeed) == 0x0003D0, "Member 'FResultSaveTimeTrialResultRequest_TimeTrialData::runnigSpeed' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultRequest_TimeTrialData, hashValue) == 0x0003D8, "Member 'FResultSaveTimeTrialResultRequest_TimeTrialData::hashValue' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultRequest_TimeTrialData, isRaceCheat) == 0x0003E8, "Member 'FResultSaveTimeTrialResultRequest_TimeTrialData::isRaceCheat' has a wrong offset!");

// ScriptStruct UnionSystem.ResultSaveTimeTrialResultRequest
// 0x0010 (0x0010 - 0x0000)
struct FResultSaveTimeTrialResultRequest final
{
public:
	TArray<struct FResultSaveTimeTrialResultRequest_TimeTrialData> bestRecord;                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultSaveTimeTrialResultRequest) == 0x000008, "Wrong alignment on FResultSaveTimeTrialResultRequest");
static_assert(sizeof(FResultSaveTimeTrialResultRequest) == 0x000010, "Wrong size on FResultSaveTimeTrialResultRequest");
static_assert(offsetof(FResultSaveTimeTrialResultRequest, bestRecord) == 0x000000, "Member 'FResultSaveTimeTrialResultRequest::bestRecord' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBoostAbsorbEnd
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataBoostAbsorbEnd final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBoostAbsorbEnd) == 0x000008, "Wrong alignment on FCRM_RadjDataBoostAbsorbEnd");
static_assert(sizeof(FCRM_RadjDataBoostAbsorbEnd) == 0x000038, "Wrong size on FCRM_RadjDataBoostAbsorbEnd");
static_assert(offsetof(FCRM_RadjDataBoostAbsorbEnd, action_type) == 0x000000, "Member 'FCRM_RadjDataBoostAbsorbEnd::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostAbsorbEnd, key1) == 0x000010, "Member 'FCRM_RadjDataBoostAbsorbEnd::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostAbsorbEnd, key2) == 0x000018, "Member 'FCRM_RadjDataBoostAbsorbEnd::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostAbsorbEnd, key3) == 0x000028, "Member 'FCRM_RadjDataBoostAbsorbEnd::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBoostAbsorbEntry
// 0x0058 (0x0058 - 0x0000)
struct FCRM_RadjDataBoostAbsorbEntry final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBoostAbsorbEntry) == 0x000008, "Wrong alignment on FCRM_RadjDataBoostAbsorbEntry");
static_assert(sizeof(FCRM_RadjDataBoostAbsorbEntry) == 0x000058, "Wrong size on FCRM_RadjDataBoostAbsorbEntry");
static_assert(offsetof(FCRM_RadjDataBoostAbsorbEntry, action_type) == 0x000000, "Member 'FCRM_RadjDataBoostAbsorbEntry::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostAbsorbEntry, key1) == 0x000010, "Member 'FCRM_RadjDataBoostAbsorbEntry::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostAbsorbEntry, key2) == 0x000018, "Member 'FCRM_RadjDataBoostAbsorbEntry::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostAbsorbEntry, key3) == 0x000028, "Member 'FCRM_RadjDataBoostAbsorbEntry::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostAbsorbEntry, key4) == 0x000038, "Member 'FCRM_RadjDataBoostAbsorbEntry::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostAbsorbEntry, key5) == 0x000048, "Member 'FCRM_RadjDataBoostAbsorbEntry::key5' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBoostRingMinus
// 0x0048 (0x0048 - 0x0000)
struct FCRM_RadjDataBoostRingMinus final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBoostRingMinus) == 0x000008, "Wrong alignment on FCRM_RadjDataBoostRingMinus");
static_assert(sizeof(FCRM_RadjDataBoostRingMinus) == 0x000048, "Wrong size on FCRM_RadjDataBoostRingMinus");
static_assert(offsetof(FCRM_RadjDataBoostRingMinus, action_type) == 0x000000, "Member 'FCRM_RadjDataBoostRingMinus::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostRingMinus, key1) == 0x000010, "Member 'FCRM_RadjDataBoostRingMinus::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostRingMinus, key2) == 0x000018, "Member 'FCRM_RadjDataBoostRingMinus::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostRingMinus, key3) == 0x000028, "Member 'FCRM_RadjDataBoostRingMinus::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostRingMinus, key4) == 0x000038, "Member 'FCRM_RadjDataBoostRingMinus::key4' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBoostRingPlus
// 0x0078 (0x0078 - 0x0000)
struct FCRM_RadjDataBoostRingPlus final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBoostRingPlus) == 0x000008, "Wrong alignment on FCRM_RadjDataBoostRingPlus");
static_assert(sizeof(FCRM_RadjDataBoostRingPlus) == 0x000078, "Wrong size on FCRM_RadjDataBoostRingPlus");
static_assert(offsetof(FCRM_RadjDataBoostRingPlus, action_type) == 0x000000, "Member 'FCRM_RadjDataBoostRingPlus::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostRingPlus, key1) == 0x000010, "Member 'FCRM_RadjDataBoostRingPlus::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostRingPlus, key2) == 0x000018, "Member 'FCRM_RadjDataBoostRingPlus::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostRingPlus, key3) == 0x000028, "Member 'FCRM_RadjDataBoostRingPlus::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostRingPlus, key4) == 0x000038, "Member 'FCRM_RadjDataBoostRingPlus::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostRingPlus, key5) == 0x000048, "Member 'FCRM_RadjDataBoostRingPlus::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostRingPlus, key6) == 0x000058, "Member 'FCRM_RadjDataBoostRingPlus::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostRingPlus, key7) == 0x000068, "Member 'FCRM_RadjDataBoostRingPlus::key7' has a wrong offset!");

// ScriptStruct UnionSystem.TrackData
// 0x00A8 (0x00A8 - 0x0000)
struct FTrackData final
{
public:
	int32                                         TrackID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlbumID;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BGMName;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TitleName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ArtistName;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SourceName;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              JacketTexture;                                     // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           SoundCue;                                          // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJukeboxOnly;                                     // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAvailableLap                                 AvailableLap;                                      // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExtendContent;                                   // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x00A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AvailableOnAlbumUnLocked;                          // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackData) == 0x000008, "Wrong alignment on FTrackData");
static_assert(sizeof(FTrackData) == 0x0000A8, "Wrong size on FTrackData");
static_assert(offsetof(FTrackData, TrackID) == 0x000000, "Member 'FTrackData::TrackID' has a wrong offset!");
static_assert(offsetof(FTrackData, AlbumID) == 0x000004, "Member 'FTrackData::AlbumID' has a wrong offset!");
static_assert(offsetof(FTrackData, SortID) == 0x000008, "Member 'FTrackData::SortID' has a wrong offset!");
static_assert(offsetof(FTrackData, BGMName) == 0x000010, "Member 'FTrackData::BGMName' has a wrong offset!");
static_assert(offsetof(FTrackData, TitleName) == 0x000020, "Member 'FTrackData::TitleName' has a wrong offset!");
static_assert(offsetof(FTrackData, ArtistName) == 0x000030, "Member 'FTrackData::ArtistName' has a wrong offset!");
static_assert(offsetof(FTrackData, SourceName) == 0x000040, "Member 'FTrackData::SourceName' has a wrong offset!");
static_assert(offsetof(FTrackData, JacketTexture) == 0x000050, "Member 'FTrackData::JacketTexture' has a wrong offset!");
static_assert(offsetof(FTrackData, SoundCue) == 0x000078, "Member 'FTrackData::SoundCue' has a wrong offset!");
static_assert(offsetof(FTrackData, IsJukeboxOnly) == 0x0000A0, "Member 'FTrackData::IsJukeboxOnly' has a wrong offset!");
static_assert(offsetof(FTrackData, AvailableLap) == 0x0000A1, "Member 'FTrackData::AvailableLap' has a wrong offset!");
static_assert(offsetof(FTrackData, IsExtendContent) == 0x0000A2, "Member 'FTrackData::IsExtendContent' has a wrong offset!");
static_assert(offsetof(FTrackData, contentId) == 0x0000A3, "Member 'FTrackData::contentId' has a wrong offset!");
static_assert(offsetof(FTrackData, AvailableOnAlbumUnLocked) == 0x0000A4, "Member 'FTrackData::AvailableOnAlbumUnLocked' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBoostSlipstreamEnd
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataBoostSlipstreamEnd final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBoostSlipstreamEnd) == 0x000008, "Wrong alignment on FCRM_RadjDataBoostSlipstreamEnd");
static_assert(sizeof(FCRM_RadjDataBoostSlipstreamEnd) == 0x000038, "Wrong size on FCRM_RadjDataBoostSlipstreamEnd");
static_assert(offsetof(FCRM_RadjDataBoostSlipstreamEnd, action_type) == 0x000000, "Member 'FCRM_RadjDataBoostSlipstreamEnd::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostSlipstreamEnd, key1) == 0x000010, "Member 'FCRM_RadjDataBoostSlipstreamEnd::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostSlipstreamEnd, key2) == 0x000018, "Member 'FCRM_RadjDataBoostSlipstreamEnd::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostSlipstreamEnd, key3) == 0x000028, "Member 'FCRM_RadjDataBoostSlipstreamEnd::key3' has a wrong offset!");

// ScriptStruct UnionSystem.HonorTitleListDataTable
// 0x0058 (0x0060 - 0x0008)
struct FHonorTitleListDataTable final : public FTableRowBase
{
public:
	class FName                                   HonorTitleName;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HonorTitleVB;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Rarity;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHonorTitleFontColor                          FontColor;                                         // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              PlateImage;                                        // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentUnlockSortID;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDLC;                                             // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCom;                                            // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHonorTitleListDataTable) == 0x000008, "Wrong alignment on FHonorTitleListDataTable");
static_assert(sizeof(FHonorTitleListDataTable) == 0x000060, "Wrong size on FHonorTitleListDataTable");
static_assert(offsetof(FHonorTitleListDataTable, HonorTitleName) == 0x000008, "Member 'FHonorTitleListDataTable::HonorTitleName' has a wrong offset!");
static_assert(offsetof(FHonorTitleListDataTable, HonorTitleVB) == 0x000010, "Member 'FHonorTitleListDataTable::HonorTitleVB' has a wrong offset!");
static_assert(offsetof(FHonorTitleListDataTable, Rarity) == 0x000020, "Member 'FHonorTitleListDataTable::Rarity' has a wrong offset!");
static_assert(offsetof(FHonorTitleListDataTable, FontColor) == 0x000024, "Member 'FHonorTitleListDataTable::FontColor' has a wrong offset!");
static_assert(offsetof(FHonorTitleListDataTable, PlateImage) == 0x000028, "Member 'FHonorTitleListDataTable::PlateImage' has a wrong offset!");
static_assert(offsetof(FHonorTitleListDataTable, SortID) == 0x000050, "Member 'FHonorTitleListDataTable::SortID' has a wrong offset!");
static_assert(offsetof(FHonorTitleListDataTable, ContentUnlockSortID) == 0x000054, "Member 'FHonorTitleListDataTable::ContentUnlockSortID' has a wrong offset!");
static_assert(offsetof(FHonorTitleListDataTable, IsDLC) == 0x000058, "Member 'FHonorTitleListDataTable::IsDLC' has a wrong offset!");
static_assert(offsetof(FHonorTitleListDataTable, UseCom) == 0x000059, "Member 'FHonorTitleListDataTable::UseCom' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBoostSlipstreamStart
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataBoostSlipstreamStart final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBoostSlipstreamStart) == 0x000008, "Wrong alignment on FCRM_RadjDataBoostSlipstreamStart");
static_assert(sizeof(FCRM_RadjDataBoostSlipstreamStart) == 0x000038, "Wrong size on FCRM_RadjDataBoostSlipstreamStart");
static_assert(offsetof(FCRM_RadjDataBoostSlipstreamStart, action_type) == 0x000000, "Member 'FCRM_RadjDataBoostSlipstreamStart::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostSlipstreamStart, key1) == 0x000010, "Member 'FCRM_RadjDataBoostSlipstreamStart::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostSlipstreamStart, key2) == 0x000018, "Member 'FCRM_RadjDataBoostSlipstreamStart::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBoostSlipstreamStart, key3) == 0x000028, "Member 'FCRM_RadjDataBoostSlipstreamStart::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataBrakeOff
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataBrakeOff final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataBrakeOff) == 0x000008, "Wrong alignment on FCRM_RadjDataBrakeOff");
static_assert(sizeof(FCRM_RadjDataBrakeOff) == 0x000038, "Wrong size on FCRM_RadjDataBrakeOff");
static_assert(offsetof(FCRM_RadjDataBrakeOff, action_type) == 0x000000, "Member 'FCRM_RadjDataBrakeOff::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBrakeOff, key1) == 0x000010, "Member 'FCRM_RadjDataBrakeOff::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBrakeOff, key2) == 0x000018, "Member 'FCRM_RadjDataBrakeOff::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataBrakeOff, key3) == 0x000028, "Member 'FCRM_RadjDataBrakeOff::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataCheckPoint
// 0x00B8 (0x00B8 - 0x0000)
struct FCRM_RadjDataCheckPoint final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key10;                                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key11;                                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataCheckPoint) == 0x000008, "Wrong alignment on FCRM_RadjDataCheckPoint");
static_assert(sizeof(FCRM_RadjDataCheckPoint) == 0x0000B8, "Wrong size on FCRM_RadjDataCheckPoint");
static_assert(offsetof(FCRM_RadjDataCheckPoint, action_type) == 0x000000, "Member 'FCRM_RadjDataCheckPoint::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataCheckPoint, key1) == 0x000010, "Member 'FCRM_RadjDataCheckPoint::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataCheckPoint, key2) == 0x000018, "Member 'FCRM_RadjDataCheckPoint::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataCheckPoint, key3) == 0x000028, "Member 'FCRM_RadjDataCheckPoint::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataCheckPoint, key4) == 0x000038, "Member 'FCRM_RadjDataCheckPoint::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataCheckPoint, key5) == 0x000048, "Member 'FCRM_RadjDataCheckPoint::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataCheckPoint, key6) == 0x000058, "Member 'FCRM_RadjDataCheckPoint::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataCheckPoint, key7) == 0x000068, "Member 'FCRM_RadjDataCheckPoint::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataCheckPoint, key8) == 0x000078, "Member 'FCRM_RadjDataCheckPoint::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataCheckPoint, key9) == 0x000088, "Member 'FCRM_RadjDataCheckPoint::key9' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataCheckPoint, key10) == 0x000098, "Member 'FCRM_RadjDataCheckPoint::key10' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataCheckPoint, key11) == 0x0000A8, "Member 'FCRM_RadjDataCheckPoint::key11' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataDriftOff
// 0x0048 (0x0048 - 0x0000)
struct FCRM_RadjDataDriftOff final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataDriftOff) == 0x000008, "Wrong alignment on FCRM_RadjDataDriftOff");
static_assert(sizeof(FCRM_RadjDataDriftOff) == 0x000048, "Wrong size on FCRM_RadjDataDriftOff");
static_assert(offsetof(FCRM_RadjDataDriftOff, action_type) == 0x000000, "Member 'FCRM_RadjDataDriftOff::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataDriftOff, key1) == 0x000010, "Member 'FCRM_RadjDataDriftOff::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataDriftOff, key2) == 0x000018, "Member 'FCRM_RadjDataDriftOff::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataDriftOff, key3) == 0x000028, "Member 'FCRM_RadjDataDriftOff::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataDriftOff, key4) == 0x000038, "Member 'FCRM_RadjDataDriftOff::key4' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataDriftOn
// 0x0078 (0x0078 - 0x0000)
struct FCRM_RadjDataDriftOn final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataDriftOn) == 0x000008, "Wrong alignment on FCRM_RadjDataDriftOn");
static_assert(sizeof(FCRM_RadjDataDriftOn) == 0x000078, "Wrong size on FCRM_RadjDataDriftOn");
static_assert(offsetof(FCRM_RadjDataDriftOn, action_type) == 0x000000, "Member 'FCRM_RadjDataDriftOn::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataDriftOn, key1) == 0x000010, "Member 'FCRM_RadjDataDriftOn::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataDriftOn, key2) == 0x000018, "Member 'FCRM_RadjDataDriftOn::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataDriftOn, key3) == 0x000028, "Member 'FCRM_RadjDataDriftOn::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataDriftOn, key4) == 0x000038, "Member 'FCRM_RadjDataDriftOn::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataDriftOn, key5) == 0x000048, "Member 'FCRM_RadjDataDriftOn::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataDriftOn, key6) == 0x000058, "Member 'FCRM_RadjDataDriftOn::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataDriftOn, key7) == 0x000068, "Member 'FCRM_RadjDataDriftOn::key7' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataEventsOnline
// 0x0058 (0x0058 - 0x0000)
struct FCRM_RadjDataEventsOnline final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataEventsOnline) == 0x000008, "Wrong alignment on FCRM_RadjDataEventsOnline");
static_assert(sizeof(FCRM_RadjDataEventsOnline) == 0x000058, "Wrong size on FCRM_RadjDataEventsOnline");
static_assert(offsetof(FCRM_RadjDataEventsOnline, action_type) == 0x000000, "Member 'FCRM_RadjDataEventsOnline::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataEventsOnline, key1) == 0x000010, "Member 'FCRM_RadjDataEventsOnline::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataEventsOnline, key2) == 0x000018, "Member 'FCRM_RadjDataEventsOnline::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataEventsOnline, key3) == 0x000028, "Member 'FCRM_RadjDataEventsOnline::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataEventsOnline, key4) == 0x000038, "Member 'FCRM_RadjDataEventsOnline::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataEventsOnline, key5) == 0x000048, "Member 'FCRM_RadjDataEventsOnline::key5' has a wrong offset!");

// ScriptStruct UnionSystem.LobbyGetEosLobbyIdRequest
// 0x0010 (0x0010 - 0x0000)
struct FLobbyGetEosLobbyIdRequest final
{
public:
	class FString                                 ShortLobbyId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyGetEosLobbyIdRequest) == 0x000008, "Wrong alignment on FLobbyGetEosLobbyIdRequest");
static_assert(sizeof(FLobbyGetEosLobbyIdRequest) == 0x000010, "Wrong size on FLobbyGetEosLobbyIdRequest");
static_assert(offsetof(FLobbyGetEosLobbyIdRequest, ShortLobbyId) == 0x000000, "Member 'FLobbyGetEosLobbyIdRequest::ShortLobbyId' has a wrong offset!");

// ScriptStruct UnionSystem.AlbumDataTable
// 0x0070 (0x0078 - 0x0008)
struct FAlbumDataTable final : public FTableRowBase
{
public:
	int32                                         AlbumID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentUnlockSortID;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AlbumNameString;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AlbumName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SourceName;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              JacketTexture;                                     // 0x0048(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJukeboxOnly;                                     // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExtendContent;                                   // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x0072(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultAvailable;                                  // 0x0073(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAlbumDataTable) == 0x000008, "Wrong alignment on FAlbumDataTable");
static_assert(sizeof(FAlbumDataTable) == 0x000078, "Wrong size on FAlbumDataTable");
static_assert(offsetof(FAlbumDataTable, AlbumID) == 0x000008, "Member 'FAlbumDataTable::AlbumID' has a wrong offset!");
static_assert(offsetof(FAlbumDataTable, SortID) == 0x00000C, "Member 'FAlbumDataTable::SortID' has a wrong offset!");
static_assert(offsetof(FAlbumDataTable, ContentUnlockSortID) == 0x000010, "Member 'FAlbumDataTable::ContentUnlockSortID' has a wrong offset!");
static_assert(offsetof(FAlbumDataTable, AlbumNameString) == 0x000018, "Member 'FAlbumDataTable::AlbumNameString' has a wrong offset!");
static_assert(offsetof(FAlbumDataTable, AlbumName) == 0x000028, "Member 'FAlbumDataTable::AlbumName' has a wrong offset!");
static_assert(offsetof(FAlbumDataTable, SourceName) == 0x000038, "Member 'FAlbumDataTable::SourceName' has a wrong offset!");
static_assert(offsetof(FAlbumDataTable, JacketTexture) == 0x000048, "Member 'FAlbumDataTable::JacketTexture' has a wrong offset!");
static_assert(offsetof(FAlbumDataTable, IsJukeboxOnly) == 0x000070, "Member 'FAlbumDataTable::IsJukeboxOnly' has a wrong offset!");
static_assert(offsetof(FAlbumDataTable, IsExtendContent) == 0x000071, "Member 'FAlbumDataTable::IsExtendContent' has a wrong offset!");
static_assert(offsetof(FAlbumDataTable, contentId) == 0x000072, "Member 'FAlbumDataTable::contentId' has a wrong offset!");
static_assert(offsetof(FAlbumDataTable, DefaultAvailable) == 0x000073, "Member 'FAlbumDataTable::DefaultAvailable' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataFrameRateBoostingEnd
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataFrameRateBoostingEnd final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataFrameRateBoostingEnd) == 0x000008, "Wrong alignment on FCRM_RadjDataFrameRateBoostingEnd");
static_assert(sizeof(FCRM_RadjDataFrameRateBoostingEnd) == 0x000038, "Wrong size on FCRM_RadjDataFrameRateBoostingEnd");
static_assert(offsetof(FCRM_RadjDataFrameRateBoostingEnd, action_type) == 0x000000, "Member 'FCRM_RadjDataFrameRateBoostingEnd::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataFrameRateBoostingEnd, key1) == 0x000010, "Member 'FCRM_RadjDataFrameRateBoostingEnd::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataFrameRateBoostingEnd, key2) == 0x000018, "Member 'FCRM_RadjDataFrameRateBoostingEnd::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataFrameRateBoostingEnd, key3) == 0x000028, "Member 'FCRM_RadjDataFrameRateBoostingEnd::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataGameHighLoadingEnd
// 0x0058 (0x0058 - 0x0000)
struct FCRM_RadjDataGameHighLoadingEnd final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataGameHighLoadingEnd) == 0x000008, "Wrong alignment on FCRM_RadjDataGameHighLoadingEnd");
static_assert(sizeof(FCRM_RadjDataGameHighLoadingEnd) == 0x000058, "Wrong size on FCRM_RadjDataGameHighLoadingEnd");
static_assert(offsetof(FCRM_RadjDataGameHighLoadingEnd, action_type) == 0x000000, "Member 'FCRM_RadjDataGameHighLoadingEnd::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGameHighLoadingEnd, key1) == 0x000010, "Member 'FCRM_RadjDataGameHighLoadingEnd::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGameHighLoadingEnd, key2) == 0x000018, "Member 'FCRM_RadjDataGameHighLoadingEnd::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGameHighLoadingEnd, key3) == 0x000028, "Member 'FCRM_RadjDataGameHighLoadingEnd::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGameHighLoadingEnd, key4) == 0x000038, "Member 'FCRM_RadjDataGameHighLoadingEnd::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGameHighLoadingEnd, key5) == 0x000048, "Member 'FCRM_RadjDataGameHighLoadingEnd::key5' has a wrong offset!");

// ScriptStruct UnionSystem.LobbyRemoveLobbyRequest
// 0x0010 (0x0010 - 0x0000)
struct FLobbyRemoveLobbyRequest final
{
public:
	class FString                                 ShortLobbyId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyRemoveLobbyRequest) == 0x000008, "Wrong alignment on FLobbyRemoveLobbyRequest");
static_assert(sizeof(FLobbyRemoveLobbyRequest) == 0x000010, "Wrong size on FLobbyRemoveLobbyRequest");
static_assert(offsetof(FLobbyRemoveLobbyRequest, ShortLobbyId) == 0x000000, "Member 'FLobbyRemoveLobbyRequest::ShortLobbyId' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataGameHighLoadingStart
// 0x0058 (0x0058 - 0x0000)
struct FCRM_RadjDataGameHighLoadingStart final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataGameHighLoadingStart) == 0x000008, "Wrong alignment on FCRM_RadjDataGameHighLoadingStart");
static_assert(sizeof(FCRM_RadjDataGameHighLoadingStart) == 0x000058, "Wrong size on FCRM_RadjDataGameHighLoadingStart");
static_assert(offsetof(FCRM_RadjDataGameHighLoadingStart, action_type) == 0x000000, "Member 'FCRM_RadjDataGameHighLoadingStart::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGameHighLoadingStart, key1) == 0x000010, "Member 'FCRM_RadjDataGameHighLoadingStart::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGameHighLoadingStart, key2) == 0x000018, "Member 'FCRM_RadjDataGameHighLoadingStart::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGameHighLoadingStart, key3) == 0x000028, "Member 'FCRM_RadjDataGameHighLoadingStart::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGameHighLoadingStart, key4) == 0x000038, "Member 'FCRM_RadjDataGameHighLoadingStart::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGameHighLoadingStart, key5) == 0x000048, "Member 'FCRM_RadjDataGameHighLoadingStart::key5' has a wrong offset!");

// ScriptStruct UnionSystem.MenuGroupRaceEnergyData
// 0x0010 (0x0018 - 0x0008)
struct FMenuGroupRaceEnergyData final : public FTableRowBase
{
public:
	class FText                                   EventInfoTeamGageRuleExplainFesta;                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMenuGroupRaceEnergyData) == 0x000008, "Wrong alignment on FMenuGroupRaceEnergyData");
static_assert(sizeof(FMenuGroupRaceEnergyData) == 0x000018, "Wrong size on FMenuGroupRaceEnergyData");
static_assert(offsetof(FMenuGroupRaceEnergyData, EventInfoTeamGageRuleExplainFesta) == 0x000008, "Member 'FMenuGroupRaceEnergyData::EventInfoTeamGageRuleExplainFesta' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataGuideJumpEnd
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataGuideJumpEnd final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataGuideJumpEnd) == 0x000008, "Wrong alignment on FCRM_RadjDataGuideJumpEnd");
static_assert(sizeof(FCRM_RadjDataGuideJumpEnd) == 0x000038, "Wrong size on FCRM_RadjDataGuideJumpEnd");
static_assert(offsetof(FCRM_RadjDataGuideJumpEnd, action_type) == 0x000000, "Member 'FCRM_RadjDataGuideJumpEnd::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGuideJumpEnd, key1) == 0x000010, "Member 'FCRM_RadjDataGuideJumpEnd::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGuideJumpEnd, key2) == 0x000018, "Member 'FCRM_RadjDataGuideJumpEnd::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGuideJumpEnd, key3) == 0x000028, "Member 'FCRM_RadjDataGuideJumpEnd::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataGuideJumpStart
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataGuideJumpStart final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataGuideJumpStart) == 0x000008, "Wrong alignment on FCRM_RadjDataGuideJumpStart");
static_assert(sizeof(FCRM_RadjDataGuideJumpStart) == 0x000038, "Wrong size on FCRM_RadjDataGuideJumpStart");
static_assert(offsetof(FCRM_RadjDataGuideJumpStart, action_type) == 0x000000, "Member 'FCRM_RadjDataGuideJumpStart::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGuideJumpStart, key1) == 0x000010, "Member 'FCRM_RadjDataGuideJumpStart::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGuideJumpStart, key2) == 0x000018, "Member 'FCRM_RadjDataGuideJumpStart::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataGuideJumpStart, key3) == 0x000028, "Member 'FCRM_RadjDataGuideJumpStart::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataItemEnd
// 0x0098 (0x0098 - 0x0000)
struct FCRM_RadjDataItemEnd final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataItemEnd) == 0x000008, "Wrong alignment on FCRM_RadjDataItemEnd");
static_assert(sizeof(FCRM_RadjDataItemEnd) == 0x000098, "Wrong size on FCRM_RadjDataItemEnd");
static_assert(offsetof(FCRM_RadjDataItemEnd, action_type) == 0x000000, "Member 'FCRM_RadjDataItemEnd::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemEnd, key1) == 0x000010, "Member 'FCRM_RadjDataItemEnd::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemEnd, key2) == 0x000018, "Member 'FCRM_RadjDataItemEnd::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemEnd, key3) == 0x000028, "Member 'FCRM_RadjDataItemEnd::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemEnd, key4) == 0x000038, "Member 'FCRM_RadjDataItemEnd::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemEnd, key5) == 0x000048, "Member 'FCRM_RadjDataItemEnd::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemEnd, key6) == 0x000058, "Member 'FCRM_RadjDataItemEnd::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemEnd, key7) == 0x000068, "Member 'FCRM_RadjDataItemEnd::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemEnd, key8) == 0x000078, "Member 'FCRM_RadjDataItemEnd::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemEnd, key9) == 0x000088, "Member 'FCRM_RadjDataItemEnd::key9' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_LegendCompeGradeTableData
// 0x000C (0x000C - 0x0000)
struct FNetMasterData_LegendCompeGradeTableData final
{
public:
	int32                                         legendGradeId;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gradeValue;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rateValue;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_LegendCompeGradeTableData) == 0x000004, "Wrong alignment on FNetMasterData_LegendCompeGradeTableData");
static_assert(sizeof(FNetMasterData_LegendCompeGradeTableData) == 0x00000C, "Wrong size on FNetMasterData_LegendCompeGradeTableData");
static_assert(offsetof(FNetMasterData_LegendCompeGradeTableData, legendGradeId) == 0x000000, "Member 'FNetMasterData_LegendCompeGradeTableData::legendGradeId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeGradeTableData, gradeValue) == 0x000004, "Member 'FNetMasterData_LegendCompeGradeTableData::gradeValue' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeGradeTableData, rateValue) == 0x000008, "Member 'FNetMasterData_LegendCompeGradeTableData::rateValue' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataItemGet
// 0x00D8 (0x00D8 - 0x0000)
struct FCRM_RadjDataItemGet final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key10;                                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key11;                                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key12;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         key13;                                             // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataItemGet) == 0x000008, "Wrong alignment on FCRM_RadjDataItemGet");
static_assert(sizeof(FCRM_RadjDataItemGet) == 0x0000D8, "Wrong size on FCRM_RadjDataItemGet");
static_assert(offsetof(FCRM_RadjDataItemGet, action_type) == 0x000000, "Member 'FCRM_RadjDataItemGet::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key1) == 0x000010, "Member 'FCRM_RadjDataItemGet::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key2) == 0x000018, "Member 'FCRM_RadjDataItemGet::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key3) == 0x000028, "Member 'FCRM_RadjDataItemGet::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key4) == 0x000038, "Member 'FCRM_RadjDataItemGet::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key5) == 0x000048, "Member 'FCRM_RadjDataItemGet::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key6) == 0x000058, "Member 'FCRM_RadjDataItemGet::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key7) == 0x000068, "Member 'FCRM_RadjDataItemGet::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key8) == 0x000078, "Member 'FCRM_RadjDataItemGet::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key9) == 0x000088, "Member 'FCRM_RadjDataItemGet::key9' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key10) == 0x000098, "Member 'FCRM_RadjDataItemGet::key10' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key11) == 0x0000A8, "Member 'FCRM_RadjDataItemGet::key11' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key12) == 0x0000B8, "Member 'FCRM_RadjDataItemGet::key12' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemGet, key13) == 0x0000C8, "Member 'FCRM_RadjDataItemGet::key13' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataItemStart
// 0x00A8 (0x00A8 - 0x0000)
struct FCRM_RadjDataItemStart final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key10;                                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataItemStart) == 0x000008, "Wrong alignment on FCRM_RadjDataItemStart");
static_assert(sizeof(FCRM_RadjDataItemStart) == 0x0000A8, "Wrong size on FCRM_RadjDataItemStart");
static_assert(offsetof(FCRM_RadjDataItemStart, action_type) == 0x000000, "Member 'FCRM_RadjDataItemStart::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemStart, key1) == 0x000010, "Member 'FCRM_RadjDataItemStart::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemStart, key2) == 0x000018, "Member 'FCRM_RadjDataItemStart::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemStart, key3) == 0x000028, "Member 'FCRM_RadjDataItemStart::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemStart, key4) == 0x000038, "Member 'FCRM_RadjDataItemStart::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemStart, key5) == 0x000048, "Member 'FCRM_RadjDataItemStart::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemStart, key6) == 0x000058, "Member 'FCRM_RadjDataItemStart::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemStart, key7) == 0x000068, "Member 'FCRM_RadjDataItemStart::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemStart, key8) == 0x000078, "Member 'FCRM_RadjDataItemStart::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemStart, key9) == 0x000088, "Member 'FCRM_RadjDataItemStart::key9' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataItemStart, key10) == 0x000098, "Member 'FCRM_RadjDataItemStart::key10' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataJumpEnd
// 0x0048 (0x0048 - 0x0000)
struct FCRM_RadjDataJumpEnd final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataJumpEnd) == 0x000008, "Wrong alignment on FCRM_RadjDataJumpEnd");
static_assert(sizeof(FCRM_RadjDataJumpEnd) == 0x000048, "Wrong size on FCRM_RadjDataJumpEnd");
static_assert(offsetof(FCRM_RadjDataJumpEnd, action_type) == 0x000000, "Member 'FCRM_RadjDataJumpEnd::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpEnd, key1) == 0x000010, "Member 'FCRM_RadjDataJumpEnd::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpEnd, key2) == 0x000018, "Member 'FCRM_RadjDataJumpEnd::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpEnd, key3) == 0x000028, "Member 'FCRM_RadjDataJumpEnd::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataJumpEnd, key4) == 0x000038, "Member 'FCRM_RadjDataJumpEnd::key4' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_LegendCompeRewardFirstCountData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_LegendCompeRewardFirstCountData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstCount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_LegendCompeRewardFirstCountData) == 0x000004, "Wrong alignment on FNetMasterData_LegendCompeRewardFirstCountData");
static_assert(sizeof(FNetMasterData_LegendCompeRewardFirstCountData) == 0x000014, "Wrong size on FNetMasterData_LegendCompeRewardFirstCountData");
static_assert(offsetof(FNetMasterData_LegendCompeRewardFirstCountData, ID) == 0x000000, "Member 'FNetMasterData_LegendCompeRewardFirstCountData::ID' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardFirstCountData, firstCount) == 0x000004, "Member 'FNetMasterData_LegendCompeRewardFirstCountData::firstCount' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardFirstCountData, rewardType) == 0x000008, "Member 'FNetMasterData_LegendCompeRewardFirstCountData::rewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardFirstCountData, rewardId) == 0x00000C, "Member 'FNetMasterData_LegendCompeRewardFirstCountData::rewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardFirstCountData, rewardNum) == 0x000010, "Member 'FNetMasterData_LegendCompeRewardFirstCountData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataMisalignment
// 0x0078 (0x0078 - 0x0000)
struct FCRM_RadjDataMisalignment final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataMisalignment) == 0x000008, "Wrong alignment on FCRM_RadjDataMisalignment");
static_assert(sizeof(FCRM_RadjDataMisalignment) == 0x000078, "Wrong size on FCRM_RadjDataMisalignment");
static_assert(offsetof(FCRM_RadjDataMisalignment, action_type) == 0x000000, "Member 'FCRM_RadjDataMisalignment::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataMisalignment, key1) == 0x000010, "Member 'FCRM_RadjDataMisalignment::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataMisalignment, key2) == 0x000018, "Member 'FCRM_RadjDataMisalignment::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataMisalignment, key3) == 0x000028, "Member 'FCRM_RadjDataMisalignment::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataMisalignment, key4) == 0x000038, "Member 'FCRM_RadjDataMisalignment::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataMisalignment, key5) == 0x000048, "Member 'FCRM_RadjDataMisalignment::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataMisalignment, key6) == 0x000058, "Member 'FCRM_RadjDataMisalignment::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataMisalignment, key7) == 0x000068, "Member 'FCRM_RadjDataMisalignment::key7' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataOvertaken
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataOvertaken final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataOvertaken) == 0x000008, "Wrong alignment on FCRM_RadjDataOvertaken");
static_assert(sizeof(FCRM_RadjDataOvertaken) == 0x000038, "Wrong size on FCRM_RadjDataOvertaken");
static_assert(offsetof(FCRM_RadjDataOvertaken, action_type) == 0x000000, "Member 'FCRM_RadjDataOvertaken::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataOvertaken, key1) == 0x000010, "Member 'FCRM_RadjDataOvertaken::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataOvertaken, key2) == 0x000018, "Member 'FCRM_RadjDataOvertaken::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataOvertaken, key3) == 0x000028, "Member 'FCRM_RadjDataOvertaken::key3' has a wrong offset!");

// ScriptStruct UnionSystem.LobbyComSettings
// 0x000C (0x000C - 0x0000)
struct FLobbyComSettings final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AverageOnlineRank;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyComSettings) == 0x000004, "Wrong alignment on FLobbyComSettings");
static_assert(sizeof(FLobbyComSettings) == 0x00000C, "Wrong size on FLobbyComSettings");
static_assert(offsetof(FLobbyComSettings, AverageOnlineRank) == 0x000008, "Member 'FLobbyComSettings::AverageOnlineRank' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataPositionsOnline
// 0x00F8 (0x00F8 - 0x0000)
struct FCRM_RadjDataPositionsOnline final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key8;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key9;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key10;                                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key11;                                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key12;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key13;                                             // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key14;                                             // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key15;                                             // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataPositionsOnline) == 0x000008, "Wrong alignment on FCRM_RadjDataPositionsOnline");
static_assert(sizeof(FCRM_RadjDataPositionsOnline) == 0x0000F8, "Wrong size on FCRM_RadjDataPositionsOnline");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, action_type) == 0x000000, "Member 'FCRM_RadjDataPositionsOnline::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key1) == 0x000010, "Member 'FCRM_RadjDataPositionsOnline::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key2) == 0x000018, "Member 'FCRM_RadjDataPositionsOnline::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key3) == 0x000028, "Member 'FCRM_RadjDataPositionsOnline::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key4) == 0x000038, "Member 'FCRM_RadjDataPositionsOnline::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key5) == 0x000048, "Member 'FCRM_RadjDataPositionsOnline::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key6) == 0x000058, "Member 'FCRM_RadjDataPositionsOnline::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key7) == 0x000068, "Member 'FCRM_RadjDataPositionsOnline::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key8) == 0x000078, "Member 'FCRM_RadjDataPositionsOnline::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key9) == 0x000088, "Member 'FCRM_RadjDataPositionsOnline::key9' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key10) == 0x000098, "Member 'FCRM_RadjDataPositionsOnline::key10' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key11) == 0x0000A8, "Member 'FCRM_RadjDataPositionsOnline::key11' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key12) == 0x0000B8, "Member 'FCRM_RadjDataPositionsOnline::key12' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key13) == 0x0000C8, "Member 'FCRM_RadjDataPositionsOnline::key13' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key14) == 0x0000D8, "Member 'FCRM_RadjDataPositionsOnline::key14' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataPositionsOnline, key15) == 0x0000E8, "Member 'FCRM_RadjDataPositionsOnline::key15' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataRankdown
// 0x0058 (0x0058 - 0x0000)
struct FCRM_RadjDataRankdown final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataRankdown) == 0x000008, "Wrong alignment on FCRM_RadjDataRankdown");
static_assert(sizeof(FCRM_RadjDataRankdown) == 0x000058, "Wrong size on FCRM_RadjDataRankdown");
static_assert(offsetof(FCRM_RadjDataRankdown, action_type) == 0x000000, "Member 'FCRM_RadjDataRankdown::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRankdown, key1) == 0x000010, "Member 'FCRM_RadjDataRankdown::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRankdown, key2) == 0x000018, "Member 'FCRM_RadjDataRankdown::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRankdown, key3) == 0x000028, "Member 'FCRM_RadjDataRankdown::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRankdown, key4) == 0x000038, "Member 'FCRM_RadjDataRankdown::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRankdown, key5) == 0x000048, "Member 'FCRM_RadjDataRankdown::key5' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataRankup
// 0x0058 (0x0058 - 0x0000)
struct FCRM_RadjDataRankup final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataRankup) == 0x000008, "Wrong alignment on FCRM_RadjDataRankup");
static_assert(sizeof(FCRM_RadjDataRankup) == 0x000058, "Wrong size on FCRM_RadjDataRankup");
static_assert(offsetof(FCRM_RadjDataRankup, action_type) == 0x000000, "Member 'FCRM_RadjDataRankup::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRankup, key1) == 0x000010, "Member 'FCRM_RadjDataRankup::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRankup, key2) == 0x000018, "Member 'FCRM_RadjDataRankup::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRankup, key3) == 0x000028, "Member 'FCRM_RadjDataRankup::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRankup, key4) == 0x000038, "Member 'FCRM_RadjDataRankup::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRankup, key5) == 0x000048, "Member 'FCRM_RadjDataRankup::key5' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FreeContentData
// 0x0018 (0x0018 - 0x0000)
struct FNetMasterData_FreeContentData final
{
public:
	int32                                         contentType;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         contentId;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FreeContentData) == 0x000008, "Wrong alignment on FNetMasterData_FreeContentData");
static_assert(sizeof(FNetMasterData_FreeContentData) == 0x000018, "Wrong size on FNetMasterData_FreeContentData");
static_assert(offsetof(FNetMasterData_FreeContentData, contentType) == 0x000000, "Member 'FNetMasterData_FreeContentData::contentType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FreeContentData, contentId) == 0x000004, "Member 'FNetMasterData_FreeContentData::contentId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FreeContentData, releaseTime) == 0x000008, "Member 'FNetMasterData_FreeContentData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataRearViewOff
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataRearViewOff final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataRearViewOff) == 0x000008, "Wrong alignment on FCRM_RadjDataRearViewOff");
static_assert(sizeof(FCRM_RadjDataRearViewOff) == 0x000038, "Wrong size on FCRM_RadjDataRearViewOff");
static_assert(offsetof(FCRM_RadjDataRearViewOff, action_type) == 0x000000, "Member 'FCRM_RadjDataRearViewOff::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRearViewOff, key1) == 0x000010, "Member 'FCRM_RadjDataRearViewOff::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRearViewOff, key2) == 0x000018, "Member 'FCRM_RadjDataRearViewOff::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRearViewOff, key3) == 0x000028, "Member 'FCRM_RadjDataRearViewOff::key3' has a wrong offset!");

// ScriptStruct UnionSystem.UserKeyConfigMap
// 0x0140 (0x0140 - 0x0000)
struct FUserKeyConfigMap final
{
public:
	TMap<EMenuInputKey, struct FKey>              MenuKeyConfigGamePad;                              // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EMenuInputKey, struct FKey>              MenuKeyConfigKeyboard;                             // 0x0050(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EKeyConfigRace, struct FKey>             RaceKeyConfigGamePad;                              // 0x00A0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EKeyConfigRace, struct FKey>             RaceKeyConfigKeyboard;                             // 0x00F0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserKeyConfigMap) == 0x000008, "Wrong alignment on FUserKeyConfigMap");
static_assert(sizeof(FUserKeyConfigMap) == 0x000140, "Wrong size on FUserKeyConfigMap");
static_assert(offsetof(FUserKeyConfigMap, MenuKeyConfigGamePad) == 0x000000, "Member 'FUserKeyConfigMap::MenuKeyConfigGamePad' has a wrong offset!");
static_assert(offsetof(FUserKeyConfigMap, MenuKeyConfigKeyboard) == 0x000050, "Member 'FUserKeyConfigMap::MenuKeyConfigKeyboard' has a wrong offset!");
static_assert(offsetof(FUserKeyConfigMap, RaceKeyConfigGamePad) == 0x0000A0, "Member 'FUserKeyConfigMap::RaceKeyConfigGamePad' has a wrong offset!");
static_assert(offsetof(FUserKeyConfigMap, RaceKeyConfigKeyboard) == 0x0000F0, "Member 'FUserKeyConfigMap::RaceKeyConfigKeyboard' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataRearViewOn
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataRearViewOn final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataRearViewOn) == 0x000008, "Wrong alignment on FCRM_RadjDataRearViewOn");
static_assert(sizeof(FCRM_RadjDataRearViewOn) == 0x000038, "Wrong size on FCRM_RadjDataRearViewOn");
static_assert(offsetof(FCRM_RadjDataRearViewOn, action_type) == 0x000000, "Member 'FCRM_RadjDataRearViewOn::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRearViewOn, key1) == 0x000010, "Member 'FCRM_RadjDataRearViewOn::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRearViewOn, key2) == 0x000018, "Member 'FCRM_RadjDataRearViewOn::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRearViewOn, key3) == 0x000028, "Member 'FCRM_RadjDataRearViewOn::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataRedStarRing
// 0x0078 (0x0078 - 0x0000)
struct FCRM_RadjDataRedStarRing final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataRedStarRing) == 0x000008, "Wrong alignment on FCRM_RadjDataRedStarRing");
static_assert(sizeof(FCRM_RadjDataRedStarRing) == 0x000078, "Wrong size on FCRM_RadjDataRedStarRing");
static_assert(offsetof(FCRM_RadjDataRedStarRing, action_type) == 0x000000, "Member 'FCRM_RadjDataRedStarRing::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRedStarRing, key1) == 0x000010, "Member 'FCRM_RadjDataRedStarRing::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRedStarRing, key2) == 0x000018, "Member 'FCRM_RadjDataRedStarRing::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRedStarRing, key3) == 0x000028, "Member 'FCRM_RadjDataRedStarRing::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRedStarRing, key4) == 0x000038, "Member 'FCRM_RadjDataRedStarRing::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRedStarRing, key5) == 0x000048, "Member 'FCRM_RadjDataRedStarRing::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRedStarRing, key6) == 0x000058, "Member 'FCRM_RadjDataRedStarRing::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRedStarRing, key7) == 0x000068, "Member 'FCRM_RadjDataRedStarRing::key7' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataRespot
// 0x0078 (0x0078 - 0x0000)
struct FCRM_RadjDataRespot final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataRespot) == 0x000008, "Wrong alignment on FCRM_RadjDataRespot");
static_assert(sizeof(FCRM_RadjDataRespot) == 0x000078, "Wrong size on FCRM_RadjDataRespot");
static_assert(offsetof(FCRM_RadjDataRespot, action_type) == 0x000000, "Member 'FCRM_RadjDataRespot::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRespot, key1) == 0x000010, "Member 'FCRM_RadjDataRespot::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRespot, key2) == 0x000018, "Member 'FCRM_RadjDataRespot::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRespot, key3) == 0x000028, "Member 'FCRM_RadjDataRespot::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRespot, key4) == 0x000038, "Member 'FCRM_RadjDataRespot::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRespot, key5) == 0x000048, "Member 'FCRM_RadjDataRespot::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRespot, key6) == 0x000058, "Member 'FCRM_RadjDataRespot::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataRespot, key7) == 0x000068, "Member 'FCRM_RadjDataRespot::key7' has a wrong offset!");

// ScriptStruct UnionSystem.MachinePostProcessSettings
// 0x0003 (0x0003 - 0x0000)
struct FMachinePostProcessSettings final
{
public:
	bool                                          bEnableHiSpeedPP;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRadialBlurPP;                               // 0x0001(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFlowingWaterPP;                             // 0x0002(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachinePostProcessSettings) == 0x000001, "Wrong alignment on FMachinePostProcessSettings");
static_assert(sizeof(FMachinePostProcessSettings) == 0x000003, "Wrong size on FMachinePostProcessSettings");
static_assert(offsetof(FMachinePostProcessSettings, bEnableHiSpeedPP) == 0x000000, "Member 'FMachinePostProcessSettings::bEnableHiSpeedPP' has a wrong offset!");
static_assert(offsetof(FMachinePostProcessSettings, bEnableRadialBlurPP) == 0x000001, "Member 'FMachinePostProcessSettings::bEnableRadialBlurPP' has a wrong offset!");
static_assert(offsetof(FMachinePostProcessSettings, bEnableFlowingWaterPP) == 0x000002, "Member 'FMachinePostProcessSettings::bEnableFlowingWaterPP' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataStartDash
// 0x0068 (0x0068 - 0x0000)
struct FCRM_RadjDataStartDash final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataStartDash) == 0x000008, "Wrong alignment on FCRM_RadjDataStartDash");
static_assert(sizeof(FCRM_RadjDataStartDash) == 0x000068, "Wrong size on FCRM_RadjDataStartDash");
static_assert(offsetof(FCRM_RadjDataStartDash, action_type) == 0x000000, "Member 'FCRM_RadjDataStartDash::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataStartDash, key1) == 0x000010, "Member 'FCRM_RadjDataStartDash::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataStartDash, key2) == 0x000018, "Member 'FCRM_RadjDataStartDash::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataStartDash, key3) == 0x000028, "Member 'FCRM_RadjDataStartDash::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataStartDash, key4) == 0x000038, "Member 'FCRM_RadjDataStartDash::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataStartDash, key5) == 0x000048, "Member 'FCRM_RadjDataStartDash::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataStartDash, key6) == 0x000058, "Member 'FCRM_RadjDataStartDash::key6' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetVersionResponse_MasterVersionData
// 0x0020 (0x0020 - 0x0000)
struct FMasterDataGetVersionResponse_MasterVersionData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetVersionResponse_MasterVersionData) == 0x000008, "Wrong alignment on FMasterDataGetVersionResponse_MasterVersionData");
static_assert(sizeof(FMasterDataGetVersionResponse_MasterVersionData) == 0x000020, "Wrong size on FMasterDataGetVersionResponse_MasterVersionData");
static_assert(offsetof(FMasterDataGetVersionResponse_MasterVersionData, Name) == 0x000000, "Member 'FMasterDataGetVersionResponse_MasterVersionData::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataGetVersionResponse_MasterVersionData, Version) == 0x000010, "Member 'FMasterDataGetVersionResponse_MasterVersionData::Version' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetVersionResponse
// 0x0010 (0x0010 - 0x0000)
struct FMasterDataGetVersionResponse final
{
public:
	TArray<struct FMasterDataGetVersionResponse_MasterVersionData> masterVersionDatas;               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetVersionResponse) == 0x000008, "Wrong alignment on FMasterDataGetVersionResponse");
static_assert(sizeof(FMasterDataGetVersionResponse) == 0x000010, "Wrong size on FMasterDataGetVersionResponse");
static_assert(offsetof(FMasterDataGetVersionResponse, masterVersionDatas) == 0x000000, "Member 'FMasterDataGetVersionResponse::masterVersionDatas' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataSteerDownOn
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataSteerDownOn final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataSteerDownOn) == 0x000008, "Wrong alignment on FCRM_RadjDataSteerDownOn");
static_assert(sizeof(FCRM_RadjDataSteerDownOn) == 0x000038, "Wrong size on FCRM_RadjDataSteerDownOn");
static_assert(offsetof(FCRM_RadjDataSteerDownOn, action_type) == 0x000000, "Member 'FCRM_RadjDataSteerDownOn::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerDownOn, key1) == 0x000010, "Member 'FCRM_RadjDataSteerDownOn::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerDownOn, key2) == 0x000018, "Member 'FCRM_RadjDataSteerDownOn::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerDownOn, key3) == 0x000028, "Member 'FCRM_RadjDataSteerDownOn::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataSteerLeftOn
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataSteerLeftOn final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataSteerLeftOn) == 0x000008, "Wrong alignment on FCRM_RadjDataSteerLeftOn");
static_assert(sizeof(FCRM_RadjDataSteerLeftOn) == 0x000038, "Wrong size on FCRM_RadjDataSteerLeftOn");
static_assert(offsetof(FCRM_RadjDataSteerLeftOn, action_type) == 0x000000, "Member 'FCRM_RadjDataSteerLeftOn::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerLeftOn, key1) == 0x000010, "Member 'FCRM_RadjDataSteerLeftOn::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerLeftOn, key2) == 0x000018, "Member 'FCRM_RadjDataSteerLeftOn::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerLeftOn, key3) == 0x000028, "Member 'FCRM_RadjDataSteerLeftOn::key3' has a wrong offset!");

// ScriptStruct UnionSystem.MatchingLobbySettings
// 0x000C (0x000C - 0x0000)
struct FMatchingLobbySettings final
{
public:
	float                                         MaxScreenPercentage;                               // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinScreenPercentage;                               // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameTimeBudget;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchingLobbySettings) == 0x000004, "Wrong alignment on FMatchingLobbySettings");
static_assert(sizeof(FMatchingLobbySettings) == 0x00000C, "Wrong size on FMatchingLobbySettings");
static_assert(offsetof(FMatchingLobbySettings, MaxScreenPercentage) == 0x000000, "Member 'FMatchingLobbySettings::MaxScreenPercentage' has a wrong offset!");
static_assert(offsetof(FMatchingLobbySettings, MinScreenPercentage) == 0x000004, "Member 'FMatchingLobbySettings::MinScreenPercentage' has a wrong offset!");
static_assert(offsetof(FMatchingLobbySettings, FrameTimeBudget) == 0x000008, "Member 'FMatchingLobbySettings::FrameTimeBudget' has a wrong offset!");

// ScriptStruct UnionSystem.HornData
// 0x00D0 (0x00D8 - 0x0008)
struct FHornData final : public FTableRowBase
{
public:
	int32                                         Version;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineHornType                              MachineHornID;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HornName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          HornNiagaraData;                                   // 0x0020(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           HornSoundData;                                     // 0x0048(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ThumbnailTexture;                                  // 0x0070(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLock;                                             // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DialogTextCateogryName;                            // 0x00A0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DialogTextTitleMain;                               // 0x00B0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DialogTextTitleSub;                                // 0x00C0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHornData) == 0x000008, "Wrong alignment on FHornData");
static_assert(sizeof(FHornData) == 0x0000D8, "Wrong size on FHornData");
static_assert(offsetof(FHornData, Version) == 0x000008, "Member 'FHornData::Version' has a wrong offset!");
static_assert(offsetof(FHornData, MachineHornID) == 0x00000C, "Member 'FHornData::MachineHornID' has a wrong offset!");
static_assert(offsetof(FHornData, HornName) == 0x000010, "Member 'FHornData::HornName' has a wrong offset!");
static_assert(offsetof(FHornData, HornNiagaraData) == 0x000020, "Member 'FHornData::HornNiagaraData' has a wrong offset!");
static_assert(offsetof(FHornData, HornSoundData) == 0x000048, "Member 'FHornData::HornSoundData' has a wrong offset!");
static_assert(offsetof(FHornData, ThumbnailTexture) == 0x000070, "Member 'FHornData::ThumbnailTexture' has a wrong offset!");
static_assert(offsetof(FHornData, Price) == 0x000098, "Member 'FHornData::Price' has a wrong offset!");
static_assert(offsetof(FHornData, bLock) == 0x00009C, "Member 'FHornData::bLock' has a wrong offset!");
static_assert(offsetof(FHornData, DialogTextCateogryName) == 0x0000A0, "Member 'FHornData::DialogTextCateogryName' has a wrong offset!");
static_assert(offsetof(FHornData, DialogTextTitleMain) == 0x0000B0, "Member 'FHornData::DialogTextTitleMain' has a wrong offset!");
static_assert(offsetof(FHornData, DialogTextTitleSub) == 0x0000C0, "Member 'FHornData::DialogTextTitleSub' has a wrong offset!");
static_assert(offsetof(FHornData, SortID) == 0x0000D0, "Member 'FHornData::SortID' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataSteerRightOn
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataSteerRightOn final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataSteerRightOn) == 0x000008, "Wrong alignment on FCRM_RadjDataSteerRightOn");
static_assert(sizeof(FCRM_RadjDataSteerRightOn) == 0x000038, "Wrong size on FCRM_RadjDataSteerRightOn");
static_assert(offsetof(FCRM_RadjDataSteerRightOn, action_type) == 0x000000, "Member 'FCRM_RadjDataSteerRightOn::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerRightOn, key1) == 0x000010, "Member 'FCRM_RadjDataSteerRightOn::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerRightOn, key2) == 0x000018, "Member 'FCRM_RadjDataSteerRightOn::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataSteerRightOn, key3) == 0x000028, "Member 'FCRM_RadjDataSteerRightOn::key3' has a wrong offset!");

// ScriptStruct UnionSystem.LanguageTable
// 0x0008 (0x0010 - 0x0008)
struct FLanguageTable final : public FTableRowBase
{
public:
	ELanguage                                     TextLanguage;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELanguage                                     VoiceLanguage;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLanguageTable) == 0x000008, "Wrong alignment on FLanguageTable");
static_assert(sizeof(FLanguageTable) == 0x000010, "Wrong size on FLanguageTable");
static_assert(offsetof(FLanguageTable, TextLanguage) == 0x000008, "Member 'FLanguageTable::TextLanguage' has a wrong offset!");
static_assert(offsetof(FLanguageTable, VoiceLanguage) == 0x000009, "Member 'FLanguageTable::VoiceLanguage' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjDataWidened
// 0x0038 (0x0038 - 0x0000)
struct FCRM_RadjDataWidened final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjDataWidened) == 0x000008, "Wrong alignment on FCRM_RadjDataWidened");
static_assert(sizeof(FCRM_RadjDataWidened) == 0x000038, "Wrong size on FCRM_RadjDataWidened");
static_assert(offsetof(FCRM_RadjDataWidened, action_type) == 0x000000, "Member 'FCRM_RadjDataWidened::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataWidened, key1) == 0x000010, "Member 'FCRM_RadjDataWidened::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataWidened, key2) == 0x000018, "Member 'FCRM_RadjDataWidened::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjDataWidened, key3) == 0x000028, "Member 'FCRM_RadjDataWidened::key3' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjLocalPlayer
// 0x0068 (0x0068 - 0x0000)
struct FCRM_RadjLocalPlayer final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjLocalPlayer) == 0x000008, "Wrong alignment on FCRM_RadjLocalPlayer");
static_assert(sizeof(FCRM_RadjLocalPlayer) == 0x000068, "Wrong size on FCRM_RadjLocalPlayer");
static_assert(offsetof(FCRM_RadjLocalPlayer, action_type) == 0x000000, "Member 'FCRM_RadjLocalPlayer::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjLocalPlayer, key1) == 0x000010, "Member 'FCRM_RadjLocalPlayer::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjLocalPlayer, key2) == 0x000018, "Member 'FCRM_RadjLocalPlayer::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjLocalPlayer, key3) == 0x000028, "Member 'FCRM_RadjLocalPlayer::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjLocalPlayer, key4) == 0x000038, "Member 'FCRM_RadjLocalPlayer::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjLocalPlayer, key5) == 0x000048, "Member 'FCRM_RadjLocalPlayer::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjLocalPlayer, key6) == 0x000058, "Member 'FCRM_RadjLocalPlayer::key6' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_RadjOnlinePlayer
// 0x0068 (0x0068 - 0x0000)
struct FCRM_RadjOnlinePlayer final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key4;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_RadjOnlinePlayer) == 0x000008, "Wrong alignment on FCRM_RadjOnlinePlayer");
static_assert(sizeof(FCRM_RadjOnlinePlayer) == 0x000068, "Wrong size on FCRM_RadjOnlinePlayer");
static_assert(offsetof(FCRM_RadjOnlinePlayer, action_type) == 0x000000, "Member 'FCRM_RadjOnlinePlayer::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjOnlinePlayer, key1) == 0x000010, "Member 'FCRM_RadjOnlinePlayer::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjOnlinePlayer, key2) == 0x000018, "Member 'FCRM_RadjOnlinePlayer::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjOnlinePlayer, key3) == 0x000028, "Member 'FCRM_RadjOnlinePlayer::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjOnlinePlayer, key4) == 0x000038, "Member 'FCRM_RadjOnlinePlayer::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjOnlinePlayer, key5) == 0x000048, "Member 'FCRM_RadjOnlinePlayer::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjOnlinePlayer, key6) == 0x000058, "Member 'FCRM_RadjOnlinePlayer::key6' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMaintenanceScheduleRequest
// 0x0001 (0x0001 - 0x0000)
struct FMasterDataGetMaintenanceScheduleRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGetMaintenanceScheduleRequest) == 0x000001, "Wrong alignment on FMasterDataGetMaintenanceScheduleRequest");
static_assert(sizeof(FMasterDataGetMaintenanceScheduleRequest) == 0x000001, "Wrong size on FMasterDataGetMaintenanceScheduleRequest");

// ScriptStruct UnionSystem.CRM_RadjRaceSetting
// 0x00A0 (0x00A0 - 0x0000)
struct FCRM_RadjRaceSetting final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key1;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key2;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key3;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key4;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key5;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key6;                                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key7;                                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key8;                                              // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key9;                                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key10;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key11;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key12;                                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key13;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key14;                                             // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key15;                                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key16;                                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key17;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key18;                                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key19;                                             // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key20;                                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key21;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key32;                                             // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key33;                                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key34;                                             // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key35;                                             // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         key36;                                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key37;                                             // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         key38;                                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRM_RadjRaceSetting) == 0x000008, "Wrong alignment on FCRM_RadjRaceSetting");
static_assert(sizeof(FCRM_RadjRaceSetting) == 0x0000A0, "Wrong size on FCRM_RadjRaceSetting");
static_assert(offsetof(FCRM_RadjRaceSetting, action_type) == 0x000000, "Member 'FCRM_RadjRaceSetting::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key1) == 0x000010, "Member 'FCRM_RadjRaceSetting::key1' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key2) == 0x000018, "Member 'FCRM_RadjRaceSetting::key2' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key3) == 0x000028, "Member 'FCRM_RadjRaceSetting::key3' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key4) == 0x00002C, "Member 'FCRM_RadjRaceSetting::key4' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key5) == 0x000030, "Member 'FCRM_RadjRaceSetting::key5' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key6) == 0x000034, "Member 'FCRM_RadjRaceSetting::key6' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key7) == 0x000038, "Member 'FCRM_RadjRaceSetting::key7' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key8) == 0x00003C, "Member 'FCRM_RadjRaceSetting::key8' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key9) == 0x000040, "Member 'FCRM_RadjRaceSetting::key9' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key10) == 0x000044, "Member 'FCRM_RadjRaceSetting::key10' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key11) == 0x000048, "Member 'FCRM_RadjRaceSetting::key11' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key12) == 0x00004C, "Member 'FCRM_RadjRaceSetting::key12' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key13) == 0x000050, "Member 'FCRM_RadjRaceSetting::key13' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key14) == 0x000054, "Member 'FCRM_RadjRaceSetting::key14' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key15) == 0x000058, "Member 'FCRM_RadjRaceSetting::key15' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key16) == 0x00005C, "Member 'FCRM_RadjRaceSetting::key16' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key17) == 0x000060, "Member 'FCRM_RadjRaceSetting::key17' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key18) == 0x000064, "Member 'FCRM_RadjRaceSetting::key18' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key19) == 0x000068, "Member 'FCRM_RadjRaceSetting::key19' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key20) == 0x00006C, "Member 'FCRM_RadjRaceSetting::key20' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key21) == 0x000070, "Member 'FCRM_RadjRaceSetting::key21' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key32) == 0x000074, "Member 'FCRM_RadjRaceSetting::key32' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key33) == 0x000078, "Member 'FCRM_RadjRaceSetting::key33' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key34) == 0x00007C, "Member 'FCRM_RadjRaceSetting::key34' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key35) == 0x000080, "Member 'FCRM_RadjRaceSetting::key35' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key36) == 0x000090, "Member 'FCRM_RadjRaceSetting::key36' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key37) == 0x000094, "Member 'FCRM_RadjRaceSetting::key37' has a wrong offset!");
static_assert(offsetof(FCRM_RadjRaceSetting, key38) == 0x000098, "Member 'FCRM_RadjRaceSetting::key38' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_TimeTrial
// 0x00A8 (0x00A8 - 0x0000)
struct FCRM_TimeTrial final
{
public:
	class FString                                 action_type;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 key1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key2;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key3;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         key4;                                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 key5;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key6;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key7;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 key10;                                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 key11;                                             // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 key12;                                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_TimeTrial) == 0x000008, "Wrong alignment on FCRM_TimeTrial");
static_assert(sizeof(FCRM_TimeTrial) == 0x0000A8, "Wrong size on FCRM_TimeTrial");
static_assert(offsetof(FCRM_TimeTrial, action_type) == 0x000000, "Member 'FCRM_TimeTrial::action_type' has a wrong offset!");
static_assert(offsetof(FCRM_TimeTrial, key1) == 0x000010, "Member 'FCRM_TimeTrial::key1' has a wrong offset!");
static_assert(offsetof(FCRM_TimeTrial, key2) == 0x000020, "Member 'FCRM_TimeTrial::key2' has a wrong offset!");
static_assert(offsetof(FCRM_TimeTrial, key3) == 0x000030, "Member 'FCRM_TimeTrial::key3' has a wrong offset!");
static_assert(offsetof(FCRM_TimeTrial, key4) == 0x000040, "Member 'FCRM_TimeTrial::key4' has a wrong offset!");
static_assert(offsetof(FCRM_TimeTrial, key5) == 0x000048, "Member 'FCRM_TimeTrial::key5' has a wrong offset!");
static_assert(offsetof(FCRM_TimeTrial, key6) == 0x000058, "Member 'FCRM_TimeTrial::key6' has a wrong offset!");
static_assert(offsetof(FCRM_TimeTrial, key7) == 0x000068, "Member 'FCRM_TimeTrial::key7' has a wrong offset!");
static_assert(offsetof(FCRM_TimeTrial, key10) == 0x000078, "Member 'FCRM_TimeTrial::key10' has a wrong offset!");
static_assert(offsetof(FCRM_TimeTrial, key11) == 0x000088, "Member 'FCRM_TimeTrial::key11' has a wrong offset!");
static_assert(offsetof(FCRM_TimeTrial, key12) == 0x000098, "Member 'FCRM_TimeTrial::key12' has a wrong offset!");

// ScriptStruct UnionSystem.CustomRaceSettingBtn
// 0x0018 (0x0020 - 0x0008)
struct FCustomRaceSettingBtn final : public FTableRowBase
{
public:
	ECustomRaceSettingLine                        SettingLineNumber;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SettingLineName;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomRaceSettingBtn) == 0x000008, "Wrong alignment on FCustomRaceSettingBtn");
static_assert(sizeof(FCustomRaceSettingBtn) == 0x000020, "Wrong size on FCustomRaceSettingBtn");
static_assert(offsetof(FCustomRaceSettingBtn, SettingLineNumber) == 0x000008, "Member 'FCustomRaceSettingBtn::SettingLineNumber' has a wrong offset!");
static_assert(offsetof(FCustomRaceSettingBtn, SettingLineName) == 0x000010, "Member 'FCustomRaceSettingBtn::SettingLineName' has a wrong offset!");

// ScriptStruct UnionSystem.InputMappingContextAndPriority
// 0x0010 (0x0010 - 0x0000)
struct FInputMappingContextAndPriority final
{
public:
	class UInputMappingContext*                   InputMapping;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Options;                                           // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputMappingContextAndPriority) == 0x000008, "Wrong alignment on FInputMappingContextAndPriority");
static_assert(sizeof(FInputMappingContextAndPriority) == 0x000010, "Wrong size on FInputMappingContextAndPriority");
static_assert(offsetof(FInputMappingContextAndPriority, InputMapping) == 0x000000, "Member 'FInputMappingContextAndPriority::InputMapping' has a wrong offset!");
static_assert(offsetof(FInputMappingContextAndPriority, Priority) == 0x000008, "Member 'FInputMappingContextAndPriority::Priority' has a wrong offset!");
static_assert(offsetof(FInputMappingContextAndPriority, Options) == 0x00000C, "Member 'FInputMappingContextAndPriority::Options' has a wrong offset!");

// ScriptStruct UnionSystem.InputConfig
// 0x0010 (0x0010 - 0x0000)
struct FInputConfig final
{
public:
	TArray<struct FInputMappingContextAndPriority> Contexts;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputConfig) == 0x000008, "Wrong alignment on FInputConfig");
static_assert(sizeof(FInputConfig) == 0x000010, "Wrong size on FInputConfig");
static_assert(offsetof(FInputConfig, Contexts) == 0x000000, "Member 'FInputConfig::Contexts' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingSubscribeRankMatchRequest
// 0x0058 (0x0058 - 0x0000)
struct FMatchmakingSubscribeRankMatchRequest final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIds;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 matchVersion;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeries;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMatchmakingCommonRequest_EntryData> entryDataList;                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingSubscribeRankMatchRequest) == 0x000008, "Wrong alignment on FMatchmakingSubscribeRankMatchRequest");
static_assert(sizeof(FMatchmakingSubscribeRankMatchRequest) == 0x000058, "Wrong size on FMatchmakingSubscribeRankMatchRequest");
static_assert(offsetof(FMatchmakingSubscribeRankMatchRequest, LobbyId) == 0x000000, "Member 'FMatchmakingSubscribeRankMatchRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeRankMatchRequest, UserIds) == 0x000010, "Member 'FMatchmakingSubscribeRankMatchRequest::UserIds' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeRankMatchRequest, Region) == 0x000020, "Member 'FMatchmakingSubscribeRankMatchRequest::Region' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeRankMatchRequest, matchVersion) == 0x000030, "Member 'FMatchmakingSubscribeRankMatchRequest::matchVersion' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeRankMatchRequest, IsSeries) == 0x000040, "Member 'FMatchmakingSubscribeRankMatchRequest::IsSeries' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeRankMatchRequest, entryDataList) == 0x000048, "Member 'FMatchmakingSubscribeRankMatchRequest::entryDataList' has a wrong offset!");

// ScriptStruct UnionSystem.DebugConnectTestRequest
// 0x0018 (0x0018 - 0x0000)
struct FDebugConnectTestRequest final
{
public:
	class FString                                 inputData1;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         inputData2;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugConnectTestRequest) == 0x000008, "Wrong alignment on FDebugConnectTestRequest");
static_assert(sizeof(FDebugConnectTestRequest) == 0x000018, "Wrong size on FDebugConnectTestRequest");
static_assert(offsetof(FDebugConnectTestRequest, inputData1) == 0x000000, "Member 'FDebugConnectTestRequest::inputData1' has a wrong offset!");
static_assert(offsetof(FDebugConnectTestRequest, inputData2) == 0x000010, "Member 'FDebugConnectTestRequest::inputData2' has a wrong offset!");

// ScriptStruct UnionSystem.HoldItemQualitySettings
// 0x0010 (0x0010 - 0x0000)
struct FHoldItemQualitySettings final
{
public:
	TArray<EHoldItemMeshType>                     HoldItemQualities;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHoldItemQualitySettings) == 0x000008, "Wrong alignment on FHoldItemQualitySettings");
static_assert(sizeof(FHoldItemQualitySettings) == 0x000010, "Wrong size on FHoldItemQualitySettings");
static_assert(offsetof(FHoldItemQualitySettings, HoldItemQualities) == 0x000000, "Member 'FHoldItemQualitySettings::HoldItemQualities' has a wrong offset!");

// ScriptStruct UnionSystem.DebugConnectTestResponse
// 0x0018 (0x0018 - 0x0000)
struct FDebugConnectTestResponse final
{
public:
	class FString                                 outputData1;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         outputData2;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugConnectTestResponse) == 0x000008, "Wrong alignment on FDebugConnectTestResponse");
static_assert(sizeof(FDebugConnectTestResponse) == 0x000018, "Wrong size on FDebugConnectTestResponse");
static_assert(offsetof(FDebugConnectTestResponse, outputData1) == 0x000000, "Member 'FDebugConnectTestResponse::outputData1' has a wrong offset!");
static_assert(offsetof(FDebugConnectTestResponse, outputData2) == 0x000010, "Member 'FDebugConnectTestResponse::outputData2' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetVersionRequest
// 0x0001 (0x0001 - 0x0000)
struct FMasterDataGetVersionRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGetVersionRequest) == 0x000001, "Wrong alignment on FMasterDataGetVersionRequest");
static_assert(sizeof(FMasterDataGetVersionRequest) == 0x000001, "Wrong size on FMasterDataGetVersionRequest");

// ScriptStruct UnionSystem.DebugMatchmakingSubscribeRankMatchRequest
// 0x0060 (0x0060 - 0x0000)
struct FDebugMatchmakingSubscribeRankMatchRequest final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIds;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         divisionId;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ruleNumber;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 matchVersion;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeries;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDebugMatchmakingCommonRequest_EntryData> entryDataList;                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugMatchmakingSubscribeRankMatchRequest) == 0x000008, "Wrong alignment on FDebugMatchmakingSubscribeRankMatchRequest");
static_assert(sizeof(FDebugMatchmakingSubscribeRankMatchRequest) == 0x000060, "Wrong size on FDebugMatchmakingSubscribeRankMatchRequest");
static_assert(offsetof(FDebugMatchmakingSubscribeRankMatchRequest, LobbyId) == 0x000000, "Member 'FDebugMatchmakingSubscribeRankMatchRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeRankMatchRequest, UserIds) == 0x000010, "Member 'FDebugMatchmakingSubscribeRankMatchRequest::UserIds' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeRankMatchRequest, divisionId) == 0x000020, "Member 'FDebugMatchmakingSubscribeRankMatchRequest::divisionId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeRankMatchRequest, ruleNumber) == 0x000024, "Member 'FDebugMatchmakingSubscribeRankMatchRequest::ruleNumber' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeRankMatchRequest, Region) == 0x000028, "Member 'FDebugMatchmakingSubscribeRankMatchRequest::Region' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeRankMatchRequest, matchVersion) == 0x000038, "Member 'FDebugMatchmakingSubscribeRankMatchRequest::matchVersion' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeRankMatchRequest, IsSeries) == 0x000048, "Member 'FDebugMatchmakingSubscribeRankMatchRequest::IsSeries' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeRankMatchRequest, entryDataList) == 0x000050, "Member 'FDebugMatchmakingSubscribeRankMatchRequest::entryDataList' has a wrong offset!");

// ScriptStruct UnionSystem.DebugMatchmakingSubscribeLegendCompeRequest
// 0x0060 (0x0060 - 0x0000)
struct FDebugMatchmakingSubscribeLegendCompeRequest final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UserIds;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         divisionId;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ruleNumber;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 matchVersion;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeries;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDebugMatchmakingCommonRequest_EntryData> entryDataList;                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugMatchmakingSubscribeLegendCompeRequest) == 0x000008, "Wrong alignment on FDebugMatchmakingSubscribeLegendCompeRequest");
static_assert(sizeof(FDebugMatchmakingSubscribeLegendCompeRequest) == 0x000060, "Wrong size on FDebugMatchmakingSubscribeLegendCompeRequest");
static_assert(offsetof(FDebugMatchmakingSubscribeLegendCompeRequest, LobbyId) == 0x000000, "Member 'FDebugMatchmakingSubscribeLegendCompeRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeLegendCompeRequest, UserIds) == 0x000010, "Member 'FDebugMatchmakingSubscribeLegendCompeRequest::UserIds' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeLegendCompeRequest, divisionId) == 0x000020, "Member 'FDebugMatchmakingSubscribeLegendCompeRequest::divisionId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeLegendCompeRequest, ruleNumber) == 0x000024, "Member 'FDebugMatchmakingSubscribeLegendCompeRequest::ruleNumber' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeLegendCompeRequest, Region) == 0x000028, "Member 'FDebugMatchmakingSubscribeLegendCompeRequest::Region' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeLegendCompeRequest, matchVersion) == 0x000038, "Member 'FDebugMatchmakingSubscribeLegendCompeRequest::matchVersion' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeLegendCompeRequest, IsSeries) == 0x000048, "Member 'FDebugMatchmakingSubscribeLegendCompeRequest::IsSeries' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeLegendCompeRequest, entryDataList) == 0x000050, "Member 'FDebugMatchmakingSubscribeLegendCompeRequest::entryDataList' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterDataVersionData
// 0x0010 (0x0010 - 0x0000)
struct FNetMasterDataVersionData final
{
public:
	TArray<struct FNetMasterDataVersion>          masterVersionData;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterDataVersionData) == 0x000008, "Wrong alignment on FNetMasterDataVersionData");
static_assert(sizeof(FNetMasterDataVersionData) == 0x000010, "Wrong size on FNetMasterDataVersionData");
static_assert(offsetof(FNetMasterDataVersionData, masterVersionData) == 0x000000, "Member 'FNetMasterDataVersionData::masterVersionData' has a wrong offset!");

// ScriptStruct UnionSystem.DebugMatchmakingSubscribeLegendCompeResponse
// 0x00A0 (0x00A0 - 0x0000)
struct FDebugMatchmakingSubscribeLegendCompeResponse final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ticketId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDebugMatchmakingCommonResponse_Subscribe subscribe;                                      // 0x0020(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugMatchmakingSubscribeLegendCompeResponse) == 0x000008, "Wrong alignment on FDebugMatchmakingSubscribeLegendCompeResponse");
static_assert(sizeof(FDebugMatchmakingSubscribeLegendCompeResponse) == 0x0000A0, "Wrong size on FDebugMatchmakingSubscribeLegendCompeResponse");
static_assert(offsetof(FDebugMatchmakingSubscribeLegendCompeResponse, LobbyId) == 0x000000, "Member 'FDebugMatchmakingSubscribeLegendCompeResponse::LobbyId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeLegendCompeResponse, ticketId) == 0x000010, "Member 'FDebugMatchmakingSubscribeLegendCompeResponse::ticketId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeLegendCompeResponse, subscribe) == 0x000020, "Member 'FDebugMatchmakingSubscribeLegendCompeResponse::subscribe' has a wrong offset!");

// ScriptStruct UnionSystem.DebugMatchmakingSubscribeFestaResponse
// 0x00A0 (0x00A0 - 0x0000)
struct FDebugMatchmakingSubscribeFestaResponse final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ticketId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDebugMatchmakingCommonResponse_Subscribe subscribe;                                      // 0x0020(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugMatchmakingSubscribeFestaResponse) == 0x000008, "Wrong alignment on FDebugMatchmakingSubscribeFestaResponse");
static_assert(sizeof(FDebugMatchmakingSubscribeFestaResponse) == 0x0000A0, "Wrong size on FDebugMatchmakingSubscribeFestaResponse");
static_assert(offsetof(FDebugMatchmakingSubscribeFestaResponse, LobbyId) == 0x000000, "Member 'FDebugMatchmakingSubscribeFestaResponse::LobbyId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeFestaResponse, ticketId) == 0x000010, "Member 'FDebugMatchmakingSubscribeFestaResponse::ticketId' has a wrong offset!");
static_assert(offsetof(FDebugMatchmakingSubscribeFestaResponse, subscribe) == 0x000020, "Member 'FDebugMatchmakingSubscribeFestaResponse::subscribe' has a wrong offset!");

// ScriptStruct UnionSystem.DebugChangeFairPlayPointRequest
// 0x0004 (0x0004 - 0x0000)
struct FDebugChangeFairPlayPointRequest final
{
public:
	int32                                         FairPlayPoint;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugChangeFairPlayPointRequest) == 0x000004, "Wrong alignment on FDebugChangeFairPlayPointRequest");
static_assert(sizeof(FDebugChangeFairPlayPointRequest) == 0x000004, "Wrong size on FDebugChangeFairPlayPointRequest");
static_assert(offsetof(FDebugChangeFairPlayPointRequest, FairPlayPoint) == 0x000000, "Member 'FDebugChangeFairPlayPointRequest::FairPlayPoint' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FestaPointRaceOrderData
// 0x0034 (0x0034 - 0x0000)
struct FNetMasterData_FestaPointRaceOrderData final
{
public:
	int32                                         pointRaceOrderId;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint1;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint2;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint3;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint4;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint5;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint6;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint7;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint8;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint9;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint10;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint11;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderPoint12;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FestaPointRaceOrderData) == 0x000004, "Wrong alignment on FNetMasterData_FestaPointRaceOrderData");
static_assert(sizeof(FNetMasterData_FestaPointRaceOrderData) == 0x000034, "Wrong size on FNetMasterData_FestaPointRaceOrderData");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, pointRaceOrderId) == 0x000000, "Member 'FNetMasterData_FestaPointRaceOrderData::pointRaceOrderId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, orderPoint1) == 0x000004, "Member 'FNetMasterData_FestaPointRaceOrderData::orderPoint1' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, orderPoint2) == 0x000008, "Member 'FNetMasterData_FestaPointRaceOrderData::orderPoint2' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, orderPoint3) == 0x00000C, "Member 'FNetMasterData_FestaPointRaceOrderData::orderPoint3' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, orderPoint4) == 0x000010, "Member 'FNetMasterData_FestaPointRaceOrderData::orderPoint4' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, orderPoint5) == 0x000014, "Member 'FNetMasterData_FestaPointRaceOrderData::orderPoint5' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, orderPoint6) == 0x000018, "Member 'FNetMasterData_FestaPointRaceOrderData::orderPoint6' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, orderPoint7) == 0x00001C, "Member 'FNetMasterData_FestaPointRaceOrderData::orderPoint7' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, orderPoint8) == 0x000020, "Member 'FNetMasterData_FestaPointRaceOrderData::orderPoint8' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, orderPoint9) == 0x000024, "Member 'FNetMasterData_FestaPointRaceOrderData::orderPoint9' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, orderPoint10) == 0x000028, "Member 'FNetMasterData_FestaPointRaceOrderData::orderPoint10' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, orderPoint11) == 0x00002C, "Member 'FNetMasterData_FestaPointRaceOrderData::orderPoint11' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRaceOrderData, orderPoint12) == 0x000030, "Member 'FNetMasterData_FestaPointRaceOrderData::orderPoint12' has a wrong offset!");

// ScriptStruct UnionSystem.FairPointAddFairPointRequest
// 0x0001 (0x0001 - 0x0000)
struct FFairPointAddFairPointRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFairPointAddFairPointRequest) == 0x000001, "Wrong alignment on FFairPointAddFairPointRequest");
static_assert(sizeof(FFairPointAddFairPointRequest) == 0x000001, "Wrong size on FFairPointAddFairPointRequest");

// ScriptStruct UnionSystem.NetMasterData_FestaPointTeamContribAttackHitData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_FestaPointTeamContribAttackHitData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint1;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint2;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint3;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint4;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FestaPointTeamContribAttackHitData) == 0x000004, "Wrong alignment on FNetMasterData_FestaPointTeamContribAttackHitData");
static_assert(sizeof(FNetMasterData_FestaPointTeamContribAttackHitData) == 0x000014, "Wrong size on FNetMasterData_FestaPointTeamContribAttackHitData");
static_assert(offsetof(FNetMasterData_FestaPointTeamContribAttackHitData, ID) == 0x000000, "Member 'FNetMasterData_FestaPointTeamContribAttackHitData::ID' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointTeamContribAttackHitData, teamOrderPoint1) == 0x000004, "Member 'FNetMasterData_FestaPointTeamContribAttackHitData::teamOrderPoint1' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointTeamContribAttackHitData, teamOrderPoint2) == 0x000008, "Member 'FNetMasterData_FestaPointTeamContribAttackHitData::teamOrderPoint2' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointTeamContribAttackHitData, teamOrderPoint3) == 0x00000C, "Member 'FNetMasterData_FestaPointTeamContribAttackHitData::teamOrderPoint3' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointTeamContribAttackHitData, teamOrderPoint4) == 0x000010, "Member 'FNetMasterData_FestaPointTeamContribAttackHitData::teamOrderPoint4' has a wrong offset!");

// ScriptStruct UnionSystem.MenuSettings
// 0x0008 (0x0008 - 0x0000)
struct FMenuSettings final
{
public:
	int32                                         MeshMinLOD;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LobbyMeshLOD;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMenuSettings) == 0x000004, "Wrong alignment on FMenuSettings");
static_assert(sizeof(FMenuSettings) == 0x000008, "Wrong size on FMenuSettings");
static_assert(offsetof(FMenuSettings, MeshMinLOD) == 0x000000, "Member 'FMenuSettings::MeshMinLOD' has a wrong offset!");
static_assert(offsetof(FMenuSettings, LobbyMeshLOD) == 0x000004, "Member 'FMenuSettings::LobbyMeshLOD' has a wrong offset!");

// ScriptStruct UnionSystem.FairPointSubFairPointRequest
// 0x0001 (0x0001 - 0x0000)
struct FFairPointSubFairPointRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFairPointSubFairPointRequest) == 0x000001, "Wrong alignment on FFairPointSubFairPointRequest");
static_assert(sizeof(FFairPointSubFairPointRequest) == 0x000001, "Wrong size on FFairPointSubFairPointRequest");

// ScriptStruct UnionSystem.FairPointSubFairPointResponse
// 0x0001 (0x0001 - 0x0000)
struct FFairPointSubFairPointResponse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFairPointSubFairPointResponse) == 0x000001, "Wrong alignment on FFairPointSubFairPointResponse");
static_assert(sizeof(FFairPointSubFairPointResponse) == 0x000001, "Wrong size on FFairPointSubFairPointResponse");

// ScriptStruct UnionSystem.FairPointCheckFairPointRequest
// 0x0001 (0x0001 - 0x0000)
struct FFairPointCheckFairPointRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFairPointCheckFairPointRequest) == 0x000001, "Wrong alignment on FFairPointCheckFairPointRequest");
static_assert(sizeof(FFairPointCheckFairPointRequest) == 0x000001, "Wrong size on FFairPointCheckFairPointRequest");

// ScriptStruct UnionSystem.NetMasterData_FestaRoundRewardData
// 0x004C (0x004C - 0x0000)
struct FNetMasterData_FestaRoundRewardData final
{
public:
	int32                                         festaId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeFirstRewardType;                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeFirstReward;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeFirstRewardNum;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeSecondRewardType;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeSecondReward;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeSecondRewardNum;                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeThirdRewardType;                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeThirdReward;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         firstTimeThirdRewardNum;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericFirstRewardType;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericFirstReward;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericFirstRewardNum;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericSecondRewardType;                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericSecondReward;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericSecondRewardNum;                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericThirdRewardType;                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericThirdReward;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         genericThirdRewardNum;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FestaRoundRewardData) == 0x000004, "Wrong alignment on FNetMasterData_FestaRoundRewardData");
static_assert(sizeof(FNetMasterData_FestaRoundRewardData) == 0x00004C, "Wrong size on FNetMasterData_FestaRoundRewardData");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, festaId) == 0x000000, "Member 'FNetMasterData_FestaRoundRewardData::festaId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, firstTimeFirstRewardType) == 0x000004, "Member 'FNetMasterData_FestaRoundRewardData::firstTimeFirstRewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, firstTimeFirstReward) == 0x000008, "Member 'FNetMasterData_FestaRoundRewardData::firstTimeFirstReward' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, firstTimeFirstRewardNum) == 0x00000C, "Member 'FNetMasterData_FestaRoundRewardData::firstTimeFirstRewardNum' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, firstTimeSecondRewardType) == 0x000010, "Member 'FNetMasterData_FestaRoundRewardData::firstTimeSecondRewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, firstTimeSecondReward) == 0x000014, "Member 'FNetMasterData_FestaRoundRewardData::firstTimeSecondReward' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, firstTimeSecondRewardNum) == 0x000018, "Member 'FNetMasterData_FestaRoundRewardData::firstTimeSecondRewardNum' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, firstTimeThirdRewardType) == 0x00001C, "Member 'FNetMasterData_FestaRoundRewardData::firstTimeThirdRewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, firstTimeThirdReward) == 0x000020, "Member 'FNetMasterData_FestaRoundRewardData::firstTimeThirdReward' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, firstTimeThirdRewardNum) == 0x000024, "Member 'FNetMasterData_FestaRoundRewardData::firstTimeThirdRewardNum' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, genericFirstRewardType) == 0x000028, "Member 'FNetMasterData_FestaRoundRewardData::genericFirstRewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, genericFirstReward) == 0x00002C, "Member 'FNetMasterData_FestaRoundRewardData::genericFirstReward' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, genericFirstRewardNum) == 0x000030, "Member 'FNetMasterData_FestaRoundRewardData::genericFirstRewardNum' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, genericSecondRewardType) == 0x000034, "Member 'FNetMasterData_FestaRoundRewardData::genericSecondRewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, genericSecondReward) == 0x000038, "Member 'FNetMasterData_FestaRoundRewardData::genericSecondReward' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, genericSecondRewardNum) == 0x00003C, "Member 'FNetMasterData_FestaRoundRewardData::genericSecondRewardNum' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, genericThirdRewardType) == 0x000040, "Member 'FNetMasterData_FestaRoundRewardData::genericThirdRewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, genericThirdReward) == 0x000044, "Member 'FNetMasterData_FestaRoundRewardData::genericThirdReward' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaRoundRewardData, genericThirdRewardNum) == 0x000048, "Member 'FNetMasterData_FestaRoundRewardData::genericThirdRewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.FairPointCheckFairPointResponse
// 0x0020 (0x0020 - 0x0000)
struct FFairPointCheckFairPointResponse final
{
public:
	bool                                          isDisconnect;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isBan;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FairPlayPoint;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 penaltyEndTime;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         banNoticeType;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFairPointCheckFairPointResponse) == 0x000008, "Wrong alignment on FFairPointCheckFairPointResponse");
static_assert(sizeof(FFairPointCheckFairPointResponse) == 0x000020, "Wrong size on FFairPointCheckFairPointResponse");
static_assert(offsetof(FFairPointCheckFairPointResponse, isDisconnect) == 0x000000, "Member 'FFairPointCheckFairPointResponse::isDisconnect' has a wrong offset!");
static_assert(offsetof(FFairPointCheckFairPointResponse, isBan) == 0x000001, "Member 'FFairPointCheckFairPointResponse::isBan' has a wrong offset!");
static_assert(offsetof(FFairPointCheckFairPointResponse, FairPlayPoint) == 0x000004, "Member 'FFairPointCheckFairPointResponse::FairPlayPoint' has a wrong offset!");
static_assert(offsetof(FFairPointCheckFairPointResponse, penaltyEndTime) == 0x000008, "Member 'FFairPointCheckFairPointResponse::penaltyEndTime' has a wrong offset!");
static_assert(offsetof(FFairPointCheckFairPointResponse, banNoticeType) == 0x000018, "Member 'FFairPointCheckFairPointResponse::banNoticeType' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingUnsubscribeRequest
// 0x0010 (0x0010 - 0x0000)
struct FMatchmakingUnsubscribeRequest final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingUnsubscribeRequest) == 0x000008, "Wrong alignment on FMatchmakingUnsubscribeRequest");
static_assert(sizeof(FMatchmakingUnsubscribeRequest) == 0x000010, "Wrong size on FMatchmakingUnsubscribeRequest");
static_assert(offsetof(FMatchmakingUnsubscribeRequest, LobbyId) == 0x000000, "Member 'FMatchmakingUnsubscribeRequest::LobbyId' has a wrong offset!");

// ScriptStruct UnionSystem.FestaFestaTopRequest
// 0x0004 (0x0004 - 0x0000)
struct FFestaFestaTopRequest final
{
public:
	int32                                         festaId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaFestaTopRequest) == 0x000004, "Wrong alignment on FFestaFestaTopRequest");
static_assert(sizeof(FFestaFestaTopRequest) == 0x000004, "Wrong size on FFestaFestaTopRequest");
static_assert(offsetof(FFestaFestaTopRequest, festaId) == 0x000000, "Member 'FFestaFestaTopRequest::festaId' has a wrong offset!");

// ScriptStruct UnionSystem.FestaCheckFestaRewardRequest
// 0x0004 (0x0004 - 0x0000)
struct FFestaCheckFestaRewardRequest final
{
public:
	int32                                         festaId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaCheckFestaRewardRequest) == 0x000004, "Wrong alignment on FFestaCheckFestaRewardRequest");
static_assert(sizeof(FFestaCheckFestaRewardRequest) == 0x000004, "Wrong size on FFestaCheckFestaRewardRequest");
static_assert(offsetof(FFestaCheckFestaRewardRequest, festaId) == 0x000000, "Member 'FFestaCheckFestaRewardRequest::festaId' has a wrong offset!");

// ScriptStruct UnionSystem.FestaCheckFestaRewardResponse
// 0x0018 (0x0018 - 0x0000)
struct FFestaCheckFestaRewardResponse final
{
public:
	TArray<int32>                                 degreeIdList;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ticketNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lastOrder;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaCheckFestaRewardResponse) == 0x000008, "Wrong alignment on FFestaCheckFestaRewardResponse");
static_assert(sizeof(FFestaCheckFestaRewardResponse) == 0x000018, "Wrong size on FFestaCheckFestaRewardResponse");
static_assert(offsetof(FFestaCheckFestaRewardResponse, degreeIdList) == 0x000000, "Member 'FFestaCheckFestaRewardResponse::degreeIdList' has a wrong offset!");
static_assert(offsetof(FFestaCheckFestaRewardResponse, ticketNum) == 0x000010, "Member 'FFestaCheckFestaRewardResponse::ticketNum' has a wrong offset!");
static_assert(offsetof(FFestaCheckFestaRewardResponse, lastOrder) == 0x000014, "Member 'FFestaCheckFestaRewardResponse::lastOrder' has a wrong offset!");

// ScriptStruct UnionSystem.FestaStreakRewardUIData
// 0x0008 (0x0008 - 0x0000)
struct FFestaStreakRewardUIData final
{
public:
	int32                                         HonorId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaStreakRewardUIData) == 0x000004, "Wrong alignment on FFestaStreakRewardUIData");
static_assert(sizeof(FFestaStreakRewardUIData) == 0x000008, "Wrong size on FFestaStreakRewardUIData");
static_assert(offsetof(FFestaStreakRewardUIData, HonorId) == 0x000000, "Member 'FFestaStreakRewardUIData::HonorId' has a wrong offset!");
static_assert(offsetof(FFestaStreakRewardUIData, Point) == 0x000004, "Member 'FFestaStreakRewardUIData::Point' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FestaPointRewardConditionsData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_FestaPointRewardConditionsData final
{
public:
	int32                                         pointRewardConditionsId;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardConditionsId;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNumber;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointValue;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FestaPointRewardConditionsData) == 0x000004, "Wrong alignment on FNetMasterData_FestaPointRewardConditionsData");
static_assert(sizeof(FNetMasterData_FestaPointRewardConditionsData) == 0x000014, "Wrong size on FNetMasterData_FestaPointRewardConditionsData");
static_assert(offsetof(FNetMasterData_FestaPointRewardConditionsData, pointRewardConditionsId) == 0x000000, "Member 'FNetMasterData_FestaPointRewardConditionsData::pointRewardConditionsId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRewardConditionsData, rewardConditionsId) == 0x000004, "Member 'FNetMasterData_FestaPointRewardConditionsData::rewardConditionsId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRewardConditionsData, rewardType) == 0x000008, "Member 'FNetMasterData_FestaPointRewardConditionsData::rewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRewardConditionsData, rewardNumber) == 0x00000C, "Member 'FNetMasterData_FestaPointRewardConditionsData::rewardNumber' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRewardConditionsData, pointValue) == 0x000010, "Member 'FNetMasterData_FestaPointRewardConditionsData::pointValue' has a wrong offset!");

// ScriptStruct UnionSystem.FestaRankingRewardUIData
// 0x000C (0x000C - 0x0000)
struct FFestaRankingRewardUIData final
{
public:
	int32                                         HonorId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ticketNum;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         upper;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaRankingRewardUIData) == 0x000004, "Wrong alignment on FFestaRankingRewardUIData");
static_assert(sizeof(FFestaRankingRewardUIData) == 0x00000C, "Wrong size on FFestaRankingRewardUIData");
static_assert(offsetof(FFestaRankingRewardUIData, HonorId) == 0x000000, "Member 'FFestaRankingRewardUIData::HonorId' has a wrong offset!");
static_assert(offsetof(FFestaRankingRewardUIData, ticketNum) == 0x000004, "Member 'FFestaRankingRewardUIData::ticketNum' has a wrong offset!");
static_assert(offsetof(FFestaRankingRewardUIData, upper) == 0x000008, "Member 'FFestaRankingRewardUIData::upper' has a wrong offset!");

// ScriptStruct UnionSystem.FestaTextSettingTable
// 0x0038 (0x0040 - 0x0008)
struct FFestaTextSettingTable final : public FTableRowBase
{
public:
	int32                                         festaId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NoticeTitle;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FestaName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DatesFormat;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaTextSettingTable) == 0x000008, "Wrong alignment on FFestaTextSettingTable");
static_assert(sizeof(FFestaTextSettingTable) == 0x000040, "Wrong size on FFestaTextSettingTable");
static_assert(offsetof(FFestaTextSettingTable, festaId) == 0x000008, "Member 'FFestaTextSettingTable::festaId' has a wrong offset!");
static_assert(offsetof(FFestaTextSettingTable, NoticeTitle) == 0x000010, "Member 'FFestaTextSettingTable::NoticeTitle' has a wrong offset!");
static_assert(offsetof(FFestaTextSettingTable, FestaName) == 0x000020, "Member 'FFestaTextSettingTable::FestaName' has a wrong offset!");
static_assert(offsetof(FFestaTextSettingTable, DatesFormat) == 0x000030, "Member 'FFestaTextSettingTable::DatesFormat' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetRankingRankMatchRequest
// 0x0018 (0x0018 - 0x0000)
struct FRankingGetRankingRankMatchRequest
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romVersionId;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romType;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetRankingRankMatchRequest) == 0x000008, "Wrong alignment on FRankingGetRankingRankMatchRequest");
static_assert(sizeof(FRankingGetRankingRankMatchRequest) == 0x000018, "Wrong size on FRankingGetRankingRankMatchRequest");
static_assert(offsetof(FRankingGetRankingRankMatchRequest, Platform) == 0x000000, "Member 'FRankingGetRankingRankMatchRequest::Platform' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingRankMatchRequest, romVersionId) == 0x000010, "Member 'FRankingGetRankingRankMatchRequest::romVersionId' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingRankMatchRequest, romType) == 0x000014, "Member 'FRankingGetRankingRankMatchRequest::romType' has a wrong offset!");

// ScriptStruct UnionSystem.FestaTeamUIData
// 0x0078 (0x0078 - 0x0000)
struct FFestaTeamUIData final
{
public:
	class FText                                   FestaTeamName;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FestaTeamDecide;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CutIconTexture;                                    // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupColorId                                 GroupColorID;                                      // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFestaTeamUIData) == 0x000008, "Wrong alignment on FFestaTeamUIData");
static_assert(sizeof(FFestaTeamUIData) == 0x000078, "Wrong size on FFestaTeamUIData");
static_assert(offsetof(FFestaTeamUIData, FestaTeamName) == 0x000000, "Member 'FFestaTeamUIData::FestaTeamName' has a wrong offset!");
static_assert(offsetof(FFestaTeamUIData, FestaTeamDecide) == 0x000010, "Member 'FFestaTeamUIData::FestaTeamDecide' has a wrong offset!");
static_assert(offsetof(FFestaTeamUIData, IconTexture) == 0x000020, "Member 'FFestaTeamUIData::IconTexture' has a wrong offset!");
static_assert(offsetof(FFestaTeamUIData, CutIconTexture) == 0x000048, "Member 'FFestaTeamUIData::CutIconTexture' has a wrong offset!");
static_assert(offsetof(FFestaTeamUIData, GroupColorID) == 0x000070, "Member 'FFestaTeamUIData::GroupColorID' has a wrong offset!");

// ScriptStruct UnionSystem.FestaNoticeData
// 0x0080 (0x0088 - 0x0008)
struct FFestaNoticeData final : public FTableRowBase
{
public:
	int32                                         festaId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              FestaNoticeBG;                                     // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FestaInfoBG;                                       // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EventEndBG;                                        // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaNoticeData) == 0x000008, "Wrong alignment on FFestaNoticeData");
static_assert(sizeof(FFestaNoticeData) == 0x000088, "Wrong size on FFestaNoticeData");
static_assert(offsetof(FFestaNoticeData, festaId) == 0x000008, "Member 'FFestaNoticeData::festaId' has a wrong offset!");
static_assert(offsetof(FFestaNoticeData, FestaNoticeBG) == 0x000010, "Member 'FFestaNoticeData::FestaNoticeBG' has a wrong offset!");
static_assert(offsetof(FFestaNoticeData, FestaInfoBG) == 0x000038, "Member 'FFestaNoticeData::FestaInfoBG' has a wrong offset!");
static_assert(offsetof(FFestaNoticeData, EventEndBG) == 0x000060, "Member 'FFestaNoticeData::EventEndBG' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingDescribeResponse_Player
// 0x0028 (0x0028 - 0x0000)
struct FMatchmakingDescribeResponse_Player final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Team;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isComPlayer;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakingDescribeResponse_Player) == 0x000008, "Wrong alignment on FMatchmakingDescribeResponse_Player");
static_assert(sizeof(FMatchmakingDescribeResponse_Player) == 0x000028, "Wrong size on FMatchmakingDescribeResponse_Player");
static_assert(offsetof(FMatchmakingDescribeResponse_Player, PlayerId) == 0x000000, "Member 'FMatchmakingDescribeResponse_Player::PlayerId' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse_Player, Team) == 0x000010, "Member 'FMatchmakingDescribeResponse_Player::Team' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse_Player, isComPlayer) == 0x000020, "Member 'FMatchmakingDescribeResponse_Player::isComPlayer' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingDescribeResponse
// 0x00F8 (0x00F8 - 0x0000)
struct FMatchmakingDescribeResponse final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMatchmakingDescribeResponse_Player> gameSessionPlayers;                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 hostLobbyId;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMatchmakingCommonResponse_ValetComPlayer> valetComPlayers;                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         averageRate;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         averageAdjustRate;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchmakingCommonResponse_Subscribe   subscribe;                                         // 0x0050(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMatchmakingDescribeResponse_RankMatchRate> playerRankMatchRates;                  // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMatchmakingDescribeResponse_MatchPlayerInfo> matchPlayerInfos;                    // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingDescribeResponse) == 0x000008, "Wrong alignment on FMatchmakingDescribeResponse");
static_assert(sizeof(FMatchmakingDescribeResponse) == 0x0000F8, "Wrong size on FMatchmakingDescribeResponse");
static_assert(offsetof(FMatchmakingDescribeResponse, LobbyId) == 0x000000, "Member 'FMatchmakingDescribeResponse::LobbyId' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse, Status) == 0x000010, "Member 'FMatchmakingDescribeResponse::Status' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse, gameSessionPlayers) == 0x000018, "Member 'FMatchmakingDescribeResponse::gameSessionPlayers' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse, hostLobbyId) == 0x000028, "Member 'FMatchmakingDescribeResponse::hostLobbyId' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse, valetComPlayers) == 0x000038, "Member 'FMatchmakingDescribeResponse::valetComPlayers' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse, averageRate) == 0x000048, "Member 'FMatchmakingDescribeResponse::averageRate' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse, averageAdjustRate) == 0x00004C, "Member 'FMatchmakingDescribeResponse::averageAdjustRate' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse, subscribe) == 0x000050, "Member 'FMatchmakingDescribeResponse::subscribe' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse, playerRankMatchRates) == 0x0000D8, "Member 'FMatchmakingDescribeResponse::playerRankMatchRates' has a wrong offset!");
static_assert(offsetof(FMatchmakingDescribeResponse, matchPlayerInfos) == 0x0000E8, "Member 'FMatchmakingDescribeResponse::matchPlayerInfos' has a wrong offset!");

// ScriptStruct UnionSystem.FestaResultReward
// 0x0018 (0x0020 - 0x0008)
struct FFestaResultReward final : public FTableRowBase
{
public:
	int32                                         Point;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardType                                   rewardType;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemNo;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInfiniy;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFestaResultReward) == 0x000008, "Wrong alignment on FFestaResultReward");
static_assert(sizeof(FFestaResultReward) == 0x000020, "Wrong size on FFestaResultReward");
static_assert(offsetof(FFestaResultReward, Point) == 0x000008, "Member 'FFestaResultReward::Point' has a wrong offset!");
static_assert(offsetof(FFestaResultReward, rewardType) == 0x00000C, "Member 'FFestaResultReward::rewardType' has a wrong offset!");
static_assert(offsetof(FFestaResultReward, ItemNo) == 0x000010, "Member 'FFestaResultReward::ItemNo' has a wrong offset!");
static_assert(offsetof(FFestaResultReward, Num) == 0x000014, "Member 'FFestaResultReward::Num' has a wrong offset!");
static_assert(offsetof(FFestaResultReward, bIsInfiniy) == 0x000018, "Member 'FFestaResultReward::bIsInfiniy' has a wrong offset!");

// ScriptStruct UnionSystem.FestaSignageUIData
// 0x0028 (0x0030 - 0x0008)
struct FFestaSignageUIData final : public FTableRowBase
{
public:
	TArray<TSoftObjectPtr<class UTexture2D>>      FestaSignage;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bIsUseLobbySignage;                                // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UTexture2D>>      FestaLobbySignage;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaSignageUIData) == 0x000008, "Wrong alignment on FFestaSignageUIData");
static_assert(sizeof(FFestaSignageUIData) == 0x000030, "Wrong size on FFestaSignageUIData");
static_assert(offsetof(FFestaSignageUIData, FestaSignage) == 0x000008, "Member 'FFestaSignageUIData::FestaSignage' has a wrong offset!");
static_assert(offsetof(FFestaSignageUIData, bIsUseLobbySignage) == 0x000018, "Member 'FFestaSignageUIData::bIsUseLobbySignage' has a wrong offset!");
static_assert(offsetof(FFestaSignageUIData, FestaLobbySignage) == 0x000020, "Member 'FFestaSignageUIData::FestaLobbySignage' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetRankingLegendCompeRequest
// 0x0020 (0x0020 - 0x0000)
struct FRankingGetRankingLegendCompeRequest
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         compeId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romVersionId;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romType;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankingGetRankingLegendCompeRequest) == 0x000008, "Wrong alignment on FRankingGetRankingLegendCompeRequest");
static_assert(sizeof(FRankingGetRankingLegendCompeRequest) == 0x000020, "Wrong size on FRankingGetRankingLegendCompeRequest");
static_assert(offsetof(FRankingGetRankingLegendCompeRequest, Platform) == 0x000000, "Member 'FRankingGetRankingLegendCompeRequest::Platform' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingLegendCompeRequest, compeId) == 0x000010, "Member 'FRankingGetRankingLegendCompeRequest::compeId' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingLegendCompeRequest, romVersionId) == 0x000014, "Member 'FRankingGetRankingLegendCompeRequest::romVersionId' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingLegendCompeRequest, romType) == 0x000018, "Member 'FRankingGetRankingLegendCompeRequest::romType' has a wrong offset!");

// ScriptStruct UnionSystem.FestaUITableRowData
// 0x0168 (0x0170 - 0x0008)
struct FFestaUITableRowData final : public FTableRowBase
{
public:
	class FText                                   NoticeTitle;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FestaInfoButtonText;                               // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FestaName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RuleTitle;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   PointRewardTitle;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   WorldRankingTitle;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FriendRankingTitle;                                // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   OtherTitle;                                        // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FinalResultTitle;                                  // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DaysFormat;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EDriverId                                     CollaboDriverId;                                   // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              FestaNoticeBGTex;                                  // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FestaInfoBGTex;                                    // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EventEndBGTex;                                     // 0x0100(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CompleteBonusCharaTex;                             // 0x0128(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture2D>>      SignageTex;                                        // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FFestaTeamUIData>               TeamUIDataArray;                                   // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaUITableRowData) == 0x000008, "Wrong alignment on FFestaUITableRowData");
static_assert(sizeof(FFestaUITableRowData) == 0x000170, "Wrong size on FFestaUITableRowData");
static_assert(offsetof(FFestaUITableRowData, NoticeTitle) == 0x000008, "Member 'FFestaUITableRowData::NoticeTitle' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, FestaInfoButtonText) == 0x000018, "Member 'FFestaUITableRowData::FestaInfoButtonText' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, FestaName) == 0x000028, "Member 'FFestaUITableRowData::FestaName' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, RuleTitle) == 0x000038, "Member 'FFestaUITableRowData::RuleTitle' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, PointRewardTitle) == 0x000048, "Member 'FFestaUITableRowData::PointRewardTitle' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, WorldRankingTitle) == 0x000058, "Member 'FFestaUITableRowData::WorldRankingTitle' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, FriendRankingTitle) == 0x000068, "Member 'FFestaUITableRowData::FriendRankingTitle' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, OtherTitle) == 0x000078, "Member 'FFestaUITableRowData::OtherTitle' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, FinalResultTitle) == 0x000088, "Member 'FFestaUITableRowData::FinalResultTitle' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, DaysFormat) == 0x000098, "Member 'FFestaUITableRowData::DaysFormat' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, CollaboDriverId) == 0x0000A8, "Member 'FFestaUITableRowData::CollaboDriverId' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, FestaNoticeBGTex) == 0x0000B0, "Member 'FFestaUITableRowData::FestaNoticeBGTex' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, FestaInfoBGTex) == 0x0000D8, "Member 'FFestaUITableRowData::FestaInfoBGTex' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, EventEndBGTex) == 0x000100, "Member 'FFestaUITableRowData::EventEndBGTex' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, CompleteBonusCharaTex) == 0x000128, "Member 'FFestaUITableRowData::CompleteBonusCharaTex' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, SignageTex) == 0x000150, "Member 'FFestaUITableRowData::SignageTex' has a wrong offset!");
static_assert(offsetof(FFestaUITableRowData, TeamUIDataArray) == 0x000160, "Member 'FFestaUITableRowData::TeamUIDataArray' has a wrong offset!");

// ScriptStruct UnionSystem.FestaUIData
// 0x0168 (0x0168 - 0x0000)
struct FFestaUIData final
{
public:
	class FText                                   NoticeTitle;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FestaInfoButtonText;                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FestaName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RuleTitle;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   PointRewardTitle;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   WorldRankingTitle;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FriendRankingTitle;                                // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   OtherTitle;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FinalResultTitle;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DaysFormat;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EDriverId                                     CollaboDriverId;                                   // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              FestaNoticeBGTex;                                  // 0x00A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FestaInfoBGTex;                                    // 0x00D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EventEndBGTex;                                     // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CompleteBonusCharaTex;                             // 0x0120(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture2D>>      SignageTex;                                        // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FFestaTeamUIData>               TeamUIDataArray;                                   // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaUIData) == 0x000008, "Wrong alignment on FFestaUIData");
static_assert(sizeof(FFestaUIData) == 0x000168, "Wrong size on FFestaUIData");
static_assert(offsetof(FFestaUIData, NoticeTitle) == 0x000000, "Member 'FFestaUIData::NoticeTitle' has a wrong offset!");
static_assert(offsetof(FFestaUIData, FestaInfoButtonText) == 0x000010, "Member 'FFestaUIData::FestaInfoButtonText' has a wrong offset!");
static_assert(offsetof(FFestaUIData, FestaName) == 0x000020, "Member 'FFestaUIData::FestaName' has a wrong offset!");
static_assert(offsetof(FFestaUIData, RuleTitle) == 0x000030, "Member 'FFestaUIData::RuleTitle' has a wrong offset!");
static_assert(offsetof(FFestaUIData, PointRewardTitle) == 0x000040, "Member 'FFestaUIData::PointRewardTitle' has a wrong offset!");
static_assert(offsetof(FFestaUIData, WorldRankingTitle) == 0x000050, "Member 'FFestaUIData::WorldRankingTitle' has a wrong offset!");
static_assert(offsetof(FFestaUIData, FriendRankingTitle) == 0x000060, "Member 'FFestaUIData::FriendRankingTitle' has a wrong offset!");
static_assert(offsetof(FFestaUIData, OtherTitle) == 0x000070, "Member 'FFestaUIData::OtherTitle' has a wrong offset!");
static_assert(offsetof(FFestaUIData, FinalResultTitle) == 0x000080, "Member 'FFestaUIData::FinalResultTitle' has a wrong offset!");
static_assert(offsetof(FFestaUIData, DaysFormat) == 0x000090, "Member 'FFestaUIData::DaysFormat' has a wrong offset!");
static_assert(offsetof(FFestaUIData, CollaboDriverId) == 0x0000A0, "Member 'FFestaUIData::CollaboDriverId' has a wrong offset!");
static_assert(offsetof(FFestaUIData, FestaNoticeBGTex) == 0x0000A8, "Member 'FFestaUIData::FestaNoticeBGTex' has a wrong offset!");
static_assert(offsetof(FFestaUIData, FestaInfoBGTex) == 0x0000D0, "Member 'FFestaUIData::FestaInfoBGTex' has a wrong offset!");
static_assert(offsetof(FFestaUIData, EventEndBGTex) == 0x0000F8, "Member 'FFestaUIData::EventEndBGTex' has a wrong offset!");
static_assert(offsetof(FFestaUIData, CompleteBonusCharaTex) == 0x000120, "Member 'FFestaUIData::CompleteBonusCharaTex' has a wrong offset!");
static_assert(offsetof(FFestaUIData, SignageTex) == 0x000148, "Member 'FFestaUIData::SignageTex' has a wrong offset!");
static_assert(offsetof(FFestaUIData, TeamUIDataArray) == 0x000158, "Member 'FFestaUIData::TeamUIDataArray' has a wrong offset!");

// ScriptStruct UnionSystem.RaceFrameRate
// 0x0010 (0x0018 - 0x0008)
struct FRaceFrameRate final : public FTableRowBase
{
public:
	ERaceFrameRate                                FrameRate;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Fps;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProcTime;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceFrameRate) == 0x000008, "Wrong alignment on FRaceFrameRate");
static_assert(sizeof(FRaceFrameRate) == 0x000018, "Wrong size on FRaceFrameRate");
static_assert(offsetof(FRaceFrameRate, FrameRate) == 0x000008, "Member 'FRaceFrameRate::FrameRate' has a wrong offset!");
static_assert(offsetof(FRaceFrameRate, Fps) == 0x00000C, "Member 'FRaceFrameRate::Fps' has a wrong offset!");
static_assert(offsetof(FRaceFrameRate, LoopCount) == 0x000010, "Member 'FRaceFrameRate::LoopCount' has a wrong offset!");
static_assert(offsetof(FRaceFrameRate, ProcTime) == 0x000014, "Member 'FRaceFrameRate::ProcTime' has a wrong offset!");

// ScriptStruct UnionSystem.FriendApplyFriendRequest
// 0x0018 (0x0018 - 0x0000)
struct FFriendApplyFriendRequest final
{
public:
	bool                                          isBulk;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         targetIds;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendApplyFriendRequest) == 0x000008, "Wrong alignment on FFriendApplyFriendRequest");
static_assert(sizeof(FFriendApplyFriendRequest) == 0x000018, "Wrong size on FFriendApplyFriendRequest");
static_assert(offsetof(FFriendApplyFriendRequest, isBulk) == 0x000000, "Member 'FFriendApplyFriendRequest::isBulk' has a wrong offset!");
static_assert(offsetof(FFriendApplyFriendRequest, targetIds) == 0x000008, "Member 'FFriendApplyFriendRequest::targetIds' has a wrong offset!");

// ScriptStruct UnionSystem.FriendApplyFriendResponse
// 0x0060 (0x0060 - 0x0000)
struct FFriendApplyFriendResponse final
{
public:
	TArray<struct FFriendCommonPart_FriendData>   appliedByTargets;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFriendCommonPart_FriendData>   applyTargets;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFriendCommonPart_FriendData>   friendTargets;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         applyDenyTargetIds;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         noneGameDataTargetIds;                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         inconsistentDataTargetIds;                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendApplyFriendResponse) == 0x000008, "Wrong alignment on FFriendApplyFriendResponse");
static_assert(sizeof(FFriendApplyFriendResponse) == 0x000060, "Wrong size on FFriendApplyFriendResponse");
static_assert(offsetof(FFriendApplyFriendResponse, appliedByTargets) == 0x000000, "Member 'FFriendApplyFriendResponse::appliedByTargets' has a wrong offset!");
static_assert(offsetof(FFriendApplyFriendResponse, applyTargets) == 0x000010, "Member 'FFriendApplyFriendResponse::applyTargets' has a wrong offset!");
static_assert(offsetof(FFriendApplyFriendResponse, friendTargets) == 0x000020, "Member 'FFriendApplyFriendResponse::friendTargets' has a wrong offset!");
static_assert(offsetof(FFriendApplyFriendResponse, applyDenyTargetIds) == 0x000030, "Member 'FFriendApplyFriendResponse::applyDenyTargetIds' has a wrong offset!");
static_assert(offsetof(FFriendApplyFriendResponse, noneGameDataTargetIds) == 0x000040, "Member 'FFriendApplyFriendResponse::noneGameDataTargetIds' has a wrong offset!");
static_assert(offsetof(FFriendApplyFriendResponse, inconsistentDataTargetIds) == 0x000050, "Member 'FFriendApplyFriendResponse::inconsistentDataTargetIds' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FestaCourseLotteryData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_FestaCourseLotteryData final
{
public:
	int32                                         courseLotteryId;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Active;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         courseId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lottery;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Launch;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          collaborationDlc;                                  // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          notCollaborationDlc;                               // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNetMasterData_FestaCourseLotteryData) == 0x000004, "Wrong alignment on FNetMasterData_FestaCourseLotteryData");
static_assert(sizeof(FNetMasterData_FestaCourseLotteryData) == 0x000014, "Wrong size on FNetMasterData_FestaCourseLotteryData");
static_assert(offsetof(FNetMasterData_FestaCourseLotteryData, courseLotteryId) == 0x000000, "Member 'FNetMasterData_FestaCourseLotteryData::courseLotteryId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaCourseLotteryData, Active) == 0x000004, "Member 'FNetMasterData_FestaCourseLotteryData::Active' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaCourseLotteryData, courseId) == 0x000008, "Member 'FNetMasterData_FestaCourseLotteryData::courseId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaCourseLotteryData, Lottery) == 0x00000C, "Member 'FNetMasterData_FestaCourseLotteryData::Lottery' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaCourseLotteryData, Launch) == 0x000010, "Member 'FNetMasterData_FestaCourseLotteryData::Launch' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaCourseLotteryData, collaborationDlc) == 0x000011, "Member 'FNetMasterData_FestaCourseLotteryData::collaborationDlc' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaCourseLotteryData, notCollaborationDlc) == 0x000012, "Member 'FNetMasterData_FestaCourseLotteryData::notCollaborationDlc' has a wrong offset!");

// ScriptStruct UnionSystem.FriendRequestFriendRequest
// 0x0010 (0x0010 - 0x0000)
struct FFriendRequestFriendRequest final
{
public:
	class FString                                 TargetUserId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendRequestFriendRequest) == 0x000008, "Wrong alignment on FFriendRequestFriendRequest");
static_assert(sizeof(FFriendRequestFriendRequest) == 0x000010, "Wrong size on FFriendRequestFriendRequest");
static_assert(offsetof(FFriendRequestFriendRequest, TargetUserId) == 0x000000, "Member 'FFriendRequestFriendRequest::TargetUserId' has a wrong offset!");

// ScriptStruct UnionSystem.FriendRequestFriendResponse
// 0x0468 (0x0468 - 0x0000)
struct FFriendRequestFriendResponse final
{
public:
	struct FFriendCommonPart_FriendData           friendTarget;                                      // 0x0000(0x0468)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendRequestFriendResponse) == 0x000008, "Wrong alignment on FFriendRequestFriendResponse");
static_assert(sizeof(FFriendRequestFriendResponse) == 0x000468, "Wrong size on FFriendRequestFriendResponse");
static_assert(offsetof(FFriendRequestFriendResponse, friendTarget) == 0x000000, "Member 'FFriendRequestFriendResponse::friendTarget' has a wrong offset!");

// ScriptStruct UnionSystem.FriendCancelFriendRequest
// 0x0010 (0x0010 - 0x0000)
struct FFriendCancelFriendRequest final
{
public:
	class FString                                 TargetUserId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendCancelFriendRequest) == 0x000008, "Wrong alignment on FFriendCancelFriendRequest");
static_assert(sizeof(FFriendCancelFriendRequest) == 0x000010, "Wrong size on FFriendCancelFriendRequest");
static_assert(offsetof(FFriendCancelFriendRequest, TargetUserId) == 0x000000, "Member 'FFriendCancelFriendRequest::TargetUserId' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_GeneralizedParameterData
// 0x0030 (0x0030 - 0x0000)
struct FNetMasterData_GeneralizedParameterData final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValueType;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_GeneralizedParameterData) == 0x000008, "Wrong alignment on FNetMasterData_GeneralizedParameterData");
static_assert(sizeof(FNetMasterData_GeneralizedParameterData) == 0x000030, "Wrong size on FNetMasterData_GeneralizedParameterData");
static_assert(offsetof(FNetMasterData_GeneralizedParameterData, ParameterName) == 0x000000, "Member 'FNetMasterData_GeneralizedParameterData::ParameterName' has a wrong offset!");
static_assert(offsetof(FNetMasterData_GeneralizedParameterData, ValueType) == 0x000010, "Member 'FNetMasterData_GeneralizedParameterData::ValueType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_GeneralizedParameterData, Value) == 0x000020, "Member 'FNetMasterData_GeneralizedParameterData::Value' has a wrong offset!");

// ScriptStruct UnionSystem.FriendCancelFriendResponse
// 0x0001 (0x0001 - 0x0000)
struct FFriendCancelFriendResponse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendCancelFriendResponse) == 0x000001, "Wrong alignment on FFriendCancelFriendResponse");
static_assert(sizeof(FFriendCancelFriendResponse) == 0x000001, "Wrong size on FFriendCancelFriendResponse");

// ScriptStruct UnionSystem.NetMasterData_LegendCompeRewardRaceCountData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_LegendCompeRewardRaceCountData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         raceCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_LegendCompeRewardRaceCountData) == 0x000004, "Wrong alignment on FNetMasterData_LegendCompeRewardRaceCountData");
static_assert(sizeof(FNetMasterData_LegendCompeRewardRaceCountData) == 0x000014, "Wrong size on FNetMasterData_LegendCompeRewardRaceCountData");
static_assert(offsetof(FNetMasterData_LegendCompeRewardRaceCountData, ID) == 0x000000, "Member 'FNetMasterData_LegendCompeRewardRaceCountData::ID' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardRaceCountData, raceCount) == 0x000004, "Member 'FNetMasterData_LegendCompeRewardRaceCountData::raceCount' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardRaceCountData, rewardType) == 0x000008, "Member 'FNetMasterData_LegendCompeRewardRaceCountData::rewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardRaceCountData, rewardId) == 0x00000C, "Member 'FNetMasterData_LegendCompeRewardRaceCountData::rewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardRaceCountData, rewardNum) == 0x000010, "Member 'FNetMasterData_LegendCompeRewardRaceCountData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.FriendAcceptFriendRequest
// 0x0010 (0x0010 - 0x0000)
struct FFriendAcceptFriendRequest final
{
public:
	class FString                                 TargetUserId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendAcceptFriendRequest) == 0x000008, "Wrong alignment on FFriendAcceptFriendRequest");
static_assert(sizeof(FFriendAcceptFriendRequest) == 0x000010, "Wrong size on FFriendAcceptFriendRequest");
static_assert(offsetof(FFriendAcceptFriendRequest, TargetUserId) == 0x000000, "Member 'FFriendAcceptFriendRequest::TargetUserId' has a wrong offset!");

// ScriptStruct UnionSystem.FriendRejectFriendRequest
// 0x0010 (0x0010 - 0x0000)
struct FFriendRejectFriendRequest final
{
public:
	class FString                                 TargetUserId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendRejectFriendRequest) == 0x000008, "Wrong alignment on FFriendRejectFriendRequest");
static_assert(sizeof(FFriendRejectFriendRequest) == 0x000010, "Wrong size on FFriendRejectFriendRequest");
static_assert(offsetof(FFriendRejectFriendRequest, TargetUserId) == 0x000000, "Member 'FFriendRejectFriendRequest::TargetUserId' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_ReleaseVersionData
// 0x0020 (0x0020 - 0x0000)
struct FNetMasterData_ReleaseVersionData final
{
public:
	class FString                                 versionId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 releaseTime;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_ReleaseVersionData) == 0x000008, "Wrong alignment on FNetMasterData_ReleaseVersionData");
static_assert(sizeof(FNetMasterData_ReleaseVersionData) == 0x000020, "Wrong size on FNetMasterData_ReleaseVersionData");
static_assert(offsetof(FNetMasterData_ReleaseVersionData, versionId) == 0x000000, "Member 'FNetMasterData_ReleaseVersionData::versionId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_ReleaseVersionData, releaseTime) == 0x000010, "Member 'FNetMasterData_ReleaseVersionData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.FriendRejectFriendResponse
// 0x0001 (0x0001 - 0x0000)
struct FFriendRejectFriendResponse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendRejectFriendResponse) == 0x000001, "Wrong alignment on FFriendRejectFriendResponse");
static_assert(sizeof(FFriendRejectFriendResponse) == 0x000001, "Wrong size on FFriendRejectFriendResponse");

// ScriptStruct UnionSystem.LobbyKeepAliveRequest
// 0x0010 (0x0010 - 0x0000)
struct FLobbyKeepAliveRequest final
{
public:
	class FString                                 ShortLobbyId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyKeepAliveRequest) == 0x000008, "Wrong alignment on FLobbyKeepAliveRequest");
static_assert(sizeof(FLobbyKeepAliveRequest) == 0x000010, "Wrong size on FLobbyKeepAliveRequest");
static_assert(offsetof(FLobbyKeepAliveRequest, ShortLobbyId) == 0x000000, "Member 'FLobbyKeepAliveRequest::ShortLobbyId' has a wrong offset!");

// ScriptStruct UnionSystem.FriendUnfriendRequest
// 0x0010 (0x0010 - 0x0000)
struct FFriendUnfriendRequest final
{
public:
	class FString                                 TargetUserId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendUnfriendRequest) == 0x000008, "Wrong alignment on FFriendUnfriendRequest");
static_assert(sizeof(FFriendUnfriendRequest) == 0x000010, "Wrong size on FFriendUnfriendRequest");
static_assert(offsetof(FFriendUnfriendRequest, TargetUserId) == 0x000000, "Member 'FFriendUnfriendRequest::TargetUserId' has a wrong offset!");

// ScriptStruct UnionSystem.FriendUnfriendResponse
// 0x0001 (0x0001 - 0x0000)
struct FFriendUnfriendResponse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendUnfriendResponse) == 0x000001, "Wrong alignment on FFriendUnfriendResponse");
static_assert(sizeof(FFriendUnfriendResponse) == 0x000001, "Wrong size on FFriendUnfriendResponse");

// ScriptStruct UnionSystem.FriendGetFriendListRequest
// 0x0001 (0x0001 - 0x0000)
struct FFriendGetFriendListRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendGetFriendListRequest) == 0x000001, "Wrong alignment on FFriendGetFriendListRequest");
static_assert(sizeof(FFriendGetFriendListRequest) == 0x000001, "Wrong size on FFriendGetFriendListRequest");

// ScriptStruct UnionSystem.NetMasterData_ReleaseHornData
// 0x0018 (0x0018 - 0x0000)
struct FNetMasterData_ReleaseHornData final
{
public:
	int32                                         hornId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_ReleaseHornData) == 0x000008, "Wrong alignment on FNetMasterData_ReleaseHornData");
static_assert(sizeof(FNetMasterData_ReleaseHornData) == 0x000018, "Wrong size on FNetMasterData_ReleaseHornData");
static_assert(offsetof(FNetMasterData_ReleaseHornData, hornId) == 0x000000, "Member 'FNetMasterData_ReleaseHornData::hornId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_ReleaseHornData, releaseTime) == 0x000008, "Member 'FNetMasterData_ReleaseHornData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.FriendGetFriendLastDateRequest
// 0x0001 (0x0001 - 0x0000)
struct FFriendGetFriendLastDateRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendGetFriendLastDateRequest) == 0x000001, "Wrong alignment on FFriendGetFriendLastDateRequest");
static_assert(sizeof(FFriendGetFriendLastDateRequest) == 0x000001, "Wrong size on FFriendGetFriendLastDateRequest");

// ScriptStruct UnionSystem.NetMasterData_DlcTeaserData
// 0x0030 (0x0030 - 0x0000)
struct FNetMasterData_DlcTeaserData final
{
public:
	class FString                                 dlcTeaserId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartTime;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_DlcTeaserData) == 0x000008, "Wrong alignment on FNetMasterData_DlcTeaserData");
static_assert(sizeof(FNetMasterData_DlcTeaserData) == 0x000030, "Wrong size on FNetMasterData_DlcTeaserData");
static_assert(offsetof(FNetMasterData_DlcTeaserData, dlcTeaserId) == 0x000000, "Member 'FNetMasterData_DlcTeaserData::dlcTeaserId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_DlcTeaserData, StartTime) == 0x000010, "Member 'FNetMasterData_DlcTeaserData::StartTime' has a wrong offset!");
static_assert(offsetof(FNetMasterData_DlcTeaserData, endTime) == 0x000020, "Member 'FNetMasterData_DlcTeaserData::endTime' has a wrong offset!");

// ScriptStruct UnionSystem.FriendGetFriendLastDateResponse
// 0x0010 (0x0010 - 0x0000)
struct FFriendGetFriendLastDateResponse final
{
public:
	class FString                                 updatedAt;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendGetFriendLastDateResponse) == 0x000008, "Wrong alignment on FFriendGetFriendLastDateResponse");
static_assert(sizeof(FFriendGetFriendLastDateResponse) == 0x000010, "Wrong size on FFriendGetFriendLastDateResponse");
static_assert(offsetof(FFriendGetFriendLastDateResponse, updatedAt) == 0x000000, "Member 'FFriendGetFriendLastDateResponse::updatedAt' has a wrong offset!");

// ScriptStruct UnionSystem.FriendsListCacheExpiration
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FFriendsListCacheExpiration final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendsListCacheExpiration) == 0x000008, "Wrong alignment on FFriendsListCacheExpiration");
static_assert(sizeof(FFriendsListCacheExpiration) == 0x000058, "Wrong size on FFriendsListCacheExpiration");

// ScriptStruct UnionSystem.NetMasterData_LegendCompeRankingRewardData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_LegendCompeRankingRewardData final
{
public:
	int32                                         rankingRewardId;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         upper;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_LegendCompeRankingRewardData) == 0x000004, "Wrong alignment on FNetMasterData_LegendCompeRankingRewardData");
static_assert(sizeof(FNetMasterData_LegendCompeRankingRewardData) == 0x000014, "Wrong size on FNetMasterData_LegendCompeRankingRewardData");
static_assert(offsetof(FNetMasterData_LegendCompeRankingRewardData, rankingRewardId) == 0x000000, "Member 'FNetMasterData_LegendCompeRankingRewardData::rankingRewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRankingRewardData, upper) == 0x000004, "Member 'FNetMasterData_LegendCompeRankingRewardData::upper' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRankingRewardData, rewardType) == 0x000008, "Member 'FNetMasterData_LegendCompeRankingRewardData::rewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRankingRewardData, rewardId) == 0x00000C, "Member 'FNetMasterData_LegendCompeRankingRewardData::rewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRankingRewardData, rewardNum) == 0x000010, "Member 'FNetMasterData_LegendCompeRankingRewardData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.FriendsListUserSearchCacheData
// 0x00E8 (0x00E8 - 0x0000)
struct alignas(0x08) FFriendsListUserSearchCacheData final
{
public:
	uint8                                         Pad_0[0xE8];                                       // 0x0000(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendsListUserSearchCacheData) == 0x000008, "Wrong alignment on FFriendsListUserSearchCacheData");
static_assert(sizeof(FFriendsListUserSearchCacheData) == 0x0000E8, "Wrong size on FFriendsListUserSearchCacheData");

// ScriptStruct UnionSystem.ActivityObjectIdData
// 0x0018 (0x0018 - 0x0000)
struct FActivityObjectIdData final
{
public:
	EGameModeId                                   GameActivityId;                                    // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameTaskType                                 GameTaskType;                                      // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrandPrixId                                  GrandPrixId;                                       // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     RivalId;                                           // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERivalTeamId                                  RivalTeamId;                                       // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStageId                                      StageId;                                           // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpeedClassId                                 SpeedClassId;                                      // 0x0006(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActivityIdString;                                  // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityObjectIdData) == 0x000008, "Wrong alignment on FActivityObjectIdData");
static_assert(sizeof(FActivityObjectIdData) == 0x000018, "Wrong size on FActivityObjectIdData");
static_assert(offsetof(FActivityObjectIdData, GameActivityId) == 0x000000, "Member 'FActivityObjectIdData::GameActivityId' has a wrong offset!");
static_assert(offsetof(FActivityObjectIdData, GameTaskType) == 0x000001, "Member 'FActivityObjectIdData::GameTaskType' has a wrong offset!");
static_assert(offsetof(FActivityObjectIdData, GrandPrixId) == 0x000002, "Member 'FActivityObjectIdData::GrandPrixId' has a wrong offset!");
static_assert(offsetof(FActivityObjectIdData, RivalId) == 0x000003, "Member 'FActivityObjectIdData::RivalId' has a wrong offset!");
static_assert(offsetof(FActivityObjectIdData, RivalTeamId) == 0x000004, "Member 'FActivityObjectIdData::RivalTeamId' has a wrong offset!");
static_assert(offsetof(FActivityObjectIdData, StageId) == 0x000005, "Member 'FActivityObjectIdData::StageId' has a wrong offset!");
static_assert(offsetof(FActivityObjectIdData, SpeedClassId) == 0x000006, "Member 'FActivityObjectIdData::SpeedClassId' has a wrong offset!");
static_assert(offsetof(FActivityObjectIdData, ActivityIdString) == 0x000008, "Member 'FActivityObjectIdData::ActivityIdString' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_ReleaseFrontPartsData
// 0x0018 (0x0018 - 0x0000)
struct FNetMasterData_ReleaseFrontPartsData final
{
public:
	int32                                         FrontPartsId;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_ReleaseFrontPartsData) == 0x000008, "Wrong alignment on FNetMasterData_ReleaseFrontPartsData");
static_assert(sizeof(FNetMasterData_ReleaseFrontPartsData) == 0x000018, "Wrong size on FNetMasterData_ReleaseFrontPartsData");
static_assert(offsetof(FNetMasterData_ReleaseFrontPartsData, FrontPartsId) == 0x000000, "Member 'FNetMasterData_ReleaseFrontPartsData::FrontPartsId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_ReleaseFrontPartsData, releaseTime) == 0x000008, "Member 'FNetMasterData_ReleaseFrontPartsData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.GameHttpRequestOption
// 0x0088 (0x0088 - 0x0000)
struct FGameHttpRequestOption final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecurityKey;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecurityIv;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AesKeyHex;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionId;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProviderId;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeploymentId;                                      // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Resend;                                            // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameHttpRequestOption) == 0x000008, "Wrong alignment on FGameHttpRequestOption");
static_assert(sizeof(FGameHttpRequestOption) == 0x000088, "Wrong size on FGameHttpRequestOption");
static_assert(offsetof(FGameHttpRequestOption, SessionId) == 0x000000, "Member 'FGameHttpRequestOption::SessionId' has a wrong offset!");
static_assert(offsetof(FGameHttpRequestOption, SecurityKey) == 0x000010, "Member 'FGameHttpRequestOption::SecurityKey' has a wrong offset!");
static_assert(offsetof(FGameHttpRequestOption, SecurityIv) == 0x000020, "Member 'FGameHttpRequestOption::SecurityIv' has a wrong offset!");
static_assert(offsetof(FGameHttpRequestOption, AesKeyHex) == 0x000030, "Member 'FGameHttpRequestOption::AesKeyHex' has a wrong offset!");
static_assert(offsetof(FGameHttpRequestOption, TransactionId) == 0x000040, "Member 'FGameHttpRequestOption::TransactionId' has a wrong offset!");
static_assert(offsetof(FGameHttpRequestOption, ProviderId) == 0x000050, "Member 'FGameHttpRequestOption::ProviderId' has a wrong offset!");
static_assert(offsetof(FGameHttpRequestOption, ProductUserId) == 0x000060, "Member 'FGameHttpRequestOption::ProductUserId' has a wrong offset!");
static_assert(offsetof(FGameHttpRequestOption, DeploymentId) == 0x000070, "Member 'FGameHttpRequestOption::DeploymentId' has a wrong offset!");
static_assert(offsetof(FGameHttpRequestOption, Resend) == 0x000080, "Member 'FGameHttpRequestOption::Resend' has a wrong offset!");

// ScriptStruct UnionSystem.GhostGetRankingGhostDataResponse
// 0x0010 (0x0010 - 0x0000)
struct FGhostGetRankingGhostDataResponse final
{
public:
	class FString                                 signedUrl;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGhostGetRankingGhostDataResponse) == 0x000008, "Wrong alignment on FGhostGetRankingGhostDataResponse");
static_assert(sizeof(FGhostGetRankingGhostDataResponse) == 0x000010, "Wrong size on FGhostGetRankingGhostDataResponse");
static_assert(offsetof(FGhostGetRankingGhostDataResponse, signedUrl) == 0x000000, "Member 'FGhostGetRankingGhostDataResponse::signedUrl' has a wrong offset!");

// ScriptStruct UnionSystem.MatchmakingStopRequest
// 0x0010 (0x0010 - 0x0000)
struct FMatchmakingStopRequest final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingStopRequest) == 0x000008, "Wrong alignment on FMatchmakingStopRequest");
static_assert(sizeof(FMatchmakingStopRequest) == 0x000010, "Wrong size on FMatchmakingStopRequest");
static_assert(offsetof(FMatchmakingStopRequest, LobbyId) == 0x000000, "Member 'FMatchmakingStopRequest::LobbyId' has a wrong offset!");

// ScriptStruct UnionSystem.GhostGetFriendGhostDataRequest
// 0x0028 (0x0028 - 0x0000)
struct FGhostGetFriendGhostDataRequest final
{
public:
	class FString                                 TargetUserId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         courseId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DrivingTime;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGhostGetFriendGhostDataRequest) == 0x000008, "Wrong alignment on FGhostGetFriendGhostDataRequest");
static_assert(sizeof(FGhostGetFriendGhostDataRequest) == 0x000028, "Wrong size on FGhostGetFriendGhostDataRequest");
static_assert(offsetof(FGhostGetFriendGhostDataRequest, TargetUserId) == 0x000000, "Member 'FGhostGetFriendGhostDataRequest::TargetUserId' has a wrong offset!");
static_assert(offsetof(FGhostGetFriendGhostDataRequest, courseId) == 0x000010, "Member 'FGhostGetFriendGhostDataRequest::courseId' has a wrong offset!");
static_assert(offsetof(FGhostGetFriendGhostDataRequest, DrivingTime) == 0x000018, "Member 'FGhostGetFriendGhostDataRequest::DrivingTime' has a wrong offset!");

// ScriptStruct UnionSystem.GhostUploadProgressInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FGhostUploadProgressInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGhostUploadProgressInfo) == 0x000004, "Wrong alignment on FGhostUploadProgressInfo");
static_assert(sizeof(FGhostUploadProgressInfo) == 0x000010, "Wrong size on FGhostUploadProgressInfo");

// ScriptStruct UnionSystem.GhostDownloadProgressInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FGhostDownloadProgressInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGhostDownloadProgressInfo) == 0x000004, "Wrong alignment on FGhostDownloadProgressInfo");
static_assert(sizeof(FGhostDownloadProgressInfo) == 0x00000C, "Wrong size on FGhostDownloadProgressInfo");

// ScriptStruct UnionSystem.DlcUITableRowData
// 0x0050 (0x0058 - 0x0008)
struct FDlcUITableRowData final : public FTableRowBase
{
public:
	class FText                                   NoticeTitle;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ScheduleText;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FestaNoticeBGTex;                                  // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsButtonVisible;                                   // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDlcUITableRowData) == 0x000008, "Wrong alignment on FDlcUITableRowData");
static_assert(sizeof(FDlcUITableRowData) == 0x000058, "Wrong size on FDlcUITableRowData");
static_assert(offsetof(FDlcUITableRowData, NoticeTitle) == 0x000008, "Member 'FDlcUITableRowData::NoticeTitle' has a wrong offset!");
static_assert(offsetof(FDlcUITableRowData, ScheduleText) == 0x000018, "Member 'FDlcUITableRowData::ScheduleText' has a wrong offset!");
static_assert(offsetof(FDlcUITableRowData, FestaNoticeBGTex) == 0x000028, "Member 'FDlcUITableRowData::FestaNoticeBGTex' has a wrong offset!");
static_assert(offsetof(FDlcUITableRowData, IsButtonVisible) == 0x000050, "Member 'FDlcUITableRowData::IsButtonVisible' has a wrong offset!");

// ScriptStruct UnionSystem.GhostDownloadResultInfo
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FGhostDownloadResultInfo final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGhostDownloadResultInfo) == 0x000004, "Wrong alignment on FGhostDownloadResultInfo");
static_assert(sizeof(FGhostDownloadResultInfo) == 0x000014, "Wrong size on FGhostDownloadResultInfo");

// ScriptStruct UnionSystem.GrandPrixDisplayWidgetFile
// 0x0008 (0x0010 - 0x0008)
struct FGrandPrixDisplayWidgetFile final : public FTableRowBase
{
public:
	TSubclassOf<class UUserWidget>                Widget;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGrandPrixDisplayWidgetFile) == 0x000008, "Wrong alignment on FGrandPrixDisplayWidgetFile");
static_assert(sizeof(FGrandPrixDisplayWidgetFile) == 0x000010, "Wrong size on FGrandPrixDisplayWidgetFile");
static_assert(offsetof(FGrandPrixDisplayWidgetFile, Widget) == 0x000008, "Member 'FGrandPrixDisplayWidgetFile::Widget' has a wrong offset!");

// ScriptStruct UnionSystem.UIColorInfo
// 0x0018 (0x0020 - 0x0008)
struct FUIColorInfo final : public FTableRowBase
{
public:
	EGroupColorId                                 colorId;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 MainColor;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 PlayerNumberBaseArea;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 PlayerNameOutline;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RankMain;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RankOutline;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIColorInfo) == 0x000008, "Wrong alignment on FUIColorInfo");
static_assert(sizeof(FUIColorInfo) == 0x000020, "Wrong size on FUIColorInfo");
static_assert(offsetof(FUIColorInfo, colorId) == 0x000008, "Member 'FUIColorInfo::colorId' has a wrong offset!");
static_assert(offsetof(FUIColorInfo, MainColor) == 0x00000C, "Member 'FUIColorInfo::MainColor' has a wrong offset!");
static_assert(offsetof(FUIColorInfo, PlayerNumberBaseArea) == 0x000010, "Member 'FUIColorInfo::PlayerNumberBaseArea' has a wrong offset!");
static_assert(offsetof(FUIColorInfo, PlayerNameOutline) == 0x000014, "Member 'FUIColorInfo::PlayerNameOutline' has a wrong offset!");
static_assert(offsetof(FUIColorInfo, RankMain) == 0x000018, "Member 'FUIColorInfo::RankMain' has a wrong offset!");
static_assert(offsetof(FUIColorInfo, RankOutline) == 0x00001C, "Member 'FUIColorInfo::RankOutline' has a wrong offset!");

// ScriptStruct UnionSystem.MCEventBonusData
// 0x0010 (0x0010 - 0x0000)
struct FMCEventBonusData final
{
public:
	TArray<int32>                                 list;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCEventBonusData) == 0x000008, "Wrong alignment on FMCEventBonusData");
static_assert(sizeof(FMCEventBonusData) == 0x000010, "Wrong size on FMCEventBonusData");
static_assert(offsetof(FMCEventBonusData, list) == 0x000000, "Member 'FMCEventBonusData::list' has a wrong offset!");

// ScriptStruct UnionSystem.MenuGroupRaceRuleData
// 0x00D8 (0x00E0 - 0x0008)
struct FMenuGroupRaceRuleData final : public FTableRowBase
{
public:
	EGroupRaceRule                                GroupRaceRule;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RuleName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RuleNameAndRank;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   BeforeRaceRuleTitle;                               // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   BeforeRaceRuleExplain;                             // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RuleIconTexture;                                   // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RuleBGTexture;                                     // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BeforeRaceGadgetExplain;                           // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   BeforeRaceRuleTitleFesta;                          // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   BeforeRaceRuleExplainFesta;                        // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   BeforeRaceGadgetExplainFesta;                      // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMenuGroupRaceRuleData) == 0x000008, "Wrong alignment on FMenuGroupRaceRuleData");
static_assert(sizeof(FMenuGroupRaceRuleData) == 0x0000E0, "Wrong size on FMenuGroupRaceRuleData");
static_assert(offsetof(FMenuGroupRaceRuleData, GroupRaceRule) == 0x000008, "Member 'FMenuGroupRaceRuleData::GroupRaceRule' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceRuleData, RuleName) == 0x000010, "Member 'FMenuGroupRaceRuleData::RuleName' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceRuleData, RuleNameAndRank) == 0x000020, "Member 'FMenuGroupRaceRuleData::RuleNameAndRank' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceRuleData, BeforeRaceRuleTitle) == 0x000030, "Member 'FMenuGroupRaceRuleData::BeforeRaceRuleTitle' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceRuleData, BeforeRaceRuleExplain) == 0x000040, "Member 'FMenuGroupRaceRuleData::BeforeRaceRuleExplain' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceRuleData, RuleIconTexture) == 0x000050, "Member 'FMenuGroupRaceRuleData::RuleIconTexture' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceRuleData, RuleBGTexture) == 0x000078, "Member 'FMenuGroupRaceRuleData::RuleBGTexture' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceRuleData, BeforeRaceGadgetExplain) == 0x0000A0, "Member 'FMenuGroupRaceRuleData::BeforeRaceGadgetExplain' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceRuleData, BeforeRaceRuleTitleFesta) == 0x0000B0, "Member 'FMenuGroupRaceRuleData::BeforeRaceRuleTitleFesta' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceRuleData, BeforeRaceRuleExplainFesta) == 0x0000C0, "Member 'FMenuGroupRaceRuleData::BeforeRaceRuleExplainFesta' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceRuleData, BeforeRaceGadgetExplainFesta) == 0x0000D0, "Member 'FMenuGroupRaceRuleData::BeforeRaceGadgetExplainFesta' has a wrong offset!");

// ScriptStruct UnionSystem.MenuGroupRaceBonusData
// 0x0068 (0x0070 - 0x0008)
struct FMenuGroupRaceBonusData final : public FTableRowBase
{
public:
	class FText                                   RaceResultBonus;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RuleIconTexture;                                   // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   EventInfoVictoryPointBonusRuleExplainFesta;        // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DispNameInRace;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TwoGroupRaceResultBonus;                           // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMenuGroupRaceBonusData) == 0x000008, "Wrong alignment on FMenuGroupRaceBonusData");
static_assert(sizeof(FMenuGroupRaceBonusData) == 0x000070, "Wrong size on FMenuGroupRaceBonusData");
static_assert(offsetof(FMenuGroupRaceBonusData, RaceResultBonus) == 0x000008, "Member 'FMenuGroupRaceBonusData::RaceResultBonus' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceBonusData, RuleIconTexture) == 0x000018, "Member 'FMenuGroupRaceBonusData::RuleIconTexture' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceBonusData, EventInfoVictoryPointBonusRuleExplainFesta) == 0x000040, "Member 'FMenuGroupRaceBonusData::EventInfoVictoryPointBonusRuleExplainFesta' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceBonusData, DispNameInRace) == 0x000050, "Member 'FMenuGroupRaceBonusData::DispNameInRace' has a wrong offset!");
static_assert(offsetof(FMenuGroupRaceBonusData, TwoGroupRaceResultBonus) == 0x000060, "Member 'FMenuGroupRaceBonusData::TwoGroupRaceResultBonus' has a wrong offset!");

// ScriptStruct UnionSystem.ItemSet
// 0x0003 (0x0003 - 0x0000)
struct FItemSet final
{
public:
	EItemId                                       FirstItemId;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       SecondItemId;                                      // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ThirdItemId;                                       // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSet) == 0x000001, "Wrong alignment on FItemSet");
static_assert(sizeof(FItemSet) == 0x000003, "Wrong size on FItemSet");
static_assert(offsetof(FItemSet, FirstItemId) == 0x000000, "Member 'FItemSet::FirstItemId' has a wrong offset!");
static_assert(offsetof(FItemSet, SecondItemId) == 0x000001, "Member 'FItemSet::SecondItemId' has a wrong offset!");
static_assert(offsetof(FItemSet, ThirdItemId) == 0x000002, "Member 'FItemSet::ThirdItemId' has a wrong offset!");

// ScriptStruct UnionSystem.ItemStatusInfo
// 0x0028 (0x0028 - 0x0000)
struct FItemStatusInfo final
{
public:
	EItemId                                       ItemId;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemStatus                                   Status;                                            // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemStatusOption                      Option;                                            // 0x0008(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemStatusInfo) == 0x000008, "Wrong alignment on FItemStatusInfo");
static_assert(sizeof(FItemStatusInfo) == 0x000028, "Wrong size on FItemStatusInfo");
static_assert(offsetof(FItemStatusInfo, ItemId) == 0x000000, "Member 'FItemStatusInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FItemStatusInfo, Status) == 0x000001, "Member 'FItemStatusInfo::Status' has a wrong offset!");
static_assert(offsetof(FItemStatusInfo, Option) == 0x000008, "Member 'FItemStatusInfo::Option' has a wrong offset!");

// ScriptStruct UnionSystem.HoldItemSettings
// 0x0060 (0x0060 - 0x0000)
struct FHoldItemSettings final
{
public:
	struct FHoldItemQualitySettings               PC[0x3];                                           // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FHoldItemQualitySettings               NonPC[0x3];                                        // 0x0030(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHoldItemSettings) == 0x000008, "Wrong alignment on FHoldItemSettings");
static_assert(sizeof(FHoldItemSettings) == 0x000060, "Wrong size on FHoldItemSettings");
static_assert(offsetof(FHoldItemSettings, PC) == 0x000000, "Member 'FHoldItemSettings::PC' has a wrong offset!");
static_assert(offsetof(FHoldItemSettings, NonPC) == 0x000030, "Member 'FHoldItemSettings::NonPC' has a wrong offset!");

// ScriptStruct UnionSystem.TrackDataTable
// 0x00A8 (0x00B0 - 0x0008)
struct FTrackDataTable final : public FTableRowBase
{
public:
	int32                                         TrackID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlbumID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BGMName;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TitleName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ArtistName;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SourceName;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              JacketTexture;                                     // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           SoundCue;                                          // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJukeboxOnly;                                     // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAvailableLap                                 AvailableLap;                                      // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExtendContent;                                   // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x00AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AvailableOnAlbumUnLocked;                          // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackDataTable) == 0x000008, "Wrong alignment on FTrackDataTable");
static_assert(sizeof(FTrackDataTable) == 0x0000B0, "Wrong size on FTrackDataTable");
static_assert(offsetof(FTrackDataTable, TrackID) == 0x000008, "Member 'FTrackDataTable::TrackID' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, AlbumID) == 0x00000C, "Member 'FTrackDataTable::AlbumID' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, SortID) == 0x000010, "Member 'FTrackDataTable::SortID' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, BGMName) == 0x000018, "Member 'FTrackDataTable::BGMName' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, TitleName) == 0x000028, "Member 'FTrackDataTable::TitleName' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, ArtistName) == 0x000038, "Member 'FTrackDataTable::ArtistName' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, SourceName) == 0x000048, "Member 'FTrackDataTable::SourceName' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, JacketTexture) == 0x000058, "Member 'FTrackDataTable::JacketTexture' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, SoundCue) == 0x000080, "Member 'FTrackDataTable::SoundCue' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, IsJukeboxOnly) == 0x0000A8, "Member 'FTrackDataTable::IsJukeboxOnly' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, AvailableLap) == 0x0000A9, "Member 'FTrackDataTable::AvailableLap' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, IsExtendContent) == 0x0000AA, "Member 'FTrackDataTable::IsExtendContent' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, contentId) == 0x0000AB, "Member 'FTrackDataTable::contentId' has a wrong offset!");
static_assert(offsetof(FTrackDataTable, AvailableOnAlbumUnLocked) == 0x0000AC, "Member 'FTrackDataTable::AvailableOnAlbumUnLocked' has a wrong offset!");

// ScriptStruct UnionSystem.AlbumData
// 0x0070 (0x0070 - 0x0000)
struct FAlbumData final
{
public:
	int32                                         AlbumID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AlbumName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SourceName;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              JacketTexture;                                     // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJukeboxOnly;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExtendContent;                                   // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TrackIDList;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          DefaultAvailable;                                  // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAlbumData) == 0x000008, "Wrong alignment on FAlbumData");
static_assert(sizeof(FAlbumData) == 0x000070, "Wrong size on FAlbumData");
static_assert(offsetof(FAlbumData, AlbumID) == 0x000000, "Member 'FAlbumData::AlbumID' has a wrong offset!");
static_assert(offsetof(FAlbumData, SortID) == 0x000004, "Member 'FAlbumData::SortID' has a wrong offset!");
static_assert(offsetof(FAlbumData, AlbumName) == 0x000008, "Member 'FAlbumData::AlbumName' has a wrong offset!");
static_assert(offsetof(FAlbumData, SourceName) == 0x000018, "Member 'FAlbumData::SourceName' has a wrong offset!");
static_assert(offsetof(FAlbumData, JacketTexture) == 0x000028, "Member 'FAlbumData::JacketTexture' has a wrong offset!");
static_assert(offsetof(FAlbumData, IsJukeboxOnly) == 0x000050, "Member 'FAlbumData::IsJukeboxOnly' has a wrong offset!");
static_assert(offsetof(FAlbumData, IsExtendContent) == 0x000051, "Member 'FAlbumData::IsExtendContent' has a wrong offset!");
static_assert(offsetof(FAlbumData, contentId) == 0x000052, "Member 'FAlbumData::contentId' has a wrong offset!");
static_assert(offsetof(FAlbumData, TrackIDList) == 0x000058, "Member 'FAlbumData::TrackIDList' has a wrong offset!");
static_assert(offsetof(FAlbumData, DefaultAvailable) == 0x000068, "Member 'FAlbumData::DefaultAvailable' has a wrong offset!");

// ScriptStruct UnionSystem.LegendCompeCheckLegendCompeRewardRequest
// 0x0004 (0x0004 - 0x0000)
struct FLegendCompeCheckLegendCompeRewardRequest final
{
public:
	int32                                         compeId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLegendCompeCheckLegendCompeRewardRequest) == 0x000004, "Wrong alignment on FLegendCompeCheckLegendCompeRewardRequest");
static_assert(sizeof(FLegendCompeCheckLegendCompeRewardRequest) == 0x000004, "Wrong size on FLegendCompeCheckLegendCompeRewardRequest");
static_assert(offsetof(FLegendCompeCheckLegendCompeRewardRequest, compeId) == 0x000000, "Member 'FLegendCompeCheckLegendCompeRewardRequest::compeId' has a wrong offset!");

// ScriptStruct UnionSystem.LobbyGetEosLobbyIdResponse
// 0x0010 (0x0010 - 0x0000)
struct FLobbyGetEosLobbyIdResponse final
{
public:
	class FString                                 eosLobbyId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyGetEosLobbyIdResponse) == 0x000008, "Wrong alignment on FLobbyGetEosLobbyIdResponse");
static_assert(sizeof(FLobbyGetEosLobbyIdResponse) == 0x000010, "Wrong size on FLobbyGetEosLobbyIdResponse");
static_assert(offsetof(FLobbyGetEosLobbyIdResponse, eosLobbyId) == 0x000000, "Member 'FLobbyGetEosLobbyIdResponse::eosLobbyId' has a wrong offset!");

// ScriptStruct UnionSystem.LobbyKeepAliveResponse
// 0x0018 (0x0018 - 0x0000)
struct FLobbyKeepAliveResponse final
{
public:
	class FString                                 updatedAt;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpirationTimeSec;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyKeepAliveResponse) == 0x000008, "Wrong alignment on FLobbyKeepAliveResponse");
static_assert(sizeof(FLobbyKeepAliveResponse) == 0x000018, "Wrong size on FLobbyKeepAliveResponse");
static_assert(offsetof(FLobbyKeepAliveResponse, updatedAt) == 0x000000, "Member 'FLobbyKeepAliveResponse::updatedAt' has a wrong offset!");
static_assert(offsetof(FLobbyKeepAliveResponse, ExpirationTimeSec) == 0x000010, "Member 'FLobbyKeepAliveResponse::ExpirationTimeSec' has a wrong offset!");

// ScriptStruct UnionSystem.LobbyRemoveLobbyResponse
// 0x0001 (0x0001 - 0x0000)
struct FLobbyRemoveLobbyResponse final
{
public:
	bool                                          isRemove;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyRemoveLobbyResponse) == 0x000001, "Wrong alignment on FLobbyRemoveLobbyResponse");
static_assert(sizeof(FLobbyRemoveLobbyResponse) == 0x000001, "Wrong size on FLobbyRemoveLobbyResponse");
static_assert(offsetof(FLobbyRemoveLobbyResponse, isRemove) == 0x000000, "Member 'FLobbyRemoveLobbyResponse::isRemove' has a wrong offset!");

// ScriptStruct UnionSystem.LobbySubsystemLobbySearchQuery
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FLobbySubsystemLobbySearchQuery final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbySubsystemLobbySearchQuery) == 0x000008, "Wrong alignment on FLobbySubsystemLobbySearchQuery");
static_assert(sizeof(FLobbySubsystemLobbySearchQuery) == 0x000018, "Wrong size on FLobbySubsystemLobbySearchQuery");

// ScriptStruct UnionSystem.LocalizeRuntimeImage
// 0x0028 (0x0030 - 0x0008)
struct FLocalizeRuntimeImage final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizeRuntimeImage) == 0x000008, "Wrong alignment on FLocalizeRuntimeImage");
static_assert(sizeof(FLocalizeRuntimeImage) == 0x000030, "Wrong size on FLocalizeRuntimeImage");
static_assert(offsetof(FLocalizeRuntimeImage, Texture) == 0x000008, "Member 'FLocalizeRuntimeImage::Texture' has a wrong offset!");

// ScriptStruct UnionSystem.LoginCheckRequest
// 0x0088 (0x0088 - 0x0000)
struct FLoginCheckRequest final
{
public:
	class FString                                 identityProviderId;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 identityProviderEnv;                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountID;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 userName;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 eosIdToken;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 idToken;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RomVersion;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SavedataDeleted;                                   // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoginCheckRequest) == 0x000008, "Wrong alignment on FLoginCheckRequest");
static_assert(sizeof(FLoginCheckRequest) == 0x000088, "Wrong size on FLoginCheckRequest");
static_assert(offsetof(FLoginCheckRequest, identityProviderId) == 0x000000, "Member 'FLoginCheckRequest::identityProviderId' has a wrong offset!");
static_assert(offsetof(FLoginCheckRequest, identityProviderEnv) == 0x000010, "Member 'FLoginCheckRequest::identityProviderEnv' has a wrong offset!");
static_assert(offsetof(FLoginCheckRequest, AccountID) == 0x000020, "Member 'FLoginCheckRequest::AccountID' has a wrong offset!");
static_assert(offsetof(FLoginCheckRequest, userName) == 0x000030, "Member 'FLoginCheckRequest::userName' has a wrong offset!");
static_assert(offsetof(FLoginCheckRequest, PlatformUserId) == 0x000040, "Member 'FLoginCheckRequest::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FLoginCheckRequest, eosIdToken) == 0x000050, "Member 'FLoginCheckRequest::eosIdToken' has a wrong offset!");
static_assert(offsetof(FLoginCheckRequest, idToken) == 0x000060, "Member 'FLoginCheckRequest::idToken' has a wrong offset!");
static_assert(offsetof(FLoginCheckRequest, RomVersion) == 0x000070, "Member 'FLoginCheckRequest::RomVersion' has a wrong offset!");
static_assert(offsetof(FLoginCheckRequest, SavedataDeleted) == 0x000080, "Member 'FLoginCheckRequest::SavedataDeleted' has a wrong offset!");

// ScriptStruct UnionSystem.LoginCheckResponse
// 0x0090 (0x0090 - 0x0000)
struct FLoginCheckResponse final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 sessionUpdatedAt;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sessionExpirationTimeSec;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SecurityKey;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecurityIv;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 regionCode;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 displayCode;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 clientIpAddr;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         switchOnlineCode;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoginCheckResponse) == 0x000008, "Wrong alignment on FLoginCheckResponse");
static_assert(sizeof(FLoginCheckResponse) == 0x000090, "Wrong size on FLoginCheckResponse");
static_assert(offsetof(FLoginCheckResponse, SessionId) == 0x000000, "Member 'FLoginCheckResponse::SessionId' has a wrong offset!");
static_assert(offsetof(FLoginCheckResponse, sessionUpdatedAt) == 0x000010, "Member 'FLoginCheckResponse::sessionUpdatedAt' has a wrong offset!");
static_assert(offsetof(FLoginCheckResponse, sessionExpirationTimeSec) == 0x000020, "Member 'FLoginCheckResponse::sessionExpirationTimeSec' has a wrong offset!");
static_assert(offsetof(FLoginCheckResponse, SecurityKey) == 0x000028, "Member 'FLoginCheckResponse::SecurityKey' has a wrong offset!");
static_assert(offsetof(FLoginCheckResponse, SecurityIv) == 0x000038, "Member 'FLoginCheckResponse::SecurityIv' has a wrong offset!");
static_assert(offsetof(FLoginCheckResponse, UserId) == 0x000048, "Member 'FLoginCheckResponse::UserId' has a wrong offset!");
static_assert(offsetof(FLoginCheckResponse, regionCode) == 0x000058, "Member 'FLoginCheckResponse::regionCode' has a wrong offset!");
static_assert(offsetof(FLoginCheckResponse, displayCode) == 0x000068, "Member 'FLoginCheckResponse::displayCode' has a wrong offset!");
static_assert(offsetof(FLoginCheckResponse, clientIpAddr) == 0x000078, "Member 'FLoginCheckResponse::clientIpAddr' has a wrong offset!");
static_assert(offsetof(FLoginCheckResponse, switchOnlineCode) == 0x000088, "Member 'FLoginCheckResponse::switchOnlineCode' has a wrong offset!");

// ScriptStruct UnionSystem.AuraData
// 0x00B0 (0x00B8 - 0x0008)
struct FAuraData final : public FTableRowBase
{
public:
	EMachineAuraId                                MachineAuraID;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          EffectAsset;                                       // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectOptionParam;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AuraName;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLock;                                             // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              DialogTexture;                                     // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DialogTextCateogryName;                            // 0x0080(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DialogTextTitleMain;                               // 0x0090(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DialogTextTitleSub;                                // 0x00A0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAuraData) == 0x000008, "Wrong alignment on FAuraData");
static_assert(sizeof(FAuraData) == 0x0000B8, "Wrong size on FAuraData");
static_assert(offsetof(FAuraData, MachineAuraID) == 0x000008, "Member 'FAuraData::MachineAuraID' has a wrong offset!");
static_assert(offsetof(FAuraData, Enable) == 0x000009, "Member 'FAuraData::Enable' has a wrong offset!");
static_assert(offsetof(FAuraData, EffectAsset) == 0x000010, "Member 'FAuraData::EffectAsset' has a wrong offset!");
static_assert(offsetof(FAuraData, EffectOptionParam) == 0x000038, "Member 'FAuraData::EffectOptionParam' has a wrong offset!");
static_assert(offsetof(FAuraData, AuraName) == 0x000040, "Member 'FAuraData::AuraName' has a wrong offset!");
static_assert(offsetof(FAuraData, Price) == 0x000050, "Member 'FAuraData::Price' has a wrong offset!");
static_assert(offsetof(FAuraData, bLock) == 0x000054, "Member 'FAuraData::bLock' has a wrong offset!");
static_assert(offsetof(FAuraData, DialogTexture) == 0x000058, "Member 'FAuraData::DialogTexture' has a wrong offset!");
static_assert(offsetof(FAuraData, DialogTextCateogryName) == 0x000080, "Member 'FAuraData::DialogTextCateogryName' has a wrong offset!");
static_assert(offsetof(FAuraData, DialogTextTitleMain) == 0x000090, "Member 'FAuraData::DialogTextTitleMain' has a wrong offset!");
static_assert(offsetof(FAuraData, DialogTextTitleSub) == 0x0000A0, "Member 'FAuraData::DialogTextTitleSub' has a wrong offset!");
static_assert(offsetof(FAuraData, SortID) == 0x0000B0, "Member 'FAuraData::SortID' has a wrong offset!");

// ScriptStruct UnionSystem.MachineQualitySettings
// 0x001C (0x001C - 0x0000)
struct FMachineQualitySettings final
{
public:
	EVehicleMeshType                              MeshType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MeshMinLOD;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleEngineSoundType                       EngineSoundType;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectLODLevel;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceEffectLODLevel;                             // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnDriverActor;                                 // 0x0014(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnBodycutActor;                                // 0x0015(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleTireMark;                                  // 0x0016(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWheelDomainPosition;                           // 0x0017(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWheelDomainRotation;                           // 0x0018(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSurfaceSound;                               // 0x0019(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachineQualitySettings) == 0x000004, "Wrong alignment on FMachineQualitySettings");
static_assert(sizeof(FMachineQualitySettings) == 0x00001C, "Wrong size on FMachineQualitySettings");
static_assert(offsetof(FMachineQualitySettings, MeshType) == 0x000000, "Member 'FMachineQualitySettings::MeshType' has a wrong offset!");
static_assert(offsetof(FMachineQualitySettings, MeshMinLOD) == 0x000004, "Member 'FMachineQualitySettings::MeshMinLOD' has a wrong offset!");
static_assert(offsetof(FMachineQualitySettings, EngineSoundType) == 0x000008, "Member 'FMachineQualitySettings::EngineSoundType' has a wrong offset!");
static_assert(offsetof(FMachineQualitySettings, EffectLODLevel) == 0x00000C, "Member 'FMachineQualitySettings::EffectLODLevel' has a wrong offset!");
static_assert(offsetof(FMachineQualitySettings, SurfaceEffectLODLevel) == 0x000010, "Member 'FMachineQualitySettings::SurfaceEffectLODLevel' has a wrong offset!");
static_assert(offsetof(FMachineQualitySettings, bSpawnDriverActor) == 0x000014, "Member 'FMachineQualitySettings::bSpawnDriverActor' has a wrong offset!");
static_assert(offsetof(FMachineQualitySettings, bSpawnBodycutActor) == 0x000015, "Member 'FMachineQualitySettings::bSpawnBodycutActor' has a wrong offset!");
static_assert(offsetof(FMachineQualitySettings, bVisibleTireMark) == 0x000016, "Member 'FMachineQualitySettings::bVisibleTireMark' has a wrong offset!");
static_assert(offsetof(FMachineQualitySettings, bUseWheelDomainPosition) == 0x000017, "Member 'FMachineQualitySettings::bUseWheelDomainPosition' has a wrong offset!");
static_assert(offsetof(FMachineQualitySettings, bUseWheelDomainRotation) == 0x000018, "Member 'FMachineQualitySettings::bUseWheelDomainRotation' has a wrong offset!");
static_assert(offsetof(FMachineQualitySettings, bEnableSurfaceSound) == 0x000019, "Member 'FMachineQualitySettings::bEnableSurfaceSound' has a wrong offset!");

// ScriptStruct UnionSystem.MachineSettings
// 0x00B4 (0x00B4 - 0x0000)
struct FMachineSettings final
{
public:
	struct FMachinePostProcessSettings            PostProcessSettings[0x3];                          // 0x0000(0x0003)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMachineQualitySettings                PC[0x3];                                           // 0x000C(0x001C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FMachineQualitySettings                NonPC[0x3];                                        // 0x0060(0x001C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineSettings) == 0x000004, "Wrong alignment on FMachineSettings");
static_assert(sizeof(FMachineSettings) == 0x0000B4, "Wrong size on FMachineSettings");
static_assert(offsetof(FMachineSettings, PostProcessSettings) == 0x000000, "Member 'FMachineSettings::PostProcessSettings' has a wrong offset!");
static_assert(offsetof(FMachineSettings, PC) == 0x00000C, "Member 'FMachineSettings::PC' has a wrong offset!");
static_assert(offsetof(FMachineSettings, NonPC) == 0x000060, "Member 'FMachineSettings::NonPC' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMasterDataRequest
// 0x0010 (0x0010 - 0x0000)
struct FMasterDataGetMasterDataRequest final
{
public:
	TArray<class FString>                         masterDataNames;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGetMasterDataRequest) == 0x000008, "Wrong alignment on FMasterDataGetMasterDataRequest");
static_assert(sizeof(FMasterDataGetMasterDataRequest) == 0x000010, "Wrong size on FMasterDataGetMasterDataRequest");
static_assert(offsetof(FMasterDataGetMasterDataRequest, masterDataNames) == 0x000000, "Member 'FMasterDataGetMasterDataRequest::masterDataNames' has a wrong offset!");

// ScriptStruct UnionSystem.MasterDataGetMaintenanceScheduleResponse
// 0x0001 (0x0001 - 0x0000)
struct FMasterDataGetMaintenanceScheduleResponse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGetMaintenanceScheduleResponse) == 0x000001, "Wrong alignment on FMasterDataGetMaintenanceScheduleResponse");
static_assert(sizeof(FMasterDataGetMaintenanceScheduleResponse) == 0x000001, "Wrong size on FMasterDataGetMaintenanceScheduleResponse");

// ScriptStruct UnionSystem.MatchmakingSubscribeLegendCompeResponse
// 0x00A8 (0x00A8 - 0x0000)
struct FMatchmakingSubscribeLegendCompeResponse final
{
public:
	class FString                                 LobbyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ticketId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchmakingCommonResponse_Subscribe   subscribe;                                         // 0x0020(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingSubscribeLegendCompeResponse) == 0x000008, "Wrong alignment on FMatchmakingSubscribeLegendCompeResponse");
static_assert(sizeof(FMatchmakingSubscribeLegendCompeResponse) == 0x0000A8, "Wrong size on FMatchmakingSubscribeLegendCompeResponse");
static_assert(offsetof(FMatchmakingSubscribeLegendCompeResponse, LobbyId) == 0x000000, "Member 'FMatchmakingSubscribeLegendCompeResponse::LobbyId' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeLegendCompeResponse, ticketId) == 0x000010, "Member 'FMatchmakingSubscribeLegendCompeResponse::ticketId' has a wrong offset!");
static_assert(offsetof(FMatchmakingSubscribeLegendCompeResponse, subscribe) == 0x000020, "Member 'FMatchmakingSubscribeLegendCompeResponse::subscribe' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FestaPointRewardData
// 0x0020 (0x0020 - 0x0000)
struct FNetMasterData_FestaPointRewardData final
{
public:
	int32                                         pointRewardId;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         isNext;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNumber;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         itemType;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         itemNum;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FestaPointRewardData) == 0x000004, "Wrong alignment on FNetMasterData_FestaPointRewardData");
static_assert(sizeof(FNetMasterData_FestaPointRewardData) == 0x000020, "Wrong size on FNetMasterData_FestaPointRewardData");
static_assert(offsetof(FNetMasterData_FestaPointRewardData, pointRewardId) == 0x000000, "Member 'FNetMasterData_FestaPointRewardData::pointRewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRewardData, rewardId) == 0x000004, "Member 'FNetMasterData_FestaPointRewardData::rewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRewardData, rewardType) == 0x000008, "Member 'FNetMasterData_FestaPointRewardData::rewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRewardData, isNext) == 0x00000C, "Member 'FNetMasterData_FestaPointRewardData::isNext' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRewardData, rewardNumber) == 0x000010, "Member 'FNetMasterData_FestaPointRewardData::rewardNumber' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRewardData, itemType) == 0x000014, "Member 'FNetMasterData_FestaPointRewardData::itemType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRewardData, ItemId) == 0x000018, "Member 'FNetMasterData_FestaPointRewardData::ItemId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointRewardData, itemNum) == 0x00001C, "Member 'FNetMasterData_FestaPointRewardData::itemNum' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FestaPointTeamContribRingData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_FestaPointTeamContribRingData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint1;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint2;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint3;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint4;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FestaPointTeamContribRingData) == 0x000004, "Wrong alignment on FNetMasterData_FestaPointTeamContribRingData");
static_assert(sizeof(FNetMasterData_FestaPointTeamContribRingData) == 0x000014, "Wrong size on FNetMasterData_FestaPointTeamContribRingData");
static_assert(offsetof(FNetMasterData_FestaPointTeamContribRingData, ID) == 0x000000, "Member 'FNetMasterData_FestaPointTeamContribRingData::ID' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointTeamContribRingData, teamOrderPoint1) == 0x000004, "Member 'FNetMasterData_FestaPointTeamContribRingData::teamOrderPoint1' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointTeamContribRingData, teamOrderPoint2) == 0x000008, "Member 'FNetMasterData_FestaPointTeamContribRingData::teamOrderPoint2' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointTeamContribRingData, teamOrderPoint3) == 0x00000C, "Member 'FNetMasterData_FestaPointTeamContribRingData::teamOrderPoint3' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointTeamContribRingData, teamOrderPoint4) == 0x000010, "Member 'FNetMasterData_FestaPointTeamContribRingData::teamOrderPoint4' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FestaPointTeamWldData
// 0x0010 (0x0010 - 0x0000)
struct FNetMasterData_FestaPointTeamWldData final
{
public:
	int32                                         pointTeamWldId;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint1;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint2;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamOrderPoint3;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FestaPointTeamWldData) == 0x000004, "Wrong alignment on FNetMasterData_FestaPointTeamWldData");
static_assert(sizeof(FNetMasterData_FestaPointTeamWldData) == 0x000010, "Wrong size on FNetMasterData_FestaPointTeamWldData");
static_assert(offsetof(FNetMasterData_FestaPointTeamWldData, pointTeamWldId) == 0x000000, "Member 'FNetMasterData_FestaPointTeamWldData::pointTeamWldId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointTeamWldData, teamOrderPoint1) == 0x000004, "Member 'FNetMasterData_FestaPointTeamWldData::teamOrderPoint1' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointTeamWldData, teamOrderPoint2) == 0x000008, "Member 'FNetMasterData_FestaPointTeamWldData::teamOrderPoint2' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaPointTeamWldData, teamOrderPoint3) == 0x00000C, "Member 'FNetMasterData_FestaPointTeamWldData::teamOrderPoint3' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FestaTimeSceduleData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_FestaTimeSceduleData final
{
public:
	int32                                         timeSceduleId;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sequence;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSp;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         raceRuleId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         timeMinute;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FestaTimeSceduleData) == 0x000004, "Wrong alignment on FNetMasterData_FestaTimeSceduleData");
static_assert(sizeof(FNetMasterData_FestaTimeSceduleData) == 0x000014, "Wrong size on FNetMasterData_FestaTimeSceduleData");
static_assert(offsetof(FNetMasterData_FestaTimeSceduleData, timeSceduleId) == 0x000000, "Member 'FNetMasterData_FestaTimeSceduleData::timeSceduleId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaTimeSceduleData, Sequence) == 0x000004, "Member 'FNetMasterData_FestaTimeSceduleData::Sequence' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaTimeSceduleData, isSp) == 0x000008, "Member 'FNetMasterData_FestaTimeSceduleData::isSp' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaTimeSceduleData, raceRuleId) == 0x00000C, "Member 'FNetMasterData_FestaTimeSceduleData::raceRuleId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FestaTimeSceduleData, timeMinute) == 0x000010, "Member 'FNetMasterData_FestaTimeSceduleData::timeMinute' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_LegendCompeGradeRewardData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_LegendCompeGradeRewardData final
{
public:
	int32                                         gradeRewardId;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gradeValue;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_LegendCompeGradeRewardData) == 0x000004, "Wrong alignment on FNetMasterData_LegendCompeGradeRewardData");
static_assert(sizeof(FNetMasterData_LegendCompeGradeRewardData) == 0x000014, "Wrong size on FNetMasterData_LegendCompeGradeRewardData");
static_assert(offsetof(FNetMasterData_LegendCompeGradeRewardData, gradeRewardId) == 0x000000, "Member 'FNetMasterData_LegendCompeGradeRewardData::gradeRewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeGradeRewardData, gradeValue) == 0x000004, "Member 'FNetMasterData_LegendCompeGradeRewardData::gradeValue' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeGradeRewardData, rewardType) == 0x000008, "Member 'FNetMasterData_LegendCompeGradeRewardData::rewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeGradeRewardData, rewardId) == 0x00000C, "Member 'FNetMasterData_LegendCompeGradeRewardData::rewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeGradeRewardData, rewardNum) == 0x000010, "Member 'FNetMasterData_LegendCompeGradeRewardData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_LegendCompeRankTableData
// 0x0020 (0x0020 - 0x0000)
struct FNetMasterData_LegendCompeRankTableData final
{
public:
	int32                                         rankId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 rankValue;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rateValue;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNetMasterData_LegendCompeRankTableData) == 0x000008, "Wrong alignment on FNetMasterData_LegendCompeRankTableData");
static_assert(sizeof(FNetMasterData_LegendCompeRankTableData) == 0x000020, "Wrong size on FNetMasterData_LegendCompeRankTableData");
static_assert(offsetof(FNetMasterData_LegendCompeRankTableData, rankId) == 0x000000, "Member 'FNetMasterData_LegendCompeRankTableData::rankId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRankTableData, rankValue) == 0x000008, "Member 'FNetMasterData_LegendCompeRankTableData::rankValue' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRankTableData, rateValue) == 0x000018, "Member 'FNetMasterData_LegendCompeRankTableData::rateValue' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_LegendCompeRewardParticipateCountData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_LegendCompeRewardParticipateCountData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         participateCount;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_LegendCompeRewardParticipateCountData) == 0x000004, "Wrong alignment on FNetMasterData_LegendCompeRewardParticipateCountData");
static_assert(sizeof(FNetMasterData_LegendCompeRewardParticipateCountData) == 0x000014, "Wrong size on FNetMasterData_LegendCompeRewardParticipateCountData");
static_assert(offsetof(FNetMasterData_LegendCompeRewardParticipateCountData, ID) == 0x000000, "Member 'FNetMasterData_LegendCompeRewardParticipateCountData::ID' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardParticipateCountData, participateCount) == 0x000004, "Member 'FNetMasterData_LegendCompeRewardParticipateCountData::participateCount' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardParticipateCountData, rewardType) == 0x000008, "Member 'FNetMasterData_LegendCompeRewardParticipateCountData::rewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardParticipateCountData, rewardId) == 0x00000C, "Member 'FNetMasterData_LegendCompeRewardParticipateCountData::rewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeRewardParticipateCountData, rewardNum) == 0x000010, "Member 'FNetMasterData_LegendCompeRewardParticipateCountData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_LegendCompeUniqueRewardData
// 0x0014 (0x0014 - 0x0000)
struct FNetMasterData_LegendCompeUniqueRewardData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardPatternId;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rewardNum;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_LegendCompeUniqueRewardData) == 0x000004, "Wrong alignment on FNetMasterData_LegendCompeUniqueRewardData");
static_assert(sizeof(FNetMasterData_LegendCompeUniqueRewardData) == 0x000014, "Wrong size on FNetMasterData_LegendCompeUniqueRewardData");
static_assert(offsetof(FNetMasterData_LegendCompeUniqueRewardData, ID) == 0x000000, "Member 'FNetMasterData_LegendCompeUniqueRewardData::ID' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeUniqueRewardData, rewardPatternId) == 0x000004, "Member 'FNetMasterData_LegendCompeUniqueRewardData::rewardPatternId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeUniqueRewardData, rewardType) == 0x000008, "Member 'FNetMasterData_LegendCompeUniqueRewardData::rewardType' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeUniqueRewardData, rewardId) == 0x00000C, "Member 'FNetMasterData_LegendCompeUniqueRewardData::rewardId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_LegendCompeUniqueRewardData, rewardNum) == 0x000010, "Member 'FNetMasterData_LegendCompeUniqueRewardData::rewardNum' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FairPlayPointData
// 0x0010 (0x0010 - 0x0000)
struct FNetMasterData_FairPlayPointData final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lower;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         upper;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FairPlayPointData) == 0x000004, "Wrong alignment on FNetMasterData_FairPlayPointData");
static_assert(sizeof(FNetMasterData_FairPlayPointData) == 0x000010, "Wrong size on FNetMasterData_FairPlayPointData");
static_assert(offsetof(FNetMasterData_FairPlayPointData, Type) == 0x000000, "Member 'FNetMasterData_FairPlayPointData::Type' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FairPlayPointData, lower) == 0x000004, "Member 'FNetMasterData_FairPlayPointData::lower' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FairPlayPointData, upper) == 0x000008, "Member 'FNetMasterData_FairPlayPointData::upper' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FairPlayPointData, Num) == 0x00000C, "Member 'FNetMasterData_FairPlayPointData::Num' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_BannerData
// 0x0050 (0x0050 - 0x0000)
struct FNetMasterData_BannerData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          notice;                                            // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          afterEnd;                                          // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 changeTime1;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 changeTime2;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_BannerData) == 0x000008, "Wrong alignment on FNetMasterData_BannerData");
static_assert(sizeof(FNetMasterData_BannerData) == 0x000050, "Wrong size on FNetMasterData_BannerData");
static_assert(offsetof(FNetMasterData_BannerData, ID) == 0x000000, "Member 'FNetMasterData_BannerData::ID' has a wrong offset!");
static_assert(offsetof(FNetMasterData_BannerData, characterId) == 0x000004, "Member 'FNetMasterData_BannerData::characterId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_BannerData, Priority) == 0x000008, "Member 'FNetMasterData_BannerData::Priority' has a wrong offset!");
static_assert(offsetof(FNetMasterData_BannerData, notice) == 0x00000C, "Member 'FNetMasterData_BannerData::notice' has a wrong offset!");
static_assert(offsetof(FNetMasterData_BannerData, afterEnd) == 0x00000D, "Member 'FNetMasterData_BannerData::afterEnd' has a wrong offset!");
static_assert(offsetof(FNetMasterData_BannerData, StartTime) == 0x000010, "Member 'FNetMasterData_BannerData::StartTime' has a wrong offset!");
static_assert(offsetof(FNetMasterData_BannerData, changeTime1) == 0x000020, "Member 'FNetMasterData_BannerData::changeTime1' has a wrong offset!");
static_assert(offsetof(FNetMasterData_BannerData, changeTime2) == 0x000030, "Member 'FNetMasterData_BannerData::changeTime2' has a wrong offset!");
static_assert(offsetof(FNetMasterData_BannerData, endTime) == 0x000040, "Member 'FNetMasterData_BannerData::endTime' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_FreeDlcData
// 0x0028 (0x0028 - 0x0000)
struct FNetMasterData_FreeDlcData final
{
public:
	int32                                         dlcId;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_FreeDlcData) == 0x000008, "Wrong alignment on FNetMasterData_FreeDlcData");
static_assert(sizeof(FNetMasterData_FreeDlcData) == 0x000028, "Wrong size on FNetMasterData_FreeDlcData");
static_assert(offsetof(FNetMasterData_FreeDlcData, dlcId) == 0x000000, "Member 'FNetMasterData_FreeDlcData::dlcId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FreeDlcData, StartTime) == 0x000008, "Member 'FNetMasterData_FreeDlcData::StartTime' has a wrong offset!");
static_assert(offsetof(FNetMasterData_FreeDlcData, endTime) == 0x000018, "Member 'FNetMasterData_FreeDlcData::endTime' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_NewsData
// 0x0040 (0x0040 - 0x0000)
struct FNetMasterData_NewsData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         noticeId;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Category;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 endTime;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayTime;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_NewsData) == 0x000008, "Wrong alignment on FNetMasterData_NewsData");
static_assert(sizeof(FNetMasterData_NewsData) == 0x000040, "Wrong size on FNetMasterData_NewsData");
static_assert(offsetof(FNetMasterData_NewsData, ID) == 0x000000, "Member 'FNetMasterData_NewsData::ID' has a wrong offset!");
static_assert(offsetof(FNetMasterData_NewsData, noticeId) == 0x000004, "Member 'FNetMasterData_NewsData::noticeId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_NewsData, Category) == 0x000008, "Member 'FNetMasterData_NewsData::Category' has a wrong offset!");
static_assert(offsetof(FNetMasterData_NewsData, StartTime) == 0x000010, "Member 'FNetMasterData_NewsData::StartTime' has a wrong offset!");
static_assert(offsetof(FNetMasterData_NewsData, endTime) == 0x000020, "Member 'FNetMasterData_NewsData::endTime' has a wrong offset!");
static_assert(offsetof(FNetMasterData_NewsData, DisplayTime) == 0x000030, "Member 'FNetMasterData_NewsData::DisplayTime' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_ReleaseAuraData
// 0x0018 (0x0018 - 0x0000)
struct FNetMasterData_ReleaseAuraData final
{
public:
	int32                                         AuraId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_ReleaseAuraData) == 0x000008, "Wrong alignment on FNetMasterData_ReleaseAuraData");
static_assert(sizeof(FNetMasterData_ReleaseAuraData) == 0x000018, "Wrong size on FNetMasterData_ReleaseAuraData");
static_assert(offsetof(FNetMasterData_ReleaseAuraData, AuraId) == 0x000000, "Member 'FNetMasterData_ReleaseAuraData::AuraId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_ReleaseAuraData, releaseTime) == 0x000008, "Member 'FNetMasterData_ReleaseAuraData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_ReleaseCourseData
// 0x0018 (0x0018 - 0x0000)
struct FNetMasterData_ReleaseCourseData final
{
public:
	int32                                         courseId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_ReleaseCourseData) == 0x000008, "Wrong alignment on FNetMasterData_ReleaseCourseData");
static_assert(sizeof(FNetMasterData_ReleaseCourseData) == 0x000018, "Wrong size on FNetMasterData_ReleaseCourseData");
static_assert(offsetof(FNetMasterData_ReleaseCourseData, courseId) == 0x000000, "Member 'FNetMasterData_ReleaseCourseData::courseId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_ReleaseCourseData, releaseTime) == 0x000008, "Member 'FNetMasterData_ReleaseCourseData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_ReleaseDegreeData
// 0x0018 (0x0018 - 0x0000)
struct FNetMasterData_ReleaseDegreeData final
{
public:
	int32                                         degreeId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_ReleaseDegreeData) == 0x000008, "Wrong alignment on FNetMasterData_ReleaseDegreeData");
static_assert(sizeof(FNetMasterData_ReleaseDegreeData) == 0x000018, "Wrong size on FNetMasterData_ReleaseDegreeData");
static_assert(offsetof(FNetMasterData_ReleaseDegreeData, degreeId) == 0x000000, "Member 'FNetMasterData_ReleaseDegreeData::degreeId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_ReleaseDegreeData, releaseTime) == 0x000008, "Member 'FNetMasterData_ReleaseDegreeData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_ReleaseGadgetData
// 0x0018 (0x0018 - 0x0000)
struct FNetMasterData_ReleaseGadgetData final
{
public:
	int32                                         gadgetId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_ReleaseGadgetData) == 0x000008, "Wrong alignment on FNetMasterData_ReleaseGadgetData");
static_assert(sizeof(FNetMasterData_ReleaseGadgetData) == 0x000018, "Wrong size on FNetMasterData_ReleaseGadgetData");
static_assert(offsetof(FNetMasterData_ReleaseGadgetData, gadgetId) == 0x000000, "Member 'FNetMasterData_ReleaseGadgetData::gadgetId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_ReleaseGadgetData, releaseTime) == 0x000008, "Member 'FNetMasterData_ReleaseGadgetData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.NetMasterData_ReleaseRearPartsData
// 0x0018 (0x0018 - 0x0000)
struct FNetMasterData_ReleaseRearPartsData final
{
public:
	int32                                         RearPartsId;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 releaseTime;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMasterData_ReleaseRearPartsData) == 0x000008, "Wrong alignment on FNetMasterData_ReleaseRearPartsData");
static_assert(sizeof(FNetMasterData_ReleaseRearPartsData) == 0x000018, "Wrong size on FNetMasterData_ReleaseRearPartsData");
static_assert(offsetof(FNetMasterData_ReleaseRearPartsData, RearPartsId) == 0x000000, "Member 'FNetMasterData_ReleaseRearPartsData::RearPartsId' has a wrong offset!");
static_assert(offsetof(FNetMasterData_ReleaseRearPartsData, releaseTime) == 0x000008, "Member 'FNetMasterData_ReleaseRearPartsData::releaseTime' has a wrong offset!");

// ScriptStruct UnionSystem.AppLocalNetMasterData
// 0x02C0 (0x02C0 - 0x0000)
struct FAppLocalNetMasterData final
{
public:
	TArray<struct FNetMasterData_FestaData>       festaData;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FestaCourseLotteryData> FestaCourseLotteryData;                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FestaPointBonusData> FestaPointBonusData;                           // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FestaPointRaceOrderData> FestaPointRaceOrderData;                   // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FestaPointRewardData> FestaPointRewardData;                         // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FestaPointRewardConditionsData> FestaPointRewardConditionsData;     // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FestaPointSetData> FestaPointSetData;                               // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FestaPointTeamContribAttackHitData> FestaPointTeamContribAttackHitData; // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FestaPointTeamContribRingData> FestaPointTeamContribRingData;       // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FestaPointTeamWldData> FestaPointTeamWldData;                       // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FestaRankingRewardData> FestaRankingRewardData;                     // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FestaRoundRewardData> FestaRoundRewardData;                         // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FestaTimeSceduleData> FestaTimeSceduleData;                         // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_LegendCompeData> LegendCompeData;                                   // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_LegendCompeGradeTableData> LegendCompeGradeTableData;               // 0x00E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_LegendCompeGradeRewardData> LegendCompeGradeRewardData;             // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_LegendCompeRankingRewardData> LegendCompeRankingRewardData;         // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_LegendCompeRankTableData> LegendCompeRankTableData;                 // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_LegendCompeRewardData> LegendCompeRewardData;                       // 0x0120(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_LegendCompeRewardFirstCountData> LegendCompeRewardFirstCountData;   // 0x0130(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_LegendCompeRewardParticipateCountData> LegendCompeRewardParticipateCountData; // 0x0140(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_LegendCompeRewardRaceCountData> LegendCompeRewardRaceCountData;     // 0x0150(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_LegendCompeUniqueRewardData> LegendCompeUniqueRewardData;           // 0x0160(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_RankMatchRankTableData> RankMatchRankTableData;                     // 0x0170(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FairPlayPointData> FairPlayPointData;                               // 0x0180(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_BanReleaseData>  BanReleaseData;                                    // 0x0190(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_GeneralizedParameterData> GeneralizedParameterData;                 // 0x01A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_BannerData>      BannerData;                                        // 0x01B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FreeDlcData>     FreeDlcData;                                       // 0x01C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_FreeContentData> FreeContentData;                                   // 0x01D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_DlcTeaserData>   DlcTeaserData;                                     // 0x01E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_NewsData>        NewsData;                                          // 0x01F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_ReleaseAuraData> ReleaseAuraData;                                   // 0x0200(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_ReleaseCharacterData> ReleaseCharacterData;                         // 0x0210(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_ReleaseDegreeData> ReleaseDegreeData;                               // 0x0220(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_ReleaseFrontPartsData> ReleaseFrontPartsData;                       // 0x0230(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_ReleaseGadgetData> ReleaseGadgetData;                               // 0x0240(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_ReleaseHornData> ReleaseHornData;                                   // 0x0250(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_ReleaseRearPartsData> ReleaseRearPartsData;                         // 0x0260(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_ReleaseStickerData> ReleaseStickerData;                             // 0x0270(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_ReleaseTirePartsData> ReleaseTirePartsData;                         // 0x0280(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_ReleaseCourseData> ReleaseCourseData;                               // 0x0290(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_ReleaseVersionData> ReleaseVersionData;                             // 0x02A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMasterData_CourseSettingData> CourseSettingData;                               // 0x02B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppLocalNetMasterData) == 0x000008, "Wrong alignment on FAppLocalNetMasterData");
static_assert(sizeof(FAppLocalNetMasterData) == 0x0002C0, "Wrong size on FAppLocalNetMasterData");
static_assert(offsetof(FAppLocalNetMasterData, festaData) == 0x000000, "Member 'FAppLocalNetMasterData::festaData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FestaCourseLotteryData) == 0x000010, "Member 'FAppLocalNetMasterData::FestaCourseLotteryData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FestaPointBonusData) == 0x000020, "Member 'FAppLocalNetMasterData::FestaPointBonusData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FestaPointRaceOrderData) == 0x000030, "Member 'FAppLocalNetMasterData::FestaPointRaceOrderData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FestaPointRewardData) == 0x000040, "Member 'FAppLocalNetMasterData::FestaPointRewardData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FestaPointRewardConditionsData) == 0x000050, "Member 'FAppLocalNetMasterData::FestaPointRewardConditionsData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FestaPointSetData) == 0x000060, "Member 'FAppLocalNetMasterData::FestaPointSetData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FestaPointTeamContribAttackHitData) == 0x000070, "Member 'FAppLocalNetMasterData::FestaPointTeamContribAttackHitData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FestaPointTeamContribRingData) == 0x000080, "Member 'FAppLocalNetMasterData::FestaPointTeamContribRingData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FestaPointTeamWldData) == 0x000090, "Member 'FAppLocalNetMasterData::FestaPointTeamWldData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FestaRankingRewardData) == 0x0000A0, "Member 'FAppLocalNetMasterData::FestaRankingRewardData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FestaRoundRewardData) == 0x0000B0, "Member 'FAppLocalNetMasterData::FestaRoundRewardData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FestaTimeSceduleData) == 0x0000C0, "Member 'FAppLocalNetMasterData::FestaTimeSceduleData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, LegendCompeData) == 0x0000D0, "Member 'FAppLocalNetMasterData::LegendCompeData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, LegendCompeGradeTableData) == 0x0000E0, "Member 'FAppLocalNetMasterData::LegendCompeGradeTableData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, LegendCompeGradeRewardData) == 0x0000F0, "Member 'FAppLocalNetMasterData::LegendCompeGradeRewardData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, LegendCompeRankingRewardData) == 0x000100, "Member 'FAppLocalNetMasterData::LegendCompeRankingRewardData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, LegendCompeRankTableData) == 0x000110, "Member 'FAppLocalNetMasterData::LegendCompeRankTableData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, LegendCompeRewardData) == 0x000120, "Member 'FAppLocalNetMasterData::LegendCompeRewardData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, LegendCompeRewardFirstCountData) == 0x000130, "Member 'FAppLocalNetMasterData::LegendCompeRewardFirstCountData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, LegendCompeRewardParticipateCountData) == 0x000140, "Member 'FAppLocalNetMasterData::LegendCompeRewardParticipateCountData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, LegendCompeRewardRaceCountData) == 0x000150, "Member 'FAppLocalNetMasterData::LegendCompeRewardRaceCountData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, LegendCompeUniqueRewardData) == 0x000160, "Member 'FAppLocalNetMasterData::LegendCompeUniqueRewardData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, RankMatchRankTableData) == 0x000170, "Member 'FAppLocalNetMasterData::RankMatchRankTableData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FairPlayPointData) == 0x000180, "Member 'FAppLocalNetMasterData::FairPlayPointData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, BanReleaseData) == 0x000190, "Member 'FAppLocalNetMasterData::BanReleaseData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, GeneralizedParameterData) == 0x0001A0, "Member 'FAppLocalNetMasterData::GeneralizedParameterData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, BannerData) == 0x0001B0, "Member 'FAppLocalNetMasterData::BannerData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FreeDlcData) == 0x0001C0, "Member 'FAppLocalNetMasterData::FreeDlcData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, FreeContentData) == 0x0001D0, "Member 'FAppLocalNetMasterData::FreeContentData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, DlcTeaserData) == 0x0001E0, "Member 'FAppLocalNetMasterData::DlcTeaserData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, NewsData) == 0x0001F0, "Member 'FAppLocalNetMasterData::NewsData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, ReleaseAuraData) == 0x000200, "Member 'FAppLocalNetMasterData::ReleaseAuraData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, ReleaseCharacterData) == 0x000210, "Member 'FAppLocalNetMasterData::ReleaseCharacterData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, ReleaseDegreeData) == 0x000220, "Member 'FAppLocalNetMasterData::ReleaseDegreeData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, ReleaseFrontPartsData) == 0x000230, "Member 'FAppLocalNetMasterData::ReleaseFrontPartsData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, ReleaseGadgetData) == 0x000240, "Member 'FAppLocalNetMasterData::ReleaseGadgetData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, ReleaseHornData) == 0x000250, "Member 'FAppLocalNetMasterData::ReleaseHornData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, ReleaseRearPartsData) == 0x000260, "Member 'FAppLocalNetMasterData::ReleaseRearPartsData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, ReleaseStickerData) == 0x000270, "Member 'FAppLocalNetMasterData::ReleaseStickerData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, ReleaseTirePartsData) == 0x000280, "Member 'FAppLocalNetMasterData::ReleaseTirePartsData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, ReleaseCourseData) == 0x000290, "Member 'FAppLocalNetMasterData::ReleaseCourseData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, ReleaseVersionData) == 0x0002A0, "Member 'FAppLocalNetMasterData::ReleaseVersionData' has a wrong offset!");
static_assert(offsetof(FAppLocalNetMasterData, CourseSettingData) == 0x0002B0, "Member 'FAppLocalNetMasterData::CourseSettingData' has a wrong offset!");

// ScriptStruct UnionSystem.OntSaveOntParticipantUserRequest
// 0x0001 (0x0001 - 0x0000)
struct FOntSaveOntParticipantUserRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOntSaveOntParticipantUserRequest) == 0x000001, "Wrong alignment on FOntSaveOntParticipantUserRequest");
static_assert(sizeof(FOntSaveOntParticipantUserRequest) == 0x000001, "Wrong size on FOntSaveOntParticipantUserRequest");

// ScriptStruct UnionSystem.OntSaveOntParticipantUserResponse
// 0x0001 (0x0001 - 0x0000)
struct FOntSaveOntParticipantUserResponse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOntSaveOntParticipantUserResponse) == 0x000001, "Wrong alignment on FOntSaveOntParticipantUserResponse");
static_assert(sizeof(FOntSaveOntParticipantUserResponse) == 0x000001, "Wrong size on FOntSaveOntParticipantUserResponse");

// ScriptStruct UnionSystem.OperationSaveOperatorReportRequest
// 0x0030 (0x0030 - 0x0000)
struct FOperationSaveOperatorReportRequest final
{
public:
	class FString                                 TargetUserId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         reasonId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameMode;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 entryRaceId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isTarget;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOperationSaveOperatorReportRequest) == 0x000008, "Wrong alignment on FOperationSaveOperatorReportRequest");
static_assert(sizeof(FOperationSaveOperatorReportRequest) == 0x000030, "Wrong size on FOperationSaveOperatorReportRequest");
static_assert(offsetof(FOperationSaveOperatorReportRequest, TargetUserId) == 0x000000, "Member 'FOperationSaveOperatorReportRequest::TargetUserId' has a wrong offset!");
static_assert(offsetof(FOperationSaveOperatorReportRequest, reasonId) == 0x000010, "Member 'FOperationSaveOperatorReportRequest::reasonId' has a wrong offset!");
static_assert(offsetof(FOperationSaveOperatorReportRequest, GameMode) == 0x000014, "Member 'FOperationSaveOperatorReportRequest::GameMode' has a wrong offset!");
static_assert(offsetof(FOperationSaveOperatorReportRequest, entryRaceId) == 0x000018, "Member 'FOperationSaveOperatorReportRequest::entryRaceId' has a wrong offset!");
static_assert(offsetof(FOperationSaveOperatorReportRequest, isTarget) == 0x000028, "Member 'FOperationSaveOperatorReportRequest::isTarget' has a wrong offset!");

// ScriptStruct UnionSystem.OperationSaveOperatorReportResponse
// 0x0010 (0x0010 - 0x0000)
struct FOperationSaveOperatorReportResponse final
{
public:
	class FString                                 reportId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOperationSaveOperatorReportResponse) == 0x000008, "Wrong alignment on FOperationSaveOperatorReportResponse");
static_assert(sizeof(FOperationSaveOperatorReportResponse) == 0x000010, "Wrong size on FOperationSaveOperatorReportResponse");
static_assert(offsetof(FOperationSaveOperatorReportResponse, reportId) == 0x000000, "Member 'FOperationSaveOperatorReportResponse::reportId' has a wrong offset!");

// ScriptStruct UnionSystem.OperationSaveAutoReportResponse
// 0x0010 (0x0010 - 0x0000)
struct FOperationSaveAutoReportResponse final
{
public:
	class FString                                 reportId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOperationSaveAutoReportResponse) == 0x000008, "Wrong alignment on FOperationSaveAutoReportResponse");
static_assert(sizeof(FOperationSaveAutoReportResponse) == 0x000010, "Wrong size on FOperationSaveAutoReportResponse");
static_assert(offsetof(FOperationSaveAutoReportResponse, reportId) == 0x000000, "Member 'FOperationSaveAutoReportResponse::reportId' has a wrong offset!");

// ScriptStruct UnionSystem.OptionRaceSettings
// 0x000A (0x000A - 0x0000)
struct FOptionRaceSettings final
{
public:
	ERaceCameraType                               RaceCamera;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFPS;                                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamRankAndMap                               TeamRank;                                          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemInfoVisible                              ItemInfo;                                          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRaceSerif;                                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriftAndTrick;                                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGadget;                                           // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRingAndMeter;                                     // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRank;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bItemSlot;                                         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionRaceSettings) == 0x000001, "Wrong alignment on FOptionRaceSettings");
static_assert(sizeof(FOptionRaceSettings) == 0x00000A, "Wrong size on FOptionRaceSettings");
static_assert(offsetof(FOptionRaceSettings, RaceCamera) == 0x000000, "Member 'FOptionRaceSettings::RaceCamera' has a wrong offset!");
static_assert(offsetof(FOptionRaceSettings, bFPS) == 0x000001, "Member 'FOptionRaceSettings::bFPS' has a wrong offset!");
static_assert(offsetof(FOptionRaceSettings, TeamRank) == 0x000002, "Member 'FOptionRaceSettings::TeamRank' has a wrong offset!");
static_assert(offsetof(FOptionRaceSettings, ItemInfo) == 0x000003, "Member 'FOptionRaceSettings::ItemInfo' has a wrong offset!");
static_assert(offsetof(FOptionRaceSettings, bRaceSerif) == 0x000004, "Member 'FOptionRaceSettings::bRaceSerif' has a wrong offset!");
static_assert(offsetof(FOptionRaceSettings, bDriftAndTrick) == 0x000005, "Member 'FOptionRaceSettings::bDriftAndTrick' has a wrong offset!");
static_assert(offsetof(FOptionRaceSettings, bGadget) == 0x000006, "Member 'FOptionRaceSettings::bGadget' has a wrong offset!");
static_assert(offsetof(FOptionRaceSettings, bRingAndMeter) == 0x000007, "Member 'FOptionRaceSettings::bRingAndMeter' has a wrong offset!");
static_assert(offsetof(FOptionRaceSettings, bRank) == 0x000008, "Member 'FOptionRaceSettings::bRank' has a wrong offset!");
static_assert(offsetof(FOptionRaceSettings, bItemSlot) == 0x000009, "Member 'FOptionRaceSettings::bItemSlot' has a wrong offset!");

// ScriptStruct UnionSystem.GraphicsSettings
// 0x0018 (0x0018 - 0x0000)
struct FGraphicsSettings final
{
public:
	uint8                                         _ScreenBrightness;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGraphicMode                                  _GraphicMode;                                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        _ResolutionSizeX;                                  // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        _ResolutionSizeY;                                  // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFullscreenMode                               _FullscreenMode;                                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        _UseDisplayId;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _VSync;                                            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFrameRateLimit                               _FrameRateLimit;                                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGraphicQualityPreset                         _GraphicQualityPreset;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERenderingScale                               _RenderingScale;                                   // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModelQuality                                 _ModelQuality;                                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShadowQuality                                _ShadowQuality;                                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAntiAliasMethod                              _AntiAliasMethod;                                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReflectionQuality                            _ReflectionQuality;                                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _AmbientOcclusion;                                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _Blur;                                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _AcceptsPromotions;                                // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGraphicsSettings) == 0x000004, "Wrong alignment on FGraphicsSettings");
static_assert(sizeof(FGraphicsSettings) == 0x000018, "Wrong size on FGraphicsSettings");
static_assert(offsetof(FGraphicsSettings, _ScreenBrightness) == 0x000000, "Member 'FGraphicsSettings::_ScreenBrightness' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _GraphicMode) == 0x000001, "Member 'FGraphicsSettings::_GraphicMode' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _ResolutionSizeX) == 0x000002, "Member 'FGraphicsSettings::_ResolutionSizeX' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _ResolutionSizeY) == 0x000004, "Member 'FGraphicsSettings::_ResolutionSizeY' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _FullscreenMode) == 0x000006, "Member 'FGraphicsSettings::_FullscreenMode' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _UseDisplayId) == 0x000008, "Member 'FGraphicsSettings::_UseDisplayId' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _VSync) == 0x00000C, "Member 'FGraphicsSettings::_VSync' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _FrameRateLimit) == 0x00000D, "Member 'FGraphicsSettings::_FrameRateLimit' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _GraphicQualityPreset) == 0x00000E, "Member 'FGraphicsSettings::_GraphicQualityPreset' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _RenderingScale) == 0x00000F, "Member 'FGraphicsSettings::_RenderingScale' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _ModelQuality) == 0x000010, "Member 'FGraphicsSettings::_ModelQuality' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _ShadowQuality) == 0x000011, "Member 'FGraphicsSettings::_ShadowQuality' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _AntiAliasMethod) == 0x000012, "Member 'FGraphicsSettings::_AntiAliasMethod' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _ReflectionQuality) == 0x000013, "Member 'FGraphicsSettings::_ReflectionQuality' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _AmbientOcclusion) == 0x000014, "Member 'FGraphicsSettings::_AmbientOcclusion' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _Blur) == 0x000015, "Member 'FGraphicsSettings::_Blur' has a wrong offset!");
static_assert(offsetof(FGraphicsSettings, _AcceptsPromotions) == 0x000016, "Member 'FGraphicsSettings::_AcceptsPromotions' has a wrong offset!");

// ScriptStruct UnionSystem.OptionAudioSettings
// 0x0010 (0x0010 - 0x0000)
struct FOptionAudioSettings final
{
public:
	float                                         MasterVolume;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BGMVolume;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SEVolume;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceVolume;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionAudioSettings) == 0x000004, "Wrong alignment on FOptionAudioSettings");
static_assert(sizeof(FOptionAudioSettings) == 0x000010, "Wrong size on FOptionAudioSettings");
static_assert(offsetof(FOptionAudioSettings, MasterVolume) == 0x000000, "Member 'FOptionAudioSettings::MasterVolume' has a wrong offset!");
static_assert(offsetof(FOptionAudioSettings, BGMVolume) == 0x000004, "Member 'FOptionAudioSettings::BGMVolume' has a wrong offset!");
static_assert(offsetof(FOptionAudioSettings, SEVolume) == 0x000008, "Member 'FOptionAudioSettings::SEVolume' has a wrong offset!");
static_assert(offsetof(FOptionAudioSettings, VoiceVolume) == 0x00000C, "Member 'FOptionAudioSettings::VoiceVolume' has a wrong offset!");

// ScriptStruct UnionSystem.CRM_UnionParameter
// 0x0068 (0x0068 - 0x0000)
struct FCRM_UnionParameter final
{
public:
	int32                                         ParameterType;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueInteger;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ValueString;                                       // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ValueFloat;                                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ValueArrayInteger;                                 // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ValueArrayString;                                  // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ValueArrayFloat;                                   // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRM_UnionParameter) == 0x000008, "Wrong alignment on FCRM_UnionParameter");
static_assert(sizeof(FCRM_UnionParameter) == 0x000068, "Wrong size on FCRM_UnionParameter");
static_assert(offsetof(FCRM_UnionParameter, ParameterType) == 0x000000, "Member 'FCRM_UnionParameter::ParameterType' has a wrong offset!");
static_assert(offsetof(FCRM_UnionParameter, Key) == 0x000008, "Member 'FCRM_UnionParameter::Key' has a wrong offset!");
static_assert(offsetof(FCRM_UnionParameter, ValueInteger) == 0x000018, "Member 'FCRM_UnionParameter::ValueInteger' has a wrong offset!");
static_assert(offsetof(FCRM_UnionParameter, ValueString) == 0x000020, "Member 'FCRM_UnionParameter::ValueString' has a wrong offset!");
static_assert(offsetof(FCRM_UnionParameter, ValueFloat) == 0x000030, "Member 'FCRM_UnionParameter::ValueFloat' has a wrong offset!");
static_assert(offsetof(FCRM_UnionParameter, ValueArrayInteger) == 0x000038, "Member 'FCRM_UnionParameter::ValueArrayInteger' has a wrong offset!");
static_assert(offsetof(FCRM_UnionParameter, ValueArrayString) == 0x000048, "Member 'FCRM_UnionParameter::ValueArrayString' has a wrong offset!");
static_assert(offsetof(FCRM_UnionParameter, ValueArrayFloat) == 0x000058, "Member 'FCRM_UnionParameter::ValueArrayFloat' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSystem
// 0x0028 (0x0028 - 0x0000)
struct FPlayLogSystem final
{
public:
	struct FDateTime                              Stamp;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 UUID;                                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         Cache;                                             // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSystem) == 0x000008, "Wrong alignment on FPlayLogSystem");
static_assert(sizeof(FPlayLogSystem) == 0x000028, "Wrong size on FPlayLogSystem");
static_assert(offsetof(FPlayLogSystem, Stamp) == 0x000000, "Member 'FPlayLogSystem::Stamp' has a wrong offset!");
static_assert(offsetof(FPlayLogSystem, UUID) == 0x000008, "Member 'FPlayLogSystem::UUID' has a wrong offset!");
static_assert(offsetof(FPlayLogSystem, Cache) == 0x000018, "Member 'FPlayLogSystem::Cache' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameProgressGrandprix
// 0x012C (0x012C - 0x0000)
struct FPlayLogSaveGameProgressGrandprix final
{
public:
	struct FPlayLogSpeedSelectPlayCount           SpeedSelectClear[0xF];                             // 0x0000(0x0014)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSaveGameProgressGrandprix) == 0x000004, "Wrong alignment on FPlayLogSaveGameProgressGrandprix");
static_assert(sizeof(FPlayLogSaveGameProgressGrandprix) == 0x00012C, "Wrong size on FPlayLogSaveGameProgressGrandprix");
static_assert(offsetof(FPlayLogSaveGameProgressGrandprix, SpeedSelectClear) == 0x000000, "Member 'FPlayLogSaveGameProgressGrandprix::SpeedSelectClear' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameProgressParty
// 0x0154 (0x0154 - 0x0000)
struct FPlayLogSaveGameProgressParty final
{
public:
	struct FPlayLogSpeedSelectPlayCount           SpeedSelect[0x11];                                 // 0x0000(0x0014)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSaveGameProgressParty) == 0x000004, "Wrong alignment on FPlayLogSaveGameProgressParty");
static_assert(sizeof(FPlayLogSaveGameProgressParty) == 0x000154, "Wrong size on FPlayLogSaveGameProgressParty");
static_assert(offsetof(FPlayLogSaveGameProgressParty, SpeedSelect) == 0x000000, "Member 'FPlayLogSaveGameProgressParty::SpeedSelect' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameCharacter
// 0x0DE8 (0x0DE8 - 0x0000)
struct FPlayLogSaveGameCharacter final
{
public:
	struct FPlayLogSaveGameCharacterData          Data[0xA];                                         // 0x0000(0x0164)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSaveGameCharacter) == 0x000004, "Wrong alignment on FPlayLogSaveGameCharacter");
static_assert(sizeof(FPlayLogSaveGameCharacter) == 0x000DE8, "Wrong size on FPlayLogSaveGameCharacter");
static_assert(offsetof(FPlayLogSaveGameCharacter, Data) == 0x000000, "Member 'FPlayLogSaveGameCharacter::Data' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameMachineData
// 0x0960 (0x0960 - 0x0000)
struct FPlayLogSaveGameMachineData final
{
public:
	int32                                         UseCountBase[0x96];                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UseCountCustomFront[0x96];                         // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UseCountCustomRear[0x96];                          // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UseCountCustomUnit[0x96];                          // 0x0708(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSaveGameMachineData) == 0x000004, "Wrong alignment on FPlayLogSaveGameMachineData");
static_assert(sizeof(FPlayLogSaveGameMachineData) == 0x000960, "Wrong size on FPlayLogSaveGameMachineData");
static_assert(offsetof(FPlayLogSaveGameMachineData, UseCountBase) == 0x000000, "Member 'FPlayLogSaveGameMachineData::UseCountBase' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameMachineData, UseCountCustomFront) == 0x000258, "Member 'FPlayLogSaveGameMachineData::UseCountCustomFront' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameMachineData, UseCountCustomRear) == 0x0004B0, "Member 'FPlayLogSaveGameMachineData::UseCountCustomRear' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameMachineData, UseCountCustomUnit) == 0x000708, "Member 'FPlayLogSaveGameMachineData::UseCountCustomUnit' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameMachine
// 0x6720 (0x6720 - 0x0000)
struct FPlayLogSaveGameMachine final
{
public:
	struct FPlayLogSaveGameMachineData            Data[0xB];                                         // 0x0000(0x0960)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSaveGameMachine) == 0x000004, "Wrong alignment on FPlayLogSaveGameMachine");
static_assert(sizeof(FPlayLogSaveGameMachine) == 0x006720, "Wrong size on FPlayLogSaveGameMachine");
static_assert(offsetof(FPlayLogSaveGameMachine, Data) == 0x000000, "Member 'FPlayLogSaveGameMachine::Data' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameGrandprix
// 0x0258 (0x0258 - 0x0000)
struct FPlayLogSaveGameGrandprix final
{
public:
	struct FPlayLogRanking                        Ranking;                                           // 0x0000(0x0018)(NativeAccessSpecifierPrivate)
	struct FPlayLogOption                         Option;                                            // 0x0018(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FPlayLogSpeedSelectPlayCount           SpeedSelect[0xF];                                  // 0x0038(0x0014)(NoDestructor, NativeAccessSpecifierPrivate)
	int32                                         TicketContinueCount[0x3C];                         // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayLogSaveGameGrandprix) == 0x000008, "Wrong alignment on FPlayLogSaveGameGrandprix");
static_assert(sizeof(FPlayLogSaveGameGrandprix) == 0x000258, "Wrong size on FPlayLogSaveGameGrandprix");
static_assert(offsetof(FPlayLogSaveGameGrandprix, Ranking) == 0x000000, "Member 'FPlayLogSaveGameGrandprix::Ranking' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameGrandprix, Option) == 0x000018, "Member 'FPlayLogSaveGameGrandprix::Option' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameGrandprix, SpeedSelect) == 0x000038, "Member 'FPlayLogSaveGameGrandprix::SpeedSelect' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameGrandprix, TicketContinueCount) == 0x000164, "Member 'FPlayLogSaveGameGrandprix::TicketContinueCount' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameTimeTrial
// 0x0EB8 (0x0EB8 - 0x0000)
struct FPlayLogSaveGameTimeTrial final
{
public:
	int32                                         SonicSpeedPlayCount[0x5E];                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SonicSpeedTimeRecord[0x5E];                        // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SonicSpeedARankTime[0x5E];                         // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SonicSpeedARankFlag[0x5E];                         // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SuperSonicSpeedCount[0x5E];                        // 0x05E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SuperSonicSpeedTimeRecord[0x5E];                   // 0x0758(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SuperSonicSpeedARankTime[0x5E];                    // 0x08D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SuperSonicSpeedARankFlag[0x5E];                    // 0x0A48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         GhostCount[0x2];                                   // 0x0BC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SonicSpeedARankCount[0x5E];                        // 0x0BC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SuperSonicSpeedARankCount[0x5E];                   // 0x0D40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSaveGameTimeTrial) == 0x000004, "Wrong alignment on FPlayLogSaveGameTimeTrial");
static_assert(sizeof(FPlayLogSaveGameTimeTrial) == 0x000EB8, "Wrong size on FPlayLogSaveGameTimeTrial");
static_assert(offsetof(FPlayLogSaveGameTimeTrial, SonicSpeedPlayCount) == 0x000000, "Member 'FPlayLogSaveGameTimeTrial::SonicSpeedPlayCount' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameTimeTrial, SonicSpeedTimeRecord) == 0x000178, "Member 'FPlayLogSaveGameTimeTrial::SonicSpeedTimeRecord' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameTimeTrial, SonicSpeedARankTime) == 0x0002F0, "Member 'FPlayLogSaveGameTimeTrial::SonicSpeedARankTime' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameTimeTrial, SonicSpeedARankFlag) == 0x000468, "Member 'FPlayLogSaveGameTimeTrial::SonicSpeedARankFlag' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameTimeTrial, SuperSonicSpeedCount) == 0x0005E0, "Member 'FPlayLogSaveGameTimeTrial::SuperSonicSpeedCount' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameTimeTrial, SuperSonicSpeedTimeRecord) == 0x000758, "Member 'FPlayLogSaveGameTimeTrial::SuperSonicSpeedTimeRecord' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameTimeTrial, SuperSonicSpeedARankTime) == 0x0008D0, "Member 'FPlayLogSaveGameTimeTrial::SuperSonicSpeedARankTime' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameTimeTrial, SuperSonicSpeedARankFlag) == 0x000A48, "Member 'FPlayLogSaveGameTimeTrial::SuperSonicSpeedARankFlag' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameTimeTrial, GhostCount) == 0x000BC0, "Member 'FPlayLogSaveGameTimeTrial::GhostCount' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameTimeTrial, SonicSpeedARankCount) == 0x000BC8, "Member 'FPlayLogSaveGameTimeTrial::SonicSpeedARankCount' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameTimeTrial, SuperSonicSpeedARankCount) == 0x000D40, "Member 'FPlayLogSaveGameTimeTrial::SuperSonicSpeedARankCount' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameEventFesta
// 0x0020 (0x0020 - 0x0000)
struct FPlayLogSaveGameEventFesta final
{
public:
	struct FPlayLogRanking                        Ranking;                                           // 0x0000(0x0018)(NativeAccessSpecifierPrivate)
	int32                                         festaPoint;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayLogSaveGameEventFesta) == 0x000008, "Wrong alignment on FPlayLogSaveGameEventFesta");
static_assert(sizeof(FPlayLogSaveGameEventFesta) == 0x000020, "Wrong size on FPlayLogSaveGameEventFesta");
static_assert(offsetof(FPlayLogSaveGameEventFesta, Ranking) == 0x000000, "Member 'FPlayLogSaveGameEventFesta::Ranking' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameEventFesta, festaPoint) == 0x000018, "Member 'FPlayLogSaveGameEventFesta::festaPoint' has a wrong offset!");

// ScriptStruct UnionSystem.PlayLogSaveGameMode
// 0x0200 (0x0200 - 0x0000)
struct FPlayLogSaveGameMode final
{
public:
	class FString                                 PlayStartDay[0xA];                                 // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TotalPlayTime[0xA];                                // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TotalPlayCount[0xA];                               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DailyPlayTime[0xA];                                // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DailyPlayCount[0xA];                               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ModePlayStartDay[0xA];                             // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         GameLogin;                                         // 0x01E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         Sequence;                                          // 0x01F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlayLogSaveGameMode) == 0x000008, "Wrong alignment on FPlayLogSaveGameMode");
static_assert(sizeof(FPlayLogSaveGameMode) == 0x000200, "Wrong size on FPlayLogSaveGameMode");
static_assert(offsetof(FPlayLogSaveGameMode, PlayStartDay) == 0x000000, "Member 'FPlayLogSaveGameMode::PlayStartDay' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameMode, TotalPlayTime) == 0x0000A0, "Member 'FPlayLogSaveGameMode::TotalPlayTime' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameMode, TotalPlayCount) == 0x0000C8, "Member 'FPlayLogSaveGameMode::TotalPlayCount' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameMode, DailyPlayTime) == 0x0000F0, "Member 'FPlayLogSaveGameMode::DailyPlayTime' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameMode, DailyPlayCount) == 0x000118, "Member 'FPlayLogSaveGameMode::DailyPlayCount' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameMode, ModePlayStartDay) == 0x000140, "Member 'FPlayLogSaveGameMode::ModePlayStartDay' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameMode, GameLogin) == 0x0001E0, "Member 'FPlayLogSaveGameMode::GameLogin' has a wrong offset!");
static_assert(offsetof(FPlayLogSaveGameMode, Sequence) == 0x0001F0, "Member 'FPlayLogSaveGameMode::Sequence' has a wrong offset!");

// ScriptStruct UnionSystem.RaceTime
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FRaceTime final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRaceTime) == 0x000004, "Wrong alignment on FRaceTime");
static_assert(sizeof(FRaceTime) == 0x000010, "Wrong size on FRaceTime");

// ScriptStruct UnionSystem.RankingGetRankingLegendCompeResponse
// 0x0020 (0x0020 - 0x0000)
struct FRankingGetRankingLegendCompeResponse final
{
public:
	class FString                                 signedUrl;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 updatedAt;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetRankingLegendCompeResponse) == 0x000008, "Wrong alignment on FRankingGetRankingLegendCompeResponse");
static_assert(sizeof(FRankingGetRankingLegendCompeResponse) == 0x000020, "Wrong size on FRankingGetRankingLegendCompeResponse");
static_assert(offsetof(FRankingGetRankingLegendCompeResponse, signedUrl) == 0x000000, "Member 'FRankingGetRankingLegendCompeResponse::signedUrl' has a wrong offset!");
static_assert(offsetof(FRankingGetRankingLegendCompeResponse, updatedAt) == 0x000010, "Member 'FRankingGetRankingLegendCompeResponse::updatedAt' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetFriendRankingRankMatchRequest
// 0x0028 (0x0028 - 0x0000)
struct FRankingGetFriendRankingRankMatchRequest
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         friendPuids;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         romVersionId;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romType;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetFriendRankingRankMatchRequest) == 0x000008, "Wrong alignment on FRankingGetFriendRankingRankMatchRequest");
static_assert(sizeof(FRankingGetFriendRankingRankMatchRequest) == 0x000028, "Wrong size on FRankingGetFriendRankingRankMatchRequest");
static_assert(offsetof(FRankingGetFriendRankingRankMatchRequest, Platform) == 0x000000, "Member 'FRankingGetFriendRankingRankMatchRequest::Platform' has a wrong offset!");
static_assert(offsetof(FRankingGetFriendRankingRankMatchRequest, friendPuids) == 0x000010, "Member 'FRankingGetFriendRankingRankMatchRequest::friendPuids' has a wrong offset!");
static_assert(offsetof(FRankingGetFriendRankingRankMatchRequest, romVersionId) == 0x000020, "Member 'FRankingGetFriendRankingRankMatchRequest::romVersionId' has a wrong offset!");
static_assert(offsetof(FRankingGetFriendRankingRankMatchRequest, romType) == 0x000024, "Member 'FRankingGetFriendRankingRankMatchRequest::romType' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetFriendRankingFestaPointRequest
// 0x0030 (0x0030 - 0x0000)
struct FRankingGetFriendRankingFestaPointRequest
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         festaId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         friendPuids;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         romVersionId;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romType;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetFriendRankingFestaPointRequest) == 0x000008, "Wrong alignment on FRankingGetFriendRankingFestaPointRequest");
static_assert(sizeof(FRankingGetFriendRankingFestaPointRequest) == 0x000030, "Wrong size on FRankingGetFriendRankingFestaPointRequest");
static_assert(offsetof(FRankingGetFriendRankingFestaPointRequest, Platform) == 0x000000, "Member 'FRankingGetFriendRankingFestaPointRequest::Platform' has a wrong offset!");
static_assert(offsetof(FRankingGetFriendRankingFestaPointRequest, festaId) == 0x000010, "Member 'FRankingGetFriendRankingFestaPointRequest::festaId' has a wrong offset!");
static_assert(offsetof(FRankingGetFriendRankingFestaPointRequest, friendPuids) == 0x000018, "Member 'FRankingGetFriendRankingFestaPointRequest::friendPuids' has a wrong offset!");
static_assert(offsetof(FRankingGetFriendRankingFestaPointRequest, romVersionId) == 0x000028, "Member 'FRankingGetFriendRankingFestaPointRequest::romVersionId' has a wrong offset!");
static_assert(offsetof(FRankingGetFriendRankingFestaPointRequest, romType) == 0x00002C, "Member 'FRankingGetFriendRankingFestaPointRequest::romType' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetFriendRankingFestaPointResponse
// 0x0010 (0x0010 - 0x0000)
struct FRankingGetFriendRankingFestaPointResponse final
{
public:
	TArray<struct FCommon_RankingOrder>           Ranking;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetFriendRankingFestaPointResponse) == 0x000008, "Wrong alignment on FRankingGetFriendRankingFestaPointResponse");
static_assert(sizeof(FRankingGetFriendRankingFestaPointResponse) == 0x000010, "Wrong size on FRankingGetFriendRankingFestaPointResponse");
static_assert(offsetof(FRankingGetFriendRankingFestaPointResponse, Ranking) == 0x000000, "Member 'FRankingGetFriendRankingFestaPointResponse::Ranking' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetFriendRankingLegendCompeRequest
// 0x0030 (0x0030 - 0x0000)
struct FRankingGetFriendRankingLegendCompeRequest final
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         compeId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         friendPuids;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         romVersionId;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romType;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetFriendRankingLegendCompeRequest) == 0x000008, "Wrong alignment on FRankingGetFriendRankingLegendCompeRequest");
static_assert(sizeof(FRankingGetFriendRankingLegendCompeRequest) == 0x000030, "Wrong size on FRankingGetFriendRankingLegendCompeRequest");
static_assert(offsetof(FRankingGetFriendRankingLegendCompeRequest, Platform) == 0x000000, "Member 'FRankingGetFriendRankingLegendCompeRequest::Platform' has a wrong offset!");
static_assert(offsetof(FRankingGetFriendRankingLegendCompeRequest, compeId) == 0x000010, "Member 'FRankingGetFriendRankingLegendCompeRequest::compeId' has a wrong offset!");
static_assert(offsetof(FRankingGetFriendRankingLegendCompeRequest, friendPuids) == 0x000018, "Member 'FRankingGetFriendRankingLegendCompeRequest::friendPuids' has a wrong offset!");
static_assert(offsetof(FRankingGetFriendRankingLegendCompeRequest, romVersionId) == 0x000028, "Member 'FRankingGetFriendRankingLegendCompeRequest::romVersionId' has a wrong offset!");
static_assert(offsetof(FRankingGetFriendRankingLegendCompeRequest, romType) == 0x00002C, "Member 'FRankingGetFriendRankingLegendCompeRequest::romType' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetFriendRankingLegendCompeResponse
// 0x0010 (0x0010 - 0x0000)
struct FRankingGetFriendRankingLegendCompeResponse final
{
public:
	TArray<struct FCommon_RankingOrder>           Ranking;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetFriendRankingLegendCompeResponse) == 0x000008, "Wrong alignment on FRankingGetFriendRankingLegendCompeResponse");
static_assert(sizeof(FRankingGetFriendRankingLegendCompeResponse) == 0x000010, "Wrong size on FRankingGetFriendRankingLegendCompeResponse");
static_assert(offsetof(FRankingGetFriendRankingLegendCompeResponse, Ranking) == 0x000000, "Member 'FRankingGetFriendRankingLegendCompeResponse::Ranking' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetMyRankingResponse_AllRanking
// 0x04B0 (0x04B0 - 0x0000)
struct FRankingGetMyRankingResponse_AllRanking final
{
public:
	struct FCommon_RankingOrder                   All;                                               // 0x0000(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_RankingOrder                   Nintendo;                                          // 0x00F0(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_RankingOrder                   psn;                                               // 0x01E0(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_RankingOrder                   xbl;                                               // 0x02D0(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_RankingOrder                   PC;                                                // 0x03C0(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetMyRankingResponse_AllRanking) == 0x000008, "Wrong alignment on FRankingGetMyRankingResponse_AllRanking");
static_assert(sizeof(FRankingGetMyRankingResponse_AllRanking) == 0x0004B0, "Wrong size on FRankingGetMyRankingResponse_AllRanking");
static_assert(offsetof(FRankingGetMyRankingResponse_AllRanking, All) == 0x000000, "Member 'FRankingGetMyRankingResponse_AllRanking::All' has a wrong offset!");
static_assert(offsetof(FRankingGetMyRankingResponse_AllRanking, Nintendo) == 0x0000F0, "Member 'FRankingGetMyRankingResponse_AllRanking::Nintendo' has a wrong offset!");
static_assert(offsetof(FRankingGetMyRankingResponse_AllRanking, psn) == 0x0001E0, "Member 'FRankingGetMyRankingResponse_AllRanking::psn' has a wrong offset!");
static_assert(offsetof(FRankingGetMyRankingResponse_AllRanking, xbl) == 0x0002D0, "Member 'FRankingGetMyRankingResponse_AllRanking::xbl' has a wrong offset!");
static_assert(offsetof(FRankingGetMyRankingResponse_AllRanking, PC) == 0x0003C0, "Member 'FRankingGetMyRankingResponse_AllRanking::PC' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetMyRankingTimeTrialRequest
// 0x0008 (0x0008 - 0x0000)
struct FRankingGetMyRankingTimeTrialRequest
{
public:
	int32                                         courseId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         speedType;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetMyRankingTimeTrialRequest) == 0x000004, "Wrong alignment on FRankingGetMyRankingTimeTrialRequest");
static_assert(sizeof(FRankingGetMyRankingTimeTrialRequest) == 0x000008, "Wrong size on FRankingGetMyRankingTimeTrialRequest");
static_assert(offsetof(FRankingGetMyRankingTimeTrialRequest, courseId) == 0x000000, "Member 'FRankingGetMyRankingTimeTrialRequest::courseId' has a wrong offset!");
static_assert(offsetof(FRankingGetMyRankingTimeTrialRequest, speedType) == 0x000004, "Member 'FRankingGetMyRankingTimeTrialRequest::speedType' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetMyRankingTimeTrialResponse
// 0x04B0 (0x04B0 - 0x0000)
struct FRankingGetMyRankingTimeTrialResponse final
{
public:
	struct FRankingGetMyRankingResponse_AllRanking myRanking;                                        // 0x0000(0x04B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetMyRankingTimeTrialResponse) == 0x000008, "Wrong alignment on FRankingGetMyRankingTimeTrialResponse");
static_assert(sizeof(FRankingGetMyRankingTimeTrialResponse) == 0x0004B0, "Wrong size on FRankingGetMyRankingTimeTrialResponse");
static_assert(offsetof(FRankingGetMyRankingTimeTrialResponse, myRanking) == 0x000000, "Member 'FRankingGetMyRankingTimeTrialResponse::myRanking' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetMyRankingRankMatchRequest
// 0x0001 (0x0001 - 0x0000)
struct FRankingGetMyRankingRankMatchRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankingGetMyRankingRankMatchRequest) == 0x000001, "Wrong alignment on FRankingGetMyRankingRankMatchRequest");
static_assert(sizeof(FRankingGetMyRankingRankMatchRequest) == 0x000001, "Wrong size on FRankingGetMyRankingRankMatchRequest");

// ScriptStruct UnionSystem.RankingGetMyRankingRankMatchResponse
// 0x04B0 (0x04B0 - 0x0000)
struct FRankingGetMyRankingRankMatchResponse final
{
public:
	struct FRankingGetMyRankingResponse_AllRanking myRanking;                                        // 0x0000(0x04B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetMyRankingRankMatchResponse) == 0x000008, "Wrong alignment on FRankingGetMyRankingRankMatchResponse");
static_assert(sizeof(FRankingGetMyRankingRankMatchResponse) == 0x0004B0, "Wrong size on FRankingGetMyRankingRankMatchResponse");
static_assert(offsetof(FRankingGetMyRankingRankMatchResponse, myRanking) == 0x000000, "Member 'FRankingGetMyRankingRankMatchResponse::myRanking' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetMyRankingFestaPointResponse
// 0x04B0 (0x04B0 - 0x0000)
struct FRankingGetMyRankingFestaPointResponse final
{
public:
	struct FRankingGetMyRankingResponse_AllRanking myRanking;                                        // 0x0000(0x04B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetMyRankingFestaPointResponse) == 0x000008, "Wrong alignment on FRankingGetMyRankingFestaPointResponse");
static_assert(sizeof(FRankingGetMyRankingFestaPointResponse) == 0x0004B0, "Wrong size on FRankingGetMyRankingFestaPointResponse");
static_assert(offsetof(FRankingGetMyRankingFestaPointResponse, myRanking) == 0x000000, "Member 'FRankingGetMyRankingFestaPointResponse::myRanking' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetMyRankingLegendCompeRequest
// 0x0004 (0x0004 - 0x0000)
struct FRankingGetMyRankingLegendCompeRequest
{
public:
	int32                                         compeId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetMyRankingLegendCompeRequest) == 0x000004, "Wrong alignment on FRankingGetMyRankingLegendCompeRequest");
static_assert(sizeof(FRankingGetMyRankingLegendCompeRequest) == 0x000004, "Wrong size on FRankingGetMyRankingLegendCompeRequest");
static_assert(offsetof(FRankingGetMyRankingLegendCompeRequest, compeId) == 0x000000, "Member 'FRankingGetMyRankingLegendCompeRequest::compeId' has a wrong offset!");

// ScriptStruct UnionSystem.RankingGetMyRankingLegendCompeResponse
// 0x04B0 (0x04B0 - 0x0000)
struct FRankingGetMyRankingLegendCompeResponse final
{
public:
	struct FRankingGetMyRankingResponse_AllRanking myRanking;                                        // 0x0000(0x04B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingGetMyRankingLegendCompeResponse) == 0x000008, "Wrong alignment on FRankingGetMyRankingLegendCompeResponse");
static_assert(sizeof(FRankingGetMyRankingLegendCompeResponse) == 0x0004B0, "Wrong size on FRankingGetMyRankingLegendCompeResponse");
static_assert(offsetof(FRankingGetMyRankingLegendCompeResponse, myRanking) == 0x000000, "Member 'FRankingGetMyRankingLegendCompeResponse::myRanking' has a wrong offset!");

// ScriptStruct UnionSystem.TimeTrialWorldRankingAsyncResult
// 0x0018 (0x0028 - 0x0010)
struct FTimeTrialWorldRankingAsyncResult final : public FRankingDataTimeTrialList
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeTrialWorldRankingAsyncResult) == 0x000008, "Wrong alignment on FTimeTrialWorldRankingAsyncResult");
static_assert(sizeof(FTimeTrialWorldRankingAsyncResult) == 0x000028, "Wrong size on FTimeTrialWorldRankingAsyncResult");

// ScriptStruct UnionSystem.RankMatchWorldRankingAsyncResult
// 0x0018 (0x0028 - 0x0010)
struct FRankMatchWorldRankingAsyncResult final : public FRankingDataRankMatchList
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankMatchWorldRankingAsyncResult) == 0x000008, "Wrong alignment on FRankMatchWorldRankingAsyncResult");
static_assert(sizeof(FRankMatchWorldRankingAsyncResult) == 0x000028, "Wrong size on FRankMatchWorldRankingAsyncResult");

// ScriptStruct UnionSystem.RankMatchFriendRankingAsyncResult
// 0x0018 (0x0028 - 0x0010)
struct FRankMatchFriendRankingAsyncResult final : public FRankingDataRankMatchList
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankMatchFriendRankingAsyncResult) == 0x000008, "Wrong alignment on FRankMatchFriendRankingAsyncResult");
static_assert(sizeof(FRankMatchFriendRankingAsyncResult) == 0x000028, "Wrong size on FRankMatchFriendRankingAsyncResult");

// ScriptStruct UnionSystem.FestaFriendRankingAsyncResult
// 0x0018 (0x0028 - 0x0010)
struct FFestaFriendRankingAsyncResult final : public FRankingDataFestaPointList
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFestaFriendRankingAsyncResult) == 0x000008, "Wrong alignment on FFestaFriendRankingAsyncResult");
static_assert(sizeof(FFestaFriendRankingAsyncResult) == 0x000028, "Wrong size on FFestaFriendRankingAsyncResult");

// ScriptStruct UnionSystem.LegendCompeWorldRankingAsyncResult
// 0x0018 (0x0028 - 0x0010)
struct FLegendCompeWorldRankingAsyncResult final : public FRankingDataLegendCompeList
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLegendCompeWorldRankingAsyncResult) == 0x000008, "Wrong alignment on FLegendCompeWorldRankingAsyncResult");
static_assert(sizeof(FLegendCompeWorldRankingAsyncResult) == 0x000028, "Wrong size on FLegendCompeWorldRankingAsyncResult");

// ScriptStruct UnionSystem.LegendCompeFriendRankingAsyncResult
// 0x0018 (0x0028 - 0x0010)
struct FLegendCompeFriendRankingAsyncResult final : public FRankingDataLegendCompeList
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLegendCompeFriendRankingAsyncResult) == 0x000008, "Wrong alignment on FLegendCompeFriendRankingAsyncResult");
static_assert(sizeof(FLegendCompeFriendRankingAsyncResult) == 0x000028, "Wrong size on FLegendCompeFriendRankingAsyncResult");

// ScriptStruct UnionSystem.TimeTrialMyRankingCacheKey
// 0x0000 (0x0008 - 0x0008)
struct FTimeTrialMyRankingCacheKey final : public FRankingGetMyRankingTimeTrialRequest
{
};
static_assert(alignof(FTimeTrialMyRankingCacheKey) == 0x000004, "Wrong alignment on FTimeTrialMyRankingCacheKey");
static_assert(sizeof(FTimeTrialMyRankingCacheKey) == 0x000008, "Wrong size on FTimeTrialMyRankingCacheKey");

// ScriptStruct UnionSystem.RankMatchWorldRankingCacheKey
// 0x0000 (0x0018 - 0x0018)
struct FRankMatchWorldRankingCacheKey final : public FRankingGetRankingRankMatchRequest
{
};
static_assert(alignof(FRankMatchWorldRankingCacheKey) == 0x000008, "Wrong alignment on FRankMatchWorldRankingCacheKey");
static_assert(sizeof(FRankMatchWorldRankingCacheKey) == 0x000018, "Wrong size on FRankMatchWorldRankingCacheKey");

// ScriptStruct UnionSystem.RankMatchFriendRankingCacheKey
// 0x0000 (0x0028 - 0x0028)
struct FRankMatchFriendRankingCacheKey final : public FRankingGetFriendRankingRankMatchRequest
{
};
static_assert(alignof(FRankMatchFriendRankingCacheKey) == 0x000008, "Wrong alignment on FRankMatchFriendRankingCacheKey");
static_assert(sizeof(FRankMatchFriendRankingCacheKey) == 0x000028, "Wrong size on FRankMatchFriendRankingCacheKey");

// ScriptStruct UnionSystem.FestaFriendRankingCacheKey
// 0x0000 (0x0030 - 0x0030)
struct FFestaFriendRankingCacheKey final : public FRankingGetFriendRankingFestaPointRequest
{
};
static_assert(alignof(FFestaFriendRankingCacheKey) == 0x000008, "Wrong alignment on FFestaFriendRankingCacheKey");
static_assert(sizeof(FFestaFriendRankingCacheKey) == 0x000030, "Wrong size on FFestaFriendRankingCacheKey");

// ScriptStruct UnionSystem.LegendCompeWorldRankingCacheKey
// 0x0000 (0x0020 - 0x0020)
struct FLegendCompeWorldRankingCacheKey final : public FRankingGetRankingLegendCompeRequest
{
};
static_assert(alignof(FLegendCompeWorldRankingCacheKey) == 0x000008, "Wrong alignment on FLegendCompeWorldRankingCacheKey");
static_assert(sizeof(FLegendCompeWorldRankingCacheKey) == 0x000020, "Wrong size on FLegendCompeWorldRankingCacheKey");

// ScriptStruct UnionSystem.LegendCompeMyRankingCacheKey
// 0x0000 (0x0004 - 0x0004)
struct FLegendCompeMyRankingCacheKey final : public FRankingGetMyRankingLegendCompeRequest
{
};
static_assert(alignof(FLegendCompeMyRankingCacheKey) == 0x000004, "Wrong alignment on FLegendCompeMyRankingCacheKey");
static_assert(sizeof(FLegendCompeMyRankingCacheKey) == 0x000004, "Wrong size on FLegendCompeMyRankingCacheKey");

// ScriptStruct UnionSystem.TimeTrialWorldRankingCache
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FTimeTrialWorldRankingCache final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeTrialWorldRankingCache) == 0x000008, "Wrong alignment on FTimeTrialWorldRankingCache");
static_assert(sizeof(FTimeTrialWorldRankingCache) == 0x000020, "Wrong size on FTimeTrialWorldRankingCache");

// ScriptStruct UnionSystem.RankMatchWorldRankingCache
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FRankMatchWorldRankingCache final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankMatchWorldRankingCache) == 0x000008, "Wrong alignment on FRankMatchWorldRankingCache");
static_assert(sizeof(FRankMatchWorldRankingCache) == 0x000020, "Wrong size on FRankMatchWorldRankingCache");

// ScriptStruct UnionSystem.FestaWorldRankingCache
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFestaWorldRankingCache final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFestaWorldRankingCache) == 0x000008, "Wrong alignment on FFestaWorldRankingCache");
static_assert(sizeof(FFestaWorldRankingCache) == 0x000020, "Wrong size on FFestaWorldRankingCache");

// ScriptStruct UnionSystem.FestaFriendRankingCache
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFestaFriendRankingCache final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFestaFriendRankingCache) == 0x000008, "Wrong alignment on FFestaFriendRankingCache");
static_assert(sizeof(FFestaFriendRankingCache) == 0x000018, "Wrong size on FFestaFriendRankingCache");

// ScriptStruct UnionSystem.LegendCompeWorldRankingCache
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FLegendCompeWorldRankingCache final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLegendCompeWorldRankingCache) == 0x000008, "Wrong alignment on FLegendCompeWorldRankingCache");
static_assert(sizeof(FLegendCompeWorldRankingCache) == 0x000020, "Wrong size on FLegendCompeWorldRankingCache");

// ScriptStruct UnionSystem.MyRankingCache
// 0x0128 (0x0128 - 0x0000)
struct alignas(0x08) FMyRankingCache final
{
public:
	uint8                                         Pad_0[0x128];                                      // 0x0000(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMyRankingCache) == 0x000008, "Wrong alignment on FMyRankingCache");
static_assert(sizeof(FMyRankingCache) == 0x000128, "Wrong size on FMyRankingCache");

// ScriptStruct UnionSystem.TimeTrialMyRankingOperationData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTimeTrialMyRankingOperationData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeTrialMyRankingOperationData) == 0x000008, "Wrong alignment on FTimeTrialMyRankingOperationData");
static_assert(sizeof(FTimeTrialMyRankingOperationData) == 0x000018, "Wrong size on FTimeTrialMyRankingOperationData");

// ScriptStruct UnionSystem.RankMatchMyRankingOperationData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRankMatchMyRankingOperationData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankMatchMyRankingOperationData) == 0x000008, "Wrong alignment on FRankMatchMyRankingOperationData");
static_assert(sizeof(FRankMatchMyRankingOperationData) == 0x000010, "Wrong size on FRankMatchMyRankingOperationData");

// ScriptStruct UnionSystem.RankMatchFriendRankingOperationData
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FRankMatchFriendRankingOperationData final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankMatchFriendRankingOperationData) == 0x000008, "Wrong alignment on FRankMatchFriendRankingOperationData");
static_assert(sizeof(FRankMatchFriendRankingOperationData) == 0x000048, "Wrong size on FRankMatchFriendRankingOperationData");

// ScriptStruct UnionSystem.FestaWorldRankingOperationData
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FFestaWorldRankingOperationData final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFestaWorldRankingOperationData) == 0x000008, "Wrong alignment on FFestaWorldRankingOperationData");
static_assert(sizeof(FFestaWorldRankingOperationData) == 0x000058, "Wrong size on FFestaWorldRankingOperationData");

// ScriptStruct UnionSystem.FestaFriendRankingOperationData
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FFestaFriendRankingOperationData final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFestaFriendRankingOperationData) == 0x000008, "Wrong alignment on FFestaFriendRankingOperationData");
static_assert(sizeof(FFestaFriendRankingOperationData) == 0x000050, "Wrong size on FFestaFriendRankingOperationData");

// ScriptStruct UnionSystem.LegendCompeWorldRankingOperationData
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FLegendCompeWorldRankingOperationData final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLegendCompeWorldRankingOperationData) == 0x000008, "Wrong alignment on FLegendCompeWorldRankingOperationData");
static_assert(sizeof(FLegendCompeWorldRankingOperationData) == 0x000058, "Wrong size on FLegendCompeWorldRankingOperationData");

// ScriptStruct UnionSystem.LegendCompeMyRankingOperationData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FLegendCompeMyRankingOperationData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLegendCompeMyRankingOperationData) == 0x000008, "Wrong alignment on FLegendCompeMyRankingOperationData");
static_assert(sizeof(FLegendCompeMyRankingOperationData) == 0x000018, "Wrong size on FLegendCompeMyRankingOperationData");

// ScriptStruct UnionSystem.RankingDataRankMatchUserNoteMachineTypeUsage
// 0x0008 (0x0008 - 0x0000)
struct FRankingDataRankMatchUserNoteMachineTypeUsage final
{
public:
	int32                                         machineType;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         usageCount;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataRankMatchUserNoteMachineTypeUsage) == 0x000004, "Wrong alignment on FRankingDataRankMatchUserNoteMachineTypeUsage");
static_assert(sizeof(FRankingDataRankMatchUserNoteMachineTypeUsage) == 0x000008, "Wrong size on FRankingDataRankMatchUserNoteMachineTypeUsage");
static_assert(offsetof(FRankingDataRankMatchUserNoteMachineTypeUsage, machineType) == 0x000000, "Member 'FRankingDataRankMatchUserNoteMachineTypeUsage::machineType' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNoteMachineTypeUsage, usageCount) == 0x000004, "Member 'FRankingDataRankMatchUserNoteMachineTypeUsage::usageCount' has a wrong offset!");

// ScriptStruct UnionSystem.RankingDataRankMatchUserNoteCharacterUsage
// 0x000C (0x000C - 0x0000)
struct FRankingDataRankMatchUserNoteCharacterUsage final
{
public:
	int32                                         rankingOrder;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         usageCount;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingDataRankMatchUserNoteCharacterUsage) == 0x000004, "Wrong alignment on FRankingDataRankMatchUserNoteCharacterUsage");
static_assert(sizeof(FRankingDataRankMatchUserNoteCharacterUsage) == 0x00000C, "Wrong size on FRankingDataRankMatchUserNoteCharacterUsage");
static_assert(offsetof(FRankingDataRankMatchUserNoteCharacterUsage, rankingOrder) == 0x000000, "Member 'FRankingDataRankMatchUserNoteCharacterUsage::rankingOrder' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNoteCharacterUsage, characterId) == 0x000004, "Member 'FRankingDataRankMatchUserNoteCharacterUsage::characterId' has a wrong offset!");
static_assert(offsetof(FRankingDataRankMatchUserNoteCharacterUsage, usageCount) == 0x000008, "Member 'FRankingDataRankMatchUserNoteCharacterUsage::usageCount' has a wrong offset!");

// ScriptStruct UnionSystem.ResultSaveTimeTrialResultResponse_TimeTrialRankingData
// 0x0108 (0x0108 - 0x0000)
struct FResultSaveTimeTrialResultResponse_TimeTrialRankingData final
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         courceId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         speedType;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommon_RankingOrder                   myRanking;                                         // 0x0018(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultSaveTimeTrialResultResponse_TimeTrialRankingData) == 0x000008, "Wrong alignment on FResultSaveTimeTrialResultResponse_TimeTrialRankingData");
static_assert(sizeof(FResultSaveTimeTrialResultResponse_TimeTrialRankingData) == 0x000108, "Wrong size on FResultSaveTimeTrialResultResponse_TimeTrialRankingData");
static_assert(offsetof(FResultSaveTimeTrialResultResponse_TimeTrialRankingData, Platform) == 0x000000, "Member 'FResultSaveTimeTrialResultResponse_TimeTrialRankingData::Platform' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultResponse_TimeTrialRankingData, courceId) == 0x000010, "Member 'FResultSaveTimeTrialResultResponse_TimeTrialRankingData::courceId' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultResponse_TimeTrialRankingData, speedType) == 0x000014, "Member 'FResultSaveTimeTrialResultResponse_TimeTrialRankingData::speedType' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultResponse_TimeTrialRankingData, myRanking) == 0x000018, "Member 'FResultSaveTimeTrialResultResponse_TimeTrialRankingData::myRanking' has a wrong offset!");

// ScriptStruct UnionSystem.ResultSaveTimeTrialResultResponse
// 0x0100 (0x0100 - 0x0000)
struct FResultSaveTimeTrialResultResponse final
{
public:
	struct FCommon_RankingOrder                   myCourseRanking;                                   // 0x0000(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FResultSaveTimeTrialResultResponse_TimeTrialRankingData> myRankingList;            // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultSaveTimeTrialResultResponse) == 0x000008, "Wrong alignment on FResultSaveTimeTrialResultResponse");
static_assert(sizeof(FResultSaveTimeTrialResultResponse) == 0x000100, "Wrong size on FResultSaveTimeTrialResultResponse");
static_assert(offsetof(FResultSaveTimeTrialResultResponse, myCourseRanking) == 0x000000, "Member 'FResultSaveTimeTrialResultResponse::myCourseRanking' has a wrong offset!");
static_assert(offsetof(FResultSaveTimeTrialResultResponse, myRankingList) == 0x0000F0, "Member 'FResultSaveTimeTrialResultResponse::myRankingList' has a wrong offset!");

// ScriptStruct UnionSystem.ResultSaveRankMatchResultRequest
// 0x03F8 (0x03F8 - 0x0000)
struct FResultSaveRankMatchResultRequest final
{
public:
	class FString                                 entryRaceId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCommon_UserOrderData>          UserOrder;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_MachineData                    MachineData;                                       // 0x0028(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_GadgetData                     GadgetData;                                        // 0x0398(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_DegreeData                     DegreeData;                                        // 0x03B4(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_HistoryData                    HistoryData;                                       // 0x03C0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsHost;                                            // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E1[0x3];                                      // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         rivalBonus;                                        // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCommon_UserCheatParamData>     userCheatParams;                                   // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultSaveRankMatchResultRequest) == 0x000008, "Wrong alignment on FResultSaveRankMatchResultRequest");
static_assert(sizeof(FResultSaveRankMatchResultRequest) == 0x0003F8, "Wrong size on FResultSaveRankMatchResultRequest");
static_assert(offsetof(FResultSaveRankMatchResultRequest, entryRaceId) == 0x000000, "Member 'FResultSaveRankMatchResultRequest::entryRaceId' has a wrong offset!");
static_assert(offsetof(FResultSaveRankMatchResultRequest, UserOrder) == 0x000010, "Member 'FResultSaveRankMatchResultRequest::UserOrder' has a wrong offset!");
static_assert(offsetof(FResultSaveRankMatchResultRequest, characterId) == 0x000020, "Member 'FResultSaveRankMatchResultRequest::characterId' has a wrong offset!");
static_assert(offsetof(FResultSaveRankMatchResultRequest, MachineData) == 0x000028, "Member 'FResultSaveRankMatchResultRequest::MachineData' has a wrong offset!");
static_assert(offsetof(FResultSaveRankMatchResultRequest, GadgetData) == 0x000398, "Member 'FResultSaveRankMatchResultRequest::GadgetData' has a wrong offset!");
static_assert(offsetof(FResultSaveRankMatchResultRequest, DegreeData) == 0x0003B4, "Member 'FResultSaveRankMatchResultRequest::DegreeData' has a wrong offset!");
static_assert(offsetof(FResultSaveRankMatchResultRequest, HistoryData) == 0x0003C0, "Member 'FResultSaveRankMatchResultRequest::HistoryData' has a wrong offset!");
static_assert(offsetof(FResultSaveRankMatchResultRequest, IsHost) == 0x0003E0, "Member 'FResultSaveRankMatchResultRequest::IsHost' has a wrong offset!");
static_assert(offsetof(FResultSaveRankMatchResultRequest, rivalBonus) == 0x0003E4, "Member 'FResultSaveRankMatchResultRequest::rivalBonus' has a wrong offset!");
static_assert(offsetof(FResultSaveRankMatchResultRequest, userCheatParams) == 0x0003E8, "Member 'FResultSaveRankMatchResultRequest::userCheatParams' has a wrong offset!");

// ScriptStruct UnionSystem.ResultSaveLegendCompeResultRequest
// 0x0400 (0x0400 - 0x0000)
struct FResultSaveLegendCompeResultRequest final
{
public:
	int32                                         compeId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 entryRaceId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCommon_UserOrderData>          UserOrder;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         characterId;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_MachineData                    MachineData;                                       // 0x0030(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_GadgetData                     GadgetData;                                        // 0x03A0(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_DegreeData                     DegreeData;                                        // 0x03BC(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_HistoryData                    HistoryData;                                       // 0x03C8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsHost;                                            // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCommon_UserCheatParamData>     userCheatParams;                                   // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultSaveLegendCompeResultRequest) == 0x000008, "Wrong alignment on FResultSaveLegendCompeResultRequest");
static_assert(sizeof(FResultSaveLegendCompeResultRequest) == 0x000400, "Wrong size on FResultSaveLegendCompeResultRequest");
static_assert(offsetof(FResultSaveLegendCompeResultRequest, compeId) == 0x000000, "Member 'FResultSaveLegendCompeResultRequest::compeId' has a wrong offset!");
static_assert(offsetof(FResultSaveLegendCompeResultRequest, entryRaceId) == 0x000008, "Member 'FResultSaveLegendCompeResultRequest::entryRaceId' has a wrong offset!");
static_assert(offsetof(FResultSaveLegendCompeResultRequest, UserOrder) == 0x000018, "Member 'FResultSaveLegendCompeResultRequest::UserOrder' has a wrong offset!");
static_assert(offsetof(FResultSaveLegendCompeResultRequest, characterId) == 0x000028, "Member 'FResultSaveLegendCompeResultRequest::characterId' has a wrong offset!");
static_assert(offsetof(FResultSaveLegendCompeResultRequest, MachineData) == 0x000030, "Member 'FResultSaveLegendCompeResultRequest::MachineData' has a wrong offset!");
static_assert(offsetof(FResultSaveLegendCompeResultRequest, GadgetData) == 0x0003A0, "Member 'FResultSaveLegendCompeResultRequest::GadgetData' has a wrong offset!");
static_assert(offsetof(FResultSaveLegendCompeResultRequest, DegreeData) == 0x0003BC, "Member 'FResultSaveLegendCompeResultRequest::DegreeData' has a wrong offset!");
static_assert(offsetof(FResultSaveLegendCompeResultRequest, HistoryData) == 0x0003C8, "Member 'FResultSaveLegendCompeResultRequest::HistoryData' has a wrong offset!");
static_assert(offsetof(FResultSaveLegendCompeResultRequest, IsHost) == 0x0003E8, "Member 'FResultSaveLegendCompeResultRequest::IsHost' has a wrong offset!");
static_assert(offsetof(FResultSaveLegendCompeResultRequest, userCheatParams) == 0x0003F0, "Member 'FResultSaveLegendCompeResultRequest::userCheatParams' has a wrong offset!");

// ScriptStruct UnionSystem.ResultSaveFestaResultResponse
// 0x0158 (0x0158 - 0x0000)
struct FResultSaveFestaResultResponse final
{
public:
	struct FCommon_FestaData                      festaData;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_RankingOrder                   myRanking;                                         // 0x0008(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_FestaBonusData                 bonusData;                                         // 0x00F8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          isVoltage;                                         // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCommon_FestaTimeData>          timeSchedule;                                      // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCommon_FestaPointData                 pointData;                                         // 0x0138(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultSaveFestaResultResponse) == 0x000008, "Wrong alignment on FResultSaveFestaResultResponse");
static_assert(sizeof(FResultSaveFestaResultResponse) == 0x000158, "Wrong size on FResultSaveFestaResultResponse");
static_assert(offsetof(FResultSaveFestaResultResponse, festaData) == 0x000000, "Member 'FResultSaveFestaResultResponse::festaData' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultResponse, myRanking) == 0x000008, "Member 'FResultSaveFestaResultResponse::myRanking' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultResponse, bonusData) == 0x0000F8, "Member 'FResultSaveFestaResultResponse::bonusData' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultResponse, isVoltage) == 0x000120, "Member 'FResultSaveFestaResultResponse::isVoltage' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultResponse, timeSchedule) == 0x000128, "Member 'FResultSaveFestaResultResponse::timeSchedule' has a wrong offset!");
static_assert(offsetof(FResultSaveFestaResultResponse, pointData) == 0x000138, "Member 'FResultSaveFestaResultResponse::pointData' has a wrong offset!");

// ScriptStruct UnionSystem.RewardRedStarRingTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRewardRedStarRingTableRow final : public FTableRowBase
{
public:
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ECommendationCategory                         CommendationCategory;                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRewardRedStarRingTableRow) == 0x000008, "Wrong alignment on FRewardRedStarRingTableRow");
static_assert(sizeof(FRewardRedStarRingTableRow) == 0x000028, "Wrong size on FRewardRedStarRingTableRow");
static_assert(offsetof(FRewardRedStarRingTableRow, Count) == 0x000008, "Member 'FRewardRedStarRingTableRow::Count' has a wrong offset!");
static_assert(offsetof(FRewardRedStarRingTableRow, Description) == 0x000010, "Member 'FRewardRedStarRingTableRow::Description' has a wrong offset!");
static_assert(offsetof(FRewardRedStarRingTableRow, CommendationCategory) == 0x000020, "Member 'FRewardRedStarRingTableRow::CommendationCategory' has a wrong offset!");

// ScriptStruct UnionSystem.RewardRedStarRingHonorTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRewardRedStarRingHonorTableRow final : public FTableRowBase
{
public:
	EHonorId                                      HonorId;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommendationCategory                         CommendationCategory;                              // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardRedStarRingHonorTableRow) == 0x000008, "Wrong alignment on FRewardRedStarRingHonorTableRow");
static_assert(sizeof(FRewardRedStarRingHonorTableRow) == 0x000020, "Wrong size on FRewardRedStarRingHonorTableRow");
static_assert(offsetof(FRewardRedStarRingHonorTableRow, HonorId) == 0x000008, "Member 'FRewardRedStarRingHonorTableRow::HonorId' has a wrong offset!");
static_assert(offsetof(FRewardRedStarRingHonorTableRow, CommendationCategory) == 0x000009, "Member 'FRewardRedStarRingHonorTableRow::CommendationCategory' has a wrong offset!");
static_assert(offsetof(FRewardRedStarRingHonorTableRow, Count) == 0x00000C, "Member 'FRewardRedStarRingHonorTableRow::Count' has a wrong offset!");
static_assert(offsetof(FRewardRedStarRingHonorTableRow, Description) == 0x000010, "Member 'FRewardRedStarRingHonorTableRow::Description' has a wrong offset!");

// ScriptStruct UnionSystem.RewardRedStarRingData
// 0x0020 (0x0020 - 0x0000)
struct FRewardRedStarRingData final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ECommendationCategory                         CommendationCategory;                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRewardRedStarRingData) == 0x000008, "Wrong alignment on FRewardRedStarRingData");
static_assert(sizeof(FRewardRedStarRingData) == 0x000020, "Wrong size on FRewardRedStarRingData");
static_assert(offsetof(FRewardRedStarRingData, Count) == 0x000000, "Member 'FRewardRedStarRingData::Count' has a wrong offset!");
static_assert(offsetof(FRewardRedStarRingData, Description) == 0x000008, "Member 'FRewardRedStarRingData::Description' has a wrong offset!");
static_assert(offsetof(FRewardRedStarRingData, CommendationCategory) == 0x000018, "Member 'FRewardRedStarRingData::CommendationCategory' has a wrong offset!");

// ScriptStruct UnionSystem.InputRewardDetailInfo
// 0x000C (0x000C - 0x0000)
struct FInputRewardDetailInfo final
{
public:
	ERewardType                                   rewardType;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemReleaseType                              ReleaseType;                                       // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputRewardDetailInfo) == 0x000004, "Wrong alignment on FInputRewardDetailInfo");
static_assert(sizeof(FInputRewardDetailInfo) == 0x00000C, "Wrong size on FInputRewardDetailInfo");
static_assert(offsetof(FInputRewardDetailInfo, rewardType) == 0x000000, "Member 'FInputRewardDetailInfo::rewardType' has a wrong offset!");
static_assert(offsetof(FInputRewardDetailInfo, ItemId) == 0x000004, "Member 'FInputRewardDetailInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FInputRewardDetailInfo, ReleaseType) == 0x000008, "Member 'FInputRewardDetailInfo::ReleaseType' has a wrong offset!");

// ScriptStruct UnionSystem.ResultRewardDetailInfo
// 0x000C (0x000C - 0x0000)
struct FResultRewardDetailInfo final
{
public:
	ERewardType                                   rewardType;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemReleaseType                              ReleaseType;                                       // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FResultRewardDetailInfo) == 0x000004, "Wrong alignment on FResultRewardDetailInfo");
static_assert(sizeof(FResultRewardDetailInfo) == 0x00000C, "Wrong size on FResultRewardDetailInfo");
static_assert(offsetof(FResultRewardDetailInfo, rewardType) == 0x000000, "Member 'FResultRewardDetailInfo::rewardType' has a wrong offset!");
static_assert(offsetof(FResultRewardDetailInfo, ItemId) == 0x000004, "Member 'FResultRewardDetailInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FResultRewardDetailInfo, ReleaseType) == 0x000008, "Member 'FResultRewardDetailInfo::ReleaseType' has a wrong offset!");
static_assert(offsetof(FResultRewardDetailInfo, contentId) == 0x000009, "Member 'FResultRewardDetailInfo::contentId' has a wrong offset!");

// ScriptStruct UnionSystem.RivalComLevel
// 0x0010 (0x0018 - 0x0008)
struct FRivalComLevel final : public FTableRowBase
{
public:
	uint8                                         RivalLevel;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NomalLv;                                           // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HighLv;                                            // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SonicLv;                                           // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SuperSonicLv;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MirrorNomalLv;                                     // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MirrorHighLv;                                      // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MirrorSonicLv;                                     // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MirrorSuperSonicLv;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRivalComLevel) == 0x000008, "Wrong alignment on FRivalComLevel");
static_assert(sizeof(FRivalComLevel) == 0x000018, "Wrong size on FRivalComLevel");
static_assert(offsetof(FRivalComLevel, RivalLevel) == 0x000008, "Member 'FRivalComLevel::RivalLevel' has a wrong offset!");
static_assert(offsetof(FRivalComLevel, NomalLv) == 0x000009, "Member 'FRivalComLevel::NomalLv' has a wrong offset!");
static_assert(offsetof(FRivalComLevel, HighLv) == 0x00000A, "Member 'FRivalComLevel::HighLv' has a wrong offset!");
static_assert(offsetof(FRivalComLevel, SonicLv) == 0x00000B, "Member 'FRivalComLevel::SonicLv' has a wrong offset!");
static_assert(offsetof(FRivalComLevel, SuperSonicLv) == 0x00000C, "Member 'FRivalComLevel::SuperSonicLv' has a wrong offset!");
static_assert(offsetof(FRivalComLevel, MirrorNomalLv) == 0x00000D, "Member 'FRivalComLevel::MirrorNomalLv' has a wrong offset!");
static_assert(offsetof(FRivalComLevel, MirrorHighLv) == 0x00000E, "Member 'FRivalComLevel::MirrorHighLv' has a wrong offset!");
static_assert(offsetof(FRivalComLevel, MirrorSonicLv) == 0x00000F, "Member 'FRivalComLevel::MirrorSonicLv' has a wrong offset!");
static_assert(offsetof(FRivalComLevel, MirrorSuperSonicLv) == 0x000010, "Member 'FRivalComLevel::MirrorSuperSonicLv' has a wrong offset!");

// ScriptStruct UnionSystem.RomCheckRomVersionRequest
// 0x0008 (0x0008 - 0x0000)
struct FRomCheckRomVersionRequest final
{
public:
	int32                                         romVersionId;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         romType;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRomCheckRomVersionRequest) == 0x000004, "Wrong alignment on FRomCheckRomVersionRequest");
static_assert(sizeof(FRomCheckRomVersionRequest) == 0x000008, "Wrong size on FRomCheckRomVersionRequest");
static_assert(offsetof(FRomCheckRomVersionRequest, romVersionId) == 0x000000, "Member 'FRomCheckRomVersionRequest::romVersionId' has a wrong offset!");
static_assert(offsetof(FRomCheckRomVersionRequest, romType) == 0x000004, "Member 'FRomCheckRomVersionRequest::romType' has a wrong offset!");

// ScriptStruct UnionSystem.RomCheckRomVersionResponse
// 0x0001 (0x0001 - 0x0000)
struct FRomCheckRomVersionResponse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRomCheckRomVersionResponse) == 0x000001, "Wrong alignment on FRomCheckRomVersionResponse");
static_assert(sizeof(FRomCheckRomVersionResponse) == 0x000001, "Wrong size on FRomCheckRomVersionResponse");

// ScriptStruct UnionSystem.SamplePart1Request
// 0x0018 (0x0018 - 0x0000)
struct FSamplePart1Request final
{
public:
	class FString                                 strData;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         intData;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSamplePart1Request) == 0x000008, "Wrong alignment on FSamplePart1Request");
static_assert(sizeof(FSamplePart1Request) == 0x000018, "Wrong size on FSamplePart1Request");
static_assert(offsetof(FSamplePart1Request, strData) == 0x000000, "Member 'FSamplePart1Request::strData' has a wrong offset!");
static_assert(offsetof(FSamplePart1Request, intData) == 0x000010, "Member 'FSamplePart1Request::intData' has a wrong offset!");

// ScriptStruct UnionSystem.SamplePart1Response
// 0x0028 (0x0028 - 0x0000)
struct FSamplePart1Response final
{
public:
	class FString                                 formStrData;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         formIntData;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         queryString;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         requestHeader;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSamplePart1Response) == 0x000008, "Wrong alignment on FSamplePart1Response");
static_assert(sizeof(FSamplePart1Response) == 0x000028, "Wrong size on FSamplePart1Response");
static_assert(offsetof(FSamplePart1Response, formStrData) == 0x000000, "Member 'FSamplePart1Response::formStrData' has a wrong offset!");
static_assert(offsetof(FSamplePart1Response, formIntData) == 0x000010, "Member 'FSamplePart1Response::formIntData' has a wrong offset!");
static_assert(offsetof(FSamplePart1Response, queryString) == 0x000014, "Member 'FSamplePart1Response::queryString' has a wrong offset!");
static_assert(offsetof(FSamplePart1Response, requestHeader) == 0x000018, "Member 'FSamplePart1Response::requestHeader' has a wrong offset!");

// ScriptStruct UnionSystem.SaveDataHeader
// 0x000C (0x000C - 0x0000)
struct FSaveDataHeader final
{
public:
	int32                                         _Version;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _RomVersion;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _SaveCount;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveDataHeader) == 0x000004, "Wrong alignment on FSaveDataHeader");
static_assert(sizeof(FSaveDataHeader) == 0x00000C, "Wrong size on FSaveDataHeader");
static_assert(offsetof(FSaveDataHeader, _Version) == 0x000000, "Member 'FSaveDataHeader::_Version' has a wrong offset!");
static_assert(offsetof(FSaveDataHeader, _RomVersion) == 0x000004, "Member 'FSaveDataHeader::_RomVersion' has a wrong offset!");
static_assert(offsetof(FSaveDataHeader, _SaveCount) == 0x000008, "Member 'FSaveDataHeader::_SaveCount' has a wrong offset!");

// ScriptStruct UnionSystem.SaveDataTextData
// 0x0050 (0x0058 - 0x0008)
struct FSaveDataTextData final : public FTableRowBase
{
public:
	class FText                                   ApplicationName;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PlayLogName;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   OptionName;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ReplayName;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   NetName;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveDataTextData) == 0x000008, "Wrong alignment on FSaveDataTextData");
static_assert(sizeof(FSaveDataTextData) == 0x000058, "Wrong size on FSaveDataTextData");
static_assert(offsetof(FSaveDataTextData, ApplicationName) == 0x000008, "Member 'FSaveDataTextData::ApplicationName' has a wrong offset!");
static_assert(offsetof(FSaveDataTextData, PlayLogName) == 0x000018, "Member 'FSaveDataTextData::PlayLogName' has a wrong offset!");
static_assert(offsetof(FSaveDataTextData, OptionName) == 0x000028, "Member 'FSaveDataTextData::OptionName' has a wrong offset!");
static_assert(offsetof(FSaveDataTextData, ReplayName) == 0x000038, "Member 'FSaveDataTextData::ReplayName' has a wrong offset!");
static_assert(offsetof(FSaveDataTextData, NetName) == 0x000048, "Member 'FSaveDataTextData::NetName' has a wrong offset!");

// ScriptStruct UnionSystem.ServerList
// 0x0160 (0x0160 - 0x0000)
struct FServerList final
{
public:
	class FString                                 CertSon;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CertNin1;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CertNin2;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CertMic;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CertPc;                                            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Prod;                                              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dev;                                               // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dev1;                                              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dev2;                                              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dev3;                                              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dev4;                                              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dev5;                                              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dev9;                                              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DevOnt;                                            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Test;                                              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mktg;                                              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x50];                                     // 0x0110(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerList) == 0x000008, "Wrong alignment on FServerList");
static_assert(sizeof(FServerList) == 0x000160, "Wrong size on FServerList");
static_assert(offsetof(FServerList, CertSon) == 0x000000, "Member 'FServerList::CertSon' has a wrong offset!");
static_assert(offsetof(FServerList, CertNin1) == 0x000010, "Member 'FServerList::CertNin1' has a wrong offset!");
static_assert(offsetof(FServerList, CertNin2) == 0x000020, "Member 'FServerList::CertNin2' has a wrong offset!");
static_assert(offsetof(FServerList, CertMic) == 0x000030, "Member 'FServerList::CertMic' has a wrong offset!");
static_assert(offsetof(FServerList, CertPc) == 0x000040, "Member 'FServerList::CertPc' has a wrong offset!");
static_assert(offsetof(FServerList, Prod) == 0x000050, "Member 'FServerList::Prod' has a wrong offset!");
static_assert(offsetof(FServerList, Dev) == 0x000060, "Member 'FServerList::Dev' has a wrong offset!");
static_assert(offsetof(FServerList, Dev1) == 0x000070, "Member 'FServerList::Dev1' has a wrong offset!");
static_assert(offsetof(FServerList, Dev2) == 0x000080, "Member 'FServerList::Dev2' has a wrong offset!");
static_assert(offsetof(FServerList, Dev3) == 0x000090, "Member 'FServerList::Dev3' has a wrong offset!");
static_assert(offsetof(FServerList, Dev4) == 0x0000A0, "Member 'FServerList::Dev4' has a wrong offset!");
static_assert(offsetof(FServerList, Dev5) == 0x0000B0, "Member 'FServerList::Dev5' has a wrong offset!");
static_assert(offsetof(FServerList, Dev9) == 0x0000C0, "Member 'FServerList::Dev9' has a wrong offset!");
static_assert(offsetof(FServerList, DevOnt) == 0x0000D0, "Member 'FServerList::DevOnt' has a wrong offset!");
static_assert(offsetof(FServerList, Test) == 0x0000E0, "Member 'FServerList::Test' has a wrong offset!");
static_assert(offsetof(FServerList, Mktg) == 0x0000F0, "Member 'FServerList::Mktg' has a wrong offset!");
static_assert(offsetof(FServerList, Error) == 0x000100, "Member 'FServerList::Error' has a wrong offset!");

// ScriptStruct UnionSystem.SessionKeepaliveRequest
// 0x0001 (0x0001 - 0x0000)
struct FSessionKeepaliveRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSessionKeepaliveRequest) == 0x000001, "Wrong alignment on FSessionKeepaliveRequest");
static_assert(sizeof(FSessionKeepaliveRequest) == 0x000001, "Wrong size on FSessionKeepaliveRequest");

// ScriptStruct UnionSystem.SessionKeepaliveResponse
// 0x0018 (0x0018 - 0x0000)
struct FSessionKeepaliveResponse final
{
public:
	class FString                                 sessionUpdatedAt;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sessionExpirationTimeSec;                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSessionKeepaliveResponse) == 0x000008, "Wrong alignment on FSessionKeepaliveResponse");
static_assert(sizeof(FSessionKeepaliveResponse) == 0x000018, "Wrong size on FSessionKeepaliveResponse");
static_assert(offsetof(FSessionKeepaliveResponse, sessionUpdatedAt) == 0x000000, "Member 'FSessionKeepaliveResponse::sessionUpdatedAt' has a wrong offset!");
static_assert(offsetof(FSessionKeepaliveResponse, sessionExpirationTimeSec) == 0x000010, "Member 'FSessionKeepaliveResponse::sessionExpirationTimeSec' has a wrong offset!");

// ScriptStruct UnionSystem.UnionSimpleAnimEvent
// 0x0040 (0x0040 - 0x0000)
struct FUnionSimpleAnimEvent final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Position;                                          // 0x0004(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CuePath;                                           // 0x0010(0x0020)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Cue;                                               // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionSimpleAnimEvent) == 0x000008, "Wrong alignment on FUnionSimpleAnimEvent");
static_assert(sizeof(FUnionSimpleAnimEvent) == 0x000040, "Wrong size on FUnionSimpleAnimEvent");
static_assert(offsetof(FUnionSimpleAnimEvent, Time) == 0x000000, "Member 'FUnionSimpleAnimEvent::Time' has a wrong offset!");
static_assert(offsetof(FUnionSimpleAnimEvent, Position) == 0x000004, "Member 'FUnionSimpleAnimEvent::Position' has a wrong offset!");
static_assert(offsetof(FUnionSimpleAnimEvent, CuePath) == 0x000010, "Member 'FUnionSimpleAnimEvent::CuePath' has a wrong offset!");
static_assert(offsetof(FUnionSimpleAnimEvent, Volume) == 0x000030, "Member 'FUnionSimpleAnimEvent::Volume' has a wrong offset!");
static_assert(offsetof(FUnionSimpleAnimEvent, Pitch) == 0x000034, "Member 'FUnionSimpleAnimEvent::Pitch' has a wrong offset!");
static_assert(offsetof(FUnionSimpleAnimEvent, Cue) == 0x000038, "Member 'FUnionSimpleAnimEvent::Cue' has a wrong offset!");

// ScriptStruct UnionSystem.StartSaveRankMatchStartRequest
// 0x03C8 (0x03C8 - 0x0000)
struct FStartSaveRankMatchStartRequest final
{
public:
	TArray<class FString>                         entryUserIds;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 entryRaceId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHost;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         characterId;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         courseId;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_MachineData                    MachineData;                                       // 0x0030(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_GadgetData                     GadgetData;                                        // 0x03A0(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_DegreeData                     DegreeData;                                        // 0x03BC(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStartSaveRankMatchStartRequest) == 0x000008, "Wrong alignment on FStartSaveRankMatchStartRequest");
static_assert(sizeof(FStartSaveRankMatchStartRequest) == 0x0003C8, "Wrong size on FStartSaveRankMatchStartRequest");
static_assert(offsetof(FStartSaveRankMatchStartRequest, entryUserIds) == 0x000000, "Member 'FStartSaveRankMatchStartRequest::entryUserIds' has a wrong offset!");
static_assert(offsetof(FStartSaveRankMatchStartRequest, entryRaceId) == 0x000010, "Member 'FStartSaveRankMatchStartRequest::entryRaceId' has a wrong offset!");
static_assert(offsetof(FStartSaveRankMatchStartRequest, IsHost) == 0x000020, "Member 'FStartSaveRankMatchStartRequest::IsHost' has a wrong offset!");
static_assert(offsetof(FStartSaveRankMatchStartRequest, characterId) == 0x000024, "Member 'FStartSaveRankMatchStartRequest::characterId' has a wrong offset!");
static_assert(offsetof(FStartSaveRankMatchStartRequest, courseId) == 0x000028, "Member 'FStartSaveRankMatchStartRequest::courseId' has a wrong offset!");
static_assert(offsetof(FStartSaveRankMatchStartRequest, MachineData) == 0x000030, "Member 'FStartSaveRankMatchStartRequest::MachineData' has a wrong offset!");
static_assert(offsetof(FStartSaveRankMatchStartRequest, GadgetData) == 0x0003A0, "Member 'FStartSaveRankMatchStartRequest::GadgetData' has a wrong offset!");
static_assert(offsetof(FStartSaveRankMatchStartRequest, DegreeData) == 0x0003BC, "Member 'FStartSaveRankMatchStartRequest::DegreeData' has a wrong offset!");

// ScriptStruct UnionSystem.StartSaveRankMatchStartResponse
// 0x0010 (0x0010 - 0x0000)
struct FStartSaveRankMatchStartResponse final
{
public:
	class FString                                 entryRaceId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStartSaveRankMatchStartResponse) == 0x000008, "Wrong alignment on FStartSaveRankMatchStartResponse");
static_assert(sizeof(FStartSaveRankMatchStartResponse) == 0x000010, "Wrong size on FStartSaveRankMatchStartResponse");
static_assert(offsetof(FStartSaveRankMatchStartResponse, entryRaceId) == 0x000000, "Member 'FStartSaveRankMatchStartResponse::entryRaceId' has a wrong offset!");

// ScriptStruct UnionSystem.StartSaveLegendCompeStartRequest
// 0x03D0 (0x03D0 - 0x0000)
struct FStartSaveLegendCompeStartRequest final
{
public:
	int32                                         compeId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         entryUserIds;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 entryRaceId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHost;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         characterId;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         courseId;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_MachineData                    MachineData;                                       // 0x0038(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_GadgetData                     GadgetData;                                        // 0x03A8(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_DegreeData                     DegreeData;                                        // 0x03C4(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStartSaveLegendCompeStartRequest) == 0x000008, "Wrong alignment on FStartSaveLegendCompeStartRequest");
static_assert(sizeof(FStartSaveLegendCompeStartRequest) == 0x0003D0, "Wrong size on FStartSaveLegendCompeStartRequest");
static_assert(offsetof(FStartSaveLegendCompeStartRequest, compeId) == 0x000000, "Member 'FStartSaveLegendCompeStartRequest::compeId' has a wrong offset!");
static_assert(offsetof(FStartSaveLegendCompeStartRequest, entryUserIds) == 0x000008, "Member 'FStartSaveLegendCompeStartRequest::entryUserIds' has a wrong offset!");
static_assert(offsetof(FStartSaveLegendCompeStartRequest, entryRaceId) == 0x000018, "Member 'FStartSaveLegendCompeStartRequest::entryRaceId' has a wrong offset!");
static_assert(offsetof(FStartSaveLegendCompeStartRequest, IsHost) == 0x000028, "Member 'FStartSaveLegendCompeStartRequest::IsHost' has a wrong offset!");
static_assert(offsetof(FStartSaveLegendCompeStartRequest, characterId) == 0x00002C, "Member 'FStartSaveLegendCompeStartRequest::characterId' has a wrong offset!");
static_assert(offsetof(FStartSaveLegendCompeStartRequest, courseId) == 0x000030, "Member 'FStartSaveLegendCompeStartRequest::courseId' has a wrong offset!");
static_assert(offsetof(FStartSaveLegendCompeStartRequest, MachineData) == 0x000038, "Member 'FStartSaveLegendCompeStartRequest::MachineData' has a wrong offset!");
static_assert(offsetof(FStartSaveLegendCompeStartRequest, GadgetData) == 0x0003A8, "Member 'FStartSaveLegendCompeStartRequest::GadgetData' has a wrong offset!");
static_assert(offsetof(FStartSaveLegendCompeStartRequest, DegreeData) == 0x0003C4, "Member 'FStartSaveLegendCompeStartRequest::DegreeData' has a wrong offset!");

// ScriptStruct UnionSystem.StartSaveLegendCompeStartResponse
// 0x0010 (0x0010 - 0x0000)
struct FStartSaveLegendCompeStartResponse final
{
public:
	class FString                                 entryRaceId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStartSaveLegendCompeStartResponse) == 0x000008, "Wrong alignment on FStartSaveLegendCompeStartResponse");
static_assert(sizeof(FStartSaveLegendCompeStartResponse) == 0x000010, "Wrong size on FStartSaveLegendCompeStartResponse");
static_assert(offsetof(FStartSaveLegendCompeStartResponse, entryRaceId) == 0x000000, "Member 'FStartSaveLegendCompeStartResponse::entryRaceId' has a wrong offset!");

// ScriptStruct UnionSystem.StartSaveFestaStartRequest
// 0x03A8 (0x03A8 - 0x0000)
struct FStartSaveFestaStartRequest final
{
public:
	int32                                         festaId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHost;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         characterId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         courseId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommon_MachineData                    MachineData;                                       // 0x0010(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_GadgetData                     GadgetData;                                        // 0x0380(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_DegreeData                     DegreeData;                                        // 0x039C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStartSaveFestaStartRequest) == 0x000008, "Wrong alignment on FStartSaveFestaStartRequest");
static_assert(sizeof(FStartSaveFestaStartRequest) == 0x0003A8, "Wrong size on FStartSaveFestaStartRequest");
static_assert(offsetof(FStartSaveFestaStartRequest, festaId) == 0x000000, "Member 'FStartSaveFestaStartRequest::festaId' has a wrong offset!");
static_assert(offsetof(FStartSaveFestaStartRequest, IsHost) == 0x000004, "Member 'FStartSaveFestaStartRequest::IsHost' has a wrong offset!");
static_assert(offsetof(FStartSaveFestaStartRequest, characterId) == 0x000008, "Member 'FStartSaveFestaStartRequest::characterId' has a wrong offset!");
static_assert(offsetof(FStartSaveFestaStartRequest, courseId) == 0x00000C, "Member 'FStartSaveFestaStartRequest::courseId' has a wrong offset!");
static_assert(offsetof(FStartSaveFestaStartRequest, MachineData) == 0x000010, "Member 'FStartSaveFestaStartRequest::MachineData' has a wrong offset!");
static_assert(offsetof(FStartSaveFestaStartRequest, GadgetData) == 0x000380, "Member 'FStartSaveFestaStartRequest::GadgetData' has a wrong offset!");
static_assert(offsetof(FStartSaveFestaStartRequest, DegreeData) == 0x00039C, "Member 'FStartSaveFestaStartRequest::DegreeData' has a wrong offset!");

// ScriptStruct UnionSystem.StartSaveFestaStartResponse
// 0x0058 (0x0058 - 0x0000)
struct FStartSaveFestaStartResponse final
{
public:
	struct FCommon_FestaBonusData                 bonusData;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          isVoltage;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCommon_FestaTimeData>          timeSchedule;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCommon_FestaBonusChanceData           BonusChanceData;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 entryRaceId;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStartSaveFestaStartResponse) == 0x000008, "Wrong alignment on FStartSaveFestaStartResponse");
static_assert(sizeof(FStartSaveFestaStartResponse) == 0x000058, "Wrong size on FStartSaveFestaStartResponse");
static_assert(offsetof(FStartSaveFestaStartResponse, bonusData) == 0x000000, "Member 'FStartSaveFestaStartResponse::bonusData' has a wrong offset!");
static_assert(offsetof(FStartSaveFestaStartResponse, isVoltage) == 0x000028, "Member 'FStartSaveFestaStartResponse::isVoltage' has a wrong offset!");
static_assert(offsetof(FStartSaveFestaStartResponse, timeSchedule) == 0x000030, "Member 'FStartSaveFestaStartResponse::timeSchedule' has a wrong offset!");
static_assert(offsetof(FStartSaveFestaStartResponse, BonusChanceData) == 0x000040, "Member 'FStartSaveFestaStartResponse::BonusChanceData' has a wrong offset!");
static_assert(offsetof(FStartSaveFestaStartResponse, entryRaceId) == 0x000048, "Member 'FStartSaveFestaStartResponse::entryRaceId' has a wrong offset!");

// ScriptStruct UnionSystem.HonorStatsData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FHonorStatsData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHonorStatsData) == 0x000004, "Wrong alignment on FHonorStatsData");
static_assert(sizeof(FHonorStatsData) == 0x000020, "Wrong size on FHonorStatsData");

// ScriptStruct UnionSystem.StatsDriverData
// 0x0008 (0x0008 - 0x0000)
struct FStatsDriverData final
{
public:
	int32                                         UsedCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         winCount;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatsDriverData) == 0x000004, "Wrong alignment on FStatsDriverData");
static_assert(sizeof(FStatsDriverData) == 0x000008, "Wrong size on FStatsDriverData");
static_assert(offsetof(FStatsDriverData, UsedCount) == 0x000000, "Member 'FStatsDriverData::UsedCount' has a wrong offset!");
static_assert(offsetof(FStatsDriverData, winCount) == 0x000004, "Member 'FStatsDriverData::winCount' has a wrong offset!");

// ScriptStruct UnionSystem.StatsMachineData
// 0x0004 (0x0004 - 0x0000)
struct FStatsMachineData final
{
public:
	int32                                         UsedCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatsMachineData) == 0x000004, "Wrong alignment on FStatsMachineData");
static_assert(sizeof(FStatsMachineData) == 0x000004, "Wrong size on FStatsMachineData");
static_assert(offsetof(FStatsMachineData, UsedCount) == 0x000000, "Member 'FStatsMachineData::UsedCount' has a wrong offset!");

// ScriptStruct UnionSystem.StatsRaceDetailsData
// 0x00A0 (0x00A0 - 0x0000)
struct FStatsRaceDetailsData final
{
public:
	int64                                         TotalDrivingDistance;                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TotalPlayingTime;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TotalRacesCount;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TotalVictoryCount;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartDashCount;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DriftDashCount;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirTrickCount;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargeLv3Count;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DashPanelCount;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OvertakingBeforeGoalCount;                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyDriverCount;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialItemBoxCount;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsedItemCount;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackItemCount;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BackAttackItemCount;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RingsCount;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShortCutRingCount;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedTravelRingCount;                           // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstFastChargeCount;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoatJumpUpCount;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaneTurnCount;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SwitchQuickChargeCount;                            // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JustChargeDashCount;                               // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnhanceRocketPunchCount;                           // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WarpRingCount;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TouchDashCount;                                    // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RingStoleCount;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TechnicalDriftCount;                               // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpinDriftHitCount;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UltimateChargeCount;                               // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TimeTrialCount;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TimeTrialNoHitWallCount;                           // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TimeTrialItemBoxCount;                             // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatsRaceDetailsData) == 0x000008, "Wrong alignment on FStatsRaceDetailsData");
static_assert(sizeof(FStatsRaceDetailsData) == 0x0000A0, "Wrong size on FStatsRaceDetailsData");
static_assert(offsetof(FStatsRaceDetailsData, TotalDrivingDistance) == 0x000000, "Member 'FStatsRaceDetailsData::TotalDrivingDistance' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, TotalPlayingTime) == 0x000008, "Member 'FStatsRaceDetailsData::TotalPlayingTime' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, TotalRacesCount) == 0x000010, "Member 'FStatsRaceDetailsData::TotalRacesCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, TotalVictoryCount) == 0x000018, "Member 'FStatsRaceDetailsData::TotalVictoryCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, StartDashCount) == 0x000020, "Member 'FStatsRaceDetailsData::StartDashCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, DriftDashCount) == 0x000024, "Member 'FStatsRaceDetailsData::DriftDashCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, AirTrickCount) == 0x000028, "Member 'FStatsRaceDetailsData::AirTrickCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, ChargeLv3Count) == 0x00002C, "Member 'FStatsRaceDetailsData::ChargeLv3Count' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, DashPanelCount) == 0x000030, "Member 'FStatsRaceDetailsData::DashPanelCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, OvertakingBeforeGoalCount) == 0x000034, "Member 'FStatsRaceDetailsData::OvertakingBeforeGoalCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, SafetyDriverCount) == 0x000038, "Member 'FStatsRaceDetailsData::SafetyDriverCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, SpecialItemBoxCount) == 0x00003C, "Member 'FStatsRaceDetailsData::SpecialItemBoxCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, UsedItemCount) == 0x000040, "Member 'FStatsRaceDetailsData::UsedItemCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, AttackItemCount) == 0x000044, "Member 'FStatsRaceDetailsData::AttackItemCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, BackAttackItemCount) == 0x000048, "Member 'FStatsRaceDetailsData::BackAttackItemCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, RingsCount) == 0x00004C, "Member 'FStatsRaceDetailsData::RingsCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, ShortCutRingCount) == 0x000050, "Member 'FStatsRaceDetailsData::ShortCutRingCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, SelectedTravelRingCount) == 0x000054, "Member 'FStatsRaceDetailsData::SelectedTravelRingCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, FirstFastChargeCount) == 0x000058, "Member 'FStatsRaceDetailsData::FirstFastChargeCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, BoatJumpUpCount) == 0x00005C, "Member 'FStatsRaceDetailsData::BoatJumpUpCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, PlaneTurnCount) == 0x000060, "Member 'FStatsRaceDetailsData::PlaneTurnCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, SwitchQuickChargeCount) == 0x000064, "Member 'FStatsRaceDetailsData::SwitchQuickChargeCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, JustChargeDashCount) == 0x000068, "Member 'FStatsRaceDetailsData::JustChargeDashCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, EnhanceRocketPunchCount) == 0x00006C, "Member 'FStatsRaceDetailsData::EnhanceRocketPunchCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, WarpRingCount) == 0x000070, "Member 'FStatsRaceDetailsData::WarpRingCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, TouchDashCount) == 0x000074, "Member 'FStatsRaceDetailsData::TouchDashCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, RingStoleCount) == 0x000078, "Member 'FStatsRaceDetailsData::RingStoleCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, TechnicalDriftCount) == 0x00007C, "Member 'FStatsRaceDetailsData::TechnicalDriftCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, SpinDriftHitCount) == 0x000080, "Member 'FStatsRaceDetailsData::SpinDriftHitCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, UltimateChargeCount) == 0x000084, "Member 'FStatsRaceDetailsData::UltimateChargeCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, TimeTrialCount) == 0x000088, "Member 'FStatsRaceDetailsData::TimeTrialCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, TimeTrialNoHitWallCount) == 0x000090, "Member 'FStatsRaceDetailsData::TimeTrialNoHitWallCount' has a wrong offset!");
static_assert(offsetof(FStatsRaceDetailsData, TimeTrialItemBoxCount) == 0x000098, "Member 'FStatsRaceDetailsData::TimeTrialItemBoxCount' has a wrong offset!");

// ScriptStruct UnionSystem.StatsSaveData
// 0x0140 (0x0140 - 0x0000)
struct FStatsSaveData final
{
public:
	TMap<EDriverId, struct FStatsDriverData>      DriverList;                                        // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TMap<EMachineId, struct FStatsMachineData>    MachineList;                                       // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	struct FStatsRaceDetailsData                  RaceDetails;                                       // 0x00A0(0x00A0)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatsSaveData) == 0x000008, "Wrong alignment on FStatsSaveData");
static_assert(sizeof(FStatsSaveData) == 0x000140, "Wrong size on FStatsSaveData");
static_assert(offsetof(FStatsSaveData, DriverList) == 0x000000, "Member 'FStatsSaveData::DriverList' has a wrong offset!");
static_assert(offsetof(FStatsSaveData, MachineList) == 0x000050, "Member 'FStatsSaveData::MachineList' has a wrong offset!");
static_assert(offsetof(FStatsSaveData, RaceDetails) == 0x0000A0, "Member 'FStatsSaveData::RaceDetails' has a wrong offset!");

// ScriptStruct UnionSystem.TimeTrialSetting
// 0x0030 (0x0030 - 0x0000)
struct FTimeTrialSetting final
{
public:
	bool                                          GhostMachineDisable;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LineGuideDisable;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGhostOnline;                                      // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bViewGhostReplay;                                  // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRewardReceived;                                 // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x13];                                       // 0x0005(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EGadgetId>                             DisableGadgetIds;                                  // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentStageVersion;                               // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeTrialSetting) == 0x000008, "Wrong alignment on FTimeTrialSetting");
static_assert(sizeof(FTimeTrialSetting) == 0x000030, "Wrong size on FTimeTrialSetting");
static_assert(offsetof(FTimeTrialSetting, GhostMachineDisable) == 0x000000, "Member 'FTimeTrialSetting::GhostMachineDisable' has a wrong offset!");
static_assert(offsetof(FTimeTrialSetting, LineGuideDisable) == 0x000001, "Member 'FTimeTrialSetting::LineGuideDisable' has a wrong offset!");
static_assert(offsetof(FTimeTrialSetting, bGhostOnline) == 0x000002, "Member 'FTimeTrialSetting::bGhostOnline' has a wrong offset!");
static_assert(offsetof(FTimeTrialSetting, bViewGhostReplay) == 0x000003, "Member 'FTimeTrialSetting::bViewGhostReplay' has a wrong offset!");
static_assert(offsetof(FTimeTrialSetting, bIsRewardReceived) == 0x000004, "Member 'FTimeTrialSetting::bIsRewardReceived' has a wrong offset!");
static_assert(offsetof(FTimeTrialSetting, DisableGadgetIds) == 0x000018, "Member 'FTimeTrialSetting::DisableGadgetIds' has a wrong offset!");
static_assert(offsetof(FTimeTrialSetting, CurrentStageVersion) == 0x000028, "Member 'FTimeTrialSetting::CurrentStageVersion' has a wrong offset!");

// ScriptStruct UnionSystem.TimeTrialRankRatioTableData
// 0x0008 (0x0010 - 0x0008)
struct FTimeTrialRankRatioTableData final : public FTableRowBase
{
public:
	float                                         RankTimeRetio;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeTrialRankRatioTableData) == 0x000008, "Wrong alignment on FTimeTrialRankRatioTableData");
static_assert(sizeof(FTimeTrialRankRatioTableData) == 0x000010, "Wrong size on FTimeTrialRankRatioTableData");
static_assert(offsetof(FTimeTrialRankRatioTableData, RankTimeRetio) == 0x000008, "Member 'FTimeTrialRankRatioTableData::RankTimeRetio' has a wrong offset!");

// ScriptStruct UnionSystem.TimeTrialRankData
// 0x000C (0x000C - 0x0000)
struct FTimeTrialRankData final
{
public:
	ETimeTrialClearRankId                         TimeTrialRank;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextRankTime;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextRankStandardTime;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeTrialRankData) == 0x000004, "Wrong alignment on FTimeTrialRankData");
static_assert(sizeof(FTimeTrialRankData) == 0x00000C, "Wrong size on FTimeTrialRankData");
static_assert(offsetof(FTimeTrialRankData, TimeTrialRank) == 0x000000, "Member 'FTimeTrialRankData::TimeTrialRank' has a wrong offset!");
static_assert(offsetof(FTimeTrialRankData, NextRankTime) == 0x000004, "Member 'FTimeTrialRankData::NextRankTime' has a wrong offset!");
static_assert(offsetof(FTimeTrialRankData, NextRankStandardTime) == 0x000008, "Member 'FTimeTrialRankData::NextRankStandardTime' has a wrong offset!");

// ScriptStruct UnionSystem.TimeTrialResultRewardTableData
// 0x0060 (0x0068 - 0x0008)
struct FTimeTrialResultRewardTableData final : public FTableRowBase
{
public:
	int32                                         TotalMedalCount;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardIdList;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   RewardTitle;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RewardText;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeTrialResultRewardTableData) == 0x000008, "Wrong alignment on FTimeTrialResultRewardTableData");
static_assert(sizeof(FTimeTrialResultRewardTableData) == 0x000068, "Wrong size on FTimeTrialResultRewardTableData");
static_assert(offsetof(FTimeTrialResultRewardTableData, TotalMedalCount) == 0x000008, "Member 'FTimeTrialResultRewardTableData::TotalMedalCount' has a wrong offset!");
static_assert(offsetof(FTimeTrialResultRewardTableData, IconTexture) == 0x000010, "Member 'FTimeTrialResultRewardTableData::IconTexture' has a wrong offset!");
static_assert(offsetof(FTimeTrialResultRewardTableData, RewardIdList) == 0x000038, "Member 'FTimeTrialResultRewardTableData::RewardIdList' has a wrong offset!");
static_assert(offsetof(FTimeTrialResultRewardTableData, RewardTitle) == 0x000048, "Member 'FTimeTrialResultRewardTableData::RewardTitle' has a wrong offset!");
static_assert(offsetof(FTimeTrialResultRewardTableData, RewardText) == 0x000058, "Member 'FTimeTrialResultRewardTableData::RewardText' has a wrong offset!");

// ScriptStruct UnionSystem.TutorialControllerKeysTable
// 0x0010 (0x0018 - 0x0008)
struct FTutorialControllerKeysTable final : public FTableRowBase
{
public:
	TArray<struct FTutorialControllerKeys>        KeyOperationsArray;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialControllerKeysTable) == 0x000008, "Wrong alignment on FTutorialControllerKeysTable");
static_assert(sizeof(FTutorialControllerKeysTable) == 0x000018, "Wrong size on FTutorialControllerKeysTable");
static_assert(offsetof(FTutorialControllerKeysTable, KeyOperationsArray) == 0x000008, "Member 'FTutorialControllerKeysTable::KeyOperationsArray' has a wrong offset!");

// ScriptStruct UnionSystem.ChallengeStruct
// 0x0040 (0x0048 - 0x0008)
struct FChallengeStruct final : public FTableRowBase
{
public:
	int32                                         HonorTitleIndex;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementId;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AchievementKey;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ChallengeName;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ChallengeClearCondition;                           // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         ChallengeMax;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChallengeShowBoundary;                             // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeStruct) == 0x000008, "Wrong alignment on FChallengeStruct");
static_assert(sizeof(FChallengeStruct) == 0x000048, "Wrong size on FChallengeStruct");
static_assert(offsetof(FChallengeStruct, HonorTitleIndex) == 0x000008, "Member 'FChallengeStruct::HonorTitleIndex' has a wrong offset!");
static_assert(offsetof(FChallengeStruct, AchievementId) == 0x00000C, "Member 'FChallengeStruct::AchievementId' has a wrong offset!");
static_assert(offsetof(FChallengeStruct, AchievementKey) == 0x000010, "Member 'FChallengeStruct::AchievementKey' has a wrong offset!");
static_assert(offsetof(FChallengeStruct, ChallengeName) == 0x000020, "Member 'FChallengeStruct::ChallengeName' has a wrong offset!");
static_assert(offsetof(FChallengeStruct, ChallengeClearCondition) == 0x000030, "Member 'FChallengeStruct::ChallengeClearCondition' has a wrong offset!");
static_assert(offsetof(FChallengeStruct, ChallengeMax) == 0x000040, "Member 'FChallengeStruct::ChallengeMax' has a wrong offset!");
static_assert(offsetof(FChallengeStruct, ChallengeShowBoundary) == 0x000044, "Member 'FChallengeStruct::ChallengeShowBoundary' has a wrong offset!");

// ScriptStruct UnionSystem.ChallengeOwnerStruct
// 0x0018 (0x0020 - 0x0008)
struct FChallengeOwnerStruct final : public FTableRowBase
{
public:
	EChallengeCategory                            Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnerNo;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OwnerName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeOwnerStruct) == 0x000008, "Wrong alignment on FChallengeOwnerStruct");
static_assert(sizeof(FChallengeOwnerStruct) == 0x000020, "Wrong size on FChallengeOwnerStruct");
static_assert(offsetof(FChallengeOwnerStruct, Category) == 0x000008, "Member 'FChallengeOwnerStruct::Category' has a wrong offset!");
static_assert(offsetof(FChallengeOwnerStruct, OwnerNo) == 0x00000C, "Member 'FChallengeOwnerStruct::OwnerNo' has a wrong offset!");
static_assert(offsetof(FChallengeOwnerStruct, OwnerName) == 0x000010, "Member 'FChallengeOwnerStruct::OwnerName' has a wrong offset!");

// ScriptStruct UnionSystem.ChallengePointReward
// 0x000C (0x000C - 0x0000)
struct FChallengePointReward final
{
public:
	ERewardType                                   rewardType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RewardNo;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumReward;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengePointReward) == 0x000004, "Wrong alignment on FChallengePointReward");
static_assert(sizeof(FChallengePointReward) == 0x00000C, "Wrong size on FChallengePointReward");
static_assert(offsetof(FChallengePointReward, rewardType) == 0x000000, "Member 'FChallengePointReward::rewardType' has a wrong offset!");
static_assert(offsetof(FChallengePointReward, RewardNo) == 0x000004, "Member 'FChallengePointReward::RewardNo' has a wrong offset!");
static_assert(offsetof(FChallengePointReward, NumReward) == 0x000008, "Member 'FChallengePointReward::NumReward' has a wrong offset!");

// ScriptStruct UnionSystem.ChallengeProgressRewardStruct
// 0x0030 (0x0038 - 0x0008)
struct FChallengeProgressRewardStruct final : public FTableRowBase
{
public:
	struct FChallengePointReward                  FirstPointReward;                                  // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FChallengePointReward                  SecondPointReward;                                 // 0x0014(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FChallengePointReward                  ThirdPointReward;                                  // 0x0020(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FChallengePointReward                  CheckPointReward;                                  // 0x002C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeProgressRewardStruct) == 0x000008, "Wrong alignment on FChallengeProgressRewardStruct");
static_assert(sizeof(FChallengeProgressRewardStruct) == 0x000038, "Wrong size on FChallengeProgressRewardStruct");
static_assert(offsetof(FChallengeProgressRewardStruct, FirstPointReward) == 0x000008, "Member 'FChallengeProgressRewardStruct::FirstPointReward' has a wrong offset!");
static_assert(offsetof(FChallengeProgressRewardStruct, SecondPointReward) == 0x000014, "Member 'FChallengeProgressRewardStruct::SecondPointReward' has a wrong offset!");
static_assert(offsetof(FChallengeProgressRewardStruct, ThirdPointReward) == 0x000020, "Member 'FChallengeProgressRewardStruct::ThirdPointReward' has a wrong offset!");
static_assert(offsetof(FChallengeProgressRewardStruct, CheckPointReward) == 0x00002C, "Member 'FChallengeProgressRewardStruct::CheckPointReward' has a wrong offset!");

// ScriptStruct UnionSystem.ChallengeAchievementStruct
// 0x0028 (0x0030 - 0x0008)
struct FChallengeAchievementStruct final : public FTableRowBase
{
public:
	int32                                         ChallengeNo;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChallengeAchivement>                  AchivementColor;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           AchivementID;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeAchievementStruct) == 0x000008, "Wrong alignment on FChallengeAchievementStruct");
static_assert(sizeof(FChallengeAchievementStruct) == 0x000030, "Wrong size on FChallengeAchievementStruct");
static_assert(offsetof(FChallengeAchievementStruct, ChallengeNo) == 0x000008, "Member 'FChallengeAchievementStruct::ChallengeNo' has a wrong offset!");
static_assert(offsetof(FChallengeAchievementStruct, AchivementColor) == 0x000010, "Member 'FChallengeAchievementStruct::AchivementColor' has a wrong offset!");
static_assert(offsetof(FChallengeAchievementStruct, AchivementID) == 0x000020, "Member 'FChallengeAchievementStruct::AchivementID' has a wrong offset!");

// ScriptStruct UnionSystem.PackageData
// 0x0008 (0x0010 - 0x0008)
struct FPackageData final : public FTableRowBase
{
public:
	int32                                         P_Id;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPackageData) == 0x000008, "Wrong alignment on FPackageData");
static_assert(sizeof(FPackageData) == 0x000010, "Wrong size on FPackageData");
static_assert(offsetof(FPackageData, P_Id) == 0x000008, "Member 'FPackageData::P_Id' has a wrong offset!");
static_assert(offsetof(FPackageData, contentId) == 0x00000C, "Member 'FPackageData::contentId' has a wrong offset!");

// ScriptStruct UnionSystem.ContentData_Chara
// 0x0008 (0x0010 - 0x0008)
struct FContentData_Chara final : public FTableRowBase
{
public:
	int32                                         P_Id;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContentData_Chara) == 0x000008, "Wrong alignment on FContentData_Chara");
static_assert(sizeof(FContentData_Chara) == 0x000010, "Wrong size on FContentData_Chara");
static_assert(offsetof(FContentData_Chara, P_Id) == 0x000008, "Member 'FContentData_Chara::P_Id' has a wrong offset!");
static_assert(offsetof(FContentData_Chara, contentId) == 0x00000C, "Member 'FContentData_Chara::contentId' has a wrong offset!");
static_assert(offsetof(FContentData_Chara, DriverId) == 0x00000D, "Member 'FContentData_Chara::DriverId' has a wrong offset!");

// ScriptStruct UnionSystem.ContentData_Machine
// 0x0008 (0x0010 - 0x0008)
struct FContentData_Machine final : public FTableRowBase
{
public:
	int32                                         P_Id;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    MachineId;                                         // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContentData_Machine) == 0x000008, "Wrong alignment on FContentData_Machine");
static_assert(sizeof(FContentData_Machine) == 0x000010, "Wrong size on FContentData_Machine");
static_assert(offsetof(FContentData_Machine, P_Id) == 0x000008, "Member 'FContentData_Machine::P_Id' has a wrong offset!");
static_assert(offsetof(FContentData_Machine, contentId) == 0x00000C, "Member 'FContentData_Machine::contentId' has a wrong offset!");
static_assert(offsetof(FContentData_Machine, MachineId) == 0x00000D, "Member 'FContentData_Machine::MachineId' has a wrong offset!");

// ScriptStruct UnionSystem.ContentData_Stage
// 0x0008 (0x0010 - 0x0008)
struct FContentData_Stage final : public FTableRowBase
{
public:
	int32                                         P_Id;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStageId                                      StageId;                                           // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContentData_Stage) == 0x000008, "Wrong alignment on FContentData_Stage");
static_assert(sizeof(FContentData_Stage) == 0x000010, "Wrong size on FContentData_Stage");
static_assert(offsetof(FContentData_Stage, P_Id) == 0x000008, "Member 'FContentData_Stage::P_Id' has a wrong offset!");
static_assert(offsetof(FContentData_Stage, contentId) == 0x00000C, "Member 'FContentData_Stage::contentId' has a wrong offset!");
static_assert(offsetof(FContentData_Stage, StageId) == 0x00000D, "Member 'FContentData_Stage::StageId' has a wrong offset!");

// ScriptStruct UnionSystem.ContentData_Sticker
// 0x0010 (0x0018 - 0x0008)
struct FContentData_Sticker final : public FTableRowBase
{
public:
	int32                                         P_Id;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         stickerId;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContentData_Sticker) == 0x000008, "Wrong alignment on FContentData_Sticker");
static_assert(sizeof(FContentData_Sticker) == 0x000018, "Wrong size on FContentData_Sticker");
static_assert(offsetof(FContentData_Sticker, P_Id) == 0x000008, "Member 'FContentData_Sticker::P_Id' has a wrong offset!");
static_assert(offsetof(FContentData_Sticker, contentId) == 0x00000C, "Member 'FContentData_Sticker::contentId' has a wrong offset!");
static_assert(offsetof(FContentData_Sticker, stickerId) == 0x000010, "Member 'FContentData_Sticker::stickerId' has a wrong offset!");

// ScriptStruct UnionSystem.ContentData_HonorTitle
// 0x0010 (0x0018 - 0x0008)
struct FContentData_HonorTitle final : public FTableRowBase
{
public:
	int32                                         P_Id;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HonorTitleId;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContentData_HonorTitle) == 0x000008, "Wrong alignment on FContentData_HonorTitle");
static_assert(sizeof(FContentData_HonorTitle) == 0x000018, "Wrong size on FContentData_HonorTitle");
static_assert(offsetof(FContentData_HonorTitle, P_Id) == 0x000008, "Member 'FContentData_HonorTitle::P_Id' has a wrong offset!");
static_assert(offsetof(FContentData_HonorTitle, contentId) == 0x00000C, "Member 'FContentData_HonorTitle::contentId' has a wrong offset!");
static_assert(offsetof(FContentData_HonorTitle, HonorTitleId) == 0x000010, "Member 'FContentData_HonorTitle::HonorTitleId' has a wrong offset!");

// ScriptStruct UnionSystem.ContentData_Album
// 0x0010 (0x0018 - 0x0008)
struct FContentData_Album final : public FTableRowBase
{
public:
	int32                                         P_Id;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AlbumID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContentData_Album) == 0x000008, "Wrong alignment on FContentData_Album");
static_assert(sizeof(FContentData_Album) == 0x000018, "Wrong size on FContentData_Album");
static_assert(offsetof(FContentData_Album, P_Id) == 0x000008, "Member 'FContentData_Album::P_Id' has a wrong offset!");
static_assert(offsetof(FContentData_Album, contentId) == 0x00000C, "Member 'FContentData_Album::contentId' has a wrong offset!");
static_assert(offsetof(FContentData_Album, AlbumID) == 0x000010, "Member 'FContentData_Album::AlbumID' has a wrong offset!");

// ScriptStruct UnionSystem.ContentCharaData
// 0x0010 (0x0010 - 0x0000)
struct FContentCharaData final
{
public:
	TArray<EDriverId>                             DriverIds;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentCharaData) == 0x000008, "Wrong alignment on FContentCharaData");
static_assert(sizeof(FContentCharaData) == 0x000010, "Wrong size on FContentCharaData");
static_assert(offsetof(FContentCharaData, DriverIds) == 0x000000, "Member 'FContentCharaData::DriverIds' has a wrong offset!");

// ScriptStruct UnionSystem.ContentMachineData
// 0x0010 (0x0010 - 0x0000)
struct FContentMachineData final
{
public:
	TArray<EMachineId>                            MachineIds;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentMachineData) == 0x000008, "Wrong alignment on FContentMachineData");
static_assert(sizeof(FContentMachineData) == 0x000010, "Wrong size on FContentMachineData");
static_assert(offsetof(FContentMachineData, MachineIds) == 0x000000, "Member 'FContentMachineData::MachineIds' has a wrong offset!");

// ScriptStruct UnionSystem.ContentStageData
// 0x0010 (0x0010 - 0x0000)
struct FContentStageData final
{
public:
	TArray<EStageId>                              StageIds;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentStageData) == 0x000008, "Wrong alignment on FContentStageData");
static_assert(sizeof(FContentStageData) == 0x000010, "Wrong size on FContentStageData");
static_assert(offsetof(FContentStageData, StageIds) == 0x000000, "Member 'FContentStageData::StageIds' has a wrong offset!");

// ScriptStruct UnionSystem.ContentStickerData
// 0x0010 (0x0010 - 0x0000)
struct FContentStickerData final
{
public:
	TArray<int32>                                 StickerIds;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentStickerData) == 0x000008, "Wrong alignment on FContentStickerData");
static_assert(sizeof(FContentStickerData) == 0x000010, "Wrong size on FContentStickerData");
static_assert(offsetof(FContentStickerData, StickerIds) == 0x000000, "Member 'FContentStickerData::StickerIds' has a wrong offset!");

// ScriptStruct UnionSystem.ContentUserTitleData
// 0x0010 (0x0010 - 0x0000)
struct FContentUserTitleData final
{
public:
	TArray<int32>                                 UserTitleIds;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentUserTitleData) == 0x000008, "Wrong alignment on FContentUserTitleData");
static_assert(sizeof(FContentUserTitleData) == 0x000010, "Wrong size on FContentUserTitleData");
static_assert(offsetof(FContentUserTitleData, UserTitleIds) == 0x000000, "Member 'FContentUserTitleData::UserTitleIds' has a wrong offset!");

// ScriptStruct UnionSystem.ContentHonorTitleData
// 0x0010 (0x0010 - 0x0000)
struct FContentHonorTitleData final
{
public:
	TArray<int32>                                 HonorTitleIds;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentHonorTitleData) == 0x000008, "Wrong alignment on FContentHonorTitleData");
static_assert(sizeof(FContentHonorTitleData) == 0x000010, "Wrong size on FContentHonorTitleData");
static_assert(offsetof(FContentHonorTitleData, HonorTitleIds) == 0x000000, "Member 'FContentHonorTitleData::HonorTitleIds' has a wrong offset!");

// ScriptStruct UnionSystem.ContentAlbumData
// 0x0010 (0x0010 - 0x0000)
struct FContentAlbumData final
{
public:
	TArray<int32>                                 AlbumIds;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentAlbumData) == 0x000008, "Wrong alignment on FContentAlbumData");
static_assert(sizeof(FContentAlbumData) == 0x000010, "Wrong size on FContentAlbumData");
static_assert(offsetof(FContentAlbumData, AlbumIds) == 0x000000, "Member 'FContentAlbumData::AlbumIds' has a wrong offset!");

// ScriptStruct UnionSystem.UnionCueSheetIdDataTable
// 0x0008 (0x0010 - 0x0008)
struct FUnionCueSheetIdDataTable final : public FTableRowBase
{
public:
	class UUnionCueSheetIdDataAsset*              CueSheetIds;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionCueSheetIdDataTable) == 0x000008, "Wrong alignment on FUnionCueSheetIdDataTable");
static_assert(sizeof(FUnionCueSheetIdDataTable) == 0x000010, "Wrong size on FUnionCueSheetIdDataTable");
static_assert(offsetof(FUnionCueSheetIdDataTable, CueSheetIds) == 0x000008, "Member 'FUnionCueSheetIdDataTable::CueSheetIds' has a wrong offset!");

// ScriptStruct UnionSystem.OnlineErrorTextData
// 0x0058 (0x0060 - 0x0008)
struct FOnlineErrorTextData final : public FTableRowBase
{
public:
	EOnlineErrorId                                OnlineErrorId;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   BodyPS;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   BodyGDK;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ReturnTopMenu;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnlineErrorTextData) == 0x000008, "Wrong alignment on FOnlineErrorTextData");
static_assert(sizeof(FOnlineErrorTextData) == 0x000060, "Wrong size on FOnlineErrorTextData");
static_assert(offsetof(FOnlineErrorTextData, OnlineErrorId) == 0x000008, "Member 'FOnlineErrorTextData::OnlineErrorId' has a wrong offset!");
static_assert(offsetof(FOnlineErrorTextData, Title) == 0x000010, "Member 'FOnlineErrorTextData::Title' has a wrong offset!");
static_assert(offsetof(FOnlineErrorTextData, Body) == 0x000020, "Member 'FOnlineErrorTextData::Body' has a wrong offset!");
static_assert(offsetof(FOnlineErrorTextData, BodyPS) == 0x000030, "Member 'FOnlineErrorTextData::BodyPS' has a wrong offset!");
static_assert(offsetof(FOnlineErrorTextData, BodyGDK) == 0x000040, "Member 'FOnlineErrorTextData::BodyGDK' has a wrong offset!");
static_assert(offsetof(FOnlineErrorTextData, ReturnTopMenu) == 0x000050, "Member 'FOnlineErrorTextData::ReturnTopMenu' has a wrong offset!");

// ScriptStruct UnionSystem.ServerErrorTextData
// 0x0038 (0x0040 - 0x0008)
struct FServerErrorTextData final : public FTableRowBase
{
public:
	EResponseCodeAbstract                         ResponseCodeAbstract;                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ReturnTopMenu;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerErrorTextData) == 0x000008, "Wrong alignment on FServerErrorTextData");
static_assert(sizeof(FServerErrorTextData) == 0x000040, "Wrong size on FServerErrorTextData");
static_assert(offsetof(FServerErrorTextData, ResponseCodeAbstract) == 0x000008, "Member 'FServerErrorTextData::ResponseCodeAbstract' has a wrong offset!");
static_assert(offsetof(FServerErrorTextData, Title) == 0x000010, "Member 'FServerErrorTextData::Title' has a wrong offset!");
static_assert(offsetof(FServerErrorTextData, Body) == 0x000020, "Member 'FServerErrorTextData::Body' has a wrong offset!");
static_assert(offsetof(FServerErrorTextData, ReturnTopMenu) == 0x000030, "Member 'FServerErrorTextData::ReturnTopMenu' has a wrong offset!");

// ScriptStruct UnionSystem.AppendErrorParam
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FAppendErrorParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppendErrorParam) == 0x000004, "Wrong alignment on FAppendErrorParam");
static_assert(sizeof(FAppendErrorParam) == 0x000008, "Wrong size on FAppendErrorParam");

// ScriptStruct UnionSystem.UnionErrorObject
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FUnionErrorObject final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionErrorObject) == 0x000008, "Wrong alignment on FUnionErrorObject");
static_assert(sizeof(FUnionErrorObject) == 0x000058, "Wrong size on FUnionErrorObject");

// ScriptStruct UnionSystem.ForceFeedbackParametersEx
// 0x000C (0x000C - 0x0000)
struct FForceFeedbackParametersEx final
{
public:
	uint8                                         _PrevIndex;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _PrevTickCount;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bNowLooping;                                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FForceFeedbackParametersEx) == 0x000004, "Wrong alignment on FForceFeedbackParametersEx");
static_assert(sizeof(FForceFeedbackParametersEx) == 0x00000C, "Wrong size on FForceFeedbackParametersEx");
static_assert(offsetof(FForceFeedbackParametersEx, _PrevIndex) == 0x000000, "Member 'FForceFeedbackParametersEx::_PrevIndex' has a wrong offset!");
static_assert(offsetof(FForceFeedbackParametersEx, _PrevTickCount) == 0x000004, "Member 'FForceFeedbackParametersEx::_PrevTickCount' has a wrong offset!");
static_assert(offsetof(FForceFeedbackParametersEx, _bNowLooping) == 0x000008, "Member 'FForceFeedbackParametersEx::_bNowLooping' has a wrong offset!");

// ScriptStruct UnionSystem.UnionNode
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FUnionNode final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionNode) == 0x000008, "Wrong alignment on FUnionNode");
static_assert(sizeof(FUnionNode) == 0x000048, "Wrong size on FUnionNode");

// ScriptStruct UnionSystem.MovieEnum
// 0x0020 (0x0028 - 0x0008)
struct FMovieEnum final : public FTableRowBase
{
public:
	class UManaMovie*                             MovieSource_1080p;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UManaMovie*                             MovieSource_4k;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Cue;                                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAlphaMovie;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFullScreenMovie;                                 // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieEnum) == 0x000008, "Wrong alignment on FMovieEnum");
static_assert(sizeof(FMovieEnum) == 0x000028, "Wrong size on FMovieEnum");
static_assert(offsetof(FMovieEnum, MovieSource_1080p) == 0x000008, "Member 'FMovieEnum::MovieSource_1080p' has a wrong offset!");
static_assert(offsetof(FMovieEnum, MovieSource_4k) == 0x000010, "Member 'FMovieEnum::MovieSource_4k' has a wrong offset!");
static_assert(offsetof(FMovieEnum, Cue) == 0x000018, "Member 'FMovieEnum::Cue' has a wrong offset!");
static_assert(offsetof(FMovieEnum, IsAlphaMovie) == 0x000020, "Member 'FMovieEnum::IsAlphaMovie' has a wrong offset!");
static_assert(offsetof(FMovieEnum, IsFullScreenMovie) == 0x000021, "Member 'FMovieEnum::IsFullScreenMovie' has a wrong offset!");

// ScriptStruct UnionSystem.CRMMatchingRegistrationNotSyncData
// 0x0008 (0x0008 - 0x0000)
struct FCRMMatchingRegistrationNotSyncData final
{
public:
	int32                                         GameMode;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECRMSquadMemberFlag                           SquadMemberFlag;                                   // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRMMatchingRegistrationNotSyncData) == 0x000004, "Wrong alignment on FCRMMatchingRegistrationNotSyncData");
static_assert(sizeof(FCRMMatchingRegistrationNotSyncData) == 0x000008, "Wrong size on FCRMMatchingRegistrationNotSyncData");
static_assert(offsetof(FCRMMatchingRegistrationNotSyncData, GameMode) == 0x000000, "Member 'FCRMMatchingRegistrationNotSyncData::GameMode' has a wrong offset!");
static_assert(offsetof(FCRMMatchingRegistrationNotSyncData, SquadMemberFlag) == 0x000004, "Member 'FCRMMatchingRegistrationNotSyncData::SquadMemberFlag' has a wrong offset!");

// ScriptStruct UnionSystem.CRMMatchingResultNotSyncData
// 0x000C (0x000C - 0x0000)
struct FCRMMatchingResultNotSyncData final
{
public:
	int32                                         GameMode;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MatchmakingElapsedTime;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECRMSquadMemberFlag                           SquadMemberFlag;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCRMMatchingResultNotSyncData) == 0x000004, "Wrong alignment on FCRMMatchingResultNotSyncData");
static_assert(sizeof(FCRMMatchingResultNotSyncData) == 0x00000C, "Wrong size on FCRMMatchingResultNotSyncData");
static_assert(offsetof(FCRMMatchingResultNotSyncData, GameMode) == 0x000000, "Member 'FCRMMatchingResultNotSyncData::GameMode' has a wrong offset!");
static_assert(offsetof(FCRMMatchingResultNotSyncData, MatchmakingElapsedTime) == 0x000004, "Member 'FCRMMatchingResultNotSyncData::MatchmakingElapsedTime' has a wrong offset!");
static_assert(offsetof(FCRMMatchingResultNotSyncData, SquadMemberFlag) == 0x000008, "Member 'FCRMMatchingResultNotSyncData::SquadMemberFlag' has a wrong offset!");

// ScriptStruct UnionSystem.LobbyDoesMatchOnlineSettings
// 0x0020 (0x0020 - 0x0000)
struct FLobbyDoesMatchOnlineSettings final
{
public:
	bool                                          bCrossPlay;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlatform;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHostAllowCrossPlay;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HostPlatform;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasterDataVersionSum;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyDoesMatchOnlineSettings) == 0x000008, "Wrong alignment on FLobbyDoesMatchOnlineSettings");
static_assert(sizeof(FLobbyDoesMatchOnlineSettings) == 0x000020, "Wrong size on FLobbyDoesMatchOnlineSettings");
static_assert(offsetof(FLobbyDoesMatchOnlineSettings, bCrossPlay) == 0x000000, "Member 'FLobbyDoesMatchOnlineSettings::bCrossPlay' has a wrong offset!");
static_assert(offsetof(FLobbyDoesMatchOnlineSettings, bPlatform) == 0x000001, "Member 'FLobbyDoesMatchOnlineSettings::bPlatform' has a wrong offset!");
static_assert(offsetof(FLobbyDoesMatchOnlineSettings, bHostAllowCrossPlay) == 0x000002, "Member 'FLobbyDoesMatchOnlineSettings::bHostAllowCrossPlay' has a wrong offset!");
static_assert(offsetof(FLobbyDoesMatchOnlineSettings, HostPlatform) == 0x000008, "Member 'FLobbyDoesMatchOnlineSettings::HostPlatform' has a wrong offset!");
static_assert(offsetof(FLobbyDoesMatchOnlineSettings, MasterDataVersionSum) == 0x000018, "Member 'FLobbyDoesMatchOnlineSettings::MasterDataVersionSum' has a wrong offset!");

// ScriptStruct UnionSystem.CRMConnectionErrorExtend
// 0x0001 (0x0001 - 0x0000)
struct FCRMConnectionErrorExtend final
{
public:
	bool                                          bUseV112Extention;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCRMConnectionErrorExtend) == 0x000001, "Wrong alignment on FCRMConnectionErrorExtend");
static_assert(sizeof(FCRMConnectionErrorExtend) == 0x000001, "Wrong size on FCRMConnectionErrorExtend");
static_assert(offsetof(FCRMConnectionErrorExtend, bUseV112Extention) == 0x000000, "Member 'FCRMConnectionErrorExtend::bUseV112Extention' has a wrong offset!");

// ScriptStruct UnionSystem.SoftwareKeyBoardNormalParam
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FSoftwareKeyBoardNormalParam final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoftwareKeyBoardNormalParam) == 0x000008, "Wrong alignment on FSoftwareKeyBoardNormalParam");
static_assert(sizeof(FSoftwareKeyBoardNormalParam) == 0x000028, "Wrong size on FSoftwareKeyBoardNormalParam");

// ScriptStruct UnionSystem.SoftwareKeyBoardFloatingParam
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FSoftwareKeyBoardFloatingParam final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoftwareKeyBoardFloatingParam) == 0x000004, "Wrong alignment on FSoftwareKeyBoardFloatingParam");
static_assert(sizeof(FSoftwareKeyBoardFloatingParam) == 0x000014, "Wrong size on FSoftwareKeyBoardFloatingParam");

// ScriptStruct UnionSystem.SoftwareKeyBoardBootParam
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FSoftwareKeyBoardBootParam final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoftwareKeyBoardBootParam) == 0x000008, "Wrong alignment on FSoftwareKeyBoardBootParam");
static_assert(sizeof(FSoftwareKeyBoardBootParam) == 0x000058, "Wrong size on FSoftwareKeyBoardBootParam");

// ScriptStruct UnionSystem.PresencePFFriendInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FPresencePFFriendInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPresencePFFriendInfo) == 0x000008, "Wrong alignment on FPresencePFFriendInfo");
static_assert(sizeof(FPresencePFFriendInfo) == 0x000028, "Wrong size on FPresencePFFriendInfo");

// ScriptStruct UnionSystem.PresenceTextData
// 0x0018 (0x0020 - 0x0008)
struct FPresenceTextData final : public FTableRowBase
{
public:
	EUnionPresenceType                            Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Body;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresenceTextData) == 0x000008, "Wrong alignment on FPresenceTextData");
static_assert(sizeof(FPresenceTextData) == 0x000020, "Wrong size on FPresenceTextData");
static_assert(offsetof(FPresenceTextData, Type) == 0x000008, "Member 'FPresenceTextData::Type' has a wrong offset!");
static_assert(offsetof(FPresenceTextData, Body) == 0x000010, "Member 'FPresenceTextData::Body' has a wrong offset!");

// ScriptStruct UnionSystem.UnionTravelRingSettings
// 0x0020 (0x0020 - 0x0000)
struct FUnionTravelRingSettings final
{
public:
	bool                                          TravelRingDrawOtherWorld;                          // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingReflectionEnvironment;                   // 0x0001(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingIndirectLightingCache;                   // 0x0002(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingVolumetricLightmap;                      // 0x0003(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingAmbientCubemap;                          // 0x0004(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingGlobalIllumination;                      // 0x0005(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingContactShadows;                          // 0x0006(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingRayTracedDistanceFieldShadows;           // 0x0007(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingSubsurfaceScattering;                    // 0x0008(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingAtmosphere;                              // 0x0009(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingSkyLighting;                             // 0x000A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingAmbientOcculusion;                       // 0x000B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingLightShafts;                             // 0x000C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingDecals;                                  // 0x000D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingFog;                                     // 0x000E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingMotionBlur;                              // 0x000F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingPostProcessing;                          // 0x0010(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingBloom;                                   // 0x0011(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingTonemapper;                              // 0x0012(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingAntiAliasing;                            // 0x0013(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingTemporalAA;                              // 0x0014(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingToneCurve;                               // 0x0015(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingScreenSpaceReflections;                  // 0x0016(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingScreenSpaceAO;                           // 0x0017(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingEyeAdaptation;                           // 0x0018(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TravelRingColorGrading;                            // 0x0019(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TravelRingFarClipDistance;                         // 0x001C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionTravelRingSettings) == 0x000004, "Wrong alignment on FUnionTravelRingSettings");
static_assert(sizeof(FUnionTravelRingSettings) == 0x000020, "Wrong size on FUnionTravelRingSettings");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingDrawOtherWorld) == 0x000000, "Member 'FUnionTravelRingSettings::TravelRingDrawOtherWorld' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingReflectionEnvironment) == 0x000001, "Member 'FUnionTravelRingSettings::TravelRingReflectionEnvironment' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingIndirectLightingCache) == 0x000002, "Member 'FUnionTravelRingSettings::TravelRingIndirectLightingCache' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingVolumetricLightmap) == 0x000003, "Member 'FUnionTravelRingSettings::TravelRingVolumetricLightmap' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingAmbientCubemap) == 0x000004, "Member 'FUnionTravelRingSettings::TravelRingAmbientCubemap' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingGlobalIllumination) == 0x000005, "Member 'FUnionTravelRingSettings::TravelRingGlobalIllumination' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingContactShadows) == 0x000006, "Member 'FUnionTravelRingSettings::TravelRingContactShadows' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingRayTracedDistanceFieldShadows) == 0x000007, "Member 'FUnionTravelRingSettings::TravelRingRayTracedDistanceFieldShadows' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingSubsurfaceScattering) == 0x000008, "Member 'FUnionTravelRingSettings::TravelRingSubsurfaceScattering' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingAtmosphere) == 0x000009, "Member 'FUnionTravelRingSettings::TravelRingAtmosphere' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingSkyLighting) == 0x00000A, "Member 'FUnionTravelRingSettings::TravelRingSkyLighting' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingAmbientOcculusion) == 0x00000B, "Member 'FUnionTravelRingSettings::TravelRingAmbientOcculusion' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingLightShafts) == 0x00000C, "Member 'FUnionTravelRingSettings::TravelRingLightShafts' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingDecals) == 0x00000D, "Member 'FUnionTravelRingSettings::TravelRingDecals' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingFog) == 0x00000E, "Member 'FUnionTravelRingSettings::TravelRingFog' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingMotionBlur) == 0x00000F, "Member 'FUnionTravelRingSettings::TravelRingMotionBlur' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingPostProcessing) == 0x000010, "Member 'FUnionTravelRingSettings::TravelRingPostProcessing' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingBloom) == 0x000011, "Member 'FUnionTravelRingSettings::TravelRingBloom' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingTonemapper) == 0x000012, "Member 'FUnionTravelRingSettings::TravelRingTonemapper' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingAntiAliasing) == 0x000013, "Member 'FUnionTravelRingSettings::TravelRingAntiAliasing' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingTemporalAA) == 0x000014, "Member 'FUnionTravelRingSettings::TravelRingTemporalAA' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingToneCurve) == 0x000015, "Member 'FUnionTravelRingSettings::TravelRingToneCurve' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingScreenSpaceReflections) == 0x000016, "Member 'FUnionTravelRingSettings::TravelRingScreenSpaceReflections' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingScreenSpaceAO) == 0x000017, "Member 'FUnionTravelRingSettings::TravelRingScreenSpaceAO' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingEyeAdaptation) == 0x000018, "Member 'FUnionTravelRingSettings::TravelRingEyeAdaptation' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingColorGrading) == 0x000019, "Member 'FUnionTravelRingSettings::TravelRingColorGrading' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingSettings, TravelRingFarClipDistance) == 0x00001C, "Member 'FUnionTravelRingSettings::TravelRingFarClipDistance' has a wrong offset!");

// ScriptStruct UnionSystem.UnionQualitySettings
// 0x0068 (0x0068 - 0x0000)
struct FUnionQualitySettings final
{
public:
	EResourceQuality                              ResourceQuality;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialQuality                              GarageMaterialQuality;                             // 0x0001(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StickerEditorSreenPercentages;                     // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialQuality                              MaterialQualities[0x3];                            // 0x0008(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinLoDPC[0x3];                                     // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLoDNonPC[0x3];                                  // 0x0018(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          GFur[0x3];                                         // 0x0024(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShadowQualities[0x3];                              // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarClipDistances[0x3];                             // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          DynamicResolutions[0x3];                           // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreenPercentages[0x3];                            // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenPercentagesTypeB[0x3];                       // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          FidelityFXFSR[0x3];                                // 0x005C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          FidelityFXRCAS[0x3];                               // 0x005F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENiagaraQuality                               NiagaraQualities[0x3];                             // 0x0062(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionQualitySettings) == 0x000004, "Wrong alignment on FUnionQualitySettings");
static_assert(sizeof(FUnionQualitySettings) == 0x000068, "Wrong size on FUnionQualitySettings");
static_assert(offsetof(FUnionQualitySettings, ResourceQuality) == 0x000000, "Member 'FUnionQualitySettings::ResourceQuality' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, GarageMaterialQuality) == 0x000001, "Member 'FUnionQualitySettings::GarageMaterialQuality' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, StickerEditorSreenPercentages) == 0x000004, "Member 'FUnionQualitySettings::StickerEditorSreenPercentages' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, MaterialQualities) == 0x000008, "Member 'FUnionQualitySettings::MaterialQualities' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, MinLoDPC) == 0x00000C, "Member 'FUnionQualitySettings::MinLoDPC' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, MinLoDNonPC) == 0x000018, "Member 'FUnionQualitySettings::MinLoDNonPC' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, GFur) == 0x000024, "Member 'FUnionQualitySettings::GFur' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, ShadowQualities) == 0x000028, "Member 'FUnionQualitySettings::ShadowQualities' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, FarClipDistances) == 0x000034, "Member 'FUnionQualitySettings::FarClipDistances' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, DynamicResolutions) == 0x000040, "Member 'FUnionQualitySettings::DynamicResolutions' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, ScreenPercentages) == 0x000044, "Member 'FUnionQualitySettings::ScreenPercentages' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, ScreenPercentagesTypeB) == 0x000050, "Member 'FUnionQualitySettings::ScreenPercentagesTypeB' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, FidelityFXFSR) == 0x00005C, "Member 'FUnionQualitySettings::FidelityFXFSR' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, FidelityFXRCAS) == 0x00005F, "Member 'FUnionQualitySettings::FidelityFXRCAS' has a wrong offset!");
static_assert(offsetof(FUnionQualitySettings, NiagaraQualities) == 0x000062, "Member 'FUnionQualitySettings::NiagaraQualities' has a wrong offset!");

// ScriptStruct UnionSystem.UnionCastShadowSettings
// 0x0003 (0x0003 - 0x0000)
struct FUnionCastShadowSettings final
{
public:
	bool                                          DashPanel;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ring;                                              // 0x0001(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemBox;                                           // 0x0002(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionCastShadowSettings) == 0x000001, "Wrong alignment on FUnionCastShadowSettings");
static_assert(sizeof(FUnionCastShadowSettings) == 0x000003, "Wrong size on FUnionCastShadowSettings");
static_assert(offsetof(FUnionCastShadowSettings, DashPanel) == 0x000000, "Member 'FUnionCastShadowSettings::DashPanel' has a wrong offset!");
static_assert(offsetof(FUnionCastShadowSettings, Ring) == 0x000001, "Member 'FUnionCastShadowSettings::Ring' has a wrong offset!");
static_assert(offsetof(FUnionCastShadowSettings, ItemBox) == 0x000002, "Member 'FUnionCastShadowSettings::ItemBox' has a wrong offset!");

// ScriptStruct UnionSystem.UnionRaceCarSettings
// 0x000C (0x000C - 0x0000)
struct FUnionRaceCarSettings final
{
public:
	bool                                          BakeBc;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CompressBC7;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CompressBC1;                                       // 0x0002(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CompressSticker;                                   // 0x0003(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BC7UncPartitions;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BC7UncUber;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceCarSettings) == 0x000004, "Wrong alignment on FUnionRaceCarSettings");
static_assert(sizeof(FUnionRaceCarSettings) == 0x00000C, "Wrong size on FUnionRaceCarSettings");
static_assert(offsetof(FUnionRaceCarSettings, BakeBc) == 0x000000, "Member 'FUnionRaceCarSettings::BakeBc' has a wrong offset!");
static_assert(offsetof(FUnionRaceCarSettings, CompressBC7) == 0x000001, "Member 'FUnionRaceCarSettings::CompressBC7' has a wrong offset!");
static_assert(offsetof(FUnionRaceCarSettings, CompressBC1) == 0x000002, "Member 'FUnionRaceCarSettings::CompressBC1' has a wrong offset!");
static_assert(offsetof(FUnionRaceCarSettings, CompressSticker) == 0x000003, "Member 'FUnionRaceCarSettings::CompressSticker' has a wrong offset!");
static_assert(offsetof(FUnionRaceCarSettings, BC7UncPartitions) == 0x000004, "Member 'FUnionRaceCarSettings::BC7UncPartitions' has a wrong offset!");
static_assert(offsetof(FUnionRaceCarSettings, BC7UncUber) == 0x000008, "Member 'FUnionRaceCarSettings::BC7UncUber' has a wrong offset!");

// ScriptStruct UnionSystem.HDVibCueListForViewer
// 0x0028 (0x0030 - 0x0008)
struct FHDVibCueListForViewer final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USoundAtomCue>           Cue;                                               // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHDVibCueListForViewer) == 0x000008, "Wrong alignment on FHDVibCueListForViewer");
static_assert(sizeof(FHDVibCueListForViewer) == 0x000030, "Wrong size on FHDVibCueListForViewer");
static_assert(offsetof(FHDVibCueListForViewer, Cue) == 0x000008, "Member 'FHDVibCueListForViewer::Cue' has a wrong offset!");

// ScriptStruct UnionSystem.UnionVATAnimEvent
// 0x0040 (0x0040 - 0x0000)
struct FUnionVATAnimEvent final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Position;                                          // 0x0004(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CuePath;                                           // 0x0010(0x0020)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Cue;                                               // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionVATAnimEvent) == 0x000008, "Wrong alignment on FUnionVATAnimEvent");
static_assert(sizeof(FUnionVATAnimEvent) == 0x000040, "Wrong size on FUnionVATAnimEvent");
static_assert(offsetof(FUnionVATAnimEvent, Frame) == 0x000000, "Member 'FUnionVATAnimEvent::Frame' has a wrong offset!");
static_assert(offsetof(FUnionVATAnimEvent, Position) == 0x000004, "Member 'FUnionVATAnimEvent::Position' has a wrong offset!");
static_assert(offsetof(FUnionVATAnimEvent, CuePath) == 0x000010, "Member 'FUnionVATAnimEvent::CuePath' has a wrong offset!");
static_assert(offsetof(FUnionVATAnimEvent, Volume) == 0x000030, "Member 'FUnionVATAnimEvent::Volume' has a wrong offset!");
static_assert(offsetof(FUnionVATAnimEvent, Pitch) == 0x000034, "Member 'FUnionVATAnimEvent::Pitch' has a wrong offset!");
static_assert(offsetof(FUnionVATAnimEvent, Cue) == 0x000038, "Member 'FUnionVATAnimEvent::Cue' has a wrong offset!");

// ScriptStruct UnionSystem.UnionVATAnimEventSequence
// 0x0010 (0x0010 - 0x0000)
struct FUnionVATAnimEventSequence final
{
public:
	TArray<struct FUnionVATAnimEvent>             Events;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionVATAnimEventSequence) == 0x000008, "Wrong alignment on FUnionVATAnimEventSequence");
static_assert(sizeof(FUnionVATAnimEventSequence) == 0x000010, "Wrong size on FUnionVATAnimEventSequence");
static_assert(offsetof(FUnionVATAnimEventSequence, Events) == 0x000000, "Member 'FUnionVATAnimEventSequence::Events' has a wrong offset!");

// ScriptStruct UnionSystem.UnionWidgetTransform
// 0x00B8 (0x00B8 - 0x0000)
struct FUnionWidgetTransform final
{
public:
	EUnionWidgetSlotType                          _SlotType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnchors                               _Anchor;                                           // 0x0008(0x0020)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              _ValueA;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _ValueB;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _Alignment;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _AutoSize;                                         // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          _HorizontalAlignment;                              // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            _VerticalAlignment;                                // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              _BrushImageSize;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetTransform                       _WidgetTransform;                                  // 0x0070(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              _Size;                                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionWidgetTransform) == 0x000008, "Wrong alignment on FUnionWidgetTransform");
static_assert(sizeof(FUnionWidgetTransform) == 0x0000B8, "Wrong size on FUnionWidgetTransform");
static_assert(offsetof(FUnionWidgetTransform, _SlotType) == 0x000000, "Member 'FUnionWidgetTransform::_SlotType' has a wrong offset!");
static_assert(offsetof(FUnionWidgetTransform, _Anchor) == 0x000008, "Member 'FUnionWidgetTransform::_Anchor' has a wrong offset!");
static_assert(offsetof(FUnionWidgetTransform, _ValueA) == 0x000028, "Member 'FUnionWidgetTransform::_ValueA' has a wrong offset!");
static_assert(offsetof(FUnionWidgetTransform, _ValueB) == 0x000038, "Member 'FUnionWidgetTransform::_ValueB' has a wrong offset!");
static_assert(offsetof(FUnionWidgetTransform, _Alignment) == 0x000048, "Member 'FUnionWidgetTransform::_Alignment' has a wrong offset!");
static_assert(offsetof(FUnionWidgetTransform, _AutoSize) == 0x000058, "Member 'FUnionWidgetTransform::_AutoSize' has a wrong offset!");
static_assert(offsetof(FUnionWidgetTransform, _HorizontalAlignment) == 0x000059, "Member 'FUnionWidgetTransform::_HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FUnionWidgetTransform, _VerticalAlignment) == 0x00005A, "Member 'FUnionWidgetTransform::_VerticalAlignment' has a wrong offset!");
static_assert(offsetof(FUnionWidgetTransform, _BrushImageSize) == 0x000060, "Member 'FUnionWidgetTransform::_BrushImageSize' has a wrong offset!");
static_assert(offsetof(FUnionWidgetTransform, _WidgetTransform) == 0x000070, "Member 'FUnionWidgetTransform::_WidgetTransform' has a wrong offset!");
static_assert(offsetof(FUnionWidgetTransform, _Size) == 0x0000A8, "Member 'FUnionWidgetTransform::_Size' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetDataRequest
// 0x0028 (0x0028 - 0x0000)
struct FUserGetDataRequest final
{
public:
	struct FCommon_DegreeData                     DegreeData;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_HistoryData                    HistoryData;                                       // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetDataRequest) == 0x000008, "Wrong alignment on FUserGetDataRequest");
static_assert(sizeof(FUserGetDataRequest) == 0x000028, "Wrong size on FUserGetDataRequest");
static_assert(offsetof(FUserGetDataRequest, DegreeData) == 0x000000, "Member 'FUserGetDataRequest::DegreeData' has a wrong offset!");
static_assert(offsetof(FUserGetDataRequest, HistoryData) == 0x000008, "Member 'FUserGetDataRequest::HistoryData' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetDataResponse
// 0x0100 (0x0100 - 0x0000)
struct FUserGetDataResponse final
{
public:
	struct FCommon_UserBaseData                   userBaseData;                                      // 0x0000(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_UserNetworkSettings            userNetworkSettings;                               // 0x0068(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_LoginData                      loginData;                                         // 0x0098(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_RatingData                     RatingData;                                        // 0x00F8(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserGetDataResponse) == 0x000008, "Wrong alignment on FUserGetDataResponse");
static_assert(sizeof(FUserGetDataResponse) == 0x000100, "Wrong size on FUserGetDataResponse");
static_assert(offsetof(FUserGetDataResponse, userBaseData) == 0x000000, "Member 'FUserGetDataResponse::userBaseData' has a wrong offset!");
static_assert(offsetof(FUserGetDataResponse, userNetworkSettings) == 0x000068, "Member 'FUserGetDataResponse::userNetworkSettings' has a wrong offset!");
static_assert(offsetof(FUserGetDataResponse, loginData) == 0x000098, "Member 'FUserGetDataResponse::loginData' has a wrong offset!");
static_assert(offsetof(FUserGetDataResponse, RatingData) == 0x0000F8, "Member 'FUserGetDataResponse::RatingData' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetPartsDataRequest
// 0x0001 (0x0001 - 0x0000)
struct FUserGetPartsDataRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserGetPartsDataRequest) == 0x000001, "Wrong alignment on FUserGetPartsDataRequest");
static_assert(sizeof(FUserGetPartsDataRequest) == 0x000001, "Wrong size on FUserGetPartsDataRequest");

// ScriptStruct UnionSystem.UserGetPartsDataResponse
// 0x0004 (0x0004 - 0x0000)
struct FUserGetPartsDataResponse final
{
public:
	struct FCommon_RatingData                     RatingData;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetPartsDataResponse) == 0x000004, "Wrong alignment on FUserGetPartsDataResponse");
static_assert(sizeof(FUserGetPartsDataResponse) == 0x000004, "Wrong size on FUserGetPartsDataResponse");
static_assert(offsetof(FUserGetPartsDataResponse, RatingData) == 0x000000, "Member 'FUserGetPartsDataResponse::RatingData' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetUserIdsByUidRequest_TargetUid
// 0x0040 (0x0040 - 0x0000)
struct FUserGetUserIdsByUidRequest_TargetUid final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 identityProviderId;                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 providerEnv;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetUserIdsByUidRequest_TargetUid) == 0x000008, "Wrong alignment on FUserGetUserIdsByUidRequest_TargetUid");
static_assert(sizeof(FUserGetUserIdsByUidRequest_TargetUid) == 0x000040, "Wrong size on FUserGetUserIdsByUidRequest_TargetUid");
static_assert(offsetof(FUserGetUserIdsByUidRequest_TargetUid, UserId) == 0x000000, "Member 'FUserGetUserIdsByUidRequest_TargetUid::UserId' has a wrong offset!");
static_assert(offsetof(FUserGetUserIdsByUidRequest_TargetUid, ProductUserId) == 0x000010, "Member 'FUserGetUserIdsByUidRequest_TargetUid::ProductUserId' has a wrong offset!");
static_assert(offsetof(FUserGetUserIdsByUidRequest_TargetUid, identityProviderId) == 0x000020, "Member 'FUserGetUserIdsByUidRequest_TargetUid::identityProviderId' has a wrong offset!");
static_assert(offsetof(FUserGetUserIdsByUidRequest_TargetUid, providerEnv) == 0x000030, "Member 'FUserGetUserIdsByUidRequest_TargetUid::providerEnv' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetUserIdsByUidRequest
// 0x0010 (0x0010 - 0x0000)
struct FUserGetUserIdsByUidRequest final
{
public:
	TArray<struct FUserGetUserIdsByUidRequest_TargetUid> targetUid;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetUserIdsByUidRequest) == 0x000008, "Wrong alignment on FUserGetUserIdsByUidRequest");
static_assert(sizeof(FUserGetUserIdsByUidRequest) == 0x000010, "Wrong size on FUserGetUserIdsByUidRequest");
static_assert(offsetof(FUserGetUserIdsByUidRequest, targetUid) == 0x000000, "Member 'FUserGetUserIdsByUidRequest::targetUid' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetUserIdsByUidResponse
// 0x0010 (0x0010 - 0x0000)
struct FUserGetUserIdsByUidResponse final
{
public:
	TArray<struct FUserGetUserIdsByUidResponse_UserIds> UserIds;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetUserIdsByUidResponse) == 0x000008, "Wrong alignment on FUserGetUserIdsByUidResponse");
static_assert(sizeof(FUserGetUserIdsByUidResponse) == 0x000010, "Wrong size on FUserGetUserIdsByUidResponse");
static_assert(offsetof(FUserGetUserIdsByUidResponse, UserIds) == 0x000000, "Member 'FUserGetUserIdsByUidResponse::UserIds' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetUserIdsByPuidRequest_TargetPuid
// 0x0040 (0x0040 - 0x0000)
struct FUserGetUserIdsByPuidRequest_TargetPuid final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 identityProviderId;                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 providerEnv;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetUserIdsByPuidRequest_TargetPuid) == 0x000008, "Wrong alignment on FUserGetUserIdsByPuidRequest_TargetPuid");
static_assert(sizeof(FUserGetUserIdsByPuidRequest_TargetPuid) == 0x000040, "Wrong size on FUserGetUserIdsByPuidRequest_TargetPuid");
static_assert(offsetof(FUserGetUserIdsByPuidRequest_TargetPuid, UserId) == 0x000000, "Member 'FUserGetUserIdsByPuidRequest_TargetPuid::UserId' has a wrong offset!");
static_assert(offsetof(FUserGetUserIdsByPuidRequest_TargetPuid, ProductUserId) == 0x000010, "Member 'FUserGetUserIdsByPuidRequest_TargetPuid::ProductUserId' has a wrong offset!");
static_assert(offsetof(FUserGetUserIdsByPuidRequest_TargetPuid, identityProviderId) == 0x000020, "Member 'FUserGetUserIdsByPuidRequest_TargetPuid::identityProviderId' has a wrong offset!");
static_assert(offsetof(FUserGetUserIdsByPuidRequest_TargetPuid, providerEnv) == 0x000030, "Member 'FUserGetUserIdsByPuidRequest_TargetPuid::providerEnv' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetUserIdsByPuidRequest
// 0x0010 (0x0010 - 0x0000)
struct FUserGetUserIdsByPuidRequest final
{
public:
	TArray<struct FUserGetUserIdsByPuidRequest_TargetPuid> targetPuid;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetUserIdsByPuidRequest) == 0x000008, "Wrong alignment on FUserGetUserIdsByPuidRequest");
static_assert(sizeof(FUserGetUserIdsByPuidRequest) == 0x000010, "Wrong size on FUserGetUserIdsByPuidRequest");
static_assert(offsetof(FUserGetUserIdsByPuidRequest, targetPuid) == 0x000000, "Member 'FUserGetUserIdsByPuidRequest::targetPuid' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetUserIdsByPuidResponse_UserIds
// 0x0040 (0x0040 - 0x0000)
struct FUserGetUserIdsByPuidResponse_UserIds final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 identityProviderId;                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 providerEnv;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetUserIdsByPuidResponse_UserIds) == 0x000008, "Wrong alignment on FUserGetUserIdsByPuidResponse_UserIds");
static_assert(sizeof(FUserGetUserIdsByPuidResponse_UserIds) == 0x000040, "Wrong size on FUserGetUserIdsByPuidResponse_UserIds");
static_assert(offsetof(FUserGetUserIdsByPuidResponse_UserIds, UserId) == 0x000000, "Member 'FUserGetUserIdsByPuidResponse_UserIds::UserId' has a wrong offset!");
static_assert(offsetof(FUserGetUserIdsByPuidResponse_UserIds, ProductUserId) == 0x000010, "Member 'FUserGetUserIdsByPuidResponse_UserIds::ProductUserId' has a wrong offset!");
static_assert(offsetof(FUserGetUserIdsByPuidResponse_UserIds, identityProviderId) == 0x000020, "Member 'FUserGetUserIdsByPuidResponse_UserIds::identityProviderId' has a wrong offset!");
static_assert(offsetof(FUserGetUserIdsByPuidResponse_UserIds, providerEnv) == 0x000030, "Member 'FUserGetUserIdsByPuidResponse_UserIds::providerEnv' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetUserIdsByPuidResponse
// 0x0010 (0x0010 - 0x0000)
struct FUserGetUserIdsByPuidResponse final
{
public:
	TArray<struct FUserGetUserIdsByPuidResponse_UserIds> UserIds;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetUserIdsByPuidResponse) == 0x000008, "Wrong alignment on FUserGetUserIdsByPuidResponse");
static_assert(sizeof(FUserGetUserIdsByPuidResponse) == 0x000010, "Wrong size on FUserGetUserIdsByPuidResponse");
static_assert(offsetof(FUserGetUserIdsByPuidResponse, UserIds) == 0x000000, "Member 'FUserGetUserIdsByPuidResponse::UserIds' has a wrong offset!");

// ScriptStruct UnionSystem.UserSaveUserNetworkSettingsResponse
// 0x0030 (0x0030 - 0x0000)
struct FUserSaveUserNetworkSettingsResponse final
{
public:
	struct FCommon_UserNetworkSettings            userNetworkSettings;                               // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserSaveUserNetworkSettingsResponse) == 0x000008, "Wrong alignment on FUserSaveUserNetworkSettingsResponse");
static_assert(sizeof(FUserSaveUserNetworkSettingsResponse) == 0x000030, "Wrong size on FUserSaveUserNetworkSettingsResponse");
static_assert(offsetof(FUserSaveUserNetworkSettingsResponse, userNetworkSettings) == 0x000000, "Member 'FUserSaveUserNetworkSettingsResponse::userNetworkSettings' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetUserNetworkSettingsRequest
// 0x0010 (0x0010 - 0x0000)
struct FUserGetUserNetworkSettingsRequest final
{
public:
	TArray<class FString>                         TargetUserIds;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetUserNetworkSettingsRequest) == 0x000008, "Wrong alignment on FUserGetUserNetworkSettingsRequest");
static_assert(sizeof(FUserGetUserNetworkSettingsRequest) == 0x000010, "Wrong size on FUserGetUserNetworkSettingsRequest");
static_assert(offsetof(FUserGetUserNetworkSettingsRequest, TargetUserIds) == 0x000000, "Member 'FUserGetUserNetworkSettingsRequest::TargetUserIds' has a wrong offset!");

// ScriptStruct UnionSystem.UserGetUserNetworkSettingsResponse
// 0x0010 (0x0010 - 0x0000)
struct FUserGetUserNetworkSettingsResponse final
{
public:
	TArray<struct FCommon_UserNetworkSettings>    userNetworkSettings;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGetUserNetworkSettingsResponse) == 0x000008, "Wrong alignment on FUserGetUserNetworkSettingsResponse");
static_assert(sizeof(FUserGetUserNetworkSettingsResponse) == 0x000010, "Wrong size on FUserGetUserNetworkSettingsResponse");
static_assert(offsetof(FUserGetUserNetworkSettingsResponse, userNetworkSettings) == 0x000000, "Member 'FUserGetUserNetworkSettingsResponse::userNetworkSettings' has a wrong offset!");

// ScriptStruct UnionSystem.UserSavePaidDlcOwnershipsRequest
// 0x0010 (0x0010 - 0x0000)
struct FUserSavePaidDlcOwnershipsRequest final
{
public:
	TArray<class FString>                         dlcIds;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserSavePaidDlcOwnershipsRequest) == 0x000008, "Wrong alignment on FUserSavePaidDlcOwnershipsRequest");
static_assert(sizeof(FUserSavePaidDlcOwnershipsRequest) == 0x000010, "Wrong size on FUserSavePaidDlcOwnershipsRequest");
static_assert(offsetof(FUserSavePaidDlcOwnershipsRequest, dlcIds) == 0x000000, "Member 'FUserSavePaidDlcOwnershipsRequest::dlcIds' has a wrong offset!");

// ScriptStruct UnionSystem.UserSavePaidDlcOwnershipsResponse
// 0x0001 (0x0001 - 0x0000)
struct FUserSavePaidDlcOwnershipsResponse final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserSavePaidDlcOwnershipsResponse) == 0x000001, "Wrong alignment on FUserSavePaidDlcOwnershipsResponse");
static_assert(sizeof(FUserSavePaidDlcOwnershipsResponse) == 0x000001, "Wrong size on FUserSavePaidDlcOwnershipsResponse");

// ScriptStruct UnionSystem.UserNintendoSwitchOnlineCheckRequest
// 0x0030 (0x0030 - 0x0000)
struct FUserNintendoSwitchOnlineCheckRequest final
{
public:
	class FString                                 identityProviderEnv;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountID;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 idToken;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserNintendoSwitchOnlineCheckRequest) == 0x000008, "Wrong alignment on FUserNintendoSwitchOnlineCheckRequest");
static_assert(sizeof(FUserNintendoSwitchOnlineCheckRequest) == 0x000030, "Wrong size on FUserNintendoSwitchOnlineCheckRequest");
static_assert(offsetof(FUserNintendoSwitchOnlineCheckRequest, identityProviderEnv) == 0x000000, "Member 'FUserNintendoSwitchOnlineCheckRequest::identityProviderEnv' has a wrong offset!");
static_assert(offsetof(FUserNintendoSwitchOnlineCheckRequest, AccountID) == 0x000010, "Member 'FUserNintendoSwitchOnlineCheckRequest::AccountID' has a wrong offset!");
static_assert(offsetof(FUserNintendoSwitchOnlineCheckRequest, idToken) == 0x000020, "Member 'FUserNintendoSwitchOnlineCheckRequest::idToken' has a wrong offset!");

// ScriptStruct UnionSystem.UserNintendoSwitchOnlineCheckResponse
// 0x0004 (0x0004 - 0x0000)
struct FUserNintendoSwitchOnlineCheckResponse final
{
public:
	int32                                         switchOnlineCode;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserNintendoSwitchOnlineCheckResponse) == 0x000004, "Wrong alignment on FUserNintendoSwitchOnlineCheckResponse");
static_assert(sizeof(FUserNintendoSwitchOnlineCheckResponse) == 0x000004, "Wrong size on FUserNintendoSwitchOnlineCheckResponse");
static_assert(offsetof(FUserNintendoSwitchOnlineCheckResponse, switchOnlineCode) == 0x000000, "Member 'FUserNintendoSwitchOnlineCheckResponse::switchOnlineCode' has a wrong offset!");

}

