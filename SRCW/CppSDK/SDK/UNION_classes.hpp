#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UNION

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "UnionUI_structs.hpp"
#include "UnionUI_classes.hpp"
#include "InputCore_structs.hpp"
#include "UNION_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UnionSystem_structs.hpp"
#include "UnionSystem_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UnionLib_structs.hpp"
#include "UnionLib_classes.hpp"
#include "UnionRun_structs.hpp"
#include "UnionRun_classes.hpp"
#include "SlateCore_structs.hpp"
#include "EnhancedInput_classes.hpp"


namespace SDK
{

// Class UNION.LobbySequenceBase
// 0x0560 (0x08C8 - 0x0368)
class ALobbySequenceBase : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x10];                                     // 0x0368(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnGadgetCustmizeFinishedEvent;                     // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLobbyInitData& Data)> OnMakeLobbyHostDataEvent;      // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, int32 RingIndex)> OnVoteSelectCourseEvent;      // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InCourseIndex, int32 InPlayerIndex, const TArray<struct FAnotherStageLotteryResult>& InLotteryResults)> OnHostDecisionSelectCourseEvent; // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnStartSelectCourseResultEvent;                    // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDebugTimeCountForceEnd;                          // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDebugCrownVisibleForceChange;                    // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EMatchingLobbyType                            LobbyType;                                         // 0x03E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOnlineSequence*                        OnlineSequence;                                    // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbySequenceState                           PrevSequenceState;                                 // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbySequenceState                           PrevFadeSequenceState;                             // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3FA[0x6];                                      // 0x03FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLobbyPlayerData>               LobbyPlayerData;                                   // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 FakeLobbyPlayerIndexList;                          // 0x0410(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EStageId>                              CourseMainID;                                      // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EStageId>                              VisibleCourseMainId;                               // 0x0430(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   MainUISceneClass;                                  // 0x0440(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   MainUISceneRef;                                    // 0x0468(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbySceneBase*                        MainUIScene;                                       // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   SubMenuUIClass;                                    // 0x0498(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuSubMenu*                     SubMenu;                                           // 0x04C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableSubMenuInput;                                // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SelectCourseUIClass;                               // 0x04D0(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyCourseSelectSceneBase*            CourseSelectUIScene;                               // 0x04F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   LobbyAnnounceInfoUIClass;                          // 0x0500(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyAnnounceInfo*                     LobbyAnnounceInfo;                                 // 0x0528(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOnlinePlayerNameButton*                FocusedPlayerName;                                 // 0x0530(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 SentIndexList;                                     // 0x0538(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsLobbySearchCancel;                              // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaMachineSelectStateBase*           CharaMachineSelectComponent;                       // 0x0550(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGadgetCustomize2State*                 CustomizeGadgetComponent;                          // 0x0558(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEmoteWheelState*                       EmoteWheelComponent;                               // 0x0560(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyPlayerListState*                  LobbyPlayerListComponent;                          // 0x0568(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerProfileState*                    PlayerProfileComponent;                            // 0x0570(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNetLobbyControlComponent*              NetLobbyControlComponent;                          // 0x0578(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGarageState*                           GarageComponent;                                   // 0x0580(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbySequenceP2PConnection*            P2PConnection;                                     // 0x0588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuInputRecieveObject*                MenuInputReceiveObject;                            // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   CameraManagerClass;                                // 0x0598(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMenuCameraManager*                     CameraManager;                                     // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACameraActor*                           CameraActor;                                       // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnotherStageLotteryWheel*              AnotherStageLotteryWheel;                          // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ALobbyTravelRingManager*                LobbyTravelRingManager;                            // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ALobbyFinishDirectingManager*           LobbyFinishedDirectingManager;                     // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LobbyHostPlayerIndex;                              // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OwnPlayerIndex;                                    // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CourseResultSelectedPlayerIndex;                   // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStageId                                      CourseResultSelectedCourseId;                      // 0x05F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AlreadyReceiveDecidedCourse;                       // 0x05F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsPlaySelectCourseResult;                          // 0x05F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F7[0x1];                                      // 0x05F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     TransformMenuRacers;                               // 0x05F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          CanExitState;                                      // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInitializedLobby;                                // 0x0609(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsReceivedLobbyHostData;                           // 0x060A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          OtherLobbyMembersReceivedHostData;                 // 0x060B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsOwnConnected;                                    // 0x060C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RaceCycleFlag;                                     // 0x060D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseStateSelectCourse;                              // 0x060E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsFinishedSelectCourseResult;                      // 0x060F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsLobbySearching;                                  // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsVisibleMatchingNow;                              // 0x0611(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsCallForceBack;                                   // 0x0612(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_613[0x5];                                      // 0x0613(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIFade*                           UIFadeWidget;                                      // 0x0618(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNetLobbyControlComponent>  NetLobbyControlComponentClass;                     // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULobbySequenceP2PConnection> P2PConnectionClass;                               // 0x0628(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SubLevelName;                                      // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbyTimerType                               LobbyTimerType;                                    // 0x0638(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ELobbyTimerType, int32>                  LobbyTimerStartTimeCount;                          // 0x0640(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   LobbyTravelRingManagerPtr;                         // 0x0690(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          MatchingConpleteQue;                               // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          MatchingWaitLoopCue;                               // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoundHandle                           MatchingWaitLoop;                                  // 0x06C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6CC[0x4];                                      // 0x06CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LobbySearchCancelTimeLine;                         // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTimelineComponent*                     LongPutCancelTimeLine;                             // 0x06D8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UTimelineComponent>         LongPutCancelTimeLineClass;                        // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSendStamp;                                      // 0x06E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSendHorn;                                       // 0x06E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6EA[0x1DE];                                    // 0x06EA(0x01DE)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void BackSequenceStreamLevels(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	static void UnLoadSubLevels(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);

	void AfterCharaMachineSetting(bool InIsTimeUp);
	void AfterEmoteWheelSetting(bool InIsTimeUp);
	void AfterGarageSetting(bool InIsTimeUp);
	void AfterPlayerProfileSetting(bool InIsTimeUp);
	void BackStateFromPlayerList();
	void BeforeCharaMachineSetting();
	void BeforeGarageSetting();
	void BindMenuInputReceive();
	void BindPlayerName();
	void BindPlayerProfile();
	void BindSubMenu();
	void CalcDecideCourse(int32* OutSelectedPlayerIndex, EStageId* OutSelectedCourseId);
	bool CallForceBackFunction();
	void ChangeFooterParam(ELobbySequenceState InState);
	void ChangeHeaderParam(ELobbySequenceState InState);
	void CheckAndCrownSpawnOrDespawn(const int32 InRacerIndex);
	bool CheckEnableForceBackState(ELobbySequenceState InState);
	bool CheckEnableUpdateForMenuRacer();
	void CreateCameraManager();
	void CreateCourseSelectUIScene();
	class UUnionUISceneBase* CreateErrorWindow(EPopupWindowType WindowType, EPopupWindowButtonType ButtonType, bool bAttension, const class FText& Title, const class FText& Message);
	void CreateLobbyAnnounceInfo();
	void CreateLobbyTravelRingManager();
	void CreateMainUIScene();
	void DebugForceTimeOut();
	class AMenuCameraManager* GetCameraManager();
	int32 GetConvertPlayerLobbyIndex(int32 InIndex);
	ELobbySequenceState GetCurrentLobbyState();
	bool GetDebugLobbyTimeCountStop();
	class UCommonMenuFooterMenu* GetFooterMenu();
	class UCommonMenuHeaderMenu* GetHeaderMenu();
	class ULobbyAnnounceInfo* GetLobbyAnnounceInfo();
	EMatchingLobbyType GetLobbyType();
	class ULobbySceneBase* GetMainUIScene();
	class AMenuRacerLobby* GetMenuRacer(int32 InIndex);
	TArray<class AMenuRacerLobby*> GetMenuRacers();
	void GetPlayableCourseMainList(TArray<EStageId>* OutPlayableCourseMainList);
	void GetPlayerDisplayName(int32 InPlayerLobbyIndex);
	void GetPlayerSelectedCourseIds(TArray<EStageId>* OutPlayerSelectedCourseIds);
	int32 GetStartTimeCount();
	int32 GetTimeCount();
	class UOnlineTimer* GetTimer();
	void GoNextStateAfterInitialize();
	void InitializeCameraManager();
	void InitializeCourseSelectUIScene();
	void InitializeLobbyTravelRingManager();
	void InitializeMainUIScene();
	void InitializeMenuRacers();
	void InitializeSubLevelObjects();
	void InitializeSubMenu();
	void InitializeTimer();
	void InitializeTransformMenuRacers();
	bool IsCom(int32 InPlayerLobbyIndex, bool* OutIsValidLobbyContext, bool* OutIsValidMemberContext);
	bool IsSubMenuState(const ELobbySequenceState InState);
	bool IsValidPlayer(int32 InPlayerIndex);
	bool IsValidPlayerData(const struct FLobbyPlayerData& PlayerData);
	struct FLobbyInitData MakeLobbyHostData();
	void OnAddMemberInitComplete();
	void OnBackCharaMachine(EMenuSequenceSubState InState);
	void OnBackCustomizeGadget(EMenuSequenceSubState InState);
	void OnBackKeyPressedLobby(class UObject* Object);
	void OnBackPlayerProfile(EMenuSequenceSubState InState);
	void OnBackSequence(EErrorLevel ErrorLevel);
	void OnCancelGarage(EMenuSequenceSubState State);
	void OnCancelLobbySearch(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnCancelPlayerName(class UUnionUIButtonBase* InButton, int32 InButtonIndex);
	void OnCancelReturnedFromRaceToLobby(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnCancelSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnCancelTimeLineLobbySearch(class UObject* Object);
	void OnCancelWaitingInTheLobby(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnChangedPlayerProfile(int32 NextPlayerIndex);
	void OnChangedWaitTimerEmoteWheel(bool IsWaiting);
	void OnComebackMember(bool AllMembersInputFinished);
	void OnCompleteMatchmaking(EGameMatchmakingCompleteStatus Status, const struct FCreateOrConnectLobbyResult& Result);
	void OnDecideLobbySearch(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecideReturnedFromRaceToLobby(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecideWaitingInTheLobby(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecisionCharaMachine();
	void OnDecisionPlayerName(class UUnionUIButtonBase* InButton, int32 InButtonIndex);
	void OnDecisionSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnErrorFromNetLobbyControl(int32 ErrorCode, EAppNetErrorCode ErrorCodeEnum, const class FString& ErrorMessage);
	void OnExitEmoteWheel(EMenuSequenceSubState State);
	void OnExitFriendListl(EMenuSequenceSubState State);
	void OnExitStateCheckLobbyHost();
	void OnExitStateErrorWindow();
	void OnExitStateFixPlayerData();
	void OnExitStateLobbyFinished();
	void OnExitStateLobbySearch();
	void OnExitStateLobbySearchComplete();
	void OnExitStateReturnedFromRaceToLobby();
	void OnExitStateSelectCourse();
	void OnExitStateSelectCourseResult();
	void OnExitStateSelectCourseWait();
	void OnExitStateWaitingInTheLobby();
	void OnExitStateWaitP2PConnection();
	void OnFaceLeftPressedLobby(class UObject* Object);
	void OnFaceLeftPressedLobbySearch();
	void OnFaceLeftPressedWaitingInTheLobby();
	void OnFaceTopPressedLobby(class UObject* Object);
	void OnFaceTopPressedLobbyPlayerList();
	void OnFaceTopPressedLobbySearch();
	void OnFaceTopPressedWaitingInTheLobby();
	void OnFadeFinishedOnInitialize(EUnionUIFadeDirection InFadeDirection);
	void OnFinishedLevelSequenceLobby();
	void OnFinishedLevelSequenceSelectCourseResult();
	void OnFinishedTimeLineLobbySearch();
	void OnFinishedTimeLineReturnedFromRaceToLobby();
	void OnFocusPlayerName(class UUnionUIButtonBase* InButton, int32 InButtonIndex);
	void OnFocusSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnInitStateCheckLobbyHost();
	void OnInitStateCheckMembers();
	void OnInitStateErrorWindow();
	void OnInitStateExit();
	void OnInitStateFestaRentalGadgetWindow();
	void OnInitStateFestaRuleWindow();
	void OnInitStateFestaTeamDirecting();
	void OnInitStateFixPlayerData();
	void OnInitStateIdle();
	void OnInitStateLobbyFinished();
	void OnInitStateLobbyPlayerList();
	void OnInitStateLobbyRuleSetting();
	void OnInitStateLobbySearch();
	void OnInitStateLobbySearchComplete();
	void OnInitStateNotificationWindow();
	void OnInitStateReturnedFromRaceToLobby();
	void OnInitStateSelectCourse();
	void OnInitStateSelectCourseResult();
	void OnInitStateSelectCourseWait();
	void OnInitStateSelectGameMode();
	void OnInitStateShowTipsWindow();
	void OnInitStateWaitingInTheLobby();
	void OnInitStateWaitP2PConnection();
	void OnKickPlayerProfile(int32 PlayerIndex);
	void OnKickPlayerProfileResult(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnLeftStickPressedLobby();
	void OnLobbyMemberConnect(const struct FLobbyPlayerData& InPlayerData, bool InIsOwnPlayer);
	void OnLobbyMemberDisconnect(const struct FLobbyPlayerData& InPlayerData, bool InIsOwnPlayer);
	void OnLobbySystemPreRaceFinished();
	void OnLogoutComplete(int32 LocalUserNum, bool bWasSuccessful);
	void OnPlatformEvent(const struct FUnionPlatformEventInfo& EventInfo);
	bool OnPlayerNameButtonDecideEvent(bool bIsSuccsess);
	void OnPlayLevelSequenceLobby();
	void OnPlayReverseLevelSequenceLobby();
	void OnReportPlayerProfile(int32 PlayerIndex);
	void OnRightShoulderLobbySearch(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnRightShoulderPressedLobby(class UObject* Object);
	void OnRightShoulderReturnedFromRaceToLobby(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnRightShoulderWaitingInTheLobby(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnSelectedStampEmoteWheel(int32 StampIndex);
	void OnSendNicePlayerProfile(int32 SendPlayerIndex);
	void OnShowLevelSequenceSelectCourseResultUI();
	void OnStartMatchmaking(class UCommonLobbyContext* LobbyContext);
	void OnStartMatchmakingForMember(class UCommonLobbyContext* LobbyContext);
	void OnStartSelectCourseResultEventCallback();
	void OnStartTimeLineLobbySearch();
	void OnSyncLobbyComplete(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnTimeOutLobby();
	void OnUnFocusPlayerName(class UUnionUIButtonBase* InButton, int32 InButtonIndex);
	void OnUnFocusSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnUnFocusWaitingInTheLobby(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnUpdateStateCheckLobbyHost(float InDeltaTime);
	void OnUpdateStateErrorWindow(float InDeltaTime);
	void OnUpdateStateFixPlayerData(float InDeltaTime);
	void OnUpdateStateLobbyFinished(float InDeltaTime);
	void OnUpdateStateLobbySearch(float InDeltaTime);
	void OnUpdateStateLobbySearchComplete(float InDeltaTime);
	void OnUpdateStateSelectCourse(float InDeltaTime);
	void OnUpdateStateSelectCourseResult(float InDeltaTime);
	void OnUpdateStateSelectCourseWait(float InDeltaTime);
	void OnUpdateStateWaitingInTheLobby(float InDeltaTime);
	void OnUpdateStateWaitP2PConnection(float InDeltaTime);
	void OnUpdateTimeLineLobbySearch(float InValue);
	bool OwnPlayerIsHost();
	void PlayLobbyBgm();
	void PlaySelectCourseResult();
	void ReceiveChangedLikesCount(int32 InSendPlayerLobbyIndex, int32 OnNewLikesCount);
	void ReceiveDecidedCourse(int32 InDecidedCourseId, int32 InDecidedPlayerOnlineIndex);
	void ReceiveHorn(int32 InSendPlayerLobbyIndex);
	void ReceiveLike(int32 InSendPlayerLobbyIndex, int32 InReceivePlayerLobbyIndex);
	void ReceiveLobbyInitData(class UCommonLobbyContext* InLobbyContext, const struct FLobbyInitData& InData);
	void ReceiveStamp(int32 InSendPlayerLobbyIndex, int32 InStampIndex);
	void RecvHorn(class UCommonLobbyMemberContext* InMemberContext);
	void RecvLike(class UCommonLobbyMemberContext* InSendMemberContext, class UCommonLobbyMemberContext* InRecvMemberContext);
	void RecvSelectCourse(class UCommonLobbyMemberContext* InMemberContext, int32 courseId);
	void RecvStamp(class UCommonLobbyMemberContext* InMemberContext, int32 InStampIndex);
	void RefreshPlayerParam(const struct FLobbyPlayerData& InPlayerData, bool InIsOwnPlayer, ECommonLobbyMemberState InLobbyState);
	void RemoveLobbyWidget();
	void RemoveSelectCourseWidget();
	void SetCourseSelectSetting(EStageId InSelectedCourseId, TArray<struct FAnotherStageLotteryResult>* LotteryResults);
	void SetFooterHoldGaugeVaue(float InValue);
	void SetIsInitializedLobby(bool bNewValue);
	void SetLobbyPlayerCount(int32 InPlayerCount);
	void SetLobbySequenceType(ELobbySequenceState InNextState);
	void SetLobbyType(EMatchingLobbyType Type);
	void SetMenuRacer(int32 InPlayerLobbyIndex);
	void SetMenuRacerParam(class AMenuRacerLobby* InMenuRacerLobby, int32 InIndex);
	void SetNextLobbySequenceState(ELobbySequenceState InState, ELobbySequenceState PrevState);
	void SetNextLobbySubMenuState(class UCommonMenuButtonBase* InButton);
	void SetPlayerName(int32 InPlayerLobbyIndex, bool bInIsCom);
	void SetTimeCount(int32 InTimeCount);
	void SetUpCameraManager();
	void SetUpConvertPlayerIndexList();
	void SetupCourseSelect();
	void SetupLobby();
	void SetVisibilityValidOwnIcon(ESlateVisibility InVisibility);
	void SetVisibilityValidPlayerName(ESlateVisibility InVisibility);
	void StartFadeOnInitialize();
	void StartTimer(ELobbyTimerType InELobbyTimerType);
	void UnBindMenuInputReceive();
	void UnBindPlayerName();
	void UnBindPlayerProfile();
	void UnBindSubMenu();
	void UpdateMenuRacers();
	void UpdatePlayerName();

	class UCommonLobbyContext* CreateLobbyContext(int32 LocalUserNum) const;
	class UCommonLobbyContext* CreateLobbyContextByMatchmakingResult(int32 LocalUserNum, const struct FCreateOrConnectLobbyResult& MatchmakingResult) const;
	class UMatchmakingRequestContext* CreateMatchmakingContext(int32 LocalUserNum) const;
	void FinalizeLobbyContext() const;
	bool GetIsInitializedLobby() const;
	class UCommonLobbyContext* GetLobbyContext() const;
	class UNetLobbyControlComponent* GetNetLobbyControlComponent() const;
	class ULobbySequenceP2PConnection* GetP2PConnection() const;
	class FName GetSubLevelName() const;
	class FName GetSubLevelNameOfFesta() const;
	class FName GetSubLevelNameOfFriend() const;
	class FName GetSubLevelNameOfLegend() const;
	class FName GetSubLevelNameOfRankMatch() const;
	class FName GetSubLevelNameOfSquad() const;
	bool ShouldMatchmaking() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySequenceBase">();
	}
	static class ALobbySequenceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbySequenceBase>();
	}
};
static_assert(alignof(ALobbySequenceBase) == 0x000008, "Wrong alignment on ALobbySequenceBase");
static_assert(sizeof(ALobbySequenceBase) == 0x0008C8, "Wrong size on ALobbySequenceBase");
static_assert(offsetof(ALobbySequenceBase, OnGadgetCustmizeFinishedEvent) == 0x000378, "Member 'ALobbySequenceBase::OnGadgetCustmizeFinishedEvent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, OnMakeLobbyHostDataEvent) == 0x000388, "Member 'ALobbySequenceBase::OnMakeLobbyHostDataEvent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, OnVoteSelectCourseEvent) == 0x000398, "Member 'ALobbySequenceBase::OnVoteSelectCourseEvent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, OnHostDecisionSelectCourseEvent) == 0x0003A8, "Member 'ALobbySequenceBase::OnHostDecisionSelectCourseEvent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, OnStartSelectCourseResultEvent) == 0x0003B8, "Member 'ALobbySequenceBase::OnStartSelectCourseResultEvent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, OnDebugTimeCountForceEnd) == 0x0003C8, "Member 'ALobbySequenceBase::OnDebugTimeCountForceEnd' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, OnDebugCrownVisibleForceChange) == 0x0003D8, "Member 'ALobbySequenceBase::OnDebugCrownVisibleForceChange' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LobbyType) == 0x0003E8, "Member 'ALobbySequenceBase::LobbyType' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, OnlineSequence) == 0x0003F0, "Member 'ALobbySequenceBase::OnlineSequence' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, PrevSequenceState) == 0x0003F8, "Member 'ALobbySequenceBase::PrevSequenceState' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, PrevFadeSequenceState) == 0x0003F9, "Member 'ALobbySequenceBase::PrevFadeSequenceState' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LobbyPlayerData) == 0x000400, "Member 'ALobbySequenceBase::LobbyPlayerData' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, FakeLobbyPlayerIndexList) == 0x000410, "Member 'ALobbySequenceBase::FakeLobbyPlayerIndexList' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, CourseMainID) == 0x000420, "Member 'ALobbySequenceBase::CourseMainID' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, VisibleCourseMainId) == 0x000430, "Member 'ALobbySequenceBase::VisibleCourseMainId' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, MainUISceneClass) == 0x000440, "Member 'ALobbySequenceBase::MainUISceneClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, MainUISceneRef) == 0x000468, "Member 'ALobbySequenceBase::MainUISceneRef' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, MainUIScene) == 0x000490, "Member 'ALobbySequenceBase::MainUIScene' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, SubMenuUIClass) == 0x000498, "Member 'ALobbySequenceBase::SubMenuUIClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, SubMenu) == 0x0004C0, "Member 'ALobbySequenceBase::SubMenu' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, EnableSubMenuInput) == 0x0004C8, "Member 'ALobbySequenceBase::EnableSubMenuInput' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, SelectCourseUIClass) == 0x0004D0, "Member 'ALobbySequenceBase::SelectCourseUIClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, CourseSelectUIScene) == 0x0004F8, "Member 'ALobbySequenceBase::CourseSelectUIScene' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LobbyAnnounceInfoUIClass) == 0x000500, "Member 'ALobbySequenceBase::LobbyAnnounceInfoUIClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LobbyAnnounceInfo) == 0x000528, "Member 'ALobbySequenceBase::LobbyAnnounceInfo' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, FocusedPlayerName) == 0x000530, "Member 'ALobbySequenceBase::FocusedPlayerName' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, SentIndexList) == 0x000538, "Member 'ALobbySequenceBase::SentIndexList' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, bIsLobbySearchCancel) == 0x000548, "Member 'ALobbySequenceBase::bIsLobbySearchCancel' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, CharaMachineSelectComponent) == 0x000550, "Member 'ALobbySequenceBase::CharaMachineSelectComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, CustomizeGadgetComponent) == 0x000558, "Member 'ALobbySequenceBase::CustomizeGadgetComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, EmoteWheelComponent) == 0x000560, "Member 'ALobbySequenceBase::EmoteWheelComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LobbyPlayerListComponent) == 0x000568, "Member 'ALobbySequenceBase::LobbyPlayerListComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, PlayerProfileComponent) == 0x000570, "Member 'ALobbySequenceBase::PlayerProfileComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, NetLobbyControlComponent) == 0x000578, "Member 'ALobbySequenceBase::NetLobbyControlComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, GarageComponent) == 0x000580, "Member 'ALobbySequenceBase::GarageComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, P2PConnection) == 0x000588, "Member 'ALobbySequenceBase::P2PConnection' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, MenuInputReceiveObject) == 0x000590, "Member 'ALobbySequenceBase::MenuInputReceiveObject' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, CameraManagerClass) == 0x000598, "Member 'ALobbySequenceBase::CameraManagerClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, CameraManager) == 0x0005C0, "Member 'ALobbySequenceBase::CameraManager' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, CameraActor) == 0x0005C8, "Member 'ALobbySequenceBase::CameraActor' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, AnotherStageLotteryWheel) == 0x0005D0, "Member 'ALobbySequenceBase::AnotherStageLotteryWheel' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LobbyTravelRingManager) == 0x0005D8, "Member 'ALobbySequenceBase::LobbyTravelRingManager' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LobbyFinishedDirectingManager) == 0x0005E0, "Member 'ALobbySequenceBase::LobbyFinishedDirectingManager' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LobbyHostPlayerIndex) == 0x0005E8, "Member 'ALobbySequenceBase::LobbyHostPlayerIndex' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, OwnPlayerIndex) == 0x0005EC, "Member 'ALobbySequenceBase::OwnPlayerIndex' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, CourseResultSelectedPlayerIndex) == 0x0005F0, "Member 'ALobbySequenceBase::CourseResultSelectedPlayerIndex' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, CourseResultSelectedCourseId) == 0x0005F4, "Member 'ALobbySequenceBase::CourseResultSelectedCourseId' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, AlreadyReceiveDecidedCourse) == 0x0005F5, "Member 'ALobbySequenceBase::AlreadyReceiveDecidedCourse' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, IsPlaySelectCourseResult) == 0x0005F6, "Member 'ALobbySequenceBase::IsPlaySelectCourseResult' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, TransformMenuRacers) == 0x0005F8, "Member 'ALobbySequenceBase::TransformMenuRacers' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, CanExitState) == 0x000608, "Member 'ALobbySequenceBase::CanExitState' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, IsInitializedLobby) == 0x000609, "Member 'ALobbySequenceBase::IsInitializedLobby' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, IsReceivedLobbyHostData) == 0x00060A, "Member 'ALobbySequenceBase::IsReceivedLobbyHostData' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, OtherLobbyMembersReceivedHostData) == 0x00060B, "Member 'ALobbySequenceBase::OtherLobbyMembersReceivedHostData' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, IsOwnConnected) == 0x00060C, "Member 'ALobbySequenceBase::IsOwnConnected' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, RaceCycleFlag) == 0x00060D, "Member 'ALobbySequenceBase::RaceCycleFlag' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, UseStateSelectCourse) == 0x00060E, "Member 'ALobbySequenceBase::UseStateSelectCourse' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, IsFinishedSelectCourseResult) == 0x00060F, "Member 'ALobbySequenceBase::IsFinishedSelectCourseResult' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, IsLobbySearching) == 0x000610, "Member 'ALobbySequenceBase::IsLobbySearching' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, IsVisibleMatchingNow) == 0x000611, "Member 'ALobbySequenceBase::IsVisibleMatchingNow' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, IsCallForceBack) == 0x000612, "Member 'ALobbySequenceBase::IsCallForceBack' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, UIFadeWidget) == 0x000618, "Member 'ALobbySequenceBase::UIFadeWidget' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, NetLobbyControlComponentClass) == 0x000620, "Member 'ALobbySequenceBase::NetLobbyControlComponentClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, P2PConnectionClass) == 0x000628, "Member 'ALobbySequenceBase::P2PConnectionClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, SubLevelName) == 0x000630, "Member 'ALobbySequenceBase::SubLevelName' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LobbyTimerType) == 0x000638, "Member 'ALobbySequenceBase::LobbyTimerType' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LobbyTimerStartTimeCount) == 0x000640, "Member 'ALobbySequenceBase::LobbyTimerStartTimeCount' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LobbyTravelRingManagerPtr) == 0x000690, "Member 'ALobbySequenceBase::LobbyTravelRingManagerPtr' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, MatchingConpleteQue) == 0x0006B8, "Member 'ALobbySequenceBase::MatchingConpleteQue' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, MatchingWaitLoopCue) == 0x0006C0, "Member 'ALobbySequenceBase::MatchingWaitLoopCue' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, MatchingWaitLoop) == 0x0006C8, "Member 'ALobbySequenceBase::MatchingWaitLoop' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LobbySearchCancelTimeLine) == 0x0006D0, "Member 'ALobbySequenceBase::LobbySearchCancelTimeLine' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LongPutCancelTimeLine) == 0x0006D8, "Member 'ALobbySequenceBase::LongPutCancelTimeLine' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, LongPutCancelTimeLineClass) == 0x0006E0, "Member 'ALobbySequenceBase::LongPutCancelTimeLineClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, bIsSendStamp) == 0x0006E8, "Member 'ALobbySequenceBase::bIsSendStamp' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase, bIsSendHorn) == 0x0006E9, "Member 'ALobbySequenceBase::bIsSendHorn' has a wrong offset!");

// Class UNION.SquadSequence
// 0x0000 (0x08C8 - 0x08C8)
class ASquadSequence final : public ALobbySequenceBase
{
public:
	void OnInitStateFriendList();
	void OnInitStatePlayerProfile();
	void OnInitStateSquadTop();
	void SetNextSquadSequenceState(ESquadSequenceState InState, ESquadSequenceState PrevState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SquadSequence">();
	}
	static class ASquadSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASquadSequence>();
	}
};
static_assert(alignof(ASquadSequence) == 0x000008, "Wrong alignment on ASquadSequence");
static_assert(sizeof(ASquadSequence) == 0x0008C8, "Wrong size on ASquadSequence");

// Class UNION.AddCharacterInfo
// 0x0020 (0x0300 - 0x02E0)
class UAddCharacterInfo : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x10];                                     // 0x02E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUserWidget*>                    SubWidgetList;                                     // 0x02F0(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void Open(EDriverId characterId);
	void SetLastCutTexture(class UTexture2D* Texture);
	void SetSubWidgetTexture(class UUserWidget* SubWidget, class UTexture2D* Texture);
	void SetText(const class FText& TopText, const class FText& BottomText, const class FText& NameText);
	void SetupCharacter(EDriverId characterId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AddCharacterInfo">();
	}
	static class UAddCharacterInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddCharacterInfo>();
	}
};
static_assert(alignof(UAddCharacterInfo) == 0x000008, "Wrong alignment on UAddCharacterInfo");
static_assert(sizeof(UAddCharacterInfo) == 0x000300, "Wrong size on UAddCharacterInfo");
static_assert(offsetof(UAddCharacterInfo, SubWidgetList) == 0x0002F0, "Member 'UAddCharacterInfo::SubWidgetList' has a wrong offset!");

// Class UNION.LobbyFinishDirectingManager
// 0x0010 (0x02A0 - 0x0290)
class ALobbyFinishDirectingManager final : public AActor
{
public:
	TMulticastInlineDelegate<void()>              LobbyEndDirectingFinished;                         // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnInitialize();
	void OnSetup(EMatchingLobbyType InGameMode);
	void PlaySequenceEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyFinishDirectingManager">();
	}
	static class ALobbyFinishDirectingManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyFinishDirectingManager>();
	}
};
static_assert(alignof(ALobbyFinishDirectingManager) == 0x000008, "Wrong alignment on ALobbyFinishDirectingManager");
static_assert(sizeof(ALobbyFinishDirectingManager) == 0x0002A0, "Wrong size on ALobbyFinishDirectingManager");
static_assert(offsetof(ALobbyFinishDirectingManager, LobbyEndDirectingFinished) == 0x000290, "Member 'ALobbyFinishDirectingManager::LobbyEndDirectingFinished' has a wrong offset!");

// Class UNION.AdvertiseWidget
// 0x0008 (0x03E0 - 0x03D8)
class UAdvertiseWidget : public UUnionUISceneBase
{
public:
	class UImage*                                 Controller_Info;                                   // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AnimationIn();
	void AnimationOut();
	void FinishAdvertiseMovie();
	void InitialiseMovie(const int32 MovieListIndex);
	bool IsOfficialVersion();
	void PauseAllAdvAnimation();
	void SetStrapTexture(class UTexture2D* InStrapTexture);
	void SkipAdvertiseLogo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdvertiseWidget">();
	}
	static class UAdvertiseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdvertiseWidget>();
	}
};
static_assert(alignof(UAdvertiseWidget) == 0x000008, "Wrong alignment on UAdvertiseWidget");
static_assert(sizeof(UAdvertiseWidget) == 0x0003E0, "Wrong size on UAdvertiseWidget");
static_assert(offsetof(UAdvertiseWidget, Controller_Info) == 0x0003D8, "Member 'UAdvertiseWidget::Controller_Info' has a wrong offset!");

// Class UNION.AnotherStageLotteryWheel
// 0x1540 (0x1568 - 0x0028)
class UAnotherStageLotteryWheel final : public UObject
{
public:
	uint8                                         Pad_28[0x1530];                                    // 0x0028(0x1530)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EStageId>                              IgnoreCourses;                                     // 0x1558(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void AddIgnoreStage(EStageId IgnoreCourse);
	void AddIgnoreStages(const TArray<EStageId>& IgnoreCourses_0);
	void GetLotteryResultsStageIds(TArray<EStageId>* OutStageIds);
	const TArray<struct FAnotherStageLotteryResult> Lot(bool bUseCache, bool bIsResult);
	void Reset(int32 InSeed);
	void Setup();
	void SetupManual(const struct FAnotherStageLotteryParameter& InParameter);
	void WriteLotteryResultToSettings();

	const TArray<struct FAnotherStageLotteryResult> GetLotteryResults() const;
	int32 GetSeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnotherStageLotteryWheel">();
	}
	static class UAnotherStageLotteryWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnotherStageLotteryWheel>();
	}
};
static_assert(alignof(UAnotherStageLotteryWheel) == 0x000008, "Wrong alignment on UAnotherStageLotteryWheel");
static_assert(sizeof(UAnotherStageLotteryWheel) == 0x001568, "Wrong size on UAnotherStageLotteryWheel");
static_assert(offsetof(UAnotherStageLotteryWheel, IgnoreCourses) == 0x001558, "Member 'UAnotherStageLotteryWheel::IgnoreCourses' has a wrong offset!");

// Class UNION.ContentsItemHelper
// 0x0000 (0x0028 - 0x0028)
class UContentsItemHelper final : public UBlueprintFunctionLibrary
{
public:
	static bool ForceGetIsCharacterReleased(EDriverId DriverId);
	static bool ForceGetIsGadgetReleased(EGadgetId gadgetId);
	static bool ForceGetIsHonorTitleReleased(int32 HonorTitleId);
	static void ForceGetIsItemReleased(const struct FContentItem& CheckItem, bool* IsReleased);
	static bool ForceGetIsMachineReleased(EMachineId MachineId);
	static void GetCanUseDLCStageList(TArray<struct FContentItem>* CheckItemList);
	static void GetCanUseItemList(EGameModeId GameModeID, TArray<struct FContentItem>* CheckItemList);
	static bool GetIsAuraReleased(EMachineAuraId AuraId);
	static bool GetIsCharacterReleased(EDriverId DriverId);
	static bool GetIsGadgetReleased(EGadgetId gadgetId);
	static bool GetIsHonorTitleReleased(int32 HonorTitleId);
	static bool GetIsHornReleased(EMachineHornType hornId);
	static void GetIsItemReleased(const struct FContentItem& CheckItem, bool* IsReleased);
	static bool GetIsMachineReleased(EMachineId MachineId);
	static bool GetIsStickerReleased(int32 stickerId);
	static void GetUnlockItemList(TArray<struct FContentItem>* CheckItemList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ContentsItemHelper">();
	}
	static class UContentsItemHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentsItemHelper>();
	}
};
static_assert(alignof(UContentsItemHelper) == 0x000008, "Wrong alignment on UContentsItemHelper");
static_assert(sizeof(UContentsItemHelper) == 0x000028, "Wrong size on UContentsItemHelper");

// Class UNION.CorseLotteryWheelBase
// 0x13F0 (0x1418 - 0x0028)
class UCorseLotteryWheelBase : public UObject
{
public:
	uint8                                         Pad_28[0x13F0];                                    // 0x0028(0x13F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetLotteryResultsStageIds(TArray<EStageId>* OutStageIds);
	const TArray<EStageId> Lot();
	void Reset(int32 InSeed);
	void WriteLotteryResultToSettings();

	int32 GetSeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorseLotteryWheelBase">();
	}
	static class UCorseLotteryWheelBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorseLotteryWheelBase>();
	}
};
static_assert(alignof(UCorseLotteryWheelBase) == 0x000008, "Wrong alignment on UCorseLotteryWheelBase");
static_assert(sizeof(UCorseLotteryWheelBase) == 0x001418, "Wrong size on UCorseLotteryWheelBase");

// Class UNION.RankMatchCorseLotteryWheel
// 0x0000 (0x1418 - 0x1418)
class URankMatchCorseLotteryWheel final : public UCorseLotteryWheelBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RankMatchCorseLotteryWheel">();
	}
	static class URankMatchCorseLotteryWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<URankMatchCorseLotteryWheel>();
	}
};
static_assert(alignof(URankMatchCorseLotteryWheel) == 0x000008, "Wrong alignment on URankMatchCorseLotteryWheel");
static_assert(sizeof(URankMatchCorseLotteryWheel) == 0x001418, "Wrong size on URankMatchCorseLotteryWheel");

// Class UNION.AppCharaOpenDataAccessor
// 0x0000 (0x0028 - 0x0028)
class UAppCharaOpenDataAccessor final : public UBlueprintFunctionLibrary
{
public:
	static void GetAppCharaOpenData(struct FAppCharaOpenData* OutData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppCharaOpenDataAccessor">();
	}
	static class UAppCharaOpenDataAccessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppCharaOpenDataAccessor>();
	}
};
static_assert(alignof(UAppCharaOpenDataAccessor) == 0x000008, "Wrong alignment on UAppCharaOpenDataAccessor");
static_assert(sizeof(UAppCharaOpenDataAccessor) == 0x000028, "Wrong size on UAppCharaOpenDataAccessor");

// Class UNION.CommonShopLabel
// 0x0028 (0x0308 - 0x02E0)
class UCommonShopLabel : public UUserWidget
{
public:
	class UImage*                                 BG;                                                // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WSIcons;                                           // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WSLock;                                            // 0x02F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FLinearColor>                   BGColor;                                           // 0x02F8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnSetPrice(int32 InPrice);
	void OnSetPriceColor(const struct FSlateColor& InColor);
	void SetupLock(bool IsLock);
	void SetupNone();
	void SetupPrice(int32 InPrice, const struct FSlateColor& InColor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonShopLabel">();
	}
	static class UCommonShopLabel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonShopLabel>();
	}
};
static_assert(alignof(UCommonShopLabel) == 0x000008, "Wrong alignment on UCommonShopLabel");
static_assert(sizeof(UCommonShopLabel) == 0x000308, "Wrong size on UCommonShopLabel");
static_assert(offsetof(UCommonShopLabel, BG) == 0x0002E0, "Member 'UCommonShopLabel::BG' has a wrong offset!");
static_assert(offsetof(UCommonShopLabel, WSIcons) == 0x0002E8, "Member 'UCommonShopLabel::WSIcons' has a wrong offset!");
static_assert(offsetof(UCommonShopLabel, WSLock) == 0x0002F0, "Member 'UCommonShopLabel::WSLock' has a wrong offset!");
static_assert(offsetof(UCommonShopLabel, BGColor) == 0x0002F8, "Member 'UCommonShopLabel::BGColor' has a wrong offset!");

// Class UNION.AppDataManageSubsystem
// 0x08C0 (0x08F0 - 0x0030)
class UAppDataManageSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x7F0];                                     // 0x0030(0x07F0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnionRaceResource                     RaceResource;                                      // 0x0820(0x00B0)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_8D0[0x20];                                     // 0x08D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginDebugMode();
	void ConfirmNoticeStreamingInstall();
	void EndDebugMode();
	struct FAppCharaOpenData GetCharaOpenData();
	struct FDebugAppMenuData GetDebugAppMenuData();
	bool GetForceDisableLobbyKick();
	bool GetForceOpenCollabo();
	bool GetForceOpenFriendMatch();
	bool GetForceSkipCloseLobbyInvitationWindow();
	bool GetForceUpdateCustomRuleRaceCountMax();
	struct FAppGadgetCustomizeData GetGadgetCustomizeData();
	struct FAppMenuData GetMenuData();
	void GetOverrideDriverIds(TArray<int32>* OutDriverIds);
	struct FAppRaceConfigData GetRaceConfigData();
	struct FAppRaceCountManageData GetRaceCountManageData();
	struct FAppRaceResultData GetRaceResultData();
	bool IsAllResourcesLoaded();
	bool IsOpenFriendListInOfflineSequence();
	bool IsSafe2ndLapCourse();
	void LoadDebugSettings();
	void LoadResources();
	void OnMapLoadFinished(class UWorld* NewWorld);
	void SetCharaOpenData(const struct FAppCharaOpenData& InSrc);
	void SetDebugAppMenuData(const struct FDebugAppMenuData& InSrc);
	void SetDebugOnlineFillCom(bool flg);
	void SetEnableLobbyLeaveInReturnedFromRaceToLobby(bool InEnable);
	void SetForceDisableLobbyKick(bool InDisable);
	void SetForceOpenCollabo(bool InEnable);
	void SetForceOpenFriendMatch(bool InEnable);
	void SetForceSkipCloseLobbyInvitationWindow(bool InEnable);
	void SetForceUpdateCustomRuleRaceCountMax(bool InEnable);
	void SetGadgetCustomizeData(const struct FAppGadgetCustomizeData& InSrc);
	void SetIsSafe2ndLapCourse(bool bInSafe);
	void SetMenuData(const struct FAppMenuData& InSrc);
	void SetOpenFriendListInOfflineSequence(bool InEnable);
	void SetPrivateMatchMonkeyTestAllSet();
	void SetRaceConfigData(const struct FAppRaceConfigData& InSrc);
	void SetRaceResultData(const struct FAppRaceResultData& InSrc);
	void SpawnedNpcDefaultMeshNum();
	void StoreCurrentLevelObjectPtr();
	void UnloadResources();

	bool AnyEntryCheckSuspend() const;
	float DirectionalEffectDisplayDurationForHoldItem() const;
	int32 GetAuraType() const;
	TSoftObjectPtr<class UWorld> GetCurrentLevelObjectPtr() const;
	float GetDebugCameraFocusDistance() const;
	float GetDebugCameraFOV() const;
	int32 getDebugDLCId() const;
	struct FVector GetDebugHoverProfileCamera() const;
	struct FVector GetDebugHoverProfileTarget() const;
	struct FVector GetDebugProfileCamera() const;
	struct FVector GetDebugProfileTarget() const;
	int32 GetDebugWorldMatchType() const;
	float GetDriftNoStartActionPlayRate() const;
	int32 GetEntryCheckSuspendSec() const;
	const TArray<EHoldItemMeshType> GetHoldItemQualitiesNonPC() const;
	const TArray<EHoldItemMeshType> GetHoldItemQualitiesPC() const;
	int32 GetHornType() const;
	EVehicleEngineSoundType GetLocalPlayerEngineSoundType() const;
	EVehicleMeshType GetLocalPlayerModelType() const;
	EVehicleEngineSoundType GetNpcEngineSoundType() const;
	EVehicleMeshType GetNpcModelType() const;
	TSoftObjectPtr<class UWorld> GetPreviousLevelObjectPtr() const;
	int32 GetStampType() const;
	bool HasEntryCheckError(uint8 ErrorNo) const;
	bool HasEntryCheckSuspend(uint8 SuspendNo) const;
	bool IsConfirmedNoticeStreamingInstall() const;
	bool IsDebugInteraction() const;
	bool IsDebugMode() const;
	bool IsDebugOnlineFillCom() const;
	bool IsDLCNoticeForceSet() const;
	bool IsDodonpaForceStart() const;
	bool IsEnableDebugWirelessSequence() const;
	bool IsEnableDirectionalEffectForHoldItem() const;
	bool IsEnableDriftNoStartAction() const;
	bool IsEnableEnterLobbyAlone() const;
	bool IsEnableFlowingWaterPP() const;
	bool IsEnableHiSpeedPP() const;
	bool IsEnableLegendOpen() const;
	bool IsEnableLobbyLeaveInReturnedFromRaceToLobby() const;
	bool IsEnableLocalPlayerSound() const;
	bool IsEnableLocalPlayerSurfaceSound() const;
	bool IsEnableNpcSound() const;
	bool IsEnableNpcSurfaceSound() const;
	bool IsEnableOldOnlineSequence() const;
	bool IsEnableOnlineLobbySequenceDebugShowInfo() const;
	bool IsEnableOnlineRaceHost() const;
	bool IsEnableOptimizedMeshEffect() const;
	bool IsEnableOverrideDriverId() const;
	bool IsEnableRadialBlurPP() const;
	bool IsEnableSkipTitleLogin() const;
	bool IsEnableSpinDriftStateDebugPrint() const;
	bool IsFestaForceNotice() const;
	bool IsFestaForceOutside() const;
	bool IsFestaForceStart() const;
	bool IsForceSpawnNpcDefaultMesh() const;
	bool IsLegendForceNotice() const;
	bool IsLegendForceStart() const;
	bool IsLocalPlayerForceCOM(int32 InLocalPlayerIndex) const;
	bool IsSkipEntryCheck() const;
	bool IsSpawnLocalPlayerBodycutActor() const;
	bool IsSpawnLocalPlayerDriverActor() const;
	bool IsSpawnNpcBodycutActor() const;
	bool IsSpawnNpcDriverActor() const;
	bool IsVisibleLocalPlayerEffect() const;
	bool IsVisibleLocalPlayerGhostLoadEffect() const;
	bool IsVisibleLocalPlayerSurfaceEffect() const;
	bool IsVisibleLocalPlayerTireMark() const;
	bool IsVisibleNpcEffect() const;
	bool IsVisibleNpcGhostLoadEffect() const;
	bool IsVisibleNpcSurfaceEffect() const;
	bool IsVisibleNpcTireMark() const;
	bool IsVisiblePlayerNameAndNumber() const;
	bool UnLockWireless() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppDataManageSubsystem">();
	}
	static class UAppDataManageSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppDataManageSubsystem>();
	}
};
static_assert(alignof(UAppDataManageSubsystem) == 0x000008, "Wrong alignment on UAppDataManageSubsystem");
static_assert(sizeof(UAppDataManageSubsystem) == 0x0008F0, "Wrong size on UAppDataManageSubsystem");
static_assert(offsetof(UAppDataManageSubsystem, RaceResource) == 0x000820, "Member 'UAppDataManageSubsystem::RaceResource' has a wrong offset!");

// Class UNION.RaceSequenceStateBase
// 0x0018 (0x0110 - 0x00F8)
class URaceSequenceStateBase : public UHierarchicalStateMachineStateComponent
{
public:
	ERaceSequenceState                            DefaultMenuState;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARaceSequence*                          OwnerRaceSequence;                                 // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearTimeoutTimer();
	void OnTimeout();
	bool SetNextRaceSequenceState(ERaceSequenceState InState);
	bool StartTimeoutTimer(float TimeoutTime);

	class ARaceSequence* GetOwnerRaceSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateBase">();
	}
	static class URaceSequenceStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateBase>();
	}
};
static_assert(alignof(URaceSequenceStateBase) == 0x000008, "Wrong alignment on URaceSequenceStateBase");
static_assert(sizeof(URaceSequenceStateBase) == 0x000110, "Wrong size on URaceSequenceStateBase");
static_assert(offsetof(URaceSequenceStateBase, DefaultMenuState) == 0x0000F8, "Member 'URaceSequenceStateBase::DefaultMenuState' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateBase, OwnerRaceSequence) == 0x000100, "Member 'URaceSequenceStateBase::OwnerRaceSequence' has a wrong offset!");

// Class UNION.RaceSequenceStateCeremony
// 0x0008 (0x0118 - 0x0110)
class URaceSequenceStateCeremony : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateCeremony">();
	}
	static class URaceSequenceStateCeremony* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateCeremony>();
	}
};
static_assert(alignof(URaceSequenceStateCeremony) == 0x000008, "Wrong alignment on URaceSequenceStateCeremony");
static_assert(sizeof(URaceSequenceStateCeremony) == 0x000118, "Wrong size on URaceSequenceStateCeremony");

// Class UNION.AppFriendUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UAppFriendUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ConvertLobbyIdStringForDisplay(class FString* OutLobbyIdForDisplay, const class FString& InTargetLobbyId);
	static void ConvertPlayerIdStringForDisplay(class FString* OutPlayerIdForDisplay, const class FString& InTargetPlayerId);
	static ECrossplayPlatform GetPlatformTypeByStringData(const class FString& InPlatformStr);
	static bool GetPlayerIconBgColorDataTableRow(const class UDataTable* InDatatable, const class FName& InRowName, struct FOnlineSettingPlayerIconBgColorDataTableRow* OutDataTableRow);
	static bool GetPlayerIconBgColorDataTableRowByColorId(const class UDataTable* InDatatable, int32 InColorId, struct FOnlineSettingPlayerIconBgColorDataTableRow* OutDataTableRow);
	static bool GetPlayerIconDataTableRow(const class UDataTable* InDatatable, const class FName& InRowName, struct FOnlineSettingPlayerIconDataTableRow* OutDataTableRow);
	static bool GetPlayerIconDataTableRowByIconId(const class UDataTable* InDatatable, int32 InIconId, struct FOnlineSettingPlayerIconDataTableRow* OutDataTableRow);
	static bool GetPlayerIconDataTableRowBySelectIndex(const class UDataTable* InDatatable, int32 InDisplayIndex, struct FOnlineSettingPlayerIconDataTableRow* OutDataTableRow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppFriendUtilityLibrary">();
	}
	static class UAppFriendUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppFriendUtilityLibrary>();
	}
};
static_assert(alignof(UAppFriendUtilityLibrary) == 0x000008, "Wrong alignment on UAppFriendUtilityLibrary");
static_assert(sizeof(UAppFriendUtilityLibrary) == 0x000028, "Wrong size on UAppFriendUtilityLibrary");

// Class UNION.AppMatchUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UAppMatchUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void FillCOMUser(const class UObject* WorldContextObject, class ULobbyContextBase* LobbyContext);
	static struct FMCEventData GetMCEventData();
	static void SetupOnlinePeerRaceConfig(class UObject* WorldContextObject, class UCommonLobbyContext* LobbyContext);
	static void SetupOnlineUserRacerConfig(class UObject* WorldContextObject, int32 OnlineIndex, class UCommonLobbyMemberContext* MemberContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppMatchUtilityLibrary">();
	}
	static class UAppMatchUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppMatchUtilityLibrary>();
	}
};
static_assert(alignof(UAppMatchUtilityLibrary) == 0x000008, "Wrong alignment on UAppMatchUtilityLibrary");
static_assert(sizeof(UAppMatchUtilityLibrary) == 0x000028, "Wrong size on UAppMatchUtilityLibrary");

// Class UNION.CourseSelectRivalChoiceButton
// 0x0030 (0x04B0 - 0x0480)
class UCourseSelectRivalChoiceButton : public UUnionUIButtonBase
{
public:
	TMulticastInlineDelegate<void()>              OnHoveredDelegate;                                 // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UImage*                                 _CharaImage;                                       // 0x0490(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _CharaNameTextBlock;                               // 0x0498(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UButton*                                _ChoiceButton;                                     // 0x04A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _Ready;                                            // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelIn();
	void DecisionIn();
	void FocusIn();
	void FocusOut();
	void FocusThis();
	void OnButtonClicked();
	void OnButtonHovered();
	void StartInAnim();
	void StartLoad(EDriverId RivalDriverId);

	EDriverId GetDriverID() const;
	bool IsReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CourseSelectRivalChoiceButton">();
	}
	static class UCourseSelectRivalChoiceButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCourseSelectRivalChoiceButton>();
	}
};
static_assert(alignof(UCourseSelectRivalChoiceButton) == 0x000008, "Wrong alignment on UCourseSelectRivalChoiceButton");
static_assert(sizeof(UCourseSelectRivalChoiceButton) == 0x0004B0, "Wrong size on UCourseSelectRivalChoiceButton");
static_assert(offsetof(UCourseSelectRivalChoiceButton, OnHoveredDelegate) == 0x000480, "Member 'UCourseSelectRivalChoiceButton::OnHoveredDelegate' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalChoiceButton, _CharaImage) == 0x000490, "Member 'UCourseSelectRivalChoiceButton::_CharaImage' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalChoiceButton, _CharaNameTextBlock) == 0x000498, "Member 'UCourseSelectRivalChoiceButton::_CharaNameTextBlock' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalChoiceButton, _ChoiceButton) == 0x0004A0, "Member 'UCourseSelectRivalChoiceButton::_ChoiceButton' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalChoiceButton, _Ready) == 0x0004A8, "Member 'UCourseSelectRivalChoiceButton::_Ready' has a wrong offset!");

// Class UNION.AppMenuDataAccessor
// 0x0000 (0x0028 - 0x0028)
class UAppMenuDataAccessor final : public UBlueprintFunctionLibrary
{
public:
	static void AddMenuDataNormalRivalIds(const EDriverId AddDriverId);
	static void AddMenuDataPowerRivalIds(const EDriverId AddDriverId);
	static void ClearMenuDataNormalRivalIds();
	static void ClearMenuDataPowerRivalIds();
	static void GetAppMenuData(struct FAppMenuData* OutData);
	static bool GetEnableOnlinePlay();
	static bool GetExecuteAdvertiseOnce();
	static bool GetExecuteStorePopupAutoOnce();
	static bool GetExecuteStorePopupAutoRequest();
	static bool GetHintRequest(EHintId InHintId);
	static TArray<EHintId> GetHintRequestArray();
	static EGroupRaceRule GetLastPlayFestaRuleId();
	static ECommonRaceMenuContentId GetLastSelectedRaceMenu();
	static uint8 GetMenuDataBaseRivalLevel();
	static const EDriverId GetMenuDataLastChoiceDriverId();
	static uint8 GetMenuDataLastChoiceRivalLevel();
	static const ERivalType GetMenuDataLastChoiceRivalType();
	static TArray<EDriverId> GetMenuDataNormalRivalIds();
	static TArray<EDriverId> GetMenuDataPowerRivalIds();
	static uint8 GetNeedsDonpaTicketForRaceRetry();
	static bool GetNewFlagForMachineParts();
	static EEtceteraSequenceMainState GetNextEtceteraSequenceMainState();
	static TArray<EStageId> GetPrivateMatchCourseSwitchSetting();
	static struct FPartyRacePresetSetting GetPrivateMatchCustomRaceSetting();
	static struct FItemSwitchSetting GetPrivateMatchItemSwitchSetting();
	static struct FSoundHandle GetRacePauseMenuInSESoundHandle();
	static EGrandPrixEndingId GetReservedGrandPrixEnding();
	static EMenuSpeedClassId GetSelectedMenuSpeedClassId();
	static ETopMenuPlayMode GetSelectedTopMenuPlayMode();
	static ETitleVisualId GetTitleVisualId();
	static bool IsBackToTitle();
	static bool IsBackToTopMenu();
	static bool IsBetweenCharaMachine();
	static bool IsChangedSettingVoiceLanguage();
	static bool IsComeBackFromRace();
	static bool IsIncompleteCollaboGPDescriptionPopupViewed();
	static bool IsReservedGameModeSelectOfTopMenu();
	static bool IsReservedRaceparkCleardDodonpaEvent();
	static bool IsSubMenuOnlineMode();
	static bool IsTimeTrialSkipSelectClassOnetime();
	static bool IsTitleForce2ndVisual();
	static bool IsTryGetCompensation();
	static void RemoveMenuDataNormalRivalIds(const EDriverId RemoveDriverId);
	static void RemoveMenuDataPowerRivalIds(const EDriverId RemoveDriverId);
	static void ReserveGrandPrixEnding(EGrandPrixEndingId GrandPrixEndingId);
	static void SetAppMenuData(const struct FAppMenuData& NewData);
	static void SetBackToTitle(bool bBackToTitle);
	static void SetBackToTopMenu(bool bNewValue);
	static void SetBetweenCharaMachine(bool bNewValue);
	static void SetComeBackFromRace(bool bNewValue);
	static void SetExecuteAdvertiseOnce();
	static void SetExecuteStorePopupAutoOnce();
	static void SetExecuteStorePopupAutoRequest();
	static void SetHintRequest(EHintId InHintId, bool bInRequest);
	static void SetIncompleteCollaboGPDescriptionPopupViewed(bool Value);
	static void SetIsReservedGameModeSelectOfTopMenu(bool Reserve);
	static void SetLastPlayFestaRuleId(EGroupRaceRule InPlayFestaRuleId);
	static void SetLastSelectedRaceMenu(ECommonRaceMenuContentId InLastSelected);
	static void SetMenuDataBaseRivalLevel(uint8 Value);
	static void SetMenuDataLastChoiceDriverId(const EDriverId SetDriverId);
	static void SetMenuDataLastChoiceRivalLevel(uint8 Value);
	static void SetMenuDataLastChoiceRivalType(const ERivalType SetValue);
	static void SetMenuDataNormalRivalIds(const TArray<EDriverId>& SetDriverIds);
	static void SetMenuDataPowerRivalIds(const TArray<EDriverId>& SetDriverIds);
	static void SetNewFlagForMachineParts(bool bNewValue);
	static void SetNextEtceteraSequenceMainState(EEtceteraSequenceMainState EtceteraSequenceMainState);
	static void SetPrivateMatchCourseSwitchSetting(const TArray<EStageId>& StageIds);
	static void SetPrivateMatchCustomRaceSetting(const struct FPartyRacePresetSetting& InRaceSetting);
	static void SetPrivateMatchItemSwitchSetting(int32 InGroup, const struct FItemSwitchSettingSingle& InItemSwitchSetting);
	static void SetPrivateMatchItemSwitchSettingAll(const struct FItemSwitchSetting& InItemSwitchSetting);
	static void SetRacePauseMenuInSESoundHandle(const struct FSoundHandle& SoundHandle);
	static void SetReservedRaceparkCleardDodonpaEvent(bool Reserve);
	static void SetSelectedMenuSpeedClassId(EMenuSpeedClassId NewId, bool InOnlyRaceSpeedClass);
	static void SetSelectedTopMenuPlayMode(ETopMenuPlayMode InTopMenuPlayMode);
	static void SetSubMenuOnlineMode(bool bIsSubMenuOnlineMode);
	static void SetTimeTrialSkipSelectClassOnetime(bool Value);
	static void SetTitleForce2ndVisual(bool Force);
	static void SetTitleVisualId(ETitleVisualId TitleVisualId);
	static void SetTryGetCompensation(const bool bInFlag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppMenuDataAccessor">();
	}
	static class UAppMenuDataAccessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppMenuDataAccessor>();
	}
};
static_assert(alignof(UAppMenuDataAccessor) == 0x000008, "Wrong alignment on UAppMenuDataAccessor");
static_assert(sizeof(UAppMenuDataAccessor) == 0x000028, "Wrong size on UAppMenuDataAccessor");

// Class UNION.RacerAnimInstance
// 0x0080 (0x03F0 - 0x0370)
class URacerAnimInstance : public UAnimInstance
{
public:
	TScriptInterface<class IDriverAnimator>       DriverAnimator;                                    // 0x0368(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_378[0x78];                                     // 0x0378(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetAnimationFlag(const EDriverAnimationFlag flag) const;
	float GetAnimationParam(const EDriverAnimationParam ID) const;
	bool GetFlag(const ERacerAnimationFlag flag) const;
	EBoneScaleFaceType GetMontagePlayingScaleFace() const;
	float GetParam(const ERacerAnimationParam ID) const;
	ERacerDriftState GetRacerStateDrift() const;
	EVehicleDisplayMode GetRideableDisplayMode() const;
	ECarStatusType GetRideableStatusType() const;
	EVehicleType GetRideableType() const;
	EBoneScaleFaceType GetStateMachineScaleFace() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RacerAnimInstance">();
	}
	static class URacerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<URacerAnimInstance>();
	}
};
static_assert(alignof(URacerAnimInstance) == 0x000010, "Wrong alignment on URacerAnimInstance");
static_assert(sizeof(URacerAnimInstance) == 0x0003F0, "Wrong size on URacerAnimInstance");
static_assert(offsetof(URacerAnimInstance, DriverAnimator) == 0x000368, "Member 'URacerAnimInstance::DriverAnimator' has a wrong offset!");

// Class UNION.DriverAnimInstance
// 0x0BC0 (0x0FB0 - 0x03F0)
class UDriverAnimInstance : public URacerAnimInstance
{
public:
	uint8                                         Pad_3F0[0x10];                                     // 0x03F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IHoldItemAnimator>     HoldItemAnimator;                                  // 0x0400(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeshVisibilityFromAnimationCurve;                 // 0x0411(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_412[0x6];                                      // 0x0412(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          AnimationAssets[0xA1];                             // 0x0418(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBlendSpace*                            BlendSpaceAssets[0x9];                             // 0x0920(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           AnimMontageAssets[0xA1];                           // 0x0968(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         IsSharedAnimMontageAssets[0xA1];                   // 0x0E70(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F11[0x7];                                      // 0x0F11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          FaceAnimationAssets[0x3];                          // 0x0F18(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F30[0x50];                                     // 0x0F30(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomAttrAnimComponent*               CustomAttrAnimComponent;                           // 0x0F80(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           PlayingFaceMontageDamage;                          // 0x0F88(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           PlayingFaceMontageNormal;                          // 0x0F90(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F98[0x18];                                     // 0x0F98(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTrickMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void PreloadAllAssets();
	void ReloadAllAssets();
	void SetAnimSyncTimeById(const ERacerAnimSyncId ID, float Time);

	class UAnimSequence* GetAnimationAssetById(const EDriverAnimationAssetId AssetId) const;
	class UAnimMontage* GetAnimMontageAssetById(const EDriverAnimationAssetId AssetId) const;
	float GetAnimSyncTimeById(const ERacerAnimSyncId ID) const;
	class UBlendSpace* GetBlendSpaceAssetById(const EDriverBlendSpaceAssetId AssetId) const;
	bool IsPlayingAnyAnimMontage() const;
	bool IsPlayingTopMostAnimMontage() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DriverAnimInstance">();
	}
	static class UDriverAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDriverAnimInstance>();
	}
};
static_assert(alignof(UDriverAnimInstance) == 0x000010, "Wrong alignment on UDriverAnimInstance");
static_assert(sizeof(UDriverAnimInstance) == 0x000FB0, "Wrong size on UDriverAnimInstance");
static_assert(offsetof(UDriverAnimInstance, HoldItemAnimator) == 0x000400, "Member 'UDriverAnimInstance::HoldItemAnimator' has a wrong offset!");
static_assert(offsetof(UDriverAnimInstance, DriverId) == 0x000410, "Member 'UDriverAnimInstance::DriverId' has a wrong offset!");
static_assert(offsetof(UDriverAnimInstance, bMeshVisibilityFromAnimationCurve) == 0x000411, "Member 'UDriverAnimInstance::bMeshVisibilityFromAnimationCurve' has a wrong offset!");
static_assert(offsetof(UDriverAnimInstance, AnimationAssets) == 0x000418, "Member 'UDriverAnimInstance::AnimationAssets' has a wrong offset!");
static_assert(offsetof(UDriverAnimInstance, BlendSpaceAssets) == 0x000920, "Member 'UDriverAnimInstance::BlendSpaceAssets' has a wrong offset!");
static_assert(offsetof(UDriverAnimInstance, AnimMontageAssets) == 0x000968, "Member 'UDriverAnimInstance::AnimMontageAssets' has a wrong offset!");
static_assert(offsetof(UDriverAnimInstance, IsSharedAnimMontageAssets) == 0x000E70, "Member 'UDriverAnimInstance::IsSharedAnimMontageAssets' has a wrong offset!");
static_assert(offsetof(UDriverAnimInstance, FaceAnimationAssets) == 0x000F18, "Member 'UDriverAnimInstance::FaceAnimationAssets' has a wrong offset!");
static_assert(offsetof(UDriverAnimInstance, CustomAttrAnimComponent) == 0x000F80, "Member 'UDriverAnimInstance::CustomAttrAnimComponent' has a wrong offset!");
static_assert(offsetof(UDriverAnimInstance, PlayingFaceMontageDamage) == 0x000F88, "Member 'UDriverAnimInstance::PlayingFaceMontageDamage' has a wrong offset!");
static_assert(offsetof(UDriverAnimInstance, PlayingFaceMontageNormal) == 0x000F90, "Member 'UDriverAnimInstance::PlayingFaceMontageNormal' has a wrong offset!");

// Class UNION.AppNetComponent
// 0x01E8 (0x0288 - 0x00A0)
class UAppNetComponent : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(bool ResultIsYes)> OnInviteWindowResult;                           // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInviteConfirmWindowIn;                           // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bResultYes)> OnInviteConfirmWindowOut;                        // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class AProcessLobbyInvitationObject*          LobbyProcessObject;                                // 0x00D0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyInvitationNoticeWidget*           LobbyInvitationNoticeWidgetPtr;                    // 0x00D8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLobbyInvitationNoticeInfo             LobbyInvitationNoticeInfoStruct;                   // 0x00E0(0x0090)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class ULobbyJoinInfo*                         InvitationInfo;                                    // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLobbyId                               SearchLobbyId;                                     // 0x0178(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FLobbyId                               PlatformInviteReceivedLobbyId;                     // 0x0188(0x0010)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UUnionUIPopupWindowBase*                ErrorPopupWindowPtr;                               // 0x0198(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIPopupWindowBase*                ReturnToTitleErrorPopupWindowPtr;                  // 0x01A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsPlatformDecide;                                  // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ELobbyNoticeErrorType, class FText>      ErrorTitleText;                                    // 0x01B0(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<ELobbyNoticeErrorType, class FText>      ErrorMessageText;                                  // 0x0200(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   WaitCheckTitle;                                    // 0x0250(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   WaitCheckMessage;                                  // 0x0260(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UObject*                                PrevRegisteredMenu;                                // 0x0270(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIPopupWindowBase*                WaitCheckPopup;                                    // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_280[0x8];                                      // 0x0280(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindOnReceiveInvite();
	bool CheckCrossPlay(ECrossplayPlatform InLobbyPlatform, bool InAllowCrossPlay);
	void CheckInvitationAvailable(class ULobbyJoinInfo* InJoinLobbyInfo, bool* IsAvailable);
	void CreateErrorNoticePopupWindow(ELobbyNoticeErrorType ErrorType);
	void CreateReturnToTitleErrorPopup();
	void CreateWaitSearchWidget();
	void DeleteWaitSearchWidget();
	void DestroyErrorNoticePopupWindow();
	class USquadContext* GetSquadContext();
	void KickToAllClientMember(class ULobbyContextBase* InContext);
	void OnAcceptLobbyInvitation(class ULobbyJoinInfo* InJoinLobbyInfo);
	void OnBindInvitationNoticeWidget();
	void OnBindInvitationNoticeWidgetWhenNotAvailable();
	void OnCompleteQuitLobbyEvent();
	void OnErrorNoticePopupWindowClose(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnGenerateLobbyInviteNoticeWidget();
	void OnInitialize();
	void OnJoinLobbyByIdSearch(const struct FLobbyId& LobbyId);
	void OnLobbyOperationCompleteSimple(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnPlatformAcceptLobbyInvitation();
	void OnQuitCurrentLobby();
	void OnReceiveInviteCallback(const struct FUniqueNetIdRepl& UserId, class ULobbyJoinInfo* Invite);
	void OnReceiveInviteWindowCallback(bool ResultIsYes);
	void OnReturnToTitleErrorPopupClose(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnSetupLobbyInvitationNoticeWidget();
	void OnUnbindInvitationNoticeWidget();
	void PFInviteCallback();
	void SendInvite();
	bool SendSessionInvite(class UCommonLobbyContext* LobbyContext, const class FString& PlatformUserId);
	void SetIsInRace(bool InRace);

	class UCommonLobbyContext* GetCurrentInviteLobbyContext() const;
	bool ShouldCreateSquad() const;
	bool ShouldSendSessionInvitePlatform() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppNetComponent">();
	}
	static class UAppNetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppNetComponent>();
	}
};
static_assert(alignof(UAppNetComponent) == 0x000008, "Wrong alignment on UAppNetComponent");
static_assert(sizeof(UAppNetComponent) == 0x000288, "Wrong size on UAppNetComponent");
static_assert(offsetof(UAppNetComponent, OnInviteWindowResult) == 0x0000A0, "Member 'UAppNetComponent::OnInviteWindowResult' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, OnInviteConfirmWindowIn) == 0x0000B0, "Member 'UAppNetComponent::OnInviteConfirmWindowIn' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, OnInviteConfirmWindowOut) == 0x0000C0, "Member 'UAppNetComponent::OnInviteConfirmWindowOut' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, LobbyProcessObject) == 0x0000D0, "Member 'UAppNetComponent::LobbyProcessObject' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, LobbyInvitationNoticeWidgetPtr) == 0x0000D8, "Member 'UAppNetComponent::LobbyInvitationNoticeWidgetPtr' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, LobbyInvitationNoticeInfoStruct) == 0x0000E0, "Member 'UAppNetComponent::LobbyInvitationNoticeInfoStruct' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, InvitationInfo) == 0x000170, "Member 'UAppNetComponent::InvitationInfo' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, SearchLobbyId) == 0x000178, "Member 'UAppNetComponent::SearchLobbyId' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, PlatformInviteReceivedLobbyId) == 0x000188, "Member 'UAppNetComponent::PlatformInviteReceivedLobbyId' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, ErrorPopupWindowPtr) == 0x000198, "Member 'UAppNetComponent::ErrorPopupWindowPtr' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, ReturnToTitleErrorPopupWindowPtr) == 0x0001A0, "Member 'UAppNetComponent::ReturnToTitleErrorPopupWindowPtr' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, IsPlatformDecide) == 0x0001A8, "Member 'UAppNetComponent::IsPlatformDecide' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, ErrorTitleText) == 0x0001B0, "Member 'UAppNetComponent::ErrorTitleText' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, ErrorMessageText) == 0x000200, "Member 'UAppNetComponent::ErrorMessageText' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, WaitCheckTitle) == 0x000250, "Member 'UAppNetComponent::WaitCheckTitle' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, WaitCheckMessage) == 0x000260, "Member 'UAppNetComponent::WaitCheckMessage' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, PrevRegisteredMenu) == 0x000270, "Member 'UAppNetComponent::PrevRegisteredMenu' has a wrong offset!");
static_assert(offsetof(UAppNetComponent, WaitCheckPopup) == 0x000278, "Member 'UAppNetComponent::WaitCheckPopup' has a wrong offset!");

// Class UNION.AppNetFestaUtils
// 0x0000 (0x0028 - 0x0028)
class UAppNetFestaUtils final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppNetFestaUtils">();
	}
	static class UAppNetFestaUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppNetFestaUtils>();
	}
};
static_assert(alignof(UAppNetFestaUtils) == 0x000008, "Wrong alignment on UAppNetFestaUtils");
static_assert(sizeof(UAppNetFestaUtils) == 0x000028, "Wrong size on UAppNetFestaUtils");

// Class UNION.AppNetWirelessUtils
// 0x0000 (0x0028 - 0x0028)
class UAppNetWirelessUtils final : public UBlueprintFunctionLibrary
{
public:
	static bool ConvertJoinInfoToSessionInfo(const class UObject* WorldContextObject, const class ULobbyJoinInfo* JoinInfo, struct FWirelessSearchSessionInfo* OutSessionInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppNetWirelessUtils">();
	}
	static class UAppNetWirelessUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppNetWirelessUtils>();
	}
};
static_assert(alignof(UAppNetWirelessUtils) == 0x000008, "Wrong alignment on UAppNetWirelessUtils");
static_assert(sizeof(UAppNetWirelessUtils) == 0x000028, "Wrong size on UAppNetWirelessUtils");

// Class UNION.CourseSelectTimeTrialIcon
// 0x0010 (0x0658 - 0x0648)
class UCourseSelectTimeTrialIcon : public UUnionUIButtonStandard
{
public:
	class UWidgetAnimation*                       Btn_Lock_Loop;                                     // 0x0648(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Btn_Select_Out;                                    // 0x0650(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnDecided(class UUnionUIButtonBaseCore* Button);
	void OnDeselected(class UUnionUIButtonBaseCore* Button);
	void OnSelected(class UUnionUIButtonBaseCore* Button);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CourseSelectTimeTrialIcon">();
	}
	static class UCourseSelectTimeTrialIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCourseSelectTimeTrialIcon>();
	}
};
static_assert(alignof(UCourseSelectTimeTrialIcon) == 0x000008, "Wrong alignment on UCourseSelectTimeTrialIcon");
static_assert(sizeof(UCourseSelectTimeTrialIcon) == 0x000658, "Wrong size on UCourseSelectTimeTrialIcon");
static_assert(offsetof(UCourseSelectTimeTrialIcon, Btn_Lock_Loop) == 0x000648, "Member 'UCourseSelectTimeTrialIcon::Btn_Lock_Loop' has a wrong offset!");
static_assert(offsetof(UCourseSelectTimeTrialIcon, Btn_Select_Out) == 0x000650, "Member 'UCourseSelectTimeTrialIcon::Btn_Select_Out' has a wrong offset!");

// Class UNION.AppRaceConfigDataAccessor
// 0x0000 (0x0028 - 0x0028)
class UAppRaceConfigDataAccessor final : public UBlueprintFunctionLibrary
{
public:
	static void AddAlreadyRunStageId(EStageId InStageId);
	static void AddAlreadyRunStageIds(const TArray<EStageId>& InStageIds);
	static void AddGroupColorToMachine(int32 InGroupIndex);
	static void AddInGameGettingRewards(ERewardType AddRewardType);
	static void AddRaceRivalDriverId(EDriverId DriverId);
	static void AnalyzeResults();
	static void ApplyDisableItemArr();
	static bool CalcIsFreeRunFinalLap();
	static EMenuSpeedClassId CalcViewMenuSpeedClassId(bool* IsGroupSpeed);
	static void ClearAlreadyRunStageIds();
	static void ClearInGameGettingRewards();
	static void ClearRaceRivalDriverIds();
	static void ClearSelected2ndLapStageSetting();
	static int32 ConvRaceRivalDriverIdToRacerIndex(EDriverId DriverId);
	static EDriverId ConvRaceRivalRacerIndexToDriverId(int32 RacerIndex);
	static bool FlipAcceleratorAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool FlipAirTrickAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool FlipAutoItemAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool FlipControllerGyroAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool FlipHandleAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool FlipMapVisibleAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool FlipRaceHintAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool FlipTSRKeyAssignEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static TArray<EGadgetId> GetAdditionalGadgetIds();
	static TArray<EStageId> GetAlreadyRunStageIds();
	static void GetAppRaceConfigData(struct FAppRaceConfigData* OutData);
	static void GetAppRaceCountManageData(struct FAppRaceCountManageData* OutData);
	static void GetAppRacePlayerConfigData(int32 InPlayerIndex, struct FAppRacePlayerConfigData* OutData, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void GetAppRaceRacerConfigData(int32 InRacerIndex, struct FAppRaceRacerConfigData* OutData, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static int32 GetAverageOnlineRank();
	static int32 GetCrossplayPlatformIconIndex(ECrossplayPlatform Platform);
	static TArray<EItemId> GetCurrentDisableItemArr();
	static int32 GetCurrentRaceCount();
	static ECustomRaceIrregularSetting GetCustomRaceIrregularSetting();
	static ECustomRaceRingLostSetting GetCustomRaceRingLostSetting();
	static void GetCustomRaceSettingBP(struct FCustomRaceSetting* OutCustomRaceSetting);
	static ECustomRaceSettingPointUpChance GetCustomRaceSettingPointUpChance();
	static ECustomRaceTripleCourseSetting GetCustomRaceTripleCourseSetting();
	static TArray<EItemId> GetDefaultDisableItemArr();
	static ECrossplayPlatform GetEAppSupportedPlatformToECrossplayPlatform(EAppSupportedPlatform InAppSupportedPlatform);
	static int32 GetFestaChanceUpRatio();
	static EFestaChanceUpType GetFestaChanceUpType();
	static EFestaRaceRule GetFestaRaceRuleSetting();
	static bool GetForceEnableMCEvent();
	static int32 GetGadgetCustomizeLastSelected(int32 PlayerIndex);
	static bool GetGadgetPlateRankUp();
	static bool GetGhostDataOnline();
	static TArray<EStageId> GetGrandPrixMainStageIdsCopy();
	static EGroupColorId GetGroupColorId(int32 InGroupIndex);
	static int32 GetGroupIndex(int32 InRacerIndex);
	static EMachineColorPresetId GetGroupMachineColorPresetId(int32 InGroupIndex);
	static EGroupRaceRule GetGroupRaceRuleSetting();
	static TArray<ERewardType> GetInGameGettingRewards();
	static bool GetIsAddFairPointGameMode();
	static bool GetIsOnlineGameMode();
	static bool GetIsRivalExistsGameMode();
	static bool GetIsRivalSkinExistsGameMode();
	static bool GetIsSelectedMirrorCourse();
	static void GetItemSwitchSettingBP(struct FItemSwitchSetting* OutItemSwitchSetting);
	static bool GetLeast1PlayFromPowerOn();
	static ELotteryTableType GetLotteryTableType();
	static bool GetMainCourseAllSelectable();
	static int32 GetMaxRaceCount();
	static struct FMenuGroupRaceBonusData GetMenuGroupBonusData();
	static struct FMenuGroupRaceEnergyData GetMenuGroupEnergyData();
	static struct FMenuGroupRaceRuleData GetMenuGroupRuleData();
	static EMenuSpeedClassId GetMenuSpeedClassIdFromCustomRaceSetting();
	static EObjectPlacementType GetObjectPlacementTypeSetting();
	static TArray<class FString> GetOnlineEntryUserIds();
	static int32 GetOnlineMatchCount();
	static int32 GetOnlineRaceResultRank();
	static int32 GetOnlineRaceResultWinCount();
	static int32 GetOnlineRacerIndex();
	static TArray<int32> GetOnlineRandomSeeds();
	static int32 GetOnlineRating();
	static int32 GetOnlineRatingPrev();
	static int32 GetPartyRaceRivalLevelAdjust();
	static bool GetPartyRaceRivalLevelDown();
	static int32 GetPlatformIconComIndex();
	static int32 GetPlatformIconIndex(int32 InRacerIndex);
	static ECrossplayPlatform GetPlatformType(int32 InRacerIndex);
	static int32 GetPlayedSquadPlayerCount();
	static int32 GetPlayerRacerIndex();
	static struct FPredictTestInfo GetPredictTestInfo();
	static ERaceBonus GetRaceBonusSetting();
	static struct FUnionRaceDebugParam GetRaceDebugParam();
	static bool GetRaceDebugParamFinalLap();
	static int32 GetRaceDebugParamGenericInt();
	static bool GetRacerComControlType(int32 InRacerIndex, int32* OutComControlType);
	static bool GetRacerCOMId(int32 InRacerIndex, int32* OutCOMId);
	static bool GetRacerComLv(int32 InRacerIndex, int32* OutCOMLv);
	static int32 GetRacerCount();
	static void GetRacerDriverId(int32 InRacerIndex, EDriverId* OutId);
	static void GetRaceRequestData(EDriverId* OutDriverId, EStageId* OutMainStageId, struct FCommon_MachineData* OutMachineCustomizeData, struct FCommon_GadgetData* OutGadgetPlateData, struct FCommon_DegreeData* OutDegreeData);
	static void GetRacerGadgetPlateData(int32 InRacerIndex, struct FGadgetPlateUIData* OutGadgetPlateData);
	static int32 GetRacerHonorTitleId(int32 InRacerIndex);
	static const TArray<uint8> GetRaceRivalBaseLevel();
	static const uint8 GetRaceRivalBaseLevelRacerIndex(int32 RacerIndex);
	static const TArray<EDriverId> GetRaceRivalDriverIds();
	static const TArray<uint8> GetRaceRivalLevel();
	static const uint8 GetRaceRivalLevelRacerIndex(int32 RacerIndex);
	static const TArray<int32> GetRaceRivalRacerIndices();
	static void GetRacerMachineCustomizeData(int32 InRacerIndex, struct FUserMachineCustomizeData* MachineCustomizeData);
	static void GetRacerMachineID(int32 InRacerIndex, int32* OutId);
	static void GetRacerMachineType(int32 InRacerIndex, ECarStatusType* OutMachineType);
	static void GetRacerName(int32 InRacerIndex, class FText* OutRacerName);
	static int32 GetRacerRate(int32 InRacerIndex);
	static void GetRacerRom1stMachineID(int32 InRacerIndex, int32* OutId);
	static class FString GetRacerUserId(int32 InRacerIndex);
	static ERaceSettingSpecialAutoGetItem GetRaceSettingAutoGetItem();
	static ERaceSettingComSpeed GetRaceSettingComSpeed();
	static ERaceSettingCourseSelecting GetRaceSettingCourseSelecting();
	static ERaceSettingSpecialGadgetUsing GetRaceSettingGadgetUsing();
	static ERaceSettingGoalPoint GetRaceSettingGoalPoint();
	static ERaceSettingGrouping GetRaceSettingGrouping();
	static ERaceSettingGroupMode GetRaceSettingGroupMode();
	static ERaceSettingHandicap GetRaceSettingHandicap();
	static EMCEventIrregularGate GetRaceSettingIrregularGate();
	static ERaceSettingItemAppearanceRule GetRaceSettingItemAppearanceRule();
	static ERaceSettingMatchRule GetRaceSettingMatchRule();
	static ERaceSettingSpecialMCEvent GetRaceSettingMCEvent();
	static TArray<bool> GetRaceSettingMCEventSwitchArr();
	static int32 GetRaceSettingPointUpChanceId();
	static int32 GetRaceSettingRaceCount();
	static ECustomRaceRingLostSetting GetRaceSettingRingLostSetting();
	static ESpeedClassId GetRaceSettingSpeedClass();
	static ECustomRaceThornBallType GetRaceSettingThornBallType();
	static int32 GetRaceSettingTopPointSettlement();
	static EMCEventTravelCourseChange GetRaceSettingTravelCourseChange();
	static class FString GetRaceTestConfigName();
	static struct FUserGadgetPresetData GetRentalGadgetPlatePresetData();
	static const TArray<ERivalType> GetRivalTypes();
	static const ERivalType GetRivalTypesRacerIndex(int32 RacerIndex);
	static TArray<EStageId> GetSelected2ndLapStageSetting();
	static ESpeedClassId GetSelectedClassId();
	static void GetSelectedDriverId(int32 InPlayerIndex, EDriverId* OutId, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void GetSelectedGadgetPlateData(int32 InPlayerIndex, struct FGadgetPlateUIData* OutGadgetPlateData);
	static EGameModeId GetSelectedGameModeId();
	static EGrandPrixId GetSelectedGrandPrixId();
	static void GetSelectedMachineID(int32 InPlayerIndex, int32* OutId, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void GetSelectedMachineType(int32 InPlayerIndex, ECarStatusType* OutMachineType, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static ERaceMirrorSetting GetSelectedMirrorSetting();
	static int32 GetSelectedPlayerCount();
	static EPartyRacePreset GetSelectedRaceParkPresetId();
	static bool GetSelectedRaceParkPresetIsIndividual();
	static ERaceType GetSelectedRaceType();
	static TArray<EStageId> GetSelectedStageIds();
	static struct FAppRaceStageSetting GetSelectedStageSetting(int32 DomainIndex);
	static TArray<struct FAppRaceStageSetting> GetSelectedStageSettings();
	static int32 GetTimeTrialCurrentStageVersion();
	static TArray<EGadgetId> GetTimeTrialDisableGadgetIds();
	static struct FUserGadgetPresetData GetTimeTrialGadgetPreset();
	static struct FTimeTrialSetting GetTimeTrialSetting();
	static bool GetUsingDonpaTicketRestart();
	static bool HasRaceRival();
	static void InitializeCustomRaceSetting();
	static bool InitPredictTest(const class FString& PredictData);
	static void InitRaceSetting(EGameModeId GameMode);
	static void InsertRaceRivalDriverId(EDriverId DriverId);
	static bool IsAcceleratorAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool IsAirTrickAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool IsApplyAllPlayerRaceDebugParam();
	static bool IsApplyLocalPlayerRaceDebugParam();
	static bool IsAutoItemAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool IsControllerGyroAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool IsExecutePointUpChanceMCEvent();
	static bool IsFestaRule();
	static bool IsFestaSpecialRuleContinuous();
	static bool IsFinalRace();
	static bool IsFriendMatchHost();
	static bool IsGhostMachineDisable();
	static bool IsGhostOnline();
	static bool IsGroupRace();
	static bool IsGroupRaceFestaColor();
	static bool IsGroupRaceSpeedClass();
	static bool IsHandleAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool IsItemSwitchSettingMenuEnable();
	static bool IsJoiningSquadRace();
	static bool IsLineGuideDisable();
	static bool IsMapVisibleAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool IsPredictTestEnabled();
	static bool IsRaceHintAssistEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool IsRacerCOMDefaultParts();
	static bool IsRaceRivalByDriverId(EDriverId DriverId);
	static bool IsRaceRivalByRacerIndex(int32 RacerIndex);
	static bool IsRacerPlayer(int32 InRacerIndex);
	static bool IsRaceTestEnabled();
	static bool IsRivalRaceFriendMatch();
	static bool IsSelected1P();
	static bool IsSelected2P();
	static bool IsSelected3P();
	static bool IsSelected4P();
	static bool IsTimeTrialRewardReceived();
	static bool IsTSRKeyAssignEnabled(int32 InPlayerIndex, bool* bOutValidIndex);
	static bool IsUseRentalGadgetPlate();
	static bool IsValidSubsystem();
	static bool IsViewGhostReplay();
	static bool ProceedNextPredictTestCase();
	static bool ProceedRaceCount();
	static void RemoveRaceRivalDriverId(EDriverId DriverId);
	static void ResetCurrentRaceCount();
	static void ResetCustomRaceSetting();
	static void ResetItemSwitchSettingAll();
	static void ResetSelected2ndLapStageSetting();
	static void SetAcceleratorAssistEnabled(int32 InPlayerIndex, bool bInNewEnabled, bool* bOutValidIndex);
	static void SetAdditionalGadgetIds(const TArray<EGadgetId>& InGadgetIds);
	static void SetAirTrickAssistEnabled(int32 InPlayerIndex, bool bInNewEnabled, bool* bOutValidIndex);
	static void SetAlreadyRunStageIds(const TArray<EStageId>& InStageIds);
	static void SetApplyAllPlayerRaceDebugParam(bool bInAllChange);
	static void SetApplyLocalPlayerRaceDebugParam(bool bInAllChange);
	static void SetAppRaceConfigData(const struct FAppRaceConfigData& NewData);
	static void SetAppRacePlayerConfigData(int32 InPlayerIndex, const struct FAppRacePlayerConfigData& InNewData, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void SetAppRaceRacerConfigData(int32 InRacerIndex, const struct FAppRaceRacerConfigData& InNewData, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void SetAutoItemAssistEnabled(int32 InPlayerIndex, bool bInNewEnabled, bool* bOutValidIndex);
	static void SetAverageOnlineRank(int32 InAverageAdjustOnlineRate);
	static void SetControllerGyroAssistEnabled(int32 InPlayerIndex, bool bInNewEnabled, bool* bOutValidIndex);
	static void SetCurrentDisableItemArr(const TArray<EItemId>& InDisableItemArr);
	static void SetCurrentRaceCount(int32 InNewRaceCount);
	static void SetCustomRaceIrregularSetting(ECustomRaceIrregularSetting IrregularSetting);
	static void SetCustomRaceRingLostSetting(ECustomRaceRingLostSetting RingLostSetting);
	static void SetCustomRaceSettingBP(const struct FCustomRaceSetting& InCustomRaceSetting);
	static void SetCustomRaceSettingPointUpChance(ECustomRaceSettingPointUpChance PointUpChanceSetting);
	static void SetCustomRaceTripleCourseSetting(ECustomRaceTripleCourseSetting TripleCourseSetting);
	static void SetDefaultDisableItemArr(const TArray<EItemId>& InDisableItemArr);
	static void SetFestaRaceRuleSetting(EFestaRaceRule FestaRaceRuleSetting);
	static void SetFestaSpecialRuleContinuous(const bool InEnabled);
	static void SetForceEnableMCEvent(bool InTargetAll);
	static void SetGadgetCustomizeLastSelected(int32 PlayerIndex, int32 GadgetIndex);
	static void SetGadgetPlateRankUp(bool bRankUp);
	static void SetGhostDataOnline(bool InGhostOnline);
	static void SetGhostMachineDisable(bool bDisable);
	static void SetGhostOnline(bool bIsOnline);
	static void SetGrandPrixMainStageIds(const TArray<EStageId>& Value);
	static void SetGroupColorId(int32 InGroupIndex, EGroupColorId InGroupColorId);
	static void SetGroupRaceRuleSetting(EGroupRaceRule GroupRaceRuleSetting);
	static void SetHandleAssistEnabled(int32 InPlayerIndex, bool bInNewEnabled, bool* bOutValidIndex);
	static void SetIsFriendMatchHost(bool IsHost);
	static void SetIsRivalRaceFriendMatch(bool IsRivalRace);
	static void SetIsSelectedMirrorCourse(bool InMirrorCourse);
	static void SetItemSwitchSetting(int32 InGroup, const struct FItemSwitchSettingSingle& InItemSwitchSetting);
	static void SetItemSwitchSettingAll(const struct FItemSwitchSetting& InItemSwitchSetting);
	static void SetItemSwitchSettingAllFromSave(const struct FItemSwitchSettingSave& InItemSwitchSetting);
	static void SetJoinRaceSquad(bool bIsSquad);
	static void SetLeast1PlayFromPowerOn(bool InPlayed);
	static void SetLineGuideDisable(bool bDisable);
	static void SetLotteryTableType(ELotteryTableType LotteryTableType);
	static void SetMapVisibleAssistEnabled(int32 InPlayerIndex, bool bInNewEnabled, bool* bOutValidIndex);
	static void SetMaxRaceCount(int32 InNewMaxRaceCount, bool bCurrentCountReset);
	static void SetObjectPlacementTypeSetting(EObjectPlacementType ObjectPlacementType);
	static void SetOnlineEntryUserIds(const TArray<class FString>& InEntryUserIds);
	static void SetOnlineMatchCount(int32 InMatchCount);
	static void SetOnlineRaceResultRank(int32 InRaceResultRank);
	static void SetOnlineRaceResultWinCount(int32 InRaceResultWinCount);
	static void SetOnlineRacerIndex(int32 InRacerIndex);
	static void SetOnlineRandomSeeds(const TArray<int32>& NewRandamSeeds);
	static void SetOnlineRating(int32 InOnlineRating);
	static void SetOnlineRatingPrev(int32 InOnlineRatingPrev);
	static void SetPartyRaceRivalLevelAdjust(int32 NewLevelAdjust);
	static void SetPartyRaceRivalLevelDown(bool IsLevelDown);
	static void SetPlayedSquadPlayerCount(int32 InPlayerCount);
	static void SetPredictTestInfo(const struct FPredictTestInfo& PredictTestInfo);
	static void SetRaceBonusSetting(ERaceBonus RaceBonusSetting);
	static void SetRaceDebugParam(const struct FUnionRaceDebugParam& NewValue);
	static void SetRaceDebugParamFinalLap(bool NewValue);
	static void SetRaceDebugParamGenericInt(int32 NewValue);
	static void SetRaceHintAssistEnabled(int32 InPlayerIndex, bool bInNewEnabled, bool* bOutValidIndex);
	static void SetRacerComControlType(int32 InRacerIndex, int32 InComControlType);
	static void SetRacerCOMId(int32 InRacerIndex, int32 InCOMId);
	static void SetRacerComLv(int32 InRacerIndex, int32 InComLv);
	static void SetRacerCount(int32 InRacerCount);
	static void SetRacerDriverId(int32 InRacerIndex, EDriverId InNewId);
	static void SetRacerGadgetPlateData(int32 InRacerIndex, const struct FGadgetPlateUIData& InGadgetPlateData);
	static void SetRacerGroupIndex(int32 InRacerIndex, int32 InGroupIndex);
	static void SetRaceRivalBaseLevel(EDriverId DriverId, uint8 RivalBaseLevel);
	static void SetRaceRivalDriverIds(const TArray<EDriverId>& DriverIds);
	static void SetRaceRivalLevel(EDriverId DriverId, uint8 RivalLevel);
	static void SetRaceRivalRacerIndex(EDriverId DriverId, int32 RacerIndex);
	static void SetRacerMachineCustomizeData(int32 InRacerIndex, const struct FUserMachineCustomizeData& MachineCustomizeData);
	static void SetRacerMachineID(int32 InRacerIndex, int32 InNewId);
	static void SetRacerMachineType(int32 InRacerIndex, ECarStatusType InMachineType);
	static void SetRacerName(int32 InRacerIndex, const class FText& InRacerName);
	static void SetRacerPre1stBehaviorID(int32 InRacerIndex, int32 InNewId);
	static void SetRacerRom1stMachineID(int32 InRacerIndex, int32 InNewId);
	static void SetRaceSettingAutoGetItem(ERaceSettingSpecialAutoGetItem InRaceSettingSpecialAutoGetItem);
	static void SetRaceSettingComSpeed(ERaceSettingComSpeed InRaceSettingComSpeed);
	static void SetRaceSettingCourseSelecting(ERaceSettingCourseSelecting InRaceSettingCourseSelecting);
	static void SetRaceSettingGadgetUsing(ERaceSettingSpecialGadgetUsing InRaceSettingSpecialGadgetUsing);
	static void SetRaceSettingGoalPoint(ERaceSettingGoalPoint RaceSettingGoalPoint);
	static void SetRaceSettingGrouping(const ERaceSettingGrouping InGroupSetting);
	static void SetRaceSettingGroupMode(const ERaceSettingGroupMode InGroupMode);
	static void SetRaceSettingHandicap(ERaceSettingHandicap InRaceSettingHandicap);
	static void SetRaceSettingIrregularGate(EMCEventIrregularGate InMCEventIrregularGate);
	static void SetRaceSettingItemAppearanceRule(ERaceSettingItemAppearanceRule InRaceSettingItemAppearanceRule);
	static void SetRaceSettingMatchRule(const ERaceSettingMatchRule InMatchRule);
	static void SetRaceSettingMCEvent(ERaceSettingSpecialMCEvent InRaceSettingSpecialMCEvent);
	static void SetRaceSettingMCEventSwitchArr(const TArray<bool>& InMCEventSwitch);
	static void SetRaceSettingPointUpChanceId(int32 ID);
	static void SetRaceSettingRaceCount(int32 InMaxRaceCount);
	static void SetRaceSettingRingLostSetting(ECustomRaceRingLostSetting InRaceSettingRingLostSetting);
	static void SetRaceSettingSpeedClass(const ESpeedClassId InSpeedClass);
	static void SetRaceSettingSpeedClassByMenuSpeedClass(const EMenuSpeedClassId InMenuSpeedClass, bool InOnlyRaceSpeedClass);
	static void SetRaceSettingThornBallType(ECustomRaceThornBallType InThornBallType);
	static void SetRaceSettingTopPointSettlement(int32 InSettingTopPointSettlement);
	static void SetRaceSettingTravelCourseChange(EMCEventTravelCourseChange InMCEventTravelCourseChange);
	static void SetRaceTestConfigName(const class FString& ConfigName);
	static void SetRaceTestEnabled(bool bEnabled);
	static void SetRentalGadgetPlatePresetData(const struct FUserGadgetPresetData& InPlateUIData);
	static void SetRivalType(EDriverId DriverId, ERivalType RivalType);
	static void SetSelected2ndLapStageSetting(const TArray<EStageId>& StageIds);
	static void SetSelectedClassId(ESpeedClassId NewId);
	static void SetSelectedDriverId(int32 InPlayerIndex, EDriverId InNewId, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void SetSelectedGadgetPlateData(int32 InPlayerIndex, const struct FGadgetPlateUIData& InGadgetPlateData);
	static void SetSelectedGameModeId(EGameModeId NewId);
	static void SetSelectedGrandPrixId(EGrandPrixId NewId);
	static void SetSelectedMachineID(int32 InPlayerIndex, int32 InNewId, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void SetSelectedMachineType(int32 InPlayerIndex, ECarStatusType InMachineType, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void SetSelectedPlayerCount(int32 InPlayerCount);
	static void SetSelectedRaceParkPresetId(EPartyRacePreset NewId);
	static void SetSelectedRaceType(ERaceType NewId);
	static void SetSelectedStageId(int32 StageIndex, EStageId NewId, bool bResetSetting);
	static void SetSelectedStageIds(const TArray<EStageId>& NewIds, bool bResetOtherSetting);
	static void SetSelectedStageSetting(int32 DomainIndex, const struct FAppRaceStageSetting& NewSetting, bool bAutoExtend);
	static void SetSelectedStageSettings(const TArray<struct FAppRaceStageSetting>& NewSettings);
	static void SetSelectedStageTravelRingIrregularEvent(int32 DomainIndex, EIrregularEventId IrregularEvent);
	static void SetSelectedStageTravelRingScreenType(int32 DomainIndex, ETravelRingScreenType ScreenType);
	static void SetTimeTrialCurrentStageVersion(const int32& InStageVersion);
	static void SetTimeTrialDisableGadgetIds(const TArray<EGadgetId>& InGadgetIds);
	static void SetTimeTrialGadgetPreset(const struct FUserGadgetPresetData& InGadgetIds);
	static void SetTimeTrialRewardReceived(bool bIsReceived);
	static void SetTravelCourseTargetAll(bool InTargetAll);
	static void SetTSRKeyAssignEnabled(int32 InPlayerIndex, bool bInNewEnabled, bool* bOutValidIndex);
	static void SetUELog(const class FString& LogString);
	static void SetUseRentalGadgetPlate(const bool InUse);
	static void SetUsingDonpaTicketRestart(bool bUsing);
	static void SetViewGhostReplay(bool bIsView);
	static void UpdatePartyRaceRivalLevelAdjust();

	void GetMachineCustomize(int32 InPlayerIndex, struct FVehicleModelDefine* OutMachineCustomize, EOutputExecsPin_SuccessFailed* OutExecsPin);
	void GetRacerMachineCustomize(int32 InRacerIndex, struct FVehicleModelDefine* OutMachineCustomize);
	void SetMachineCustomize(int32 InPlayerIndex, const struct FVehicleModelDefine& InMachineCustomize, EOutputExecsPin_SuccessFailed* OutExecsPin);
	void SetRacerMachineCustomize(int32 InRacerIndex, const struct FVehicleModelDefine& InMachineCustomize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppRaceConfigDataAccessor">();
	}
	static class UAppRaceConfigDataAccessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppRaceConfigDataAccessor>();
	}
};
static_assert(alignof(UAppRaceConfigDataAccessor) == 0x000008, "Wrong alignment on UAppRaceConfigDataAccessor");
static_assert(sizeof(UAppRaceConfigDataAccessor) == 0x000028, "Wrong size on UAppRaceConfigDataAccessor");

// Class UNION.ComUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UComUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ExcludeUsedFakeComNameId(class FText* UseComName, TArray<int32>* InOutFakeComNameIdArray);
	static void GetComGadgetData(bool IsRival, TArray<struct FUserGadgetData>* OutUserGadgetData);
	static void GetComLv(int32* OutCOMLv, EComLotteryRateDataTableType* OutItemRateTableType, EComPointDistanceTableType* OutItemDistanceTableType);
	static bool GetEnableUseComDriverIds(int32 MinDriverIdNum, bool IsStaticMeshAll, const TArray<EDriverId>& DisableDriverIdArray, TArray<EDriverId>* OutDriverIdArray);
	static bool GetEnableUseComMachineColorPresetIds(TArray<EMachineColorPresetId>* OutMachineColorPresetIdArray);
	static bool GetEnableUseComMachineIds(int32 MinMachineIdNum, const TArray<EMachineId>& DisableMachineIdArray, TArray<EMachineId>* OutMachineIdArray);
	static bool GetEnableUseComMachineIdsFull(int32 MinMachineIdNum, TArray<EMachineId>* OutMachineIdArray);
	static void GetEnableUseFakeComNameIds(const TArray<int32>& DisableFakeComNameIdArray, TArray<int32>* OutFakeComNameIdArray);
	static bool GetFakeComName(int32 FakeComNameId, class FText* OutFakeComName);
	static void GetFakeComNameIds(TArray<int32>* OutFakeComNameIdArray);
	static void GetLotteryDrawComDriverIds(int32 LotteryNum, TArray<EDriverId>* EnableDriverIdArray, TArray<EDriverId>* OutLotteryDriverIdArray);
	static void GetLotteryDrawComMachineIds(int32 LotteryNum, TArray<EMachineId>* EnableMachineIdArray, TArray<EMachineId>* OutLotteryMachineIdArray);
	static bool GetLotteryDrawFakeComName(TArray<int32>* InOutFakeComNameIdArray, class FText* OutFakeComName);
	static int32 GetLotteryDrawFakeComNameId(TArray<int32>* InOutFakeComNameIdArray);
	static int32 GetLotteryDrawHonorTitleId(class UObject* WorldContextObject);
	static bool GetMachineIdsCarStatusTypeEqualList(EMachineId MachineId, TArray<EMachineId>* OutEnableMachineIdArray);
	static EMachineId GetStaticMeshAllMachineId(EDriverId DriverId);
	static bool IsDriverMachineCombination(EDriverId DriverId, EMachineId MachineId);
	static bool IsEnableUseComMachineId(EMachineId MachineId);
	static void LotteryDrawComMachinePartsIds(EMachineId FrontPartsId, EMachineId* RearPartsId, EMachineId* TirePartsId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ComUtilityLibrary">();
	}
	static class UComUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComUtilityLibrary>();
	}
};
static_assert(alignof(UComUtilityLibrary) == 0x000008, "Wrong alignment on UComUtilityLibrary");
static_assert(sizeof(UComUtilityLibrary) == 0x000028, "Wrong size on UComUtilityLibrary");

// Class UNION.AppRaceResultDataAccessor
// 0x0000 (0x0028 - 0x0028)
class UAppRaceResultDataAccessor final : public UBlueprintFunctionLibrary
{
public:
	static TArray<int32> AddResultTeamPoint(const TArray<int32>& InTeamPointList, const TArray<int32>& InTeamPointList2);
	static void AddTeamBonusResultPoint(int32 TeamIndex, int32 AddPoint);
	static void AddTeamResultPoint(int32 TeamIndex, int32 AddPoint);
	static void GetAppRacePlayerResultData(int32 InPlayerIndex, struct FAppRacePlayerResultData* OutData, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void GetAppRaceResultData(struct FAppRaceResultData* OutData);
	static int32 GetBestTotalRankInLocalPlayer();
	static int32 GetBestTotalRankInOnlinePlayer();
	static int32 GetBestTotalRankRacerIndexInOnlinePlayer();
	static int32 GetFestaAddDonpaTicketNum();
	static int32 GetFestaMyTeamFriendCount();
	static void GetFestaResultRewardInfo(struct FFestaResultRewardInfo* OutInfo);
	static void GetFestaStreakReward(ERewardType* OutRewardType, int32* OutRewardId);
	static bool GetOfflineResultForcePressed();
	static void GetRank(int32 InPlayerIndex, int32* OutRank, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void GetRecord(int32 InPlayerIndex, int32* OutRecord, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void GetResultCalcTeamPoint(TArray<int32>* OutCalcTeamPointList, int32* OutMaxPoint);
	static float GetResultForcePressedTime(const class FString& KeyName);
	static float GetResultNormalForcePressedTime();
	static int32 GetResultRacerRatePoint(int32 RacerIndex);
	static float GetResultRankingForcePressedTime();
	static struct FSoundHandle GetResultSilenceSESoundHandle();
	static void GetResultTopCountStateTeam(TArray<ETopCountState>* OutTopCountStateList);
	static void GetResultWinnerTeam(TArray<int32>* OutTeamNoList);
	static int32 GetRivalTotalRank();
	static void GetTeamResultRankList(TArray<int32>* OutTeamRankList);
	static bool GetWinMyselfTotalRankForPartyRace();
	static bool GetWinRivalTotalRank();
	static bool GetWinRivalTotalRankForPartyRace();
	static void InitializeRaceResult();
	static bool IsTopCountWinnerRacer();
	static void ResetRaceResult();
	static void ResetTeamBonusResultPoint();
	static void RollbackResult();
	static void SaveFestaRewardItemData(class UNetMasterDataManageSubsystem* MasterSubsystem, int32 RewardIndex, struct FRewardGetWindowParam* OutRewardGetWindowParam, bool bIsSaveReward);
	static void SetAppRacePlayerResultData(int32 InPlayerIndex, const struct FAppRacePlayerResultData& InNewData, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void SetAppRaceResultData(const struct FAppRaceResultData& NewData);
	static void SetEnableResultSilenceSE(const bool bEnable);
	static void SetFestaAddDonpaTicketNum(int32 AddNum);
	static void SetFestaMyTeamFriendCount(int32 FriendCount);
	static void SetFestaStreakReward(ERewardType rewardType, int32 rewardId);
	static void SetMCEventBonusData(const struct FMCEventBonusData& MCEventBonusData);
	static void SetOfflineResultForcePressed(bool bIsUse);
	static void SetRank(int32 InPlayerIndex, int32 InNewRank, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void SetRecord(int32 InPlayerIndex, int32 InNewRecord, bool bInForceUpdate, bool* bOutUpdated, EOutputExecsPin_SuccessFailed* OutExecsPin);
	static void SetResultRacerRatePoint(int32 RacerIndex, int32 RatePoint);
	static void SetResultSilenceSESoundHandle(const struct FSoundHandle& SoundHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppRaceResultDataAccessor">();
	}
	static class UAppRaceResultDataAccessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppRaceResultDataAccessor>();
	}
};
static_assert(alignof(UAppRaceResultDataAccessor) == 0x000008, "Wrong alignment on UAppRaceResultDataAccessor");
static_assert(sizeof(UAppRaceResultDataAccessor) == 0x000028, "Wrong size on UAppRaceResultDataAccessor");

// Class UNION.AppRewardUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UAppRewardUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SaveRewardItemData(const struct FRewardAchievementData& AchievementData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppRewardUtilityLibrary">();
	}
	static class UAppRewardUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppRewardUtilityLibrary>();
	}
};
static_assert(alignof(UAppRewardUtilityLibrary) == 0x000008, "Wrong alignment on UAppRewardUtilityLibrary");
static_assert(sizeof(UAppRewardUtilityLibrary) == 0x000028, "Wrong size on UAppRewardUtilityLibrary");

// Class UNION.WirelessSequence
// 0x0150 (0x04B8 - 0x0368)
class AWirelessSequence final : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackToTitleEvent;                                // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnWirelessLobbyBackedEvent;                        // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnWirelessLobbyFinishedEvent;                      // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B0[0x8];                                      // 0x03B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMenuInputRecieveObject*                MenuInputReceiveObject;                            // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   EntryLobbyTitleText;                               // 0x03C0(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   EntryLobbyMessageText;                             // 0x03D0(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   EntryLobbyPopupTextNo;                             // 0x03E0(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   EntryLobbyPopupTextYes;                            // 0x03F0(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	EWirelessSequenceState                        PrevSequenceState;                                 // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMatchingLobbyType                            LobbyType;                                         // 0x0401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchingSequenceStateMatching*         MatchingComponent;                                 // 0x0408(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UWirelessLobbySelectScene>  UISceneClass;                                      // 0x0410(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWirelessLobbySelectScene*              UIScene;                                           // 0x0418(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFriendMatchMenu>           FriendMatchMenuClass;                              // 0x0420(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFriendMatchMenu*                       FriendMatchMenuComponent;                          // 0x0428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 FoundLobbies;                                      // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class AMenuSequence*                          MenuSequence;                                      // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWirelessSequenceStateToOnline*         WirelessSequenceStateToOnlineComponent;            // 0x0448(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWirelessSequenceStateToOffline*        WirelessSequenceStateToOfflineComponent;           // 0x0450(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWirelessLobbyControlComponent*         WirelessLobbyControlComponent;                     // 0x0458(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UWirelessLobbyControlComponent> WirelessLobbyControlComponentClass;            // 0x0460(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMatchingLobbyType                            CurrentLobbyType;                                  // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          SearchLobbyLoopCue;                                // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoundHandle                           SearchLobbyLoopHandle;                             // 0x0478(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_47C[0xC];                                      // 0x047C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULobbyJoinInfo*>                 FoundLobbySessions;                                // 0x0488(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	int32                                         DefaultMatchmakeKey;                               // 0x0498(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49C[0xC];                                      // 0x049C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIPopupWindowBase*                PopupWindow;                                       // 0x04A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDummyWidget*                           DummyWidget;                                       // 0x04B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BindFoundLobbyButtonsPanel();
	void BindMenuButtonsPanel();
	void BindMenuInputReceive();
	void EntryWirelessLobbyInternal(int32 LobbyIndex);
	EMatchingLobbyType GetCurrentLobbyType();
	class ULobbyJoinInfo* GetFoundLobbySessionByIndex(int32 Index_0);
	void OnBackSequenceEvent();
	void OnBackToTitleSequenceEvent();
	void OnBackWirelessTopSequenceEvent();
	void OnCancelMenu(class UUnionUIButtonBase* Button, int32 ButtonIndex);
	void OnCancelRuleFixedButton();
	void OnCompleteInitializeWirelessMode(class UWirelessLobbyContext* WirelessLobbyContext, const struct FOnlineErrorBP& Error);
	void OnDecisionEntryLobbyPopupWindow(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecisionFoundLobby(class UUnionUIButtonBase* Button, int32 ButtonIndex);
	void OnDecisionLobbyCreate(class UUnionUIButtonBase* Button, int32 ButtonIndex);
	void OnDecisionRuleFixedButton(EPrivateMatchPlayType InPlayType);
	void OnEntryWirelessSession(class UWirelessLobbyContext* LobbyContext, const struct FOnlineErrorBP& Error);
	void OnExitBackToPrevSequence();
	void OnExitCreateLobbyComplete();
	void OnExitCreateLobbyInProgress();
	void OnExitCreateLobbySetting();
	void OnExitCreateLobbyStart();
	void OnExitEntryLobbyComplete();
	void OnExitEntryLobbyInProgress();
	void OnExitEntryLobbySetup();
	void OnExitEntryLobbyStart();
	void OnExitPreSearch();
	void OnExitSearchLobbyComplete();
	void OnExitSearchLobbyInProgress();
	void OnExitSearchLobbyStart();
	void OnExitStateErrorWindow();
	void OnFaceButtonTopPressed(class UObject* Object);
	void OnFinishedFade_GotoLobby(EUnionUIFadeDirection FadeDirection);
	void OnInitBackToPrevSequence();
	void OnInitCreateLobbyComplete();
	void OnInitCreateLobbyInProgress();
	void OnInitCreateLobbySetting();
	void OnInitCreateLobbyStart();
	void OnInitEntryLobbyComplete();
	void OnInitEntryLobbyInProgress();
	void OnInitEntryLobbySetup();
	void OnInitEntryLobbyStart();
	void OnInitPreSearch();
	void OnInitSearchLobbyComplete();
	void OnInitSearchLobbyInProgress();
	void OnInitSearchLobbyStart();
	void OnInitStateErrorWindow();
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnInitStateWirelessTop();
	void OnLobbyBackFadeFinished(EUnionUIFadeDirection FadeDirection);
	void OnSearchWirelessSession(class UWirelessLobbyContext* LobbyContext, bool bSuccessful, const TArray<class ULobbyJoinInfo*>& LobbySessions);
	void OnUpdateBackToPrevSequence(float DeltaTime);
	void OnUpdateCreateLobbyComplete(float DeltaTime);
	void OnUpdateCreateLobbyInProgress(float DeltaTime);
	void OnUpdateCreateLobbySetting(float DeltaTime);
	void OnUpdateCreateLobbyStart(float DeltaTime);
	void OnUpdateEntryLobbyComplete(float DeltaTime);
	void OnUpdateEntryLobbyInProgress(float DeltaTime);
	void OnUpdateEntryLobbySetup(float DeltaTime);
	void OnUpdateEntryLobbyStart(float DeltaTime);
	void OnUpdatePreSearch(float DeltaTime);
	void OnUpdateSearchLobbyComplete(float DeltaTime);
	void OnUpdateSearchLobbyInProgress(float DeltaTime);
	void OnUpdateSearchLobbyStart(float DeltaTime);
	void OnUpdateStateErrorWindow(float InDeltaTime);
	void OnWirelessLobbyBacked();
	void OnWirelessLobbyBackedFadeFinishedEvent(EUnionUIFadeDirection FadeDirection);
	void OnWirelessLobbyFinished();
	void SearchWirelessLobbyInternal();
	void SetNextWirelessSequenceState(EWirelessSequenceState InState, EWirelessSequenceState PrevState);
	void UnBindFoundLobbyButtonsPanel();
	void UnBindMenuButtonsPanel();
	void UnBindMenuInputReceive();
	void UpdateLobbyListByLobbySessions(const TArray<class ULobbyJoinInfo*>& LobbySessions);

	EWirelessSequenceState GetCurrentWirelessSequenceState() const;
	EMatchingLobbyType GetLobbyType() const;
	class UWirelessLobbyContext* GetWirelessLobbyContext() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WirelessSequence">();
	}
	static class AWirelessSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWirelessSequence>();
	}
};
static_assert(alignof(AWirelessSequence) == 0x000008, "Wrong alignment on AWirelessSequence");
static_assert(sizeof(AWirelessSequence) == 0x0004B8, "Wrong size on AWirelessSequence");
static_assert(offsetof(AWirelessSequence, OnBackEvent) == 0x000370, "Member 'AWirelessSequence::OnBackEvent' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, OnBackToTitleEvent) == 0x000380, "Member 'AWirelessSequence::OnBackToTitleEvent' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, OnWirelessLobbyBackedEvent) == 0x000390, "Member 'AWirelessSequence::OnWirelessLobbyBackedEvent' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, OnWirelessLobbyFinishedEvent) == 0x0003A0, "Member 'AWirelessSequence::OnWirelessLobbyFinishedEvent' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, MenuInputReceiveObject) == 0x0003B8, "Member 'AWirelessSequence::MenuInputReceiveObject' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, EntryLobbyTitleText) == 0x0003C0, "Member 'AWirelessSequence::EntryLobbyTitleText' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, EntryLobbyMessageText) == 0x0003D0, "Member 'AWirelessSequence::EntryLobbyMessageText' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, EntryLobbyPopupTextNo) == 0x0003E0, "Member 'AWirelessSequence::EntryLobbyPopupTextNo' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, EntryLobbyPopupTextYes) == 0x0003F0, "Member 'AWirelessSequence::EntryLobbyPopupTextYes' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, PrevSequenceState) == 0x000400, "Member 'AWirelessSequence::PrevSequenceState' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, LobbyType) == 0x000401, "Member 'AWirelessSequence::LobbyType' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, MatchingComponent) == 0x000408, "Member 'AWirelessSequence::MatchingComponent' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, UISceneClass) == 0x000410, "Member 'AWirelessSequence::UISceneClass' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, UIScene) == 0x000418, "Member 'AWirelessSequence::UIScene' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, FriendMatchMenuClass) == 0x000420, "Member 'AWirelessSequence::FriendMatchMenuClass' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, FriendMatchMenuComponent) == 0x000428, "Member 'AWirelessSequence::FriendMatchMenuComponent' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, FoundLobbies) == 0x000430, "Member 'AWirelessSequence::FoundLobbies' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, MenuSequence) == 0x000440, "Member 'AWirelessSequence::MenuSequence' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, WirelessSequenceStateToOnlineComponent) == 0x000448, "Member 'AWirelessSequence::WirelessSequenceStateToOnlineComponent' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, WirelessSequenceStateToOfflineComponent) == 0x000450, "Member 'AWirelessSequence::WirelessSequenceStateToOfflineComponent' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, WirelessLobbyControlComponent) == 0x000458, "Member 'AWirelessSequence::WirelessLobbyControlComponent' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, WirelessLobbyControlComponentClass) == 0x000460, "Member 'AWirelessSequence::WirelessLobbyControlComponentClass' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, CurrentLobbyType) == 0x000468, "Member 'AWirelessSequence::CurrentLobbyType' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, SearchLobbyLoopCue) == 0x000470, "Member 'AWirelessSequence::SearchLobbyLoopCue' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, SearchLobbyLoopHandle) == 0x000478, "Member 'AWirelessSequence::SearchLobbyLoopHandle' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, FoundLobbySessions) == 0x000488, "Member 'AWirelessSequence::FoundLobbySessions' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, DefaultMatchmakeKey) == 0x000498, "Member 'AWirelessSequence::DefaultMatchmakeKey' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, PopupWindow) == 0x0004A8, "Member 'AWirelessSequence::PopupWindow' has a wrong offset!");
static_assert(offsetof(AWirelessSequence, DummyWidget) == 0x0004B0, "Member 'AWirelessSequence::DummyWidget' has a wrong offset!");

// Class UNION.AppSystemSubsystem
// 0x0090 (0x00C0 - 0x0030)
class UAppSystemSubsystem final : public UGameInstanceSubsystem
{
public:
	class UGarbageCollectionInvoker*              GarbageCollectionInvoker;                          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FString, class ULapTimer*>         LapTimers;                                         // 0x0038(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	class UResidentAssetLoader*                   ResidentAssetLoader;                               // 0x0088(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIPopupWindowBase*                SaveErrorPopup;                                    // 0x0090(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                LastFocusedWidget;                                 // 0x0098(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetBootSequenceModeShipping();
	class ULapTimer* GetOrCreateLapTimer(const class FString& Key);
	struct FRaceLifeTimeData GetRaceLifeTimeData();
	void OnSaveErrorPopupDecisionFunc(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnSaveErrorPopupGenerateFunc();
	void OnSaveErrorPopupRemovedFunc(class UUnionUIPopupWindowBase* RemovedPopup);
	void SetBootSequenceModeShipping(const bool Mode);

	class UResidentAssetLoader* GetResidentAssetLoader() const;
	bool IsCreatedVehicles() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppSystemSubsystem">();
	}
	static class UAppSystemSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppSystemSubsystem>();
	}
};
static_assert(alignof(UAppSystemSubsystem) == 0x000008, "Wrong alignment on UAppSystemSubsystem");
static_assert(sizeof(UAppSystemSubsystem) == 0x0000C0, "Wrong size on UAppSystemSubsystem");
static_assert(offsetof(UAppSystemSubsystem, GarbageCollectionInvoker) == 0x000030, "Member 'UAppSystemSubsystem::GarbageCollectionInvoker' has a wrong offset!");
static_assert(offsetof(UAppSystemSubsystem, LapTimers) == 0x000038, "Member 'UAppSystemSubsystem::LapTimers' has a wrong offset!");
static_assert(offsetof(UAppSystemSubsystem, ResidentAssetLoader) == 0x000088, "Member 'UAppSystemSubsystem::ResidentAssetLoader' has a wrong offset!");
static_assert(offsetof(UAppSystemSubsystem, SaveErrorPopup) == 0x000090, "Member 'UAppSystemSubsystem::SaveErrorPopup' has a wrong offset!");
static_assert(offsetof(UAppSystemSubsystem, LastFocusedWidget) == 0x000098, "Member 'UAppSystemSubsystem::LastFocusedWidget' has a wrong offset!");

// Class UNION.CustomAttrAnimComponent
// 0x0018 (0x00B8 - 0x00A0)
class UCustomAttrAnimComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindMaterialCurve();
	void Update();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomAttrAnimComponent">();
	}
	static class UCustomAttrAnimComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomAttrAnimComponent>();
	}
};
static_assert(alignof(UCustomAttrAnimComponent) == 0x000008, "Wrong alignment on UCustomAttrAnimComponent");
static_assert(sizeof(UCustomAttrAnimComponent) == 0x0000B8, "Wrong size on UCustomAttrAnimComponent");

// Class UNION.AlwaysTickCustomAttrAnimComponent
// 0x0000 (0x00B8 - 0x00B8)
class UAlwaysTickCustomAttrAnimComponent final : public UCustomAttrAnimComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AlwaysTickCustomAttrAnimComponent">();
	}
	static class UAlwaysTickCustomAttrAnimComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAlwaysTickCustomAttrAnimComponent>();
	}
};
static_assert(alignof(UAlwaysTickCustomAttrAnimComponent) == 0x000008, "Wrong alignment on UAlwaysTickCustomAttrAnimComponent");
static_assert(sizeof(UAlwaysTickCustomAttrAnimComponent) == 0x0000B8, "Wrong size on UAlwaysTickCustomAttrAnimComponent");

// Class UNION.Turntable
// 0x0008 (0x0298 - 0x0290)
class ATurntable : public AActor
{
public:
	class UTurntableComponent*                    TurntableComponent;                                // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UTurntableComponent* GetTurntableComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Turntable">();
	}
	static class ATurntable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATurntable>();
	}
};
static_assert(alignof(ATurntable) == 0x000008, "Wrong alignment on ATurntable");
static_assert(sizeof(ATurntable) == 0x000298, "Wrong size on ATurntable");
static_assert(offsetof(ATurntable, TurntableComponent) == 0x000290, "Member 'ATurntable::TurntableComponent' has a wrong offset!");

// Class UNION.AquaUnitAnimInstance
// 0x0060 (0x03D0 - 0x0370)
class UAquaUnitAnimInstance final : public UAnimInstance
{
public:
	float                                         RotationValue;                                     // 0x0368(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationRate;                                      // 0x036C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunAngle;                                          // 0x0370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_374[0x4C];                                     // 0x0374(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	class AMachineInRaceActor*                    Owner;                                             // 0x03C0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRacerStatusObject*                UnionRacerStatusObject;                            // 0x03C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AquaUnitAnimInstance">();
	}
	static class UAquaUnitAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAquaUnitAnimInstance>();
	}
};
static_assert(alignof(UAquaUnitAnimInstance) == 0x000010, "Wrong alignment on UAquaUnitAnimInstance");
static_assert(sizeof(UAquaUnitAnimInstance) == 0x0003D0, "Wrong size on UAquaUnitAnimInstance");
static_assert(offsetof(UAquaUnitAnimInstance, RotationValue) == 0x000368, "Member 'UAquaUnitAnimInstance::RotationValue' has a wrong offset!");
static_assert(offsetof(UAquaUnitAnimInstance, RotationRate) == 0x00036C, "Member 'UAquaUnitAnimInstance::RotationRate' has a wrong offset!");
static_assert(offsetof(UAquaUnitAnimInstance, RunAngle) == 0x000370, "Member 'UAquaUnitAnimInstance::RunAngle' has a wrong offset!");
static_assert(offsetof(UAquaUnitAnimInstance, Owner) == 0x0003C0, "Member 'UAquaUnitAnimInstance::Owner' has a wrong offset!");
static_assert(offsetof(UAquaUnitAnimInstance, UnionRacerStatusObject) == 0x0003C8, "Member 'UAquaUnitAnimInstance::UnionRacerStatusObject' has a wrong offset!");

// Class UNION.CommonRivalLevelWidget
// 0x0018 (0x02F8 - 0x02E0)
class UCommonRivalLevelWidget : public UUserWidget
{
public:
	class UWidgetSwitcher*                        WS_Base;                                           // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonRivalLevelContentWidget*         WBP_CMN_RivalLevel_Sub_Content;                    // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHigh;                                           // 0x02F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitAnimIcons();
	void PlayAnim();
	void PlayAnimationFinishedLoop();
	void PlayAnimationIn();
	void PlayAnimationLoop();
	void PlayAnimationOut();
	void SetIconSeEnabled(bool Enabled);
	void SetupSettings(int32 InMaxRivalLevel, int32 InRivalLevel, int32 InBlankIconHideCount, int32 InBaseRivalLevel);
	void SetupSettingsForFriendMatch(int32 InMaxRivalLevel, int32 InRivalLevel, int32 InRivalBaseLevel, bool bIsRivalPowerFlag, bool bPlayInitAnim);
	void SetupSettingsForPartyRace(int32 InMaxRivalLevel, int32 InRivalLevel, int32 InBlankIconHideCount, bool bIsRivalPowerFlag, ERivalTeamId InTeamID, bool bPlayInitAnim);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonRivalLevelWidget">();
	}
	static class UCommonRivalLevelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonRivalLevelWidget>();
	}
};
static_assert(alignof(UCommonRivalLevelWidget) == 0x000008, "Wrong alignment on UCommonRivalLevelWidget");
static_assert(sizeof(UCommonRivalLevelWidget) == 0x0002F8, "Wrong size on UCommonRivalLevelWidget");
static_assert(offsetof(UCommonRivalLevelWidget, WS_Base) == 0x0002E0, "Member 'UCommonRivalLevelWidget::WS_Base' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelWidget, WBP_CMN_RivalLevel_Sub_Content) == 0x0002E8, "Member 'UCommonRivalLevelWidget::WBP_CMN_RivalLevel_Sub_Content' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelWidget, bIsHigh) == 0x0002F0, "Member 'UCommonRivalLevelWidget::bIsHigh' has a wrong offset!");

// Class UNION.AtomComponentPlus
// 0x0000 (0x1370 - 0x1370)
class UAtomComponentPlus final : public UUnionAtomComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomComponentPlus">();
	}
	static class UAtomComponentPlus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomComponentPlus>();
	}
};
static_assert(alignof(UAtomComponentPlus) == 0x000010, "Wrong alignment on UAtomComponentPlus");
static_assert(sizeof(UAtomComponentPlus) == 0x001370, "Wrong size on UAtomComponentPlus");

// Class UNION.TimeTrialSequence
// 0x0068 (0x03D0 - 0x0368)
class ATimeTrialSequence : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCourseSelectWidgetBase*                CourseSelectUI;                                    // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGhostMachineDisable;                            // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLineGuideDisable;                               // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37A[0x56];                                     // 0x037A(0x0056)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ConvertGhostDataToGadgetPreset(const struct FReplaySaveInfo& InGhostData, struct FUserGadgetPresetData* OutGadgetPreset);
	void OnInitStateExit();
	void OnInitStateIdle();
	void SetTimeTrialRaceSetting(class UTimeTrialSelectCourseState* InSelectCourseState, class UGhostSelectState* InGhostSelectState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeTrialSequence">();
	}
	static class ATimeTrialSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATimeTrialSequence>();
	}
};
static_assert(alignof(ATimeTrialSequence) == 0x000008, "Wrong alignment on ATimeTrialSequence");
static_assert(sizeof(ATimeTrialSequence) == 0x0003D0, "Wrong size on ATimeTrialSequence");
static_assert(offsetof(ATimeTrialSequence, CourseSelectUI) == 0x000370, "Member 'ATimeTrialSequence::CourseSelectUI' has a wrong offset!");
static_assert(offsetof(ATimeTrialSequence, bIsGhostMachineDisable) == 0x000378, "Member 'ATimeTrialSequence::bIsGhostMachineDisable' has a wrong offset!");
static_assert(offsetof(ATimeTrialSequence, bIsLineGuideDisable) == 0x000379, "Member 'ATimeTrialSequence::bIsLineGuideDisable' has a wrong offset!");

// Class UNION.AtomSoundPlus
// 0x0048 (0x02D8 - 0x0290)
class AAtomSoundPlus final : public AActor
{
public:
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x0290(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bone;                                              // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollow;                                           // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponentPlus*                     AtomComponent;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomSoundPlus">();
	}
	static class AAtomSoundPlus* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtomSoundPlus>();
	}
};
static_assert(alignof(AAtomSoundPlus) == 0x000008, "Wrong alignment on AAtomSoundPlus");
static_assert(sizeof(AAtomSoundPlus) == 0x0002D8, "Wrong size on AAtomSoundPlus");
static_assert(offsetof(AAtomSoundPlus, Actor) == 0x000290, "Member 'AAtomSoundPlus::Actor' has a wrong offset!");
static_assert(offsetof(AAtomSoundPlus, bone) == 0x0002B8, "Member 'AAtomSoundPlus::bone' has a wrong offset!");
static_assert(offsetof(AAtomSoundPlus, bFollow) == 0x0002C0, "Member 'AAtomSoundPlus::bFollow' has a wrong offset!");
static_assert(offsetof(AAtomSoundPlus, AtomComponent) == 0x0002C8, "Member 'AAtomSoundPlus::AtomComponent' has a wrong offset!");

// Class UNION.AutoPlaySquadSubsystem
// 0x0078 (0x00A8 - 0x0030)
class UAutoPlaySquadSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AAutoInput*                             AutoInputInstance;                                 // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bLobbyInvitationRestartFlag;                       // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessInvitation;                                // 0x0051(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvitationRunning;                                // 0x0052(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOnlineGameMode                               OnlineGameMode;                                    // 0x0053(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAppNetComponent>        AppNetComponent;                                   // 0x0054(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlaySquadEnable;                              // 0x005C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSquadGroup>                    SquadGroupList;                                    // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         GroupMemberCount;                                  // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MyProductUserId;                                   // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHost;                                            // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGuest;                                           // 0x0089(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GroupIndex;                                        // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalForReady;                                  // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReadyTimer;                                        // 0x0094(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalForRetryInvite;                            // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RetryInviteTimer;                                  // 0x009C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShortRace;                                        // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutoPlaySquadSubsystem">();
	}
	static class UAutoPlaySquadSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutoPlaySquadSubsystem>();
	}
};
static_assert(alignof(UAutoPlaySquadSubsystem) == 0x000008, "Wrong alignment on UAutoPlaySquadSubsystem");
static_assert(sizeof(UAutoPlaySquadSubsystem) == 0x0000A8, "Wrong size on UAutoPlaySquadSubsystem");
static_assert(offsetof(UAutoPlaySquadSubsystem, AutoInputInstance) == 0x000038, "Member 'UAutoPlaySquadSubsystem::AutoInputInstance' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, bLobbyInvitationRestartFlag) == 0x000050, "Member 'UAutoPlaySquadSubsystem::bLobbyInvitationRestartFlag' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, bSuccessInvitation) == 0x000051, "Member 'UAutoPlaySquadSubsystem::bSuccessInvitation' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, bInvitationRunning) == 0x000052, "Member 'UAutoPlaySquadSubsystem::bInvitationRunning' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, OnlineGameMode) == 0x000053, "Member 'UAutoPlaySquadSubsystem::OnlineGameMode' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, AppNetComponent) == 0x000054, "Member 'UAutoPlaySquadSubsystem::AppNetComponent' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, bAutoPlaySquadEnable) == 0x00005C, "Member 'UAutoPlaySquadSubsystem::bAutoPlaySquadEnable' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, SquadGroupList) == 0x000060, "Member 'UAutoPlaySquadSubsystem::SquadGroupList' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, GroupMemberCount) == 0x000070, "Member 'UAutoPlaySquadSubsystem::GroupMemberCount' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, MyProductUserId) == 0x000078, "Member 'UAutoPlaySquadSubsystem::MyProductUserId' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, IsHost) == 0x000088, "Member 'UAutoPlaySquadSubsystem::IsHost' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, IsGuest) == 0x000089, "Member 'UAutoPlaySquadSubsystem::IsGuest' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, GroupIndex) == 0x00008C, "Member 'UAutoPlaySquadSubsystem::GroupIndex' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, IntervalForReady) == 0x000090, "Member 'UAutoPlaySquadSubsystem::IntervalForReady' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, ReadyTimer) == 0x000094, "Member 'UAutoPlaySquadSubsystem::ReadyTimer' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, IntervalForRetryInvite) == 0x000098, "Member 'UAutoPlaySquadSubsystem::IntervalForRetryInvite' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, RetryInviteTimer) == 0x00009C, "Member 'UAutoPlaySquadSubsystem::RetryInviteTimer' has a wrong offset!");
static_assert(offsetof(UAutoPlaySquadSubsystem, bShortRace) == 0x0000A0, "Member 'UAutoPlaySquadSubsystem::bShortRace' has a wrong offset!");

// Class UNION.FestaRewardWindow
// 0x0050 (0x0428 - 0x03D8)
class UFestaRewardWindow : public UUnionUISceneBase
{
public:
	uint8                                         Pad_3D8[0x8];                                      // 0x03D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsEventInfoDisplay;                                // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              CloseEndDelegate;                                  // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bEnableWindowInput;                                // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUnionUIButtonBase*>             PointRewardItemButtonArray;                        // 0x0400(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFestaPointRewardUIData>        PointRewardUIDataArray;                            // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         PlayerFestaPoint;                                  // 0x0420(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CloseWindow();
	bool GetDecisionClose();
	void OpenWindow();
	void SelectPointReward(int32 SelectDataIndex);
	void SetDecisionClose(bool bInDecisionClose);
	void SetEventInfoDisplayData(const TArray<struct FFestaPointRewardUIData>& InRewardUIDataArray, int32 InPlayerFestaPoint);
	void SetupResultPointReward(int32 SelectDataIndex);
	void ShowPointRewardItemButton(int32 RewardItemButtonIndex, int32 DataIndex, int32 InPlayerFestaPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaRewardWindow">();
	}
	static class UFestaRewardWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFestaRewardWindow>();
	}
};
static_assert(alignof(UFestaRewardWindow) == 0x000008, "Wrong alignment on UFestaRewardWindow");
static_assert(sizeof(UFestaRewardWindow) == 0x000428, "Wrong size on UFestaRewardWindow");
static_assert(offsetof(UFestaRewardWindow, IsEventInfoDisplay) == 0x0003E0, "Member 'UFestaRewardWindow::IsEventInfoDisplay' has a wrong offset!");
static_assert(offsetof(UFestaRewardWindow, CloseEndDelegate) == 0x0003E8, "Member 'UFestaRewardWindow::CloseEndDelegate' has a wrong offset!");
static_assert(offsetof(UFestaRewardWindow, bEnableWindowInput) == 0x0003F8, "Member 'UFestaRewardWindow::bEnableWindowInput' has a wrong offset!");
static_assert(offsetof(UFestaRewardWindow, PointRewardItemButtonArray) == 0x000400, "Member 'UFestaRewardWindow::PointRewardItemButtonArray' has a wrong offset!");
static_assert(offsetof(UFestaRewardWindow, PointRewardUIDataArray) == 0x000410, "Member 'UFestaRewardWindow::PointRewardUIDataArray' has a wrong offset!");
static_assert(offsetof(UFestaRewardWindow, PlayerFestaPoint) == 0x000420, "Member 'UFestaRewardWindow::PlayerFestaPoint' has a wrong offset!");

// Class UNION.CommonMenuButtonBase
// 0x0048 (0x04C8 - 0x0480)
class UCommonMenuButtonBase : public UUnionUIButtonBase
{
public:
	ECommonMenuButtonType                         ButtonType;                                        // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Btn_Active_Loop;                                   // 0x0488(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_Loop;                                   // 0x0490(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Active_to_Select;                              // 0x0498(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_to_Active;                              // 0x04A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_to_Player;                              // 0x04A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Player_to_Select;                              // 0x04B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_Out;                                    // 0x04B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          FocusSoundCue;                                     // 0x04C0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool IsValidDataTableRowData(ECommonMenuButtonType InButtonType, struct FCommonMenuTextData* OutRowData);
	void OnFocusLostImpl(const struct FFocusEvent& InFocusEvent);
	struct FEventReply OnFocusReceivedImpl(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void OnInitialize();
	void PlayAnimationPlayerToSelect();
	void PlayAnimationSelectToPlayer();
	void SetEnableButton(bool IsEnable);
	void SetIcon(ECommonMenuButtonType Type);
	void SetNavigationButton(class UWidget* PrevButton, class UWidget* NextButton);
	void SetText(const class FText& InText);
	void Update();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuButtonBase">();
	}
	static class UCommonMenuButtonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuButtonBase>();
	}
};
static_assert(alignof(UCommonMenuButtonBase) == 0x000008, "Wrong alignment on UCommonMenuButtonBase");
static_assert(sizeof(UCommonMenuButtonBase) == 0x0004C8, "Wrong size on UCommonMenuButtonBase");
static_assert(offsetof(UCommonMenuButtonBase, ButtonType) == 0x000480, "Member 'UCommonMenuButtonBase::ButtonType' has a wrong offset!");
static_assert(offsetof(UCommonMenuButtonBase, Btn_Active_Loop) == 0x000488, "Member 'UCommonMenuButtonBase::Btn_Active_Loop' has a wrong offset!");
static_assert(offsetof(UCommonMenuButtonBase, Btn_Select_Loop) == 0x000490, "Member 'UCommonMenuButtonBase::Btn_Select_Loop' has a wrong offset!");
static_assert(offsetof(UCommonMenuButtonBase, Btn_Active_to_Select) == 0x000498, "Member 'UCommonMenuButtonBase::Btn_Active_to_Select' has a wrong offset!");
static_assert(offsetof(UCommonMenuButtonBase, Btn_Select_to_Active) == 0x0004A0, "Member 'UCommonMenuButtonBase::Btn_Select_to_Active' has a wrong offset!");
static_assert(offsetof(UCommonMenuButtonBase, Btn_Select_to_Player) == 0x0004A8, "Member 'UCommonMenuButtonBase::Btn_Select_to_Player' has a wrong offset!");
static_assert(offsetof(UCommonMenuButtonBase, Btn_Player_to_Select) == 0x0004B0, "Member 'UCommonMenuButtonBase::Btn_Player_to_Select' has a wrong offset!");
static_assert(offsetof(UCommonMenuButtonBase, Btn_Select_Out) == 0x0004B8, "Member 'UCommonMenuButtonBase::Btn_Select_Out' has a wrong offset!");
static_assert(offsetof(UCommonMenuButtonBase, FocusSoundCue) == 0x0004C0, "Member 'UCommonMenuButtonBase::FocusSoundCue' has a wrong offset!");

// Class UNION.TopMenuPlayerNumButton
// 0x0010 (0x04D8 - 0x04C8)
class UTopMenuPlayerNumButton : public UCommonMenuButtonBase
{
public:
	ETopMenuPlayNum                               PlayerNum;                                         // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Btn_NoActive_Loop;                                 // 0x04D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void PlayAnimationNonActive();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TopMenuPlayerNumButton">();
	}
	static class UTopMenuPlayerNumButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTopMenuPlayerNumButton>();
	}
};
static_assert(alignof(UTopMenuPlayerNumButton) == 0x000008, "Wrong alignment on UTopMenuPlayerNumButton");
static_assert(sizeof(UTopMenuPlayerNumButton) == 0x0004D8, "Wrong size on UTopMenuPlayerNumButton");
static_assert(offsetof(UTopMenuPlayerNumButton, PlayerNum) == 0x0004C8, "Member 'UTopMenuPlayerNumButton::PlayerNum' has a wrong offset!");
static_assert(offsetof(UTopMenuPlayerNumButton, Btn_NoActive_Loop) == 0x0004D0, "Member 'UTopMenuPlayerNumButton::Btn_NoActive_Loop' has a wrong offset!");

// Class UNION.CommonUserWidget
// 0x0010 (0x02F0 - 0x02E0)
class UCommonUserWidget : public UUserWidget
{
public:
	class UUMGSequencePlayer*                     CurrentAnimPlayer;                                 // 0x02E0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayAnimationExBP(class UWidgetAnimation* Animation, class UWidgetAnimation* LoopAnimation);
	void PlayAnimationExBPWithFinished(class UWidgetAnimation* Animation, class UWidgetAnimation* LoopAnimation, const TDelegate<void(bool Aborted)>& OnFinished);
	void StopAnimationEx();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUserWidget">();
	}
	static class UCommonUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUserWidget>();
	}
};
static_assert(alignof(UCommonUserWidget) == 0x000008, "Wrong alignment on UCommonUserWidget");
static_assert(sizeof(UCommonUserWidget) == 0x0002F0, "Wrong size on UCommonUserWidget");
static_assert(offsetof(UCommonUserWidget, CurrentAnimPlayer) == 0x0002E0, "Member 'UCommonUserWidget::CurrentAnimPlayer' has a wrong offset!");

// Class UNION.CourseSelectRivalWidget
// 0x0060 (0x06A8 - 0x0648)
class UCourseSelectRivalWidget : public UUnionUIButtonStandard
{
public:
	class UCanvasPanel*                           _RootCanvasPanel;                                  // 0x0648(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _CharaIconImage;                                   // 0x0650(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetSwitcher*                        _CharaIconSwitcher;                                // 0x0658(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UTexture2D>              LoadTexture;                                       // 0x0660(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_688[0x8];                                      // 0x0688(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       RivalNext_In;                                      // 0x0690(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       RivalNext_Loop;                                    // 0x0698(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       RivalNext_Out;                                     // 0x06A0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class FText GetTxtRivalCompleteNum();
	void In();
	void Out();
	void SetInSEEnabled(bool Enabled);
	void UpdateDisplay(EDriverId RivalDriverId, int32 RivalWinCompleteThreshold, int32 RivalWinCompleteCount);
	void UpdateDisplayLevel(int32 RivalLevel, int32 BaseRivalLevel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CourseSelectRivalWidget">();
	}
	static class UCourseSelectRivalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCourseSelectRivalWidget>();
	}
};
static_assert(alignof(UCourseSelectRivalWidget) == 0x000008, "Wrong alignment on UCourseSelectRivalWidget");
static_assert(sizeof(UCourseSelectRivalWidget) == 0x0006A8, "Wrong size on UCourseSelectRivalWidget");
static_assert(offsetof(UCourseSelectRivalWidget, _RootCanvasPanel) == 0x000648, "Member 'UCourseSelectRivalWidget::_RootCanvasPanel' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalWidget, _CharaIconImage) == 0x000650, "Member 'UCourseSelectRivalWidget::_CharaIconImage' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalWidget, _CharaIconSwitcher) == 0x000658, "Member 'UCourseSelectRivalWidget::_CharaIconSwitcher' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalWidget, LoadTexture) == 0x000660, "Member 'UCourseSelectRivalWidget::LoadTexture' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalWidget, RivalNext_In) == 0x000690, "Member 'UCourseSelectRivalWidget::RivalNext_In' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalWidget, RivalNext_Loop) == 0x000698, "Member 'UCourseSelectRivalWidget::RivalNext_Loop' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalWidget, RivalNext_Out) == 0x0006A0, "Member 'UCourseSelectRivalWidget::RivalNext_Out' has a wrong offset!");

// Class UNION.BeforeRaceMessageInfoWidget
// 0x0030 (0x0320 - 0x02F0)
class UBeforeRaceMessageInfoWidget : public UCommonUserWidget
{
public:
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRichTextBlock*                    _TitleTextBlock;                                   // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_300[0x10];                                     // 0x0300(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       InLoop;                                            // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Out;                                               // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetTitleText(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeforeRaceMessageInfoWidget">();
	}
	static class UBeforeRaceMessageInfoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeforeRaceMessageInfoWidget>();
	}
};
static_assert(alignof(UBeforeRaceMessageInfoWidget) == 0x000008, "Wrong alignment on UBeforeRaceMessageInfoWidget");
static_assert(sizeof(UBeforeRaceMessageInfoWidget) == 0x000320, "Wrong size on UBeforeRaceMessageInfoWidget");
static_assert(offsetof(UBeforeRaceMessageInfoWidget, _TitleTextBlock) == 0x0002F8, "Member 'UBeforeRaceMessageInfoWidget::_TitleTextBlock' has a wrong offset!");
static_assert(offsetof(UBeforeRaceMessageInfoWidget, InLoop) == 0x000310, "Member 'UBeforeRaceMessageInfoWidget::InLoop' has a wrong offset!");
static_assert(offsetof(UBeforeRaceMessageInfoWidget, Out) == 0x000318, "Member 'UBeforeRaceMessageInfoWidget::Out' has a wrong offset!");

// Class UNION.BeforeRaceRuleExplanationWidget
// 0x0018 (0x0308 - 0x02F0)
class UBeforeRaceRuleExplanationWidget : public UCommonUserWidget
{
public:
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnAnimFinished;                                    // 0x02F8(0x0010)(Edit, ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeforeRaceRuleExplanationWidget">();
	}
	static class UBeforeRaceRuleExplanationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeforeRaceRuleExplanationWidget>();
	}
};
static_assert(alignof(UBeforeRaceRuleExplanationWidget) == 0x000008, "Wrong alignment on UBeforeRaceRuleExplanationWidget");
static_assert(sizeof(UBeforeRaceRuleExplanationWidget) == 0x000308, "Wrong size on UBeforeRaceRuleExplanationWidget");
static_assert(offsetof(UBeforeRaceRuleExplanationWidget, OnAnimFinished) == 0x0002F8, "Member 'UBeforeRaceRuleExplanationWidget::OnAnimFinished' has a wrong offset!");

// Class UNION.RankingLineScroller
// 0x0060 (0x0388 - 0x0328)
class URankingLineScroller : public UUnionUIInputWidget
{
public:
	int32                                         LastItemIndex;                                     // 0x0328(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URankingLine*                           MyLine;                                            // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URankingLine*>                   Lines;                                             // 0x0338(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UScrollBox*                             ScrollBox_0;                                       // 0x0348(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameModeId                                   GameModeID;                                        // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRichTextBlock*                    TXT_MyDetaDay;                                     // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionRichTextBlock*                    TXT_OtherDetaDay;                                  // 0x0360(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URankingLine>               ItemClass;                                         // 0x0368(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_370[0x8];                                      // 0x0370(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMenuRankingLineData>           RankingDataList;                                   // 0x0378(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void AddItem(const struct FMenuRankingLineData& RankingLineData);
	void ClearLines();
	void ConvertMyRankingDataTimeTrialToRankingLine(EAppSupportedPlatform Platform, const struct FMyRankingAsyncResult& RankingData, struct FMenuRankingLineData* OutLineData);
	void ConvertRankingDataFestaPointToRankingLine(const struct FRankingDataFestaPoint& RankingData, struct FMenuRankingLineData* OutLineData);
	void ConvertRankingDataFestaToRankingList(const struct FRankingDataFestaPointList& RankingData);
	void ConvertRankingDataLegendCompeToRankingLine(const struct FRankingDataLegendCompe& RankingData, struct FMenuRankingLineData* OutLineData);
	void ConvertRankingDataLegendCompeToRankingList(const struct FRankingDataLegendCompeList& RankingData);
	void ConvertRankingDataRankMatchToRankingLine(const struct FRankingDataRankMatch& RankingData, struct FMenuRankingLineData* OutLineData);
	void ConvertRankingDataRankMatchToRankingList(const struct FRankingDataRankMatchList& RankingData);
	void ConvertRankingDataTimeTrialToRankingLine(const struct FRankingDataTimeTrial& RankingData, struct FMenuRankingLineData* OutLineData);
	void ConvertRankingDataTimeTrialToRankingList(const struct FRankingDataTimeTrialList& RankingData);
	bool GetIsFocusingFirstLine();
	bool GetIsFocusingLastLine();
	void InitializeHover();
	void MouseClickEvent();
	void SetGameMode(EGameModeId InGameMode);
	void SetMyRankDateDateTime(const struct FDateTime& DateTime);
	void SetMyRankDateString(const class FString& DateString);
	void SetRankDateDateTime(const struct FDateTime& DateTime);
	void SetRankDateString(const class FString& DateString);
	void UpdateHover();
	void UpdateItems();
	void UpdateMyLine(const struct FMenuRankingLineData& RankingLineData);
	void UpdateVisibility(int32 InIndex, ESlateVisibility InVisibility);

	int32 GetCurrentIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RankingLineScroller">();
	}
	static class URankingLineScroller* GetDefaultObj()
	{
		return GetDefaultObjImpl<URankingLineScroller>();
	}
};
static_assert(alignof(URankingLineScroller) == 0x000008, "Wrong alignment on URankingLineScroller");
static_assert(sizeof(URankingLineScroller) == 0x000388, "Wrong size on URankingLineScroller");
static_assert(offsetof(URankingLineScroller, LastItemIndex) == 0x000328, "Member 'URankingLineScroller::LastItemIndex' has a wrong offset!");
static_assert(offsetof(URankingLineScroller, MyLine) == 0x000330, "Member 'URankingLineScroller::MyLine' has a wrong offset!");
static_assert(offsetof(URankingLineScroller, Lines) == 0x000338, "Member 'URankingLineScroller::Lines' has a wrong offset!");
static_assert(offsetof(URankingLineScroller, ScrollBox_0) == 0x000348, "Member 'URankingLineScroller::ScrollBox_0' has a wrong offset!");
static_assert(offsetof(URankingLineScroller, GameModeID) == 0x000350, "Member 'URankingLineScroller::GameModeID' has a wrong offset!");
static_assert(offsetof(URankingLineScroller, TXT_MyDetaDay) == 0x000358, "Member 'URankingLineScroller::TXT_MyDetaDay' has a wrong offset!");
static_assert(offsetof(URankingLineScroller, TXT_OtherDetaDay) == 0x000360, "Member 'URankingLineScroller::TXT_OtherDetaDay' has a wrong offset!");
static_assert(offsetof(URankingLineScroller, ItemClass) == 0x000368, "Member 'URankingLineScroller::ItemClass' has a wrong offset!");
static_assert(offsetof(URankingLineScroller, RankingDataList) == 0x000378, "Member 'URankingLineScroller::RankingDataList' has a wrong offset!");

// Class UNION.TimeTrialRanking
// 0x0068 (0x03F0 - 0x0388)
class UTimeTrialRanking : public URankingLineScroller
{
public:
	class URankingLine*                           WBP_TimeTrial_Sub_RankingTable_Myself;             // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_0;                                  // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_398[0x58];                                     // 0x0398(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayCrossplayOffMessage();
	void DisplayLoading();
	void DisplayNetworkErrorMessage();
	void DisplayNoRankingMessage();
	void DisplayRanking();
	struct FRankingDataTimeTrial GetRankingTimeTrialData(const int32 InIndex, bool* OutIsValid);
	void InitDateTime();
	void ReleaseDownKey();
	void ReleaseTimer();
	void ReleaseUpKey();
	void SelectRanking(EAppSupportedPlatform Platform, EStageId courseId, ESpeedClassId speedType);
	void SetInputEnable(bool InEnable);
	void StartDownKeyPress();
	void StartUpKeyPress();

	bool IsDownKeyPressLoop() const;
	bool IsUpKeyPressLoop() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeTrialRanking">();
	}
	static class UTimeTrialRanking* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeTrialRanking>();
	}
};
static_assert(alignof(UTimeTrialRanking) == 0x000008, "Wrong alignment on UTimeTrialRanking");
static_assert(sizeof(UTimeTrialRanking) == 0x0003F0, "Wrong size on UTimeTrialRanking");
static_assert(offsetof(UTimeTrialRanking, WBP_TimeTrial_Sub_RankingTable_Myself) == 0x000388, "Member 'UTimeTrialRanking::WBP_TimeTrial_Sub_RankingTable_Myself' has a wrong offset!");
static_assert(offsetof(UTimeTrialRanking, WidgetSwitcher_0) == 0x000390, "Member 'UTimeTrialRanking::WidgetSwitcher_0' has a wrong offset!");

// Class UNION.BootSequence
// 0x0008 (0x0370 - 0x0368)
class ABootSequence final : public AHierarchicalStateMachine
{
public:
	class UUnionPlatformSignInBase*               PlatformSignIn;                                    // 0x0368(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnExitStateCheckContent();
	void OnExitStateCheckGDKCrossPlay();
	void OnExitStateCheckPSParentalControl();
	void OnExitStateInitializePlatform();
	void OnExitStateSignInPlatform();
	void OnInitStateCheckContent();
	void OnInitStateCheckGDKCrossPlay();
	void OnInitStateCheckPSParentalControl();
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnInitStateInitializePlatform();
	void OnInitStateSignInPlatform();
	void OnUpdateStateCheckContent(float DeltaTime);
	void OnUpdateStateCheckGDKCrossPlay(float DeltaTime);
	void OnUpdateStateCheckPSParentalControl(float DeltaTime);
	void OnUpdateStateInitializePlatform(float DeltaTime);
	void OnUpdateStateSignInPlatform(float DeltaTime);
	void SetNextBootSequenceState(EBootSequenceState InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BootSequence">();
	}
	static class ABootSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABootSequence>();
	}
};
static_assert(alignof(ABootSequence) == 0x000008, "Wrong alignment on ABootSequence");
static_assert(sizeof(ABootSequence) == 0x000370, "Wrong size on ABootSequence");
static_assert(offsetof(ABootSequence, PlatformSignIn) == 0x000368, "Member 'ABootSequence::PlatformSignIn' has a wrong offset!");

// Class UNION.FlightUnitAnimInstance
// 0x0060 (0x03D0 - 0x0370)
class UFlightUnitAnimInstance final : public UAnimInstance
{
public:
	float                                         Yaw;                                               // 0x0368(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x036C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brake;                                             // 0x0370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_374[0x5C];                                     // 0x0374(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlightUnitAnimInstance">();
	}
	static class UFlightUnitAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlightUnitAnimInstance>();
	}
};
static_assert(alignof(UFlightUnitAnimInstance) == 0x000010, "Wrong alignment on UFlightUnitAnimInstance");
static_assert(sizeof(UFlightUnitAnimInstance) == 0x0003D0, "Wrong size on UFlightUnitAnimInstance");
static_assert(offsetof(UFlightUnitAnimInstance, Yaw) == 0x000368, "Member 'UFlightUnitAnimInstance::Yaw' has a wrong offset!");
static_assert(offsetof(UFlightUnitAnimInstance, Pitch) == 0x00036C, "Member 'UFlightUnitAnimInstance::Pitch' has a wrong offset!");
static_assert(offsetof(UFlightUnitAnimInstance, Brake) == 0x000370, "Member 'UFlightUnitAnimInstance::Brake' has a wrong offset!");

// Class UNION.RaceSequenceStateGoal
// 0x0000 (0x0110 - 0x0110)
class URaceSequenceStateGoal : public URaceSequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateGoal">();
	}
	static class URaceSequenceStateGoal* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateGoal>();
	}
};
static_assert(alignof(URaceSequenceStateGoal) == 0x000008, "Wrong alignment on URaceSequenceStateGoal");
static_assert(sizeof(URaceSequenceStateGoal) == 0x000110, "Wrong size on URaceSequenceStateGoal");

// Class UNION.BootSequenceStateBase
// 0x0010 (0x0108 - 0x00F8)
class UBootSequenceStateBase final : public UHierarchicalStateMachineStateComponent
{
public:
	EBootSequenceState                            DefaultMenuState;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABootSequence*                          OwnerBootSequence;                                 // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetNextBootSequenceState(EBootSequenceState InState);

	class ABootSequence* GetOwnerBootSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BootSequenceStateBase">();
	}
	static class UBootSequenceStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBootSequenceStateBase>();
	}
};
static_assert(alignof(UBootSequenceStateBase) == 0x000008, "Wrong alignment on UBootSequenceStateBase");
static_assert(sizeof(UBootSequenceStateBase) == 0x000108, "Wrong size on UBootSequenceStateBase");
static_assert(offsetof(UBootSequenceStateBase, DefaultMenuState) == 0x0000F8, "Member 'UBootSequenceStateBase::DefaultMenuState' has a wrong offset!");
static_assert(offsetof(UBootSequenceStateBase, OwnerBootSequence) == 0x000100, "Member 'UBootSequenceStateBase::OwnerBootSequence' has a wrong offset!");

// Class UNION.CommonTextBalloon
// 0x0018 (0x02F8 - 0x02E0)
class UCommonTextBalloon : public UUserWidget
{
public:
	class UImage*                                 PAT_TextBalloon;                                   // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionFontScroll*                       WBP_FontScroll_PartsName;                          // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PatternIndex;                                      // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBalloonPositionIndex(int32 InIndex, float InOffsetValueAbs);
	void SetPattern(int32 InPatternIndex);
	void SetText(const class FText& InText);
	void SetVisible(bool Visible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTextBalloon">();
	}
	static class UCommonTextBalloon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTextBalloon>();
	}
};
static_assert(alignof(UCommonTextBalloon) == 0x000008, "Wrong alignment on UCommonTextBalloon");
static_assert(sizeof(UCommonTextBalloon) == 0x0002F8, "Wrong size on UCommonTextBalloon");
static_assert(offsetof(UCommonTextBalloon, PAT_TextBalloon) == 0x0002E0, "Member 'UCommonTextBalloon::PAT_TextBalloon' has a wrong offset!");
static_assert(offsetof(UCommonTextBalloon, WBP_FontScroll_PartsName) == 0x0002E8, "Member 'UCommonTextBalloon::WBP_FontScroll_PartsName' has a wrong offset!");
static_assert(offsetof(UCommonTextBalloon, PatternIndex) == 0x0002F0, "Member 'UCommonTextBalloon::PatternIndex' has a wrong offset!");

// Class UNION.CommonButtonTextBalloon
// 0x0010 (0x0308 - 0x02F8)
class UCommonButtonTextBalloon : public UCommonTextBalloon
{
public:
	class USizeBox*                               DSP_Btn;                                           // 0x02F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuFooterButton*                WBP_FooterMenu_Sub_CommonBtn;                      // 0x0300(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonButtonTextBalloon">();
	}
	static class UCommonButtonTextBalloon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonButtonTextBalloon>();
	}
};
static_assert(alignof(UCommonButtonTextBalloon) == 0x000008, "Wrong alignment on UCommonButtonTextBalloon");
static_assert(sizeof(UCommonButtonTextBalloon) == 0x000308, "Wrong size on UCommonButtonTextBalloon");
static_assert(offsetof(UCommonButtonTextBalloon, DSP_Btn) == 0x0002F8, "Member 'UCommonButtonTextBalloon::DSP_Btn' has a wrong offset!");
static_assert(offsetof(UCommonButtonTextBalloon, WBP_FooterMenu_Sub_CommonBtn) == 0x000300, "Member 'UCommonButtonTextBalloon::WBP_FooterMenu_Sub_CommonBtn' has a wrong offset!");

// Class UNION.WirelessSequenceStateToOnline
// 0x0010 (0x0108 - 0x00F8)
class UWirelessSequenceStateToOnline final : public UHierarchicalStateMachineStateComponent
{
public:
	float                                         TimeoutTime;                                       // 0x00F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC[0xC];                                       // 0x00FC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCompleteFinalizeWirelessMode(class UWirelessLobbyContext* WirelessLobbyContext, const struct FOnlineErrorBP& Error);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WirelessSequenceStateToOnline">();
	}
	static class UWirelessSequenceStateToOnline* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWirelessSequenceStateToOnline>();
	}
};
static_assert(alignof(UWirelessSequenceStateToOnline) == 0x000008, "Wrong alignment on UWirelessSequenceStateToOnline");
static_assert(sizeof(UWirelessSequenceStateToOnline) == 0x000108, "Wrong size on UWirelessSequenceStateToOnline");
static_assert(offsetof(UWirelessSequenceStateToOnline, TimeoutTime) == 0x0000F8, "Member 'UWirelessSequenceStateToOnline::TimeoutTime' has a wrong offset!");

// Class UNION.BugreportToolFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBugreportToolFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BT_AddAttachedFile(const class FString& Path);
	static bool BT_IsErrorHandling();
	static bool BT_IsLibraryInitialized();
	static void BT_LaunchBugReport();
	static class FString BT_PrintMemoryString(const class FString& BT_InString, bool BT_bMemoryToLog, EBugreportToolLogType BT_memoryLogType);
	static void BT_SetAdditionalDescription(const class FString& Description);
	static void BT_SetCustomField(const class FString& FieldName, const class FString& Value);
	static void BT_SetExtensionParamPosition(const struct FVector& Position);
	static void BT_SetTicketInfo(int32 Revision, const class FString& BuildData, const class FString& AncillaryInfo, const class FString& userName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BugreportToolFunctionLibrary">();
	}
	static class UBugreportToolFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBugreportToolFunctionLibrary>();
	}
};
static_assert(alignof(UBugreportToolFunctionLibrary) == 0x000008, "Wrong alignment on UBugreportToolFunctionLibrary");
static_assert(sizeof(UBugreportToolFunctionLibrary) == 0x000028, "Wrong size on UBugreportToolFunctionLibrary");

// Class UNION.ResultRateRankSubRateWindow
// 0x0000 (0x02E0 - 0x02E0)
class UResultRateRankSubRateWindow : public UUserWidget
{
public:
	static TArray<struct FRewardGetWindowParam> GetRateRewardParamList(bool bIsGetReward, ERateRank NowRank);
	static void SaveRateReward(const TArray<struct FRewardGetWindowParam>& RewardGetWindowParamList);

	struct FRateRankBonus GetRatePromotionBonus();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResultRateRankSubRateWindow">();
	}
	static class UResultRateRankSubRateWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResultRateRankSubRateWindow>();
	}
};
static_assert(alignof(UResultRateRankSubRateWindow) == 0x000008, "Wrong alignment on UResultRateRankSubRateWindow");
static_assert(sizeof(UResultRateRankSubRateWindow) == 0x0002E0, "Wrong size on UResultRateRankSubRateWindow");

// Class UNION.CameraDebugMovementComponent
// 0x0008 (0x00A8 - 0x00A0)
class UCameraDebugMovementComponent final : public UActorComponent
{
public:
	float                                         MoveSpeed;                                         // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookSpeed;                                         // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Update(float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraDebugMovementComponent">();
	}
	static class UCameraDebugMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraDebugMovementComponent>();
	}
};
static_assert(alignof(UCameraDebugMovementComponent) == 0x000008, "Wrong alignment on UCameraDebugMovementComponent");
static_assert(sizeof(UCameraDebugMovementComponent) == 0x0000A8, "Wrong size on UCameraDebugMovementComponent");
static_assert(offsetof(UCameraDebugMovementComponent, MoveSpeed) == 0x0000A0, "Member 'UCameraDebugMovementComponent::MoveSpeed' has a wrong offset!");
static_assert(offsetof(UCameraDebugMovementComponent, LookSpeed) == 0x0000A4, "Member 'UCameraDebugMovementComponent::LookSpeed' has a wrong offset!");

// Class UNION.CameraTransformMovementComponent
// 0x01B0 (0x0250 - 0x00A0)
class UCameraTransformMovementComponent final : public UActorComponent
{
public:
	TArray<struct FCameraTransformMovementData>   MovementDataList;                                  // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCameraTransformMovementData           MovementData;                                      // 0x00B0(0x0080)(Edit, NativeAccessSpecifierPublic)
	float                                         MinZoomOffsetMultiplier;                           // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZoomOffsetMultiplier;                           // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoMovementTime;                                  // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   AutoMovementEasingFunc;                            // 0x013C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D[0x113];                                    // 0x013D(0x0113)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMovementData(const struct FCameraTransformMovementData& InMovementData);
	void SetMovementDataByIndex(int32 InMovementDataIndex);
	void StartAutoMovementByIndex(int32 InMovementDataIndex);
	void StopAutoMovement();
	void Update(float InDeltaTime);

	bool GetIsAutoMoving() const;
	const struct FCameraTransformMovementData GetMovementData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraTransformMovementComponent">();
	}
	static class UCameraTransformMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraTransformMovementComponent>();
	}
};
static_assert(alignof(UCameraTransformMovementComponent) == 0x000010, "Wrong alignment on UCameraTransformMovementComponent");
static_assert(sizeof(UCameraTransformMovementComponent) == 0x000250, "Wrong size on UCameraTransformMovementComponent");
static_assert(offsetof(UCameraTransformMovementComponent, MovementDataList) == 0x0000A0, "Member 'UCameraTransformMovementComponent::MovementDataList' has a wrong offset!");
static_assert(offsetof(UCameraTransformMovementComponent, MovementData) == 0x0000B0, "Member 'UCameraTransformMovementComponent::MovementData' has a wrong offset!");
static_assert(offsetof(UCameraTransformMovementComponent, MinZoomOffsetMultiplier) == 0x000130, "Member 'UCameraTransformMovementComponent::MinZoomOffsetMultiplier' has a wrong offset!");
static_assert(offsetof(UCameraTransformMovementComponent, MaxZoomOffsetMultiplier) == 0x000134, "Member 'UCameraTransformMovementComponent::MaxZoomOffsetMultiplier' has a wrong offset!");
static_assert(offsetof(UCameraTransformMovementComponent, AutoMovementTime) == 0x000138, "Member 'UCameraTransformMovementComponent::AutoMovementTime' has a wrong offset!");
static_assert(offsetof(UCameraTransformMovementComponent, AutoMovementEasingFunc) == 0x00013C, "Member 'UCameraTransformMovementComponent::AutoMovementEasingFunc' has a wrong offset!");

// Class UNION.FriendListConfirmAnimationWidget
// 0x0010 (0x02F0 - 0x02E0)
class UFriendListConfirmAnimationWidget final : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              AnimationOutFinishedDelegate;                      // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void PlayAnimationIn(bool bInReception);
	void PlayAnimationOut(bool bInSend);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendListConfirmAnimationWidget">();
	}
	static class UFriendListConfirmAnimationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendListConfirmAnimationWidget>();
	}
};
static_assert(alignof(UFriendListConfirmAnimationWidget) == 0x000008, "Wrong alignment on UFriendListConfirmAnimationWidget");
static_assert(sizeof(UFriendListConfirmAnimationWidget) == 0x0002F0, "Wrong size on UFriendListConfirmAnimationWidget");
static_assert(offsetof(UFriendListConfirmAnimationWidget, AnimationOutFinishedDelegate) == 0x0002E0, "Member 'UFriendListConfirmAnimationWidget::AnimationOutFinishedDelegate' has a wrong offset!");

// Class UNION.RivalSelectCharaInfoWidget
// 0x0028 (0x0308 - 0x02E0)
class URivalSelectCharaInfoWidget : public UUserWidget
{
public:
	class UUnionRichTextBlock*                    _CharaNameTextBlock;                               // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _CharaFlavorTextBlock;                             // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUITextBlock*                      _BattleCountTextBlock;                             // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _WinCountTitleTextBlock;                           // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUITextBlock*                      _WinCountTextBlock;                                // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RivalSelectCharaInfoWidget">();
	}
	static class URivalSelectCharaInfoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URivalSelectCharaInfoWidget>();
	}
};
static_assert(alignof(URivalSelectCharaInfoWidget) == 0x000008, "Wrong alignment on URivalSelectCharaInfoWidget");
static_assert(sizeof(URivalSelectCharaInfoWidget) == 0x000308, "Wrong size on URivalSelectCharaInfoWidget");
static_assert(offsetof(URivalSelectCharaInfoWidget, _CharaNameTextBlock) == 0x0002E0, "Member 'URivalSelectCharaInfoWidget::_CharaNameTextBlock' has a wrong offset!");
static_assert(offsetof(URivalSelectCharaInfoWidget, _CharaFlavorTextBlock) == 0x0002E8, "Member 'URivalSelectCharaInfoWidget::_CharaFlavorTextBlock' has a wrong offset!");
static_assert(offsetof(URivalSelectCharaInfoWidget, _BattleCountTextBlock) == 0x0002F0, "Member 'URivalSelectCharaInfoWidget::_BattleCountTextBlock' has a wrong offset!");
static_assert(offsetof(URivalSelectCharaInfoWidget, _WinCountTitleTextBlock) == 0x0002F8, "Member 'URivalSelectCharaInfoWidget::_WinCountTitleTextBlock' has a wrong offset!");
static_assert(offsetof(URivalSelectCharaInfoWidget, _WinCountTextBlock) == 0x000300, "Member 'URivalSelectCharaInfoWidget::_WinCountTextBlock' has a wrong offset!");

// Class UNION.Camera_UtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UCamera_UtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool DeProjectScreenToWorldWithCameraComponent(class UCameraComponent* CameraComponent, const struct FVector2D& ViewRect, const struct FVector2D& ScreenPos, struct FVector* WorldPos, struct FVector* WorldDirection);
	static bool WorldToProjectScreenWithCameraComponent(class UCameraComponent* CameraComponent, const struct FVector2D& ViewRect, const struct FVector& WorldPos, struct FVector2D* OutScreenPos);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Camera_UtilityLibrary">();
	}
	static class UCamera_UtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCamera_UtilityLibrary>();
	}
};
static_assert(alignof(UCamera_UtilityLibrary) == 0x000008, "Wrong alignment on UCamera_UtilityLibrary");
static_assert(sizeof(UCamera_UtilityLibrary) == 0x000028, "Wrong size on UCamera_UtilityLibrary");

// Class UNION.CommonLobbyContext
// 0x0218 (0x0448 - 0x0230)
class UCommonLobbyContext : public ULobbyContextBase
{
public:
	TMulticastInlineDelegate<void(class UCommonLobbyMemberContext* SendUser, int32 StampId)> OnRecvStamp; // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCommonLobbyMemberContext* SendUser, int32 courseId)> OnRecvSelectCourse; // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 DecidedCourseId, int32 DecidedPlayerOnlineIndex)> OnRecvDecidedRaceStageSettings; // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCommonLobbyMemberContext* SendUser, class UCommonLobbyMemberContext* RecvUser)> OnRecvLike; // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCommonLobbyMemberContext* MemberContext)> OnRecvHorn;       // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCommonLobbyContext* LobbyContext, const struct FLobbyInitData& Data)> OnRecvInitLobbyData; // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ELobbySequenceState NextState)> OnRecvNextLobbySequenceState;      // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& InEntryRaceId)> OnRecvEntryRaceId;            // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& InEntryRaceId)> OnRecvSendResultSave;         // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCommonLobbyContext* LobbyContext)> OnStartMatchmaking;      // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCommonLobbyContext* LobbyContext, class UMatchmakingRequestContext* MatchmakingContext)> OnMoveLobby; // 0x02D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E0[0x30];                                     // 0x02E0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchmakingRequestContext*             MatchmakingContext;                                // 0x0310(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelectableCourseMax;                               // 0x0318(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31C[0x44];                                     // 0x031C(0x0044)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 ErrorCode, EAppNetErrorCode ErrorCodeEnum, const class FString& ErrorMessage)> LobbyContextOnError; // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_370[0xD8];                                     // 0x0370(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyGroup();
	void CheckMatchmakingStatus();
	void ConfirmMatchingUsers();
	void EndPlatformGameMatch(const TArray<struct FCommon_UserOrderData>& UserOrder);
	void GetRaceCycleFlag(bool* bOutValue);
	bool IsAlreadyCalledRaceSetting();
	bool IsInviteBlocked(const struct FLobbyOperationResult& SendInvitationResult);
	bool IsSendResultSaveBeforeSetupCallback();
	bool NotifySendResultSave();
	void OnLobbyOperationCompleteWithError(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void PromoteMemberBestChoice(TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);
	void ResetEntryRaceId();
	void ResetLocalData();
	void ResetRPCCounter();
	void SendInvitation(const struct FUniqueNetIdRepl& UserId, TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);
	void SendInvitationWithPlatform(const struct FUniqueNetIdRepl& UserId, const struct FUniqueNetIdRepl& ExternalUserId, TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);
	void SetCompleteLobbySetting(bool bFlag);
	void SetLobbyInitData(const struct FLobbyInitData& InLobbyInitData, const TArray<struct FAnotherStageLotteryResult>& AnotherStages);
	void SetOnlineRandomSeed(int32 Index_0, int32 Seed);
	void SetOnlineRandomSeeds(const TArray<int32>& NewOnlineRandomSeeds);
	void SetOnlineRandomSeedString(const class FString& SeedString);
	void SetRaceCycleFlag(bool bValue);
	void SetRaceStageSettings(int32 courseId, int32 SelectedPlayerOnlineIndex, const TArray<struct FAnotherStageLotteryResult>& AnotherStages);
	void SetSelectedRaceType(ERaceType RaceType);
	void SetSpeedClass(ESpeedClassId SpeedClass);
	void SetupGroup();
	void SetUseCOM(bool bUseCOM);
	void StartPlatformGameMatch(const class FString& ActivityId);
	bool SyncEntryRaceId(const class FString& InEntryRaceId);
	void SyncRaceHostUserId();
	void UpdateCurrentSendResultSaveCount();

	bool CanLobbyMessaging() const;
	void GetCompleteLobbySetting(bool* bOutFlag) const;
	class FString GetEntryRaceId() const;
	bool GetLobbyAttributeEntryRaceId(class FString* OutRaceId) const;
	void GetLobbyInitData(struct FLobbyInitData* OutLobbyInitData) const;
	float GetLocalMatchmakingCompleteTime() const;
	int32 GetLocalMemberOnlineIndex() const;
	class ULobbyMemberContextBase* GetMemberFromRacerIndex(int32 RacerIndex) const;
	class ULobbyMemberContextBase* GetMemberFromRacerIndexByClass(int32 RacerIndex, TSubclassOf<class ULobbyMemberContextBase> MemberContextClass) const;
	bool GetMemberRacerIndexFromUserId(const struct FUniqueNetIdRepl& InUserId, int32* OutRacerIndex) const;
	void GetMemberUserIdFromRacerIndex(int32 RacerIndex, struct FUniqueNetIdRepl* OutUserId) const;
	void GetOnlineRandomSeeds(TArray<int32>* OutResult) const;
	void GetRaceHostCandidateUserIds(TArray<class FString>* OutArray) const;
	void GetRaceHostUserId(class FString* RaceHostUserId) const;
	void GetRaceStageSettings(TArray<struct FAppRaceStageSetting>* OutResult) const;
	ELobbyType GetRealLobbyTypeEnum() const;
	void GetSelectableCourseIds(TArray<EStageId>* OutResult) const;
	void GetSelectedRaceType(ERaceType* RaceType) const;
	void GetSpeedClass(ESpeedClassId* SpeedClass) const;
	void GetUseCOM(bool* bOutResult) const;
	bool IsAllMemberInLobby() const;
	bool IsRaceHost(const class FString& InUserId) const;
	bool IsRaceHostLocalUser() const;
	bool ShouldPlatformInvite(const class FString& Platform) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonLobbyContext">();
	}
	static class UCommonLobbyContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonLobbyContext>();
	}
};
static_assert(alignof(UCommonLobbyContext) == 0x000008, "Wrong alignment on UCommonLobbyContext");
static_assert(sizeof(UCommonLobbyContext) == 0x000448, "Wrong size on UCommonLobbyContext");
static_assert(offsetof(UCommonLobbyContext, OnRecvStamp) == 0x000230, "Member 'UCommonLobbyContext::OnRecvStamp' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, OnRecvSelectCourse) == 0x000240, "Member 'UCommonLobbyContext::OnRecvSelectCourse' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, OnRecvDecidedRaceStageSettings) == 0x000250, "Member 'UCommonLobbyContext::OnRecvDecidedRaceStageSettings' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, OnRecvLike) == 0x000260, "Member 'UCommonLobbyContext::OnRecvLike' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, OnRecvHorn) == 0x000270, "Member 'UCommonLobbyContext::OnRecvHorn' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, OnRecvInitLobbyData) == 0x000280, "Member 'UCommonLobbyContext::OnRecvInitLobbyData' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, OnRecvNextLobbySequenceState) == 0x000290, "Member 'UCommonLobbyContext::OnRecvNextLobbySequenceState' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, OnRecvEntryRaceId) == 0x0002A0, "Member 'UCommonLobbyContext::OnRecvEntryRaceId' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, OnRecvSendResultSave) == 0x0002B0, "Member 'UCommonLobbyContext::OnRecvSendResultSave' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, OnStartMatchmaking) == 0x0002C0, "Member 'UCommonLobbyContext::OnStartMatchmaking' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, OnMoveLobby) == 0x0002D0, "Member 'UCommonLobbyContext::OnMoveLobby' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, MatchmakingContext) == 0x000310, "Member 'UCommonLobbyContext::MatchmakingContext' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, SelectableCourseMax) == 0x000318, "Member 'UCommonLobbyContext::SelectableCourseMax' has a wrong offset!");
static_assert(offsetof(UCommonLobbyContext, LobbyContextOnError) == 0x000360, "Member 'UCommonLobbyContext::LobbyContextOnError' has a wrong offset!");

// Class UNION.CustomMatchLobbyContext
// 0x00E8 (0x0530 - 0x0448)
class UCustomMatchLobbyContext : public UCommonLobbyContext
{
public:
	TMulticastInlineDelegate<void(class UCustomMatchLobbyMemberContext* SendUser, const struct FFriendLobbyMemberTodayRecord& MemberRecord)> OnRecvTodayRecord; // 0x0448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_458[0xD0];                                     // 0x0458(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	class USquadContext*                          SquadContext;                                      // 0x0528(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BlockMember(class ULobbyMemberContextBase* MemberContext);
	bool CheckPermission(const struct FLobbyId& InLobbyId, EFriendMatchLobbyJoinResult* OutResult);
	void CreateWithSquad(class USquadContext* InSquadContext, int32 MaxMember);
	void DebugRuleSettingRandomize();
	void GetFinishNextRaceSetting(bool* OutIsFinished);
	void GetGroupSetting(TMap<class FString, int32>* OutGroupSetting);
	void GetGroupSettingComplete(bool* OutComplete);
	void GetReturnLobbyAllMember(bool* OutComplete);
	void GetRivalSetting(bool* OutSetting);
	bool GetRuleSetting(bool* UsingPreset, EPartyRacePreset* PresetId, struct FCustomRaceSetting* RaceSetting, struct FItemSwitchSetting* ItemSetting, struct FCourseSwitchSetting* CourseSetting, ERivalTeamId* RivalTeamId);
	void GetTravelCourseSwitchSettingString(class FString* OutSetting);
	bool IsRuleSettingUpdated();
	void OnLobbyTypeChanged(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void SearchByHostUserId(const class FString& HostUserId, TDelegate<void(bool bSuccessful, const struct FSearchLobbyResult& Result)> OnComplete);
	void SetFinishNextRaceSetting(bool IsFinished);
	void SetGroupSetting();
	void SetGroupSettingComplete(bool IsComplete);
	void SetInRace(bool IsInRace);
	void SetMemberGroup(const class FString& MemberId, int32 GroupIndex);
	void SetReturnLobbyAllMember(bool IsComplete);
	void SetupLobbyInitAttribute();
	void SetupLobbyRaceAttributes();
	void SyncRuleSettingForCustom(const struct FCustomRaceSetting& RaceSetting, const struct FItemSwitchSetting& ItemSetting, const TArray<EStageId>& CourseSetting);
	void SyncRuleSettingForPreset(const struct FCustomRaceSetting& RaceSetting, EPartyRacePreset PresetId);

	void GetInRace(bool* OutInRace) const;
	EFriendMatchLobbyJoinResult GetJoinResult() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomMatchLobbyContext">();
	}
	static class UCustomMatchLobbyContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomMatchLobbyContext>();
	}
};
static_assert(alignof(UCustomMatchLobbyContext) == 0x000008, "Wrong alignment on UCustomMatchLobbyContext");
static_assert(sizeof(UCustomMatchLobbyContext) == 0x000530, "Wrong size on UCustomMatchLobbyContext");
static_assert(offsetof(UCustomMatchLobbyContext, OnRecvTodayRecord) == 0x000448, "Member 'UCustomMatchLobbyContext::OnRecvTodayRecord' has a wrong offset!");
static_assert(offsetof(UCustomMatchLobbyContext, SquadContext) == 0x000528, "Member 'UCustomMatchLobbyContext::SquadContext' has a wrong offset!");

// Class UNION.ChallengeAndTitleSequence
// 0x0018 (0x0380 - 0x0368)
class AChallengeAndTitleSequence final : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnReturnToOptionTop;                               // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void SetNextChallengeAndHonorState(EChallengeAndHonorTitleSequenceState InState, EChallengeAndHonorTitleSequenceState PrevState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeAndTitleSequence">();
	}
	static class AChallengeAndTitleSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChallengeAndTitleSequence>();
	}
};
static_assert(alignof(AChallengeAndTitleSequence) == 0x000008, "Wrong alignment on AChallengeAndTitleSequence");
static_assert(sizeof(AChallengeAndTitleSequence) == 0x000380, "Wrong size on AChallengeAndTitleSequence");
static_assert(offsetof(AChallengeAndTitleSequence, OnReturnToOptionTop) == 0x000370, "Member 'AChallengeAndTitleSequence::OnReturnToOptionTop' has a wrong offset!");

// Class UNION.UnionMonsterTruckUtility
// 0x0000 (0x0028 - 0x0028)
class UUnionMonsterTruckUtility final : public UBlueprintFunctionLibrary
{
public:
	static void AssignLOD0MaterialToMinLODSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComponent);
	static void AssignLOD0MaterialToMinLODStaticMesh(class UStaticMeshComponent* MeshComponent);
	static void AssignLOD0MaterialToMinLODStaticMeshBySlotName(class UStaticMeshComponent* MeshComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionMonsterTruckUtility">();
	}
	static class UUnionMonsterTruckUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionMonsterTruckUtility>();
	}
};
static_assert(alignof(UUnionMonsterTruckUtility) == 0x000008, "Wrong alignment on UUnionMonsterTruckUtility");
static_assert(sizeof(UUnionMonsterTruckUtility) == 0x000028, "Wrong size on UUnionMonsterTruckUtility");

// Class UNION.ChallengeGaugeBGRootWidget
// 0x0028 (0x0308 - 0x02E0)
class UChallengeGaugeBGRootWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x28];                                     // 0x02E0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeGaugeBGRootWidget">();
	}
	static class UChallengeGaugeBGRootWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeGaugeBGRootWidget>();
	}
};
static_assert(alignof(UChallengeGaugeBGRootWidget) == 0x000008, "Wrong alignment on UChallengeGaugeBGRootWidget");
static_assert(sizeof(UChallengeGaugeBGRootWidget) == 0x000308, "Wrong size on UChallengeGaugeBGRootWidget");

// Class UNION.ChallengeGaugeBGWidget
// 0x0030 (0x0310 - 0x02E0)
class UChallengeGaugeBGWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x18];                                     // 0x02E0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Gauge_BG_Loop;                                     // 0x02F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Gauge_BG_Change_In;                                // 0x0300(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Gauge_BG_Change_Out;                               // 0x0308(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnAnimationFinished_ChangeIn();
	void OnAnimationFinished_ChangeOut();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeGaugeBGWidget">();
	}
	static class UChallengeGaugeBGWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeGaugeBGWidget>();
	}
};
static_assert(alignof(UChallengeGaugeBGWidget) == 0x000008, "Wrong alignment on UChallengeGaugeBGWidget");
static_assert(sizeof(UChallengeGaugeBGWidget) == 0x000310, "Wrong size on UChallengeGaugeBGWidget");
static_assert(offsetof(UChallengeGaugeBGWidget, Gauge_BG_Loop) == 0x0002F8, "Member 'UChallengeGaugeBGWidget::Gauge_BG_Loop' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeBGWidget, Gauge_BG_Change_In) == 0x000300, "Member 'UChallengeGaugeBGWidget::Gauge_BG_Change_In' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeBGWidget, Gauge_BG_Change_Out) == 0x000308, "Member 'UChallengeGaugeBGWidget::Gauge_BG_Change_Out' has a wrong offset!");

// Class UNION.FriendListMainWidget
// 0x0248 (0x0570 - 0x0328)
class UFriendListMainWidget : public UUnionUIInputWidget
{
public:
	TMulticastInlineDelegate<void(bool PlayCloseSound)> DisplayEndDelegate;                          // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              LobbyIdGetDelegate;                                // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLobbyId& TargetLobbyId)> JoinLobbyByLobbyIdSearchDelegate; // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& TargetShortLobbyId)> LobbyIdSearchDecideDelegate; // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& TargetUserId)> LobbyInvitaionDecideDelegate;  // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULobbyJoinInfo* TargetLobbyJoinInfo)> LobbyInvitationAcceptDelegate; // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InIconId, int32 InBgColorId, bool bInIconSelect)> PlayerIconSelectStartDelegate; // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InFairPlayPoint, bool bInBan, const class FString& InPenaltyEndTime)> FairPlayPointDisplayStartDelegate; // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FFriendListPlayerInfo& InListPlayerInfo)> RacerInfoDisplayStartDelegate; // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         CommonPlayerIconId;                                // 0x03B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommonPlayerIconBgColorId;                         // 0x03BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultPlayerIconBgColorId;                        // 0x03C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFriendListWidgetDataAsset> DataAsset;                                      // 0x03C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              PlayerIconDataTable;                               // 0x03F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              PlayerIconBgColorDataTable;                        // 0x0418(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugListDisplay;                                  // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_441[0x3];                                      // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ListJumpCnt;                                       // 0x0444(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AUnionCrossPlayResolveWindowManager> CrossPlayResolveUIManagerClass;           // 0x0448(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AUnionCrossPlayResolveWindowManager*    m_CrossPlayResolveUIManager;                       // 0x0450(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFriendListWidgetDataAsset*             LoadDataAsset;                                     // 0x0458(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             LoadPlayerIconDataTable;                           // 0x0460(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             LoadPlayerIconBgColorDataTable;                    // 0x0468(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_470[0x90];                                     // 0x0470(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIPopupWindowBase*                WaitWindow;                                        // 0x0500(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIPopupWindowBase*                InvitationWarningWindow;                           // 0x0508(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIPopupWindowBase*                ErrorPopupWindow;                                  // 0x0510(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIPopupWindowBase*                OfflineAnnounceWindow;                             // 0x0518(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIPopupWindowBase*                CheckGotoOnlineSequenceWindow;                     // 0x0520(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_528[0x48];                                     // 0x0528(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeCategory(EFriendListCategory InCategory, bool bInUpdateCheckData);
	void ChangeCategoryDisplay(EFriendListCategory InCategory, bool bInDataCommunicationDisplay);
	bool CheckGetCurrentLobbyId();
	bool CheckLobbyInvitation(const class FString& InTargetProductUserId, EFriendListErrorType* OutErrorType);
	bool CheckLobbyJoinAttention();
	bool CheckLoginComplete();
	bool CheckPFProfileEnable(ECrossplayPlatform InTargetPlatform);
	bool CheckPlayerListDisplay(const struct FFriendListPlayerInfo& InTargetPlayerInfo);
	bool CheckRequestLobbyId();
	bool CheckSubCommandSelect(EFriendListCommandType InCommandType, const struct FFriendListPlayerInfo& InListPlayerInfo);
	bool CheckValidLobbyInvitationExist();
	void ClearContentsWidgetListPlayerInfo(EFriendListCategory InCategory);
	void CreateCheckGotoOnlineSequenceWindow();
	void CreateErrorPopupWindow(const class FText& InErrorTitle, const class FText& InErrorMessage, bool bInDisplayEnd);
	void CreateInvitationWarningWindow();
	void CreateOfflineAnnounceWindow();
	void CreateStartDisplayErrorPopupWindow();
	void CreateWaitWindow();
	void DestroyConfirmAnimationWidget();
	void DestroyWaitWindow();
	bool EndPlayerIconListSelect(int32 InSelectId, bool bInCancel);
	bool GetConfirmWidgetData(EFriendListCommandType InCommandType, struct FFriendListConfirmWidgetData* OutConfirmWidgetData);
	bool GetContentsWidgetData(EFriendListCategory InCategory, struct FFriendListContentsWidgetData* OutContentsWidgetData);
	EFriendListCategory GetCurrentCategory();
	bool GetDisplayEnd();
	bool GetErrorMessageData(EFriendListErrorType InErrorMessageType, class FText* OutErrorMessageData);
	bool GetErrorMessageDataByCommandResult(EFriendListCommandType InCommandType, int32 InResCode, class FText* OutErrorMessageData);
	bool GetExecutionRequest();
	bool GetInLobbySequence();
	bool GetInputEnable();
	bool GetJoinedLobbyId(TArray<struct FLobbyId>* OutLobbyId);
	void GetListPlayerInfoByLobyInvitationInfo(const class ULobbyJoinInfo* InLobbyInfo, struct FFriendListPlayerInfo* OutListPlayerInfo);
	void GetListPlayerInfoBySearchData(const struct FCommon_UserSearchData& InSearchData, const EFriendListType InListType, struct FFriendListPlayerInfo* OutListPlayerInfo);
	bool GetLobbyInvitationAcceptEnable();
	class ULobbyJoinInfo* GetLobbyInvitationInfoByLobbyId(const struct FLobbyId& InTargetLobbyId);
	bool GetLobbyInvitationRejectEnable();
	bool GetLobbyInvitationSendEnable();
	EFriendListCategory GetNextCategory();
	EFriendListCategory GetNextMoveCategory(bool bInPlus);
	bool GetOnlineSettingByType(EFriendListOnlineSettingType InOnlineSettingType);
	bool GetOnlineSettingData(EFriendListType InFriendListType, TArray<struct FFriendListOnlineSettingData>* OutOnlineSettingData);
	EFriendListCategory GetParentCategory(EFriendListCategory InCategory);
	bool GetResultWidgetData(EFriendListCommandType InCommandType, struct FFriendListResultWidgetData* OutResultWidgetData);
	bool GetShowErrorWindow();
	bool GetSubMenuText(EFriendListCommandType InCommandType, class FText* OutSubMenuText);
	bool GetSubMenuWidgetData(EFriendListType InListType, struct FFriendListSubMenuWidgetData* OutSubMenuWidgetData, TArray<class FText>* OutSubMenuText);
	int32 GetZOrder();
	void OnBlockPlayerAddComplete(EBlockPlayerErrorCode ErrorCode, const class FString& ProductUserId);
	void OnBlockPlayerAddDataSaveComplete(ESaveDataStatus Status);
	void OnBlockPlayerRemoveDataSaveComplete(ESaveDataStatus Status);
	void OnBlockPlayerSearchComplete(bool bWasSuccessful, const TArray<struct FCommon_UserSearchData>& SearchDatas, EResponseCodeAbstract ResCodeAbstract);
	void OnDestroyCheckGotoOnlineSequenceWindow(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnDestroyInvitationWarningWindow(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnDestroyOfflineAnnounceWindow(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnErrorPopupWindowClose(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnErrorPopupWindowEnd();
	void OnExternalIdMappingsComplete(bool bWasSuccessful, const TArray<class FString>& ExternalIds, const TArray<class FString>& ConvertedIds);
	void OnFriendAcceptComplete(bool bWasSuccessful, int32 ErrorCode);
	void OnFriendApplyCancelComplete(bool bWasSuccessful, int32 ErrorCode);
	void OnFriendApplyComplete(bool bWasSuccessful, int32 ErrorCode);
	void OnFriendApplyFromSearchComplete(bool bWasSuccessful, int32 ErrorCode);
	void OnFriendCancelComplete(bool bWasSuccessful, int32 ErrorCode);
	void OnFriendListCommandComplete(EFriendListCommandType InCommandType, bool bWasSuccessful, int32 ErrorCode);
	void OnFriendListCommandSuccess(EFriendListCommandType InCommandType);
	void OnFriendRejectComplete(bool bWasSuccessful, int32 ErrorCode);
	void OnGetFriendListComplete(bool bWasSuccessful, const struct FFriendGetFriendListResponse& list);
	void OnInvitationWarningWindowEnd();
	void OnLobbyIdSearchComplete(bool bInSuccessful, const TArray<struct FLobbyId>& InLobbyId, const class FString& InOwnerUserId, ELobbyType InLobbyType);
	void OnLobbyIdSearchSuccess(const TArray<struct FCommon_UserSearchData>& InUserSearchData, const TArray<struct FLobbyId>& InLobbyIdData, ELobbyType InLobbyType);
	void OnLobbyIdUserSearchComplete(bool bWasSuccessful, const TArray<struct FCommon_UserSearchData>& SearchDatas, EResponseCodeAbstract ResCodeAbstract);
	void OnLobbyInvitationByPlatformComplete(bool bSuccessful, int32 LocalUserNum);
	void OnLobbyInvitationComplete(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnLobbyInvitationInfoComplete(bool bWasSuccessful, int32 ErrorCode);
	void OnLobbyInvitationPlayerCheckPFFriend(bool bSuccessGetUserSearch);
	void OnLobbyInvitationPlayerCheckPFFriendComplete(bool InShowPlayerInfo, bool bSuccessGetUserSearch);
	void OnLobbyInvitationPlayerInfoComplete(bool bWasSuccessful, const TArray<struct FCommon_UserSearchData>& SearchDatas, EResponseCodeAbstract ResCodeAbstract);
	void OnLobbyInvitationRejectComplete(bool bWasSuccessful, const struct FLobbyOperationResult& Result);
	void OnOpenInOfflineSequence();
	void OnPFFriendReadComplete(bool bWasSuccessful);
	void OnPFFriendSearchComplete(bool bWasSuccessful, const TArray<struct FCommon_UserSearchData>& SearchDatas, EResponseCodeAbstract ResCodeAbstract);
	void OnRecentPlayerStatsComplete(bool bWasSuccessful, const TArray<struct FCommon_UserSearchData>& SearchDatas, EResponseCodeAbstract ResCodeAbstract);
	void OnRequestLobbyIdGetEnd(bool bInSuccess);
	void OnRequestOnlineSettingComplete();
	void OnShowPfProfileErrorWindowEnd();
	void OnSubWidgetDisplayEnd(EFriendListCommandType PrevWidgetCommandType);
	void OnUserSearchComplete(bool bWasSuccessful, const TArray<struct FCommon_UserSearchData>& SearchDatas, EResponseCodeAbstract ResCodeAbstract);
	void OnUserSearchSuccess(const TArray<struct FCommon_UserSearchData>& InUserSearchData);
	void OnWaitWindowEnd();
	void ReflectOnlineSettingData();
	void RegisterMenuInputReceiveObject();
	void RequestBlockPlayerAdd(const class FString& InTargetProductUserId);
	void RequestBlockPlayerList();
	void RequestBlockPlayerRemove(const class FString& InTargetProductUserId);
	void RequestFriendAccept(const class FString& InTargetId);
	bool RequestFriendApply(const class FString& InTargetUserId, const class FString& InTargetProductUserId, const bool bInTargetAcceptApply);
	void RequestFriendApplyBySearchData(const TArray<struct FCommon_UserSearchData>& InUserSearchData);
	void RequestFriendApplyCancel(const class FString& InTargetId);
	void RequestFriendCancel(const class FString& InTargetId);
	void RequestFriendReject(const class FString& InTargetId);
	void RequestJoinLobbyByLobbyIdSearch(const struct FLobbyId& InTargetLobbyId);
	void RequestLobbyIdGet();
	void RequestLobbyIdSearch(const class FString& InTargetShortLobbyId);
	bool RequestLobbyInvitation(const class FString& InTargetUserId, const class FString& InTargetProductUserId, const class FString& InTargetPlatformUserId, ECrossplayPlatform InTargetCrossplayPlatform);
	void RequestLobbyInvitationAccept(const struct FLobbyId& InTargetLobbyId);
	bool RequestLobbyInvitationByPlatform(const struct FUniqueNetIdRepl& TargetUserPlatformId);
	void RequestLobbyInvitationReject(const struct FLobbyId& InTargetLobbyId);
	bool RequestOnlineSettingSave(EFriendListCategory InNextCategory);
	EPFProfileShowResult RequestPFProfileDisplay(const class FString& InPlatformUserId);
	void RequestRecentPlayerList();
	void RequestUserSearch(const class FString& TargetDisplayCode);
	void ResetPopupWindowCloseEvent();
	void SetButtonControlEnableCurrentWidget(bool bInEnanle);
	void SetCategoryNewIconVisible(EFriendListCategory InCategory, bool bInVisible);
	void SetCurrentCategory(EFriendListCategory InCategory);
	void SetDisplayEnd(bool bInEnable);
	void SetInputEnable(bool bInEnable);
	void SetMyListPlayerInfo(const struct FFriendListPlayerInfo& InListPlayerInfo);
	void SetMyPlayerEmpty();
	void SetMyPlayerIcon(const TSoftObjectPtr<class UTexture2D>& InIconTexture, const struct FLinearColor& InBgColor);
	void SetNextCategory(EFriendListCategory InCategory);
	void SetOnlineSettingByType(EFriendListOnlineSettingType InOnlineSettingType, bool bInValue);
	void SetScrollBoxVisibility(ESlateVisibility Param);
	void Setup(int32 InLocalUserNumber, EFriendListCategory InInitialCategory, int32 InZOrder, bool bInLobbySequence, bool bInLobbyInvitationSendEnable, bool bInLobbyInvitationAcceptEnable, bool bInLobbyInvitationRejectEnable);
	void SetWidgetFocus(class APlayerController* PlayerController);
	void StartFairPlayPointDisplay();
	void StartPlayerIconListSelect();
	void StartRacerInfoDisplay(const struct FFriendListPlayerInfo& InListPlayerInfo);
	void UnregisterMenuInputReceiveObject();
	void UpdateCategoryNewIcon();
	void UpdateFriendList(const TArray<struct FFriendListPlayerInfo>& ListPlayerInfo, bool InDataError);
	void UpdateLobbyIdDisplay(const class FString& InShortLobbyId, bool bInSuccess);
	void UpdateOnlineSettingList(const TArray<struct FFriendListOnlineSettingData>& InOnlineSettingData, bool InDataError);
	void UpdatePFFriendList(const TArray<class FString>& DisplayNameArray);
	void UpdateRecentPlayerList(const TArray<struct FFriendListPlayerInfo>& ListPlayerInfo, bool InDataError);

	class UOptionConfigSaveGame* GetOptionConfigData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendListMainWidget">();
	}
	static class UFriendListMainWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendListMainWidget>();
	}
};
static_assert(alignof(UFriendListMainWidget) == 0x000008, "Wrong alignment on UFriendListMainWidget");
static_assert(sizeof(UFriendListMainWidget) == 0x000570, "Wrong size on UFriendListMainWidget");
static_assert(offsetof(UFriendListMainWidget, DisplayEndDelegate) == 0x000328, "Member 'UFriendListMainWidget::DisplayEndDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, LobbyIdGetDelegate) == 0x000338, "Member 'UFriendListMainWidget::LobbyIdGetDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, JoinLobbyByLobbyIdSearchDelegate) == 0x000348, "Member 'UFriendListMainWidget::JoinLobbyByLobbyIdSearchDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, LobbyIdSearchDecideDelegate) == 0x000358, "Member 'UFriendListMainWidget::LobbyIdSearchDecideDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, LobbyInvitaionDecideDelegate) == 0x000368, "Member 'UFriendListMainWidget::LobbyInvitaionDecideDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, LobbyInvitationAcceptDelegate) == 0x000378, "Member 'UFriendListMainWidget::LobbyInvitationAcceptDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, PlayerIconSelectStartDelegate) == 0x000388, "Member 'UFriendListMainWidget::PlayerIconSelectStartDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, FairPlayPointDisplayStartDelegate) == 0x000398, "Member 'UFriendListMainWidget::FairPlayPointDisplayStartDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, RacerInfoDisplayStartDelegate) == 0x0003A8, "Member 'UFriendListMainWidget::RacerInfoDisplayStartDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, CommonPlayerIconId) == 0x0003B8, "Member 'UFriendListMainWidget::CommonPlayerIconId' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, CommonPlayerIconBgColorId) == 0x0003BC, "Member 'UFriendListMainWidget::CommonPlayerIconBgColorId' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, DefaultPlayerIconBgColorId) == 0x0003C0, "Member 'UFriendListMainWidget::DefaultPlayerIconBgColorId' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, DataAsset) == 0x0003C8, "Member 'UFriendListMainWidget::DataAsset' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, PlayerIconDataTable) == 0x0003F0, "Member 'UFriendListMainWidget::PlayerIconDataTable' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, PlayerIconBgColorDataTable) == 0x000418, "Member 'UFriendListMainWidget::PlayerIconBgColorDataTable' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, DebugListDisplay) == 0x000440, "Member 'UFriendListMainWidget::DebugListDisplay' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, ListJumpCnt) == 0x000444, "Member 'UFriendListMainWidget::ListJumpCnt' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, CrossPlayResolveUIManagerClass) == 0x000448, "Member 'UFriendListMainWidget::CrossPlayResolveUIManagerClass' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, m_CrossPlayResolveUIManager) == 0x000450, "Member 'UFriendListMainWidget::m_CrossPlayResolveUIManager' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, LoadDataAsset) == 0x000458, "Member 'UFriendListMainWidget::LoadDataAsset' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, LoadPlayerIconDataTable) == 0x000460, "Member 'UFriendListMainWidget::LoadPlayerIconDataTable' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, LoadPlayerIconBgColorDataTable) == 0x000468, "Member 'UFriendListMainWidget::LoadPlayerIconBgColorDataTable' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, WaitWindow) == 0x000500, "Member 'UFriendListMainWidget::WaitWindow' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, InvitationWarningWindow) == 0x000508, "Member 'UFriendListMainWidget::InvitationWarningWindow' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, ErrorPopupWindow) == 0x000510, "Member 'UFriendListMainWidget::ErrorPopupWindow' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, OfflineAnnounceWindow) == 0x000518, "Member 'UFriendListMainWidget::OfflineAnnounceWindow' has a wrong offset!");
static_assert(offsetof(UFriendListMainWidget, CheckGotoOnlineSequenceWindow) == 0x000520, "Member 'UFriendListMainWidget::CheckGotoOnlineSequenceWindow' has a wrong offset!");

// Class UNION.ChallengeGaugeChaoWidget
// 0x00A0 (0x0380 - 0x02E0)
class UChallengeGaugeChaoWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x18];                                     // 0x02E0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _WaitCycleTime;                                    // 0x02F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _RestCycleTime;                                    // 0x02FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _PositionXMax;                                     // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_304[0x14];                                     // 0x0304(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       In;                                                // 0x0318(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Out;                                               // 0x0320(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Move_Loop;                                         // 0x0328(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Wait_Loop;                                         // 0x0330(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Wait_To_Rest;                                      // 0x0338(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Rest_Loop;                                         // 0x0340(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Rest_To_Wait;                                      // 0x0348(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Get_S_In;                                          // 0x0350(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Get_S_Loop;                                        // 0x0358(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Get_L_In;                                          // 0x0360(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Get_L_Loop;                                        // 0x0368(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Change_In;                                         // 0x0370(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Change_Out;                                        // 0x0378(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnAnimationFinished_Get_L();
	void OnAnimationFinished_Get_S();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeGaugeChaoWidget">();
	}
	static class UChallengeGaugeChaoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeGaugeChaoWidget>();
	}
};
static_assert(alignof(UChallengeGaugeChaoWidget) == 0x000008, "Wrong alignment on UChallengeGaugeChaoWidget");
static_assert(sizeof(UChallengeGaugeChaoWidget) == 0x000380, "Wrong size on UChallengeGaugeChaoWidget");
static_assert(offsetof(UChallengeGaugeChaoWidget, _WaitCycleTime) == 0x0002F8, "Member 'UChallengeGaugeChaoWidget::_WaitCycleTime' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, _RestCycleTime) == 0x0002FC, "Member 'UChallengeGaugeChaoWidget::_RestCycleTime' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, _PositionXMax) == 0x000300, "Member 'UChallengeGaugeChaoWidget::_PositionXMax' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, In) == 0x000318, "Member 'UChallengeGaugeChaoWidget::In' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, Out) == 0x000320, "Member 'UChallengeGaugeChaoWidget::Out' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, Move_Loop) == 0x000328, "Member 'UChallengeGaugeChaoWidget::Move_Loop' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, Wait_Loop) == 0x000330, "Member 'UChallengeGaugeChaoWidget::Wait_Loop' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, Wait_To_Rest) == 0x000338, "Member 'UChallengeGaugeChaoWidget::Wait_To_Rest' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, Rest_Loop) == 0x000340, "Member 'UChallengeGaugeChaoWidget::Rest_Loop' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, Rest_To_Wait) == 0x000348, "Member 'UChallengeGaugeChaoWidget::Rest_To_Wait' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, Get_S_In) == 0x000350, "Member 'UChallengeGaugeChaoWidget::Get_S_In' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, Get_S_Loop) == 0x000358, "Member 'UChallengeGaugeChaoWidget::Get_S_Loop' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, Get_L_In) == 0x000360, "Member 'UChallengeGaugeChaoWidget::Get_L_In' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, Get_L_Loop) == 0x000368, "Member 'UChallengeGaugeChaoWidget::Get_L_Loop' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, Change_In) == 0x000370, "Member 'UChallengeGaugeChaoWidget::Change_In' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeChaoWidget, Change_Out) == 0x000378, "Member 'UChallengeGaugeChaoWidget::Change_Out' has a wrong offset!");

// Class UNION.MenuSequenceSubStateBase
// 0x0030 (0x0128 - 0x00F8)
class UMenuSequenceSubStateBase : public UHierarchicalStateMachineStateComponent
{
public:
	EMenuSequenceSubState                         DefaultMenuState;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EMenuSequenceSubState State)> OnBackStateEvent;                    // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EMenuSequenceSubState State)> OnExitStateEvent;                    // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class AActor*                                 OwnerSequence;                                     // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetNextMenuSequenceState(EMenuSequenceMainState InState);
	void SetNextMenuSequenceSubState(EMenuSequenceSubState InState);

	class AActor* GetOwnerSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuSequenceSubStateBase">();
	}
	static class UMenuSequenceSubStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuSequenceSubStateBase>();
	}
};
static_assert(alignof(UMenuSequenceSubStateBase) == 0x000008, "Wrong alignment on UMenuSequenceSubStateBase");
static_assert(sizeof(UMenuSequenceSubStateBase) == 0x000128, "Wrong size on UMenuSequenceSubStateBase");
static_assert(offsetof(UMenuSequenceSubStateBase, DefaultMenuState) == 0x0000F8, "Member 'UMenuSequenceSubStateBase::DefaultMenuState' has a wrong offset!");
static_assert(offsetof(UMenuSequenceSubStateBase, OnBackStateEvent) == 0x000100, "Member 'UMenuSequenceSubStateBase::OnBackStateEvent' has a wrong offset!");
static_assert(offsetof(UMenuSequenceSubStateBase, OnExitStateEvent) == 0x000110, "Member 'UMenuSequenceSubStateBase::OnExitStateEvent' has a wrong offset!");
static_assert(offsetof(UMenuSequenceSubStateBase, OwnerSequence) == 0x000120, "Member 'UMenuSequenceSubStateBase::OwnerSequence' has a wrong offset!");

// Class UNION.TimeTrialReadyState
// 0x0008 (0x0130 - 0x0128)
class UTimeTrialReadyState : public UMenuSequenceSubStateBase
{
public:
	EMenuSequenceSubState                         BackMenuState;                                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBackMenuState(const EMenuSequenceSubState InState);

	EMenuSequenceSubState GetBackMenuState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeTrialReadyState">();
	}
	static class UTimeTrialReadyState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeTrialReadyState>();
	}
};
static_assert(alignof(UTimeTrialReadyState) == 0x000008, "Wrong alignment on UTimeTrialReadyState");
static_assert(sizeof(UTimeTrialReadyState) == 0x000130, "Wrong size on UTimeTrialReadyState");
static_assert(offsetof(UTimeTrialReadyState, BackMenuState) == 0x000128, "Member 'UTimeTrialReadyState::BackMenuState' has a wrong offset!");

// Class UNION.ChallengeGaugeCompleteWidget
// 0x0030 (0x0310 - 0x02E0)
class UChallengeGaugeCompleteWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x18];                                     // 0x02E0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Complete_In;                                       // 0x02F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Complete_Loop;                                     // 0x0300(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Complete_Out;                                      // 0x0308(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnAnimationFinished_In();
	void OnAnimationFinished_Out();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeGaugeCompleteWidget">();
	}
	static class UChallengeGaugeCompleteWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeGaugeCompleteWidget>();
	}
};
static_assert(alignof(UChallengeGaugeCompleteWidget) == 0x000008, "Wrong alignment on UChallengeGaugeCompleteWidget");
static_assert(sizeof(UChallengeGaugeCompleteWidget) == 0x000310, "Wrong size on UChallengeGaugeCompleteWidget");
static_assert(offsetof(UChallengeGaugeCompleteWidget, Complete_In) == 0x0002F8, "Member 'UChallengeGaugeCompleteWidget::Complete_In' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeCompleteWidget, Complete_Loop) == 0x000300, "Member 'UChallengeGaugeCompleteWidget::Complete_Loop' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeCompleteWidget, Complete_Out) == 0x000308, "Member 'UChallengeGaugeCompleteWidget::Complete_Out' has a wrong offset!");

// Class UNION.RaceResultSequenceStateBase
// 0x0010 (0x0108 - 0x00F8)
class URaceResultSequenceStateBase : public UHierarchicalStateMachineStateComponent
{
public:
	ERaceResultSequenceState                      DefaultMenuState;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARaceResultSequence*                    OwnerRaceResultSequence;                           // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetNextRaceResultSequenceState(ERaceResultSequenceState InState);

	class ARaceResultSequence* GetOwnerRaceResultSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceResultSequenceStateBase">();
	}
	static class URaceResultSequenceStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceResultSequenceStateBase>();
	}
};
static_assert(alignof(URaceResultSequenceStateBase) == 0x000008, "Wrong alignment on URaceResultSequenceStateBase");
static_assert(sizeof(URaceResultSequenceStateBase) == 0x000108, "Wrong size on URaceResultSequenceStateBase");
static_assert(offsetof(URaceResultSequenceStateBase, DefaultMenuState) == 0x0000F8, "Member 'URaceResultSequenceStateBase::DefaultMenuState' has a wrong offset!");
static_assert(offsetof(URaceResultSequenceStateBase, OwnerRaceResultSequence) == 0x000100, "Member 'URaceResultSequenceStateBase::OwnerRaceResultSequence' has a wrong offset!");

// Class UNION.RaceResultSequenceStateGhostEnd
// 0x0000 (0x0108 - 0x0108)
class URaceResultSequenceStateGhostEnd : public URaceResultSequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceResultSequenceStateGhostEnd">();
	}
	static class URaceResultSequenceStateGhostEnd* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceResultSequenceStateGhostEnd>();
	}
};
static_assert(alignof(URaceResultSequenceStateGhostEnd) == 0x000008, "Wrong alignment on URaceResultSequenceStateGhostEnd");
static_assert(sizeof(URaceResultSequenceStateGhostEnd) == 0x000108, "Wrong size on URaceResultSequenceStateGhostEnd");

// Class UNION.ChallengeGaugePointWidget
// 0x0040 (0x0320 - 0x02E0)
class UChallengeGaugePointWidget final : public UUserWidget
{
public:
	EChallengeGuagePointStyle                     _DefaultStyle;                                     // 0x02E0(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E1[0x1F];                                     // 0x02E1(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Gauge_Point_In;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Gauge_Point_Loop;                                  // 0x0308(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Gauge_Point_Out;                                   // 0x0310(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Gauge_Point_Get;                                   // 0x0318(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeGaugePointWidget">();
	}
	static class UChallengeGaugePointWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeGaugePointWidget>();
	}
};
static_assert(alignof(UChallengeGaugePointWidget) == 0x000008, "Wrong alignment on UChallengeGaugePointWidget");
static_assert(sizeof(UChallengeGaugePointWidget) == 0x000320, "Wrong size on UChallengeGaugePointWidget");
static_assert(offsetof(UChallengeGaugePointWidget, _DefaultStyle) == 0x0002E0, "Member 'UChallengeGaugePointWidget::_DefaultStyle' has a wrong offset!");
static_assert(offsetof(UChallengeGaugePointWidget, Gauge_Point_In) == 0x000300, "Member 'UChallengeGaugePointWidget::Gauge_Point_In' has a wrong offset!");
static_assert(offsetof(UChallengeGaugePointWidget, Gauge_Point_Loop) == 0x000308, "Member 'UChallengeGaugePointWidget::Gauge_Point_Loop' has a wrong offset!");
static_assert(offsetof(UChallengeGaugePointWidget, Gauge_Point_Out) == 0x000310, "Member 'UChallengeGaugePointWidget::Gauge_Point_Out' has a wrong offset!");
static_assert(offsetof(UChallengeGaugePointWidget, Gauge_Point_Get) == 0x000318, "Member 'UChallengeGaugePointWidget::Gauge_Point_Get' has a wrong offset!");

// Class UNION.ChallengeGaugeWidget
// 0x0128 (0x0408 - 0x02E0)
class UChallengeGaugeWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x48];                                     // 0x02E0(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          SeChaoMove;                                        // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          SeBgChange;                                        // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          SeBgChangeSpecial;                                 // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UChallengeWidgetDataAsset> _DataAsset;                                      // 0x0340(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _ChaoMoveVelocity;                                 // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _SpecialUnlockPopupTitleText;                      // 0x0370(0x0010)(NativeAccessSpecifierPrivate)
	class FText                                   _SpecialUnlockPopupMessageText;                    // 0x0380(0x0010)(NativeAccessSpecifierPrivate)
	class UChallengeGaugeBGRootWidget*            _BGWidget;                                         // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChallengeGaugeCompleteWidget*          _CompleteWidget;                                   // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChallengeGaugeChaoWidget*              _ChaoWidget;                                       // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UChallengeGaugePointWidget*>     _PointWidgets;                                     // 0x03A8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UUnionUIPopupWindowBase*                PopupWindow;                                       // 0x03B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C0[0x30];                                     // 0x03C0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Loop_Gauge;                                        // 0x03F0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Change_To_Complete;                                // 0x03F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Loop_Complete;                                     // 0x0400(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnSpecialUnlockPopupClosed(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeGaugeWidget">();
	}
	static class UChallengeGaugeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeGaugeWidget>();
	}
};
static_assert(alignof(UChallengeGaugeWidget) == 0x000008, "Wrong alignment on UChallengeGaugeWidget");
static_assert(sizeof(UChallengeGaugeWidget) == 0x000408, "Wrong size on UChallengeGaugeWidget");
static_assert(offsetof(UChallengeGaugeWidget, SeChaoMove) == 0x000328, "Member 'UChallengeGaugeWidget::SeChaoMove' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, SeBgChange) == 0x000330, "Member 'UChallengeGaugeWidget::SeBgChange' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, SeBgChangeSpecial) == 0x000338, "Member 'UChallengeGaugeWidget::SeBgChangeSpecial' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, _DataAsset) == 0x000340, "Member 'UChallengeGaugeWidget::_DataAsset' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, _ChaoMoveVelocity) == 0x000368, "Member 'UChallengeGaugeWidget::_ChaoMoveVelocity' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, _SpecialUnlockPopupTitleText) == 0x000370, "Member 'UChallengeGaugeWidget::_SpecialUnlockPopupTitleText' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, _SpecialUnlockPopupMessageText) == 0x000380, "Member 'UChallengeGaugeWidget::_SpecialUnlockPopupMessageText' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, _BGWidget) == 0x000390, "Member 'UChallengeGaugeWidget::_BGWidget' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, _CompleteWidget) == 0x000398, "Member 'UChallengeGaugeWidget::_CompleteWidget' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, _ChaoWidget) == 0x0003A0, "Member 'UChallengeGaugeWidget::_ChaoWidget' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, _PointWidgets) == 0x0003A8, "Member 'UChallengeGaugeWidget::_PointWidgets' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, PopupWindow) == 0x0003B8, "Member 'UChallengeGaugeWidget::PopupWindow' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, Loop_Gauge) == 0x0003F0, "Member 'UChallengeGaugeWidget::Loop_Gauge' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, Change_To_Complete) == 0x0003F8, "Member 'UChallengeGaugeWidget::Change_To_Complete' has a wrong offset!");
static_assert(offsetof(UChallengeGaugeWidget, Loop_Complete) == 0x000400, "Member 'UChallengeGaugeWidget::Loop_Complete' has a wrong offset!");

// Class UNION.DialogueEventManagerBase
// 0x0040 (0x02D0 - 0x0290)
class ADialogueEventManagerBase : public AActor
{
public:
	uint8                                         Pad_290[0x20];                                     // 0x0290(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CubotActor;                                        // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OrbotActor;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADodonpaBase*                           DodonpaActor;                                      // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DisplayActor;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CreateActorObject();
	void DestroyActorObject();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogueEventManagerBase">();
	}
	static class ADialogueEventManagerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADialogueEventManagerBase>();
	}
};
static_assert(alignof(ADialogueEventManagerBase) == 0x000008, "Wrong alignment on ADialogueEventManagerBase");
static_assert(sizeof(ADialogueEventManagerBase) == 0x0002D0, "Wrong size on ADialogueEventManagerBase");
static_assert(offsetof(ADialogueEventManagerBase, CubotActor) == 0x0002B0, "Member 'ADialogueEventManagerBase::CubotActor' has a wrong offset!");
static_assert(offsetof(ADialogueEventManagerBase, OrbotActor) == 0x0002B8, "Member 'ADialogueEventManagerBase::OrbotActor' has a wrong offset!");
static_assert(offsetof(ADialogueEventManagerBase, DodonpaActor) == 0x0002C0, "Member 'ADialogueEventManagerBase::DodonpaActor' has a wrong offset!");
static_assert(offsetof(ADialogueEventManagerBase, DisplayActor) == 0x0002C8, "Member 'ADialogueEventManagerBase::DisplayActor' has a wrong offset!");

// Class UNION.ChallengeListButtonWidget
// 0x00B8 (0x0538 - 0x0480)
class UChallengeListButtonWidget final : public UUnionUIButtonBase
{
public:
	class UButton*                                _MouseButton;                                      // 0x0480(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               _IconMaterial;                                     // 0x0488(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _CompleteIcon;                                     // 0x0490(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPanelWidget*                           _CursorPanel;                                      // 0x0498(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _NewIcon;                                          // 0x04A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetSwitcher*                        _NormalSwitcher;                                   // 0x04A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetSwitcher*                        _CompleteSwitcher;                                 // 0x04B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B8[0x20];                                     // 0x04B8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EChallengeCategory, class UTexture*>     _CategoryTextures;                                 // 0x04D8(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_528[0x10];                                     // 0x0528(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeListButtonWidget">();
	}
	static class UChallengeListButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeListButtonWidget>();
	}
};
static_assert(alignof(UChallengeListButtonWidget) == 0x000008, "Wrong alignment on UChallengeListButtonWidget");
static_assert(sizeof(UChallengeListButtonWidget) == 0x000538, "Wrong size on UChallengeListButtonWidget");
static_assert(offsetof(UChallengeListButtonWidget, _MouseButton) == 0x000480, "Member 'UChallengeListButtonWidget::_MouseButton' has a wrong offset!");
static_assert(offsetof(UChallengeListButtonWidget, _IconMaterial) == 0x000488, "Member 'UChallengeListButtonWidget::_IconMaterial' has a wrong offset!");
static_assert(offsetof(UChallengeListButtonWidget, _CompleteIcon) == 0x000490, "Member 'UChallengeListButtonWidget::_CompleteIcon' has a wrong offset!");
static_assert(offsetof(UChallengeListButtonWidget, _CursorPanel) == 0x000498, "Member 'UChallengeListButtonWidget::_CursorPanel' has a wrong offset!");
static_assert(offsetof(UChallengeListButtonWidget, _NewIcon) == 0x0004A0, "Member 'UChallengeListButtonWidget::_NewIcon' has a wrong offset!");
static_assert(offsetof(UChallengeListButtonWidget, _NormalSwitcher) == 0x0004A8, "Member 'UChallengeListButtonWidget::_NormalSwitcher' has a wrong offset!");
static_assert(offsetof(UChallengeListButtonWidget, _CompleteSwitcher) == 0x0004B0, "Member 'UChallengeListButtonWidget::_CompleteSwitcher' has a wrong offset!");
static_assert(offsetof(UChallengeListButtonWidget, _CategoryTextures) == 0x0004D8, "Member 'UChallengeListButtonWidget::_CategoryTextures' has a wrong offset!");

// Class UNION.ItemPerformanceBase
// 0x01B8 (0x0448 - 0x0290)
class AItemPerformanceBase : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Root;                                              // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        RingRoot;                                          // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   RingChildActorComponent;                           // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      AlertEffect;                                       // 0x02B0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    AlertSound;                                        // 0x02B8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    AvoidedSound;                                      // 0x02C0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimelineComponent*                     RingScaleTimelineComponent;                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RingAlertTime;                                     // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RingShowTime;                                      // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRootRotation;                               // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotationAlwaysUseCourseUP;                        // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DA[0x2];                                      // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttachRacerIndex;                                  // 0x02DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RingScaleCurve;                                    // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float Output)>                 RingScaleUpdateEvent;                              // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             RingScaleFinishedEvent;                            // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAllowAvoidData;                                // 0x0308(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DatatableRowName;                                  // 0x030C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             AvoidDataTable;                                    // 0x0318(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAvoidTargetRingData                   AllowAvoidData;                                    // 0x0320(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAllowAvoid;                                       // 0x0338(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllowAvoidAttackCarSpeed;                          // 0x033C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvoidAttackMoveDistance;                           // 0x0340(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvoidAttackMoveTime;                               // 0x0344(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMachineFormOffset;                             // 0x0348(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EMachineFormOffsetTarget                      MachineFormOffsetTarget;                           // 0x034C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MonsterTruckOffset;                                // 0x0350(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                YellowDrillOffset;                                 // 0x0368(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreSpawned;                                       // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideUseItemUI;                                // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_382[0xC6];                                     // 0x0382(0x00C6)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RingScaleFinished();
	void RingScaleUpdate(float Ratio);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemPerformanceBase">();
	}
	static class AItemPerformanceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AItemPerformanceBase>();
	}
};
static_assert(alignof(AItemPerformanceBase) == 0x000008, "Wrong alignment on AItemPerformanceBase");
static_assert(sizeof(AItemPerformanceBase) == 0x000448, "Wrong size on AItemPerformanceBase");
static_assert(offsetof(AItemPerformanceBase, Root) == 0x000298, "Member 'AItemPerformanceBase::Root' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, RingRoot) == 0x0002A0, "Member 'AItemPerformanceBase::RingRoot' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, RingChildActorComponent) == 0x0002A8, "Member 'AItemPerformanceBase::RingChildActorComponent' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, AlertEffect) == 0x0002B0, "Member 'AItemPerformanceBase::AlertEffect' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, AlertSound) == 0x0002B8, "Member 'AItemPerformanceBase::AlertSound' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, AvoidedSound) == 0x0002C0, "Member 'AItemPerformanceBase::AvoidedSound' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, RingScaleTimelineComponent) == 0x0002C8, "Member 'AItemPerformanceBase::RingScaleTimelineComponent' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, RingAlertTime) == 0x0002D0, "Member 'AItemPerformanceBase::RingAlertTime' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, RingShowTime) == 0x0002D4, "Member 'AItemPerformanceBase::RingShowTime' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, bUpdateRootRotation) == 0x0002D8, "Member 'AItemPerformanceBase::bUpdateRootRotation' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, bRotationAlwaysUseCourseUP) == 0x0002D9, "Member 'AItemPerformanceBase::bRotationAlwaysUseCourseUP' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, AttachRacerIndex) == 0x0002DC, "Member 'AItemPerformanceBase::AttachRacerIndex' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, RingScaleCurve) == 0x0002E0, "Member 'AItemPerformanceBase::RingScaleCurve' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, RingScaleUpdateEvent) == 0x0002E8, "Member 'AItemPerformanceBase::RingScaleUpdateEvent' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, RingScaleFinishedEvent) == 0x0002F8, "Member 'AItemPerformanceBase::RingScaleFinishedEvent' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, bUseAllowAvoidData) == 0x000308, "Member 'AItemPerformanceBase::bUseAllowAvoidData' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, DatatableRowName) == 0x00030C, "Member 'AItemPerformanceBase::DatatableRowName' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, AvoidDataTable) == 0x000318, "Member 'AItemPerformanceBase::AvoidDataTable' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, AllowAvoidData) == 0x000320, "Member 'AItemPerformanceBase::AllowAvoidData' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, bAllowAvoid) == 0x000338, "Member 'AItemPerformanceBase::bAllowAvoid' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, AllowAvoidAttackCarSpeed) == 0x00033C, "Member 'AItemPerformanceBase::AllowAvoidAttackCarSpeed' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, AvoidAttackMoveDistance) == 0x000340, "Member 'AItemPerformanceBase::AvoidAttackMoveDistance' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, AvoidAttackMoveTime) == 0x000344, "Member 'AItemPerformanceBase::AvoidAttackMoveTime' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, bUseMachineFormOffset) == 0x000348, "Member 'AItemPerformanceBase::bUseMachineFormOffset' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, MachineFormOffsetTarget) == 0x00034C, "Member 'AItemPerformanceBase::MachineFormOffsetTarget' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, MonsterTruckOffset) == 0x000350, "Member 'AItemPerformanceBase::MonsterTruckOffset' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, YellowDrillOffset) == 0x000368, "Member 'AItemPerformanceBase::YellowDrillOffset' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, bPreSpawned) == 0x000380, "Member 'AItemPerformanceBase::bPreSpawned' has a wrong offset!");
static_assert(offsetof(AItemPerformanceBase, bOverrideUseItemUI) == 0x000381, "Member 'AItemPerformanceBase::bOverrideUseItemUI' has a wrong offset!");

// Class UNION.ItemAnchorPerformance
// 0x0190 (0x05D8 - 0x0448)
class AItemAnchorPerformance final : public AItemPerformanceBase
{
public:
	class USceneComponent*                        m_anchorMeshRoot;                                  // 0x0448(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              m_staticMeshComponent;                             // 0x0450(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        m_rotateLocator;                                   // 0x0458(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      m_connectedEffect;                                 // 0x0460(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      m_surfaceEffect;                                   // 0x0468(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    m_dragSound;                                       // 0x0470(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_anchorModelLength;                               // 0x0478(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_anchorDropDownConnectionPointOffset;             // 0x0480(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_anchorDropDownConnectionPointOffsetForHoverboard; // 0x0498(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_anchorDropDownConnectionPointOffsetForMonsterTruck; // 0x04B0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_anchorDropDownConnectionPointOffsetForYellowDrill; // 0x04C8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_ringOffsetDefault;                               // 0x04E0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_ringOffsetMonsterTruck;                          // 0x04F8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_ringOffsetYellowDrill;                           // 0x0510(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               m_connectedEffectRotOffset;                        // 0x0528(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         m_roadCheckRaycastLength;                          // 0x0540(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_surfaceEffectActiveHeight;                       // 0x0544(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             SurfaceEffectDataTable;                            // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          m_dragGroundSoundCue;                              // 0x0550(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          m_dragWaterSoundCue;                               // 0x0558(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EUnionSurfaceType, struct FMachineSurfaceData> SurfaceAssets;                               // 0x0560(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_5B0[0x28];                                     // 0x05B0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemAnchorPerformance">();
	}
	static class AItemAnchorPerformance* GetDefaultObj()
	{
		return GetDefaultObjImpl<AItemAnchorPerformance>();
	}
};
static_assert(alignof(AItemAnchorPerformance) == 0x000008, "Wrong alignment on AItemAnchorPerformance");
static_assert(sizeof(AItemAnchorPerformance) == 0x0005D8, "Wrong size on AItemAnchorPerformance");
static_assert(offsetof(AItemAnchorPerformance, m_anchorMeshRoot) == 0x000448, "Member 'AItemAnchorPerformance::m_anchorMeshRoot' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_staticMeshComponent) == 0x000450, "Member 'AItemAnchorPerformance::m_staticMeshComponent' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_rotateLocator) == 0x000458, "Member 'AItemAnchorPerformance::m_rotateLocator' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_connectedEffect) == 0x000460, "Member 'AItemAnchorPerformance::m_connectedEffect' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_surfaceEffect) == 0x000468, "Member 'AItemAnchorPerformance::m_surfaceEffect' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_dragSound) == 0x000470, "Member 'AItemAnchorPerformance::m_dragSound' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_anchorModelLength) == 0x000478, "Member 'AItemAnchorPerformance::m_anchorModelLength' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_anchorDropDownConnectionPointOffset) == 0x000480, "Member 'AItemAnchorPerformance::m_anchorDropDownConnectionPointOffset' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_anchorDropDownConnectionPointOffsetForHoverboard) == 0x000498, "Member 'AItemAnchorPerformance::m_anchorDropDownConnectionPointOffsetForHoverboard' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_anchorDropDownConnectionPointOffsetForMonsterTruck) == 0x0004B0, "Member 'AItemAnchorPerformance::m_anchorDropDownConnectionPointOffsetForMonsterTruck' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_anchorDropDownConnectionPointOffsetForYellowDrill) == 0x0004C8, "Member 'AItemAnchorPerformance::m_anchorDropDownConnectionPointOffsetForYellowDrill' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_ringOffsetDefault) == 0x0004E0, "Member 'AItemAnchorPerformance::m_ringOffsetDefault' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_ringOffsetMonsterTruck) == 0x0004F8, "Member 'AItemAnchorPerformance::m_ringOffsetMonsterTruck' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_ringOffsetYellowDrill) == 0x000510, "Member 'AItemAnchorPerformance::m_ringOffsetYellowDrill' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_connectedEffectRotOffset) == 0x000528, "Member 'AItemAnchorPerformance::m_connectedEffectRotOffset' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_roadCheckRaycastLength) == 0x000540, "Member 'AItemAnchorPerformance::m_roadCheckRaycastLength' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_surfaceEffectActiveHeight) == 0x000544, "Member 'AItemAnchorPerformance::m_surfaceEffectActiveHeight' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, SurfaceEffectDataTable) == 0x000548, "Member 'AItemAnchorPerformance::SurfaceEffectDataTable' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_dragGroundSoundCue) == 0x000550, "Member 'AItemAnchorPerformance::m_dragGroundSoundCue' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, m_dragWaterSoundCue) == 0x000558, "Member 'AItemAnchorPerformance::m_dragWaterSoundCue' has a wrong offset!");
static_assert(offsetof(AItemAnchorPerformance, SurfaceAssets) == 0x000560, "Member 'AItemAnchorPerformance::SurfaceAssets' has a wrong offset!");

// Class UNION.DebugControllerAppletMenu
// 0x00C0 (0x0498 - 0x03D8)
class UDebugControllerAppletMenu final : public UUnionUISceneBase
{
public:
	uint8                                         Pad_3D8[0xC0];                                     // 0x03D8(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMasterUserBack();
	void OnMasterUserPlay();
	void OnUpdatedSlots();

	const class FString GetHeaderMessage() const;
	const class FString GetHelpMessages(int32 SlotIndex) const;
	const class FString GetPlayerName(int32 SlotIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DebugControllerAppletMenu">();
	}
	static class UDebugControllerAppletMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDebugControllerAppletMenu>();
	}
};
static_assert(alignof(UDebugControllerAppletMenu) == 0x000008, "Wrong alignment on UDebugControllerAppletMenu");
static_assert(sizeof(UDebugControllerAppletMenu) == 0x000498, "Wrong size on UDebugControllerAppletMenu");

// Class UNION.TimeTrialGhostSelect
// 0x0068 (0x0440 - 0x03D8)
class UTimeTrialGhostSelect : public UUnionUISceneBase
{
public:
	bool                                          bIsTimeClear;                                      // 0x03D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TargetTimeText;                                    // 0x03E0(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FUserTimeTrialRaceData                 TimeTrialRaceData;                                 // 0x03F0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	bool IsTargetTimeClear(EStageId StageId);
	void SubModeSetup(const EStageId InStageId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeTrialGhostSelect">();
	}
	static class UTimeTrialGhostSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeTrialGhostSelect>();
	}
};
static_assert(alignof(UTimeTrialGhostSelect) == 0x000008, "Wrong alignment on UTimeTrialGhostSelect");
static_assert(sizeof(UTimeTrialGhostSelect) == 0x000440, "Wrong size on UTimeTrialGhostSelect");
static_assert(offsetof(UTimeTrialGhostSelect, bIsTimeClear) == 0x0003D8, "Member 'UTimeTrialGhostSelect::bIsTimeClear' has a wrong offset!");
static_assert(offsetof(UTimeTrialGhostSelect, TargetTimeText) == 0x0003E0, "Member 'UTimeTrialGhostSelect::TargetTimeText' has a wrong offset!");
static_assert(offsetof(UTimeTrialGhostSelect, TimeTrialRaceData) == 0x0003F0, "Member 'UTimeTrialGhostSelect::TimeTrialRaceData' has a wrong offset!");

// Class UNION.ChallengeListPanelWidget
// 0x00B0 (0x0390 - 0x02E0)
class UChallengeListPanelWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x18];                                     // 0x02E0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UChallengeWidgetDataAsset> _DataAsset;                                      // 0x02F8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UChallengeListButtonWidget*>     _Buttons;                                          // 0x0320(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UWidgetSwitcher*                        _PlateSwitcher;                                    // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPanelWidget*                           _ContentPanel;                                     // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _TitleTextBlock;                                   // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionFontScroll*                       _ConditionTextScroll;                              // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUITextBlock*                      _ProgressTextBlock;                                // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _CompleteIconImage;                                // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                _LockPanel;                                        // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_368[0x20];                                     // 0x0368(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          _SECueChallengeChange;                             // 0x0388(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnButtonDecided(class UUnionUIButtonBase* Button);
	class UWidget* OnButtonNavigation(EUINavigation InNavigation);
	class UWidget* OnPanelNavigation(EUINavigation InNavigation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeListPanelWidget">();
	}
	static class UChallengeListPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeListPanelWidget>();
	}
};
static_assert(alignof(UChallengeListPanelWidget) == 0x000008, "Wrong alignment on UChallengeListPanelWidget");
static_assert(sizeof(UChallengeListPanelWidget) == 0x000390, "Wrong size on UChallengeListPanelWidget");
static_assert(offsetof(UChallengeListPanelWidget, _DataAsset) == 0x0002F8, "Member 'UChallengeListPanelWidget::_DataAsset' has a wrong offset!");
static_assert(offsetof(UChallengeListPanelWidget, _Buttons) == 0x000320, "Member 'UChallengeListPanelWidget::_Buttons' has a wrong offset!");
static_assert(offsetof(UChallengeListPanelWidget, _PlateSwitcher) == 0x000330, "Member 'UChallengeListPanelWidget::_PlateSwitcher' has a wrong offset!");
static_assert(offsetof(UChallengeListPanelWidget, _ContentPanel) == 0x000338, "Member 'UChallengeListPanelWidget::_ContentPanel' has a wrong offset!");
static_assert(offsetof(UChallengeListPanelWidget, _TitleTextBlock) == 0x000340, "Member 'UChallengeListPanelWidget::_TitleTextBlock' has a wrong offset!");
static_assert(offsetof(UChallengeListPanelWidget, _ConditionTextScroll) == 0x000348, "Member 'UChallengeListPanelWidget::_ConditionTextScroll' has a wrong offset!");
static_assert(offsetof(UChallengeListPanelWidget, _ProgressTextBlock) == 0x000350, "Member 'UChallengeListPanelWidget::_ProgressTextBlock' has a wrong offset!");
static_assert(offsetof(UChallengeListPanelWidget, _CompleteIconImage) == 0x000358, "Member 'UChallengeListPanelWidget::_CompleteIconImage' has a wrong offset!");
static_assert(offsetof(UChallengeListPanelWidget, _LockPanel) == 0x000360, "Member 'UChallengeListPanelWidget::_LockPanel' has a wrong offset!");
static_assert(offsetof(UChallengeListPanelWidget, _SECueChallengeChange) == 0x000388, "Member 'UChallengeListPanelWidget::_SECueChallengeChange' has a wrong offset!");

// Class UNION.NetLobbyControlComponent
// 0x0070 (0x0110 - 0x00A0)
class UNetLobbyControlComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 ErrorCode, EAppNetErrorCode ErrorCodeEnum, const class FString& ErrorMessage)> NetLobbyControlOnError; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0x50];                                      // 0x00C0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool ConvertRacerNameToLobbyName(class UCommonLobbyMemberContext* MemberContext, class FString* OutName);

	void HandleError(int32 ErrorCode, const class FString& ErrorMessage);
	void InitLobbyContext(int32 LocalUserNum);
	void OnErrorFromLobbyContext(int32 ErrorCode, EAppNetErrorCode ErrorCodeEnum, const class FString& ErrorMessage);
	void OnFinalizeFromOwnerBP();
	void OnInitializeFromOwnerBP();
	void OnLobbyDelete(class ULobbyContextBase* LobbyContext);
	void OnLobbyOperationCompleteSimple(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnLobbyUpdate(class ULobbyContextBase* LobbyContext);
	void OnMemberConnect(class ULobbyContextBase* LobbyContext, class ULobbyMemberContextBase* MemberContext);
	void OnMemberDisconnect(class ULobbyContextBase* LobbyContext, class ULobbyMemberContextBase* MemberContext, bool bWasKicked);
	void OnMemberPromote(class ULobbyContextBase* LobbyContext, class ULobbyMemberContextBase* MemberContext);
	void OnMemberUpdate(class ULobbyContextBase* LobbyContext, class ULobbyMemberContextBase* MemberContext);
	void OnUpdateFromOwnerBP(float DeltaTime);
	bool SetupLocalMemberRaceAttributes(TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);
	void StartMatchmaking(int32 LocalUserNum, TDelegate<void(EGameMatchmakingCompleteStatus Status, const struct FCreateOrConnectLobbyResult& Result)> OnComplete);
	void StartMatchmakingForLobbyMember(class UCommonLobbyContext* LobbyContext, TDelegate<void(EGameMatchmakingCompleteStatus Status, const struct FCreateOrConnectLobbyResult& Result)> OnComplete);

	class UMatchmakingRequestContext* CreateMatchmakingContext(int32 LocalUserNum) const;
	class UCommonLobbyContext* CreatePrimaryLobbyContext(int32 LocalUserNum) const;
	class UCommonLobbyContext* CreatePrimaryLobbyContextByMatchmakingResult(int32 LocalUserNum, const struct FCreateOrConnectLobbyResult& MatchmakingResult) const;
	void GetLobbyPlayerData(int32 PlayerLobbyIndex, struct FLobbyPlayerData* OutLobbyPlayerData, bool* bOutIsOwnPlayer, ECommonLobbyMemberState* OutMemberState) const;
	void GetLocalPlayerData(struct FLobbyPlayerData* OutLobbyPlayerData, bool* bOutIsOwnPlayer, ECommonLobbyMemberState* OutMemberState) const;
	class UCommonLobbyContext* GetPrimaryLobbyContext() const;
	void GetSquadPlayerData(int32 PlayerLobbyIndex, struct FLobbyPlayerData* OutLobbyPlayerData, bool* bOutIsOwnPlayer, ECommonLobbyMemberState* OutMemberState) const;
	bool IsLobbyHostLocalMember() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetLobbyControlComponent">();
	}
	static class UNetLobbyControlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetLobbyControlComponent>();
	}
};
static_assert(alignof(UNetLobbyControlComponent) == 0x000008, "Wrong alignment on UNetLobbyControlComponent");
static_assert(sizeof(UNetLobbyControlComponent) == 0x000110, "Wrong size on UNetLobbyControlComponent");
static_assert(offsetof(UNetLobbyControlComponent, NetLobbyControlOnError) == 0x0000B0, "Member 'UNetLobbyControlComponent::NetLobbyControlOnError' has a wrong offset!");

// Class UNION.RankMatchLobbyControlComponent
// 0x0010 (0x0120 - 0x0110)
class URankMatchLobbyControlComponent final : public UNetLobbyControlComponent
{
public:
	TSubclassOf<class URankMatchLobbyContext>     LobbyContextClass;                                 // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class URankMatchMatchmakingContext> MatchmakingContextClass;                         // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RankMatchLobbyControlComponent">();
	}
	static class URankMatchLobbyControlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URankMatchLobbyControlComponent>();
	}
};
static_assert(alignof(URankMatchLobbyControlComponent) == 0x000008, "Wrong alignment on URankMatchLobbyControlComponent");
static_assert(sizeof(URankMatchLobbyControlComponent) == 0x000120, "Wrong size on URankMatchLobbyControlComponent");
static_assert(offsetof(URankMatchLobbyControlComponent, LobbyContextClass) == 0x000110, "Member 'URankMatchLobbyControlComponent::LobbyContextClass' has a wrong offset!");
static_assert(offsetof(URankMatchLobbyControlComponent, MatchmakingContextClass) == 0x000118, "Member 'URankMatchLobbyControlComponent::MatchmakingContextClass' has a wrong offset!");

// Class UNION.ChallengeListTabButtonWidget
// 0x0078 (0x04F8 - 0x0480)
class UChallengeListTabButtonWidget final : public UUnionUIButtonBase
{
public:
	TSoftObjectPtr<class UChallengeWidgetDataAsset> _DataAsset;                                      // 0x0480(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UButton*                                _Button;                                           // 0x04A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               _IconMaterial;                                     // 0x04B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _CategoryNameTextBlock;                            // 0x04B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _CompleteIcon;                                     // 0x04C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _NewIcon;                                          // 0x04C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D0[0x8];                                      // 0x04D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Tab_Active_Loop;                                   // 0x04D8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Tab_Select_Loop;                                   // 0x04E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Tab_Active_Lock_Loop;                              // 0x04E8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Tab_Select_Lock_Loop;                              // 0x04F0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeListTabButtonWidget">();
	}
	static class UChallengeListTabButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeListTabButtonWidget>();
	}
};
static_assert(alignof(UChallengeListTabButtonWidget) == 0x000008, "Wrong alignment on UChallengeListTabButtonWidget");
static_assert(sizeof(UChallengeListTabButtonWidget) == 0x0004F8, "Wrong size on UChallengeListTabButtonWidget");
static_assert(offsetof(UChallengeListTabButtonWidget, _DataAsset) == 0x000480, "Member 'UChallengeListTabButtonWidget::_DataAsset' has a wrong offset!");
static_assert(offsetof(UChallengeListTabButtonWidget, _Button) == 0x0004A8, "Member 'UChallengeListTabButtonWidget::_Button' has a wrong offset!");
static_assert(offsetof(UChallengeListTabButtonWidget, _IconMaterial) == 0x0004B0, "Member 'UChallengeListTabButtonWidget::_IconMaterial' has a wrong offset!");
static_assert(offsetof(UChallengeListTabButtonWidget, _CategoryNameTextBlock) == 0x0004B8, "Member 'UChallengeListTabButtonWidget::_CategoryNameTextBlock' has a wrong offset!");
static_assert(offsetof(UChallengeListTabButtonWidget, _CompleteIcon) == 0x0004C0, "Member 'UChallengeListTabButtonWidget::_CompleteIcon' has a wrong offset!");
static_assert(offsetof(UChallengeListTabButtonWidget, _NewIcon) == 0x0004C8, "Member 'UChallengeListTabButtonWidget::_NewIcon' has a wrong offset!");
static_assert(offsetof(UChallengeListTabButtonWidget, Tab_Active_Loop) == 0x0004D8, "Member 'UChallengeListTabButtonWidget::Tab_Active_Loop' has a wrong offset!");
static_assert(offsetof(UChallengeListTabButtonWidget, Tab_Select_Loop) == 0x0004E0, "Member 'UChallengeListTabButtonWidget::Tab_Select_Loop' has a wrong offset!");
static_assert(offsetof(UChallengeListTabButtonWidget, Tab_Active_Lock_Loop) == 0x0004E8, "Member 'UChallengeListTabButtonWidget::Tab_Active_Lock_Loop' has a wrong offset!");
static_assert(offsetof(UChallengeListTabButtonWidget, Tab_Select_Lock_Loop) == 0x0004F0, "Member 'UChallengeListTabButtonWidget::Tab_Select_Lock_Loop' has a wrong offset!");

// Class UNION.ChallengeListTabWidget
// 0x0070 (0x0350 - 0x02E0)
class UChallengeListTabWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x18];                                     // 0x02E0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EChallengeCategory, class UChallengeListTabButtonWidget*> _TabButtons;                      // 0x02F8(0x0050)(ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTabButtonDecided(class UUnionUIButtonBase* Button);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeListTabWidget">();
	}
	static class UChallengeListTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeListTabWidget>();
	}
};
static_assert(alignof(UChallengeListTabWidget) == 0x000008, "Wrong alignment on UChallengeListTabWidget");
static_assert(sizeof(UChallengeListTabWidget) == 0x000350, "Wrong size on UChallengeListTabWidget");
static_assert(offsetof(UChallengeListTabWidget, _TabButtons) == 0x0002F8, "Member 'UChallengeListTabWidget::_TabButtons' has a wrong offset!");

// Class UNION.DodonpaEventDisplayWidget
// 0x0000 (0x02E0 - 0x02E0)
class UDodonpaEventDisplayWidget : public UUserWidget
{
public:
	class UWidgetAnimation* PlayAnimationByName(const class FName& AnimationName, float PlaySpeed, int32 NumLoopsToPlay);
	void SetFestaInfoTexture(class UTexture2D* Texture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DodonpaEventDisplayWidget">();
	}
	static class UDodonpaEventDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDodonpaEventDisplayWidget>();
	}
};
static_assert(alignof(UDodonpaEventDisplayWidget) == 0x000008, "Wrong alignment on UDodonpaEventDisplayWidget");
static_assert(sizeof(UDodonpaEventDisplayWidget) == 0x0002E0, "Wrong size on UDodonpaEventDisplayWidget");

// Class UNION.ChallengeNoticeWindow
// 0x0000 (0x02E0 - 0x02E0)
class UChallengeNoticeWindow : public UUserWidget
{
public:
	void SpawnChallengeNotice(int32 ChallengeId, float Time);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeNoticeWindow">();
	}
	static class UChallengeNoticeWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeNoticeWindow>();
	}
};
static_assert(alignof(UChallengeNoticeWindow) == 0x000008, "Wrong alignment on UChallengeNoticeWindow");
static_assert(sizeof(UChallengeNoticeWindow) == 0x0002E0, "Wrong size on UChallengeNoticeWindow");

// Class UNION.ItemSlimePerformance
// 0x00F8 (0x0540 - 0x0448)
class AItemSlimePerformance : public AItemPerformanceBase
{
public:
	uint8                                         Pad_448[0x10];                                     // 0x0448(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      SlimeNiagaraComponent;                             // 0x0458(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      SlimeDestroyedNiagaraComponent;                    // 0x0460(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemStaticBodyComponent*               SlimeStaticBody;                                   // 0x0468(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    SlimeSoundComponent;                               // 0x0470(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VioletVoidAbsorbTargetScale;                       // 0x0478(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            SlimeAbsorbMesh;                                   // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_498[0xA8];                                     // 0x0498(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemSlimePerformance">();
	}
	static class AItemSlimePerformance* GetDefaultObj()
	{
		return GetDefaultObjImpl<AItemSlimePerformance>();
	}
};
static_assert(alignof(AItemSlimePerformance) == 0x000008, "Wrong alignment on AItemSlimePerformance");
static_assert(sizeof(AItemSlimePerformance) == 0x000540, "Wrong size on AItemSlimePerformance");
static_assert(offsetof(AItemSlimePerformance, SlimeNiagaraComponent) == 0x000458, "Member 'AItemSlimePerformance::SlimeNiagaraComponent' has a wrong offset!");
static_assert(offsetof(AItemSlimePerformance, SlimeDestroyedNiagaraComponent) == 0x000460, "Member 'AItemSlimePerformance::SlimeDestroyedNiagaraComponent' has a wrong offset!");
static_assert(offsetof(AItemSlimePerformance, SlimeStaticBody) == 0x000468, "Member 'AItemSlimePerformance::SlimeStaticBody' has a wrong offset!");
static_assert(offsetof(AItemSlimePerformance, SlimeSoundComponent) == 0x000470, "Member 'AItemSlimePerformance::SlimeSoundComponent' has a wrong offset!");
static_assert(offsetof(AItemSlimePerformance, VioletVoidAbsorbTargetScale) == 0x000478, "Member 'AItemSlimePerformance::VioletVoidAbsorbTargetScale' has a wrong offset!");
static_assert(offsetof(AItemSlimePerformance, SlimeAbsorbMesh) == 0x000490, "Member 'AItemSlimePerformance::SlimeAbsorbMesh' has a wrong offset!");

// Class UNION.ChallengeSequence
// 0x0080 (0x01A8 - 0x0128)
class UChallengeSequence final : public UMenuSequenceSubStateBase
{
public:
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _ChallengeWidgetClass;                             // 0x0138(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   _BGWidgetClass;                                    // 0x0160(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UChallengeWidget*                       _ChallengeWidget;                                  // 0x0190(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            _BGWidget;                                         // 0x0198(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A0[0x8];                                      // 0x01A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeSequence">();
	}
	static class UChallengeSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeSequence>();
	}
};
static_assert(alignof(UChallengeSequence) == 0x000008, "Wrong alignment on UChallengeSequence");
static_assert(sizeof(UChallengeSequence) == 0x0001A8, "Wrong size on UChallengeSequence");
static_assert(offsetof(UChallengeSequence, OnBackEvent) == 0x000128, "Member 'UChallengeSequence::OnBackEvent' has a wrong offset!");
static_assert(offsetof(UChallengeSequence, _ChallengeWidgetClass) == 0x000138, "Member 'UChallengeSequence::_ChallengeWidgetClass' has a wrong offset!");
static_assert(offsetof(UChallengeSequence, _BGWidgetClass) == 0x000160, "Member 'UChallengeSequence::_BGWidgetClass' has a wrong offset!");
static_assert(offsetof(UChallengeSequence, _ChallengeWidget) == 0x000190, "Member 'UChallengeSequence::_ChallengeWidget' has a wrong offset!");
static_assert(offsetof(UChallengeSequence, _BGWidget) == 0x000198, "Member 'UChallengeSequence::_BGWidget' has a wrong offset!");

// Class UNION.ChallengeWidget
// 0x0190 (0x0470 - 0x02E0)
class UChallengeWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x20];                                     // 0x02E0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          SeOk;                                              // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          SeBack;                                            // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UChallengeWidgetDataAsset> _DataAsset;                                      // 0x0310(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChallengeListTabWidget*                _ListTabWidget;                                    // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChallengeListPanelWidget*              _ListPanelWidget;                                  // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChallengeListPanelWidget*              _LeftListPanelWidget;                              // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChallengeListPanelWidget*              _RightListPanelWidget;                             // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChallengeGaugeWidget*                  _GaugeWidget;                                      // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URewardGetBase*                         _RewardGetWindowWidget;                            // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UResultDonpaTicket*                     _ResultDonpaTicket;                                // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   _RewardGetWindowWidgetClass;                       // 0x0370(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   _ResultDonpaTicketClass;                           // 0x0398(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URewardGetBase*                         _ActiveRewardGetWindow;                            // 0x03C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UResultDonpaTicket*                     _ActiveResultDonpaTicket;                          // 0x03C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D0[0x68];                                     // 0x03D0(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          _SECueCategoryChange;                              // 0x0438(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_440[0x8];                                      // 0x0440(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Challenge_In;                                      // 0x0448(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Challenge_Loop;                                    // 0x0450(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Challenge_Out;                                     // 0x0458(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Challenge_Left_To_Right;                           // 0x0460(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Challenge_Right_To_Left;                           // 0x0468(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UHintPopupWindow* CreateTipsWindow();
	void InAndPlayGauge(float NewProgress);
	void OnChangeControllerInputType(EAppControllerInputType BeforeType, EAppControllerInputType AfterType);
	void OnDonpaTicketAcceptKeyPressed();
	void OnLRButton(bool bIsRButton);
	void OnRewardGetWindowFinished();
	void OnRewardGetWindowOpened();
	void OnTipsWindowClosed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeWidget">();
	}
	static class UChallengeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeWidget>();
	}
};
static_assert(alignof(UChallengeWidget) == 0x000008, "Wrong alignment on UChallengeWidget");
static_assert(sizeof(UChallengeWidget) == 0x000470, "Wrong size on UChallengeWidget");
static_assert(offsetof(UChallengeWidget, SeOk) == 0x000300, "Member 'UChallengeWidget::SeOk' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, SeBack) == 0x000308, "Member 'UChallengeWidget::SeBack' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _DataAsset) == 0x000310, "Member 'UChallengeWidget::_DataAsset' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _ListTabWidget) == 0x000338, "Member 'UChallengeWidget::_ListTabWidget' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _ListPanelWidget) == 0x000340, "Member 'UChallengeWidget::_ListPanelWidget' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _LeftListPanelWidget) == 0x000348, "Member 'UChallengeWidget::_LeftListPanelWidget' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _RightListPanelWidget) == 0x000350, "Member 'UChallengeWidget::_RightListPanelWidget' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _GaugeWidget) == 0x000358, "Member 'UChallengeWidget::_GaugeWidget' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _RewardGetWindowWidget) == 0x000360, "Member 'UChallengeWidget::_RewardGetWindowWidget' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _ResultDonpaTicket) == 0x000368, "Member 'UChallengeWidget::_ResultDonpaTicket' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _RewardGetWindowWidgetClass) == 0x000370, "Member 'UChallengeWidget::_RewardGetWindowWidgetClass' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _ResultDonpaTicketClass) == 0x000398, "Member 'UChallengeWidget::_ResultDonpaTicketClass' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _ActiveRewardGetWindow) == 0x0003C0, "Member 'UChallengeWidget::_ActiveRewardGetWindow' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _ActiveResultDonpaTicket) == 0x0003C8, "Member 'UChallengeWidget::_ActiveResultDonpaTicket' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, _SECueCategoryChange) == 0x000438, "Member 'UChallengeWidget::_SECueCategoryChange' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, Challenge_In) == 0x000448, "Member 'UChallengeWidget::Challenge_In' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, Challenge_Loop) == 0x000450, "Member 'UChallengeWidget::Challenge_Loop' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, Challenge_Out) == 0x000458, "Member 'UChallengeWidget::Challenge_Out' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, Challenge_Left_To_Right) == 0x000460, "Member 'UChallengeWidget::Challenge_Left_To_Right' has a wrong offset!");
static_assert(offsetof(UChallengeWidget, Challenge_Right_To_Left) == 0x000468, "Member 'UChallengeWidget::Challenge_Right_To_Left' has a wrong offset!");

// Class UNION.DriverAnimator
// 0x0000 (0x0000 - 0x0000)
class IDriverAnimator final
{
public:
	void ClearItem();
	struct FTransform GetSquashedTransform();
	void InitSquashedData(class UAnimSequence* AnimSequence);
	bool IsSquashed();
	void Jump(const EJumpActionId ActionId);
	void PlayAnimation(const EDriverAnimMontageId ID);
	void PlayOneshotAnimation(const EDriverOneshotAnimationId ID);
	void PlaySquashed(float Rate);
	void SetAccelerationRatio(float Ratio);
	void SetAdditionSteeringRatio(float Ratio, float AdditionRatio);
	void SetAnimationPlayRate(float Rate);
	void SetAnimClass(const class UClass* NewClass);
	void SetIsDrift(bool IsDrift);
	bool SetItemHold(const EDriverDirection Direction);
	void SetLookBackward(bool Look);
	void SetRaceCountdownFinished(const bool InCountdownFinished);
	void SetRacerDriftState(const ERacerDriftState DriftState);
	void SetRideableDisplayMode(EVehicleDisplayMode Mode);
	void SetRideableParams(EVehicleType Type, ECarStatusType StatusType, EVehicleDisplayMode Mode);
	void SetRideableStatusType(ECarStatusType StatusType);
	void SetRideableType(EVehicleType Type);
	void SetSpeedKPH(float InKPH);
	void SetSpeedRate(float Rate);
	void SetTurnSteeringRatio(float Ratio);
	void SetWheelspinFlag(bool Wheelspin);
	void Shunt(const struct FVector& Direction, const float Power);
	void Spin(const EDriverDirection Direction, bool IsSpin);
	void SpinEnd();
	void SpinOneshot(const EDriverDirection Direction, float SpinTime);
	void StopAnimation(const EDriverAnimMontageId ID);
	void StopAnimationAll();
	void StopAnimationGroup(const EDriverAnimationGroup Group);
	void StopSquashed();
	void UpdateSquashedData(float DeltaTime);
	bool UseItem();
	bool UseItemInDirection(const EDriverDirection Direction);
	bool UseItemWithoutAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DriverAnimator">();
	}
	static class IDriverAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDriverAnimator>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IDriverAnimator) == 0x000001, "Wrong alignment on IDriverAnimator");
static_assert(sizeof(IDriverAnimator) == 0x000001, "Wrong size on IDriverAnimator");

// Class UNION.ChallengeWidgetDataAsset
// 0x00C8 (0x00F8 - 0x0030)
class UChallengeWidgetDataAsset final : public UDataAsset
{
public:
	TMap<EChallengeCategory, class FText>         _TabCategoryNameTexts;                             // 0x0030(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         _ChaoMoveVelocity;                                 // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _SpecialUnlockPopupTitleText;                      // 0x0088(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   _SpecialUnlockPopupMessageText;                    // 0x0098(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           _SECueCategoryChange;                              // 0x00A8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           _SECueChallengeChange;                             // 0x00D0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeWidgetDataAsset">();
	}
	static class UChallengeWidgetDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeWidgetDataAsset>();
	}
};
static_assert(alignof(UChallengeWidgetDataAsset) == 0x000008, "Wrong alignment on UChallengeWidgetDataAsset");
static_assert(sizeof(UChallengeWidgetDataAsset) == 0x0000F8, "Wrong size on UChallengeWidgetDataAsset");
static_assert(offsetof(UChallengeWidgetDataAsset, _TabCategoryNameTexts) == 0x000030, "Member 'UChallengeWidgetDataAsset::_TabCategoryNameTexts' has a wrong offset!");
static_assert(offsetof(UChallengeWidgetDataAsset, _ChaoMoveVelocity) == 0x000080, "Member 'UChallengeWidgetDataAsset::_ChaoMoveVelocity' has a wrong offset!");
static_assert(offsetof(UChallengeWidgetDataAsset, _SpecialUnlockPopupTitleText) == 0x000088, "Member 'UChallengeWidgetDataAsset::_SpecialUnlockPopupTitleText' has a wrong offset!");
static_assert(offsetof(UChallengeWidgetDataAsset, _SpecialUnlockPopupMessageText) == 0x000098, "Member 'UChallengeWidgetDataAsset::_SpecialUnlockPopupMessageText' has a wrong offset!");
static_assert(offsetof(UChallengeWidgetDataAsset, _SECueCategoryChange) == 0x0000A8, "Member 'UChallengeWidgetDataAsset::_SECueCategoryChange' has a wrong offset!");
static_assert(offsetof(UChallengeWidgetDataAsset, _SECueChallengeChange) == 0x0000D0, "Member 'UChallengeWidgetDataAsset::_SECueChallengeChange' has a wrong offset!");

// Class UNION.JudgeEndingState
// 0x0000 (0x0110 - 0x0110)
class UJudgeEndingState : public URaceSequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JudgeEndingState">();
	}
	static class UJudgeEndingState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJudgeEndingState>();
	}
};
static_assert(alignof(UJudgeEndingState) == 0x000008, "Wrong alignment on UJudgeEndingState");
static_assert(sizeof(UJudgeEndingState) == 0x000110, "Wrong size on UJudgeEndingState");

// Class UNION.DialogueDisplayAnimInstance
// 0x0010 (0x0380 - 0x0370)
class UDialogueDisplayAnimInstance final : public UAnimInstance
{
public:
	TArray<class UAnimSequence*>                  AnimationAssetList;                                // 0x0368(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UAnimSequence* GetAnimationAssetById(const EDialogueDisplayAnimationAssetID AssetId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogueDisplayAnimInstance">();
	}
	static class UDialogueDisplayAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogueDisplayAnimInstance>();
	}
};
static_assert(alignof(UDialogueDisplayAnimInstance) == 0x000010, "Wrong alignment on UDialogueDisplayAnimInstance");
static_assert(sizeof(UDialogueDisplayAnimInstance) == 0x000380, "Wrong size on UDialogueDisplayAnimInstance");
static_assert(offsetof(UDialogueDisplayAnimInstance, AnimationAssetList) == 0x000368, "Member 'UDialogueDisplayAnimInstance::AnimationAssetList' has a wrong offset!");

// Class UNION.ChampionCrownBase
// 0x0000 (0x0290 - 0x0290)
class AChampionCrownBase : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChampionCrownBase">();
	}
	static class AChampionCrownBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChampionCrownBase>();
	}
};
static_assert(alignof(AChampionCrownBase) == 0x000008, "Wrong alignment on AChampionCrownBase");
static_assert(sizeof(AChampionCrownBase) == 0x000290, "Wrong size on AChampionCrownBase");

// Class UNION.CharaMachineParamWindow
// 0x0108 (0x03E8 - 0x02E0)
class UCharaMachineParamWindow : public UUserWidget
{
public:
	class UCharaMachineParamWindowBar*            WBP_Window_Sub_Parameter_TopSpeed;                 // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharaMachineParamWindowBar*            WBP_Window_Sub_Parameter_Accel;                    // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharaMachineParamWindowBar*            WBP_Window_Sub_Parameter_Dash_BOOST;               // 0x02F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharaMachineParamWindowBar*            WBP_Window_Sub_Parameter_Handling;                 // 0x02F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharaMachineParamWindowBar*            WBP_Window_Sub_Parameter_Power;                    // 0x0300(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool IsIn)>     OnFinishedAnim;                                    // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	float                                         DefaultMinParam;                                   // 0x0318(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultMaxParam;                                   // 0x031C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_320[0xC8];                                     // 0x0320(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishedAnim();
	void OnPlayAnimIn();
	void OnPlayAnimLoop();
	void OnPlayAnimOut();
	void OnPlaySE();
	bool PlayAnim(bool IsInAnim);
	void PlayAnimLoop();
	void SetBlinkMode(ECharaMachineParamWindowBlinkMode InBlinkMode);
	void SetCandParamData(const struct FRacerParamData& InCandParamData);
	void SetCorrectionVal(float InCorrectionVal);
	void SetCurrentParamData(const struct FRacerParamData& InCurrentParamData);
	void SetDiffVisible(bool bInVisible);
	void SetGadgetIds(const TArray<EGadgetId>& InGadgetIds);
	void SetGadgetVisible(bool bInVisible);
	void SetParamRange(float InMinParam, float InMaxParam);
	void SwitchPlayAnim();
	void Update();

	TArray<EGadgetId> GetGadgetIds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMachineParamWindow">();
	}
	static class UCharaMachineParamWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaMachineParamWindow>();
	}
};
static_assert(alignof(UCharaMachineParamWindow) == 0x000008, "Wrong alignment on UCharaMachineParamWindow");
static_assert(sizeof(UCharaMachineParamWindow) == 0x0003E8, "Wrong size on UCharaMachineParamWindow");
static_assert(offsetof(UCharaMachineParamWindow, WBP_Window_Sub_Parameter_TopSpeed) == 0x0002E0, "Member 'UCharaMachineParamWindow::WBP_Window_Sub_Parameter_TopSpeed' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindow, WBP_Window_Sub_Parameter_Accel) == 0x0002E8, "Member 'UCharaMachineParamWindow::WBP_Window_Sub_Parameter_Accel' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindow, WBP_Window_Sub_Parameter_Dash_BOOST) == 0x0002F0, "Member 'UCharaMachineParamWindow::WBP_Window_Sub_Parameter_Dash_BOOST' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindow, WBP_Window_Sub_Parameter_Handling) == 0x0002F8, "Member 'UCharaMachineParamWindow::WBP_Window_Sub_Parameter_Handling' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindow, WBP_Window_Sub_Parameter_Power) == 0x000300, "Member 'UCharaMachineParamWindow::WBP_Window_Sub_Parameter_Power' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindow, OnFinishedAnim) == 0x000308, "Member 'UCharaMachineParamWindow::OnFinishedAnim' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindow, DefaultMinParam) == 0x000318, "Member 'UCharaMachineParamWindow::DefaultMinParam' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindow, DefaultMaxParam) == 0x00031C, "Member 'UCharaMachineParamWindow::DefaultMaxParam' has a wrong offset!");

// Class UNION.CharaMachineParamWindowBar
// 0x00A0 (0x0380 - 0x02E0)
class UCharaMachineParamWindowBar : public UUserWidget
{
public:
	class UImage*                                 ParamTypeIcon;                                     // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BarDefault;                                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BarUp;                                             // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BarDown;                                           // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BarBlink;                                          // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow;                                             // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        BarSwitcher;                                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               BarMaterialDefault;                                // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               BarMaterialUp;                                     // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               BarMaterialDown;                                   // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               BarMaterialBlink;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               ArrowMaterial;                                     // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FLinearColor>                   TextColorNormalUpDown;                             // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UTextBlock*                             ParamValueText;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bVisibleUI;                                        // 0x0358(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 GadgetParamSideIcon;                               // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    GadgetParamValueText;                              // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   TypeName;                                          // 0x0370(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	void OnConstParamBarMaterials();
	void OnConstParamTypeMaterials();
	void SetParamType(const float InParamType);
	void Update(bool bInIsDiffVisible, ECharaMachineParamWindowBlinkMode InBlinkMode, float InMinParam, float InMaxParam, float InCurrentDriverParam, float InCurrentMachineParam, float InCurrentGadgetParam, float InCurrentTotalParam, float InCandDriverParam, float InCandMachineParam, float InCandGadgetParam, float InCandTotalParam, float InCorrectionVal);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMachineParamWindowBar">();
	}
	static class UCharaMachineParamWindowBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaMachineParamWindowBar>();
	}
};
static_assert(alignof(UCharaMachineParamWindowBar) == 0x000008, "Wrong alignment on UCharaMachineParamWindowBar");
static_assert(sizeof(UCharaMachineParamWindowBar) == 0x000380, "Wrong size on UCharaMachineParamWindowBar");
static_assert(offsetof(UCharaMachineParamWindowBar, ParamTypeIcon) == 0x0002E0, "Member 'UCharaMachineParamWindowBar::ParamTypeIcon' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, BarDefault) == 0x0002E8, "Member 'UCharaMachineParamWindowBar::BarDefault' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, BarUp) == 0x0002F0, "Member 'UCharaMachineParamWindowBar::BarUp' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, BarDown) == 0x0002F8, "Member 'UCharaMachineParamWindowBar::BarDown' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, BarBlink) == 0x000300, "Member 'UCharaMachineParamWindowBar::BarBlink' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, Arrow) == 0x000308, "Member 'UCharaMachineParamWindowBar::Arrow' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, BarSwitcher) == 0x000310, "Member 'UCharaMachineParamWindowBar::BarSwitcher' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, BarMaterialDefault) == 0x000318, "Member 'UCharaMachineParamWindowBar::BarMaterialDefault' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, BarMaterialUp) == 0x000320, "Member 'UCharaMachineParamWindowBar::BarMaterialUp' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, BarMaterialDown) == 0x000328, "Member 'UCharaMachineParamWindowBar::BarMaterialDown' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, BarMaterialBlink) == 0x000330, "Member 'UCharaMachineParamWindowBar::BarMaterialBlink' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, ArrowMaterial) == 0x000338, "Member 'UCharaMachineParamWindowBar::ArrowMaterial' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, TextColorNormalUpDown) == 0x000340, "Member 'UCharaMachineParamWindowBar::TextColorNormalUpDown' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, ParamValueText) == 0x000350, "Member 'UCharaMachineParamWindowBar::ParamValueText' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, bVisibleUI) == 0x000358, "Member 'UCharaMachineParamWindowBar::bVisibleUI' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, GadgetParamSideIcon) == 0x000360, "Member 'UCharaMachineParamWindowBar::GadgetParamSideIcon' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, GadgetParamValueText) == 0x000368, "Member 'UCharaMachineParamWindowBar::GadgetParamValueText' has a wrong offset!");
static_assert(offsetof(UCharaMachineParamWindowBar, TypeName) == 0x000370, "Member 'UCharaMachineParamWindowBar::TypeName' has a wrong offset!");

// Class UNION.Driver
// 0x02B8 (0x0548 - 0x0290)
class ADriver : public AActor
{
public:
	uint8                                         Pad_290[0x108];                                    // 0x0290(0x0108)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CharacterMesh;                                     // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomAttrAnimComponent*               CustomAttrAnimComponent;                           // 0x03A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialPlayerComponent*               MaterialPlayerComponent;                           // 0x03A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URacerMaterialParameterDataAsset*       RacerMaterialParameters;                           // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFreshlyPaintData*                      FreshlyPaintColor;                                 // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemHolderComponent*                   ItemHolderComponent;                               // 0x03C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C8[0x8];                                      // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   SteeringWheelMesh;                                 // 0x03D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   DefaultSteeringWheelMaterial;                      // 0x03D8(0x00A8)(NativeAccessSpecifierPrivate)
	class UMeshComponent*                         FurComponent;                                      // 0x0480(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionAtomComponent*                    UnionAtomComponent;                                // 0x0488(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMachineMaterialData                   AlphaDitheringSteeringWheelMaterial;               // 0x0498(0x00A8)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bCanMontageAnimOnDrifting;                         // 0x0540(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateSteeringWheelDynamicMaterialInstance();
	void InvokeRacerEvent(const EUnionRacerEvent InEvent, const int32 InParam);
	bool IsUseInRace();
	void RegisterRacerEvent(const int32& InRacerIndex);
	void SetGhostMaterial(class UMaterialInterface* GhostMaterial);
	void SetGhostMaterialDynamic(class UMaterialInstanceDynamic* GhostMaterial);
	void SetHandleMeshForcedLOD(int32 InNewForcedLOD);
	void SetLightingChannels(bool Channel0, bool Channel1, bool Channel2);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetOverlayMaterial(class UMaterialInterface* NewOverlayMaterial);
	void SetRacerIndex(const int32 InRacerIndex);
	void SetScalarParameterValue(class FName ParameterName, float Value);
	void SetSteeringWheelColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetSteeringWheelMaterials(const struct FUserMachineCustomizeData& MachineCustomizeData);
	void SetSteeringWheelPresetColor(EMachineColorPresetId ColorPresetId);
	void SetSteeringWheelSurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetupGFurComponent(class UMeshComponent* FurComponent_0);
	void SetUseInRace(const bool Enabled);
	void SetVectorParameterValue(class FName ParameterName, const struct FLinearColor& Value);
	void SetVisibleSteeringWheel(const bool Visible);
	void SwapMaterials(const EDriverMaterialType Type);

	EDriverPose GetDriverPose() const;
	int32 GetRacerIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Driver">();
	}
	static class ADriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADriver>();
	}
};
static_assert(alignof(ADriver) == 0x000008, "Wrong alignment on ADriver");
static_assert(sizeof(ADriver) == 0x000548, "Wrong size on ADriver");
static_assert(offsetof(ADriver, CharacterMesh) == 0x000398, "Member 'ADriver::CharacterMesh' has a wrong offset!");
static_assert(offsetof(ADriver, CustomAttrAnimComponent) == 0x0003A0, "Member 'ADriver::CustomAttrAnimComponent' has a wrong offset!");
static_assert(offsetof(ADriver, MaterialPlayerComponent) == 0x0003A8, "Member 'ADriver::MaterialPlayerComponent' has a wrong offset!");
static_assert(offsetof(ADriver, RacerMaterialParameters) == 0x0003B0, "Member 'ADriver::RacerMaterialParameters' has a wrong offset!");
static_assert(offsetof(ADriver, FreshlyPaintColor) == 0x0003B8, "Member 'ADriver::FreshlyPaintColor' has a wrong offset!");
static_assert(offsetof(ADriver, ItemHolderComponent) == 0x0003C0, "Member 'ADriver::ItemHolderComponent' has a wrong offset!");
static_assert(offsetof(ADriver, SteeringWheelMesh) == 0x0003D0, "Member 'ADriver::SteeringWheelMesh' has a wrong offset!");
static_assert(offsetof(ADriver, DefaultSteeringWheelMaterial) == 0x0003D8, "Member 'ADriver::DefaultSteeringWheelMaterial' has a wrong offset!");
static_assert(offsetof(ADriver, FurComponent) == 0x000480, "Member 'ADriver::FurComponent' has a wrong offset!");
static_assert(offsetof(ADriver, UnionAtomComponent) == 0x000488, "Member 'ADriver::UnionAtomComponent' has a wrong offset!");
static_assert(offsetof(ADriver, AlphaDitheringSteeringWheelMaterial) == 0x000498, "Member 'ADriver::AlphaDitheringSteeringWheelMaterial' has a wrong offset!");
static_assert(offsetof(ADriver, bCanMontageAnimOnDrifting) == 0x000540, "Member 'ADriver::bCanMontageAnimOnDrifting' has a wrong offset!");

// Class UNION.ReplayGhostBase
// 0x00E0 (0x0370 - 0x0290)
class AReplayGhostBase : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineSoundComponent*                 MachineSoundComponent;                             // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineEngineSoundComponent*           MachineEngineSoundComponent;                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineEffectComponent*                MachineEffectComponent;                            // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineSurfaceEffectComponent*         MachineSurfaceEffectComponent;                     // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineMaterialComponent*              MachineMaterialComponent;                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AVehicleRearPartsActor>     VehicleRearPartsClass;                             // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URacerMaterialParameterDataAsset*       RacerMaterialParameters;                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineMaterialParameterDataAsset*     MachineMaterialParameters;                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInViewer;                                         // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionSkeletalMeshComponent*            DriverSkeletalMeshComponent;                       // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   DriverStaticMeshComponent;                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F0[0x18];                                     // 0x02F0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          FrontEngineSound;                                  // 0x0308(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          RearEngineSound;                                   // 0x0310(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AVehicleRearPartsActor*                 VehicleRearPartsActor;                             // 0x0318(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_320[0x18];                                     // 0x0320(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          AnimSequenceAssets[0x4];                           // 0x0338(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x18];                                     // 0x0358(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginAnimation();
	void ChangeVehicleType(EVehicleType NewVehicleType);
	void DamageOff();
	void DamageOn();
	void EndAnimation();
	void PlayMaterialAnimation(EVehicleMaterialAnimationType MaterialAnimationType, float StartTime, bool bAutoDeactive);
	void ReleaseAllEffect();
	void ResetSpecialStatus();
	void SetDamageIntensity(float Intensity);
	void SetDriftIntensity(int32 ChargeLevel, float Intensity);
	void SetForceDisableWheelPosUpdate(const bool bDisable);
	void SetScalarParameterValue(class FName ParameterName, float Value);
	void SetVectorParameterValue(class FName ParameterName, const struct FLinearColor& Value);
	void StopMaterialAnimation(EVehicleMaterialAnimationType MaterialAnimationType, bool bReset);
	void TurnOffEngine();
	void TurnOnEngine();
	void VehicleModelEventAttackedInfo(const int32& EventId, const struct FAttackedInfo& Value);
	void VehicleModelEventInt(const int32& EventId, const int32& Value);
	void VehicleModelEventItemId(const int32& EventId, const EItemId& Value, const int32& IntValue, const EItemThrowDirection& ThrowType, const bool bGadgetLuckyItem);
	void VehicleModelEventSpecialStatus(const int32& EventId, const EVehicleSpecialStatusType& Value);

	bool IsHoverboard() const;
	bool IsInBodyCut() const;
	bool IsInDriving() const;
	bool IsInRace() const;
	bool IsLocalPlayer() const;
	bool IsPlayingAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReplayGhostBase">();
	}
	static class AReplayGhostBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AReplayGhostBase>();
	}
};
static_assert(alignof(AReplayGhostBase) == 0x000008, "Wrong alignment on AReplayGhostBase");
static_assert(sizeof(AReplayGhostBase) == 0x000370, "Wrong size on AReplayGhostBase");
static_assert(offsetof(AReplayGhostBase, Root) == 0x000290, "Member 'AReplayGhostBase::Root' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, MachineSoundComponent) == 0x000298, "Member 'AReplayGhostBase::MachineSoundComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, MachineEngineSoundComponent) == 0x0002A0, "Member 'AReplayGhostBase::MachineEngineSoundComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, MachineEffectComponent) == 0x0002A8, "Member 'AReplayGhostBase::MachineEffectComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, MachineSurfaceEffectComponent) == 0x0002B0, "Member 'AReplayGhostBase::MachineSurfaceEffectComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, MachineMaterialComponent) == 0x0002B8, "Member 'AReplayGhostBase::MachineMaterialComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, VehicleRearPartsClass) == 0x0002C0, "Member 'AReplayGhostBase::VehicleRearPartsClass' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, RacerMaterialParameters) == 0x0002C8, "Member 'AReplayGhostBase::RacerMaterialParameters' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, MachineMaterialParameters) == 0x0002D0, "Member 'AReplayGhostBase::MachineMaterialParameters' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, bInViewer) == 0x0002D8, "Member 'AReplayGhostBase::bInViewer' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, DriverSkeletalMeshComponent) == 0x0002E0, "Member 'AReplayGhostBase::DriverSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, DriverStaticMeshComponent) == 0x0002E8, "Member 'AReplayGhostBase::DriverStaticMeshComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, FrontEngineSound) == 0x000308, "Member 'AReplayGhostBase::FrontEngineSound' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, RearEngineSound) == 0x000310, "Member 'AReplayGhostBase::RearEngineSound' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, VehicleRearPartsActor) == 0x000318, "Member 'AReplayGhostBase::VehicleRearPartsActor' has a wrong offset!");
static_assert(offsetof(AReplayGhostBase, AnimSequenceAssets) == 0x000338, "Member 'AReplayGhostBase::AnimSequenceAssets' has a wrong offset!");

// Class UNION.ReplayGhostMachine
// 0x0100 (0x0470 - 0x0370)
class AReplayGhostMachine final : public AReplayGhostBase
{
public:
	class UStaticMeshComponent*                   DebguMesh;                                         // 0x0370(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionSkeletalMeshComponent*            CockpitMeshComponent;                              // 0x0378(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAOStaticMeshComponent*            FrontMeshComponent;                                // 0x0380(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAOStaticMeshComponent*            RearMeshComponent;                                 // 0x0388(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              SideMeshComponent;                                 // 0x0390(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUnionStaticMeshComponent*>      TireMeshComponents;                                // 0x0398(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDataTable*                             TireDataTable;                                     // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CarShadowDataTable;                                // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     GhostMaterialInterface;                            // 0x03B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EMachineCockpitMaterialArea, struct FMachineMaterialData> CockpitMeshMaterials;             // 0x03C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EMachineBodyMaterialArea, struct FMachineMaterialData> BodyMeshMaterials;                   // 0x0410(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMachineMaterialData>           TireMeshMaterials;                                 // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReplayGhostMachine">();
	}
	static class AReplayGhostMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<AReplayGhostMachine>();
	}
};
static_assert(alignof(AReplayGhostMachine) == 0x000008, "Wrong alignment on AReplayGhostMachine");
static_assert(sizeof(AReplayGhostMachine) == 0x000470, "Wrong size on AReplayGhostMachine");
static_assert(offsetof(AReplayGhostMachine, DebguMesh) == 0x000370, "Member 'AReplayGhostMachine::DebguMesh' has a wrong offset!");
static_assert(offsetof(AReplayGhostMachine, CockpitMeshComponent) == 0x000378, "Member 'AReplayGhostMachine::CockpitMeshComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostMachine, FrontMeshComponent) == 0x000380, "Member 'AReplayGhostMachine::FrontMeshComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostMachine, RearMeshComponent) == 0x000388, "Member 'AReplayGhostMachine::RearMeshComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostMachine, SideMeshComponent) == 0x000390, "Member 'AReplayGhostMachine::SideMeshComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostMachine, TireMeshComponents) == 0x000398, "Member 'AReplayGhostMachine::TireMeshComponents' has a wrong offset!");
static_assert(offsetof(AReplayGhostMachine, TireDataTable) == 0x0003A8, "Member 'AReplayGhostMachine::TireDataTable' has a wrong offset!");
static_assert(offsetof(AReplayGhostMachine, CarShadowDataTable) == 0x0003B0, "Member 'AReplayGhostMachine::CarShadowDataTable' has a wrong offset!");
static_assert(offsetof(AReplayGhostMachine, GhostMaterialInterface) == 0x0003B8, "Member 'AReplayGhostMachine::GhostMaterialInterface' has a wrong offset!");
static_assert(offsetof(AReplayGhostMachine, CockpitMeshMaterials) == 0x0003C0, "Member 'AReplayGhostMachine::CockpitMeshMaterials' has a wrong offset!");
static_assert(offsetof(AReplayGhostMachine, BodyMeshMaterials) == 0x000410, "Member 'AReplayGhostMachine::BodyMeshMaterials' has a wrong offset!");
static_assert(offsetof(AReplayGhostMachine, TireMeshMaterials) == 0x000460, "Member 'AReplayGhostMachine::TireMeshMaterials' has a wrong offset!");

// Class UNION.CharaMachineSelectBase
// 0x01B8 (0x0498 - 0x02E0)
class UCharaMachineSelectBase : public UUserWidget
{
public:
	TMulticastInlineDelegate<void(ECharaSelectControlState NextMode, ECharaSelectControlState PrevMode, int32 SelectedPlayerControllerIndex)> OnChangeCharaSelectModeEvent; // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, ECarStatusType SelectedMachineType, EMachineId SelectedBaseMachineId)> OnMachineTypeDecideEvent; // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, ECarStatusType SelectedMachineType, EMachineId SelectedBaseMachineId)> OnMachineTypeCancelEvent; // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, ECarStatusType SelectedMachineType, EMachineId SelectedBaseMachineId)> OnMachineTypeScrollStartEvent; // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, ECarStatusType SelectedMachineType, EMachineId SelectedBaseMachineId)> OnMachineTypeScrollEndEvent; // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InPlayerIndex)> OnMachinePartsDecisionEvent;                 // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, EMachineId FrontPartsId, EMachineId RearPartsId, EMachineId TirePartsId)> OnMachinePartsSelectEvent; // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, EMachineId FrontPartsId, EMachineId RearPartsId, EMachineId TirePartsId)> OnMachinePartsFocusEvent; // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InPlayerIndex)> OnMachinePartsCancelEvent;                   // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InPlayerIndex)> OnMachineColorDecisionEvent;                 // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InPlayerIndex)> OnMachineColorSelectEvent;                   // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InPlayerIndex)> OnMachineColorFocusEvent;                    // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InPlayerIndex)> OnMachineColorCancelEvent;                   // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, UNION::EMachineSelectMode Mode)> OnMachineSelectModeChanged; // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOptionVisible;                                   // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        WidgetSwitcherMachine;                             // 0x03D0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachinePartsCharaParameter*            WBP_MachineSelect_Sub_CharaParameter;              // 0x03D8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachineTypeScrollControl*              WBP_MachineSelect_Sub_TypeWindow;                  // 0x03E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachinePartsSelectWindow*              WBP_MachineSelect_Sub_PartsWindow;                 // 0x03E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachineColorSelectWindow*              WBP_MachineSelect_Sub_ColorWindow;                 // 0x03F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharaMachineParamWindow*               WBP_Window_MachineParameter;                       // 0x03F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachineOptionWindow*                   WBP_Window_MachineOption;                          // 0x0400(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuInputRecieveObject*                MenuInputReceiveObject;                            // 0x0408(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PlayerIndex;                                       // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FirstFocusDelayTime;                               // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_418[0x80];                                     // 0x0418(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeCharaSelectMode(ECharaSelectControlState InNewState);
	void ColorWindowOverrideNavigationRule();
	void MachineColorSelectWindow_OnCancel();
	void MachineColorSelectWindow_OnDecision();
	void MachineColorSelectWindow_OnItemFocused();
	void MachineColorSelectWindow_OnItemSelected();
	void MachineColorSelectWindow_OnPageSlideEnd();
	void MachineColorSelectWindow_OnPageSlideStart();
	void MachinePartsSelectWindow_OnCancel();
	void MachinePartsSelectWindow_OnDecision();
	void MachinePartsSelectWindow_OnDecisionButtonFocused();
	void MachinePartsSelectWindow_OnItemFocused(EMachinePartsType InPartsType, EMachineId InPartsId);
	void MachinePartsSelectWindow_OnItemSelected(EMachinePartsType InPartsType, EMachineId InPartsId);
	void OnOptionWindowCallback(class UObject* InObject);
	void OnOptionWindowCancelCallback(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnOptionWindowFinishedAnimCallback(bool IsIn);
	void OnParamWindowCallback(class UObject* InObject);
	void OnParamWindowFinishedAnimCallback(bool IsIn);
	void OnSwitchOptionWindow();
	void OnSwitchParamWindow();
	void PartsWindowDialogHide(EDialogResult InResult);
	void PartsWindowDialogShow();
	void PlayAnimCharaSelect();
	void PlayAnimIn();
	void PlayAnimLoop();
	void PlayAnimMachineType();
	void PlayAnimOut();
	void SetCurrentMachineSelectControlState(EMachineSelectControlState InState);
	void SetFooterCoverColor(int32 InIndex);
	void SwitchMachineSelectMode(UNION::EMachineSelectMode InMode);

	class UCharaSelectWindow* GetCharacterSelectWindow() const;
	class UWindowCharaChange* GetCharacterSkinWindow() const;
	class UMachinePartsCharaParameter* GetCharaParamWindow() const;
	class UMachineColorSelectWindow* GetColorWindow() const;
	ECharaSelectControlState GetCurrentCharaSelectControlState() const;
	EMachineSelectControlState GetCurrentMachineSelectControlState() const;
	class UMachinePartsSelectWindow* GetPartsWindow() const;
	int32 GetPlayerIndex() const;
	class UMachineTypeScrollControl* GetTypeWindow() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMachineSelectBase">();
	}
	static class UCharaMachineSelectBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaMachineSelectBase>();
	}
};
static_assert(alignof(UCharaMachineSelectBase) == 0x000008, "Wrong alignment on UCharaMachineSelectBase");
static_assert(sizeof(UCharaMachineSelectBase) == 0x000498, "Wrong size on UCharaMachineSelectBase");
static_assert(offsetof(UCharaMachineSelectBase, OnChangeCharaSelectModeEvent) == 0x0002E0, "Member 'UCharaMachineSelectBase::OnChangeCharaSelectModeEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachineTypeDecideEvent) == 0x0002F0, "Member 'UCharaMachineSelectBase::OnMachineTypeDecideEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachineTypeCancelEvent) == 0x000300, "Member 'UCharaMachineSelectBase::OnMachineTypeCancelEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachineTypeScrollStartEvent) == 0x000310, "Member 'UCharaMachineSelectBase::OnMachineTypeScrollStartEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachineTypeScrollEndEvent) == 0x000320, "Member 'UCharaMachineSelectBase::OnMachineTypeScrollEndEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachinePartsDecisionEvent) == 0x000330, "Member 'UCharaMachineSelectBase::OnMachinePartsDecisionEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachinePartsSelectEvent) == 0x000340, "Member 'UCharaMachineSelectBase::OnMachinePartsSelectEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachinePartsFocusEvent) == 0x000350, "Member 'UCharaMachineSelectBase::OnMachinePartsFocusEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachinePartsCancelEvent) == 0x000360, "Member 'UCharaMachineSelectBase::OnMachinePartsCancelEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachineColorDecisionEvent) == 0x000370, "Member 'UCharaMachineSelectBase::OnMachineColorDecisionEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachineColorSelectEvent) == 0x000380, "Member 'UCharaMachineSelectBase::OnMachineColorSelectEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachineColorFocusEvent) == 0x000390, "Member 'UCharaMachineSelectBase::OnMachineColorFocusEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachineColorCancelEvent) == 0x0003A0, "Member 'UCharaMachineSelectBase::OnMachineColorCancelEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnMachineSelectModeChanged) == 0x0003B0, "Member 'UCharaMachineSelectBase::OnMachineSelectModeChanged' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, OnOptionVisible) == 0x0003C0, "Member 'UCharaMachineSelectBase::OnOptionVisible' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, WidgetSwitcherMachine) == 0x0003D0, "Member 'UCharaMachineSelectBase::WidgetSwitcherMachine' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, WBP_MachineSelect_Sub_CharaParameter) == 0x0003D8, "Member 'UCharaMachineSelectBase::WBP_MachineSelect_Sub_CharaParameter' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, WBP_MachineSelect_Sub_TypeWindow) == 0x0003E0, "Member 'UCharaMachineSelectBase::WBP_MachineSelect_Sub_TypeWindow' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, WBP_MachineSelect_Sub_PartsWindow) == 0x0003E8, "Member 'UCharaMachineSelectBase::WBP_MachineSelect_Sub_PartsWindow' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, WBP_MachineSelect_Sub_ColorWindow) == 0x0003F0, "Member 'UCharaMachineSelectBase::WBP_MachineSelect_Sub_ColorWindow' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, WBP_Window_MachineParameter) == 0x0003F8, "Member 'UCharaMachineSelectBase::WBP_Window_MachineParameter' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, WBP_Window_MachineOption) == 0x000400, "Member 'UCharaMachineSelectBase::WBP_Window_MachineOption' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, MenuInputReceiveObject) == 0x000408, "Member 'UCharaMachineSelectBase::MenuInputReceiveObject' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, PlayerIndex) == 0x000410, "Member 'UCharaMachineSelectBase::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectBase, FirstFocusDelayTime) == 0x000414, "Member 'UCharaMachineSelectBase::FirstFocusDelayTime' has a wrong offset!");

// Class UNION.JukeBoxSequenceStateEnter
// 0x0000 (0x00F8 - 0x00F8)
class UJukeBoxSequenceStateEnter final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JukeBoxSequenceStateEnter">();
	}
	static class UJukeBoxSequenceStateEnter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJukeBoxSequenceStateEnter>();
	}
};
static_assert(alignof(UJukeBoxSequenceStateEnter) == 0x000008, "Wrong alignment on UJukeBoxSequenceStateEnter");
static_assert(sizeof(UJukeBoxSequenceStateEnter) == 0x0000F8, "Wrong size on UJukeBoxSequenceStateEnter");

// Class UNION.CustomRaceDetailRuleScene
// 0x0270 (0x0648 - 0x03D8)
class UCustomRaceDetailRuleScene : public UUnionUISceneBase
{
public:
	TArray<class UCustomRaceSubOptionSettingLine*> SettingLineArr;                                   // 0x03D8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<ECustomRaceSettingLine, class UCustomRaceSubOptionSettingLine*> PresetLineMap;              // 0x03E8(0x0050)(BlueprintVisible, ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<uint8, uint8>                            Index_RaceCountMap;                                // 0x0438(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<uint8, uint8>                            Index_TopPointMap;                                 // 0x0488(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPartyRacePresetSetting                CurrentSetting;                                    // 0x04D8(0x00B8)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPartyRacePresetSetting                BackupSetting;                                     // 0x0590(0x00B8)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void BackupCurrentSetting(bool IsGuest);
	void ChangeMatchRule(ERaceSettingMatchRule RaceSettingMatchRule);
	void CheckIsGuestEvent(bool IsGuest);
	void DestroyQuitConfirmWidget();
	void DisableLineInCertainCondition();
	void OnAutoGetItemSelect(int32 Index_0);
	void OnComSpeedSelect(int32 Index_0);
	void OnCourseSelectingSelect(int32 Index_0);
	void OnFestaRaceRuleSelect(int32 Index_0);
	void OnGadgetUsingSelect(int32 Index_0);
	void OnGoalPointSelect(int32 Index_0);
	void OnGroupSettingSelect(int32 Index_0);
	void OnHandicapSelect(int32 Index_0);
	void OnIrregularSelect(int32 Index_0);
	void OnItemAppearanceRuleSelect(int32 Index_0);
	void OnMatchRuleSelect(int32 Index_0);
	void OnMCEventSelect(int32 Index_0);
	void OnObjectPlacementTypeSelect(int32 Index_0);
	void OnPointUpChanceSelect(int32 Index_0);
	void OnRaceBonusSelect(int32 Index_0);
	void OnRaceCountSelect(int32 Index_0);
	void OnRingLostSelect(int32 Index_0);
	void OnSpeedClassSelect(int32 Index_0);
	void OnTopPointSettlementSelect(int32 Index_0);
	void OnTripleCourseSelect(int32 Index_0);
	void ResetFromBackUp();
	void SaveCustomSelectEvent(ECustomRaceSettingLine SettingLineIndex, int32 LastIndex);
	void SaveLastFocusedSetting();
	void SetPresetSetting(const struct FPartyRacePresetSetting& Setting);
	void SetPresetSettingFromSave(const struct FPartyRacePresetSettingSave& Setting);
	void SetupSelectEvent();
	void UnbindAllSelectEvent();

	bool CheckIsRuleSame() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomRaceDetailRuleScene">();
	}
	static class UCustomRaceDetailRuleScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomRaceDetailRuleScene>();
	}
};
static_assert(alignof(UCustomRaceDetailRuleScene) == 0x000008, "Wrong alignment on UCustomRaceDetailRuleScene");
static_assert(sizeof(UCustomRaceDetailRuleScene) == 0x000648, "Wrong size on UCustomRaceDetailRuleScene");
static_assert(offsetof(UCustomRaceDetailRuleScene, SettingLineArr) == 0x0003D8, "Member 'UCustomRaceDetailRuleScene::SettingLineArr' has a wrong offset!");
static_assert(offsetof(UCustomRaceDetailRuleScene, PresetLineMap) == 0x0003E8, "Member 'UCustomRaceDetailRuleScene::PresetLineMap' has a wrong offset!");
static_assert(offsetof(UCustomRaceDetailRuleScene, Index_RaceCountMap) == 0x000438, "Member 'UCustomRaceDetailRuleScene::Index_RaceCountMap' has a wrong offset!");
static_assert(offsetof(UCustomRaceDetailRuleScene, Index_TopPointMap) == 0x000488, "Member 'UCustomRaceDetailRuleScene::Index_TopPointMap' has a wrong offset!");
static_assert(offsetof(UCustomRaceDetailRuleScene, CurrentSetting) == 0x0004D8, "Member 'UCustomRaceDetailRuleScene::CurrentSetting' has a wrong offset!");
static_assert(offsetof(UCustomRaceDetailRuleScene, BackupSetting) == 0x000590, "Member 'UCustomRaceDetailRuleScene::BackupSetting' has a wrong offset!");

// Class UNION.CharaMachineSelectPartsMachineType
// 0x0030 (0x0310 - 0x02E0)
class UCharaMachineSelectPartsMachineType : public UUserWidget
{
public:
	class UImage*                                 PAT_Icon_Type;                                     // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_Type_Name;                                     // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonFooterShortCut*                  WBP_FooterShortCut;                                // 0x02F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ButtonIndex;                                       // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUIButtonIconType                             ButtonIconType;                                    // 0x02FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ButtonText;                                        // 0x0300(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	void SetIsGamePadButton(bool bInIsGamePadButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMachineSelectPartsMachineType">();
	}
	static class UCharaMachineSelectPartsMachineType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaMachineSelectPartsMachineType>();
	}
};
static_assert(alignof(UCharaMachineSelectPartsMachineType) == 0x000008, "Wrong alignment on UCharaMachineSelectPartsMachineType");
static_assert(sizeof(UCharaMachineSelectPartsMachineType) == 0x000310, "Wrong size on UCharaMachineSelectPartsMachineType");
static_assert(offsetof(UCharaMachineSelectPartsMachineType, PAT_Icon_Type) == 0x0002E0, "Member 'UCharaMachineSelectPartsMachineType::PAT_Icon_Type' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectPartsMachineType, TXT_Type_Name) == 0x0002E8, "Member 'UCharaMachineSelectPartsMachineType::TXT_Type_Name' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectPartsMachineType, WBP_FooterShortCut) == 0x0002F0, "Member 'UCharaMachineSelectPartsMachineType::WBP_FooterShortCut' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectPartsMachineType, ButtonIndex) == 0x0002F8, "Member 'UCharaMachineSelectPartsMachineType::ButtonIndex' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectPartsMachineType, ButtonIconType) == 0x0002FC, "Member 'UCharaMachineSelectPartsMachineType::ButtonIconType' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectPartsMachineType, ButtonText) == 0x000300, "Member 'UCharaMachineSelectPartsMachineType::ButtonText' has a wrong offset!");

// Class UNION.UnionMachineBakeMaterialSubsystem
// 0x0038 (0x0068 - 0x0030)
class UUnionMachineBakeMaterialSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      BaseMaterialInstance;                              // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstance*                      BaseMaterialInstancePP;                            // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstance*                      BaseMaterialInstance2;                             // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstance*                      BaseMaterialInstancePP2;                           // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ABakeDebugActor*                        BakeDebugActor;                                    // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionMachineBakeMaterialSubsystem">();
	}
	static class UUnionMachineBakeMaterialSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionMachineBakeMaterialSubsystem>();
	}
};
static_assert(alignof(UUnionMachineBakeMaterialSubsystem) == 0x000008, "Wrong alignment on UUnionMachineBakeMaterialSubsystem");
static_assert(sizeof(UUnionMachineBakeMaterialSubsystem) == 0x000068, "Wrong size on UUnionMachineBakeMaterialSubsystem");
static_assert(offsetof(UUnionMachineBakeMaterialSubsystem, BaseMaterialInstance) == 0x000040, "Member 'UUnionMachineBakeMaterialSubsystem::BaseMaterialInstance' has a wrong offset!");
static_assert(offsetof(UUnionMachineBakeMaterialSubsystem, BaseMaterialInstancePP) == 0x000048, "Member 'UUnionMachineBakeMaterialSubsystem::BaseMaterialInstancePP' has a wrong offset!");
static_assert(offsetof(UUnionMachineBakeMaterialSubsystem, BaseMaterialInstance2) == 0x000050, "Member 'UUnionMachineBakeMaterialSubsystem::BaseMaterialInstance2' has a wrong offset!");
static_assert(offsetof(UUnionMachineBakeMaterialSubsystem, BaseMaterialInstancePP2) == 0x000058, "Member 'UUnionMachineBakeMaterialSubsystem::BaseMaterialInstancePP2' has a wrong offset!");
static_assert(offsetof(UUnionMachineBakeMaterialSubsystem, BakeDebugActor) == 0x000060, "Member 'UUnionMachineBakeMaterialSubsystem::BakeDebugActor' has a wrong offset!");

// Class UNION.CharaMachineSelectsBase
// 0x0090 (0x0370 - 0x02E0)
class UCharaMachineSelectsBase : public UUserWidget
{
public:
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, int32 SelectedCharaIndex)> OnCharaDecideEvent; // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, int32 SelectedCharaIndex)> OnCharaFocusEvent; // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCharaFinishedEvent;                              // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCharaCancelBackEvent;                            // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UCharaSelectWindow*                     WBP_CharaSelect_Sub_Window;                        // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonCountNumberWidget*               WBP_CMN_GadgetCount;                               // 0x0328(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CharaMachineUpdateDelay;                           // 0x0330(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCharaMachineSelectBase*>        CharaMachineSelectList;                            // 0x0338(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_348[0x28];                                     // 0x0348(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeSelectMode(EMachineSelectControlState InNewState);
	void CharaSelect_Button_Event_Cancel_Impl(int32 InPlayerControllerIndex);
	void CharaSelect_Button_Event_Decision_Impl(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void CharaSelect_Button_Event_HoverIcon_Impl(int32 InPlayerIndex, int32 InCharaIndex);
	void CharaSelect_Button_Event_UnhoverIcon_Impl(int32 InPlayerIndex, int32 InCharaIndex);
	void CharaSelect_Button_Event_Update_New_Impl();
	void CharaSelect_Event_ChangeMode_Impl(ECharaSelectControlState InNextMode, ECharaSelectControlState InPrevMode, int32 InPlayerControllerIndex);
	void CharaSelect_Event_ChangeOptionVisible_Impl();
	void OnInit();
	void OnMachinePartsDialogResult(EDialogResult InResult);
	void OnPlayAnimationIn();
	void OnPlayAnimationNormal();
	void OnPlayAnimationOut();
	void PlayAnimationNormal();
	void PlaySoundError();
	void SetCharaMachineSelectWidget(const TArray<class UCharaMachineSelectBase*>& InCharaMachineSelects);
	void SetDataSaveRequest(bool bInRequest);
	void SetVisibleDonpaTicket(bool IsVisible_0);
	void SkinWindow_Button_Event_Cancel_Impl(int32 InPlayerIndex);
	void SkinWindow_Button_Event_Decision_Impl(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void SkinWindow_Button_Event_HoverIcon_Impl(int32 InPlayerIndex, int32 InCharaIndex);
	void SkinWindow_Button_Event_UpdateNew_Impl();
	void UpdateDonpaTicket();

	class UCharaMachineParamWindow* GetCharaMachineParamWindowByPlayerControllerIndex(int32 PlayerControllerIndex) const;
	const TArray<class UCharaMachineSelectBase*> GetCharaMachineSelectWidget() const;
	class UCharaMachineSelectBase* GetCharaMachineSelectWidgetByPlayerControllerIndex(int32 PlayerControllerIndex) const;
	bool GetDataSaveRequest() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMachineSelectsBase">();
	}
	static class UCharaMachineSelectsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaMachineSelectsBase>();
	}
};
static_assert(alignof(UCharaMachineSelectsBase) == 0x000008, "Wrong alignment on UCharaMachineSelectsBase");
static_assert(sizeof(UCharaMachineSelectsBase) == 0x000370, "Wrong size on UCharaMachineSelectsBase");
static_assert(offsetof(UCharaMachineSelectsBase, OnCharaDecideEvent) == 0x0002E0, "Member 'UCharaMachineSelectsBase::OnCharaDecideEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectsBase, OnCharaFocusEvent) == 0x0002F0, "Member 'UCharaMachineSelectsBase::OnCharaFocusEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectsBase, OnCharaFinishedEvent) == 0x000300, "Member 'UCharaMachineSelectsBase::OnCharaFinishedEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectsBase, OnCharaCancelBackEvent) == 0x000310, "Member 'UCharaMachineSelectsBase::OnCharaCancelBackEvent' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectsBase, WBP_CharaSelect_Sub_Window) == 0x000320, "Member 'UCharaMachineSelectsBase::WBP_CharaSelect_Sub_Window' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectsBase, WBP_CMN_GadgetCount) == 0x000328, "Member 'UCharaMachineSelectsBase::WBP_CMN_GadgetCount' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectsBase, CharaMachineUpdateDelay) == 0x000330, "Member 'UCharaMachineSelectsBase::CharaMachineUpdateDelay' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectsBase, CharaMachineSelectList) == 0x000338, "Member 'UCharaMachineSelectsBase::CharaMachineSelectList' has a wrong offset!");

// Class UNION.CharaMachineSelectSequence
// 0x0048 (0x03B0 - 0x0368)
class ACharaMachineSelectSequence : public AHierarchicalStateMachine
{
public:
	class UDataTable*                             DriverSizeOffsetData;                              // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             MachineTransformOffsetData;                        // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMenuInputRecieveObject*>        InputRecieveList;                                  // 0x0378(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_388[0x4];                                      // 0x0388(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnParentSequenceReadyDelegate;                     // 0x038C(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39C[0x14];                                     // 0x039C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateLocalPlayer();
	void DecideCharaIcon(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void DeleteLocalPlayer();
	void ExitCharaMachineSelectWindow();
	void FinalizeMessageBar();
	void FocusCharaIcon(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void InputReceiver_OnRightStickAxisWithPlayerId(class UObject* InObject, const struct FVector2D& InValue, const int32& InPlayerControllerIndex);
	void OnDecideCharaIcon(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void OnFocusCharaIcon(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void OnSetRacerDriver(class AMenuRacerBase* InRacer, EDriverId InDriverId);
	void OnSetRacerMachineCustomData(class AMenuRacerBase* InRacer, const struct FUserMachineCustomizeData& InData);
	void OnSetRacerRotation(class AMenuRacerBase* InRacer, float InValue);
	void OnSetRacerTransform(class AMenuRacerBase* InRacer, const struct FTransform& InTransform, bool IsNoLerp);
	void PlayVoice(int32 InPlayerIndex, EDriverId InDriverId);
	void ResetCharaMachineSelectWindow();
	void SetIsParentSequenceReady(bool Value);
	void SetNextMenuSequenceState(EMenuSequenceMainState InState);
	void SetNextMenuSequenceSubState(EMenuSequenceSubState InState);
	void SetRacerTransform(int32 InPlayerIndex, const struct FTransform& InTransform, bool IsNoLerp);
	void SetSaveRequest(bool IsSave);
	void SetupCharaMachineParamWindowColorSelectState(int32 InPlayerIndex, float InCorrectionVal);
	void SetupCharaMachineParamWindowPartsSelectState(int32 InPlayerIndex, float InCorrectionVal);
	void SetupCharaMachineSelectWindow();
	void SetupMessageBar();
	void SetupParamWindow(EMenuSequenceSubState InState, int32 InPlayerIndex, float InCorrectionVal);
	void SetupParamWindowAll(EMenuSequenceSubState InState, float InCorrectionVal);
	void StartMoveCameraTransform(bool bCharaSelect, bool NoLerp);
	void StopBGM();
	void UpdateCharaMachineParamWindow(int32 InPlayerIndex, const struct FRacerParamData& InCurrentParamData, const struct FRacerParamData& InCandParamData, const TArray<EGadgetId>& InGadgetIds);
	void UpdateParamWindow(int32 InPlayerIndex);

	struct FTransform GetMachineTransformOffset(EMachineId InMachineID) const;
	struct FTransform GetSubLevelTransform(int32 InPlayerIndex, bool IsCharaSelect) const;
	bool IsLevelLoaded() const;
	bool IsParentSequenceReady() const;
	bool IsSaveRequest() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMachineSelectSequence">();
	}
	static class ACharaMachineSelectSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACharaMachineSelectSequence>();
	}
};
static_assert(alignof(ACharaMachineSelectSequence) == 0x000008, "Wrong alignment on ACharaMachineSelectSequence");
static_assert(sizeof(ACharaMachineSelectSequence) == 0x0003B0, "Wrong size on ACharaMachineSelectSequence");
static_assert(offsetof(ACharaMachineSelectSequence, DriverSizeOffsetData) == 0x000368, "Member 'ACharaMachineSelectSequence::DriverSizeOffsetData' has a wrong offset!");
static_assert(offsetof(ACharaMachineSelectSequence, MachineTransformOffsetData) == 0x000370, "Member 'ACharaMachineSelectSequence::MachineTransformOffsetData' has a wrong offset!");
static_assert(offsetof(ACharaMachineSelectSequence, InputRecieveList) == 0x000378, "Member 'ACharaMachineSelectSequence::InputRecieveList' has a wrong offset!");
static_assert(offsetof(ACharaMachineSelectSequence, OnParentSequenceReadyDelegate) == 0x00038C, "Member 'ACharaMachineSelectSequence::OnParentSequenceReadyDelegate' has a wrong offset!");

// Class UNION.CommonRivalLevelIcon
// 0x0078 (0x0368 - 0x02F0)
class UCommonRivalLevelIcon : public UCommonUserWidget
{
public:
	uint8                                         Pad_2F0[0x10];                                     // 0x02F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Icon_Hide_Loop;                                    // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Icon_Normal_In;                                    // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Icon_Normal_Loop;                                  // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Icon_Normal_Out;                                   // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Icon_High_In;                                      // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Icon_High_Loop;                                    // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Icon_High_Out;                                     // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Icon_SuperHigh_In;                                 // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Icon_SuperHigh_Loop;                               // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Icon_SuperHigh_Out;                                // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Icon_Blank_In;                                     // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Icon_Blank_Loop;                                   // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Icon_Blank_Out;                                    // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	int32 GetState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonRivalLevelIcon">();
	}
	static class UCommonRivalLevelIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonRivalLevelIcon>();
	}
};
static_assert(alignof(UCommonRivalLevelIcon) == 0x000008, "Wrong alignment on UCommonRivalLevelIcon");
static_assert(sizeof(UCommonRivalLevelIcon) == 0x000368, "Wrong size on UCommonRivalLevelIcon");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_Hide_Loop) == 0x000300, "Member 'UCommonRivalLevelIcon::Icon_Hide_Loop' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_Normal_In) == 0x000308, "Member 'UCommonRivalLevelIcon::Icon_Normal_In' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_Normal_Loop) == 0x000310, "Member 'UCommonRivalLevelIcon::Icon_Normal_Loop' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_Normal_Out) == 0x000318, "Member 'UCommonRivalLevelIcon::Icon_Normal_Out' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_High_In) == 0x000320, "Member 'UCommonRivalLevelIcon::Icon_High_In' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_High_Loop) == 0x000328, "Member 'UCommonRivalLevelIcon::Icon_High_Loop' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_High_Out) == 0x000330, "Member 'UCommonRivalLevelIcon::Icon_High_Out' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_SuperHigh_In) == 0x000338, "Member 'UCommonRivalLevelIcon::Icon_SuperHigh_In' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_SuperHigh_Loop) == 0x000340, "Member 'UCommonRivalLevelIcon::Icon_SuperHigh_Loop' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_SuperHigh_Out) == 0x000348, "Member 'UCommonRivalLevelIcon::Icon_SuperHigh_Out' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_Blank_In) == 0x000350, "Member 'UCommonRivalLevelIcon::Icon_Blank_In' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_Blank_Loop) == 0x000358, "Member 'UCommonRivalLevelIcon::Icon_Blank_Loop' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelIcon, Icon_Blank_Out) == 0x000360, "Member 'UCommonRivalLevelIcon::Icon_Blank_Out' has a wrong offset!");

// Class UNION.UnionRacerEventManager
// 0x01E0 (0x0208 - 0x0028)
class UUnionRacerEventManager final : public UObject
{
public:
	uint8                                         Pad_28[0x1E0];                                     // 0x0028(0x01E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionRacerEventManager">();
	}
	static class UUnionRacerEventManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionRacerEventManager>();
	}
};
static_assert(alignof(UUnionRacerEventManager) == 0x000008, "Wrong alignment on UUnionRacerEventManager");
static_assert(sizeof(UUnionRacerEventManager) == 0x000208, "Wrong size on UUnionRacerEventManager");

// Class UNION.CharaMachineSelectSettingUtility
// 0x0000 (0x0028 - 0x0028)
class UCharaMachineSelectSettingUtility final : public UBlueprintFunctionLibrary
{
public:
	static bool CanSelectChara(const class UObject* WorldContextObject, EDriverId DriverId);
	static bool IsCharaEnabled(const class UObject* WorldContextObject, EDriverId DriverId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMachineSelectSettingUtility">();
	}
	static class UCharaMachineSelectSettingUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaMachineSelectSettingUtility>();
	}
};
static_assert(alignof(UCharaMachineSelectSettingUtility) == 0x000008, "Wrong alignment on UCharaMachineSelectSettingUtility");
static_assert(sizeof(UCharaMachineSelectSettingUtility) == 0x000028, "Wrong size on UCharaMachineSelectSettingUtility");

// Class UNION.DodonpaEventSpeechBeltBase
// 0x0088 (0x0368 - 0x02E0)
class UDodonpaEventSpeechBeltBase : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnMessageEnd;                                      // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UUnionRichTextBlock*                    TXT_Dialogue;                                      // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class URichTextBlockDecorator>    DialogueDecorator;                                 // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_Name;                                          // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_SpeechArrow;                                   // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       SpeechBelt_In;                                     // 0x0310(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       SpeechBelt_Out;                                    // 0x0318(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   CharacterNameText;                                 // 0x0320(0x0010)(NativeAccessSpecifierPrivate)
	class FText                                   MessageText;                                       // 0x0330(0x0010)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TextUpdateTimerHandle;                             // 0x0348(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           WaitInputTimerHandle;                              // 0x0358(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_360[0x8];                                      // 0x0360(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AllowInput();
	void Close();
	void HandleAcceptKeyPressed();
	void Open();
	void SetDecorator(TSubclassOf<class URichTextBlockDecorator> TextBlockDecorator);
	void SetSequentialText(const class FText& CharacterName, const class FText& Message);
	void SetText(const class FText& CharacterName, const class FText& Message);
	void StartWaitAllowInput();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DodonpaEventSpeechBeltBase">();
	}
	static class UDodonpaEventSpeechBeltBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDodonpaEventSpeechBeltBase>();
	}
};
static_assert(alignof(UDodonpaEventSpeechBeltBase) == 0x000008, "Wrong alignment on UDodonpaEventSpeechBeltBase");
static_assert(sizeof(UDodonpaEventSpeechBeltBase) == 0x000368, "Wrong size on UDodonpaEventSpeechBeltBase");
static_assert(offsetof(UDodonpaEventSpeechBeltBase, OnMessageEnd) == 0x0002E0, "Member 'UDodonpaEventSpeechBeltBase::OnMessageEnd' has a wrong offset!");
static_assert(offsetof(UDodonpaEventSpeechBeltBase, TXT_Dialogue) == 0x0002F0, "Member 'UDodonpaEventSpeechBeltBase::TXT_Dialogue' has a wrong offset!");
static_assert(offsetof(UDodonpaEventSpeechBeltBase, DialogueDecorator) == 0x0002F8, "Member 'UDodonpaEventSpeechBeltBase::DialogueDecorator' has a wrong offset!");
static_assert(offsetof(UDodonpaEventSpeechBeltBase, TXT_Name) == 0x000300, "Member 'UDodonpaEventSpeechBeltBase::TXT_Name' has a wrong offset!");
static_assert(offsetof(UDodonpaEventSpeechBeltBase, DSP_SpeechArrow) == 0x000308, "Member 'UDodonpaEventSpeechBeltBase::DSP_SpeechArrow' has a wrong offset!");
static_assert(offsetof(UDodonpaEventSpeechBeltBase, SpeechBelt_In) == 0x000310, "Member 'UDodonpaEventSpeechBeltBase::SpeechBelt_In' has a wrong offset!");
static_assert(offsetof(UDodonpaEventSpeechBeltBase, SpeechBelt_Out) == 0x000318, "Member 'UDodonpaEventSpeechBeltBase::SpeechBelt_Out' has a wrong offset!");
static_assert(offsetof(UDodonpaEventSpeechBeltBase, CharacterNameText) == 0x000320, "Member 'UDodonpaEventSpeechBeltBase::CharacterNameText' has a wrong offset!");
static_assert(offsetof(UDodonpaEventSpeechBeltBase, MessageText) == 0x000330, "Member 'UDodonpaEventSpeechBeltBase::MessageText' has a wrong offset!");
static_assert(offsetof(UDodonpaEventSpeechBeltBase, TextUpdateTimerHandle) == 0x000348, "Member 'UDodonpaEventSpeechBeltBase::TextUpdateTimerHandle' has a wrong offset!");
static_assert(offsetof(UDodonpaEventSpeechBeltBase, WaitInputTimerHandle) == 0x000358, "Member 'UDodonpaEventSpeechBeltBase::WaitInputTimerHandle' has a wrong offset!");

// Class UNION.CharaMachineSelectStateBase
// 0x0018 (0x0140 - 0x0128)
class UCharaMachineSelectStateBase : public UMenuSequenceSubStateBase
{
public:
	TMulticastInlineDelegate<void()>              OnMachineSelectFinished;                           // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	ECharaMachineSelectState                      DefaultCharaMachineSelectState;                    // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExitCharaMachine;                               // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuSequenceSubState                         StartState;                                        // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B[0x5];                                      // 0x013B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MatchingTimeOut(float InTimeOutTime);
	void SetMessageBarVisible(bool bInIsVisible);

	int32 GetDefaultCharaMachineSelectState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMachineSelectStateBase">();
	}
	static class UCharaMachineSelectStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaMachineSelectStateBase>();
	}
};
static_assert(alignof(UCharaMachineSelectStateBase) == 0x000008, "Wrong alignment on UCharaMachineSelectStateBase");
static_assert(sizeof(UCharaMachineSelectStateBase) == 0x000140, "Wrong size on UCharaMachineSelectStateBase");
static_assert(offsetof(UCharaMachineSelectStateBase, OnMachineSelectFinished) == 0x000128, "Member 'UCharaMachineSelectStateBase::OnMachineSelectFinished' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectStateBase, DefaultCharaMachineSelectState) == 0x000138, "Member 'UCharaMachineSelectStateBase::DefaultCharaMachineSelectState' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectStateBase, bIsExitCharaMachine) == 0x000139, "Member 'UCharaMachineSelectStateBase::bIsExitCharaMachine' has a wrong offset!");
static_assert(offsetof(UCharaMachineSelectStateBase, StartState) == 0x00013A, "Member 'UCharaMachineSelectStateBase::StartState' has a wrong offset!");

// Class UNION.CharaMachineSelectSubStateBase
// 0x0010 (0x0138 - 0x0128)
class UCharaMachineSelectSubStateBase : public UMenuSequenceSubStateBase
{
public:
	TArray<EMachineSelectControlState>            MachineSelectControlState;                         // 0x0128(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void Reset();
	void SetRacerVisible(bool IsVisible);
	void SetSaveRequest(bool IsSave);
	void Setup();
	void SetupFooter();

	class UCharaMachineSelectsBase* GetCharaMachineSelectWindow() const;
	class ACharaMachineSelectSequence* GetSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMachineSelectSubStateBase">();
	}
	static class UCharaMachineSelectSubStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaMachineSelectSubStateBase>();
	}
};
static_assert(alignof(UCharaMachineSelectSubStateBase) == 0x000008, "Wrong alignment on UCharaMachineSelectSubStateBase");
static_assert(sizeof(UCharaMachineSelectSubStateBase) == 0x000138, "Wrong size on UCharaMachineSelectSubStateBase");
static_assert(offsetof(UCharaMachineSelectSubStateBase, MachineSelectControlState) == 0x000128, "Member 'UCharaMachineSelectSubStateBase::MachineSelectControlState' has a wrong offset!");

// Class UNION.UnionMachineBaker
// 0x0058 (0x0300 - 0x02A8)
class AUnionMachineBaker final : public ASceneCapture2D
{
public:
	class USceneCaptureComponent2D*               SceneCaptureComponent;                             // 0x02A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x02B0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x02B8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C0[0x28];                                     // 0x02C0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x02E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x02F0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionMachineBaker">();
	}
	static class AUnionMachineBaker* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionMachineBaker>();
	}
};
static_assert(alignof(AUnionMachineBaker) == 0x000008, "Wrong alignment on AUnionMachineBaker");
static_assert(sizeof(AUnionMachineBaker) == 0x000300, "Wrong size on AUnionMachineBaker");
static_assert(offsetof(AUnionMachineBaker, SceneCaptureComponent) == 0x0002A8, "Member 'AUnionMachineBaker::SceneCaptureComponent' has a wrong offset!");
static_assert(offsetof(AUnionMachineBaker, RenderTarget) == 0x0002B0, "Member 'AUnionMachineBaker::RenderTarget' has a wrong offset!");
static_assert(offsetof(AUnionMachineBaker, Mid) == 0x0002B8, "Member 'AUnionMachineBaker::Mid' has a wrong offset!");
static_assert(offsetof(AUnionMachineBaker, StaticMeshComponent) == 0x0002E8, "Member 'AUnionMachineBaker::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(AUnionMachineBaker, Actor) == 0x0002F0, "Member 'AUnionMachineBaker::Actor' has a wrong offset!");

// Class UNION.CharaMachineSelectSubStateCharaSelect
// 0x0000 (0x0138 - 0x0138)
class UCharaMachineSelectSubStateCharaSelect : public UCharaMachineSelectSubStateBase
{
public:
	void OnCharaEventCancelBack();
	void OnCharaEventFinished();
	void OnCharaEventFocus(int32 InPlayerIndex, int32 InCharaIndex);
	void SetRacerDriver(int32 InPlayerIndex, EDriverId InDriverId);
	void UnregisterMainMenuAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMachineSelectSubStateCharaSelect">();
	}
	static class UCharaMachineSelectSubStateCharaSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaMachineSelectSubStateCharaSelect>();
	}
};
static_assert(alignof(UCharaMachineSelectSubStateCharaSelect) == 0x000008, "Wrong alignment on UCharaMachineSelectSubStateCharaSelect");
static_assert(sizeof(UCharaMachineSelectSubStateCharaSelect) == 0x000138, "Wrong size on UCharaMachineSelectSubStateCharaSelect");

// Class UNION.CommonRivalRewardWidget
// 0x0048 (0x0338 - 0x02F0)
class UCommonRivalRewardWidget : public UCommonUserWidget
{
public:
	class UCommonItemIcon*                        _ItemIcon;                                         // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUITextBlock*                      _CurrentWinCountText;                              // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUITextBlock*                      _NecessaryWinCountText;                            // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Active_Loop;                                       // 0x0310(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Get_InLoop;                                        // 0x0318(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Get_Loop;                                          // 0x0320(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       CountUp_InOut;                                     // 0x0328(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Lock_Loop;                                         // 0x0330(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnUpdateCountDisplayEvent();
	void PlayCountUp(int32 NewValue, const TDelegate<void(bool Aborted)>& OnFinished);
	void PlayGetting(const TDelegate<void(bool Aborted)>& OnFinished);
	void SetDetailTextIndex(const int32& Index_0);
	void SetDisplay(int32 CurrentWinCount, int32 NecessaryWinCount, ERewardType rewardType, class UTexture2D* RewardTexture, int32 NumRewards);
	void SetGadgetCost(int32 Value);
	void SetState(ECommonRivalRewardState State);
	void SetWinCount(int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonRivalRewardWidget">();
	}
	static class UCommonRivalRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonRivalRewardWidget>();
	}
};
static_assert(alignof(UCommonRivalRewardWidget) == 0x000008, "Wrong alignment on UCommonRivalRewardWidget");
static_assert(sizeof(UCommonRivalRewardWidget) == 0x000338, "Wrong size on UCommonRivalRewardWidget");
static_assert(offsetof(UCommonRivalRewardWidget, _ItemIcon) == 0x0002F0, "Member 'UCommonRivalRewardWidget::_ItemIcon' has a wrong offset!");
static_assert(offsetof(UCommonRivalRewardWidget, _CurrentWinCountText) == 0x0002F8, "Member 'UCommonRivalRewardWidget::_CurrentWinCountText' has a wrong offset!");
static_assert(offsetof(UCommonRivalRewardWidget, _NecessaryWinCountText) == 0x000300, "Member 'UCommonRivalRewardWidget::_NecessaryWinCountText' has a wrong offset!");
static_assert(offsetof(UCommonRivalRewardWidget, Active_Loop) == 0x000310, "Member 'UCommonRivalRewardWidget::Active_Loop' has a wrong offset!");
static_assert(offsetof(UCommonRivalRewardWidget, Get_InLoop) == 0x000318, "Member 'UCommonRivalRewardWidget::Get_InLoop' has a wrong offset!");
static_assert(offsetof(UCommonRivalRewardWidget, Get_Loop) == 0x000320, "Member 'UCommonRivalRewardWidget::Get_Loop' has a wrong offset!");
static_assert(offsetof(UCommonRivalRewardWidget, CountUp_InOut) == 0x000328, "Member 'UCommonRivalRewardWidget::CountUp_InOut' has a wrong offset!");
static_assert(offsetof(UCommonRivalRewardWidget, Lock_Loop) == 0x000330, "Member 'UCommonRivalRewardWidget::Lock_Loop' has a wrong offset!");

// Class UNION.ReadySequence
// 0x0000 (0x0368 - 0x0368)
class AReadySequence final : public AHierarchicalStateMachine
{
public:
	void SetNextReadyState(EReadySequenceState InState);

	EReadySequenceState GetCurrentReadyState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReadySequence">();
	}
	static class AReadySequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AReadySequence>();
	}
};
static_assert(alignof(AReadySequence) == 0x000008, "Wrong alignment on AReadySequence");
static_assert(sizeof(AReadySequence) == 0x000368, "Wrong size on AReadySequence");

// Class UNION.CharaMachineSelectSubStateMachine
// 0x0028 (0x0160 - 0x0138)
class UCharaMachineSelectSubStateMachine : public UCharaMachineSelectSubStateBase
{
public:
	float                                         CustomizeUpdateDelay;                              // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13C[0x24];                                     // 0x013C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindCharaMachineSelectWindow(class UCharaMachineSelectBase* InWindow);
	void BindMachineTypeSelectWindow(class UMachineTypeScrollControl* InMachineTypeSelectWindow);
	void CharaMachineSelectOnMachinePartsFocus(int32 InPlayerIndex, EMachineId InFrontPartsId, EMachineId InRearPartsId, EMachineId InTirePartsId);
	void CharaMachineSelectOnMachinePartsSelect(int32 InPlayerIndex, EMachineId InFrontPartsId, EMachineId InRearPartsId, EMachineId InTirePartsId);
	void FinalizeTimer();
	void RacerDecide(int32 InPlayerIndex);
	void SetMachineTypeSelectDecidedAll(bool InDecidedAll);
	void SetNextButtonVisible(bool IsVisible);
	void SetupMachineColorSelectWindow(int32 InPlayerIndex);
	void SetupMachineTypeSelectWindow(int32 InPlayerIndex);
	void UnbindCharaMachineSelectWindow(class UCharaMachineSelectBase* InWindow);
	void UnbindMachineTypeSelectWindow(class UMachineTypeScrollControl* InMachineTypeSelectWindow);
	void UpdateMachineNameByMachineId(int32 InPlayerIndex, EMachineId InMachineID);
	void UpdateMachineNameByPartsIds(int32 InPlayerIndex, EMachineId InFrontPartsId, EMachineId InRearPartsId);
	void UpdateRacerByMachineId(int32 InPlayerIndex, EMachineId InMachineID);
	void UpdateRacerMachineCustomData(int32 InPlayerIndex, const struct FUserMachineCustomizeData& InData);

	class UCharaMachineSelectBase* GetCharaMachineSubWindow(int32 InPlayerIndex) const;
	class UMachineColorSelectWindow* GetMachineColorSelectWindow(int32 InPlayerIndex) const;
	class UMachinePartsSelectWindow* GetMachinePartsSelectWindow(int32 InPlayerIndex) const;
	struct FTimerHandle GetMachinePartsUpdateTimerHandle(int32 InPlayerIndex) const;
	class UMachineTypeScrollControl* GetMachineTypeSelectWindow(int32 InPlayerIndex) const;
	struct FUserMachineCustomizeData GetSelectedMachineCustomData(int32 InPlayerIndex) const;
	EMachineId GetSelectedMachineID(int32 InPlayerIndex) const;
	ECarStatusType GetSelectedMachineType(int32 InPlayerIndex) const;
	bool IsAllPlayerSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMachineSelectSubStateMachine">();
	}
	static class UCharaMachineSelectSubStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaMachineSelectSubStateMachine>();
	}
};
static_assert(alignof(UCharaMachineSelectSubStateMachine) == 0x000008, "Wrong alignment on UCharaMachineSelectSubStateMachine");
static_assert(sizeof(UCharaMachineSelectSubStateMachine) == 0x000160, "Wrong size on UCharaMachineSelectSubStateMachine");
static_assert(offsetof(UCharaMachineSelectSubStateMachine, CustomizeUpdateDelay) == 0x000138, "Member 'UCharaMachineSelectSubStateMachine::CustomizeUpdateDelay' has a wrong offset!");

// Class UNION.DecisionWidget
// 0x0028 (0x04A8 - 0x0480)
class UDecisionWidget : public UUnionUIButtonBase
{
public:
	class UUnionRichTextBlock*                    TXT_OK;                                            // 0x0480(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           DSP_Player_Cursor;                                 // 0x0488(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          FocusSoundCue;                                     // 0x0490(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          CancelSoundCue;                                    // 0x0498(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A0[0x8];                                      // 0x04A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayAnimActiveLoop();
	void PlayAnimActiveToSelect();
	void PlayAnimSelectLoop();
	void PlayAnimSelectToActive();
	void SetCursorVisible(bool IsVisible_0);
	void SetText(const class FText& InText);

	int32 GetPlayerIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DecisionWidget">();
	}
	static class UDecisionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDecisionWidget>();
	}
};
static_assert(alignof(UDecisionWidget) == 0x000008, "Wrong alignment on UDecisionWidget");
static_assert(sizeof(UDecisionWidget) == 0x0004A8, "Wrong size on UDecisionWidget");
static_assert(offsetof(UDecisionWidget, TXT_OK) == 0x000480, "Member 'UDecisionWidget::TXT_OK' has a wrong offset!");
static_assert(offsetof(UDecisionWidget, DSP_Player_Cursor) == 0x000488, "Member 'UDecisionWidget::DSP_Player_Cursor' has a wrong offset!");
static_assert(offsetof(UDecisionWidget, FocusSoundCue) == 0x000490, "Member 'UDecisionWidget::FocusSoundCue' has a wrong offset!");
static_assert(offsetof(UDecisionWidget, CancelSoundCue) == 0x000498, "Member 'UDecisionWidget::CancelSoundCue' has a wrong offset!");

// Class UNION.CharaSelectCharaIcon
// 0x0150 (0x05D0 - 0x0480)
class UCharaSelectCharaIcon : public UUnionUIButtonBase
{
public:
	TMulticastInlineDelegate<void(int32 PlayerControllerIndex, int32 CharaIndex)> Event_HoverIcon;   // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerControllerIndex, int32 CharaIndex)> Event_UnhoverIcon; // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerControllerIndex, int32 CharaIndex)> Event_Decision;    // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerControllerIndex)> Event_Cancel;                        // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UImage*                                 MLC_CharaIcon_CursorBG;                            // 0x04C0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_CharaIcon;                          // 0x04C8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_CharaIcon;                                     // 0x04D0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_LockCover;                                     // 0x04D8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_LockIcon;                           // 0x04E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 P1_Cursor;                                         // 0x04E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 P2_Cursor;                                         // 0x04F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 P3_Cursor;                                         // 0x04F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 P4_Cursor;                                         // 0x0500(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonPlayerNumber*                    WBP_CMN_PlayerNumber_P1;                           // 0x0508(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonPlayerNumber*                    WBP_CMN_PlayerNumber_P2;                           // 0x0510(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonPlayerNumber*                    WBP_CMN_PlayerNumber_P3;                           // 0x0518(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonPlayerNumber*                    WBP_CMN_PlayerNumber_P4;                           // 0x0520(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonPlayerNumber*                    WBP_CMN_PlayerNumber_Decide;                       // 0x0528(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_RivalSelectIcon;                    // 0x0530(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharaSelectRivalWinIcon*               WBP_RivalWinIcon;                                  // 0x0538(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_NewIcon;                                       // 0x0540(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonShopLabel*                       WBP_Chara_ShopLabel;                               // 0x0548(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CharaIndex;                                        // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_554[0x4];                                      // 0x0554(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          FocusSoundAtomCue;                                 // 0x0558(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BGColorNone;                                       // 0x0560(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FLinearColor>                   BGColorPlayer;                                     // 0x0570(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                            PriceColorActive;                                  // 0x0580(0x0014)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                            PriceColorDisable;                                 // 0x0594(0x0014)(Edit, Protected, NativeAccessSpecifierProtected)
	class ADLCStoreDialogActor*                   DLCDialog;                                         // 0x05A8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5B0[0x20];                                     // 0x05B0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CallbackDialogPrice(EDialogResult InResult, int32 InPrice);
	void CallbackDialogUnlock();
	void Cancel(int32 InPlayerIndex, bool IsPlaySound);
	void CreateDialogPrice(int32 InPlayerIndex, int32 InPrice);
	void CreateDialogUnlock(int32 InPlayerIndex);
	void DeleteDialogDLC(bool IsAccept);
	void Event_OnCancel_Impl(int32 InPlayerIndex, bool IsPlaySound);
	void Event_OnDecision_Impl(int32 InPlayerIndex);
	void Event_OnRandomSelect_Impl(int32 InPlayerIndex);
	void PlayAnimationActiveLoop();
	void PlayAnimationPushPlayer(int32 InPlayerIndex);
	void PlayAnimationSelectImpossible();
	void PlayAnimationSelectLoop();
	void PlayAnimationUnlock();
	void PlaySoundCancel();
	void PlaySoundDecision();
	void PlaySoundDecisionRivalSelect();
	void PlaySoundImpossible();
	void SelectRivalIconType(bool Selected, bool RivalLevelEnhanced);
	void SetActiveRivalSelectIcon(ERivalSelectIconType InType);
	void SetDecisionPlayerIndex(int32 InPlayerIndex);
	void SetShopLabel(ELockType InType, int32 InPrice);
	void SetShowDialog(bool InFlag);
	void SetVisibilityFriendShipIcon(bool Visible);
	void SetVisibilityLockCover(bool IsVisible_0);
	void SetVisibilityRivalSelectIcon(bool IsVisible_0);
	void SetVisibilityRivalWinIcon(bool Visible);
	void StopAnimationAllPushPlayer();
	void StopAnimationPushPlayer(int32 InPlayerIndex);
	void UpdateBGColor();

	int32 GetCharaIndex() const;
	struct FDriverData GetDriverData() const;
	EDriverId GetDriverID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaSelectCharaIcon">();
	}
	static class UCharaSelectCharaIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaSelectCharaIcon>();
	}
};
static_assert(alignof(UCharaSelectCharaIcon) == 0x000008, "Wrong alignment on UCharaSelectCharaIcon");
static_assert(sizeof(UCharaSelectCharaIcon) == 0x0005D0, "Wrong size on UCharaSelectCharaIcon");
static_assert(offsetof(UCharaSelectCharaIcon, Event_HoverIcon) == 0x000480, "Member 'UCharaSelectCharaIcon::Event_HoverIcon' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, Event_UnhoverIcon) == 0x000490, "Member 'UCharaSelectCharaIcon::Event_UnhoverIcon' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, Event_Decision) == 0x0004A0, "Member 'UCharaSelectCharaIcon::Event_Decision' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, Event_Cancel) == 0x0004B0, "Member 'UCharaSelectCharaIcon::Event_Cancel' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, MLC_CharaIcon_CursorBG) == 0x0004C0, "Member 'UCharaSelectCharaIcon::MLC_CharaIcon_CursorBG' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, WidgetSwitcher_CharaIcon) == 0x0004C8, "Member 'UCharaSelectCharaIcon::WidgetSwitcher_CharaIcon' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, DMY_CharaIcon) == 0x0004D0, "Member 'UCharaSelectCharaIcon::DMY_CharaIcon' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, DSP_LockCover) == 0x0004D8, "Member 'UCharaSelectCharaIcon::DSP_LockCover' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, WidgetSwitcher_LockIcon) == 0x0004E0, "Member 'UCharaSelectCharaIcon::WidgetSwitcher_LockIcon' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, P1_Cursor) == 0x0004E8, "Member 'UCharaSelectCharaIcon::P1_Cursor' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, P2_Cursor) == 0x0004F0, "Member 'UCharaSelectCharaIcon::P2_Cursor' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, P3_Cursor) == 0x0004F8, "Member 'UCharaSelectCharaIcon::P3_Cursor' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, P4_Cursor) == 0x000500, "Member 'UCharaSelectCharaIcon::P4_Cursor' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, WBP_CMN_PlayerNumber_P1) == 0x000508, "Member 'UCharaSelectCharaIcon::WBP_CMN_PlayerNumber_P1' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, WBP_CMN_PlayerNumber_P2) == 0x000510, "Member 'UCharaSelectCharaIcon::WBP_CMN_PlayerNumber_P2' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, WBP_CMN_PlayerNumber_P3) == 0x000518, "Member 'UCharaSelectCharaIcon::WBP_CMN_PlayerNumber_P3' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, WBP_CMN_PlayerNumber_P4) == 0x000520, "Member 'UCharaSelectCharaIcon::WBP_CMN_PlayerNumber_P4' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, WBP_CMN_PlayerNumber_Decide) == 0x000528, "Member 'UCharaSelectCharaIcon::WBP_CMN_PlayerNumber_Decide' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, WidgetSwitcher_RivalSelectIcon) == 0x000530, "Member 'UCharaSelectCharaIcon::WidgetSwitcher_RivalSelectIcon' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, WBP_RivalWinIcon) == 0x000538, "Member 'UCharaSelectCharaIcon::WBP_RivalWinIcon' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, DSP_NewIcon) == 0x000540, "Member 'UCharaSelectCharaIcon::DSP_NewIcon' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, WBP_Chara_ShopLabel) == 0x000548, "Member 'UCharaSelectCharaIcon::WBP_Chara_ShopLabel' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, CharaIndex) == 0x000550, "Member 'UCharaSelectCharaIcon::CharaIndex' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, FocusSoundAtomCue) == 0x000558, "Member 'UCharaSelectCharaIcon::FocusSoundAtomCue' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, BGColorNone) == 0x000560, "Member 'UCharaSelectCharaIcon::BGColorNone' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, BGColorPlayer) == 0x000570, "Member 'UCharaSelectCharaIcon::BGColorPlayer' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, PriceColorActive) == 0x000580, "Member 'UCharaSelectCharaIcon::PriceColorActive' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, PriceColorDisable) == 0x000594, "Member 'UCharaSelectCharaIcon::PriceColorDisable' has a wrong offset!");
static_assert(offsetof(UCharaSelectCharaIcon, DLCDialog) == 0x0005A8, "Member 'UCharaSelectCharaIcon::DLCDialog' has a wrong offset!");

// Class UNION.SkeletalMeshActorBudgeted
// 0x0000 (0x0310 - 0x0310)
class ASkeletalMeshActorBudgeted final : public ASkeletalMeshActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkeletalMeshActorBudgeted">();
	}
	static class ASkeletalMeshActorBudgeted* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASkeletalMeshActorBudgeted>();
	}
};
static_assert(alignof(ASkeletalMeshActorBudgeted) == 0x000008, "Wrong alignment on ASkeletalMeshActorBudgeted");
static_assert(sizeof(ASkeletalMeshActorBudgeted) == 0x000310, "Wrong size on ASkeletalMeshActorBudgeted");

// Class UNION.MenuResourceElement
// 0x0038 (0x0060 - 0x0028)
class UMenuResourceElement : public UObject
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLoadResource();
	void OnUnloadResource();
	void SetEmpty(bool bInIsEmpty);

	int32 GetAllIndex() const;
	int32 GetColumnIndex() const;
	int32 GetRowIndex() const;
	bool IsEmpty() const;
	bool IsLoading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuResourceElement">();
	}
	static class UMenuResourceElement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuResourceElement>();
	}
};
static_assert(alignof(UMenuResourceElement) == 0x000008, "Wrong alignment on UMenuResourceElement");
static_assert(sizeof(UMenuResourceElement) == 0x000060, "Wrong size on UMenuResourceElement");

// Class UNION.TopInfoWidgetSubCategoryBase
// 0x0018 (0x02F8 - 0x02E0)
class UTopInfoWidgetSubCategoryBase : public UUserWidget
{
public:
	class UCommonMenuPopupSubBtnStandard*         ButtonStandard;                                    // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuPopupSubBtnStandard*         ButtonWorldMatch;                                  // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsDLCButtonEnable;                                 // 0x02F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetupButtonStandard(class UCommonMenuPopupSubBtnStandard* ButtonInstance);
	void SetupButtonWorldMatch(class UCommonMenuPopupSubBtnStandard* ButtonInstance);
	void UpdateButtonStringAndVisible(ETopInfoWidgetPageCategory PageCategory);
	void UpdatePageDisplay(ETopInfoWidgetPageCategory PageCategory, bool ButtonFocus, bool IsNew);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TopInfoWidgetSubCategoryBase">();
	}
	static class UTopInfoWidgetSubCategoryBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTopInfoWidgetSubCategoryBase>();
	}
};
static_assert(alignof(UTopInfoWidgetSubCategoryBase) == 0x000008, "Wrong alignment on UTopInfoWidgetSubCategoryBase");
static_assert(sizeof(UTopInfoWidgetSubCategoryBase) == 0x0002F8, "Wrong size on UTopInfoWidgetSubCategoryBase");
static_assert(offsetof(UTopInfoWidgetSubCategoryBase, ButtonStandard) == 0x0002E0, "Member 'UTopInfoWidgetSubCategoryBase::ButtonStandard' has a wrong offset!");
static_assert(offsetof(UTopInfoWidgetSubCategoryBase, ButtonWorldMatch) == 0x0002E8, "Member 'UTopInfoWidgetSubCategoryBase::ButtonWorldMatch' has a wrong offset!");
static_assert(offsetof(UTopInfoWidgetSubCategoryBase, IsDLCButtonEnable) == 0x0002F0, "Member 'UTopInfoWidgetSubCategoryBase::IsDLCButtonEnable' has a wrong offset!");

// Class UNION.CharaSelectResourceElement
// 0x0030 (0x0090 - 0x0060)
class UCharaSelectResourceElement final : public UMenuResourceElement
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharaSelectResource                   CharaSelectResource;                               // 0x0068(0x0018)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaSelectResourceElement">();
	}
	static class UCharaSelectResourceElement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaSelectResourceElement>();
	}
};
static_assert(alignof(UCharaSelectResourceElement) == 0x000008, "Wrong alignment on UCharaSelectResourceElement");
static_assert(sizeof(UCharaSelectResourceElement) == 0x000090, "Wrong size on UCharaSelectResourceElement");
static_assert(offsetof(UCharaSelectResourceElement, CharaSelectResource) == 0x000068, "Member 'UCharaSelectResourceElement::CharaSelectResource' has a wrong offset!");

// Class UNION.CommonSubMenuButton
// 0x0060 (0x04E0 - 0x0480)
class UCommonSubMenuButton : public UUnionUIButtonBase
{
public:
	class UUnionRichTextBlock*                    TXT_MiniBtn;                                       // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Set_Icon;                                      // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Cursor_Texture;                                // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Btn_Active_Loop;                                   // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Btn_Select_Loop;                                   // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          FocusSoundCue;                                     // 0x04A8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          DecisionSoundCue;                                  // 0x04B0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          CancelSoundCue;                                    // 0x04B8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          ShoulderSoundCue;                                  // 0x04C0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   Text;                                              // 0x04C8(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          bActionExecuteOnReleaseMode;                       // 0x04D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bActionExecuteReady;                               // 0x04D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4DA[0x6];                                      // 0x04DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActive(bool bInIsActive);
	void SetCursorVisible(bool bInIsVisible);
	void SetSelectIconVisible(bool bInIsVisible);
	void SetText(const class FText& InText);

	void GetText(class FText* OutText) const;
	bool IsActive() const;
	bool IsCursorVisible() const;
	bool IsSelectIconVisible() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonSubMenuButton">();
	}
	static class UCommonSubMenuButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonSubMenuButton>();
	}
};
static_assert(alignof(UCommonSubMenuButton) == 0x000008, "Wrong alignment on UCommonSubMenuButton");
static_assert(sizeof(UCommonSubMenuButton) == 0x0004E0, "Wrong size on UCommonSubMenuButton");
static_assert(offsetof(UCommonSubMenuButton, TXT_MiniBtn) == 0x000480, "Member 'UCommonSubMenuButton::TXT_MiniBtn' has a wrong offset!");
static_assert(offsetof(UCommonSubMenuButton, DSP_Set_Icon) == 0x000488, "Member 'UCommonSubMenuButton::DSP_Set_Icon' has a wrong offset!");
static_assert(offsetof(UCommonSubMenuButton, DSP_Cursor_Texture) == 0x000490, "Member 'UCommonSubMenuButton::DSP_Cursor_Texture' has a wrong offset!");
static_assert(offsetof(UCommonSubMenuButton, Btn_Active_Loop) == 0x000498, "Member 'UCommonSubMenuButton::Btn_Active_Loop' has a wrong offset!");
static_assert(offsetof(UCommonSubMenuButton, Btn_Select_Loop) == 0x0004A0, "Member 'UCommonSubMenuButton::Btn_Select_Loop' has a wrong offset!");
static_assert(offsetof(UCommonSubMenuButton, FocusSoundCue) == 0x0004A8, "Member 'UCommonSubMenuButton::FocusSoundCue' has a wrong offset!");
static_assert(offsetof(UCommonSubMenuButton, DecisionSoundCue) == 0x0004B0, "Member 'UCommonSubMenuButton::DecisionSoundCue' has a wrong offset!");
static_assert(offsetof(UCommonSubMenuButton, CancelSoundCue) == 0x0004B8, "Member 'UCommonSubMenuButton::CancelSoundCue' has a wrong offset!");
static_assert(offsetof(UCommonSubMenuButton, ShoulderSoundCue) == 0x0004C0, "Member 'UCommonSubMenuButton::ShoulderSoundCue' has a wrong offset!");
static_assert(offsetof(UCommonSubMenuButton, Text) == 0x0004C8, "Member 'UCommonSubMenuButton::Text' has a wrong offset!");
static_assert(offsetof(UCommonSubMenuButton, bActionExecuteOnReleaseMode) == 0x0004D8, "Member 'UCommonSubMenuButton::bActionExecuteOnReleaseMode' has a wrong offset!");
static_assert(offsetof(UCommonSubMenuButton, bActionExecuteReady) == 0x0004D9, "Member 'UCommonSubMenuButton::bActionExecuteReady' has a wrong offset!");

// Class UNION.StaffrollTextDataTableLoader
// 0x0020 (0x0048 - 0x0028)
class UStaffrollTextDataTableLoader final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             _LoadedDataTable;                                  // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollTextDataTableLoader">();
	}
	static class UStaffrollTextDataTableLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollTextDataTableLoader>();
	}
};
static_assert(alignof(UStaffrollTextDataTableLoader) == 0x000008, "Wrong alignment on UStaffrollTextDataTableLoader");
static_assert(sizeof(UStaffrollTextDataTableLoader) == 0x000048, "Wrong size on UStaffrollTextDataTableLoader");
static_assert(offsetof(UStaffrollTextDataTableLoader, _LoadedDataTable) == 0x000030, "Member 'UStaffrollTextDataTableLoader::_LoadedDataTable' has a wrong offset!");

// Class UNION.CharaSelectRivalWinIcon
// 0x0020 (0x0300 - 0x02E0)
class UCharaSelectRivalWinIcon : public UUserWidget
{
public:
	class UWidgetAnimation*                       AnimEasyIn;                                        // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       AnimEasyLoop;                                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       AnimMaxIn;                                         // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       AnimMaxLoop;                                       // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void PlayAnimEasyIn();
	void PlayAnimEasyLoop();
	void PlayAnimMaxIn();
	void PlayAnimMaxLoop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaSelectRivalWinIcon">();
	}
	static class UCharaSelectRivalWinIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaSelectRivalWinIcon>();
	}
};
static_assert(alignof(UCharaSelectRivalWinIcon) == 0x000008, "Wrong alignment on UCharaSelectRivalWinIcon");
static_assert(sizeof(UCharaSelectRivalWinIcon) == 0x000300, "Wrong size on UCharaSelectRivalWinIcon");
static_assert(offsetof(UCharaSelectRivalWinIcon, AnimEasyIn) == 0x0002E0, "Member 'UCharaSelectRivalWinIcon::AnimEasyIn' has a wrong offset!");
static_assert(offsetof(UCharaSelectRivalWinIcon, AnimEasyLoop) == 0x0002E8, "Member 'UCharaSelectRivalWinIcon::AnimEasyLoop' has a wrong offset!");
static_assert(offsetof(UCharaSelectRivalWinIcon, AnimMaxIn) == 0x0002F0, "Member 'UCharaSelectRivalWinIcon::AnimMaxIn' has a wrong offset!");
static_assert(offsetof(UCharaSelectRivalWinIcon, AnimMaxLoop) == 0x0002F8, "Member 'UCharaSelectRivalWinIcon::AnimMaxLoop' has a wrong offset!");

// Class UNION.Drone
// 0x0150 (0x03E0 - 0x0290)
class alignas(0x10) ADrone : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Root;                                              // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              BodyComponent;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionWidgetComponent*                  MonitorComponent;                                  // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    AppearSound;                                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    RemainDistanceSound;                               // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    ReversSound;                                       // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDroneRelativeTrasformInfo>     TransformInfos;                                    // 0x02C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ShowTime;                                          // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CautionReverseInterval;                            // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleMoveAmplitude;                                 // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCallDroneInfo                         CurrentInfo;                                       // 0x02E4(0x0004)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x02E8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CautionReversTimerHandle;                          // 0x02F0(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundHandle                           ReverseSoundHandle;                                // 0x02F8(0x0004)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FC[0xE4];                                     // 0x02FC(0x00E4)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DismissDrone();
	void FinishTimeline();
	void FSMChangeState(EDroneState NextState);
	int32 GetDroneMaterialIndex(const struct FCallDroneInfo& Info);
	void OnCallDrone(bool bNewAdded);
	void PostFinishDrone();
	void PreCallDrone();
	void SetDroneMaterialReverse(bool bIsReverse);
	void SetDroneMaterials();
	void SetIdleTransform(const float PosYRatio);
	void SetInOutTransform(const float PosRatio, const float RotRatio);
	bool UpdateTimer(const float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Drone">();
	}
	static class ADrone* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADrone>();
	}
};
static_assert(alignof(ADrone) == 0x000010, "Wrong alignment on ADrone");
static_assert(sizeof(ADrone) == 0x0003E0, "Wrong size on ADrone");
static_assert(offsetof(ADrone, Root) == 0x000298, "Member 'ADrone::Root' has a wrong offset!");
static_assert(offsetof(ADrone, BodyComponent) == 0x0002A0, "Member 'ADrone::BodyComponent' has a wrong offset!");
static_assert(offsetof(ADrone, MonitorComponent) == 0x0002A8, "Member 'ADrone::MonitorComponent' has a wrong offset!");
static_assert(offsetof(ADrone, AppearSound) == 0x0002B0, "Member 'ADrone::AppearSound' has a wrong offset!");
static_assert(offsetof(ADrone, RemainDistanceSound) == 0x0002B8, "Member 'ADrone::RemainDistanceSound' has a wrong offset!");
static_assert(offsetof(ADrone, ReversSound) == 0x0002C0, "Member 'ADrone::ReversSound' has a wrong offset!");
static_assert(offsetof(ADrone, TransformInfos) == 0x0002C8, "Member 'ADrone::TransformInfos' has a wrong offset!");
static_assert(offsetof(ADrone, ShowTime) == 0x0002D8, "Member 'ADrone::ShowTime' has a wrong offset!");
static_assert(offsetof(ADrone, CautionReverseInterval) == 0x0002DC, "Member 'ADrone::CautionReverseInterval' has a wrong offset!");
static_assert(offsetof(ADrone, IdleMoveAmplitude) == 0x0002E0, "Member 'ADrone::IdleMoveAmplitude' has a wrong offset!");
static_assert(offsetof(ADrone, CurrentInfo) == 0x0002E4, "Member 'ADrone::CurrentInfo' has a wrong offset!");
static_assert(offsetof(ADrone, Timer) == 0x0002E8, "Member 'ADrone::Timer' has a wrong offset!");
static_assert(offsetof(ADrone, CautionReversTimerHandle) == 0x0002F0, "Member 'ADrone::CautionReversTimerHandle' has a wrong offset!");
static_assert(offsetof(ADrone, ReverseSoundHandle) == 0x0002F8, "Member 'ADrone::ReverseSoundHandle' has a wrong offset!");

// Class UNION.CharaSelectUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UCharaSelectUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DisableMenuInputDirection(class UObject* WorldContextObject, const ECharaSelectControlState CharaState, const EMachineSelectControlState MachineState, int32 InPlayerIndex);
	static bool GetArrayFlag(int32 InPlayerIndex, const TArray<bool>& InFlagArray);
	static class AActor* GetCaptureMachine(class UObject* WorldContextObject, int32 InPlayerIndex);
	static EGameModeId GetLobbySelectedGameModeId(class UObject* WorldContextObject);
	static bool IsDriverSelectable(class UObject* WorldContextObject, EDriverId InDriverId);
	static bool IsDriverSuper(EDriverId InDriverId);
	static void SetArrayFlag(int32 InPlayerIndex, bool InFlag, TArray<bool>& InFlagArray);
	static void SetVisibleCaptureMachine(class UObject* WorldContextObject, int32 InPlayerIndex, bool IsHidden);
	static void UpdateCharaModel(class UObject* WorldContextObject, int32 InPlayerIndex, int32 InCharaSelectIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaSelectUtilityLibrary">();
	}
	static class UCharaSelectUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaSelectUtilityLibrary>();
	}
};
static_assert(alignof(UCharaSelectUtilityLibrary) == 0x000008, "Wrong alignment on UCharaSelectUtilityLibrary");
static_assert(sizeof(UCharaSelectUtilityLibrary) == 0x000028, "Wrong size on UCharaSelectUtilityLibrary");

// Class UNION.RivalSelectState
// 0x0040 (0x0168 - 0x0128)
class URivalSelectState : public UMenuSequenceSubStateBase
{
public:
	TSoftClassPtr<class UClass>                   _WidgetClass;                                      // 0x0128(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URivalSelectWidget*                     _Widget;                                           // 0x0150(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_158[0x10];                                     // 0x0158(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UHintPopupWindow* CreateTipsWindow();
	void OnCanceled(uint8 RivalLevel);
	void OnDecision(EDriverId DriverId, uint8 RivalLevel);
	void OnDecisionAnimFinished();
	void OnTipsWindowClosed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RivalSelectState">();
	}
	static class URivalSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<URivalSelectState>();
	}
};
static_assert(alignof(URivalSelectState) == 0x000008, "Wrong alignment on URivalSelectState");
static_assert(sizeof(URivalSelectState) == 0x000168, "Wrong size on URivalSelectState");
static_assert(offsetof(URivalSelectState, _WidgetClass) == 0x000128, "Member 'URivalSelectState::_WidgetClass' has a wrong offset!");
static_assert(offsetof(URivalSelectState, _Widget) == 0x000150, "Member 'URivalSelectState::_Widget' has a wrong offset!");

// Class UNION.CharaSelectWindow
// 0x0100 (0x04D8 - 0x03D8)
class UCharaSelectWindow : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(int32 InPlayerIndex, int32 InCharaIndex)> OnEventHover;            // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InPlayerIndex, int32 InCharaIndex)> OnEventUnhover;          // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InPlayerIndex, int32 InCharaIndex)> OnEventDecision;         // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InPlayerIndex)> OnEventCancel;                               // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnUpdateNew;                                       // 0x0418(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UUniformGridPanel*                      UniformGridPanelCharaIcon;                         // 0x0428(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStoreBalloon*                          WBP_CharaMachineSelect_Balloon;                    // 0x0430(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOutOfContentButton*                    OutOfContentButton;                                // 0x0438(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRivalSelectMode;                                  // 0x0440(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFriendShipSelectMode;                             // 0x0441(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_442[0x6];                                      // 0x0442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            FocusPlayerCharaIndex;                             // 0x0448(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              BalloonMoveSize;                                   // 0x0498(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              BalloonMoveOffset;                                 // 0x04A8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            PopupWindow;                                       // 0x04B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButtonsPanel*                   ButtonsPanel;                                      // 0x04C0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPopupWindowOpen;                                  // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C9[0xF];                                      // 0x04C9(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CalcButtonNavigation(class UUnionUIButtonBase* InCurrent, int32 InButtonIndex);
	void IconCancel(int32 InPlayerControllerIndex);
	void IconDecision(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void IconHover(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void IconUnhover(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void InitializePlayerFocus();
	void OnBindIcons(class UCharaSelectCharaIcon* InIcon);
	void OnPopupWindowClose(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnUnbindIcons(class UCharaSelectCharaIcon* InIcon);
	void SelectRivalIconTypeNative(int32 CharaIndex, bool SelectedPowerRival);
	void SetIconsFocus(int32 InPlayerIndex, int32 InCharaIndex);
	void Setup();
	void UpdateIconsFriendShip(int32 MaxTicket);
	void UpdateRivalIconsSelectable();

	TArray<class UUnionUIButtonBase*> GetButtons() const;
	class UCharaSelectCharaIcon* GetIcon(int32 InIconIndex) const;
	class UCharaSelectCharaIcon* GetIconForCharaIndex(int32 InCharaIndex) const;
	class UCharaSelectCharaIcon* GetIconForDriverID(EDriverId InDriverId) const;
	class UCharaSelectCharaIcon* GetIconForPlayerIndex(int32 InPlayerIndex) const;
	class UCharaSelectCharaIcon* GetIconRandom() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaSelectWindow">();
	}
	static class UCharaSelectWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaSelectWindow>();
	}
};
static_assert(alignof(UCharaSelectWindow) == 0x000008, "Wrong alignment on UCharaSelectWindow");
static_assert(sizeof(UCharaSelectWindow) == 0x0004D8, "Wrong size on UCharaSelectWindow");
static_assert(offsetof(UCharaSelectWindow, OnEventHover) == 0x0003D8, "Member 'UCharaSelectWindow::OnEventHover' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, OnEventUnhover) == 0x0003E8, "Member 'UCharaSelectWindow::OnEventUnhover' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, OnEventDecision) == 0x0003F8, "Member 'UCharaSelectWindow::OnEventDecision' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, OnEventCancel) == 0x000408, "Member 'UCharaSelectWindow::OnEventCancel' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, OnUpdateNew) == 0x000418, "Member 'UCharaSelectWindow::OnUpdateNew' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, UniformGridPanelCharaIcon) == 0x000428, "Member 'UCharaSelectWindow::UniformGridPanelCharaIcon' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, WBP_CharaMachineSelect_Balloon) == 0x000430, "Member 'UCharaSelectWindow::WBP_CharaMachineSelect_Balloon' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, OutOfContentButton) == 0x000438, "Member 'UCharaSelectWindow::OutOfContentButton' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, bRivalSelectMode) == 0x000440, "Member 'UCharaSelectWindow::bRivalSelectMode' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, bFriendShipSelectMode) == 0x000441, "Member 'UCharaSelectWindow::bFriendShipSelectMode' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, FocusPlayerCharaIndex) == 0x000448, "Member 'UCharaSelectWindow::FocusPlayerCharaIndex' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, BalloonMoveSize) == 0x000498, "Member 'UCharaSelectWindow::BalloonMoveSize' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, BalloonMoveOffset) == 0x0004A8, "Member 'UCharaSelectWindow::BalloonMoveOffset' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, PopupWindow) == 0x0004B8, "Member 'UCharaSelectWindow::PopupWindow' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, ButtonsPanel) == 0x0004C0, "Member 'UCharaSelectWindow::ButtonsPanel' has a wrong offset!");
static_assert(offsetof(UCharaSelectWindow, bPopupWindowOpen) == 0x0004C8, "Member 'UCharaSelectWindow::bPopupWindowOpen' has a wrong offset!");

// Class UNION.CheatAura
// 0x0000 (0x0028 - 0x0028)
class UCheatAura final : public UObject
{
public:
	void PlayAuraEffect();
	void PlayAuraEffectID(EMachineAuraId InAuraID);
	void PlayRandomAuraEffect();
	void UnlockAura();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatAura">();
	}
	static class UCheatAura* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatAura>();
	}
};
static_assert(alignof(UCheatAura) == 0x000008, "Wrong alignment on UCheatAura");
static_assert(sizeof(UCheatAura) == 0x000028, "Wrong size on UCheatAura");

// Class UNION.CommonUIController
// 0x0178 (0x0458 - 0x02E0)
class UCommonUIController : public UUserWidget
{
public:
	class UOverlay*                               Overlay_Trigger_L;                                 // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_Down_Trigger_L;                              // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Image_Release_L;                                   // 0x02F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_Trigger_L_TXT;                      // 0x02F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_Btn_Trigger_L_Hold;                            // 0x0300(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_Btn_Trigger_L_Release;                         // 0x0308(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Overlay_Trigger_R;                                 // 0x0310(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_Down_Trigger_R;                              // 0x0318(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Image_Release_R;                                   // 0x0320(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_Trigger_R_TXT;                      // 0x0328(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_Btn_Trigger_R_Hold;                            // 0x0330(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_Btn_Trigger_R_Release;                         // 0x0338(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Overlay_StkL;                                      // 0x0340(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_StkL_L;                                      // 0x0348(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_StkL_R;                                      // 0x0350(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_StkL_B;                                      // 0x0358(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_StkL_T;                                      // 0x0360(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_StkL;                               // 0x0368(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_StkL_Hold;                                     // 0x0370(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_StkL_Release;                                  // 0x0378(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Overlay_StkR;                                      // 0x0380(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_StkR_L;                                      // 0x0388(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_StkR_R;                                      // 0x0390(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_StkR_B;                                      // 0x0398(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_StkR_T;                                      // 0x03A0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_StkR;                               // 0x03A8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_StkR_Hold;                                     // 0x03B0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_StkR_Release;                                  // 0x03B8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Overlay_Direction;                                 // 0x03C0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_Direction_L;                                 // 0x03C8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_Direction_R;                                 // 0x03D0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_Direction_B;                                 // 0x03D8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Arrow_Direction_T;                                 // 0x03E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_Direction;                          // 0x03E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_Direction_Hold;                                // 0x03F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_Direction_Release;                             // 0x03F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Overlay_4Btn;                                      // 0x0400(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Guide_Btn1;                                        // 0x0408(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Guide_Btn2;                                        // 0x0410(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Guide_Btn3;                                        // 0x0418(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Guide_Btn4;                                        // 0x0420(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_4Btn;                               // 0x0428(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_4Btn_Hold;                                     // 0x0430(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_4Btn_Release;                                  // 0x0438(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_440[0x18];                                     // 0x0440(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetupTable(const struct FTutorialControllerKeysTable& InTable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUIController">();
	}
	static class UCommonUIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUIController>();
	}
};
static_assert(alignof(UCommonUIController) == 0x000008, "Wrong alignment on UCommonUIController");
static_assert(sizeof(UCommonUIController) == 0x000458, "Wrong size on UCommonUIController");
static_assert(offsetof(UCommonUIController, Overlay_Trigger_L) == 0x0002E0, "Member 'UCommonUIController::Overlay_Trigger_L' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_Down_Trigger_L) == 0x0002E8, "Member 'UCommonUIController::Arrow_Down_Trigger_L' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Image_Release_L) == 0x0002F0, "Member 'UCommonUIController::Image_Release_L' has a wrong offset!");
static_assert(offsetof(UCommonUIController, WidgetSwitcher_Trigger_L_TXT) == 0x0002F8, "Member 'UCommonUIController::WidgetSwitcher_Trigger_L_TXT' has a wrong offset!");
static_assert(offsetof(UCommonUIController, TXT_Btn_Trigger_L_Hold) == 0x000300, "Member 'UCommonUIController::TXT_Btn_Trigger_L_Hold' has a wrong offset!");
static_assert(offsetof(UCommonUIController, TXT_Btn_Trigger_L_Release) == 0x000308, "Member 'UCommonUIController::TXT_Btn_Trigger_L_Release' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Overlay_Trigger_R) == 0x000310, "Member 'UCommonUIController::Overlay_Trigger_R' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_Down_Trigger_R) == 0x000318, "Member 'UCommonUIController::Arrow_Down_Trigger_R' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Image_Release_R) == 0x000320, "Member 'UCommonUIController::Image_Release_R' has a wrong offset!");
static_assert(offsetof(UCommonUIController, WidgetSwitcher_Trigger_R_TXT) == 0x000328, "Member 'UCommonUIController::WidgetSwitcher_Trigger_R_TXT' has a wrong offset!");
static_assert(offsetof(UCommonUIController, TXT_Btn_Trigger_R_Hold) == 0x000330, "Member 'UCommonUIController::TXT_Btn_Trigger_R_Hold' has a wrong offset!");
static_assert(offsetof(UCommonUIController, TXT_Btn_Trigger_R_Release) == 0x000338, "Member 'UCommonUIController::TXT_Btn_Trigger_R_Release' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Overlay_StkL) == 0x000340, "Member 'UCommonUIController::Overlay_StkL' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_StkL_L) == 0x000348, "Member 'UCommonUIController::Arrow_StkL_L' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_StkL_R) == 0x000350, "Member 'UCommonUIController::Arrow_StkL_R' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_StkL_B) == 0x000358, "Member 'UCommonUIController::Arrow_StkL_B' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_StkL_T) == 0x000360, "Member 'UCommonUIController::Arrow_StkL_T' has a wrong offset!");
static_assert(offsetof(UCommonUIController, WidgetSwitcher_StkL) == 0x000368, "Member 'UCommonUIController::WidgetSwitcher_StkL' has a wrong offset!");
static_assert(offsetof(UCommonUIController, TXT_StkL_Hold) == 0x000370, "Member 'UCommonUIController::TXT_StkL_Hold' has a wrong offset!");
static_assert(offsetof(UCommonUIController, TXT_StkL_Release) == 0x000378, "Member 'UCommonUIController::TXT_StkL_Release' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Overlay_StkR) == 0x000380, "Member 'UCommonUIController::Overlay_StkR' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_StkR_L) == 0x000388, "Member 'UCommonUIController::Arrow_StkR_L' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_StkR_R) == 0x000390, "Member 'UCommonUIController::Arrow_StkR_R' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_StkR_B) == 0x000398, "Member 'UCommonUIController::Arrow_StkR_B' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_StkR_T) == 0x0003A0, "Member 'UCommonUIController::Arrow_StkR_T' has a wrong offset!");
static_assert(offsetof(UCommonUIController, WidgetSwitcher_StkR) == 0x0003A8, "Member 'UCommonUIController::WidgetSwitcher_StkR' has a wrong offset!");
static_assert(offsetof(UCommonUIController, TXT_StkR_Hold) == 0x0003B0, "Member 'UCommonUIController::TXT_StkR_Hold' has a wrong offset!");
static_assert(offsetof(UCommonUIController, TXT_StkR_Release) == 0x0003B8, "Member 'UCommonUIController::TXT_StkR_Release' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Overlay_Direction) == 0x0003C0, "Member 'UCommonUIController::Overlay_Direction' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_Direction_L) == 0x0003C8, "Member 'UCommonUIController::Arrow_Direction_L' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_Direction_R) == 0x0003D0, "Member 'UCommonUIController::Arrow_Direction_R' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_Direction_B) == 0x0003D8, "Member 'UCommonUIController::Arrow_Direction_B' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Arrow_Direction_T) == 0x0003E0, "Member 'UCommonUIController::Arrow_Direction_T' has a wrong offset!");
static_assert(offsetof(UCommonUIController, WidgetSwitcher_Direction) == 0x0003E8, "Member 'UCommonUIController::WidgetSwitcher_Direction' has a wrong offset!");
static_assert(offsetof(UCommonUIController, TXT_Direction_Hold) == 0x0003F0, "Member 'UCommonUIController::TXT_Direction_Hold' has a wrong offset!");
static_assert(offsetof(UCommonUIController, TXT_Direction_Release) == 0x0003F8, "Member 'UCommonUIController::TXT_Direction_Release' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Overlay_4Btn) == 0x000400, "Member 'UCommonUIController::Overlay_4Btn' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Guide_Btn1) == 0x000408, "Member 'UCommonUIController::Guide_Btn1' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Guide_Btn2) == 0x000410, "Member 'UCommonUIController::Guide_Btn2' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Guide_Btn3) == 0x000418, "Member 'UCommonUIController::Guide_Btn3' has a wrong offset!");
static_assert(offsetof(UCommonUIController, Guide_Btn4) == 0x000420, "Member 'UCommonUIController::Guide_Btn4' has a wrong offset!");
static_assert(offsetof(UCommonUIController, WidgetSwitcher_4Btn) == 0x000428, "Member 'UCommonUIController::WidgetSwitcher_4Btn' has a wrong offset!");
static_assert(offsetof(UCommonUIController, TXT_4Btn_Hold) == 0x000430, "Member 'UCommonUIController::TXT_4Btn_Hold' has a wrong offset!");
static_assert(offsetof(UCommonUIController, TXT_4Btn_Release) == 0x000438, "Member 'UCommonUIController::TXT_4Btn_Release' has a wrong offset!");

// Class UNION.CheatChallenge
// 0x0000 (0x0028 - 0x0028)
class UCheatChallenge final : public UObject
{
public:
	static void AllChallengeClear();
	static void AllChallengeProgressLog();
	static void AllChallengeReset();
	static void MainChallengeClear();
	static void SpecialChallengeClear();

	void AddChallengeStats(int32 InChallengeIndex, int32 InAddStats);
	void SetChallengeIsUnlockSpecial(bool InUnlock);
	void SetChallengeStats(int32 InChallengeIndex, int32 InStatsCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatChallenge">();
	}
	static class UCheatChallenge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatChallenge>();
	}
};
static_assert(alignof(UCheatChallenge) == 0x000008, "Wrong alignment on UCheatChallenge");
static_assert(sizeof(UCheatChallenge) == 0x000028, "Wrong size on UCheatChallenge");

// Class UNION.DLCStoreDialogActor
// 0x0020 (0x02B0 - 0x0290)
class ADLCStoreDialogActor final : public AActor
{
public:
	TMulticastInlineDelegate<void(bool IsAccept)> OnCompleteDialogEvent;                             // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UUnionUIPopupWindowBase*                DialogPopupWindow;                                 // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateDLCStoreDialog(const class UObject* WorldContextObject);
	void ForceClose();
	void OnDecisionDLCStoreDialog(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnPlatformStoreClose(EUnionOpenStoreResultType UnionOpenStoreResultType);
	void OnRemovePopupWindow();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DLCStoreDialogActor">();
	}
	static class ADLCStoreDialogActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADLCStoreDialogActor>();
	}
};
static_assert(alignof(ADLCStoreDialogActor) == 0x000008, "Wrong alignment on ADLCStoreDialogActor");
static_assert(sizeof(ADLCStoreDialogActor) == 0x0002B0, "Wrong size on ADLCStoreDialogActor");
static_assert(offsetof(ADLCStoreDialogActor, OnCompleteDialogEvent) == 0x000290, "Member 'ADLCStoreDialogActor::OnCompleteDialogEvent' has a wrong offset!");
static_assert(offsetof(ADLCStoreDialogActor, DialogPopupWindow) == 0x0002A0, "Member 'ADLCStoreDialogActor::DialogPopupWindow' has a wrong offset!");

// Class UNION.UnionCookPrimaryDataAsset
// 0x0050 (0x0080 - 0x0030)
class UUnionCookPrimaryDataAsset : public UPrimaryDataAsset
{
public:
	TArray<struct FUnionPrimaryAssetLabelPathInfo> LabelAssetsInDirectoryPathList;                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                 IgnoreLabelAssetsInDirectoryPathList;              // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPrimaryAssetRules                     Rules;                                             // 0x0050(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bLabelAssetsInMyDirectory : 1;                     // 0x005C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIncludeRedirectors : 1;                           // 0x005C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UObject>>         ExplicitAssets;                                    // 0x0060(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           ExplicitBlueprints;                                // 0x0070(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void Refresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionCookPrimaryDataAsset">();
	}
	static class UUnionCookPrimaryDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionCookPrimaryDataAsset>();
	}
};
static_assert(alignof(UUnionCookPrimaryDataAsset) == 0x000008, "Wrong alignment on UUnionCookPrimaryDataAsset");
static_assert(sizeof(UUnionCookPrimaryDataAsset) == 0x000080, "Wrong size on UUnionCookPrimaryDataAsset");
static_assert(offsetof(UUnionCookPrimaryDataAsset, LabelAssetsInDirectoryPathList) == 0x000030, "Member 'UUnionCookPrimaryDataAsset::LabelAssetsInDirectoryPathList' has a wrong offset!");
static_assert(offsetof(UUnionCookPrimaryDataAsset, IgnoreLabelAssetsInDirectoryPathList) == 0x000040, "Member 'UUnionCookPrimaryDataAsset::IgnoreLabelAssetsInDirectoryPathList' has a wrong offset!");
static_assert(offsetof(UUnionCookPrimaryDataAsset, Rules) == 0x000050, "Member 'UUnionCookPrimaryDataAsset::Rules' has a wrong offset!");
static_assert(offsetof(UUnionCookPrimaryDataAsset, ExplicitAssets) == 0x000060, "Member 'UUnionCookPrimaryDataAsset::ExplicitAssets' has a wrong offset!");
static_assert(offsetof(UUnionCookPrimaryDataAsset, ExplicitBlueprints) == 0x000070, "Member 'UUnionCookPrimaryDataAsset::ExplicitBlueprints' has a wrong offset!");

// Class UNION.UnionMachinePrimaryDataAsset
// 0x0000 (0x0080 - 0x0080)
class UUnionMachinePrimaryDataAsset final : public UUnionCookPrimaryDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionMachinePrimaryDataAsset">();
	}
	static class UUnionMachinePrimaryDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionMachinePrimaryDataAsset>();
	}
};
static_assert(alignof(UUnionMachinePrimaryDataAsset) == 0x000008, "Wrong alignment on UUnionMachinePrimaryDataAsset");
static_assert(sizeof(UUnionMachinePrimaryDataAsset) == 0x000080, "Wrong size on UUnionMachinePrimaryDataAsset");

// Class UNION.VisibleUIChecker
// 0x00D0 (0x03B0 - 0x02E0)
class UVisibleUIChecker final : public UUserWidget
{
public:
	struct FSlateBrush                            Brush;                                             // 0x02E0(0x00D0)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VisibleUIChecker">();
	}
	static class UVisibleUIChecker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVisibleUIChecker>();
	}
};
static_assert(alignof(UVisibleUIChecker) == 0x000010, "Wrong alignment on UVisibleUIChecker");
static_assert(sizeof(UVisibleUIChecker) == 0x0003B0, "Wrong size on UVisibleUIChecker");
static_assert(offsetof(UVisibleUIChecker, Brush) == 0x0002E0, "Member 'UVisibleUIChecker::Brush' has a wrong offset!");

// Class UNION.RaceSequenceStateSave
// 0x0000 (0x0110 - 0x0110)
class URaceSequenceStateSave : public URaceSequenceStateBase
{
public:
	void OnAppSaveComplete(ESaveDataStatus Status);
	void OnPlayLogSaveComplete(ESaveDataStatus Status);
	void OnReplaySaveComplete(ESaveDataStatus Status);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateSave">();
	}
	static class URaceSequenceStateSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateSave>();
	}
};
static_assert(alignof(URaceSequenceStateSave) == 0x000008, "Wrong alignment on URaceSequenceStateSave");
static_assert(sizeof(URaceSequenceStateSave) == 0x000110, "Wrong size on URaceSequenceStateSave");

// Class UNION.CheatCommon
// 0x0008 (0x0030 - 0x0028)
class UCheatCommon final : public UObject
{
public:
	class UVisibleUIChecker*                      VisibleUIChecker;                                  // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void EnableSplitScreen(bool bInEnable);
	void RemoveAllWidgets();
	void SetVisibleUnionRunParam(bool bInVisible);
	void StartVisibleUICheck();
	void StopVisibleUICheck();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatCommon">();
	}
	static class UCheatCommon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatCommon>();
	}
};
static_assert(alignof(UCheatCommon) == 0x000008, "Wrong alignment on UCheatCommon");
static_assert(sizeof(UCheatCommon) == 0x000030, "Wrong size on UCheatCommon");
static_assert(offsetof(UCheatCommon, VisibleUIChecker) == 0x000028, "Member 'UCheatCommon::VisibleUIChecker' has a wrong offset!");

// Class UNION.CheatCrashGame
// 0x0000 (0x0028 - 0x0028)
class UCheatCrashGame final : public UObject
{
public:
	void CrashGame();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatCrashGame">();
	}
	static class UCheatCrashGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatCrashGame>();
	}
};
static_assert(alignof(UCheatCrashGame) == 0x000008, "Wrong alignment on UCheatCrashGame");
static_assert(sizeof(UCheatCrashGame) == 0x000028, "Wrong size on UCheatCrashGame");

// Class UNION.RaceCeremonySequenceStateBase
// 0x0010 (0x0108 - 0x00F8)
class URaceCeremonySequenceStateBase : public UHierarchicalStateMachineStateComponent
{
public:
	ERaceCeremonySequenceState                    DefaultMenuState;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARaceCeremonySequence*                  OwnerRaceCeremonySequence;                         // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetNextRaceCeremonySequenceState(ERaceCeremonySequenceState InState);

	class ARaceCeremonySequence* GetOwnerRaceCeremonySequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceCeremonySequenceStateBase">();
	}
	static class URaceCeremonySequenceStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceCeremonySequenceStateBase>();
	}
};
static_assert(alignof(URaceCeremonySequenceStateBase) == 0x000008, "Wrong alignment on URaceCeremonySequenceStateBase");
static_assert(sizeof(URaceCeremonySequenceStateBase) == 0x000108, "Wrong size on URaceCeremonySequenceStateBase");
static_assert(offsetof(URaceCeremonySequenceStateBase, DefaultMenuState) == 0x0000F8, "Member 'URaceCeremonySequenceStateBase::DefaultMenuState' has a wrong offset!");
static_assert(offsetof(URaceCeremonySequenceStateBase, OwnerRaceCeremonySequence) == 0x000100, "Member 'URaceCeremonySequenceStateBase::OwnerRaceCeremonySequence' has a wrong offset!");

// Class UNION.EventStateAfterCeremony
// 0x0000 (0x0108 - 0x0108)
class UEventStateAfterCeremony final : public URaceCeremonySequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventStateAfterCeremony">();
	}
	static class UEventStateAfterCeremony* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventStateAfterCeremony>();
	}
};
static_assert(alignof(UEventStateAfterCeremony) == 0x000008, "Wrong alignment on UEventStateAfterCeremony");
static_assert(sizeof(UEventStateAfterCeremony) == 0x000108, "Wrong size on UEventStateAfterCeremony");

// Class UNION.SquadContext
// 0x0038 (0x0480 - 0x0448)
class USquadContext : public UCommonLobbyContext
{
public:
	class ULobbyJoinInfo*                         PendingInviteInfo;                                 // 0x0448(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_450[0x30];                                     // 0x0450(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateSquad();
	void CreateSquad_Callback(TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);
	void GetInRace(bool* OutInRace);
	void GetReceivedJoinRequest(struct FLobbyId* TargetLobbyId);
	void Invite(const struct FUniqueNetIdRepl& UserId);
	bool IsCompleteEndMenuSelect(ECommonRaceMenuContentId* HostSelectedId);
	void JoinSquad(class ULobbyJoinInfo* InviteInfo);
	void OnKickBlockMemberComplete(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnSendInvitationCompleted(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnSendInvitationCompletedInternal(bool bSuccessful, const struct FOnlineErrorBP& Error);
	void SetMatchContinuation(ESquadLobbyMatchContinuation MatchContinuation);
	void SetOnlineGameMode(EOnlineGameMode OnlineGameMode);
	void SyncMatchContinuation(ESquadLobbyMatchContinuation MatchContinuation, TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);

	ESquadLobbyMatchContinuation GetMatchContinuation() const;
	EOnlineGameMode GetOnlineGameMode() const;
	bool GetSquadLobbyState(ESquadLobbyState* OutState) const;
	bool IsCompletedReadyCheck() const;
	bool IsCompletedReadyMatching() const;
	bool IsEqualSquadLobbyState(ESquadLobbyState State) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SquadContext">();
	}
	static class USquadContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<USquadContext>();
	}
};
static_assert(alignof(USquadContext) == 0x000008, "Wrong alignment on USquadContext");
static_assert(sizeof(USquadContext) == 0x000480, "Wrong size on USquadContext");
static_assert(offsetof(USquadContext, PendingInviteInfo) == 0x000448, "Member 'USquadContext::PendingInviteInfo' has a wrong offset!");

// Class UNION.CheatEnding
// 0x0000 (0x0028 - 0x0028)
class UCheatEnding final : public UObject
{
public:
	void ReserveGrandPrixEnding(EGrandPrixEndingId GrandPrixEndingId);
	void RestrictStaffrollDataTableUnionNo(int32 UnionNo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatEnding">();
	}
	static class UCheatEnding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatEnding>();
	}
};
static_assert(alignof(UCheatEnding) == 0x000008, "Wrong alignment on UCheatEnding");
static_assert(sizeof(UCheatEnding) == 0x000028, "Wrong size on UCheatEnding");

// Class UNION.RaceEndingSequenceStateBase
// 0x0010 (0x0108 - 0x00F8)
class URaceEndingSequenceStateBase : public UHierarchicalStateMachineStateComponent
{
public:
	ERaceEndingSequenceState                      DefaultMenuState;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARaceEndingSequence*                    OwnerRaceEndingSequence;                           // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetNextRaceEndingSequenceState(ERaceEndingSequenceState InState);

	class ARaceEndingSequence* GetOwnerRaceEndingSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceEndingSequenceStateBase">();
	}
	static class URaceEndingSequenceStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceEndingSequenceStateBase>();
	}
};
static_assert(alignof(URaceEndingSequenceStateBase) == 0x000008, "Wrong alignment on URaceEndingSequenceStateBase");
static_assert(sizeof(URaceEndingSequenceStateBase) == 0x000108, "Wrong size on URaceEndingSequenceStateBase");
static_assert(offsetof(URaceEndingSequenceStateBase, DefaultMenuState) == 0x0000F8, "Member 'URaceEndingSequenceStateBase::DefaultMenuState' has a wrong offset!");
static_assert(offsetof(URaceEndingSequenceStateBase, OwnerRaceEndingSequence) == 0x000100, "Member 'URaceEndingSequenceStateBase::OwnerRaceEndingSequence' has a wrong offset!");

// Class UNION.EndingSequenceStateMain
// 0x0008 (0x0110 - 0x0108)
class UEndingSequenceStateMain final : public URaceEndingSequenceStateBase
{
public:
	class ASceneInputKeyHandler*                  InputKeyHandler;                                   // 0x0108(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EndingSequenceStateMain">();
	}
	static class UEndingSequenceStateMain* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEndingSequenceStateMain>();
	}
};
static_assert(alignof(UEndingSequenceStateMain) == 0x000008, "Wrong alignment on UEndingSequenceStateMain");
static_assert(sizeof(UEndingSequenceStateMain) == 0x000110, "Wrong size on UEndingSequenceStateMain");
static_assert(offsetof(UEndingSequenceStateMain, InputKeyHandler) == 0x000108, "Member 'UEndingSequenceStateMain::InputKeyHandler' has a wrong offset!");

// Class UNION.CheatFade
// 0x0000 (0x0028 - 0x0028)
class UCheatFade final : public UObject
{
public:
	void FadeIn(const class FString& InputParam);
	void FadeOut(const class FString& InputParam);
	void ForceCallFinishedFadeEvent(const class FString& InputParam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatFade">();
	}
	static class UCheatFade* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatFade>();
	}
};
static_assert(alignof(UCheatFade) == 0x000008, "Wrong alignment on UCheatFade");
static_assert(sizeof(UCheatFade) == 0x000028, "Wrong size on UCheatFade");

// Class UNION.RewardGetDisplay
// 0x0070 (0x0350 - 0x02E0)
class URewardGetDisplay : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnRewardDisplayEndDelegate;                        // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class URewardGetWindow*                       RewardGetWindow;                                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FRewardGetWindowParam>          ParamArray;                                        // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FText                                   RewardGetWindowTitle;                              // 0x0308(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          bWindowTimeClose;                                  // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRewardGetWindowSet;                               // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31A[0x2];                                      // 0x031A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindowCloseTime;                                   // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WindowZOrder;                                      // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URewardGetWindow*                       RewardCompleteWindow;                              // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHintPopupWindow*                       TipsWindow;                                        // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_338[0x18];                                     // 0x0338(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateRewardGetWindow(bool bInSetFocus);
	void DebugForceDisplayRewardCompleteWindow(EMachineId InDisplayMachineId);
	void EndDisplay(bool bInShiftCompleteDisplay);
	void OnRewardCompleteWindowClose();
	void OnRewardGetWindowClose();
	void OnTipsWindowClose();
	void SetDisableTipsCheck(bool bInDisable);
	void SetRewardCompleteWindowTitleText(const class FText& InText);
	void SetRewardGetWindowTitleText(const class FText& InText);
	void SetWindowParam(const TArray<struct FRewardGetWindowParam>& InParamArray, bool bInWindowTimeClose, int32 InWindowZOrder);
	void SetWindowParamFromAchievementData(const TArray<struct FRewardAchievementData>& InAchievementDataArray, bool bInWindowTimeClose, bool bInIgnoreRivalReward, int32 InWindowZOrder);
	void StartDisplay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RewardGetDisplay">();
	}
	static class URewardGetDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<URewardGetDisplay>();
	}
};
static_assert(alignof(URewardGetDisplay) == 0x000008, "Wrong alignment on URewardGetDisplay");
static_assert(sizeof(URewardGetDisplay) == 0x000350, "Wrong size on URewardGetDisplay");
static_assert(offsetof(URewardGetDisplay, OnRewardDisplayEndDelegate) == 0x0002E0, "Member 'URewardGetDisplay::OnRewardDisplayEndDelegate' has a wrong offset!");
static_assert(offsetof(URewardGetDisplay, RewardGetWindow) == 0x0002F0, "Member 'URewardGetDisplay::RewardGetWindow' has a wrong offset!");
static_assert(offsetof(URewardGetDisplay, ParamArray) == 0x0002F8, "Member 'URewardGetDisplay::ParamArray' has a wrong offset!");
static_assert(offsetof(URewardGetDisplay, RewardGetWindowTitle) == 0x000308, "Member 'URewardGetDisplay::RewardGetWindowTitle' has a wrong offset!");
static_assert(offsetof(URewardGetDisplay, bWindowTimeClose) == 0x000318, "Member 'URewardGetDisplay::bWindowTimeClose' has a wrong offset!");
static_assert(offsetof(URewardGetDisplay, bRewardGetWindowSet) == 0x000319, "Member 'URewardGetDisplay::bRewardGetWindowSet' has a wrong offset!");
static_assert(offsetof(URewardGetDisplay, WindowCloseTime) == 0x00031C, "Member 'URewardGetDisplay::WindowCloseTime' has a wrong offset!");
static_assert(offsetof(URewardGetDisplay, WindowZOrder) == 0x000320, "Member 'URewardGetDisplay::WindowZOrder' has a wrong offset!");
static_assert(offsetof(URewardGetDisplay, RewardCompleteWindow) == 0x000328, "Member 'URewardGetDisplay::RewardCompleteWindow' has a wrong offset!");
static_assert(offsetof(URewardGetDisplay, TipsWindow) == 0x000330, "Member 'URewardGetDisplay::TipsWindow' has a wrong offset!");

// Class UNION.CheatFesta
// 0x0000 (0x0028 - 0x0028)
class UCheatFesta final : public UObject
{
public:
	void ForceSetFestaId(const class FString& InputParam);
	void ForceSetTopMenuBackGround(const class FString& InputParam);
	void ResetGroupRaceRule();
	void SetGroupRaceRule(int32 groupRaceRuleId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatFesta">();
	}
	static class UCheatFesta* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatFesta>();
	}
};
static_assert(alignof(UCheatFesta) == 0x000008, "Wrong alignment on UCheatFesta");
static_assert(sizeof(UCheatFesta) == 0x000028, "Wrong size on UCheatFesta");

// Class UNION.CheatGadget
// 0x0000 (0x0028 - 0x0028)
class UCheatGadget final : public UObject
{
public:
	void AddAdditionalGadget(EGadgetId InGadgetId);
	void AddDisableGadgets(const TArray<class FString>& InGadgetIds);
	void AddDisableGadgetsFesta(const TArray<class FString>& InGadgetIds);
	void AddDisableGadgetsLegendCompe(const TArray<class FString>& InGadgetIds);
	void AddDisableGadgetsRankMatch(const TArray<class FString>& InGadgetIds);
	void ClearAdditionalGadget();
	void ClearDisableGadgets();
	void LockGadget(EGadgetId InGadgetId);
	void LockGadgetAll();
	void UnlockGadget(EGadgetId InGadgetId);
	void UnlockGadgetAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatGadget">();
	}
	static class UCheatGadget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatGadget>();
	}
};
static_assert(alignof(UCheatGadget) == 0x000008, "Wrong alignment on UCheatGadget");
static_assert(sizeof(UCheatGadget) == 0x000028, "Wrong size on UCheatGadget");

// Class UNION.ExtraMenuButton
// 0x0008 (0x0650 - 0x0648)
class UExtraMenuButton final : public UUnionUIButtonStandard
{
public:
	ECommonMenuButtonType                         ButtonType;                                        // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionSequenceMainState                      ExtraMenuType;                                     // 0x0649(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64A[0x6];                                      // 0x064A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_SetButtonType(EOptionSequenceMainState InExtraMenuType, class UExtraMenuSceneBase* Parent);
	void SetEnableButton(bool bIsEnable);
	void SetNewIcon(bool IsNew);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExtraMenuButton">();
	}
	static class UExtraMenuButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExtraMenuButton>();
	}
};
static_assert(alignof(UExtraMenuButton) == 0x000008, "Wrong alignment on UExtraMenuButton");
static_assert(sizeof(UExtraMenuButton) == 0x000650, "Wrong size on UExtraMenuButton");
static_assert(offsetof(UExtraMenuButton, ButtonType) == 0x000648, "Member 'UExtraMenuButton::ButtonType' has a wrong offset!");
static_assert(offsetof(UExtraMenuButton, ExtraMenuType) == 0x000649, "Member 'UExtraMenuButton::ExtraMenuType' has a wrong offset!");

// Class UNION.CheatGarage
// 0x0000 (0x0028 - 0x0028)
class UCheatGarage final : public UObject
{
public:
	void GarageExit();
	void GarageMatchingTimeOut(float InTimeOutTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatGarage">();
	}
	static class UCheatGarage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatGarage>();
	}
};
static_assert(alignof(UCheatGarage) == 0x000008, "Wrong alignment on UCheatGarage");
static_assert(sizeof(UCheatGarage) == 0x000028, "Wrong size on UCheatGarage");

// Class UNION.GadgetCustomize2Sequence
// 0x0010 (0x0378 - 0x0368)
class AGadgetCustomize2Sequence : public AHierarchicalStateMachine
{
public:
	TMulticastInlineDelegate<void(bool bIsSelectedPlateDataChanged)> OnBackEvent;                    // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void SetNextGadgetCustomizeState(EGadgetCustomize2SequenceState InState);

	EGadgetCustomize2SequenceState GetCurrentGadgetCustomizeState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomize2Sequence">();
	}
	static class AGadgetCustomize2Sequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGadgetCustomize2Sequence>();
	}
};
static_assert(alignof(AGadgetCustomize2Sequence) == 0x000008, "Wrong alignment on AGadgetCustomize2Sequence");
static_assert(sizeof(AGadgetCustomize2Sequence) == 0x000378, "Wrong size on AGadgetCustomize2Sequence");
static_assert(offsetof(AGadgetCustomize2Sequence, OnBackEvent) == 0x000368, "Member 'AGadgetCustomize2Sequence::OnBackEvent' has a wrong offset!");

// Class UNION.CheatGrandPrix
// 0x0000 (0x0028 - 0x0028)
class UCheatGrandPrix final : public UObject
{
public:
	static void AddALLRivalWinCount();
	static void SetRivalLevelDownUIFlag(const EMenuSpeedClassId MenuSpeedClassId, const bool Enabled);

	void AddRivalWinCount(EDriverId DriverId);
	void BeforeOpenFever();
	void GP1();
	void SetClearedGrandPrixEnding(EGrandPrixEndingId EndingId, bool on);
	void SetComplateRedStarRingAll(bool bEnable);
	void SetComplateRedStarRingPreAll();
	void SetComplateRedStarRingStage(EStageId StageId, bool bEnable);
	void SetGrandPrixALLKnockDownRivalLevel(const uint8 SetValue);
	void SetGrandPrixALLRivalLevel(const uint8 SetValue);
	void SetGrandPrixOpened(EGrandPrixId GrandPrixId, bool Opened);
	void SetGrandPrixOpenedAll(bool Opened);
	void SetOpenFever(bool InFlag);
	void SetOpenMirror(bool bEnable);
	void SetOpenSuperSonicSpeed(bool bEnable);
	void SetPlayedAnotherStage(EStageId StageId, bool on);
	void SetPlayedAnotherStageAll();
	void SetSetGrandPrixLeast1Play(bool bFlag);
	void SetSpawnPowerRivalFlag(const bool SetValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatGrandPrix">();
	}
	static class UCheatGrandPrix* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatGrandPrix>();
	}
};
static_assert(alignof(UCheatGrandPrix) == 0x000008, "Wrong alignment on UCheatGrandPrix");
static_assert(sizeof(UCheatGrandPrix) == 0x000028, "Wrong size on UCheatGrandPrix");

// Class UNION.CheatHonorTitle
// 0x0000 (0x0028 - 0x0028)
class UCheatHonorTitle final : public UObject
{
public:
	void UnlockAllHonorTitle();
	void UnlockHonorTitle(int32 HonorTitleId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatHonorTitle">();
	}
	static class UCheatHonorTitle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatHonorTitle>();
	}
};
static_assert(alignof(UCheatHonorTitle) == 0x000008, "Wrong alignment on UCheatHonorTitle");
static_assert(sizeof(UCheatHonorTitle) == 0x000028, "Wrong size on UCheatHonorTitle");

// Class UNION.CheatHorn
// 0x0048 (0x0070 - 0x0028)
class UCheatHorn final : public UObject
{
public:
	uint8                                         Pad_28[0x48];                                      // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindAllRacerHorn();
	void BindRacerHorn(int32 InRacerNum);
	void BindRandomRacerHorn();
	TArray<class AMenuRacerBase*> GetAllLobbyRacers();
	void PlayRandomRacerHorn();
	void SetAllRacerHorn(int32 InHornIndex);
	void SetRacerHorn(int32 InRacerIndex, int32 InHornIndex);
	void UnBindRacerHorn();
	void UnlockHorn();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatHorn">();
	}
	static class UCheatHorn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatHorn>();
	}
};
static_assert(alignof(UCheatHorn) == 0x000008, "Wrong alignment on UCheatHorn");
static_assert(sizeof(UCheatHorn) == 0x000070, "Wrong size on UCheatHorn");

// Class UNION.ConsecutiveRaceDataContext
// 0x0000 (0x0028 - 0x0028)
class UConsecutiveRaceDataContext : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ConsecutiveRaceDataContext">();
	}
	static class UConsecutiveRaceDataContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConsecutiveRaceDataContext>();
	}
};
static_assert(alignof(UConsecutiveRaceDataContext) == 0x000008, "Wrong alignment on UConsecutiveRaceDataContext");
static_assert(sizeof(UConsecutiveRaceDataContext) == 0x000028, "Wrong size on UConsecutiveRaceDataContext");

// Class UNION.FestaConsecutiveRaceDataContext
// 0x0010 (0x0038 - 0x0028)
class UFestaConsecutiveRaceDataContext final : public UConsecutiveRaceDataContext
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddConsecutiveWinNum(int32 SquadIndex);
	void Initialize();
	bool IsFinalRace();
	void UpdateData();

	int32 GetConsecutiveWinNum(int32 SquadIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaConsecutiveRaceDataContext">();
	}
	static class UFestaConsecutiveRaceDataContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFestaConsecutiveRaceDataContext>();
	}
};
static_assert(alignof(UFestaConsecutiveRaceDataContext) == 0x000008, "Wrong alignment on UFestaConsecutiveRaceDataContext");
static_assert(sizeof(UFestaConsecutiveRaceDataContext) == 0x000038, "Wrong size on UFestaConsecutiveRaceDataContext");

// Class UNION.RaceSequenceStateSendRaceStart
// 0x0010 (0x0120 - 0x0110)
class URaceSequenceStateSendRaceStart : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MySequenceStateTimeoutTime;                        // 0x0118(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckSkipCurrentState();
	void NextState();
	void StopExecuteCRM();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateSendRaceStart">();
	}
	static class URaceSequenceStateSendRaceStart* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateSendRaceStart>();
	}
};
static_assert(alignof(URaceSequenceStateSendRaceStart) == 0x000008, "Wrong alignment on URaceSequenceStateSendRaceStart");
static_assert(sizeof(URaceSequenceStateSendRaceStart) == 0x000120, "Wrong size on URaceSequenceStateSendRaceStart");
static_assert(offsetof(URaceSequenceStateSendRaceStart, MySequenceStateTimeoutTime) == 0x000118, "Member 'URaceSequenceStateSendRaceStart::MySequenceStateTimeoutTime' has a wrong offset!");

// Class UNION.CheatInput
// 0x0000 (0x0028 - 0x0028)
class UCheatInput final : public UObject
{
public:
	void DebugPrintRegisterMenu();
	void DebugRegisterMenuBlink(bool IsFlag);
	void SetEnableMouseClick(bool IsEnable);
	void SetEnableMouseControl(bool IsEnable);
	void SetEnableMouseHover(bool IsEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatInput">();
	}
	static class UCheatInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatInput>();
	}
};
static_assert(alignof(UCheatInput) == 0x000008, "Wrong alignment on UCheatInput");
static_assert(sizeof(UCheatInput) == 0x000028, "Wrong size on UCheatInput");

// Class UNION.RaceSequenceStateSendRaceEnd
// 0x0058 (0x0168 - 0x0110)
class URaceSequenceStateSendRaceEnd : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCommon_UserOrderData>          UserOrder;                                         // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FCommon_UserOrderData>          UserOrderIncludeCom;                               // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FString                                 entryRaceId;                                       // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsHost;                                            // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlreadyCalledDisableTimeout;                      // 0x0149(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsEnableTimeoutCheck;                             // 0x014A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bClientTimeout;                                    // 0x014B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ClientTimeoutTime;                                 // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ElapsedTime;                                       // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_154[0x14];                                     // 0x0154(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckSkipCurrentState();
	void DisableTimeoutCheck();
	void EnableTimeoutCheck(TDelegate<void()> OnTimeout_0);
	void GetLobbyContextParam();
	void GetRacerFinalGroupBattleResult(bool* bSuccess, struct FGroupBattleResult* OutGroupBattleResult);
	void GetResultSaveFestaResultRequest(struct FResultSaveFestaResultRequest* Request, bool* IsSuccess);
	void GetResultSaveLegendCompeResultRequest(struct FResultSaveLegendCompeResultRequest* Request, bool* IsSuccess);
	void GetResultSaveRankMatchResultRequest(struct FResultSaveRankMatchResultRequest* Request, bool* IsSuccess);
	void GetResultSaveTimeTrialResult(struct FResultSaveTimeTrialResultRequest* Request, bool* IsSuccess);
	bool IsBonusNoOneInGroup(const int32 InRacerIndex, const struct FGroupBattleResult& InGroupBattleResult);
	bool IsLeadNoOneInGroup(const int32 InRacerIndex, const struct FGroupBattleResult& InGroupBattleResult);
	bool isPlayerControlRacer(int32 InRacerIndex);
	void NextState();
	void ResetAlreadyCalledDisableTimeout();
	void SetPlayerDataRelationWhenGoal();
	void SetupUserOrder();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateSendRaceEnd">();
	}
	static class URaceSequenceStateSendRaceEnd* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateSendRaceEnd>();
	}
};
static_assert(alignof(URaceSequenceStateSendRaceEnd) == 0x000008, "Wrong alignment on URaceSequenceStateSendRaceEnd");
static_assert(sizeof(URaceSequenceStateSendRaceEnd) == 0x000168, "Wrong size on URaceSequenceStateSendRaceEnd");
static_assert(offsetof(URaceSequenceStateSendRaceEnd, UserOrder) == 0x000118, "Member 'URaceSequenceStateSendRaceEnd::UserOrder' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateSendRaceEnd, UserOrderIncludeCom) == 0x000128, "Member 'URaceSequenceStateSendRaceEnd::UserOrderIncludeCom' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateSendRaceEnd, entryRaceId) == 0x000138, "Member 'URaceSequenceStateSendRaceEnd::entryRaceId' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateSendRaceEnd, IsHost) == 0x000148, "Member 'URaceSequenceStateSendRaceEnd::IsHost' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateSendRaceEnd, bAlreadyCalledDisableTimeout) == 0x000149, "Member 'URaceSequenceStateSendRaceEnd::bAlreadyCalledDisableTimeout' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateSendRaceEnd, bIsEnableTimeoutCheck) == 0x00014A, "Member 'URaceSequenceStateSendRaceEnd::bIsEnableTimeoutCheck' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateSendRaceEnd, bClientTimeout) == 0x00014B, "Member 'URaceSequenceStateSendRaceEnd::bClientTimeout' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateSendRaceEnd, ClientTimeoutTime) == 0x00014C, "Member 'URaceSequenceStateSendRaceEnd::ClientTimeoutTime' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateSendRaceEnd, ElapsedTime) == 0x000150, "Member 'URaceSequenceStateSendRaceEnd::ElapsedTime' has a wrong offset!");

// Class UNION.EventInfoRanking
// 0x0038 (0x03C0 - 0x0388)
class UEventInfoRanking : public URankingLineScroller
{
public:
	class UWidgetSwitcher*                        WidgetSwitcher_0;                                  // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URankingLine*                           WBP_StatusInfo_Sub_RankingTable_54;                // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 DSP_FestaIcon;                                     // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 DSP_PlatformIcon_Title;                            // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 DSP_PlatformIcon_Btn;                              // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               PlatformIconMaterial;                              // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDisplayRanking;                                  // 0x03B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearPersonalRanking();
	void DisplayCrossplayOffMessage();
	void DisplayErrorMessage();
	void DisplayLoading();
	void DisplayNoRankingMessage();
	void DisplayRanking();
	void DisplayRankingCalcMessage();
	void DisplayRankingPrivilegeError();
	class FText GetPrivaliegeErrorMessage(const class FText& InText);
	void SetPlatformButtonVisible(bool IsVisible_0);
	void SetupPersonalRanking(bool IsAllPlatform, const struct FMyRankingData& MyRankingData);
	void UpdateCrossPlayIcon();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventInfoRanking">();
	}
	static class UEventInfoRanking* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventInfoRanking>();
	}
};
static_assert(alignof(UEventInfoRanking) == 0x000008, "Wrong alignment on UEventInfoRanking");
static_assert(sizeof(UEventInfoRanking) == 0x0003C0, "Wrong size on UEventInfoRanking");
static_assert(offsetof(UEventInfoRanking, WidgetSwitcher_0) == 0x000388, "Member 'UEventInfoRanking::WidgetSwitcher_0' has a wrong offset!");
static_assert(offsetof(UEventInfoRanking, WBP_StatusInfo_Sub_RankingTable_54) == 0x000390, "Member 'UEventInfoRanking::WBP_StatusInfo_Sub_RankingTable_54' has a wrong offset!");
static_assert(offsetof(UEventInfoRanking, DSP_FestaIcon) == 0x000398, "Member 'UEventInfoRanking::DSP_FestaIcon' has a wrong offset!");
static_assert(offsetof(UEventInfoRanking, DSP_PlatformIcon_Title) == 0x0003A0, "Member 'UEventInfoRanking::DSP_PlatformIcon_Title' has a wrong offset!");
static_assert(offsetof(UEventInfoRanking, DSP_PlatformIcon_Btn) == 0x0003A8, "Member 'UEventInfoRanking::DSP_PlatformIcon_Btn' has a wrong offset!");
static_assert(offsetof(UEventInfoRanking, PlatformIconMaterial) == 0x0003B0, "Member 'UEventInfoRanking::PlatformIconMaterial' has a wrong offset!");
static_assert(offsetof(UEventInfoRanking, IsDisplayRanking) == 0x0003B8, "Member 'UEventInfoRanking::IsDisplayRanking' has a wrong offset!");

// Class UNION.CheatJukebox
// 0x0000 (0x0028 - 0x0028)
class UCheatJukebox final : public UObject
{
public:
	void SetCustomAlbum(int32 Lap, int32 AlbumID);
	void SetCustomTrack(int32 Lap, int32 TrackID);
	void UnlockAlbum(int32 AlbumID);
	void UnlockAlbumAll();
	void UnlockTrack(int32 TrackID);
	void UnlockTrackAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatJukebox">();
	}
	static class UCheatJukebox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatJukebox>();
	}
};
static_assert(alignof(UCheatJukebox) == 0x000008, "Wrong alignment on UCheatJukebox");
static_assert(sizeof(UCheatJukebox) == 0x000028, "Wrong size on UCheatJukebox");

// Class UNION.RaceResultSequenceStateRateRank
// 0x0000 (0x0108 - 0x0108)
class URaceResultSequenceStateRateRank : public URaceResultSequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceResultSequenceStateRateRank">();
	}
	static class URaceResultSequenceStateRateRank* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceResultSequenceStateRateRank>();
	}
};
static_assert(alignof(URaceResultSequenceStateRateRank) == 0x000008, "Wrong alignment on URaceResultSequenceStateRateRank");
static_assert(sizeof(URaceResultSequenceStateRateRank) == 0x000108, "Wrong size on URaceResultSequenceStateRateRank");

// Class UNION.CheatLoad
// 0x0000 (0x0028 - 0x0028)
class UCheatLoad final : public UObject
{
public:
	void LoadGameAndMenuResidentAndPreloadAssets();
	void LoadGameResidentAssets();
	void LoadMenuResidentAssets();
	void LoadRaceResidentAssets();
	void PreLoadAnotherStageAssets();
	void PreLoadOceanStageAssets();
	void PreLoadStageAssets(int32 StageId1, int32 StageId2, int32 StageID3);
	void UnloadMenuResidentAssets();
	void UnloadRaceResidentAssets();
	void UnloadStageAssets();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatLoad">();
	}
	static class UCheatLoad* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatLoad>();
	}
};
static_assert(alignof(UCheatLoad) == 0x000008, "Wrong alignment on UCheatLoad");
static_assert(sizeof(UCheatLoad) == 0x000028, "Wrong size on UCheatLoad");

// Class UNION.CheatLobbyInvite
// 0x0008 (0x0030 - 0x0028)
class UCheatLobbyInvite final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddBusyFlag();
	void MinusBusyFlag();
	void SetCheatLobbyInviteSequence(EMenuSequenceMainState NextState);
	void SetLobbyInvited();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatLobbyInvite">();
	}
	static class UCheatLobbyInvite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatLobbyInvite>();
	}
};
static_assert(alignof(UCheatLobbyInvite) == 0x000008, "Wrong alignment on UCheatLobbyInvite");
static_assert(sizeof(UCheatLobbyInvite) == 0x000030, "Wrong size on UCheatLobbyInvite");

// Class UNION.FestaLobbyControlComponent
// 0x0010 (0x0120 - 0x0110)
class UFestaLobbyControlComponent final : public UNetLobbyControlComponent
{
public:
	TSubclassOf<class UFestaLobbyContext>         LobbyContextClass;                                 // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFestaMatchmakingContext>   MatchmakingContextClass;                           // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaLobbyControlComponent">();
	}
	static class UFestaLobbyControlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFestaLobbyControlComponent>();
	}
};
static_assert(alignof(UFestaLobbyControlComponent) == 0x000008, "Wrong alignment on UFestaLobbyControlComponent");
static_assert(sizeof(UFestaLobbyControlComponent) == 0x000120, "Wrong size on UFestaLobbyControlComponent");
static_assert(offsetof(UFestaLobbyControlComponent, LobbyContextClass) == 0x000110, "Member 'UFestaLobbyControlComponent::LobbyContextClass' has a wrong offset!");
static_assert(offsetof(UFestaLobbyControlComponent, MatchmakingContextClass) == 0x000118, "Member 'UFestaLobbyControlComponent::MatchmakingContextClass' has a wrong offset!");

// Class UNION.CheatMachine
// 0x0000 (0x0028 - 0x0028)
class UCheatMachine final : public UObject
{
public:
	void SetForcedLodMachine(int32 NewForcedLodModel);
	void UnlockMachineParts();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatMachine">();
	}
	static class UCheatMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatMachine>();
	}
};
static_assert(alignof(UCheatMachine) == 0x000008, "Wrong alignment on UCheatMachine");
static_assert(sizeof(UCheatMachine) == 0x000028, "Wrong size on UCheatMachine");

// Class UNION.EndingCongratsWidget
// 0x00D8 (0x03C8 - 0x02F0)
class UEndingCongratsWidget final : public UCommonUserWidget
{
public:
	TMap<EGrandPrixEndingId, class FText>         _TitleTexts;                                       // 0x02F0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<EGrandPrixEndingId, class FText>         _MessageTexts;                                     // 0x0340(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_390[0x8];                                      // 0x0390(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUnionRichTextBlock*>            _TitleTextBlocks;                                  // 0x0398(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _MessageTextBlock;                                 // 0x03A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Memory_InLoop;                                     // 0x03B0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       ObCub_InLoop;                                      // 0x03B8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_Out;                                          // 0x03C0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EndingCongratsWidget">();
	}
	static class UEndingCongratsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEndingCongratsWidget>();
	}
};
static_assert(alignof(UEndingCongratsWidget) == 0x000008, "Wrong alignment on UEndingCongratsWidget");
static_assert(sizeof(UEndingCongratsWidget) == 0x0003C8, "Wrong size on UEndingCongratsWidget");
static_assert(offsetof(UEndingCongratsWidget, _TitleTexts) == 0x0002F0, "Member 'UEndingCongratsWidget::_TitleTexts' has a wrong offset!");
static_assert(offsetof(UEndingCongratsWidget, _MessageTexts) == 0x000340, "Member 'UEndingCongratsWidget::_MessageTexts' has a wrong offset!");
static_assert(offsetof(UEndingCongratsWidget, _TitleTextBlocks) == 0x000398, "Member 'UEndingCongratsWidget::_TitleTextBlocks' has a wrong offset!");
static_assert(offsetof(UEndingCongratsWidget, _MessageTextBlock) == 0x0003A8, "Member 'UEndingCongratsWidget::_MessageTextBlock' has a wrong offset!");
static_assert(offsetof(UEndingCongratsWidget, Memory_InLoop) == 0x0003B0, "Member 'UEndingCongratsWidget::Memory_InLoop' has a wrong offset!");
static_assert(offsetof(UEndingCongratsWidget, ObCub_InLoop) == 0x0003B8, "Member 'UEndingCongratsWidget::ObCub_InLoop' has a wrong offset!");
static_assert(offsetof(UEndingCongratsWidget, Anim_Out) == 0x0003C0, "Member 'UEndingCongratsWidget::Anim_Out' has a wrong offset!");

// Class UNION.CheatMachineCustomize
// 0x0000 (0x0028 - 0x0028)
class UCheatMachineCustomize final : public UObject
{
public:
	void CopySelectedMachineCustomizeDataToClipboard(int32 InPlayerIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatMachineCustomize">();
	}
	static class UCheatMachineCustomize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatMachineCustomize>();
	}
};
static_assert(alignof(UCheatMachineCustomize) == 0x000008, "Wrong alignment on UCheatMachineCustomize");
static_assert(sizeof(UCheatMachineCustomize) == 0x000028, "Wrong size on UCheatMachineCustomize");

// Class UNION.CommonLobbyMemberContext
// 0x0050 (0x00F0 - 0x00A0)
class UCommonLobbyMemberContext : public ULobbyMemberContextBase
{
public:
	uint8                                         Pad_A0[0x50];                                      // 0x00A0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ECommonLobbyMemberState GetCommonMemberState();
	void GetUsageCountByChara(TArray<struct FUsageCountChara>* OutDataArray);
	void GetUsageCountByMachineType(TArray<int32>* OutDataArray);
	void OnLobbyOperationCompleteWithError(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void ResetLocalData();
	void SendEntryRaceId(const class FString& InEntryRaceId);
	void SendHorn();
	void SendLikeTo(class ULobbyMemberContextBase* Member);
	void SendResultSaveDone();
	void SendSelectedCourseId(int32 courseId);
	void SendSelectedCourseId_Callback(int32 courseId, TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);
	void SendStamp(int32 StampId);
	void SetCommonMemberState(ECommonLobbyMemberState NewState);
	void SetDegreeId(int32 degreeId);
	void SetFirstRankFlag(bool bValue);
	void SetLikeCount(int32 Count);
	void SetPlatform(const class FString& Platform);
	void SetPlatformType(EAppSupportedPlatform Platform);
	void SetPlatformUserId(const class FString& PlatformUserId);
	void SetRacerDriverAndMachineData(EDriverId DriverId, int32 MachineId, EMachineId FrontPartsId, EMachineId RearPartsId, EMachineId TirePartsId);
	void SetRacerDriverAndMachineDataEx(EDriverId DriverId, int32 MachineId, const struct FUserMachineCustomizeData& CustomizeData);
	void SetRacerGadget(const TArray<EGadgetId>& Gadgets);
	void SetRacerGadgetData(const struct FGadgetPlateUIData& GadgetPlateData);
	void SetRacerName(const class FString& RacerName);
	void SetRateRank(int32 Rank);
	void SetUsageCountByChara(const TArray<struct FUsageCountChara>& UsageCountArray);
	void SetUsageCountByMachineType(const TArray<int32>& UsageCountArray);

	ECommonLobbyMemberState GetCachedCommonMemberState() const;
	void GetDegreeId(int32* OutResult) const;
	void GetFirstRankFlag(bool* bOutValue) const;
	void GetLikeCount(int32* OutResult) const;
	ELobbyInviteType GetLobbyInviteType() const;
	void GetPlatform(class FText* OutResult) const;
	void GetPlatformType(EAppSupportedPlatform* OutResult) const;
	void GetPlatformUserId(class FString* OutResult) const;
	void GetRacerDriverId(EDriverId* OutResult) const;
	void GetRacerGadget(TArray<EGadgetId>* OutGadgets) const;
	void GetRacerGadgetData(struct FGadgetPlateUIData* OutGadgetPlateData) const;
	void GetRacerMachineData(int32* OutMachineId, struct FUserMachineCustomizeData* OutCustomizeData) const;
	void GetRacerName(class FText* OutResult) const;
	bool GetRateRank(int32* OutResult) const;
	void GetSelectedCourseId(int32* OutResult) const;
	void GetStickerCustomizeData(const int32 Key, TArray<struct FUserStickerData>* OutStickerData) const;
	bool IsInLobby() const;
	bool IsRaceHost() const;
	bool IsWaitingMembersTimeout() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonLobbyMemberContext">();
	}
	static class UCommonLobbyMemberContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonLobbyMemberContext>();
	}
};
static_assert(alignof(UCommonLobbyMemberContext) == 0x000008, "Wrong alignment on UCommonLobbyMemberContext");
static_assert(sizeof(UCommonLobbyMemberContext) == 0x0000F0, "Wrong size on UCommonLobbyMemberContext");

// Class UNION.CustomMatchLobbyMemberContext
// 0x00A8 (0x0198 - 0x00F0)
class UCustomMatchLobbyMemberContext : public UCommonLobbyMemberContext
{
public:
	uint8                                         Pad_F0[0xA8];                                      // 0x00F0(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SendTodayRecord(const struct FFriendLobbyMemberTodayRecord& InTodayRecord);
	void SetReady(bool bValue);

	void GetReady(bool* OutValue) const;
	void GetTodayRecord(struct FFriendLobbyMemberTodayRecord* OutResult) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomMatchLobbyMemberContext">();
	}
	static class UCustomMatchLobbyMemberContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomMatchLobbyMemberContext>();
	}
};
static_assert(alignof(UCustomMatchLobbyMemberContext) == 0x000008, "Wrong alignment on UCustomMatchLobbyMemberContext");
static_assert(sizeof(UCustomMatchLobbyMemberContext) == 0x000198, "Wrong size on UCustomMatchLobbyMemberContext");

// Class UNION.WirelessLobbyMemberContext
// 0x0008 (0x01A0 - 0x0198)
class UWirelessLobbyMemberContext final : public UCustomMatchLobbyMemberContext
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ReplyReadyCheck();

	bool IsReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WirelessLobbyMemberContext">();
	}
	static class UWirelessLobbyMemberContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWirelessLobbyMemberContext>();
	}
};
static_assert(alignof(UWirelessLobbyMemberContext) == 0x000008, "Wrong alignment on UWirelessLobbyMemberContext");
static_assert(sizeof(UWirelessLobbyMemberContext) == 0x0001A0, "Wrong size on UWirelessLobbyMemberContext");

// Class UNION.CheatMemoryProfile
// 0x0000 (0x0028 - 0x0028)
class UCheatMemoryProfile final : public UObject
{
public:
	void AutoMemoryProfileCourses(const class FString& platformTypeName, int32 startProfileStageIndex, int32 endProfileStageIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatMemoryProfile">();
	}
	static class UCheatMemoryProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatMemoryProfile>();
	}
};
static_assert(alignof(UCheatMemoryProfile) == 0x000008, "Wrong alignment on UCheatMemoryProfile");
static_assert(sizeof(UCheatMemoryProfile) == 0x000028, "Wrong size on UCheatMemoryProfile");

// Class UNION.CheatNetwork
// 0x0000 (0x0028 - 0x0028)
class UCheatNetwork final : public UObject
{
public:
	void EnableLobbyLeaveInReturnedFromRaceToLobby(bool InFlag);
	void ForceDisableLobbyKick(bool InFlag);
	void ForceOpenFriendMatch(bool InEnable);
	void ForceSetBanStatusOnLogin(int32 BanStatus);
	void ForceSetGameClosedStatusOnLogin(int32 GameClosedStatus);
	void ForceSetNetworkRequestIntervalSec(const class FString& InputParamSec);
	void ForceSetRomVersion(const class FString& InputParam);
	void ForceSkipCloseLobbyInvitationWindow(bool InFlag);
	void ForceUpdateCustomRuleRaceCountMax(bool InFlag);
	void NetworkAddMemberInitCompleteTimeoutSec(int32 InNum);
	void PrivateMatchMonkeyTestAllSet();
	void SetAllowCrossPlay(bool InFlag);
	void SetAllowNotifyLobbyInvitesInRace(bool InFlag);
	void SetAllowReceiveFriendRequests(bool InFlag);
	void SetAllowReceiveLobbyInvites(bool InFlag);
	void SetAllowSearchByPlayerId(bool InFlag);
	void SetDummyMasterDataSum(int32 InMasterDataSum);
	void SetNetworkP2PCanSendPackeTimeout(int32 InNum);
	void SetNetworkP2PSequenceTimeout(int32 InNum);
	void SetNetworkSendHornSec(float InNum);
	void SetNetworkSendStampSec(float InNum);
	void SetNetworkTimeoutSec(int32 InNum);
	void SetShowPlayStatus(bool InFlag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatNetwork">();
	}
	static class UCheatNetwork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatNetwork>();
	}
};
static_assert(alignof(UCheatNetwork) == 0x000008, "Wrong alignment on UCheatNetwork");
static_assert(sizeof(UCheatNetwork) == 0x000028, "Wrong size on UCheatNetwork");

// Class UNION.GhostUploadState
// 0x0060 (0x0188 - 0x0128)
class UGhostUploadState : public UMenuSequenceSubStateBase
{
public:
	TMulticastInlineDelegate<void()>              GoToGhostSelectDispatcher;                         // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EStageId                                      m_SelectedStageId;                                 // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESpeedClassId                                 m_SelectedSpeedClassId;                            // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          m_bIsStartConfimationState;                        // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13B[0x4D];                                     // 0x013B(0x004D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGhostLoadCompleted();
	void RequestStartGhostLoad(EStageId SelectedStageId, ESpeedClassId SpeedClassId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostUploadState">();
	}
	static class UGhostUploadState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostUploadState>();
	}
};
static_assert(alignof(UGhostUploadState) == 0x000008, "Wrong alignment on UGhostUploadState");
static_assert(sizeof(UGhostUploadState) == 0x000188, "Wrong size on UGhostUploadState");
static_assert(offsetof(UGhostUploadState, GoToGhostSelectDispatcher) == 0x000128, "Member 'UGhostUploadState::GoToGhostSelectDispatcher' has a wrong offset!");
static_assert(offsetof(UGhostUploadState, m_SelectedStageId) == 0x000138, "Member 'UGhostUploadState::m_SelectedStageId' has a wrong offset!");
static_assert(offsetof(UGhostUploadState, m_SelectedSpeedClassId) == 0x000139, "Member 'UGhostUploadState::m_SelectedSpeedClassId' has a wrong offset!");
static_assert(offsetof(UGhostUploadState, m_bIsStartConfimationState) == 0x00013A, "Member 'UGhostUploadState::m_bIsStartConfimationState' has a wrong offset!");

// Class UNION.CheatOnlineSequence
// 0x0000 (0x0028 - 0x0028)
class UCheatOnlineSequence final : public UObject
{
public:
	void EnableEnterLobbyAlone(const bool Enable);
	void EnableOldOnlineSequence(const bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatOnlineSequence">();
	}
	static class UCheatOnlineSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatOnlineSequence>();
	}
};
static_assert(alignof(UCheatOnlineSequence) == 0x000008, "Wrong alignment on UCheatOnlineSequence");
static_assert(sizeof(UCheatOnlineSequence) == 0x000028, "Wrong size on UCheatOnlineSequence");

// Class UNION.FairPlayPointWidget
// 0x0020 (0x0348 - 0x0328)
class UFairPlayPointWidget : public UUnionUIInputWidget
{
public:
	TMulticastInlineDelegate<void()>              DisplayEndDelegate;                                // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	float                                         InputWaitTime;                                     // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33C[0xC];                                      // 0x033C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckEnableInput();
	void EndDisplay();
	void Setup(int32 InFairPlayPoint, bool bInBan, const class FString& InPenaltyEndTime);
	void StartDisplay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FairPlayPointWidget">();
	}
	static class UFairPlayPointWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFairPlayPointWidget>();
	}
};
static_assert(alignof(UFairPlayPointWidget) == 0x000008, "Wrong alignment on UFairPlayPointWidget");
static_assert(sizeof(UFairPlayPointWidget) == 0x000348, "Wrong size on UFairPlayPointWidget");
static_assert(offsetof(UFairPlayPointWidget, DisplayEndDelegate) == 0x000328, "Member 'UFairPlayPointWidget::DisplayEndDelegate' has a wrong offset!");
static_assert(offsetof(UFairPlayPointWidget, InputWaitTime) == 0x000338, "Member 'UFairPlayPointWidget::InputWaitTime' has a wrong offset!");

// Class UNION.CheatPartyRace
// 0x0000 (0x0028 - 0x0028)
class UCheatPartyRace final : public UObject
{
public:
	void DebugRivalTeamSelect();
	void ResetAllRivalTeamEliminatedCount();
	void ResetAllRivalTeamWinCount();
	void ResetLastCutinRivalTeamId();
	void ResetRivalTeamEliminatedCount(ERivalTeamId InTeamID);
	void ResetRivalTeamWinCount(ERivalTeamId InTeamID);
	void ResetSelectedRivalTeamId();
	void SetAllRivalTeamEliminatedCount(int32 Count);
	void SetAllRivalTeamWinCount(int32 InWinCount);
	void SetRivalTeamAndWin(ERivalTeamId InTeamID, int32 InWinCount);
	void SetRivalTeamEliminatedCount(ERivalTeamId InTeamID, int32 InWinCount);
	void SetRivalTeamWinCount(ERivalTeamId InTeamID, int32 InWinCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatPartyRace">();
	}
	static class UCheatPartyRace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatPartyRace>();
	}
};
static_assert(alignof(UCheatPartyRace) == 0x000008, "Wrong alignment on UCheatPartyRace");
static_assert(sizeof(UCheatPartyRace) == 0x000028, "Wrong size on UCheatPartyRace");

// Class UNION.MachineCustomizePage
// 0x0000 (0x00F8 - 0x00F8)
class UMachineCustomizePage : public UHierarchicalStateMachineStateComponent
{
public:
	void Bind();
	void BindPage();
	void BindTab();
	void Cancel();
	void ChangeState(EMachineCustomizeSequenceState InNext);
	void MoveCameraCarStatusType(ECarStatusType InCarStatusType, EMachinePartsType InPartsType);
	void MoveCameraID(EGarageCameraMovementTransformDataId InId);
	void SetIsDirty(bool bInIsDirty);
	void TabChange(EMachineCustomizeTabID InTabID);
	void Unbind();
	void UnbindPage();
	void UnbindTab();

	class AGarageCamera* GetCamera() const;
	class UMachineCustomTab* GetTab() const;
	class UMachineCustomTop* GetTop() const;
	bool IsDirty() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizePage">();
	}
	static class UMachineCustomizePage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizePage>();
	}
};
static_assert(alignof(UMachineCustomizePage) == 0x000008, "Wrong alignment on UMachineCustomizePage");
static_assert(sizeof(UMachineCustomizePage) == 0x0000F8, "Wrong size on UMachineCustomizePage");

// Class UNION.MachineCustomizeHornSelectState
// 0x0050 (0x0148 - 0x00F8)
class UMachineCustomizeHornSelectState : public UMachineCustomizePage
{
public:
	class FText                                   DialogButtonTextYes;                               // 0x00F8(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   DialogButtonTextNo;                                // 0x0108(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   DialogButtonTextOK;                                // 0x0118(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	class URewardDialog*                          Dialog;                                            // 0x0128(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_130[0x18];                                     // 0x0130(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class URewardDialog* CreateRewardDialog();
	void DialogCallback(EDialogResult InResult);
	void EventCancel(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void EventDecision(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void EventFocus(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void EventShowNewButton(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void EventUnfocus(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void PlaySoundImpossible();
	void PlaySoundPossible();

	class UMachineCustomizeCustomList* GetCustomList() const;
	class UMachineHornComponent* GetHornComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeHornSelectState">();
	}
	static class UMachineCustomizeHornSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeHornSelectState>();
	}
};
static_assert(alignof(UMachineCustomizeHornSelectState) == 0x000008, "Wrong alignment on UMachineCustomizeHornSelectState");
static_assert(sizeof(UMachineCustomizeHornSelectState) == 0x000148, "Wrong size on UMachineCustomizeHornSelectState");
static_assert(offsetof(UMachineCustomizeHornSelectState, DialogButtonTextYes) == 0x0000F8, "Member 'UMachineCustomizeHornSelectState::DialogButtonTextYes' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeHornSelectState, DialogButtonTextNo) == 0x000108, "Member 'UMachineCustomizeHornSelectState::DialogButtonTextNo' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeHornSelectState, DialogButtonTextOK) == 0x000118, "Member 'UMachineCustomizeHornSelectState::DialogButtonTextOK' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeHornSelectState, Dialog) == 0x000128, "Member 'UMachineCustomizeHornSelectState::Dialog' has a wrong offset!");

// Class UNION.CheatPlayerLevel
// 0x0000 (0x0028 - 0x0028)
class UCheatPlayerLevel final : public UObject
{
public:
	void AddDonpaTicket(int32 InNum);
	void AddFestaPoint(int32 InNum);
	void ReactionDebugLogOn();
	void SetDonpaTicket(int32 InNum);
	void SetFestaPoint(int32 InNum);
	void SetOfflineResultForcePressed();
	void SetPlayerTotalRaceCount(int32 InPlayerTotalRaceCount);
	void UseDonpaTicket(int32 InNum);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatPlayerLevel">();
	}
	static class UCheatPlayerLevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatPlayerLevel>();
	}
};
static_assert(alignof(UCheatPlayerLevel) == 0x000008, "Wrong alignment on UCheatPlayerLevel");
static_assert(sizeof(UCheatPlayerLevel) == 0x000028, "Wrong size on UCheatPlayerLevel");

// Class UNION.VehicleRearPartsActor
// 0x0140 (0x03D0 - 0x0290)
class alignas(0x10) AVehicleRearPartsActor : public AActor
{
public:
	class UUnionSkeletalMeshComponent*            CockpitMeshComponent;                              // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              RearMeshComponent;                                 // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUnionStaticMeshComponent*>      TireMeshComponents;                                // 0x02A0(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UUnionStaticMeshComponent*>      BoatMeshComponents;                                // 0x02B0(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UUnionStaticMeshComponent*>      FlightMeshComponents;                              // 0x02C0(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UCurveVector*                           LocationCurve;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           RotationCurve;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ScaleCurve;                                        // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CutoffTime;                                        // 0x02E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CutoffVel;                                         // 0x02F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CutoffRot;                                         // 0x0308(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CutoffRotCenterOffset;                             // 0x0320(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CutoffRotCenterOffsetForHoverboard;                // 0x0338(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CutoffScale;                                       // 0x0350(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_354[0x7C];                                     // 0x0354(0x007C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeVehicleType(EVehicleType NewVehicleType);
	void SetLightingChannels(bool Channel0, bool Channel1, bool Channel2);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleRearPartsActor">();
	}
	static class AVehicleRearPartsActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVehicleRearPartsActor>();
	}
};
static_assert(alignof(AVehicleRearPartsActor) == 0x000010, "Wrong alignment on AVehicleRearPartsActor");
static_assert(sizeof(AVehicleRearPartsActor) == 0x0003D0, "Wrong size on AVehicleRearPartsActor");
static_assert(offsetof(AVehicleRearPartsActor, CockpitMeshComponent) == 0x000290, "Member 'AVehicleRearPartsActor::CockpitMeshComponent' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, RearMeshComponent) == 0x000298, "Member 'AVehicleRearPartsActor::RearMeshComponent' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, TireMeshComponents) == 0x0002A0, "Member 'AVehicleRearPartsActor::TireMeshComponents' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, BoatMeshComponents) == 0x0002B0, "Member 'AVehicleRearPartsActor::BoatMeshComponents' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, FlightMeshComponents) == 0x0002C0, "Member 'AVehicleRearPartsActor::FlightMeshComponents' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, LocationCurve) == 0x0002D0, "Member 'AVehicleRearPartsActor::LocationCurve' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, RotationCurve) == 0x0002D8, "Member 'AVehicleRearPartsActor::RotationCurve' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, ScaleCurve) == 0x0002E0, "Member 'AVehicleRearPartsActor::ScaleCurve' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, CutoffTime) == 0x0002E8, "Member 'AVehicleRearPartsActor::CutoffTime' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, CutoffVel) == 0x0002F0, "Member 'AVehicleRearPartsActor::CutoffVel' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, CutoffRot) == 0x000308, "Member 'AVehicleRearPartsActor::CutoffRot' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, CutoffRotCenterOffset) == 0x000320, "Member 'AVehicleRearPartsActor::CutoffRotCenterOffset' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, CutoffRotCenterOffsetForHoverboard) == 0x000338, "Member 'AVehicleRearPartsActor::CutoffRotCenterOffsetForHoverboard' has a wrong offset!");
static_assert(offsetof(AVehicleRearPartsActor, CutoffScale) == 0x000350, "Member 'AVehicleRearPartsActor::CutoffScale' has a wrong offset!");

// Class UNION.CheatSanitizer
// 0x0000 (0x0028 - 0x0028)
class UCheatSanitizer final : public UObject
{
public:
	void DebugSanitize(const class FString& CheckWord);
	void DebugSanitizeArray(const class FString& CheckWord, int32 RequestCount);
	void SetDebugSanitizerFail(bool DebugSanitizerFail);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatSanitizer">();
	}
	static class UCheatSanitizer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatSanitizer>();
	}
};
static_assert(alignof(UCheatSanitizer) == 0x000008, "Wrong alignment on UCheatSanitizer");
static_assert(sizeof(UCheatSanitizer) == 0x000028, "Wrong size on UCheatSanitizer");

// Class UNION.GrandPrixTrophyUI
// 0x0058 (0x0338 - 0x02E0)
class UGrandPrixTrophyUI : public UUserWidget
{
public:
	EGrandPrixId                                  GrandPrixId;                                       // 0x02E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      TrophyMaterialGold;                                // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      TrophyMaterialGold_Ticket;                         // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      TrophyMaterialSilver;                              // 0x02F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      TrophyMaterialBronze;                              // 0x0300(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      TrophyGlowMaterialGold;                            // 0x0308(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      TrophyGlowMaterialGold_Ticket;                     // 0x0310(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      TrophyGlowMaterialSilver;                          // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      TrophyGlowMaterialBronze;                          // 0x0320(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBorder*                                DSP_PAT_Achievement_GrandPrix;                     // 0x0328(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 DSP_PAT_Eff_Achievement_GrandPrix;                 // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetGrandPrix(EGrandPrixId InGrandprixId);
	bool SetGrandPrixProgress(EGrandPrixProgressId InProgress);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GrandPrixTrophyUI">();
	}
	static class UGrandPrixTrophyUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGrandPrixTrophyUI>();
	}
};
static_assert(alignof(UGrandPrixTrophyUI) == 0x000008, "Wrong alignment on UGrandPrixTrophyUI");
static_assert(sizeof(UGrandPrixTrophyUI) == 0x000338, "Wrong size on UGrandPrixTrophyUI");
static_assert(offsetof(UGrandPrixTrophyUI, GrandPrixId) == 0x0002E0, "Member 'UGrandPrixTrophyUI::GrandPrixId' has a wrong offset!");
static_assert(offsetof(UGrandPrixTrophyUI, TrophyMaterialGold) == 0x0002E8, "Member 'UGrandPrixTrophyUI::TrophyMaterialGold' has a wrong offset!");
static_assert(offsetof(UGrandPrixTrophyUI, TrophyMaterialGold_Ticket) == 0x0002F0, "Member 'UGrandPrixTrophyUI::TrophyMaterialGold_Ticket' has a wrong offset!");
static_assert(offsetof(UGrandPrixTrophyUI, TrophyMaterialSilver) == 0x0002F8, "Member 'UGrandPrixTrophyUI::TrophyMaterialSilver' has a wrong offset!");
static_assert(offsetof(UGrandPrixTrophyUI, TrophyMaterialBronze) == 0x000300, "Member 'UGrandPrixTrophyUI::TrophyMaterialBronze' has a wrong offset!");
static_assert(offsetof(UGrandPrixTrophyUI, TrophyGlowMaterialGold) == 0x000308, "Member 'UGrandPrixTrophyUI::TrophyGlowMaterialGold' has a wrong offset!");
static_assert(offsetof(UGrandPrixTrophyUI, TrophyGlowMaterialGold_Ticket) == 0x000310, "Member 'UGrandPrixTrophyUI::TrophyGlowMaterialGold_Ticket' has a wrong offset!");
static_assert(offsetof(UGrandPrixTrophyUI, TrophyGlowMaterialSilver) == 0x000318, "Member 'UGrandPrixTrophyUI::TrophyGlowMaterialSilver' has a wrong offset!");
static_assert(offsetof(UGrandPrixTrophyUI, TrophyGlowMaterialBronze) == 0x000320, "Member 'UGrandPrixTrophyUI::TrophyGlowMaterialBronze' has a wrong offset!");
static_assert(offsetof(UGrandPrixTrophyUI, DSP_PAT_Achievement_GrandPrix) == 0x000328, "Member 'UGrandPrixTrophyUI::DSP_PAT_Achievement_GrandPrix' has a wrong offset!");
static_assert(offsetof(UGrandPrixTrophyUI, DSP_PAT_Eff_Achievement_GrandPrix) == 0x000330, "Member 'UGrandPrixTrophyUI::DSP_PAT_Eff_Achievement_GrandPrix' has a wrong offset!");

// Class UNION.RivalTeamSelectIconWidget
// 0x00B0 (0x0530 - 0x0480)
class URivalTeamSelectIconWidget : public UUnionUIButtonBase
{
public:
	class UImage*                                 DMY_TeamIcon_Image;                                // 0x0480(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_TeamIcon_Lock;                                 // 0x0488(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_Complet_01;                                    // 0x0490(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_Complet_02;                                    // 0x0498(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_Complet_03;                                    // 0x04A0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                DSP_LoadingCharaIcon;                              // 0x04A8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              TextureRewardOFF;                                  // 0x04B0(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              TextureRewardON;                                   // 0x04D8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              TeamIconSoftTexture;                               // 0x0500(0x0028)(Transient, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_528[0x8];                                      // 0x0528(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Back();
	void Focus();
	void PlayAnimationLoop();
	void PlayAnimationSelectIn();
	void PlayAnimationSelectLoop();
	void PlayCancelSE();
	void PlayFocusSE();
	void Unfocus();

	ERivalTeamId GetTeamID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RivalTeamSelectIconWidget">();
	}
	static class URivalTeamSelectIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URivalTeamSelectIconWidget>();
	}
};
static_assert(alignof(URivalTeamSelectIconWidget) == 0x000008, "Wrong alignment on URivalTeamSelectIconWidget");
static_assert(sizeof(URivalTeamSelectIconWidget) == 0x000530, "Wrong size on URivalTeamSelectIconWidget");
static_assert(offsetof(URivalTeamSelectIconWidget, DMY_TeamIcon_Image) == 0x000480, "Member 'URivalTeamSelectIconWidget::DMY_TeamIcon_Image' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectIconWidget, DSP_TeamIcon_Lock) == 0x000488, "Member 'URivalTeamSelectIconWidget::DSP_TeamIcon_Lock' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectIconWidget, DMY_Complet_01) == 0x000490, "Member 'URivalTeamSelectIconWidget::DMY_Complet_01' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectIconWidget, DMY_Complet_02) == 0x000498, "Member 'URivalTeamSelectIconWidget::DMY_Complet_02' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectIconWidget, DMY_Complet_03) == 0x0004A0, "Member 'URivalTeamSelectIconWidget::DMY_Complet_03' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectIconWidget, DSP_LoadingCharaIcon) == 0x0004A8, "Member 'URivalTeamSelectIconWidget::DSP_LoadingCharaIcon' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectIconWidget, TextureRewardOFF) == 0x0004B0, "Member 'URivalTeamSelectIconWidget::TextureRewardOFF' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectIconWidget, TextureRewardON) == 0x0004D8, "Member 'URivalTeamSelectIconWidget::TextureRewardON' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectIconWidget, TeamIconSoftTexture) == 0x000500, "Member 'URivalTeamSelectIconWidget::TeamIconSoftTexture' has a wrong offset!");

// Class UNION.CheatSaveData
// 0x0000 (0x0028 - 0x0028)
class UCheatSaveData final : public UObject
{
public:
	static void ForceSetFinishedAdvertiseLogoFlow();
	static void SetAllTipsRead();
	static void SetupOnlineCheck();

	void AddRaceStats(int32 InStatsIndex, int32 Value);
	void ClearDriverNew(EDriverId InDriverId);
	void ClearNoticeCheckTime();
	void SetDriverProperty(EDriverId InDriverId, bool IsSelectable, bool IsNew);
	void SetDriverSelectable(EDriverId InDriverId);
	void SetDriverSelectableAll();
	void SetUserNiceCount(int32 InNiceCount);
	void ShowRaceStats(int32 InStatsIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatSaveData">();
	}
	static class UCheatSaveData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatSaveData>();
	}
};
static_assert(alignof(UCheatSaveData) == 0x000008, "Wrong alignment on UCheatSaveData");
static_assert(sizeof(UCheatSaveData) == 0x000028, "Wrong size on UCheatSaveData");

// Class UNION.EtceteraSequence
// 0x0060 (0x03C8 - 0x0368)
class AEtceteraSequence final : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   UISceneClass;                                      // 0x0370(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionUISceneBase*                      UIScene;                                           // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EEtceteraSequenceMainState                    PrevSequenceState;                                 // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEtceteraSequenceMainState                    SelectedMainState;                                 // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B2[0x6];                                      // 0x03B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADLCStoreDialogActor*                   PlatformStorePopup;                                // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFullGameStoreDialogActor*              FullGameStorePopup;                                // 0x03C0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CompletePlatformStoreEvent(bool IsAccept);
	void DecisionFullGameStoreEvent(bool IsAccept);
	void OnInitStateDLC();
	void OnInitStateEtceteraTop();
	void OnInitStateExit();
	void OnInitStateFullGameStore();
	void OnInitStateIdle();
	void OnInitStateSelectMainEtcetera();
	void SetNextEtceteraSequenceState(EEtceteraSequenceMainState InState, EEtceteraSequenceMainState PrevState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EtceteraSequence">();
	}
	static class AEtceteraSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEtceteraSequence>();
	}
};
static_assert(alignof(AEtceteraSequence) == 0x000008, "Wrong alignment on AEtceteraSequence");
static_assert(sizeof(AEtceteraSequence) == 0x0003C8, "Wrong size on AEtceteraSequence");
static_assert(offsetof(AEtceteraSequence, UISceneClass) == 0x000370, "Member 'AEtceteraSequence::UISceneClass' has a wrong offset!");
static_assert(offsetof(AEtceteraSequence, UIScene) == 0x000398, "Member 'AEtceteraSequence::UIScene' has a wrong offset!");
static_assert(offsetof(AEtceteraSequence, OnBackEvent) == 0x0003A0, "Member 'AEtceteraSequence::OnBackEvent' has a wrong offset!");
static_assert(offsetof(AEtceteraSequence, PrevSequenceState) == 0x0003B0, "Member 'AEtceteraSequence::PrevSequenceState' has a wrong offset!");
static_assert(offsetof(AEtceteraSequence, SelectedMainState) == 0x0003B1, "Member 'AEtceteraSequence::SelectedMainState' has a wrong offset!");
static_assert(offsetof(AEtceteraSequence, PlatformStorePopup) == 0x0003B8, "Member 'AEtceteraSequence::PlatformStorePopup' has a wrong offset!");
static_assert(offsetof(AEtceteraSequence, FullGameStorePopup) == 0x0003C0, "Member 'AEtceteraSequence::FullGameStorePopup' has a wrong offset!");

// Class UNION.CheatSound
// 0x0000 (0x0028 - 0x0028)
class UCheatSound final : public UObject
{
public:
	static void GetDebugCourseNumberBGM(bool* bEnableMain, int32* MainNumber, bool* bEnableAnother, int32* AnotherNumber);

	void ForceSetCourseBGMAnother(const class FString& InputParam);
	void ForceSetCourseBGMMain(const class FString& InputParam);
	void LoadCuesheet(const class FString& CueSheetIds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatSound">();
	}
	static class UCheatSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatSound>();
	}
};
static_assert(alignof(UCheatSound) == 0x000008, "Wrong alignment on UCheatSound");
static_assert(sizeof(UCheatSound) == 0x000028, "Wrong size on UCheatSound");

// Class UNION.TimeTrialGhostConfirmationState
// 0x00A8 (0x01D0 - 0x0128)
class UTimeTrialGhostConfirmationState : public UMenuSequenceSubStateBase
{
public:
	EStageId                                      m_SelectedStageId;                                 // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESpeedClassId                                 m_SelectedSpeedClassId;                            // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          m_bIsStartConfimationState;                        // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12B[0x5];                                      // 0x012B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUserTimeTrialRaceData                 OfflineResultData;                                 // 0x0130(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_180[0x50];                                     // 0x0180(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGhostHashCheckCompleted(bool bIsGhostHashOK);
	void OnOpenError();
	void OnShowPfProfileErrorWindowEnd();
	void RequestPFProfileDisplay(const class FString& InPlatformUserId);
	void RequestStartCheckGhostHash(EStageId SelectedStageId, ESpeedClassId SpeedClassId);
	void SetBackMenuState(const EMenuSequenceSubState InState);

	EMenuSequenceSubState GetBackMenuState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeTrialGhostConfirmationState">();
	}
	static class UTimeTrialGhostConfirmationState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeTrialGhostConfirmationState>();
	}
};
static_assert(alignof(UTimeTrialGhostConfirmationState) == 0x000008, "Wrong alignment on UTimeTrialGhostConfirmationState");
static_assert(sizeof(UTimeTrialGhostConfirmationState) == 0x0001D0, "Wrong size on UTimeTrialGhostConfirmationState");
static_assert(offsetof(UTimeTrialGhostConfirmationState, m_SelectedStageId) == 0x000128, "Member 'UTimeTrialGhostConfirmationState::m_SelectedStageId' has a wrong offset!");
static_assert(offsetof(UTimeTrialGhostConfirmationState, m_SelectedSpeedClassId) == 0x000129, "Member 'UTimeTrialGhostConfirmationState::m_SelectedSpeedClassId' has a wrong offset!");
static_assert(offsetof(UTimeTrialGhostConfirmationState, m_bIsStartConfimationState) == 0x00012A, "Member 'UTimeTrialGhostConfirmationState::m_bIsStartConfimationState' has a wrong offset!");
static_assert(offsetof(UTimeTrialGhostConfirmationState, OfflineResultData) == 0x000130, "Member 'UTimeTrialGhostConfirmationState::OfflineResultData' has a wrong offset!");

// Class UNION.CheatStage
// 0x0000 (0x0028 - 0x0028)
class UCheatStage final : public UObject
{
public:
	void ForceUserCourse(bool bInForceUserCourse);
	void Safe2ndLapCourse(bool bInSafeStage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatStage">();
	}
	static class UCheatStage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatStage>();
	}
};
static_assert(alignof(UCheatStage) == 0x000008, "Wrong alignment on UCheatStage");
static_assert(sizeof(UCheatStage) == 0x000028, "Wrong size on UCheatStage");

// Class UNION.MachineCustomCommonWindow
// 0x0048 (0x0328 - 0x02E0)
class UMachineCustomCommonWindow : public UUserWidget
{
public:
	class UWidgetSwitcher*                        WidgetSwitcher_MachineCustom;                      // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachineCustomTab*                      WBP_MachineCustom_Tab;                             // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachinePartsSelectWindow*              WBP_MachineCustom_Sub_Parts;                       // 0x02F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUISceneBase*                      WBP_MachineCustom_Sub_PresetPaint;                 // 0x02F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUISceneBase*                      WBP_MachineCustom_Sub_CustomPaint;                 // 0x0300(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUISceneBase*                      WBP_MachineCustom_Sub_ColorPicker;                 // 0x0308(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachineCustomizeCustomList*            WBP_MachineCustom_Sub_CustomList;                  // 0x0310(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachineStickerSlotSelectWindow*        WBP_MachineCustom_Sub_StickerTop;                  // 0x0318(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachineStickerSelectWindow*            WBP_MachineCustom_Sub_StickerSelect;               // 0x0320(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SwitchPage(EMachineCustomizeTabWindowPageID InPageID);

	class UUnionUISceneBase* GetColorAreaSelectPage() const;
	class UUnionUISceneBase* GetColorDetailPage() const;
	class UUnionUISceneBase* GetColorPresetSelectPage() const;
	class UMachineCustomizeCustomList* GetCustomList() const;
	class UMachinePartsSelectWindow* GetPartsSelectWindow() const;
	class UMachineStickerSelectWindow* GetStickerSelectPage() const;
	class UMachineStickerSlotSelectWindow* GetStickerTopPage() const;
	class UMachineCustomTab* GetTabWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomCommonWindow">();
	}
	static class UMachineCustomCommonWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomCommonWindow>();
	}
};
static_assert(alignof(UMachineCustomCommonWindow) == 0x000008, "Wrong alignment on UMachineCustomCommonWindow");
static_assert(sizeof(UMachineCustomCommonWindow) == 0x000328, "Wrong size on UMachineCustomCommonWindow");
static_assert(offsetof(UMachineCustomCommonWindow, WidgetSwitcher_MachineCustom) == 0x0002E0, "Member 'UMachineCustomCommonWindow::WidgetSwitcher_MachineCustom' has a wrong offset!");
static_assert(offsetof(UMachineCustomCommonWindow, WBP_MachineCustom_Tab) == 0x0002E8, "Member 'UMachineCustomCommonWindow::WBP_MachineCustom_Tab' has a wrong offset!");
static_assert(offsetof(UMachineCustomCommonWindow, WBP_MachineCustom_Sub_Parts) == 0x0002F0, "Member 'UMachineCustomCommonWindow::WBP_MachineCustom_Sub_Parts' has a wrong offset!");
static_assert(offsetof(UMachineCustomCommonWindow, WBP_MachineCustom_Sub_PresetPaint) == 0x0002F8, "Member 'UMachineCustomCommonWindow::WBP_MachineCustom_Sub_PresetPaint' has a wrong offset!");
static_assert(offsetof(UMachineCustomCommonWindow, WBP_MachineCustom_Sub_CustomPaint) == 0x000300, "Member 'UMachineCustomCommonWindow::WBP_MachineCustom_Sub_CustomPaint' has a wrong offset!");
static_assert(offsetof(UMachineCustomCommonWindow, WBP_MachineCustom_Sub_ColorPicker) == 0x000308, "Member 'UMachineCustomCommonWindow::WBP_MachineCustom_Sub_ColorPicker' has a wrong offset!");
static_assert(offsetof(UMachineCustomCommonWindow, WBP_MachineCustom_Sub_CustomList) == 0x000310, "Member 'UMachineCustomCommonWindow::WBP_MachineCustom_Sub_CustomList' has a wrong offset!");
static_assert(offsetof(UMachineCustomCommonWindow, WBP_MachineCustom_Sub_StickerTop) == 0x000318, "Member 'UMachineCustomCommonWindow::WBP_MachineCustom_Sub_StickerTop' has a wrong offset!");
static_assert(offsetof(UMachineCustomCommonWindow, WBP_MachineCustom_Sub_StickerSelect) == 0x000320, "Member 'UMachineCustomCommonWindow::WBP_MachineCustom_Sub_StickerSelect' has a wrong offset!");

// Class UNION.CheatSticker
// 0x0000 (0x0028 - 0x0028)
class UCheatSticker final : public UObject
{
public:
	void SetBakeRequestIntervalTime(float InNum);
	void UnlockSticker();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatSticker">();
	}
	static class UCheatSticker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatSticker>();
	}
};
static_assert(alignof(UCheatSticker) == 0x000008, "Wrong alignment on UCheatSticker");
static_assert(sizeof(UCheatSticker) == 0x000028, "Wrong size on UCheatSticker");

// Class UNION.GroupSelectComponentController
// 0x00B0 (0x0530 - 0x0480)
class UGroupSelectComponentController : public UUnionUIButtonBase
{
public:
	class UGroupSelectComponent*                  PlayerInfoComponent;                               // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanMoveAnimFire;                                  // 0x0488(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWait;                                           // 0x0489(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnlineRandomMove;                               // 0x048A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHost;                                            // 0x048B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFocus;                                            // 0x048C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EUnionUIControlDir, class UImage*>       Dirction_ImageMap;                                 // 0x0490(0x0050)(BlueprintVisible, ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Default_Loop;                                      // 0x04E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Default_to_Right;                                  // 0x04E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Default_to_Left;                                   // 0x04F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x04F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupSelectComponentPlaceState               CurrentState;                                      // 0x04FC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4FD[0x3];                                      // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       TargetAnimation;                                   // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetAnimForward;                                // 0x0508(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupSelectComponentPlaceState               TargetState;                                       // 0x0509(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50A[0x6];                                      // 0x050A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnRandomTeamEvent;                                 // 0x0510(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UUnionUIButtonBase* Button)> OnClickedFocusButtonEvent;      // 0x0520(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	bool CalcMovable(EUnionUIControlDir ToDirection);
	bool GetEndFlag();
	bool GetIsWait();
	void MoveToDirectionBP(EUnionUIControlDir ToDirection, int32 Count);
	void SetCharacter(EDriverId InDriverId);
	void SetEndFlag(bool _bIsEnd);
	void SetGroupIndex(int32 InGroupIndex);
	void SetIconIndex(int32 InIconIndex);
	void SetIsOnlineRandomMove(bool IsRandom);
	void SetIsWait(bool IsWait);
	void SetLocalPlayerInfo(bool bInLocalPlayer, int32 InLocalPlayerIndex);
	void SetPlatformIconIndex(int32 InPlatformIconIndex);
	void SetPlayerNameString(const class FString& InPlayerNameString);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GroupSelectComponentController">();
	}
	static class UGroupSelectComponentController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGroupSelectComponentController>();
	}
};
static_assert(alignof(UGroupSelectComponentController) == 0x000008, "Wrong alignment on UGroupSelectComponentController");
static_assert(sizeof(UGroupSelectComponentController) == 0x000530, "Wrong size on UGroupSelectComponentController");
static_assert(offsetof(UGroupSelectComponentController, PlayerInfoComponent) == 0x000480, "Member 'UGroupSelectComponentController::PlayerInfoComponent' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, bCanMoveAnimFire) == 0x000488, "Member 'UGroupSelectComponentController::bCanMoveAnimFire' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, bIsWait) == 0x000489, "Member 'UGroupSelectComponentController::bIsWait' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, bIsOnlineRandomMove) == 0x00048A, "Member 'UGroupSelectComponentController::bIsOnlineRandomMove' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, IsHost) == 0x00048B, "Member 'UGroupSelectComponentController::IsHost' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, bFocus) == 0x00048C, "Member 'UGroupSelectComponentController::bFocus' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, Dirction_ImageMap) == 0x000490, "Member 'UGroupSelectComponentController::Dirction_ImageMap' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, Default_Loop) == 0x0004E0, "Member 'UGroupSelectComponentController::Default_Loop' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, Default_to_Right) == 0x0004E8, "Member 'UGroupSelectComponentController::Default_to_Right' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, Default_to_Left) == 0x0004F0, "Member 'UGroupSelectComponentController::Default_to_Left' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, GroupIndex) == 0x0004F8, "Member 'UGroupSelectComponentController::GroupIndex' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, CurrentState) == 0x0004FC, "Member 'UGroupSelectComponentController::CurrentState' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, TargetAnimation) == 0x000500, "Member 'UGroupSelectComponentController::TargetAnimation' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, bTargetAnimForward) == 0x000508, "Member 'UGroupSelectComponentController::bTargetAnimForward' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, TargetState) == 0x000509, "Member 'UGroupSelectComponentController::TargetState' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, OnRandomTeamEvent) == 0x000510, "Member 'UGroupSelectComponentController::OnRandomTeamEvent' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponentController, OnClickedFocusButtonEvent) == 0x000520, "Member 'UGroupSelectComponentController::OnClickedFocusButtonEvent' has a wrong offset!");

// Class UNION.TitleDebugCommand
// 0x0228 (0x0250 - 0x0028)
class UTitleDebugCommand final : public UObject
{
public:
	uint8                                         Pad_28[0x218];                                     // 0x0028(0x0218)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputMappingContext*                   InputMappingContext;                               // 0x0240(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMenuInputRecieveObject*                MenuInputReceiveObject;                            // 0x0248(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnPressedDown(class UObject* Object);
	void OnPressedLeft(class UObject* Object);
	void OnPressedLeftShoulder(class UObject* Object);
	void OnPressedRight(class UObject* Object);
	void OnPressedRightShoulder(class UObject* Object);
	void OnPressedUp(class UObject* Object);
	void OnReleasedDown(class UObject* Object);
	void OnReleasedLeft(class UObject* Object);
	void OnReleasedLeftShoulder(class UObject* Object);
	void OnReleasedRight(class UObject* Object);
	void OnReleasedRightShoulder(class UObject* Object);
	void OnReleasedUp(class UObject* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TitleDebugCommand">();
	}
	static class UTitleDebugCommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTitleDebugCommand>();
	}
};
static_assert(alignof(UTitleDebugCommand) == 0x000008, "Wrong alignment on UTitleDebugCommand");
static_assert(sizeof(UTitleDebugCommand) == 0x000250, "Wrong size on UTitleDebugCommand");
static_assert(offsetof(UTitleDebugCommand, InputMappingContext) == 0x000240, "Member 'UTitleDebugCommand::InputMappingContext' has a wrong offset!");
static_assert(offsetof(UTitleDebugCommand, MenuInputReceiveObject) == 0x000248, "Member 'UTitleDebugCommand::MenuInputReceiveObject' has a wrong offset!");

// Class UNION.MonkeyTest
// 0x0048 (0x02D8 - 0x0290)
class AMonkeyTest final : public AActor
{
public:
	uint8                                         Pad_290[0x48];                                     // 0x0290(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MonkeyTest">();
	}
	static class AMonkeyTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMonkeyTest>();
	}
};
static_assert(alignof(AMonkeyTest) == 0x000008, "Wrong alignment on AMonkeyTest");
static_assert(sizeof(AMonkeyTest) == 0x0002D8, "Wrong size on AMonkeyTest");

// Class UNION.FestaMasterDataHelper
// 0x0000 (0x0028 - 0x0028)
class UFestaMasterDataHelper final : public UBlueprintFunctionLibrary
{
public:
	static bool CheckCurrentFestaEnded(class UNetMasterDataManageSubsystem* Subsystem, const struct FDateTime& CurrentTime);
	static bool CheckFestaRankingCalcDateTime(class UNetMasterDataManageSubsystem* Subsystem);
	static bool CheckFestaRankingCalcEnded(class UNetMasterDataManageSubsystem* Subsystem);
	static bool CheckFestaStartDateTime(class UNetMasterDataManageSubsystem* Subsystem);
	static bool CheckNewFestaStarted(class UNetMasterDataManageSubsystem* Subsystem, const struct FDateTime& CurrentTime);
	static bool CheckStartNoticeDateTime(class UNetMasterDataManageSubsystem* Subsystem);
	static int32 GetBonusChanceId(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetEventEndTime(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetEventEndUTCTime(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetEventStartTime(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetEventStartUTCTime(class UNetMasterDataManageSubsystem* Subsystem);
	static void GetFestaBonusChanceData(const class UAppDataManageSubsystem* AppDataManageSubsystem, bool* bOutEnable, struct FCommon_FestaBonusChanceData* OutFestaBonusChanceData);
	static void GetFestaCollaboDriverId(class UNetMasterDataManageSubsystem* Subsystem, EDriverId* OutDriverId);
	static bool GetFestaCurrentRules(const struct FDateTime& CurrentUTCTime, class UNetMasterDataManageSubsystem* MasterSubsystem, class UAppDataManageSubsystem* AppDataManageSubsystem, struct FRestoredRule* CurrentRule, struct FDateTime* CurrentStartDisplayTime, struct FRestoredRule* NextRule, struct FDateTime* NextStartDisplayTime);
	static void GetFestaFixedRule(class UAppDataManageSubsystem* AppDataManageSubsystem, EGroupRaceRule* OutFixedRuleId, bool* bOutFixedSpecialRule);
	static void GetFestaPointReward(class UNetMasterDataManageSubsystem* Subsystem, int32 Index_0, ERewardType* rewardType, int32* rewardId, int32* rewardNum);
	static int32 GetFestaPointRewardId(class UNetMasterDataManageSubsystem* Subsystem, int32 Index_0);
	static int32 GetFestaPointRewardNum(class UNetMasterDataManageSubsystem* Subsystem, int32 Index_0);
	static ERewardType GetFestaPointRewardType(class UNetMasterDataManageSubsystem* Subsystem, int32 Index_0);
	static void GetFestaResultPointRewardArray(const TArray<struct FFestaPointRewardUIData>& InRewardDataArray, const int32 InFestaPoint, TArray<struct FFestaPointRewardUIData>* OutRewardDataArray, int32* OutIndexOffset, TArray<struct FFestaPointRewardUIData>* OutStreakRewardArray);
	static bool GetFestaStreakReward(int32 InWinCount, const TArray<struct FFestaPointRewardUIData>& InStreakRewardArray, struct FFestaPointRewardUIData* OutStreakReward);
	static struct FDateTime GetNoticeStartTime(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetNoticeStartUTCTime(class UNetMasterDataManageSubsystem* Subsystem);
	static int32 GetPointBonusId(class UNetMasterDataManageSubsystem* Subsystem);
	static int32 GetPointRaceOrderId(class UNetMasterDataManageSubsystem* Subsystem);
	static bool GetPointRewardArray(class UNetMasterDataManageSubsystem* Subsystem, TArray<struct FFestaPointRewardUIData>* OutRewardDataArray);
	static int32 GetPointTeamWldId(class UNetMasterDataManageSubsystem* Subsystem);
	static int32 GetRaceRuleId(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetRankingCalcEndTime(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetRankingCalcEndUTCTime(class UNetMasterDataManageSubsystem* Subsystem);
	static bool GetRankingRewardArray(class UNetMasterDataManageSubsystem* Subsystem, TArray<struct FFestaRankingRewardUIData>* OutRewardDataArray);
	static int32 GetRewardConditionsId(class UNetMasterDataManageSubsystem* Subsystem);
	static int32 GetRewardId(class UNetMasterDataManageSubsystem* Subsystem);
	static bool GetStreakRewardArray(class UNetMasterDataManageSubsystem* Subsystem, TArray<struct FFestaStreakRewardUIData>* OutRewardDataArray);
	static void InitializeForceFestaNotice(class UNetMasterDataManageSubsystem* Subsystem);
	static void InitializeForceFestaStart(class UNetMasterDataManageSubsystem* Subsystem);
	static void InitializeForceOutsideFesta(class UNetMasterDataManageSubsystem* Subsystem);
	static bool IsFirstFestaEnded(class UNetMasterDataManageSubsystem* Subsystem);
	static bool IsSPFestaRule(class UNetMasterDataManageSubsystem* MasterSubsystem, EGroupRaceRule ruleId);
	static void SetFestaBonusChanceData(class UAppDataManageSubsystem* AppDataManageSubsystem, bool bInEnable, struct FCommon_FestaBonusChanceData& InFestaBonusChanceData);
	static void SetFestaFixedRule(class UAppDataManageSubsystem* AppDataManageSubsystem, EGroupRaceRule InFixedRuleId, bool bInFixedSpecialRule);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaMasterDataHelper">();
	}
	static class UFestaMasterDataHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFestaMasterDataHelper>();
	}
};
static_assert(alignof(UFestaMasterDataHelper) == 0x000008, "Wrong alignment on UFestaMasterDataHelper");
static_assert(sizeof(UFestaMasterDataHelper) == 0x000028, "Wrong size on UFestaMasterDataHelper");

// Class UNION.AutoInput
// 0x0078 (0x0308 - 0x0290)
class AAutoInput final : public AActor
{
public:
	uint8                                         Pad_290[0x78];                                     // 0x0290(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutoInput">();
	}
	static class AAutoInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAutoInput>();
	}
};
static_assert(alignof(AAutoInput) == 0x000008, "Wrong alignment on AAutoInput");
static_assert(sizeof(AAutoInput) == 0x000308, "Wrong size on AAutoInput");

// Class UNION.MachineCustomizeStickerSelectState
// 0x0008 (0x0100 - 0x00F8)
class UMachineCustomizeStickerSelectState : public UHierarchicalStateMachineStateComponent
{
public:
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActiveAuraEffect(bool IsActive_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeStickerSelectState">();
	}
	static class UMachineCustomizeStickerSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeStickerSelectState>();
	}
};
static_assert(alignof(UMachineCustomizeStickerSelectState) == 0x000008, "Wrong alignment on UMachineCustomizeStickerSelectState");
static_assert(sizeof(UMachineCustomizeStickerSelectState) == 0x000100, "Wrong size on UMachineCustomizeStickerSelectState");

// Class UNION.CheatTestPlay
// 0x0010 (0x0038 - 0x0028)
class UCheatTestPlay final : public UObject
{
public:
	class AMonkeyTest*                            MonkeyTestInstance;                                // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAutoInput*                             AutoInputInstance;                                 // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AutoGrandPrix(const class FString& InputParam);
	void AutoInput(const class FString& InputParam);
	void MonkeyTest(const class FString& InputParam);
	void SetStaySceneMonkeyTestFlag(bool bIsStayScene);
	void StaySceneMonkeyTest(const class FString& InputParam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatTestPlay">();
	}
	static class UCheatTestPlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatTestPlay>();
	}
};
static_assert(alignof(UCheatTestPlay) == 0x000008, "Wrong alignment on UCheatTestPlay");
static_assert(sizeof(UCheatTestPlay) == 0x000038, "Wrong size on UCheatTestPlay");
static_assert(offsetof(UCheatTestPlay, MonkeyTestInstance) == 0x000028, "Member 'UCheatTestPlay::MonkeyTestInstance' has a wrong offset!");
static_assert(offsetof(UCheatTestPlay, AutoInputInstance) == 0x000030, "Member 'UCheatTestPlay::AutoInputInstance' has a wrong offset!");

// Class UNION.MachineCustomInfoWindow
// 0x0018 (0x02F8 - 0x02E0)
class UMachineCustomInfoWindow : public UUserWidget
{
public:
	class UUnionRichTextBlock*                    TXT_SetName;                                       // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonFooterShortCut*                  WBP_FooterShortCut;                                // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DefaultButtonIconIndex;                            // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUIButtonIconType                             DefaultButtonIconType;                             // 0x02F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFooterSubTextType                            DefaultTextType;                                   // 0x02F5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F6[0x2];                                      // 0x02F6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayAnimIn();
	void PlayAnimLoop();
	void PlayAnimOut();
	void SetMachineName(const class FText& InText);
	void SetShortcutIconType(int32 InButtonIconIndex, EUIButtonIconType InButtonIconType);
	void SetShortcutTextSubType(EFooterSubTextType InType);
	void SetShortcutVisible(bool IsVisible_0);
	void Setup(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomInfoWindow">();
	}
	static class UMachineCustomInfoWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomInfoWindow>();
	}
};
static_assert(alignof(UMachineCustomInfoWindow) == 0x000008, "Wrong alignment on UMachineCustomInfoWindow");
static_assert(sizeof(UMachineCustomInfoWindow) == 0x0002F8, "Wrong size on UMachineCustomInfoWindow");
static_assert(offsetof(UMachineCustomInfoWindow, TXT_SetName) == 0x0002E0, "Member 'UMachineCustomInfoWindow::TXT_SetName' has a wrong offset!");
static_assert(offsetof(UMachineCustomInfoWindow, WBP_FooterShortCut) == 0x0002E8, "Member 'UMachineCustomInfoWindow::WBP_FooterShortCut' has a wrong offset!");
static_assert(offsetof(UMachineCustomInfoWindow, DefaultButtonIconIndex) == 0x0002F0, "Member 'UMachineCustomInfoWindow::DefaultButtonIconIndex' has a wrong offset!");
static_assert(offsetof(UMachineCustomInfoWindow, DefaultButtonIconType) == 0x0002F4, "Member 'UMachineCustomInfoWindow::DefaultButtonIconType' has a wrong offset!");
static_assert(offsetof(UMachineCustomInfoWindow, DefaultTextType) == 0x0002F5, "Member 'UMachineCustomInfoWindow::DefaultTextType' has a wrong offset!");

// Class UNION.BPFL_MonkeyTest
// 0x0000 (0x0028 - 0x0028)
class UBPFL_MonkeyTest final : public UBlueprintFunctionLibrary
{
public:
	static bool GetStaySceneMonkeyTesting();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BPFL_MonkeyTest">();
	}
	static class UBPFL_MonkeyTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_MonkeyTest>();
	}
};
static_assert(alignof(UBPFL_MonkeyTest) == 0x000008, "Wrong alignment on UBPFL_MonkeyTest");
static_assert(sizeof(UBPFL_MonkeyTest) == 0x000028, "Wrong size on UBPFL_MonkeyTest");

// Class UNION.InputModifierGyroToTrickY
// 0x0018 (0x0040 - 0x0028)
class UInputModifierGyroToTrickY final : public UInputModifier
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierGyroToTrickY">();
	}
	static class UInputModifierGyroToTrickY* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierGyroToTrickY>();
	}
};
static_assert(alignof(UInputModifierGyroToTrickY) == 0x000008, "Wrong alignment on UInputModifierGyroToTrickY");
static_assert(sizeof(UInputModifierGyroToTrickY) == 0x000040, "Wrong size on UInputModifierGyroToTrickY");

// Class UNION.RaceSequenceStateDrive
// 0x0008 (0x0118 - 0x0110)
class URaceSequenceStateDrive : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateDrive">();
	}
	static class URaceSequenceStateDrive* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateDrive>();
	}
};
static_assert(alignof(URaceSequenceStateDrive) == 0x000008, "Wrong alignment on URaceSequenceStateDrive");
static_assert(sizeof(URaceSequenceStateDrive) == 0x000118, "Wrong size on URaceSequenceStateDrive");

// Class UNION.CheatTimeTrial
// 0x0000 (0x0028 - 0x0028)
class UCheatTimeTrial final : public UObject
{
public:
	void ResetAllTimeTrialClearRank();
	void SetAllTimeTrialClearRank(int32 InRankId);
	void SetCrossWorldAllExceptOneTimeTrialClearRank(int32 InSpeedClassId, int32 InRankId);
	void SetCurrentStageVersion(int32 InStageVersion);
	void SetDebugClearAboveRankId(int32 InRankId);
	void SetMainAllExceptOneTimeTrialClearRank(int32 InSpeedClassId, int32 InRankId);
	void SetTimeTrialClearRank(int32 InSpeedClassId, int32 InStageId, int32 InRankId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheatTimeTrial">();
	}
	static class UCheatTimeTrial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheatTimeTrial>();
	}
};
static_assert(alignof(UCheatTimeTrial) == 0x000008, "Wrong alignment on UCheatTimeTrial");
static_assert(sizeof(UCheatTimeTrial) == 0x000028, "Wrong size on UCheatTimeTrial");

// Class UNION.ExportDataTableCommandlet
// 0x0000 (0x0080 - 0x0080)
class UExportDataTableCommandlet final : public UCommandlet
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExportDataTableCommandlet">();
	}
	static class UExportDataTableCommandlet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExportDataTableCommandlet>();
	}
};
static_assert(alignof(UExportDataTableCommandlet) == 0x000008, "Wrong alignment on UExportDataTableCommandlet");
static_assert(sizeof(UExportDataTableCommandlet) == 0x000080, "Wrong size on UExportDataTableCommandlet");

// Class UNION.WirelessLobbyContext
// 0x0088 (0x05B8 - 0x0530)
class UWirelessLobbyContext final : public UCustomMatchLobbyContext
{
public:
	TMulticastInlineDelegate<void(class UCommonLobbyContext* LobbyContext)> OnReadyCheck;            // 0x0530(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCommonLobbyContext* LobbyContext, class UCommonLobbyMemberContext* MemberContext)> OnReadyCheckReply; // 0x0540(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCommonLobbyContext* LobbyContext)> OnGoToRace;              // 0x0550(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_560[0x38];                                     // 0x0560(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULobbyJoinInfo*>                 LobbySessions;                                     // 0x0598(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5A8[0x10];                                     // 0x05A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateWirelessSession(const struct FWirelessLobbyContextCreateSettings& CreateSettings, TDelegate<void(class UWirelessLobbyContext* LobbyContext, const struct FOnlineErrorBP& Error)> OnComplete);
	void ExitWirelessSession(TDelegate<void(class UWirelessLobbyContext* LobbyContext, const struct FOnlineErrorBP& Error)> OnComplete);
	void JoinWirelessSession(class ULobbyJoinInfo* LobbyJoinInfo, TDelegate<void(class UWirelessLobbyContext* LobbyContext, const struct FOnlineErrorBP& Error)> OnComplete);
	void ResetReadyCheck();
	void SearchWirelessSession(const struct FWirelessLobbyContextSearchSettings& SearchSettings, TDelegate<void(class UWirelessLobbyContext* LobbyContext, bool bSuccessful, const TArray<class ULobbyJoinInfo*>& LobbySessions)> OnComplete);
	bool SendGoToRace();
	bool SendReadyCheck();
	bool SyncLobbyContextData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WirelessLobbyContext">();
	}
	static class UWirelessLobbyContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWirelessLobbyContext>();
	}
};
static_assert(alignof(UWirelessLobbyContext) == 0x000008, "Wrong alignment on UWirelessLobbyContext");
static_assert(sizeof(UWirelessLobbyContext) == 0x0005B8, "Wrong size on UWirelessLobbyContext");
static_assert(offsetof(UWirelessLobbyContext, OnReadyCheck) == 0x000530, "Member 'UWirelessLobbyContext::OnReadyCheck' has a wrong offset!");
static_assert(offsetof(UWirelessLobbyContext, OnReadyCheckReply) == 0x000540, "Member 'UWirelessLobbyContext::OnReadyCheckReply' has a wrong offset!");
static_assert(offsetof(UWirelessLobbyContext, OnGoToRace) == 0x000550, "Member 'UWirelessLobbyContext::OnGoToRace' has a wrong offset!");
static_assert(offsetof(UWirelessLobbyContext, LobbySessions) == 0x000598, "Member 'UWirelessLobbyContext::LobbySessions' has a wrong offset!");

// Class UNION.ClassSelectButtonBase
// 0x0008 (0x0650 - 0x0648)
class UClassSelectButtonBase : public UUnionUIButtonStandard
{
public:
	ESpeedClassId                                 SpeedClassId;                                      // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuSpeedClassId                             MenuSpeedClassId;                                  // 0x0649(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64A[0x6];                                      // 0x064A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EMenuSpeedClassId GetMenuSpeedClass();
	ESpeedClassId GetSpeedClass();
	void SetComplete(bool InComplete);
	void SetMenuSpeedClass(EMenuSpeedClassId InMenuSpeedClass);
	void SetSpeedClass(ESpeedClassId InSpeedClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClassSelectButtonBase">();
	}
	static class UClassSelectButtonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClassSelectButtonBase>();
	}
};
static_assert(alignof(UClassSelectButtonBase) == 0x000008, "Wrong alignment on UClassSelectButtonBase");
static_assert(sizeof(UClassSelectButtonBase) == 0x000650, "Wrong size on UClassSelectButtonBase");
static_assert(offsetof(UClassSelectButtonBase, SpeedClassId) == 0x000648, "Member 'UClassSelectButtonBase::SpeedClassId' has a wrong offset!");
static_assert(offsetof(UClassSelectButtonBase, MenuSpeedClassId) == 0x000649, "Member 'UClassSelectButtonBase::MenuSpeedClassId' has a wrong offset!");

// Class UNION.MachineCustomizeColorPresetSelectState
// 0x0000 (0x00F8 - 0x00F8)
class UMachineCustomizeColorPresetSelectState : public UMachineCustomizePage
{
public:
	void OnSetupPage();
	void SetProperties();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeColorPresetSelectState">();
	}
	static class UMachineCustomizeColorPresetSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeColorPresetSelectState>();
	}
};
static_assert(alignof(UMachineCustomizeColorPresetSelectState) == 0x000008, "Wrong alignment on UMachineCustomizeColorPresetSelectState");
static_assert(sizeof(UMachineCustomizeColorPresetSelectState) == 0x0000F8, "Wrong size on UMachineCustomizeColorPresetSelectState");

// Class UNION.PrimaryDataAssetShelf
// 0x0020 (0x0050 - 0x0030)
class UPrimaryDataAssetShelf final : public UDataAsset
{
public:
	TArray<class FName>                           LoadBundles;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetId>                PrimaryAssetIds;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryDataAssetShelf">();
	}
	static class UPrimaryDataAssetShelf* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryDataAssetShelf>();
	}
};
static_assert(alignof(UPrimaryDataAssetShelf) == 0x000008, "Wrong alignment on UPrimaryDataAssetShelf");
static_assert(sizeof(UPrimaryDataAssetShelf) == 0x000050, "Wrong size on UPrimaryDataAssetShelf");
static_assert(offsetof(UPrimaryDataAssetShelf, LoadBundles) == 0x000030, "Member 'UPrimaryDataAssetShelf::LoadBundles' has a wrong offset!");
static_assert(offsetof(UPrimaryDataAssetShelf, PrimaryAssetIds) == 0x000040, "Member 'UPrimaryDataAssetShelf::PrimaryAssetIds' has a wrong offset!");

// Class UNION.ClassSelectSceneBase
// 0x0048 (0x0420 - 0x03D8)
class UClassSelectSceneBase : public UUnionUISceneBase
{
public:
	TArray<class UClassSelectButtonBase*>         ClassSelectButtonArr;                              // 0x03D8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UGrandPrixTrophyUI*>             GrandPrixTrophyArr;                                // 0x03E8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UClassSelectTrophyUI*>           ClassSelectTrophyArr;                              // 0x03F8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ClassSelect_In;                                    // 0x0408(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ClassSelect_Loop;                                  // 0x0410(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ClassSelect_Out;                                   // 0x0418(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AllButtonActive();
	void FocusToLastClassContent();
	EMenuSpeedClassId GetLastFocusedMenuSpeedClassId();
	void MakeButtonsPanel();
	void SaveLastFocusedMenuSpeedClassId(EMenuSpeedClassId SpeedClassId);
	void UpdateTrophy();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClassSelectSceneBase">();
	}
	static class UClassSelectSceneBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClassSelectSceneBase>();
	}
};
static_assert(alignof(UClassSelectSceneBase) == 0x000008, "Wrong alignment on UClassSelectSceneBase");
static_assert(sizeof(UClassSelectSceneBase) == 0x000420, "Wrong size on UClassSelectSceneBase");
static_assert(offsetof(UClassSelectSceneBase, ClassSelectButtonArr) == 0x0003D8, "Member 'UClassSelectSceneBase::ClassSelectButtonArr' has a wrong offset!");
static_assert(offsetof(UClassSelectSceneBase, GrandPrixTrophyArr) == 0x0003E8, "Member 'UClassSelectSceneBase::GrandPrixTrophyArr' has a wrong offset!");
static_assert(offsetof(UClassSelectSceneBase, ClassSelectTrophyArr) == 0x0003F8, "Member 'UClassSelectSceneBase::ClassSelectTrophyArr' has a wrong offset!");
static_assert(offsetof(UClassSelectSceneBase, ClassSelect_In) == 0x000408, "Member 'UClassSelectSceneBase::ClassSelect_In' has a wrong offset!");
static_assert(offsetof(UClassSelectSceneBase, ClassSelect_Loop) == 0x000410, "Member 'UClassSelectSceneBase::ClassSelect_Loop' has a wrong offset!");
static_assert(offsetof(UClassSelectSceneBase, ClassSelect_Out) == 0x000418, "Member 'UClassSelectSceneBase::ClassSelect_Out' has a wrong offset!");

// Class UNION.ClassSelectTrophyUI
// 0x0018 (0x02F8 - 0x02E0)
class UClassSelectTrophyUI : public UUserWidget
{
public:
	EGrandPrixId                                  GrandPrixId;                                       // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGrandPrixTrophyUI*                     GrandPrixTrophy;                                   // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        TrophyVisibleSwitcher;                             // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool SetProgress(EGrandPrixProgressId InProgress);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClassSelectTrophyUI">();
	}
	static class UClassSelectTrophyUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClassSelectTrophyUI>();
	}
};
static_assert(alignof(UClassSelectTrophyUI) == 0x000008, "Wrong alignment on UClassSelectTrophyUI");
static_assert(sizeof(UClassSelectTrophyUI) == 0x0002F8, "Wrong size on UClassSelectTrophyUI");
static_assert(offsetof(UClassSelectTrophyUI, GrandPrixId) == 0x0002E0, "Member 'UClassSelectTrophyUI::GrandPrixId' has a wrong offset!");
static_assert(offsetof(UClassSelectTrophyUI, GrandPrixTrophy) == 0x0002E8, "Member 'UClassSelectTrophyUI::GrandPrixTrophy' has a wrong offset!");
static_assert(offsetof(UClassSelectTrophyUI, TrophyVisibleSwitcher) == 0x0002F0, "Member 'UClassSelectTrophyUI::TrophyVisibleSwitcher' has a wrong offset!");

// Class UNION.FriendListSubMenuWidget
// 0x0000 (0x03D8 - 0x03D8)
class UFriendListSubMenuWidget : public UUnionUISceneBase
{
public:
	class UUnionUISceneBase* GetMainWidget();
	void SetMainWidgetFocus(int32 InButtonIndex);
	void SetupMainWidget(const TArray<class FText>& InButtonText, const TArray<bool>& InButtonSelectable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendListSubMenuWidget">();
	}
	static class UFriendListSubMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendListSubMenuWidget>();
	}
};
static_assert(alignof(UFriendListSubMenuWidget) == 0x000008, "Wrong alignment on UFriendListSubMenuWidget");
static_assert(sizeof(UFriendListSubMenuWidget) == 0x0003D8, "Wrong size on UFriendListSubMenuWidget");

// Class UNION.RaceSequence
// 0x00D8 (0x0440 - 0x0368)
class ARaceSequence : public AHierarchicalStateMachine
{
public:
	TArray<class APlayerController*>              LocalPlayerController;                             // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bFirstPlayerGoaled;                                // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UObject*>             TaggedInfo;                                        // 0x0380(0x0050)(NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RivalRenderTarget2D;                               // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonMenuFooterMenu*                  FooterMenu;                                        // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            LoadingWidgetRef;                                  // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            RaceBeforeRuleInfoUIRef;                           // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F0[0x8];                                      // 0x03F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRacers*                           Racers;                                            // 0x03F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URaceSituationManager*                  RaceSituationManager;                              // 0x0400(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRaceUI*                           RaceHUD;                                           // 0x0408(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRaceInfoNotifier*                 RaceInfoNotifier;                                  // 0x0410(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_418[0xF];                                      // 0x0418(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsPromoteMember;                                   // 0x0427(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CheckQuitPublicLobbyMemberElapsedTime;             // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_42C[0x14];                                     // 0x042C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AfterReadyStatusObject();
	void ApplyParamIF();
	void ApplyRaceOptionSettings();
	void BtsOnErrorSend();
	bool GetAfterCeremonyFlag();
	int32 GetErrorLevel();
	class UCommonMenuFooterMenu* GetFooterMenu();
	class UUnionRaceUI* GetRaceHUDRef();
	class UUnionRaceInfoNotifier* GetRaceInfoNotifier();
	class UUnionRacers* GetRacersRef();
	bool HasFatalError();
	void InitializeRaceResultData();
	bool IsUpdateRace();
	void OnDeviceDisconnectedEvent();
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnPlatformEvent(const struct FUnionPlatformEventInfo& EventInfo);
	void OnStatusObjectEvent(const int32& InEventId, const int32& InRacerIndex);
	void RegisterRaceInfoListener(class UObject* InListenerObject);
	void ReserveRaceSequenceExitCode(ERaceSequenceExitCode InExitCode);
	void SelectCourseSetting(TSoftObjectPtr<class UObject>* Texture, float* OrthoRate, float* Angle, struct FVector* Offset);
	void SetAfterCeremonyFlag(bool bAfter);
	void SetCourseMapSetting(int32 DomainIndex, const struct FRaceCourseMapInfo& MapInfo);
	void SetCourseSubMapSetting(int32 DomainIndex, const struct FRaceCourseSubMapInfo& MapInfo);
	void SetNextRaceSequenceState(ERaceSequenceState InState);
	void SetRaceHUDRef(class UUnionRaceUI* InRaceHUDRef);
	void SetRaceSequenceExitCode(ERaceSequenceExitCode InValue);
	int32 SetReservedRaceSequenceExitCode();
	void StopUpdateRace();
	void UnregisterRaceInfoListener(class UObject* InListenerObject);

	int32 GetReservedExitCode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequence">();
	}
	static class ARaceSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARaceSequence>();
	}
};
static_assert(alignof(ARaceSequence) == 0x000008, "Wrong alignment on ARaceSequence");
static_assert(sizeof(ARaceSequence) == 0x000440, "Wrong size on ARaceSequence");
static_assert(offsetof(ARaceSequence, LocalPlayerController) == 0x000368, "Member 'ARaceSequence::LocalPlayerController' has a wrong offset!");
static_assert(offsetof(ARaceSequence, bFirstPlayerGoaled) == 0x000378, "Member 'ARaceSequence::bFirstPlayerGoaled' has a wrong offset!");
static_assert(offsetof(ARaceSequence, TaggedInfo) == 0x000380, "Member 'ARaceSequence::TaggedInfo' has a wrong offset!");
static_assert(offsetof(ARaceSequence, RivalRenderTarget2D) == 0x0003D0, "Member 'ARaceSequence::RivalRenderTarget2D' has a wrong offset!");
static_assert(offsetof(ARaceSequence, FooterMenu) == 0x0003D8, "Member 'ARaceSequence::FooterMenu' has a wrong offset!");
static_assert(offsetof(ARaceSequence, LoadingWidgetRef) == 0x0003E0, "Member 'ARaceSequence::LoadingWidgetRef' has a wrong offset!");
static_assert(offsetof(ARaceSequence, RaceBeforeRuleInfoUIRef) == 0x0003E8, "Member 'ARaceSequence::RaceBeforeRuleInfoUIRef' has a wrong offset!");
static_assert(offsetof(ARaceSequence, Racers) == 0x0003F8, "Member 'ARaceSequence::Racers' has a wrong offset!");
static_assert(offsetof(ARaceSequence, RaceSituationManager) == 0x000400, "Member 'ARaceSequence::RaceSituationManager' has a wrong offset!");
static_assert(offsetof(ARaceSequence, RaceHUD) == 0x000408, "Member 'ARaceSequence::RaceHUD' has a wrong offset!");
static_assert(offsetof(ARaceSequence, RaceInfoNotifier) == 0x000410, "Member 'ARaceSequence::RaceInfoNotifier' has a wrong offset!");
static_assert(offsetof(ARaceSequence, IsPromoteMember) == 0x000427, "Member 'ARaceSequence::IsPromoteMember' has a wrong offset!");
static_assert(offsetof(ARaceSequence, CheckQuitPublicLobbyMemberElapsedTime) == 0x000428, "Member 'ARaceSequence::CheckQuitPublicLobbyMemberElapsedTime' has a wrong offset!");

// Class UNION.ComCharaMachineLottery
// 0x0070 (0x0098 - 0x0028)
class UComCharaMachineLottery final : public UObject
{
public:
	TArray<EDriverId>                             CurrentUsedDriverId;                               // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EDriverId>                             CalcedComDriverId;                                 // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EMachineId>                            EnableMachineId;                                   // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EMachineId>                            CalcedComMachineId;                                // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EMachineId>                            EnablePartsId;                                     // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EMachineColorPresetId>                 EnableColorPresetId;                               // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EDriverId>                             UnUsedDriverId;                                    // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void ApplyCOMCharacter();
	void CalcOnlinePlayerDriverId(const class UObject* WorldContextObject, const TArray<EDriverId>& InOnlineDriverId);
	void InitCurrentUsedDriverId(const class UObject* WorldContextObject);
	TArray<EDriverId> Lottery();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ComCharaMachineLottery">();
	}
	static class UComCharaMachineLottery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComCharaMachineLottery>();
	}
};
static_assert(alignof(UComCharaMachineLottery) == 0x000008, "Wrong alignment on UComCharaMachineLottery");
static_assert(sizeof(UComCharaMachineLottery) == 0x000098, "Wrong size on UComCharaMachineLottery");
static_assert(offsetof(UComCharaMachineLottery, CurrentUsedDriverId) == 0x000028, "Member 'UComCharaMachineLottery::CurrentUsedDriverId' has a wrong offset!");
static_assert(offsetof(UComCharaMachineLottery, CalcedComDriverId) == 0x000038, "Member 'UComCharaMachineLottery::CalcedComDriverId' has a wrong offset!");
static_assert(offsetof(UComCharaMachineLottery, EnableMachineId) == 0x000048, "Member 'UComCharaMachineLottery::EnableMachineId' has a wrong offset!");
static_assert(offsetof(UComCharaMachineLottery, CalcedComMachineId) == 0x000058, "Member 'UComCharaMachineLottery::CalcedComMachineId' has a wrong offset!");
static_assert(offsetof(UComCharaMachineLottery, EnablePartsId) == 0x000068, "Member 'UComCharaMachineLottery::EnablePartsId' has a wrong offset!");
static_assert(offsetof(UComCharaMachineLottery, EnableColorPresetId) == 0x000078, "Member 'UComCharaMachineLottery::EnableColorPresetId' has a wrong offset!");
static_assert(offsetof(UComCharaMachineLottery, UnUsedDriverId) == 0x000088, "Member 'UComCharaMachineLottery::UnUsedDriverId' has a wrong offset!");

// Class UNION.FootcutWarpRingPerformance
// 0x0018 (0x0460 - 0x0448)
class AFootcutWarpRingPerformance : public AItemPerformanceBase
{
public:
	class UUnionAtomComponent*                    WarpStartSound;                                    // 0x0448(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    WarpEndSound;                                      // 0x0450(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CarInvisibleTimeRatio;                             // 0x0458(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FootcutWarpRingPerformance">();
	}
	static class AFootcutWarpRingPerformance* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFootcutWarpRingPerformance>();
	}
};
static_assert(alignof(AFootcutWarpRingPerformance) == 0x000008, "Wrong alignment on AFootcutWarpRingPerformance");
static_assert(sizeof(AFootcutWarpRingPerformance) == 0x000460, "Wrong size on AFootcutWarpRingPerformance");
static_assert(offsetof(AFootcutWarpRingPerformance, WarpStartSound) == 0x000448, "Member 'AFootcutWarpRingPerformance::WarpStartSound' has a wrong offset!");
static_assert(offsetof(AFootcutWarpRingPerformance, WarpEndSound) == 0x000450, "Member 'AFootcutWarpRingPerformance::WarpEndSound' has a wrong offset!");
static_assert(offsetof(AFootcutWarpRingPerformance, CarInvisibleTimeRatio) == 0x000458, "Member 'AFootcutWarpRingPerformance::CarInvisibleTimeRatio' has a wrong offset!");

// Class UNION.VehicleCreateScheduler
// 0x0010 (0x02A0 - 0x0290)
class AVehicleCreateScheduler final : public AActor
{
public:
	uint8                                         Pad_290[0x10];                                     // 0x0290(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCreateScheduler">();
	}
	static class AVehicleCreateScheduler* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVehicleCreateScheduler>();
	}
};
static_assert(alignof(AVehicleCreateScheduler) == 0x000008, "Wrong alignment on AVehicleCreateScheduler");
static_assert(sizeof(AVehicleCreateScheduler) == 0x0002A0, "Wrong size on AVehicleCreateScheduler");

// Class UNION.CommonConnectingUI
// 0x0008 (0x0298 - 0x0290)
class ACommonConnectingUI : public AActor
{
public:
	class UUserWidget*                            ConnectingWidget;                                  // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Display(class UUserWidget* Widget);
	void RemoveUI();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonConnectingUI">();
	}
	static class ACommonConnectingUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACommonConnectingUI>();
	}
};
static_assert(alignof(ACommonConnectingUI) == 0x000008, "Wrong alignment on ACommonConnectingUI");
static_assert(sizeof(ACommonConnectingUI) == 0x000298, "Wrong size on ACommonConnectingUI");
static_assert(offsetof(ACommonConnectingUI, ConnectingWidget) == 0x000290, "Member 'ACommonConnectingUI::ConnectingWidget' has a wrong offset!");

// Class UNION.SquadMemberContext
// 0x0000 (0x00F0 - 0x00F0)
class USquadMemberContext : public UCommonLobbyMemberContext
{
public:
	void SetReadyCheck(bool bValue);
	void SetReadyCheckEnum(ESquadMemberContextReadyCheckType Value);
	void SetReadyMatching(bool bValue);

	bool GetReadyCheck() const;
	bool GetReadyCheckEnum(ESquadMemberContextReadyCheckType* OutValue) const;
	bool GetReadyMatching() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SquadMemberContext">();
	}
	static class USquadMemberContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<USquadMemberContext>();
	}
};
static_assert(alignof(USquadMemberContext) == 0x000008, "Wrong alignment on USquadMemberContext");
static_assert(sizeof(USquadMemberContext) == 0x0000F0, "Wrong size on USquadMemberContext");

// Class UNION.CommonCountNumberWidget
// 0x0038 (0x0318 - 0x02E0)
class UCommonCountNumberWidget : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              CountEndDelegate;                                  // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         CurrentNumber;                                     // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F4[0x24];                                     // 0x02F4(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckCountEnd();
	bool CheckCountStart();
	void EndCount();
	class UWidgetAnimation* GetAnimationCount();
	class UWidgetAnimation* GetAnimationIn();
	class UWidgetAnimation* GetAnimationLoop();
	class UWidgetAnimation* GetAnimationOut();
	void PlayAnimationCount();
	void PlayAnimationIn();
	void PlayAnimationLoop();
	void PlayAnimationOut();
	void SetCountWait(float InCountWait);
	void SetCountWaitByMaxEndTime(float InMaxEndTime);
	void SetEndWait(float InEndWait);
	void SetIconTexture(const class UTexture2D* InIconTexture);
	void SetIconType(ERewardType InRewardType);
	void Setup(int32 InStartNumber, int32 InEndNumber);
	void StartCount();
	void StopAnimationCount();
	void UnbindAllEvent();
	void UpdateNumberDisplay(int32 InNumber);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonCountNumberWidget">();
	}
	static class UCommonCountNumberWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonCountNumberWidget>();
	}
};
static_assert(alignof(UCommonCountNumberWidget) == 0x000008, "Wrong alignment on UCommonCountNumberWidget");
static_assert(sizeof(UCommonCountNumberWidget) == 0x000318, "Wrong size on UCommonCountNumberWidget");
static_assert(offsetof(UCommonCountNumberWidget, CountEndDelegate) == 0x0002E0, "Member 'UCommonCountNumberWidget::CountEndDelegate' has a wrong offset!");
static_assert(offsetof(UCommonCountNumberWidget, CurrentNumber) == 0x0002F0, "Member 'UCommonCountNumberWidget::CurrentNumber' has a wrong offset!");

// Class UNION.CommonGadgetCustomButton
// 0x0028 (0x0670 - 0x0648)
class UCommonGadgetCustomButton : public UUnionUIButtonStandard
{
public:
	class UPanelWidget*                           _RootPanel;                                        // 0x0648(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_650[0x8];                                      // 0x0650(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       GadgetCustom_In;                                   // 0x0658(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       GadgetCustom_Loop;                                 // 0x0660(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       GadgetCustom_Out;                                  // 0x0668(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void In();
	void Out();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonGadgetCustomButton">();
	}
	static class UCommonGadgetCustomButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonGadgetCustomButton>();
	}
};
static_assert(alignof(UCommonGadgetCustomButton) == 0x000008, "Wrong alignment on UCommonGadgetCustomButton");
static_assert(sizeof(UCommonGadgetCustomButton) == 0x000670, "Wrong size on UCommonGadgetCustomButton");
static_assert(offsetof(UCommonGadgetCustomButton, _RootPanel) == 0x000648, "Member 'UCommonGadgetCustomButton::_RootPanel' has a wrong offset!");
static_assert(offsetof(UCommonGadgetCustomButton, GadgetCustom_In) == 0x000658, "Member 'UCommonGadgetCustomButton::GadgetCustom_In' has a wrong offset!");
static_assert(offsetof(UCommonGadgetCustomButton, GadgetCustom_Loop) == 0x000660, "Member 'UCommonGadgetCustomButton::GadgetCustom_Loop' has a wrong offset!");
static_assert(offsetof(UCommonGadgetCustomButton, GadgetCustom_Out) == 0x000668, "Member 'UCommonGadgetCustomButton::GadgetCustom_Out' has a wrong offset!");

// Class UNION.FriendMatchLobbyMemberContext
// 0x0000 (0x0198 - 0x0198)
class UFriendMatchLobbyMemberContext final : public UCustomMatchLobbyMemberContext
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendMatchLobbyMemberContext">();
	}
	static class UFriendMatchLobbyMemberContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendMatchLobbyMemberContext>();
	}
};
static_assert(alignof(UFriendMatchLobbyMemberContext) == 0x000008, "Wrong alignment on UFriendMatchLobbyMemberContext");
static_assert(sizeof(UFriendMatchLobbyMemberContext) == 0x000198, "Wrong size on UFriendMatchLobbyMemberContext");

// Class UNION.CommonItemIcon
// 0x0060 (0x0340 - 0x02E0)
class UCommonItemIcon : public UUserWidget
{
public:
	class UWidgetSwitcher*                        WidgetSwitcher;                                    // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 ItemIcon_MachineParts;                             // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 ItemIcon_HornIcon;                                 // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 ItemIcon_DonpaTicket;                              // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 ItemIcon_UnknownGadget;                            // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_CompleteMachine;                               // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_GadgetIcon;                                    // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 ItemIcon_StickerImage;                             // 0x0318(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_StageRing;                                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_JukeBox_Image;                                 // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             TXT_Cost;                                          // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActiveWidgetIndex(int32 InIndex);
	bool SetActiveWidgetIndexByRewardType(ERewardType InRewardType);
	void SetGadgetCost(int32 Value);
	void SetGadgetTexture(class UTexture2D* Texture);
	void SetStickerImage(class UTexture2D* Texture);
	void SetTextureImpl(class UTexture2D* Texture, bool bMatchSize);
	void SetupRewardTexture(ERewardType InRewardType, class UTexture2D* Texture, int32 NumItem, bool bMatchSize);

	class UWidget* GetWidget(ERewardType InRewardType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonItemIcon">();
	}
	static class UCommonItemIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonItemIcon>();
	}
};
static_assert(alignof(UCommonItemIcon) == 0x000008, "Wrong alignment on UCommonItemIcon");
static_assert(sizeof(UCommonItemIcon) == 0x000340, "Wrong size on UCommonItemIcon");
static_assert(offsetof(UCommonItemIcon, WidgetSwitcher) == 0x0002E0, "Member 'UCommonItemIcon::WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UCommonItemIcon, ItemIcon_MachineParts) == 0x0002E8, "Member 'UCommonItemIcon::ItemIcon_MachineParts' has a wrong offset!");
static_assert(offsetof(UCommonItemIcon, ItemIcon_HornIcon) == 0x0002F0, "Member 'UCommonItemIcon::ItemIcon_HornIcon' has a wrong offset!");
static_assert(offsetof(UCommonItemIcon, ItemIcon_DonpaTicket) == 0x0002F8, "Member 'UCommonItemIcon::ItemIcon_DonpaTicket' has a wrong offset!");
static_assert(offsetof(UCommonItemIcon, ItemIcon_UnknownGadget) == 0x000300, "Member 'UCommonItemIcon::ItemIcon_UnknownGadget' has a wrong offset!");
static_assert(offsetof(UCommonItemIcon, DMY_CompleteMachine) == 0x000308, "Member 'UCommonItemIcon::DMY_CompleteMachine' has a wrong offset!");
static_assert(offsetof(UCommonItemIcon, DMY_GadgetIcon) == 0x000310, "Member 'UCommonItemIcon::DMY_GadgetIcon' has a wrong offset!");
static_assert(offsetof(UCommonItemIcon, ItemIcon_StickerImage) == 0x000318, "Member 'UCommonItemIcon::ItemIcon_StickerImage' has a wrong offset!");
static_assert(offsetof(UCommonItemIcon, DMY_StageRing) == 0x000320, "Member 'UCommonItemIcon::DMY_StageRing' has a wrong offset!");
static_assert(offsetof(UCommonItemIcon, DMY_JukeBox_Image) == 0x000328, "Member 'UCommonItemIcon::DMY_JukeBox_Image' has a wrong offset!");
static_assert(offsetof(UCommonItemIcon, TXT_Cost) == 0x000330, "Member 'UCommonItemIcon::TXT_Cost' has a wrong offset!");

// Class UNION.CourseSelect_RivalChoice
// 0x00D8 (0x03B8 - 0x02E0)
class UCourseSelect_RivalChoice : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnFinishedEvent;                                   // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMap<ERivalType, class UCourseSelectRivalChoiceButton*> RivalChoiceButtons;                      // 0x02F0(0x0050)(BlueprintVisible, ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	ERivalType                                    ChoiceBtnCurrent;                                  // 0x0340(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _TextLevelUpChallengeMain;                         // 0x0348(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   _TextLevelUpChallengeSub;                          // 0x0358(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   _TextBonusUpChallengeMain;                         // 0x0368(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   _TextBonusUpChallengeSub;                          // 0x0378(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UImage*                                 _CutInCharaImage;                                  // 0x0388(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _ChallengeTextBlock;                               // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _BonusTextBlock;                                   // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A0[0x18];                                     // 0x03A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginChoiceFooter();
	void FinishedWidgetFooter();
	void InitFooter();
	void PlayVoice(EDriverId DriverId);
	void SetChoiceRivalData(EDriverId DriverId, ERivalType RivalType);
	void StartLoad(EDriverId InRivalDriverId);

	bool IsReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CourseSelect_RivalChoice">();
	}
	static class UCourseSelect_RivalChoice* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCourseSelect_RivalChoice>();
	}
};
static_assert(alignof(UCourseSelect_RivalChoice) == 0x000008, "Wrong alignment on UCourseSelect_RivalChoice");
static_assert(sizeof(UCourseSelect_RivalChoice) == 0x0003B8, "Wrong size on UCourseSelect_RivalChoice");
static_assert(offsetof(UCourseSelect_RivalChoice, OnFinishedEvent) == 0x0002E0, "Member 'UCourseSelect_RivalChoice::OnFinishedEvent' has a wrong offset!");
static_assert(offsetof(UCourseSelect_RivalChoice, RivalChoiceButtons) == 0x0002F0, "Member 'UCourseSelect_RivalChoice::RivalChoiceButtons' has a wrong offset!");
static_assert(offsetof(UCourseSelect_RivalChoice, ChoiceBtnCurrent) == 0x000340, "Member 'UCourseSelect_RivalChoice::ChoiceBtnCurrent' has a wrong offset!");
static_assert(offsetof(UCourseSelect_RivalChoice, _TextLevelUpChallengeMain) == 0x000348, "Member 'UCourseSelect_RivalChoice::_TextLevelUpChallengeMain' has a wrong offset!");
static_assert(offsetof(UCourseSelect_RivalChoice, _TextLevelUpChallengeSub) == 0x000358, "Member 'UCourseSelect_RivalChoice::_TextLevelUpChallengeSub' has a wrong offset!");
static_assert(offsetof(UCourseSelect_RivalChoice, _TextBonusUpChallengeMain) == 0x000368, "Member 'UCourseSelect_RivalChoice::_TextBonusUpChallengeMain' has a wrong offset!");
static_assert(offsetof(UCourseSelect_RivalChoice, _TextBonusUpChallengeSub) == 0x000378, "Member 'UCourseSelect_RivalChoice::_TextBonusUpChallengeSub' has a wrong offset!");
static_assert(offsetof(UCourseSelect_RivalChoice, _CutInCharaImage) == 0x000388, "Member 'UCourseSelect_RivalChoice::_CutInCharaImage' has a wrong offset!");
static_assert(offsetof(UCourseSelect_RivalChoice, _ChallengeTextBlock) == 0x000390, "Member 'UCourseSelect_RivalChoice::_ChallengeTextBlock' has a wrong offset!");
static_assert(offsetof(UCourseSelect_RivalChoice, _BonusTextBlock) == 0x000398, "Member 'UCourseSelect_RivalChoice::_BonusTextBlock' has a wrong offset!");

// Class UNION.CommonLineMessageWidget
// 0x0020 (0x0300 - 0x02E0)
class UCommonLineMessageWidget : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              DisplayEndDelegate;                                // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F0[0x10];                                     // 0x02F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndDisplayTimeCount();
	void PlayAnimationIn();
	void PlayAnimationOut();
	void SetDisplayTime(float InDisplayTime);
	void SetMessageText(const class FText& InMessageText);
	void StartDisplayTimeCount();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonLineMessageWidget">();
	}
	static class UCommonLineMessageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonLineMessageWidget>();
	}
};
static_assert(alignof(UCommonLineMessageWidget) == 0x000008, "Wrong alignment on UCommonLineMessageWidget");
static_assert(sizeof(UCommonLineMessageWidget) == 0x000300, "Wrong size on UCommonLineMessageWidget");
static_assert(offsetof(UCommonLineMessageWidget, DisplayEndDelegate) == 0x0002E0, "Member 'UCommonLineMessageWidget::DisplayEndDelegate' has a wrong offset!");

// Class UNION.GadgetCustomize2InitState
// 0x0000 (0x00F8 - 0x00F8)
class UGadgetCustomize2InitState : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomize2InitState">();
	}
	static class UGadgetCustomize2InitState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomize2InitState>();
	}
};
static_assert(alignof(UGadgetCustomize2InitState) == 0x000008, "Wrong alignment on UGadgetCustomize2InitState");
static_assert(sizeof(UGadgetCustomize2InitState) == 0x0000F8, "Wrong size on UGadgetCustomize2InitState");

// Class UNION.CommonMatchmakingContext
// 0x0000 (0x0270 - 0x0270)
class UCommonMatchmakingContext : public UMatchmakingContext_WithFlexMatch
{
public:
	void OnCompleteNotifyChangeMatchmakingStatus(bool bSuccessful, const struct FLobbyOperationResult& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMatchmakingContext">();
	}
	static class UCommonMatchmakingContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMatchmakingContext>();
	}
};
static_assert(alignof(UCommonMatchmakingContext) == 0x000008, "Wrong alignment on UCommonMatchmakingContext");
static_assert(sizeof(UCommonMatchmakingContext) == 0x000270, "Wrong size on UCommonMatchmakingContext");

// Class UNION.FriendListPartsWidgetInterface
// 0x0000 (0x0000 - 0x0000)
class IFriendListPartsWidgetInterface final
{
public:
	void SetTitleText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendListPartsWidgetInterface">();
	}
	static class IFriendListPartsWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFriendListPartsWidgetInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IFriendListPartsWidgetInterface) == 0x000001, "Wrong alignment on IFriendListPartsWidgetInterface");
static_assert(sizeof(IFriendListPartsWidgetInterface) == 0x000001, "Wrong size on IFriendListPartsWidgetInterface");

// Class UNION.RaceSequenceStateSpawnRacer
// 0x0000 (0x0110 - 0x0110)
class URaceSequenceStateSpawnRacer : public URaceSequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateSpawnRacer">();
	}
	static class URaceSequenceStateSpawnRacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateSpawnRacer>();
	}
};
static_assert(alignof(URaceSequenceStateSpawnRacer) == 0x000008, "Wrong alignment on URaceSequenceStateSpawnRacer");
static_assert(sizeof(URaceSequenceStateSpawnRacer) == 0x000110, "Wrong size on URaceSequenceStateSpawnRacer");

// Class UNION.CommonMenuControllerButton
// 0x0020 (0x04A0 - 0x0480)
class UCommonMenuControllerButton : public UUnionUIButtonBase
{
public:
	uint8                                         Pad_480[0x8];                                      // 0x0480(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsRaceKey;                                        // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGamePadKey;                                     // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48A[0x2];                                      // 0x048A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 PAT_ControllerBtn;                                 // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentIndex;                                      // 0x0498(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeInputTypeIF_Implementation(EAppControllerInputType InNewControllerInputType);
	void ChangeKeyboardLayoutIF_Implementation(uint8 InNewKeyboardLayout, uint8 InNewKeytopPattern);
	void RefreshButton();
	void SetControllerButtonMaterialParam(int32 InIndex);
	void SetControllerTexture(class UTexture* InTexture);
	void ToMenuGamepadRowsColumns();
	void ToMenuKeyboardDisplay();
	void ToMenuKeyboardRowsColumns();
	void ToMouseRowsColumns();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuControllerButton">();
	}
	static class UCommonMenuControllerButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuControllerButton>();
	}
};
static_assert(alignof(UCommonMenuControllerButton) == 0x000008, "Wrong alignment on UCommonMenuControllerButton");
static_assert(sizeof(UCommonMenuControllerButton) == 0x0004A0, "Wrong size on UCommonMenuControllerButton");
static_assert(offsetof(UCommonMenuControllerButton, bIsRaceKey) == 0x000488, "Member 'UCommonMenuControllerButton::bIsRaceKey' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerButton, bIsGamePadKey) == 0x000489, "Member 'UCommonMenuControllerButton::bIsGamePadKey' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerButton, PlayerIndex) == 0x00048C, "Member 'UCommonMenuControllerButton::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerButton, PAT_ControllerBtn) == 0x000490, "Member 'UCommonMenuControllerButton::PAT_ControllerBtn' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerButton, CurrentIndex) == 0x000498, "Member 'UCommonMenuControllerButton::CurrentIndex' has a wrong offset!");

// Class UNION.CommonMenuControllerCross
// 0x0030 (0x0310 - 0x02E0)
class UCommonMenuControllerCross : public UUserWidget
{
public:
	class UImage*                                 Up;                                                // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Right;                                             // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bottom;                                            // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Left;                                              // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 CurrentKey;                                        // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIsRaceKey(bool IsRaceKey);
	void SetKey(const struct FKey& InKey);
	void SetKeyIndex(int32 InKeyIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuControllerCross">();
	}
	static class UCommonMenuControllerCross* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuControllerCross>();
	}
};
static_assert(alignof(UCommonMenuControllerCross) == 0x000008, "Wrong alignment on UCommonMenuControllerCross");
static_assert(sizeof(UCommonMenuControllerCross) == 0x000310, "Wrong size on UCommonMenuControllerCross");
static_assert(offsetof(UCommonMenuControllerCross, Up) == 0x0002E0, "Member 'UCommonMenuControllerCross::Up' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerCross, Right) == 0x0002E8, "Member 'UCommonMenuControllerCross::Right' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerCross, Bottom) == 0x0002F0, "Member 'UCommonMenuControllerCross::Bottom' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerCross, Left) == 0x0002F8, "Member 'UCommonMenuControllerCross::Left' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerCross, CurrentKey) == 0x000300, "Member 'UCommonMenuControllerCross::CurrentKey' has a wrong offset!");

// Class UNION.GadgetCustomizeAttachCompleteState
// 0x0000 (0x00F8 - 0x00F8)
class UGadgetCustomizeAttachCompleteState final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomizeAttachCompleteState">();
	}
	static class UGadgetCustomizeAttachCompleteState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomizeAttachCompleteState>();
	}
};
static_assert(alignof(UGadgetCustomizeAttachCompleteState) == 0x000008, "Wrong alignment on UGadgetCustomizeAttachCompleteState");
static_assert(sizeof(UGadgetCustomizeAttachCompleteState) == 0x0000F8, "Wrong size on UGadgetCustomizeAttachCompleteState");

// Class UNION.StageLotteryWheelDataAsset
// 0x0010 (0x0040 - 0x0030)
class UStageLotteryWheelDataAsset final : public UDataAsset
{
public:
	int32                                         RankPointThreshold;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvoidDuplicationResetCount;                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMainStageTravelRingClose;                         // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FeverBoostMainMix;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StageLotteryWheelDataAsset">();
	}
	static class UStageLotteryWheelDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStageLotteryWheelDataAsset>();
	}
};
static_assert(alignof(UStageLotteryWheelDataAsset) == 0x000008, "Wrong alignment on UStageLotteryWheelDataAsset");
static_assert(sizeof(UStageLotteryWheelDataAsset) == 0x000040, "Wrong size on UStageLotteryWheelDataAsset");
static_assert(offsetof(UStageLotteryWheelDataAsset, RankPointThreshold) == 0x000030, "Member 'UStageLotteryWheelDataAsset::RankPointThreshold' has a wrong offset!");
static_assert(offsetof(UStageLotteryWheelDataAsset, AvoidDuplicationResetCount) == 0x000034, "Member 'UStageLotteryWheelDataAsset::AvoidDuplicationResetCount' has a wrong offset!");
static_assert(offsetof(UStageLotteryWheelDataAsset, bMainStageTravelRingClose) == 0x000038, "Member 'UStageLotteryWheelDataAsset::bMainStageTravelRingClose' has a wrong offset!");
static_assert(offsetof(UStageLotteryWheelDataAsset, FeverBoostMainMix) == 0x00003C, "Member 'UStageLotteryWheelDataAsset::FeverBoostMainMix' has a wrong offset!");

// Class UNION.CommonMenuControllerKeyboard
// 0x0028 (0x0308 - 0x02E0)
class UCommonMenuControllerKeyboard : public UUserWidget
{
public:
	class UWidgetSwitcher*                        WidgetSwitcher;                                    // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 PAT_Key;                                           // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               PAT_Key_Material;                                  // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_Key;                                           // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               PAT_Mouse_Material;                                // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetFKey(const struct FKey& InKey);
	void SetKeyNameText(const class FText& InText);
	void SetTextureParamIndex(int32 InTextureIndex);

	int32 GetMouseButtonIndex(const struct FKey& InKey) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuControllerKeyboard">();
	}
	static class UCommonMenuControllerKeyboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuControllerKeyboard>();
	}
};
static_assert(alignof(UCommonMenuControllerKeyboard) == 0x000008, "Wrong alignment on UCommonMenuControllerKeyboard");
static_assert(sizeof(UCommonMenuControllerKeyboard) == 0x000308, "Wrong size on UCommonMenuControllerKeyboard");
static_assert(offsetof(UCommonMenuControllerKeyboard, WidgetSwitcher) == 0x0002E0, "Member 'UCommonMenuControllerKeyboard::WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerKeyboard, PAT_Key) == 0x0002E8, "Member 'UCommonMenuControllerKeyboard::PAT_Key' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerKeyboard, PAT_Key_Material) == 0x0002F0, "Member 'UCommonMenuControllerKeyboard::PAT_Key_Material' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerKeyboard, TXT_Key) == 0x0002F8, "Member 'UCommonMenuControllerKeyboard::TXT_Key' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerKeyboard, PAT_Mouse_Material) == 0x000300, "Member 'UCommonMenuControllerKeyboard::PAT_Mouse_Material' has a wrong offset!");

// Class UNION.FestaSequence
// 0x0000 (0x0368 - 0x0368)
class AFestaSequence final : public AHierarchicalStateMachine
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaSequence">();
	}
	static class AFestaSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFestaSequence>();
	}
};
static_assert(alignof(AFestaSequence) == 0x000008, "Wrong alignment on AFestaSequence");
static_assert(sizeof(AFestaSequence) == 0x000368, "Wrong size on AFestaSequence");

// Class UNION.CommonMenuControllerKeyboardCross
// 0x0000 (0x02E0 - 0x02E0)
class UCommonMenuControllerKeyboardCross : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuControllerKeyboardCross">();
	}
	static class UCommonMenuControllerKeyboardCross* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuControllerKeyboardCross>();
	}
};
static_assert(alignof(UCommonMenuControllerKeyboardCross) == 0x000008, "Wrong alignment on UCommonMenuControllerKeyboardCross");
static_assert(sizeof(UCommonMenuControllerKeyboardCross) == 0x0002E0, "Wrong size on UCommonMenuControllerKeyboardCross");

// Class UNION.CommonMenuControllerUI
// 0x0050 (0x0330 - 0x02E0)
class UCommonMenuControllerUI : public UUserWidget
{
public:
	EControllerButtonType                         ButtonImageType;                                   // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRaceKey;                                        // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CurrentKey;                                        // 0x02E8(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        WidgetSwitcher_Pict;                               // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonMenuControllerCross*             WBP_FooterMenu_Sub_ControllerCross;                // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonMenuControllerButton*            WBP_FooterMenu_Sub_ControllerBtn;                  // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonMenuControllerKeyboardCross*     WBP_FooterMenu_Sub_KeyCross;                       // 0x0318(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonMenuControllerKeyboard*          WBP_FooterMenu_Sub_Key;                            // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Meter;                                             // 0x0328(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetControllerButton(EControllerButtonTextureIndex InControllerButton);
	void SetFKey(const struct FKey& InKey);
	void SetGamePadKeyFlag(bool InIsGamePadKey);
	void UpdateByCurrentFKeySetting();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuControllerUI">();
	}
	static class UCommonMenuControllerUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuControllerUI>();
	}
};
static_assert(alignof(UCommonMenuControllerUI) == 0x000008, "Wrong alignment on UCommonMenuControllerUI");
static_assert(sizeof(UCommonMenuControllerUI) == 0x000330, "Wrong size on UCommonMenuControllerUI");
static_assert(offsetof(UCommonMenuControllerUI, ButtonImageType) == 0x0002E0, "Member 'UCommonMenuControllerUI::ButtonImageType' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerUI, bIsRaceKey) == 0x0002E1, "Member 'UCommonMenuControllerUI::bIsRaceKey' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerUI, CurrentKey) == 0x0002E8, "Member 'UCommonMenuControllerUI::CurrentKey' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerUI, WidgetSwitcher_Pict) == 0x000300, "Member 'UCommonMenuControllerUI::WidgetSwitcher_Pict' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerUI, WBP_FooterMenu_Sub_ControllerCross) == 0x000308, "Member 'UCommonMenuControllerUI::WBP_FooterMenu_Sub_ControllerCross' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerUI, WBP_FooterMenu_Sub_ControllerBtn) == 0x000310, "Member 'UCommonMenuControllerUI::WBP_FooterMenu_Sub_ControllerBtn' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerUI, WBP_FooterMenu_Sub_KeyCross) == 0x000318, "Member 'UCommonMenuControllerUI::WBP_FooterMenu_Sub_KeyCross' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerUI, WBP_FooterMenu_Sub_Key) == 0x000320, "Member 'UCommonMenuControllerUI::WBP_FooterMenu_Sub_Key' has a wrong offset!");
static_assert(offsetof(UCommonMenuControllerUI, Meter) == 0x000328, "Member 'UCommonMenuControllerUI::Meter' has a wrong offset!");

// Class UNION.CommonMenuCrossButton
// 0x0008 (0x0488 - 0x0480)
class UCommonMenuCrossButton : public UUnionUIButtonBase
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0480(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetPlayerControllerIndex(const int32 InPlayerControllerIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuCrossButton">();
	}
	static class UCommonMenuCrossButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuCrossButton>();
	}
};
static_assert(alignof(UCommonMenuCrossButton) == 0x000008, "Wrong alignment on UCommonMenuCrossButton");
static_assert(sizeof(UCommonMenuCrossButton) == 0x000488, "Wrong size on UCommonMenuCrossButton");
static_assert(offsetof(UCommonMenuCrossButton, PlayerControllerIndex) == 0x000480, "Member 'UCommonMenuCrossButton::PlayerControllerIndex' has a wrong offset!");

// Class UNION.EmoteWheelState
// 0x0028 (0x0150 - 0x0128)
class UEmoteWheelState final : public UMenuSequenceSubStateBase
{
public:
	TMulticastInlineDelegate<void(int32 StampIndex)> OnSelectedStamp;                                // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsWaiting)> OnChangedWaitTimer;                               // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          CanSendStamp;                                      // 0x0148(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSendLimitTimerStamp;                             // 0x0149(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanRecevStamp;                                     // 0x014A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSquadLobby;                                     // 0x014B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AllStampForcePlayOutAnim();
	void EmoteWheelTimeUp();
	bool GetCanSendStamp();
	void OnInitialize(class UCanvasPanel* InCanvasPanel, class UUnionUISceneBase* InBaseScene);
	void PlayEmoteAndStamp(class AMenuRacerBase* InRacer, int32 InButtonIndex, int32 InLobbyIndex);
	void SetCanRecevStamp(bool bInCanRecevStamp);
	void SetCanSendStamp(bool bInCanSendStamp);
	void SetIsSquadLobby(bool bInIsSquadlobby);
	void SetOwnerMenuRacer(class AMenuRacerBase* InOwnerRacer, int32 InOwnerLobbyIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmoteWheelState">();
	}
	static class UEmoteWheelState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmoteWheelState>();
	}
};
static_assert(alignof(UEmoteWheelState) == 0x000008, "Wrong alignment on UEmoteWheelState");
static_assert(sizeof(UEmoteWheelState) == 0x000150, "Wrong size on UEmoteWheelState");
static_assert(offsetof(UEmoteWheelState, OnSelectedStamp) == 0x000128, "Member 'UEmoteWheelState::OnSelectedStamp' has a wrong offset!");
static_assert(offsetof(UEmoteWheelState, OnChangedWaitTimer) == 0x000138, "Member 'UEmoteWheelState::OnChangedWaitTimer' has a wrong offset!");
static_assert(offsetof(UEmoteWheelState, CanSendStamp) == 0x000148, "Member 'UEmoteWheelState::CanSendStamp' has a wrong offset!");
static_assert(offsetof(UEmoteWheelState, IsSendLimitTimerStamp) == 0x000149, "Member 'UEmoteWheelState::IsSendLimitTimerStamp' has a wrong offset!");
static_assert(offsetof(UEmoteWheelState, CanRecevStamp) == 0x00014A, "Member 'UEmoteWheelState::CanRecevStamp' has a wrong offset!");
static_assert(offsetof(UEmoteWheelState, bIsSquadLobby) == 0x00014B, "Member 'UEmoteWheelState::bIsSquadLobby' has a wrong offset!");

// Class UNION.CommonMenuFooterButton
// 0x0010 (0x0338 - 0x0328)
class UCommonMenuFooterButton : public UUnionUIInputWidget
{
public:
	class USoundAtomCue*                          LongPutCue;                                        // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuControllerUI*                WBP_CMN_ControllerBtn;                             // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Refresh();
	void SetIconGauge(float InGaugeParam);
	void SetIconGaugeVisibility(ESlateVisibility InBtnVisibility);
	void SetIconType(int32 InButtonIconIndex, EUIButtonIconType InButtonIconType);
	void SetIsGamePadButton(bool bInIsGamePadButton);
	void SetText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuFooterButton">();
	}
	static class UCommonMenuFooterButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuFooterButton>();
	}
};
static_assert(alignof(UCommonMenuFooterButton) == 0x000008, "Wrong alignment on UCommonMenuFooterButton");
static_assert(sizeof(UCommonMenuFooterButton) == 0x000338, "Wrong size on UCommonMenuFooterButton");
static_assert(offsetof(UCommonMenuFooterButton, LongPutCue) == 0x000328, "Member 'UCommonMenuFooterButton::LongPutCue' has a wrong offset!");
static_assert(offsetof(UCommonMenuFooterButton, WBP_CMN_ControllerBtn) == 0x000330, "Member 'UCommonMenuFooterButton::WBP_CMN_ControllerBtn' has a wrong offset!");

// Class UNION.FriendShipState
// 0x0000 (0x0128 - 0x0128)
class UFriendShipState final : public UMenuSequenceSubStateBase
{
public:
	int32 GetGivedTicket(EDriverId ID);
	float PlayVoice(EDriverId InDriverId, bool bVeryHappy);
	void SetGivedTicket(EDriverId ID, int32 Num);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendShipState">();
	}
	static class UFriendShipState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendShipState>();
	}
};
static_assert(alignof(UFriendShipState) == 0x000008, "Wrong alignment on UFriendShipState");
static_assert(sizeof(UFriendShipState) == 0x000128, "Wrong size on UFriendShipState");

// Class UNION.CommonFooterShortCut
// 0x0008 (0x02E8 - 0x02E0)
class UCommonFooterShortCut : public UUserWidget
{
public:
	class UCommonMenuFooterButton*                WBP_FooterMenu_Sub_CommonBtn_00;                   // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Refresh();
	void SetIconType(int32 InButtonIconIndex, EUIButtonIconType InButtonIconType);
	void SetIsGamePadButton(bool bInIsGamePadButton);
	void SetText(const class FText& InText);
	void SetTextMainType(EFooterMainTextType InType);
	void SetTextSubType(EFooterSubTextType InType);

	class UCommonMenuFooterButton* GetButton() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonFooterShortCut">();
	}
	static class UCommonFooterShortCut* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonFooterShortCut>();
	}
};
static_assert(alignof(UCommonFooterShortCut) == 0x000008, "Wrong alignment on UCommonFooterShortCut");
static_assert(sizeof(UCommonFooterShortCut) == 0x0002E8, "Wrong size on UCommonFooterShortCut");
static_assert(offsetof(UCommonFooterShortCut, WBP_FooterMenu_Sub_CommonBtn_00) == 0x0002E0, "Member 'UCommonFooterShortCut::WBP_FooterMenu_Sub_CommonBtn_00' has a wrong offset!");

// Class UNION.CommonMenuFooterMenu
// 0x0090 (0x0370 - 0x02E0)
class UCommonMenuFooterMenu : public UUserWidget
{
public:
	class UCommonMenuFooterButton*                WBP_FooterMenu_Sub_CommonBtn_00;                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuFooterButton*                WBP_FooterMenu_Sub_CommonBtn_01;                   // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuFooterButton*                WBP_FooterMenu_Sub_CommonBtn_02;                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuFooterButton*                WBP_FooterMenu_Sub_CommonBtn_03;                   // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuFooterButton*                WBP_FooterMenu_Sub_CommonBtn_04;                   // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuFooterButton*                WBP_FooterMenu_Sub_CommonBtn_05;                   // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuFooterButton*                WBP_FooterMenu_Sub_CommonBtn_OK;                   // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuFooterButton*                WBP_FooterMenu_Sub_CommonBtn_Cancel;               // 0x0318(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FFooterMenuWidgetArray>         MainButtonHitWidgets;                              // 0x0320(0x0010)(BlueprintVisible, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<EFooterMainTextType>                   MainButtonTextTypes;                               // 0x0330(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFooterMenuWidgetArray>         SubButtonHitWidgets;                               // 0x0340(0x0010)(BlueprintVisible, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x20];                                     // 0x0350(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddToViewportDefaultZOrder();
	void FireMainPressedEvent(EFooterMainTextType MainTextType);
	void FireMainReleasedEvent(EFooterMainTextType MainTextType);
	void FireSubPressedEvent(EUIButtonIconType ButtonIconType, int32 Index_0);
	void Hide();
	void SetAllButtonStateVisibility(bool Visible);
	void SetAllMainButtonStateVisibility(bool Visible);
	void SetAllSubButtonStateVisibility(bool Visible);
	void SetMainButtonParam(EFooterMainTextType InTextType, ESlateVisibility InVisibility);
	void SetMainButtonStateParam(EFooterMainTextType InTextType, bool Visible);
	void SetMainButtonStateVisibility(int32 InIndex, bool Visible);
	void SetSubButtonParam(int32 InIndex, EFooterSubTextType InTextType, ESlateVisibility InVisibility);
	void SetSubButtonStateParam(int32 InIndex, EFooterSubTextType InTextType, bool Visible);
	void SetSubButtonStateVisibility(int32 InIndex, bool Visible);
	void SetVisibilityAllMainButton(ESlateVisibility InVisibility);
	void SetVisibilityAllSubButton(ESlateVisibility InVisibility);
	void SetVisibilityCollapsedAllButton();
	void Show();
	void SubButtonStopAllAnimation();
	void UpdateButtonImageByCurrentSetting();

	class UCommonMenuFooterButton* GetMainButtons(EFooterMainTextType InTextType) const;
	class UCommonMenuFooterButton* GetSubButtons(int32 InIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuFooterMenu">();
	}
	static class UCommonMenuFooterMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuFooterMenu>();
	}
};
static_assert(alignof(UCommonMenuFooterMenu) == 0x000008, "Wrong alignment on UCommonMenuFooterMenu");
static_assert(sizeof(UCommonMenuFooterMenu) == 0x000370, "Wrong size on UCommonMenuFooterMenu");
static_assert(offsetof(UCommonMenuFooterMenu, WBP_FooterMenu_Sub_CommonBtn_00) == 0x0002E0, "Member 'UCommonMenuFooterMenu::WBP_FooterMenu_Sub_CommonBtn_00' has a wrong offset!");
static_assert(offsetof(UCommonMenuFooterMenu, WBP_FooterMenu_Sub_CommonBtn_01) == 0x0002E8, "Member 'UCommonMenuFooterMenu::WBP_FooterMenu_Sub_CommonBtn_01' has a wrong offset!");
static_assert(offsetof(UCommonMenuFooterMenu, WBP_FooterMenu_Sub_CommonBtn_02) == 0x0002F0, "Member 'UCommonMenuFooterMenu::WBP_FooterMenu_Sub_CommonBtn_02' has a wrong offset!");
static_assert(offsetof(UCommonMenuFooterMenu, WBP_FooterMenu_Sub_CommonBtn_03) == 0x0002F8, "Member 'UCommonMenuFooterMenu::WBP_FooterMenu_Sub_CommonBtn_03' has a wrong offset!");
static_assert(offsetof(UCommonMenuFooterMenu, WBP_FooterMenu_Sub_CommonBtn_04) == 0x000300, "Member 'UCommonMenuFooterMenu::WBP_FooterMenu_Sub_CommonBtn_04' has a wrong offset!");
static_assert(offsetof(UCommonMenuFooterMenu, WBP_FooterMenu_Sub_CommonBtn_05) == 0x000308, "Member 'UCommonMenuFooterMenu::WBP_FooterMenu_Sub_CommonBtn_05' has a wrong offset!");
static_assert(offsetof(UCommonMenuFooterMenu, WBP_FooterMenu_Sub_CommonBtn_OK) == 0x000310, "Member 'UCommonMenuFooterMenu::WBP_FooterMenu_Sub_CommonBtn_OK' has a wrong offset!");
static_assert(offsetof(UCommonMenuFooterMenu, WBP_FooterMenu_Sub_CommonBtn_Cancel) == 0x000318, "Member 'UCommonMenuFooterMenu::WBP_FooterMenu_Sub_CommonBtn_Cancel' has a wrong offset!");
static_assert(offsetof(UCommonMenuFooterMenu, MainButtonHitWidgets) == 0x000320, "Member 'UCommonMenuFooterMenu::MainButtonHitWidgets' has a wrong offset!");
static_assert(offsetof(UCommonMenuFooterMenu, MainButtonTextTypes) == 0x000330, "Member 'UCommonMenuFooterMenu::MainButtonTextTypes' has a wrong offset!");
static_assert(offsetof(UCommonMenuFooterMenu, SubButtonHitWidgets) == 0x000340, "Member 'UCommonMenuFooterMenu::SubButtonHitWidgets' has a wrong offset!");

// Class UNION.CommonMenuHeaderMenu
// 0x0088 (0x0460 - 0x03D8)
class UCommonMenuHeaderMenu : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(class FText SendUserName, EAppSupportedPlatform SendUserPlatform)> OnRecvNice; // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UObject* Object)> OnDecideStampBtn;                          // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UObject* Object)> OnNewsButtonMouseClicked;                  // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UObject* Object)> OnRuleTimeTableClicked;                    // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UUnionUISceneBase*                      InfoScene;                                         // 0x0418(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuRuleTimeTableScene*          RuleTimeTableScene;                                // 0x0420(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButtonBase*                     EmoteWheelButton;                                  // 0x0428(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButtonBase*                     JukeBoxButton;                                     // 0x0430(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UUnionUIButtonBase*>             ButtonArr;                                         // 0x0438(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UUnionUISceneBase*                      UserInfoScene;                                     // 0x0448(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButtonBase*                     HeaderNewsBtn;                                     // 0x0450(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyMatchingUIState*                  MatchingStateScene;                                // 0x0458(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddToViewportHeader();
	void BindToNewsMouseClick();
	ECrossplayPlatform GetConvertPlatform(EAppSupportedPlatform InAppSupportedPlatformId);
	ESlateVisibility GetVisibilityRuleTimeTableScene();
	void OnInitialize();
	void OnNewsButtonMouseClickedEvent();
	void PlayButtonAnimationIdle(int32 ButtonIndex);
	void PlayButtonAnimationWait(int32 ButtonIndex);
	void PlayForceHeaderNoticeOutAnim();
	void RemoveFromViewportHeader();
	void SetHeaderUserData(const class FText& InUserName, int32 InHonorId, ECrossplayPlatform InPlatformId, int32 InWinCounts, ERateRank InRateRank, float InRankPercent);
	void SetRuleTimeTable(int32 InTimetableIndex, const struct FDateTime& InTime, const struct FRestoredRule& InCurrentRule, bool bIsEnd);
	void SetRuleTimeTableFiexed(EGroupRaceRule InFixedRule);
	void Setup();
	void SetVisibilityHeaderRightBtn(ESlateVisibility InVisibility);
	void SetVisibilityNewsBtn(ESlateVisibility InVisibility);
	void SetVisibilityRuleTimeOpenWidget(ESlateVisibility InVisibility);
	void SetVisibilityRuleTimeRankCalcWidget(ESlateVisibility InVisibility);
	void SetVisibilityRuleTimeTableButtonIcon(ESlateVisibility InVisibility);
	void SetVisibilityRuleTimeTableOverlay(bool bInIsVisible);
	void SetVisibilityRuleTimeTableScene(ESlateVisibility InVisibility);
	void SetVisibilityTeamInfoScene(ESlateVisibility InVisibility);
	void SetVisibilityUserInfoScene(ESlateVisibility InVisibility);
	void UpdateFestaTimeScheduleAndWidget();
	void UpdateFestaWinCounts(int32 InWinCounts);
	void UpdateHonorTitle();
	void UpdateVisibilityNewsBtn_NewIcon();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuHeaderMenu">();
	}
	static class UCommonMenuHeaderMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuHeaderMenu>();
	}
};
static_assert(alignof(UCommonMenuHeaderMenu) == 0x000008, "Wrong alignment on UCommonMenuHeaderMenu");
static_assert(sizeof(UCommonMenuHeaderMenu) == 0x000460, "Wrong size on UCommonMenuHeaderMenu");
static_assert(offsetof(UCommonMenuHeaderMenu, OnRecvNice) == 0x0003D8, "Member 'UCommonMenuHeaderMenu::OnRecvNice' has a wrong offset!");
static_assert(offsetof(UCommonMenuHeaderMenu, OnDecideStampBtn) == 0x0003E8, "Member 'UCommonMenuHeaderMenu::OnDecideStampBtn' has a wrong offset!");
static_assert(offsetof(UCommonMenuHeaderMenu, OnNewsButtonMouseClicked) == 0x0003F8, "Member 'UCommonMenuHeaderMenu::OnNewsButtonMouseClicked' has a wrong offset!");
static_assert(offsetof(UCommonMenuHeaderMenu, OnRuleTimeTableClicked) == 0x000408, "Member 'UCommonMenuHeaderMenu::OnRuleTimeTableClicked' has a wrong offset!");
static_assert(offsetof(UCommonMenuHeaderMenu, InfoScene) == 0x000418, "Member 'UCommonMenuHeaderMenu::InfoScene' has a wrong offset!");
static_assert(offsetof(UCommonMenuHeaderMenu, RuleTimeTableScene) == 0x000420, "Member 'UCommonMenuHeaderMenu::RuleTimeTableScene' has a wrong offset!");
static_assert(offsetof(UCommonMenuHeaderMenu, EmoteWheelButton) == 0x000428, "Member 'UCommonMenuHeaderMenu::EmoteWheelButton' has a wrong offset!");
static_assert(offsetof(UCommonMenuHeaderMenu, JukeBoxButton) == 0x000430, "Member 'UCommonMenuHeaderMenu::JukeBoxButton' has a wrong offset!");
static_assert(offsetof(UCommonMenuHeaderMenu, ButtonArr) == 0x000438, "Member 'UCommonMenuHeaderMenu::ButtonArr' has a wrong offset!");
static_assert(offsetof(UCommonMenuHeaderMenu, UserInfoScene) == 0x000448, "Member 'UCommonMenuHeaderMenu::UserInfoScene' has a wrong offset!");
static_assert(offsetof(UCommonMenuHeaderMenu, HeaderNewsBtn) == 0x000450, "Member 'UCommonMenuHeaderMenu::HeaderNewsBtn' has a wrong offset!");
static_assert(offsetof(UCommonMenuHeaderMenu, MatchingStateScene) == 0x000458, "Member 'UCommonMenuHeaderMenu::MatchingStateScene' has a wrong offset!");

// Class UNION.EndingSequence
// 0x0008 (0x0370 - 0x0368)
class AEndingSequence final : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInitStateExit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EndingSequence">();
	}
	static class AEndingSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEndingSequence>();
	}
};
static_assert(alignof(AEndingSequence) == 0x000008, "Wrong alignment on AEndingSequence");
static_assert(sizeof(AEndingSequence) == 0x000370, "Wrong size on AEndingSequence");

// Class UNION.StaffrollTextHolderWidget
// 0x0008 (0x02E8 - 0x02E0)
class UStaffrollTextHolderWidget final : public UUserWidget
{
public:
	class UPanelWidget*                           _TextRootPanel;                                    // 0x02E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollTextHolderWidget">();
	}
	static class UStaffrollTextHolderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollTextHolderWidget>();
	}
};
static_assert(alignof(UStaffrollTextHolderWidget) == 0x000008, "Wrong alignment on UStaffrollTextHolderWidget");
static_assert(sizeof(UStaffrollTextHolderWidget) == 0x0002E8, "Wrong size on UStaffrollTextHolderWidget");
static_assert(offsetof(UStaffrollTextHolderWidget, _TextRootPanel) == 0x0002E0, "Member 'UStaffrollTextHolderWidget::_TextRootPanel' has a wrong offset!");

// Class UNION.CommonMenuOptionButton
// 0x0008 (0x04D0 - 0x04C8)
class UCommonMenuOptionButton final : public UCommonMenuButtonBase
{
public:
	EOptionSequenceMainState                      OptionButtonType;                                  // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuOptionButton">();
	}
	static class UCommonMenuOptionButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuOptionButton>();
	}
};
static_assert(alignof(UCommonMenuOptionButton) == 0x000008, "Wrong alignment on UCommonMenuOptionButton");
static_assert(sizeof(UCommonMenuOptionButton) == 0x0004D0, "Wrong size on UCommonMenuOptionButton");
static_assert(offsetof(UCommonMenuOptionButton, OptionButtonType) == 0x0004C8, "Member 'UCommonMenuOptionButton::OptionButtonType' has a wrong offset!");

// Class UNION.FriendListContentsWidget
// 0x0118 (0x04F0 - 0x03D8)
class UFriendListContentsWidget : public UUnionUISceneBase
{
public:
	float                                         ListItemWidgetPadding;                             // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnlineSettingListItemWidgetPadding;                // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PfPlayerInfoCurrentPage;                           // 0x03E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PfPlayerInfoMaxPage;                               // 0x03E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    ListTitleWidgetArray;                              // 0x03E8(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    EmptyItemWidgetArray;                              // 0x03F8(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UFriendListSubMenuWidget*               SubMenuWidget;                                     // 0x0408(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFriendListConfirmWidget*               ConfirmWidget;                                     // 0x0410(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFriendListConfirmAnimationWidget*      ConfirmAnimationWidget;                            // 0x0418(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonLineMessageWidget*               ResultWidget;                                      // 0x0420(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFriendListPlayerInfo>          ListPlayerInfoArray;                               // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFriendListOnlineSettingData>   ListOnlineSettingInfoArray;                        // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCommon_UserSearchData>         SearchPlayerData;                                  // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLobbyId>                       SearchLobbyIdData;                                 // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFriendListCommandType>                SubMenuCommand;                                    // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EFriendListCommandType                        ConfirmWidgetCommandType;                          // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConfirmWidgetCancelButtonIndex;                    // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConfirmWidgetPfProfileButtonIndex;                 // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFriendListType>                       ListTypeArray;                                     // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SelectListIndex;                                   // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectSubMenuIndex;                                // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequestTargetProductUserId;                        // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFriendListMainWidget*                  MainWidget;                                        // 0x04B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B8[0x38];                                     // 0x04B8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddListItemWidget(const TArray<class UUserWidget*>& InWidgetArray, int32 InWidgetIndex);
	void AddListItemWidgetByListIndex(int32 InListIndex, bool bInDataError);
	void AddListItemWidgetByListItemIndex(int32 InListItemIndex);
	void AddListPlayerInfo(const TArray<struct FFriendListPlayerInfo>& InListPlayerInfo, EFriendListType InListType, bool bInDataError);
	void ChangeFooterVisibility(bool InEnable);
	void ChangePfListPage();
	bool CheckLobbyInvitationReject(int32 InButtonIndex);
	bool CheckShowPfProfile(int32 InButtonIndex);
	bool CheckSubMenuWidgetDisplay(int32 InListIndex);
	void ClearListPlayerInfo();
	void CreateConfirmAnimationWidget(EFriendListCommandType InCommandType);
	void CreateConfirmWidget(EFriendListCommandType InCommandType, const struct FFriendListPlayerInfo& InListPlayerInfo);
	void CreateListEmptyItemWidget(const struct FFriendListContentsWidgetData& InContentsWidgetData);
	void CreateListTitleWidget(const struct FFriendListContentsWidgetData& InContentsWidgetData);
	void CreateResultWidget(EFriendListCommandType InCommandType, const struct FFriendListPlayerInfo& InListPlayerInfo);
	void CreateSubMenuWidget(EFriendListType InListType, const struct FVector2D& InTranslation);
	void DestroyConfirmAnimationWidget();
	void DestroyConfirmWidget();
	void DestroyNumberInputWidget();
	void DestroyResultWidget();
	void DestroySubMenuWidget();
	bool EnableShowInvitationWarningWindow();
	bool EnableShowInvitationWarningWindowFromInvitationAccept();
	bool EnableShowInvitationWarningWindowFromInvitationSend();
	void EndSubWidgetDisplay(EFriendListCommandType PrevWidgetCommandType);
	void ExecuteAfterConfirmWidget(EFriendListCommandType CommandType, int32 InButtonIndex, bool bInCanceled);
	void ExecuteFriendListCommand(EFriendListCommandType InCommandType);
	void FocusListItemWidget(bool bInPlayFocusSound);
	bool GetEnabalePfListUpdate();
	class UCommonMenuFooterMenu* GetFooterMenu();
	EFriendListCategory GetListCategory();
	bool GetListIndexByRequestProductUserId(int32* OutListIndex);
	const class UFriendListMainWidget* GetMainWidget();
	int32 GetMaxShowPfPlayerInfo();
	class UFriendListNumberInputWidget* GetNumberInputWidget();
	void GetPFPlayerInfoList(const TArray<struct FFriendListPlayerInfo>& InListPlayerInfo, TArray<struct FFriendListPlayerInfo>* OutListPlayerInfo);
	class UScrollBox* GetScrollBoxWidget();
	void GetSearchPlayerInfo(struct FFriendListPlayerInfo* OutSearchPlayerInfo);
	void GetSubMenuWidgetTranslation(const class UUserWidget* InSelectButtonWidget, struct FVector2D* OutTranslation);
	int32 GetZOrder();
	void OnConfirmAnimationWidgetAnimationOutFinished();
	void OnConfirmWidgetButtonDecision(int32 InButtonIndex);
	void OnConfirmWidgetDecision(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnFriendListCommandSuccess(EFriendListCommandType InCommandType);
	void OnLobbyIdSearchSuccess(const TArray<struct FCommon_UserSearchData>& InUserSearchData, const TArray<struct FLobbyId>& InLobbyIdData, ELobbyType InLobbyType);
	void OnRacerInfoEnd();
	void OnResultWidgetDisplayEnd();
	void OnShowInvitationWarningWindow();
	void OnSubMenuWidgetCancel(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnSubMenuWidgetDecision(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnUserSearchSuccess(const TArray<struct FCommon_UserSearchData>& InUserSearchData);
	void ReflectOnlineSetting();
	void ResetContentsFocus();
	void ResetContentsWidgetFocus();
	void ReturnListSelect(class UWidget* InFocusWidget);
	void ReturnPrevSelect(class UWidget* InFocusWidget);
	void SetButtonControlEnable(bool bInEnable);
	void SetConfirmWidgetAllButtonFocusable(bool bInEnable);
	void SetEnabalePfListUpdate(bool InEnable);
	void SetListControlEnable(bool bInEnable);
	void SetListDisplay();
	void SetListEmptyItemWidgetTitleText(int32 InListIndex, bool bInError);
	void SetListItemWidgetButtonChangeableState(int32 InListItemIndex, bool bEnable);
	void SetListItemWidgetInteractableState(bool bInEnable);
	void SetListOnlineSettingInfo(const TArray<struct FFriendListOnlineSettingData>& InListOnlineSettingInfo, bool bInDataError);
	void SetListPlayerInfo(const TArray<struct FFriendListPlayerInfo>& InListPlayerInfo, bool bInDataError);
	void SetMainWidgetInputEnable(bool bInEnable);
	void SetMainWidgetInputEnableRequest(bool bInEnable);
	void SetPFFriendListContentsWidgetTitle(const class FText& InText);
	void SetScrollBoxVisibility(ESlateVisibility Param);
	void SetSelectListIndex(int32 InButtonIndex, bool InReset);
	void Setup(class UFriendListMainWidget* InMainWidget, EFriendListCategory InListCategory);
	void SetupListItemWidget();
	void SetupListItemWidgetPFPlayerInfo();
	void SetWidgetFocus(class APlayerController* PlayerController, bool bInPlayFocusSound);
	void StartFairPlayPointDisplay();
	void StartPlayerIconListSelect();
	void UpdateButtonSelectable();
	void UpdateOnlineSettingItemDisplay(int32 ItemIndex, bool bInSetting);

	bool CheckButtonWidgetExist() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendListContentsWidget">();
	}
	static class UFriendListContentsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendListContentsWidget>();
	}
};
static_assert(alignof(UFriendListContentsWidget) == 0x000008, "Wrong alignment on UFriendListContentsWidget");
static_assert(sizeof(UFriendListContentsWidget) == 0x0004F0, "Wrong size on UFriendListContentsWidget");
static_assert(offsetof(UFriendListContentsWidget, ListItemWidgetPadding) == 0x0003D8, "Member 'UFriendListContentsWidget::ListItemWidgetPadding' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, OnlineSettingListItemWidgetPadding) == 0x0003DC, "Member 'UFriendListContentsWidget::OnlineSettingListItemWidgetPadding' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, PfPlayerInfoCurrentPage) == 0x0003E0, "Member 'UFriendListContentsWidget::PfPlayerInfoCurrentPage' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, PfPlayerInfoMaxPage) == 0x0003E4, "Member 'UFriendListContentsWidget::PfPlayerInfoMaxPage' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, ListTitleWidgetArray) == 0x0003E8, "Member 'UFriendListContentsWidget::ListTitleWidgetArray' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, EmptyItemWidgetArray) == 0x0003F8, "Member 'UFriendListContentsWidget::EmptyItemWidgetArray' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, SubMenuWidget) == 0x000408, "Member 'UFriendListContentsWidget::SubMenuWidget' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, ConfirmWidget) == 0x000410, "Member 'UFriendListContentsWidget::ConfirmWidget' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, ConfirmAnimationWidget) == 0x000418, "Member 'UFriendListContentsWidget::ConfirmAnimationWidget' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, ResultWidget) == 0x000420, "Member 'UFriendListContentsWidget::ResultWidget' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, ListPlayerInfoArray) == 0x000428, "Member 'UFriendListContentsWidget::ListPlayerInfoArray' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, ListOnlineSettingInfoArray) == 0x000438, "Member 'UFriendListContentsWidget::ListOnlineSettingInfoArray' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, SearchPlayerData) == 0x000448, "Member 'UFriendListContentsWidget::SearchPlayerData' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, SearchLobbyIdData) == 0x000458, "Member 'UFriendListContentsWidget::SearchLobbyIdData' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, SubMenuCommand) == 0x000468, "Member 'UFriendListContentsWidget::SubMenuCommand' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, ConfirmWidgetCommandType) == 0x000478, "Member 'UFriendListContentsWidget::ConfirmWidgetCommandType' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, ConfirmWidgetCancelButtonIndex) == 0x00047C, "Member 'UFriendListContentsWidget::ConfirmWidgetCancelButtonIndex' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, ConfirmWidgetPfProfileButtonIndex) == 0x000480, "Member 'UFriendListContentsWidget::ConfirmWidgetPfProfileButtonIndex' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, ListTypeArray) == 0x000488, "Member 'UFriendListContentsWidget::ListTypeArray' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, SelectListIndex) == 0x000498, "Member 'UFriendListContentsWidget::SelectListIndex' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, SelectSubMenuIndex) == 0x00049C, "Member 'UFriendListContentsWidget::SelectSubMenuIndex' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, RequestTargetProductUserId) == 0x0004A0, "Member 'UFriendListContentsWidget::RequestTargetProductUserId' has a wrong offset!");
static_assert(offsetof(UFriendListContentsWidget, MainWidget) == 0x0004B0, "Member 'UFriendListContentsWidget::MainWidget' has a wrong offset!");

// Class UNION.CommonMenuPopupDonpaTicketUse
// 0x0008 (0x03F8 - 0x03F0)
class UCommonMenuPopupDonpaTicketUse : public UUnionUIPopupWindowBase
{
public:
	class UMachinePartsTicketNumber*              TicketNumberWidget;                                // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetNum(int32 InTicketNum, int32 InUseTicketNum);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuPopupDonpaTicketUse">();
	}
	static class UCommonMenuPopupDonpaTicketUse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuPopupDonpaTicketUse>();
	}
};
static_assert(alignof(UCommonMenuPopupDonpaTicketUse) == 0x000008, "Wrong alignment on UCommonMenuPopupDonpaTicketUse");
static_assert(sizeof(UCommonMenuPopupDonpaTicketUse) == 0x0003F8, "Wrong size on UCommonMenuPopupDonpaTicketUse");
static_assert(offsetof(UCommonMenuPopupDonpaTicketUse, TicketNumberWidget) == 0x0003F0, "Member 'UCommonMenuPopupDonpaTicketUse::TicketNumberWidget' has a wrong offset!");

// Class UNION.UnionPrimaryAssetLabel
// 0x0020 (0x0088 - 0x0068)
class UUnionPrimaryAssetLabel : public UPrimaryAssetLabel
{
public:
	TArray<struct FUnionPrimaryAssetLabelPathInfo> LabelAssetsInDirectoryPathList;                   // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                 IgnoreLabelAssetsInDirectoryPathList;              // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void Refresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionPrimaryAssetLabel">();
	}
	static class UUnionPrimaryAssetLabel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionPrimaryAssetLabel>();
	}
};
static_assert(alignof(UUnionPrimaryAssetLabel) == 0x000008, "Wrong alignment on UUnionPrimaryAssetLabel");
static_assert(sizeof(UUnionPrimaryAssetLabel) == 0x000088, "Wrong size on UUnionPrimaryAssetLabel");
static_assert(offsetof(UUnionPrimaryAssetLabel, LabelAssetsInDirectoryPathList) == 0x000068, "Member 'UUnionPrimaryAssetLabel::LabelAssetsInDirectoryPathList' has a wrong offset!");
static_assert(offsetof(UUnionPrimaryAssetLabel, IgnoreLabelAssetsInDirectoryPathList) == 0x000078, "Member 'UUnionPrimaryAssetLabel::IgnoreLabelAssetsInDirectoryPathList' has a wrong offset!");

// Class UNION.CommonMenuPopupSubBtnStandard
// 0x0008 (0x0488 - 0x0480)
class UCommonMenuPopupSubBtnStandard : public UUnionUIButtonBase
{
public:
	class UUnionRichTextBlock*                    TXT_Btn;                                           // 0x0480(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetButtonText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuPopupSubBtnStandard">();
	}
	static class UCommonMenuPopupSubBtnStandard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuPopupSubBtnStandard>();
	}
};
static_assert(alignof(UCommonMenuPopupSubBtnStandard) == 0x000008, "Wrong alignment on UCommonMenuPopupSubBtnStandard");
static_assert(sizeof(UCommonMenuPopupSubBtnStandard) == 0x000488, "Wrong size on UCommonMenuPopupSubBtnStandard");
static_assert(offsetof(UCommonMenuPopupSubBtnStandard, TXT_Btn) == 0x000480, "Member 'UCommonMenuPopupSubBtnStandard::TXT_Btn' has a wrong offset!");

// Class UNION.CommonMenuRuleTimeTableScene
// 0x0048 (0x0420 - 0x03D8)
class UCommonMenuRuleTimeTableScene : public UUnionUISceneBase
{
public:
	TArray<struct FDateTime>                      Time;                                              // 0x03D8(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EGroupRaceRule>                        GroupRaceRule;                                     // 0x03E8(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  IsEnd;                                             // 0x03F8(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  IsSpRule;                                          // 0x0408(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UOverlay*                               TimeTableOverlay;                                  // 0x0418(0x0008)(Edit, BlueprintVisible, ExportObject, EditFixedSize, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static int32 GetMaxIndex();

	void FixedRule(EGroupRaceRule InFixedRule);
	void OnInitialize();
	void SetTimeTable(int32 InTimetableIndex, const struct FDateTime& InTime, EGroupRaceRule InGroupRaceRule, bool InIsEnd, bool InIsSpRule);
	void SetVisibilityButtonIcon(ESlateVisibility InVisibility);
	void SetVisibilityOpenWidget(ESlateVisibility InVisibility);
	void SetVisibilityRankCalcWidget(ESlateVisibility InVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuRuleTimeTableScene">();
	}
	static class UCommonMenuRuleTimeTableScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuRuleTimeTableScene>();
	}
};
static_assert(alignof(UCommonMenuRuleTimeTableScene) == 0x000008, "Wrong alignment on UCommonMenuRuleTimeTableScene");
static_assert(sizeof(UCommonMenuRuleTimeTableScene) == 0x000420, "Wrong size on UCommonMenuRuleTimeTableScene");
static_assert(offsetof(UCommonMenuRuleTimeTableScene, Time) == 0x0003D8, "Member 'UCommonMenuRuleTimeTableScene::Time' has a wrong offset!");
static_assert(offsetof(UCommonMenuRuleTimeTableScene, GroupRaceRule) == 0x0003E8, "Member 'UCommonMenuRuleTimeTableScene::GroupRaceRule' has a wrong offset!");
static_assert(offsetof(UCommonMenuRuleTimeTableScene, IsEnd) == 0x0003F8, "Member 'UCommonMenuRuleTimeTableScene::IsEnd' has a wrong offset!");
static_assert(offsetof(UCommonMenuRuleTimeTableScene, IsSpRule) == 0x000408, "Member 'UCommonMenuRuleTimeTableScene::IsSpRule' has a wrong offset!");
static_assert(offsetof(UCommonMenuRuleTimeTableScene, TimeTableOverlay) == 0x000418, "Member 'UCommonMenuRuleTimeTableScene::TimeTableOverlay' has a wrong offset!");

// Class UNION.EquipmentGadgetIcon
// 0x01C8 (0x0648 - 0x0480)
class UEquipmentGadgetIcon : public UUnionUIButtonBase
{
public:
	EGadgetId                                     gadgetId;                                          // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMenuPlayerController;                             // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReadyWindow;                                      // 0x0482(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCustomizeWindow;                                  // 0x0483(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         BaseIconRefArray;                                  // 0x0488(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstance*>              BaseIconDefaultMaterialRefArray;                   // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstance*>              BaseIconGadgetKitMaterialRefArray;                 // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	class UImage*                                 GadgetImageRef;                                    // 0x04B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              GadgetImageOffsetCost1;                            // 0x04C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              GadgetImageOffsetCost2;                            // 0x04D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              GadgetImageOffsetCost3;                            // 0x04E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   GadgetNameEmpty;                                   // 0x04F0(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   GadgetNameLocked;                                  // 0x0500(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UCommonTextBalloon*                     GadgetNameRef;                                     // 0x0510(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              GadgetNameOffsetCost1;                             // 0x0518(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              GadgetNameOffsetCost2;                             // 0x0528(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              GadgetNameOffsetCost3;                             // 0x0538(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                GadgetCostRef;                                     // 0x0548(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 GadgetCostImageRef;                                // 0x0550(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 GadgetEquipablePlusRef;                            // 0x0558(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsLocked;                                         // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_561[0x7];                                      // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 GadgetLockImageRef;                                // 0x0568(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 GadgetNewImageRef;                                 // 0x0570(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 DisableGadgetList;                                 // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	class UImage*                                 DisableGadgetImageRef;                             // 0x0588(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                DisableGadgetImageCanvasPanelSlotCost1;            // 0x0590(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                DisableGadgetImageCanvasPanelSlotCost2;            // 0x05A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                DisableGadgetImageCanvasPanelSlotCost3;            // 0x05B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UImage*                                 GadgetSelectCursorRef;                             // 0x05C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                GadgetSelectCursorCanvasPanelSlotCost1;            // 0x05C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                GadgetSelectCursorCanvasPanelSlotCost2;            // 0x05D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                GadgetSelectCursorCanvasPanelSlotCost3;            // 0x05E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UWidget*                                GadgetSelectHexagonRef;                            // 0x05F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButton*                         MouseInteractionButtonRef;                         // 0x0600(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                MouseInteractionButtonCanvasPanelSlotCost1;        // 0x0608(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                MouseInteractionButtonCanvasPanelSlotCost2;        // 0x0618(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                MouseInteractionButtonCanvasPanelSlotCost3;        // 0x0628(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bShouldPlayDecisionSound;                          // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldPlayCancelSound;                            // 0x0639(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldPlayShoulderSound;                          // 0x063A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_63B[0x5];                                      // 0x063B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGadgetPlateWindow*                     OwnerGadgetPlateWindowRef;                         // 0x0640(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisabledGadgetSelectWidgets();
	void EnabledFocusInfo();
	void EnabledMouseInteraction(const bool InEnabled);
	class UGadgetPlateWindow* GetOwnerGadgetPlate();
	void NativeConstruct();
	void NativeOnInitialized();
	void OnConstDisableGadgetSetting();
	void OnConstInitBpWidgetRef();
	void OnConstMouseInteraction();
	void OnConstUseType();
	void PlaySoundOnAcceptKeyPressed();
	void PlaySoundOnBackPressed();
	void PlaySoundOnShoulderKeyPressed();
	void PlayUnselectedAnimation();
	void RegisterLastFocusIconToGadgetPlateWindow();
	void RegisterToPlayerController(const int32 InPlayerIndex);
	void SetDisableGadgetCanvasPanelSlotMargin(const int32 InGadgetCost);
	void SetDisableGadgetOverrideVisible(bool* OutVisible);
	void SetDisableGadgetVisible(const bool bInVisible);
	void SetEquipablePlusIconVisible(const bool bInVisible);
	void SetGadgetCostValue(const int32 InCost);
	void SetGadgetCostVisible(const bool bInVisible);
	void SetGadgetImageTexture(class UTexture2D* InTexturePtr);
	void SetGadgetImageTextureOffset(const int32 InGadgetCost);
	void SetGadgetNameText(const class FText& InText);
	void SetGadgetNameTextureOffset(const int32 InGadgetCost);
	void SetGadgetNameTextVisible(const bool bInVisible);
	void SetGadgetSelectCursorCanvasPanelSlotMargin(const int32 InGadgetCost);
	void SetGadgetSelectCursorColor(const int32 InPlayerIndex);
	void SetGadgetSelectCursorVisible(const bool bInVisible);
	void SetGadgetSelectHexagonVisible(const bool bInVisible);
	void SetIconBaseMaterial(const int32 InGadgetSizeX, const bool bIsGadgetKit);
	void SetIconBaseShape(const int32 InSizeX, const int32 InSizeY);
	void SetIconBaseVisible(const bool bInVisible);
	void SetLockVisible(const bool bInVisible);
	void SetMouseInteractionCanvasPanelSlotMargin(const int32 InGadgetCost);
	void SetNewIconVisible(const bool bInVisible);
	void SetOwnerGadgetPlate(class UGadgetPlateWindow* InGadgetPlatePtr);
	void SetShouldPlayCancelSound(const bool bInShouldPlay);
	void SetShouldPlayDecisionSound(const bool bInShouldPlay);
	void SetShouldPlayShoulderSound(const bool bInShouldPlay);
	void SetupToEmpty();
	void SetupToGadgetId(const EGadgetId InGadgetId, const bool bInSetShape);
	void SetupToLocked();
	void SetupToNone();
	void SoundPlayMenuCancel();
	void SoundPlayMenuError();
	void SoundPlayMenuFix();
	void SoundPlayMenuTab();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EquipmentGadgetIcon">();
	}
	static class UEquipmentGadgetIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEquipmentGadgetIcon>();
	}
};
static_assert(alignof(UEquipmentGadgetIcon) == 0x000008, "Wrong alignment on UEquipmentGadgetIcon");
static_assert(sizeof(UEquipmentGadgetIcon) == 0x000648, "Wrong size on UEquipmentGadgetIcon");
static_assert(offsetof(UEquipmentGadgetIcon, gadgetId) == 0x000480, "Member 'UEquipmentGadgetIcon::gadgetId' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, bMenuPlayerController) == 0x000481, "Member 'UEquipmentGadgetIcon::bMenuPlayerController' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, bReadyWindow) == 0x000482, "Member 'UEquipmentGadgetIcon::bReadyWindow' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, bCustomizeWindow) == 0x000483, "Member 'UEquipmentGadgetIcon::bCustomizeWindow' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, BaseIconRefArray) == 0x000488, "Member 'UEquipmentGadgetIcon::BaseIconRefArray' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, BaseIconDefaultMaterialRefArray) == 0x000498, "Member 'UEquipmentGadgetIcon::BaseIconDefaultMaterialRefArray' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, BaseIconGadgetKitMaterialRefArray) == 0x0004A8, "Member 'UEquipmentGadgetIcon::BaseIconGadgetKitMaterialRefArray' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetImageRef) == 0x0004B8, "Member 'UEquipmentGadgetIcon::GadgetImageRef' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetImageOffsetCost1) == 0x0004C0, "Member 'UEquipmentGadgetIcon::GadgetImageOffsetCost1' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetImageOffsetCost2) == 0x0004D0, "Member 'UEquipmentGadgetIcon::GadgetImageOffsetCost2' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetImageOffsetCost3) == 0x0004E0, "Member 'UEquipmentGadgetIcon::GadgetImageOffsetCost3' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetNameEmpty) == 0x0004F0, "Member 'UEquipmentGadgetIcon::GadgetNameEmpty' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetNameLocked) == 0x000500, "Member 'UEquipmentGadgetIcon::GadgetNameLocked' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetNameRef) == 0x000510, "Member 'UEquipmentGadgetIcon::GadgetNameRef' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetNameOffsetCost1) == 0x000518, "Member 'UEquipmentGadgetIcon::GadgetNameOffsetCost1' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetNameOffsetCost2) == 0x000528, "Member 'UEquipmentGadgetIcon::GadgetNameOffsetCost2' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetNameOffsetCost3) == 0x000538, "Member 'UEquipmentGadgetIcon::GadgetNameOffsetCost3' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetCostRef) == 0x000548, "Member 'UEquipmentGadgetIcon::GadgetCostRef' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetCostImageRef) == 0x000550, "Member 'UEquipmentGadgetIcon::GadgetCostImageRef' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetEquipablePlusRef) == 0x000558, "Member 'UEquipmentGadgetIcon::GadgetEquipablePlusRef' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, bIsLocked) == 0x000560, "Member 'UEquipmentGadgetIcon::bIsLocked' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetLockImageRef) == 0x000568, "Member 'UEquipmentGadgetIcon::GadgetLockImageRef' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetNewImageRef) == 0x000570, "Member 'UEquipmentGadgetIcon::GadgetNewImageRef' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, DisableGadgetList) == 0x000578, "Member 'UEquipmentGadgetIcon::DisableGadgetList' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, DisableGadgetImageRef) == 0x000588, "Member 'UEquipmentGadgetIcon::DisableGadgetImageRef' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, DisableGadgetImageCanvasPanelSlotCost1) == 0x000590, "Member 'UEquipmentGadgetIcon::DisableGadgetImageCanvasPanelSlotCost1' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, DisableGadgetImageCanvasPanelSlotCost2) == 0x0005A0, "Member 'UEquipmentGadgetIcon::DisableGadgetImageCanvasPanelSlotCost2' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, DisableGadgetImageCanvasPanelSlotCost3) == 0x0005B0, "Member 'UEquipmentGadgetIcon::DisableGadgetImageCanvasPanelSlotCost3' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetSelectCursorRef) == 0x0005C0, "Member 'UEquipmentGadgetIcon::GadgetSelectCursorRef' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetSelectCursorCanvasPanelSlotCost1) == 0x0005C8, "Member 'UEquipmentGadgetIcon::GadgetSelectCursorCanvasPanelSlotCost1' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetSelectCursorCanvasPanelSlotCost2) == 0x0005D8, "Member 'UEquipmentGadgetIcon::GadgetSelectCursorCanvasPanelSlotCost2' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetSelectCursorCanvasPanelSlotCost3) == 0x0005E8, "Member 'UEquipmentGadgetIcon::GadgetSelectCursorCanvasPanelSlotCost3' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, GadgetSelectHexagonRef) == 0x0005F8, "Member 'UEquipmentGadgetIcon::GadgetSelectHexagonRef' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, MouseInteractionButtonRef) == 0x000600, "Member 'UEquipmentGadgetIcon::MouseInteractionButtonRef' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, MouseInteractionButtonCanvasPanelSlotCost1) == 0x000608, "Member 'UEquipmentGadgetIcon::MouseInteractionButtonCanvasPanelSlotCost1' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, MouseInteractionButtonCanvasPanelSlotCost2) == 0x000618, "Member 'UEquipmentGadgetIcon::MouseInteractionButtonCanvasPanelSlotCost2' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, MouseInteractionButtonCanvasPanelSlotCost3) == 0x000628, "Member 'UEquipmentGadgetIcon::MouseInteractionButtonCanvasPanelSlotCost3' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, bShouldPlayDecisionSound) == 0x000638, "Member 'UEquipmentGadgetIcon::bShouldPlayDecisionSound' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, bShouldPlayCancelSound) == 0x000639, "Member 'UEquipmentGadgetIcon::bShouldPlayCancelSound' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, bShouldPlayShoulderSound) == 0x00063A, "Member 'UEquipmentGadgetIcon::bShouldPlayShoulderSound' has a wrong offset!");
static_assert(offsetof(UEquipmentGadgetIcon, OwnerGadgetPlateWindowRef) == 0x000640, "Member 'UEquipmentGadgetIcon::OwnerGadgetPlateWindowRef' has a wrong offset!");

// Class UNION.UnionMenuCheatManager
// 0x0010 (0x0098 - 0x0088)
class UUnionMenuCheatManager final : public UCheatManager
{
public:
	TArray<class UObject*>                        CheatObjects;                                      // 0x0088(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionMenuCheatManager">();
	}
	static class UUnionMenuCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionMenuCheatManager>();
	}
};
static_assert(alignof(UUnionMenuCheatManager) == 0x000008, "Wrong alignment on UUnionMenuCheatManager");
static_assert(sizeof(UUnionMenuCheatManager) == 0x000098, "Wrong size on UUnionMenuCheatManager");
static_assert(offsetof(UUnionMenuCheatManager, CheatObjects) == 0x000088, "Member 'UUnionMenuCheatManager::CheatObjects' has a wrong offset!");

// Class UNION.CommonMenuSubBtnMode
// 0x0040 (0x04C0 - 0x0480)
class UCommonMenuSubBtnMode final : public UUnionUIButtonBase
{
public:
	ECommonMenuButtonType                         BeltButtonType;                                    // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Btn_Active_Loop;                                   // 0x0488(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_Loop;                                   // 0x0490(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Active_to_Select;                              // 0x0498(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_to_Active;                              // 0x04A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_to_Player;                              // 0x04A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Player_to_Select;                              // 0x04B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_Out;                                    // 0x04B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitializeSubBtnMode();
	void SetIcon(ECommonMenuButtonType Type);
	void SetModeText(const class FText& InText);
	void SetNavigationButton(class UWidget* PrevButton, class UWidget* NextButton);
	void Update();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuSubBtnMode">();
	}
	static class UCommonMenuSubBtnMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuSubBtnMode>();
	}
};
static_assert(alignof(UCommonMenuSubBtnMode) == 0x000008, "Wrong alignment on UCommonMenuSubBtnMode");
static_assert(sizeof(UCommonMenuSubBtnMode) == 0x0004C0, "Wrong size on UCommonMenuSubBtnMode");
static_assert(offsetof(UCommonMenuSubBtnMode, BeltButtonType) == 0x000480, "Member 'UCommonMenuSubBtnMode::BeltButtonType' has a wrong offset!");
static_assert(offsetof(UCommonMenuSubBtnMode, Btn_Active_Loop) == 0x000488, "Member 'UCommonMenuSubBtnMode::Btn_Active_Loop' has a wrong offset!");
static_assert(offsetof(UCommonMenuSubBtnMode, Btn_Select_Loop) == 0x000490, "Member 'UCommonMenuSubBtnMode::Btn_Select_Loop' has a wrong offset!");
static_assert(offsetof(UCommonMenuSubBtnMode, Btn_Active_to_Select) == 0x000498, "Member 'UCommonMenuSubBtnMode::Btn_Active_to_Select' has a wrong offset!");
static_assert(offsetof(UCommonMenuSubBtnMode, Btn_Select_to_Active) == 0x0004A0, "Member 'UCommonMenuSubBtnMode::Btn_Select_to_Active' has a wrong offset!");
static_assert(offsetof(UCommonMenuSubBtnMode, Btn_Select_to_Player) == 0x0004A8, "Member 'UCommonMenuSubBtnMode::Btn_Select_to_Player' has a wrong offset!");
static_assert(offsetof(UCommonMenuSubBtnMode, Btn_Player_to_Select) == 0x0004B0, "Member 'UCommonMenuSubBtnMode::Btn_Player_to_Select' has a wrong offset!");
static_assert(offsetof(UCommonMenuSubBtnMode, Btn_Select_Out) == 0x0004B8, "Member 'UCommonMenuSubBtnMode::Btn_Select_Out' has a wrong offset!");

// Class UNION.GadgetCustomizeChangeConfirmState
// 0x0000 (0x00F8 - 0x00F8)
class UGadgetCustomizeChangeConfirmState final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomizeChangeConfirmState">();
	}
	static class UGadgetCustomizeChangeConfirmState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomizeChangeConfirmState>();
	}
};
static_assert(alignof(UGadgetCustomizeChangeConfirmState) == 0x000008, "Wrong alignment on UGadgetCustomizeChangeConfirmState");
static_assert(sizeof(UGadgetCustomizeChangeConfirmState) == 0x0000F8, "Wrong size on UGadgetCustomizeChangeConfirmState");

// Class UNION.CommonMenuSubMenu
// 0x0030 (0x0408 - 0x03D8)
class UCommonMenuSubMenu : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(class UUnionUIButtonBase* Button)> OnFocusEvent;                   // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<class UCommonMenuButtonBase*>          ButtonArr;                                         // 0x03E8(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UUnionUIButtonBase*                     RightFocusButton;                                  // 0x03F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionUIButtonBase*                     LeftFocusButton;                                   // 0x0400(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitializeCommonMenuSubMenu(const TArray<ECommonMenuButtonType>& InButtonArr);
	void RefreshSubMenuZOrder();
	void SetEnableSubMenu(ECommonMenuButtonType InType, bool InEnable);
	void SetLastFocusButtonFocusSoundEnable(bool bEnable);
	void SetNavigationLeftAndRight();
	void SetupCommonMenuSubMenu();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuSubMenu">();
	}
	static class UCommonMenuSubMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuSubMenu>();
	}
};
static_assert(alignof(UCommonMenuSubMenu) == 0x000008, "Wrong alignment on UCommonMenuSubMenu");
static_assert(sizeof(UCommonMenuSubMenu) == 0x000408, "Wrong size on UCommonMenuSubMenu");
static_assert(offsetof(UCommonMenuSubMenu, OnFocusEvent) == 0x0003D8, "Member 'UCommonMenuSubMenu::OnFocusEvent' has a wrong offset!");
static_assert(offsetof(UCommonMenuSubMenu, ButtonArr) == 0x0003E8, "Member 'UCommonMenuSubMenu::ButtonArr' has a wrong offset!");
static_assert(offsetof(UCommonMenuSubMenu, RightFocusButton) == 0x0003F8, "Member 'UCommonMenuSubMenu::RightFocusButton' has a wrong offset!");
static_assert(offsetof(UCommonMenuSubMenu, LeftFocusButton) == 0x000400, "Member 'UCommonMenuSubMenu::LeftFocusButton' has a wrong offset!");

// Class UNION.TitleSequence
// 0x0038 (0x03A0 - 0x0368)
class ATitleSequence : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AMenuSequence*                          MenuSequence;                                      // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuInputRecieveObject*                MenuInputReceiveObject;                            // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTitleDebugCommand*                     DebugCommand;                                      // 0x0380(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMilestoneSpecificTitleDebugCommand*    MilestoneSpecificDebugCommand;                     // 0x0388(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFullGameStoreDialogActor*              FullGameStorePopup;                                // 0x0390(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindMenuInputReceive();
	void DecisionStoreEvent(bool IsAccept);
	ETitleSequenceState GetCurrentTitleState();
	TSoftObjectPtr<class UTexture2D> GetStrapTexture();
	void OnAcceptKeyPressedTitle(class UObject* Object);
	void OnBackKeyPressedTitle(class UObject* Object);
	void OnExitStateCheckDefaultSaveDataForRom();
	void OnExitStateConvertSaveData();
	void OnExitStateConvertSaveDataForDemo();
	void OnExitStateCreateAndLoadSaveData();
	void OnExitStateDetachUnavailableContent();
	void OnExitStateFinishedAdvertiseLogoFlow();
	void OnFaceButtonLeftPressedTitle(class UObject* Object);
	void OnFaceButtonTopPressedTitle(class UObject* Object);
	void OnInitStateAgreement();
	void OnInitStateAutoSaveInformation();
	void OnInitStateCheckDefaultSaveDataForRom();
	void OnInitStateCheckPlatformPrivilege();
	void OnInitStateConvertSaveData();
	void OnInitStateConvertSaveDataForDemo();
	void OnInitStateCreateAndLoadSaveData();
	void OnInitStateDetachUnavailableContent();
	void OnInitStateExit();
	void OnInitStateFinishedAdvertiseLogoFlow();
	void OnInitStateLicense();
	void OnInitStateLogos();
	void OnInitStateMovie();
	void OnInitStateStore();
	void OnInitStateTitleTop();
	void OnInitStateWarning();
	void OnUpdateStateCheckDefaultSaveDataForRom(float DeltaTime);
	void OnUpdateStateConvertSaveData(float DeltaTime);
	void OnUpdateStateConvertSaveDataForDemo(float DeltaTime);
	void OnUpdateStateDetachUnavailableContent(float DeltaTime);
	void OnUpdateStateFinishedAdvertiseLogoFlow(float DeltaTime);
	void OnUpdateStateTitleTop(float DeltaTime);
	void SetNextTitleSequenceState(ETitleSequenceState InState);
	void UnBindMenuInputReceive();

	ETitleSequenceState GetExitSequence() const;
	bool IsValidSaveDataAppRomVersion() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TitleSequence">();
	}
	static class ATitleSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATitleSequence>();
	}
};
static_assert(alignof(ATitleSequence) == 0x000008, "Wrong alignment on ATitleSequence");
static_assert(sizeof(ATitleSequence) == 0x0003A0, "Wrong size on ATitleSequence");
static_assert(offsetof(ATitleSequence, MenuSequence) == 0x000370, "Member 'ATitleSequence::MenuSequence' has a wrong offset!");
static_assert(offsetof(ATitleSequence, MenuInputReceiveObject) == 0x000378, "Member 'ATitleSequence::MenuInputReceiveObject' has a wrong offset!");
static_assert(offsetof(ATitleSequence, DebugCommand) == 0x000380, "Member 'ATitleSequence::DebugCommand' has a wrong offset!");
static_assert(offsetof(ATitleSequence, MilestoneSpecificDebugCommand) == 0x000388, "Member 'ATitleSequence::MilestoneSpecificDebugCommand' has a wrong offset!");
static_assert(offsetof(ATitleSequence, FullGameStorePopup) == 0x000390, "Member 'ATitleSequence::FullGameStorePopup' has a wrong offset!");

// Class UNION.CommonMenuSubMenuButton
// 0x0008 (0x04D0 - 0x04C8)
class UCommonMenuSubMenuButton : public UCommonMenuButtonBase
{
public:
	bool                                          bIsEnableCancelSE;                                 // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeNewIcon();
	void OnChangeSpIcon(bool bIsSpIconVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMenuSubMenuButton">();
	}
	static class UCommonMenuSubMenuButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMenuSubMenuButton>();
	}
};
static_assert(alignof(UCommonMenuSubMenuButton) == 0x000008, "Wrong alignment on UCommonMenuSubMenuButton");
static_assert(sizeof(UCommonMenuSubMenuButton) == 0x0004D0, "Wrong size on UCommonMenuSubMenuButton");
static_assert(offsetof(UCommonMenuSubMenuButton, bIsEnableCancelSE) == 0x0004C8, "Member 'UCommonMenuSubMenuButton::bIsEnableCancelSE' has a wrong offset!");

// Class UNION.CommonMessageBar
// 0x0020 (0x0300 - 0x02E0)
class UCommonMessageBar : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnInAnimFinished;                                  // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOutAnimFinished;                                 // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void PlayInAnim();
	void PlayOutAnim();
	void SetText(const class FText& InText);
	void SetupDisableGadgetMessage();
	void SetWaitingTextVisible(bool bInIsVisible);
	void SetWarningIconVisible(bool bInIsVisible);
	void SetWidgetSwitcherActiveWidgetIndex(int32 Index_0);
	void StartWaitingText();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonMessageBar">();
	}
	static class UCommonMessageBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonMessageBar>();
	}
};
static_assert(alignof(UCommonMessageBar) == 0x000008, "Wrong alignment on UCommonMessageBar");
static_assert(sizeof(UCommonMessageBar) == 0x000300, "Wrong size on UCommonMessageBar");
static_assert(offsetof(UCommonMessageBar, OnInAnimFinished) == 0x0002E0, "Member 'UCommonMessageBar::OnInAnimFinished' has a wrong offset!");
static_assert(offsetof(UCommonMessageBar, OnOutAnimFinished) == 0x0002F0, "Member 'UCommonMessageBar::OnOutAnimFinished' has a wrong offset!");

// Class UNION.EventInfoManageActor
// 0x0028 (0x02B8 - 0x0290)
class AEventInfoManageActor : public AActor
{
public:
	EEventInfoPeriodType                          DisplayType;                                       // 0x0290(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFestaInfoWidgetBase*                   FestaInfoWidget;                                   // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsValidRewardData;                                 // 0x02A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFestaPointRewardUIData>        PointRewardData;                                   // 0x02A8(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void Close();
	void Open();
	void SetupFestaInfo();
	void SetupLegendCompeInfo();
	void SetupWorldMatchInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventInfoManageActor">();
	}
	static class AEventInfoManageActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEventInfoManageActor>();
	}
};
static_assert(alignof(AEventInfoManageActor) == 0x000008, "Wrong alignment on AEventInfoManageActor");
static_assert(sizeof(AEventInfoManageActor) == 0x0002B8, "Wrong size on AEventInfoManageActor");
static_assert(offsetof(AEventInfoManageActor, DisplayType) == 0x000290, "Member 'AEventInfoManageActor::DisplayType' has a wrong offset!");
static_assert(offsetof(AEventInfoManageActor, FestaInfoWidget) == 0x000298, "Member 'AEventInfoManageActor::FestaInfoWidget' has a wrong offset!");
static_assert(offsetof(AEventInfoManageActor, IsValidRewardData) == 0x0002A0, "Member 'AEventInfoManageActor::IsValidRewardData' has a wrong offset!");
static_assert(offsetof(AEventInfoManageActor, PointRewardData) == 0x0002A8, "Member 'AEventInfoManageActor::PointRewardData' has a wrong offset!");

// Class UNION.RankMatchMatchmakingContext
// 0x0000 (0x0270 - 0x0270)
class URankMatchMatchmakingContext final : public UCommonMatchmakingContext
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RankMatchMatchmakingContext">();
	}
	static class URankMatchMatchmakingContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<URankMatchMatchmakingContext>();
	}
};
static_assert(alignof(URankMatchMatchmakingContext) == 0x000008, "Wrong alignment on URankMatchMatchmakingContext");
static_assert(sizeof(URankMatchMatchmakingContext) == 0x000270, "Wrong size on URankMatchMatchmakingContext");

// Class UNION.CommonNoticeSubsystem
// 0x0048 (0x0088 - 0x0040)
class UCommonNoticeSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UChallengeNoticeWindow*                 ChallengeWindow;                                   // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStreamingInstallNotice*                StreamingInstallNotice;                            // 0x0058(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            FullScreenMouseClickWidget;                        // 0x0060(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x10];                                      // 0x0068(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UStreamingInstallNotice*                DeviceDisconnectedNotice;                          // 0x0078(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddChallengeNotice(int32 ChallengeId, float Time);
	void OnDeviceConnectedEvent(bool IsConnected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonNoticeSubsystem">();
	}
	static class UCommonNoticeSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonNoticeSubsystem>();
	}
};
static_assert(alignof(UCommonNoticeSubsystem) == 0x000008, "Wrong alignment on UCommonNoticeSubsystem");
static_assert(sizeof(UCommonNoticeSubsystem) == 0x000088, "Wrong size on UCommonNoticeSubsystem");
static_assert(offsetof(UCommonNoticeSubsystem, ChallengeWindow) == 0x000050, "Member 'UCommonNoticeSubsystem::ChallengeWindow' has a wrong offset!");
static_assert(offsetof(UCommonNoticeSubsystem, StreamingInstallNotice) == 0x000058, "Member 'UCommonNoticeSubsystem::StreamingInstallNotice' has a wrong offset!");
static_assert(offsetof(UCommonNoticeSubsystem, FullScreenMouseClickWidget) == 0x000060, "Member 'UCommonNoticeSubsystem::FullScreenMouseClickWidget' has a wrong offset!");
static_assert(offsetof(UCommonNoticeSubsystem, DeviceDisconnectedNotice) == 0x000078, "Member 'UCommonNoticeSubsystem::DeviceDisconnectedNotice' has a wrong offset!");

// Class UNION.FriendMatchLobbyContext
// 0x0018 (0x0548 - 0x0530)
class UFriendMatchLobbyContext final : public UCustomMatchLobbyContext
{
public:
	uint8                                         Pad_530[0x18];                                     // 0x0530(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnKickBlockMemberComplete(bool bSuccessful, const struct FLobbyOperationResult& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendMatchLobbyContext">();
	}
	static class UFriendMatchLobbyContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendMatchLobbyContext>();
	}
};
static_assert(alignof(UFriendMatchLobbyContext) == 0x000008, "Wrong alignment on UFriendMatchLobbyContext");
static_assert(sizeof(UFriendMatchLobbyContext) == 0x000548, "Wrong size on UFriendMatchLobbyContext");

// Class UNION.CommonPlayerNumber
// 0x0030 (0x0310 - 0x02E0)
class UCommonPlayerNumber : public UUserWidget
{
public:
	int32                                         Player_Number_Index;                               // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   BGColor;                                           // 0x02E8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UImage*                                 MLC_ColorBase;                                     // 0x02F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_PlayerNumber;                                  // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBGColorInfo(int32 InIndex, bool IsGroup, bool IsLocalMulti);
	void SetPlayerIndexCustom(int32 InIndex, bool IsLock);
	void SetPlayerNumberText();

	const struct FLinearColor GetBGColor(int32 InIndex) const;
	int32 GetPlayerIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonPlayerNumber">();
	}
	static class UCommonPlayerNumber* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonPlayerNumber>();
	}
};
static_assert(alignof(UCommonPlayerNumber) == 0x000008, "Wrong alignment on UCommonPlayerNumber");
static_assert(sizeof(UCommonPlayerNumber) == 0x000310, "Wrong size on UCommonPlayerNumber");
static_assert(offsetof(UCommonPlayerNumber, Player_Number_Index) == 0x0002E0, "Member 'UCommonPlayerNumber::Player_Number_Index' has a wrong offset!");
static_assert(offsetof(UCommonPlayerNumber, BGColor) == 0x0002E8, "Member 'UCommonPlayerNumber::BGColor' has a wrong offset!");
static_assert(offsetof(UCommonPlayerNumber, MLC_ColorBase) == 0x0002F8, "Member 'UCommonPlayerNumber::MLC_ColorBase' has a wrong offset!");
static_assert(offsetof(UCommonPlayerNumber, TXT_PlayerNumber) == 0x000300, "Member 'UCommonPlayerNumber::TXT_PlayerNumber' has a wrong offset!");

// Class UNION.SceneInputKeyHandler
// 0x0020 (0x02B0 - 0x0290)
class ASceneInputKeyHandler final : public AActor
{
public:
	TMulticastInlineDelegate<void(const struct FKey& PressedKey)> OnKeyPressed;                      // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMouseClicked;                                    // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void HandleInputKey(const struct FKey& Key);
	void HandleMouseClick();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SceneInputKeyHandler">();
	}
	static class ASceneInputKeyHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASceneInputKeyHandler>();
	}
};
static_assert(alignof(ASceneInputKeyHandler) == 0x000008, "Wrong alignment on ASceneInputKeyHandler");
static_assert(sizeof(ASceneInputKeyHandler) == 0x0002B0, "Wrong size on ASceneInputKeyHandler");
static_assert(offsetof(ASceneInputKeyHandler, OnKeyPressed) == 0x000290, "Member 'ASceneInputKeyHandler::OnKeyPressed' has a wrong offset!");
static_assert(offsetof(ASceneInputKeyHandler, OnMouseClicked) == 0x0002A0, "Member 'ASceneInputKeyHandler::OnMouseClicked' has a wrong offset!");

// Class UNION.CommonRaceMenuButtonBase
// 0x0060 (0x04E0 - 0x0480)
class UCommonRaceMenuButtonBase : public UUnionUIButtonBase
{
public:
	class USoundAtomCue*                          AcceptSE;                                          // 0x0480(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          CancelSE;                                          // 0x0488(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          ErrorSE;                                           // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          SelectSE;                                          // 0x0498(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A0[0x40];                                     // 0x04A0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnContentSet();
	void OnFocusBegin(const struct FFocusEvent& InFocusEvent);
	void OnFocusEnd(const struct FFocusEvent& InFocusEvent);
	void SetNewIconVisible(bool bVisible);
	void SetupContent(EGameModeId InGameModeId, const struct FCommonRaceMenuContentRow& InContentDef);

	bool DoesNeedToPopupWarning() const;
	const struct FCommonRaceMenuContentRow GetContentDef() const;
	ECommonRaceMenuContentId GetContentId() const;
	EGameModeId GetGameModeId() const;
	ECommonRaceMenuIconId GetIconId() const;
	int32 GetIconIdAsInteger() const;
	const class FText GetPopupWarningMessage() const;
	const class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonRaceMenuButtonBase">();
	}
	static class UCommonRaceMenuButtonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonRaceMenuButtonBase>();
	}
};
static_assert(alignof(UCommonRaceMenuButtonBase) == 0x000008, "Wrong alignment on UCommonRaceMenuButtonBase");
static_assert(sizeof(UCommonRaceMenuButtonBase) == 0x0004E0, "Wrong size on UCommonRaceMenuButtonBase");
static_assert(offsetof(UCommonRaceMenuButtonBase, AcceptSE) == 0x000480, "Member 'UCommonRaceMenuButtonBase::AcceptSE' has a wrong offset!");
static_assert(offsetof(UCommonRaceMenuButtonBase, CancelSE) == 0x000488, "Member 'UCommonRaceMenuButtonBase::CancelSE' has a wrong offset!");
static_assert(offsetof(UCommonRaceMenuButtonBase, ErrorSE) == 0x000490, "Member 'UCommonRaceMenuButtonBase::ErrorSE' has a wrong offset!");
static_assert(offsetof(UCommonRaceMenuButtonBase, SelectSE) == 0x000498, "Member 'UCommonRaceMenuButtonBase::SelectSE' has a wrong offset!");

// Class UNION.CommonRaceMenuContentsInfo
// 0x0018 (0x0040 - 0x0028)
class UCommonRaceMenuContentsInfo final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const struct FCommonRaceMenuContentRow GetContent(int32 InIndex, bool* bOutSuccess) const;
	const TArray<struct FCommonRaceMenuContentRow> GetContents() const;
	EGameModeId GetGameMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonRaceMenuContentsInfo">();
	}
	static class UCommonRaceMenuContentsInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonRaceMenuContentsInfo>();
	}
};
static_assert(alignof(UCommonRaceMenuContentsInfo) == 0x000008, "Wrong alignment on UCommonRaceMenuContentsInfo");
static_assert(sizeof(UCommonRaceMenuContentsInfo) == 0x000040, "Wrong size on UCommonRaceMenuContentsInfo");

// Class UNION.TopMenuGameModeButton
// 0x0008 (0x04D0 - 0x04C8)
class UTopMenuGameModeButton : public UCommonMenuButtonBase
{
public:
	ETopMenuGameMode                              TopMenuGameMode;                                   // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TopMenuGameModeButton">();
	}
	static class UTopMenuGameModeButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTopMenuGameModeButton>();
	}
};
static_assert(alignof(UTopMenuGameModeButton) == 0x000008, "Wrong alignment on UTopMenuGameModeButton");
static_assert(sizeof(UTopMenuGameModeButton) == 0x0004D0, "Wrong size on UTopMenuGameModeButton");
static_assert(offsetof(UTopMenuGameModeButton, TopMenuGameMode) == 0x0004C8, "Member 'UTopMenuGameModeButton::TopMenuGameMode' has a wrong offset!");

// Class UNION.CommonRivalLevelContentWidget
// 0x0010 (0x02F0 - 0x02E0)
class UCommonRivalLevelContentWidget : public UUserWidget
{
public:
	class UHorizontalBox*                         HBIcon;                                            // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Content_Icon_DSP;                                  // 0x02E8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void PlayAnimIcons(int32 InIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonRivalLevelContentWidget">();
	}
	static class UCommonRivalLevelContentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonRivalLevelContentWidget>();
	}
};
static_assert(alignof(UCommonRivalLevelContentWidget) == 0x000008, "Wrong alignment on UCommonRivalLevelContentWidget");
static_assert(sizeof(UCommonRivalLevelContentWidget) == 0x0002F0, "Wrong size on UCommonRivalLevelContentWidget");
static_assert(offsetof(UCommonRivalLevelContentWidget, HBIcon) == 0x0002E0, "Member 'UCommonRivalLevelContentWidget::HBIcon' has a wrong offset!");
static_assert(offsetof(UCommonRivalLevelContentWidget, Content_Icon_DSP) == 0x0002E8, "Member 'UCommonRivalLevelContentWidget::Content_Icon_DSP' has a wrong offset!");

// Class UNION.CommonRivalRewardLineWidget
// 0x0050 (0x0340 - 0x02F0)
class UCommonRivalRewardLineWidget final : public UCommonUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnPlayCountUpFinishedEvent;                        // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayOpenNextFinishedEvent;                       // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         HorizontalBox;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Line_Get_01;                                   // 0x0318(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Line_Get_02;                                   // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_328[0x18];                                     // 0x0328(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayCountUp();
	void PlayOpenNext();
	void Setup(ERivalTeamId InTeamID);
	void SetWinCount(int32 Value);

	int32 GetNecessaryWinCounts(int32 InIndex) const;
	int32 GetOngoingRewardIndex() const;
	int32 GetWinCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonRivalRewardLineWidget">();
	}
	static class UCommonRivalRewardLineWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonRivalRewardLineWidget>();
	}
};
static_assert(alignof(UCommonRivalRewardLineWidget) == 0x000008, "Wrong alignment on UCommonRivalRewardLineWidget");
static_assert(sizeof(UCommonRivalRewardLineWidget) == 0x000340, "Wrong size on UCommonRivalRewardLineWidget");
static_assert(offsetof(UCommonRivalRewardLineWidget, OnPlayCountUpFinishedEvent) == 0x0002F0, "Member 'UCommonRivalRewardLineWidget::OnPlayCountUpFinishedEvent' has a wrong offset!");
static_assert(offsetof(UCommonRivalRewardLineWidget, OnPlayOpenNextFinishedEvent) == 0x000300, "Member 'UCommonRivalRewardLineWidget::OnPlayOpenNextFinishedEvent' has a wrong offset!");
static_assert(offsetof(UCommonRivalRewardLineWidget, HorizontalBox) == 0x000310, "Member 'UCommonRivalRewardLineWidget::HorizontalBox' has a wrong offset!");
static_assert(offsetof(UCommonRivalRewardLineWidget, DSP_Line_Get_01) == 0x000318, "Member 'UCommonRivalRewardLineWidget::DSP_Line_Get_01' has a wrong offset!");
static_assert(offsetof(UCommonRivalRewardLineWidget, DSP_Line_Get_02) == 0x000320, "Member 'UCommonRivalRewardLineWidget::DSP_Line_Get_02' has a wrong offset!");

// Class UNION.CommonScrollPointBox
// 0x0028 (0x0308 - 0x02E0)
class UCommonScrollPointBox : public UUserWidget
{
public:
	bool                                          bDoInitResize;                                     // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      SnapPointMaterial;                                 // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         ItemBox;                                           // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F8[0x10];                                     // 0x02F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Resize(const int32 InNewSize);
	void SetImage(const int32 InChildIndex, const float InValue);
	void SetItemIconIndex(int32 InItemIndex, EScrollPointBoxItemIconIndex InIconIndex);
	void SetItemIconIndexByPlayerIndex(int32 InItemIndex, int32 InPlayerIndex);
	void Setup();
	void SetupByItemNum(int32 InItemNum);

	bool DoInitResize() const;
	void GetItems(TArray<class UImage*>* OutItems) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonScrollPointBox">();
	}
	static class UCommonScrollPointBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonScrollPointBox>();
	}
};
static_assert(alignof(UCommonScrollPointBox) == 0x000008, "Wrong alignment on UCommonScrollPointBox");
static_assert(sizeof(UCommonScrollPointBox) == 0x000308, "Wrong size on UCommonScrollPointBox");
static_assert(offsetof(UCommonScrollPointBox, bDoInitResize) == 0x0002E0, "Member 'UCommonScrollPointBox::bDoInitResize' has a wrong offset!");
static_assert(offsetof(UCommonScrollPointBox, SnapPointMaterial) == 0x0002E8, "Member 'UCommonScrollPointBox::SnapPointMaterial' has a wrong offset!");
static_assert(offsetof(UCommonScrollPointBox, ItemBox) == 0x0002F0, "Member 'UCommonScrollPointBox::ItemBox' has a wrong offset!");

// Class UNION.CommonSnapPoint
// 0x0010 (0x0300 - 0x02F0)
class UCommonSnapPoint : public UCommonUserWidget
{
public:
	float                                         SnapPointValue;                                    // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 SnapPointImageRef;                                 // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void NativeConstruct();
	void NativeOnInitialized();
	void NativePreConstruct();
	void OnInitSnapPointImage();
	void SetSnapPointImage(const float InValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonSnapPoint">();
	}
	static class UCommonSnapPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonSnapPoint>();
	}
};
static_assert(alignof(UCommonSnapPoint) == 0x000008, "Wrong alignment on UCommonSnapPoint");
static_assert(sizeof(UCommonSnapPoint) == 0x000300, "Wrong size on UCommonSnapPoint");
static_assert(offsetof(UCommonSnapPoint, SnapPointValue) == 0x0002F0, "Member 'UCommonSnapPoint::SnapPointValue' has a wrong offset!");
static_assert(offsetof(UCommonSnapPoint, SnapPointImageRef) == 0x0002F8, "Member 'UCommonSnapPoint::SnapPointImageRef' has a wrong offset!");

// Class UNION.StoreBalloon
// 0x0020 (0x0328 - 0x0308)
class UStoreBalloon : public UCommonButtonTextBalloon
{
public:
	class UWidgetSwitcher*                        WidgetSwitcher_Arrow;                              // 0x0308(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FText>                           TextList;                                          // 0x0310(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         ButtonIndex;                                       // 0x0320(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUIButtonIconType                             ButtonIconType;                                    // 0x0324(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreBalloon">();
	}
	static class UStoreBalloon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreBalloon>();
	}
};
static_assert(alignof(UStoreBalloon) == 0x000008, "Wrong alignment on UStoreBalloon");
static_assert(sizeof(UStoreBalloon) == 0x000328, "Wrong size on UStoreBalloon");
static_assert(offsetof(UStoreBalloon, WidgetSwitcher_Arrow) == 0x000308, "Member 'UStoreBalloon::WidgetSwitcher_Arrow' has a wrong offset!");
static_assert(offsetof(UStoreBalloon, TextList) == 0x000310, "Member 'UStoreBalloon::TextList' has a wrong offset!");
static_assert(offsetof(UStoreBalloon, ButtonIndex) == 0x000320, "Member 'UStoreBalloon::ButtonIndex' has a wrong offset!");
static_assert(offsetof(UStoreBalloon, ButtonIconType) == 0x000324, "Member 'UStoreBalloon::ButtonIconType' has a wrong offset!");

// Class UNION.CommonUIControllerWrapper
// 0x0020 (0x0300 - 0x02E0)
class UCommonUIControllerWrapper : public UUserWidget
{
public:
	class UOverlay*                               Overlay;                                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_PC;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URaceUITutorialControllerKey*           WBP_Tutorial_Controller_Key;                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateHintID(EHintId InHintId, bool bIsKeyboard);
	void CreateTutorialAction(ETutorialAction InTutorialAction);
	void SetDeviceView(bool bIsGamePad);
	void SetViewTableIndex(int32 InViewTableIndex, bool bIsHint);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUIControllerWrapper">();
	}
	static class UCommonUIControllerWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUIControllerWrapper>();
	}
};
static_assert(alignof(UCommonUIControllerWrapper) == 0x000008, "Wrong alignment on UCommonUIControllerWrapper");
static_assert(sizeof(UCommonUIControllerWrapper) == 0x000300, "Wrong size on UCommonUIControllerWrapper");
static_assert(offsetof(UCommonUIControllerWrapper, Overlay) == 0x0002E0, "Member 'UCommonUIControllerWrapper::Overlay' has a wrong offset!");
static_assert(offsetof(UCommonUIControllerWrapper, WidgetSwitcher_PC) == 0x0002E8, "Member 'UCommonUIControllerWrapper::WidgetSwitcher_PC' has a wrong offset!");
static_assert(offsetof(UCommonUIControllerWrapper, WBP_Tutorial_Controller_Key) == 0x0002F0, "Member 'UCommonUIControllerWrapper::WBP_Tutorial_Controller_Key' has a wrong offset!");

// Class UNION.ContentsItemInterface
// 0x0000 (0x0000 - 0x0000)
class IContentsItemInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ContentsItemInterface">();
	}
	static class IContentsItemInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IContentsItemInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IContentsItemInterface) == 0x000001, "Wrong alignment on IContentsItemInterface");
static_assert(sizeof(IContentsItemInterface) == 0x000001, "Wrong size on IContentsItemInterface");

// Class UNION.CourseSelectClassWidget
// 0x0028 (0x0670 - 0x0648)
class UCourseSelectClassWidget final : public UUnionUIButtonStandard
{
public:
	class UPanelWidget*                           _RootPanel;                                        // 0x0648(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_650[0x8];                                      // 0x0650(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       ClassSelect_In;                                    // 0x0658(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       ClassSelect_Loop;                                  // 0x0660(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       ClassSelect_Out;                                   // 0x0668(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void In();
	void Out();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CourseSelectClassWidget">();
	}
	static class UCourseSelectClassWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCourseSelectClassWidget>();
	}
};
static_assert(alignof(UCourseSelectClassWidget) == 0x000008, "Wrong alignment on UCourseSelectClassWidget");
static_assert(sizeof(UCourseSelectClassWidget) == 0x000670, "Wrong size on UCourseSelectClassWidget");
static_assert(offsetof(UCourseSelectClassWidget, _RootPanel) == 0x000648, "Member 'UCourseSelectClassWidget::_RootPanel' has a wrong offset!");
static_assert(offsetof(UCourseSelectClassWidget, ClassSelect_In) == 0x000658, "Member 'UCourseSelectClassWidget::ClassSelect_In' has a wrong offset!");
static_assert(offsetof(UCourseSelectClassWidget, ClassSelect_Loop) == 0x000660, "Member 'UCourseSelectClassWidget::ClassSelect_Loop' has a wrong offset!");
static_assert(offsetof(UCourseSelectClassWidget, ClassSelect_Out) == 0x000668, "Member 'UCourseSelectClassWidget::ClassSelect_Out' has a wrong offset!");

// Class UNION.UnionTravelRingActor
// 0x00A0 (0x0330 - 0x0290)
class AUnionTravelRingActor final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ETravelRingType                               TravelRingType;                                    // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     WhiteOutMaterialInterface;                         // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          conflictMix;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          conflictRandom;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0xD];                                      // 0x02B8(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	EDomainNumber                                 DomainNumber_;                                     // 0x02C5(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C6[0x2];                                      // 0x02C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AUnionTravelRingLevelActor*             OwnerLevelActor_;                                  // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionTravelRingComponent*              TravelRingComponent_;                              // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UUnionStaticMeshComponent*>      TravelRingGates_;                                  // 0x02D8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TSubclassOf<class AActor>                     TravelRingGateClass_;                              // 0x02E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionTravelRingComponent*              TravelRingComponents_[0x4];                        // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               WhiteoutEffectMaterials_[0x4];                     // 0x0310(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetFXVisible(bool bVisible);

	ERaceType GetRaceType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionTravelRingActor">();
	}
	static class AUnionTravelRingActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionTravelRingActor>();
	}
};
static_assert(alignof(AUnionTravelRingActor) == 0x000008, "Wrong alignment on AUnionTravelRingActor");
static_assert(sizeof(AUnionTravelRingActor) == 0x000330, "Wrong size on AUnionTravelRingActor");
static_assert(offsetof(AUnionTravelRingActor, TravelRingType) == 0x000298, "Member 'AUnionTravelRingActor::TravelRingType' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingActor, WhiteOutMaterialInterface) == 0x0002A0, "Member 'AUnionTravelRingActor::WhiteOutMaterialInterface' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingActor, conflictMix) == 0x0002A8, "Member 'AUnionTravelRingActor::conflictMix' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingActor, conflictRandom) == 0x0002B0, "Member 'AUnionTravelRingActor::conflictRandom' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingActor, DomainNumber_) == 0x0002C5, "Member 'AUnionTravelRingActor::DomainNumber_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingActor, OwnerLevelActor_) == 0x0002C8, "Member 'AUnionTravelRingActor::OwnerLevelActor_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingActor, TravelRingComponent_) == 0x0002D0, "Member 'AUnionTravelRingActor::TravelRingComponent_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingActor, TravelRingGates_) == 0x0002D8, "Member 'AUnionTravelRingActor::TravelRingGates_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingActor, TravelRingGateClass_) == 0x0002E8, "Member 'AUnionTravelRingActor::TravelRingGateClass_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingActor, TravelRingComponents_) == 0x0002F0, "Member 'AUnionTravelRingActor::TravelRingComponents_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingActor, WhiteoutEffectMaterials_) == 0x000310, "Member 'AUnionTravelRingActor::WhiteoutEffectMaterials_' has a wrong offset!");

// Class UNION.CourseSelectRivalCutinWidget
// 0x0070 (0x0350 - 0x02E0)
class UCourseSelectRivalCutinWidget : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnLoadedEvent;                                     // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFinishedEvent;                                   // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EDriverId                                     _RivalDriverIdNormal;                              // 0x0300(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDriverId                                     _RivalDriverIdHighLevel;                           // 0x0301(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_302[0x2];                                      // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _MaxRivalLevel;                                    // 0x0304(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _RivalLevelNormal;                                 // 0x0308(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _RivalLevelPower;                                  // 0x030C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _BlankIconHideCount;                               // 0x0310(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlayRivalChoice;                                  // 0x0314(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 _CharaImage;                                       // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _CharaShadowImage;                                 // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _CharaNameTextBlock;                               // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_330[0x18];                                     // 0x0330(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       RivalCutin_InOut;                                  // 0x0348(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Play();
	void PlayVoice(EDriverId DriverId);
	void StartLoad();

	bool IsReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CourseSelectRivalCutinWidget">();
	}
	static class UCourseSelectRivalCutinWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCourseSelectRivalCutinWidget>();
	}
};
static_assert(alignof(UCourseSelectRivalCutinWidget) == 0x000008, "Wrong alignment on UCourseSelectRivalCutinWidget");
static_assert(sizeof(UCourseSelectRivalCutinWidget) == 0x000350, "Wrong size on UCourseSelectRivalCutinWidget");
static_assert(offsetof(UCourseSelectRivalCutinWidget, OnLoadedEvent) == 0x0002E0, "Member 'UCourseSelectRivalCutinWidget::OnLoadedEvent' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalCutinWidget, OnFinishedEvent) == 0x0002F0, "Member 'UCourseSelectRivalCutinWidget::OnFinishedEvent' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalCutinWidget, _RivalDriverIdNormal) == 0x000300, "Member 'UCourseSelectRivalCutinWidget::_RivalDriverIdNormal' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalCutinWidget, _RivalDriverIdHighLevel) == 0x000301, "Member 'UCourseSelectRivalCutinWidget::_RivalDriverIdHighLevel' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalCutinWidget, _MaxRivalLevel) == 0x000304, "Member 'UCourseSelectRivalCutinWidget::_MaxRivalLevel' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalCutinWidget, _RivalLevelNormal) == 0x000308, "Member 'UCourseSelectRivalCutinWidget::_RivalLevelNormal' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalCutinWidget, _RivalLevelPower) == 0x00030C, "Member 'UCourseSelectRivalCutinWidget::_RivalLevelPower' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalCutinWidget, _BlankIconHideCount) == 0x000310, "Member 'UCourseSelectRivalCutinWidget::_BlankIconHideCount' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalCutinWidget, bPlayRivalChoice) == 0x000314, "Member 'UCourseSelectRivalCutinWidget::bPlayRivalChoice' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalCutinWidget, _CharaImage) == 0x000318, "Member 'UCourseSelectRivalCutinWidget::_CharaImage' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalCutinWidget, _CharaShadowImage) == 0x000320, "Member 'UCourseSelectRivalCutinWidget::_CharaShadowImage' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalCutinWidget, _CharaNameTextBlock) == 0x000328, "Member 'UCourseSelectRivalCutinWidget::_CharaNameTextBlock' has a wrong offset!");
static_assert(offsetof(UCourseSelectRivalCutinWidget, RivalCutin_InOut) == 0x000348, "Member 'UCourseSelectRivalCutinWidget::RivalCutin_InOut' has a wrong offset!");

// Class UNION.CourseSelectSubCategoryIcon
// 0x0058 (0x06A0 - 0x0648)
class UCourseSelectSubCategoryIcon : public UUnionUIButtonStandard
{
public:
	class UImage*                                 _CourseIconImage;                                  // 0x0648(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 _CourseIconEmeraldMaskImage;                       // 0x0650(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGrandPrixTrophyUI*                     _TrophyUI;                                         // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                _EffSet;                                           // 0x0660(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 _CursorImage;                                      // 0x0668(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        _CursorSwitcher;                                   // 0x0670(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGrandPrixId                                  GrandPrixId;                                       // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_679[0x7];                                      // 0x0679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       CurrentLoopAnim;                                   // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWaitForAnimationToDecide;                         // 0x0688(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Btn_Lock_Loop;                                     // 0x0690(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Btn_Select_Out;                                    // 0x0698(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnDecided(class UUnionUIButtonBaseCore* Button);
	void OnDeselected(class UUnionUIButtonBaseCore* Button);
	void OnSelected(class UUnionUIButtonBaseCore* Button);
	void SetGrandprixIconId(EGrandPrixId IconId);
	void SetGrandPrixStatus(const TArray<uint8>& InNomalProgress, const TArray<uint8>& InMirrorProgress);
	void SetIconTexture(class UTexture2D* InTexture);
	void SetLockStatus(bool bLock, bool DecidableIfLocked);
	void SetNextId(EGrandPrixId IconId);
	void SetTrophy(EGrandPrixProgressId GPProgressId);
	void SetWaitForAnimationToDecide(bool InFlag);
	void UpdateVisualType(ECourseSelectCategoryIconVisualType Type);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CourseSelectSubCategoryIcon">();
	}
	static class UCourseSelectSubCategoryIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCourseSelectSubCategoryIcon>();
	}
};
static_assert(alignof(UCourseSelectSubCategoryIcon) == 0x000008, "Wrong alignment on UCourseSelectSubCategoryIcon");
static_assert(sizeof(UCourseSelectSubCategoryIcon) == 0x0006A0, "Wrong size on UCourseSelectSubCategoryIcon");
static_assert(offsetof(UCourseSelectSubCategoryIcon, _CourseIconImage) == 0x000648, "Member 'UCourseSelectSubCategoryIcon::_CourseIconImage' has a wrong offset!");
static_assert(offsetof(UCourseSelectSubCategoryIcon, _CourseIconEmeraldMaskImage) == 0x000650, "Member 'UCourseSelectSubCategoryIcon::_CourseIconEmeraldMaskImage' has a wrong offset!");
static_assert(offsetof(UCourseSelectSubCategoryIcon, _TrophyUI) == 0x000658, "Member 'UCourseSelectSubCategoryIcon::_TrophyUI' has a wrong offset!");
static_assert(offsetof(UCourseSelectSubCategoryIcon, _EffSet) == 0x000660, "Member 'UCourseSelectSubCategoryIcon::_EffSet' has a wrong offset!");
static_assert(offsetof(UCourseSelectSubCategoryIcon, _CursorImage) == 0x000668, "Member 'UCourseSelectSubCategoryIcon::_CursorImage' has a wrong offset!");
static_assert(offsetof(UCourseSelectSubCategoryIcon, _CursorSwitcher) == 0x000670, "Member 'UCourseSelectSubCategoryIcon::_CursorSwitcher' has a wrong offset!");
static_assert(offsetof(UCourseSelectSubCategoryIcon, GrandPrixId) == 0x000678, "Member 'UCourseSelectSubCategoryIcon::GrandPrixId' has a wrong offset!");
static_assert(offsetof(UCourseSelectSubCategoryIcon, CurrentLoopAnim) == 0x000680, "Member 'UCourseSelectSubCategoryIcon::CurrentLoopAnim' has a wrong offset!");
static_assert(offsetof(UCourseSelectSubCategoryIcon, bWaitForAnimationToDecide) == 0x000688, "Member 'UCourseSelectSubCategoryIcon::bWaitForAnimationToDecide' has a wrong offset!");
static_assert(offsetof(UCourseSelectSubCategoryIcon, Btn_Lock_Loop) == 0x000690, "Member 'UCourseSelectSubCategoryIcon::Btn_Lock_Loop' has a wrong offset!");
static_assert(offsetof(UCourseSelectSubCategoryIcon, Btn_Select_Out) == 0x000698, "Member 'UCourseSelectSubCategoryIcon::Btn_Select_Out' has a wrong offset!");

// Class UNION.CourseSelectWidgetBase
// 0x01F8 (0x04D8 - 0x02E0)
class UCourseSelectWidgetBase : public UUserWidget
{
public:
	int32                                         CenterIndex;                                       // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryNum;                                       // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CenterPivotIndex;                                  // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGrandPrixOnly;                                    // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrandPrixId                                  CurrentSelectedGrandPrixId;                        // 0x02ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStageId                                      CurrentSelectedStageId;                            // 0x02EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastRight;                                        // 0x02EF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCourseSelectSubCategoryIcon*>   CourseSelectSubCategoryIcon;                       // 0x02F0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<EGrandPrixId>                          GrandPrixIds;                                      // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TMap<EGrandPrixId, class UCourseSelectSubCategoryIcon*> GrandPrixIdAndEmblemMap;                 // 0x0310(0x0050)(BlueprintVisible, ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<bool>                                  IsOpened;                                          // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class UDataTable*                             StageStorePromotionDataTable;                      // 0x0370(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCourseSelectSubCategoryIcon*>   GrandPrixEmblemArr;                                // 0x0378(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UUnionUIButtonStandard*>         MainButtons;                                       // 0x0388(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<EGrandPrixId, struct FGrandPrixStages>   GrandPrixStagesMap;                                // 0x0398(0x0050)(BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          CourseSelecting;                                   // 0x03E8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UCourseSelectSubCategoryIcon* SelectedGrandprixButton)> OnCourseSelectGrandprixSelected; // 0x03F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCourseSelectSubCategoryIcon* SelectedGrandprixButton)> OnCourseSelectGrandprixCancel; // 0x0400(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCourseSelectSubCategoryIcon* SelectedGrandprixButton)> OnCourseSelectBackToClassSelect; // 0x0410(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCourseSelectSubCategoryIcon* SelectedGrandprixButton)> OnGadgetCustomSelected; // 0x0420(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCourseSelectSubCategoryIcon* SelectedGrandprixButton)> OnTimeTrialSelected; // 0x0430(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool GrandPrixSelecting)> OnStoreRequestedDelegate;                // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EGrandPrixId SelectedGrandprixId, EStageId FirstCourseStageId)> OnDecideGrandprixId; // 0x0450(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EStageId SelectedCourseStageId)> OnDecideStageId;                  // 0x0460(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecideRivalSelect;                               // 0x0470(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       CourseMaterialNomal;                               // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               CourseMaterialAnotherWorld;                        // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       LastRightLeftAnimation;                            // 0x0498(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       CourseSelect_ShortBox_Loop;                        // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       CourseSelect_Loop;                                 // 0x04A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       CourseSelect_Right;                                // 0x04B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       CourseSelect_Left;                                 // 0x04B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       CourseSelect_LongBox_Loop;                         // 0x04C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       CourseSelect_ShortBox_to_LongBox;                  // 0x04C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       CourseSelect_In;                                   // 0x04D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ChangeGrandprix(EGrandPrixId InGrandprixId);
	void EndDetectionOfInputTypeChange();
	void Init(EGameModeId InGameModeId);
	void LotteryMCEvent();
	void OnChangeControllerInputType(EAppControllerInputType BeforeType, EAppControllerInputType AfterType);
	void OnFinishedRotate();
	void OnInputChangedFromMouseBP();
	bool RequestStore(bool ForGrandPrix);
	void SetFocusMenu(class APlayerController* PlayerController);
	void StartDetectionOfInputTypeChange();
	bool StartRotate(bool bRight);
	void UpdateTrophy();

	bool ContainsStoreRequiredStage(EGrandPrixId GrandPrixId) const;
	bool IsCourseSelecting() const;
	bool IsStoreEnabled(EStageId StageId) const;
	bool IsStoreRequired(EStageId StageId) const;
	bool IsStoreRequiredForGrandPrix(EGrandPrixId GrandPrixId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CourseSelectWidgetBase">();
	}
	static class UCourseSelectWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCourseSelectWidgetBase>();
	}
};
static_assert(alignof(UCourseSelectWidgetBase) == 0x000008, "Wrong alignment on UCourseSelectWidgetBase");
static_assert(sizeof(UCourseSelectWidgetBase) == 0x0004D8, "Wrong size on UCourseSelectWidgetBase");
static_assert(offsetof(UCourseSelectWidgetBase, CenterIndex) == 0x0002E0, "Member 'UCourseSelectWidgetBase::CenterIndex' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CategoryNum) == 0x0002E4, "Member 'UCourseSelectWidgetBase::CategoryNum' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CenterPivotIndex) == 0x0002E8, "Member 'UCourseSelectWidgetBase::CenterPivotIndex' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, bGrandPrixOnly) == 0x0002EC, "Member 'UCourseSelectWidgetBase::bGrandPrixOnly' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CurrentSelectedGrandPrixId) == 0x0002ED, "Member 'UCourseSelectWidgetBase::CurrentSelectedGrandPrixId' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CurrentSelectedStageId) == 0x0002EE, "Member 'UCourseSelectWidgetBase::CurrentSelectedStageId' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, bLastRight) == 0x0002EF, "Member 'UCourseSelectWidgetBase::bLastRight' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CourseSelectSubCategoryIcon) == 0x0002F0, "Member 'UCourseSelectWidgetBase::CourseSelectSubCategoryIcon' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, GrandPrixIds) == 0x000300, "Member 'UCourseSelectWidgetBase::GrandPrixIds' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, GrandPrixIdAndEmblemMap) == 0x000310, "Member 'UCourseSelectWidgetBase::GrandPrixIdAndEmblemMap' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, IsOpened) == 0x000360, "Member 'UCourseSelectWidgetBase::IsOpened' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, StageStorePromotionDataTable) == 0x000370, "Member 'UCourseSelectWidgetBase::StageStorePromotionDataTable' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, GrandPrixEmblemArr) == 0x000378, "Member 'UCourseSelectWidgetBase::GrandPrixEmblemArr' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, MainButtons) == 0x000388, "Member 'UCourseSelectWidgetBase::MainButtons' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, GrandPrixStagesMap) == 0x000398, "Member 'UCourseSelectWidgetBase::GrandPrixStagesMap' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CourseSelecting) == 0x0003E8, "Member 'UCourseSelectWidgetBase::CourseSelecting' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, OnCourseSelectGrandprixSelected) == 0x0003F0, "Member 'UCourseSelectWidgetBase::OnCourseSelectGrandprixSelected' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, OnCourseSelectGrandprixCancel) == 0x000400, "Member 'UCourseSelectWidgetBase::OnCourseSelectGrandprixCancel' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, OnCourseSelectBackToClassSelect) == 0x000410, "Member 'UCourseSelectWidgetBase::OnCourseSelectBackToClassSelect' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, OnGadgetCustomSelected) == 0x000420, "Member 'UCourseSelectWidgetBase::OnGadgetCustomSelected' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, OnTimeTrialSelected) == 0x000430, "Member 'UCourseSelectWidgetBase::OnTimeTrialSelected' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, OnStoreRequestedDelegate) == 0x000440, "Member 'UCourseSelectWidgetBase::OnStoreRequestedDelegate' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, OnDecideGrandprixId) == 0x000450, "Member 'UCourseSelectWidgetBase::OnDecideGrandprixId' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, OnDecideStageId) == 0x000460, "Member 'UCourseSelectWidgetBase::OnDecideStageId' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, OnDecideRivalSelect) == 0x000470, "Member 'UCourseSelectWidgetBase::OnDecideRivalSelect' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CourseMaterialNomal) == 0x000480, "Member 'UCourseSelectWidgetBase::CourseMaterialNomal' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CourseMaterialAnotherWorld) == 0x000490, "Member 'UCourseSelectWidgetBase::CourseMaterialAnotherWorld' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, LastRightLeftAnimation) == 0x000498, "Member 'UCourseSelectWidgetBase::LastRightLeftAnimation' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CourseSelect_ShortBox_Loop) == 0x0004A0, "Member 'UCourseSelectWidgetBase::CourseSelect_ShortBox_Loop' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CourseSelect_Loop) == 0x0004A8, "Member 'UCourseSelectWidgetBase::CourseSelect_Loop' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CourseSelect_Right) == 0x0004B0, "Member 'UCourseSelectWidgetBase::CourseSelect_Right' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CourseSelect_Left) == 0x0004B8, "Member 'UCourseSelectWidgetBase::CourseSelect_Left' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CourseSelect_LongBox_Loop) == 0x0004C0, "Member 'UCourseSelectWidgetBase::CourseSelect_LongBox_Loop' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CourseSelect_ShortBox_to_LongBox) == 0x0004C8, "Member 'UCourseSelectWidgetBase::CourseSelect_ShortBox_to_LongBox' has a wrong offset!");
static_assert(offsetof(UCourseSelectWidgetBase, CourseSelect_In) == 0x0004D0, "Member 'UCourseSelectWidgetBase::CourseSelect_In' has a wrong offset!");

// Class UNION.StaffrollTextWidget
// 0x0008 (0x02E8 - 0x02E0)
class UStaffrollTextWidget : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x8];                                      // 0x02E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollTextWidget">();
	}
	static class UStaffrollTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollTextWidget>();
	}
};
static_assert(alignof(UStaffrollTextWidget) == 0x000008, "Wrong alignment on UStaffrollTextWidget");
static_assert(sizeof(UStaffrollTextWidget) == 0x0002E8, "Wrong size on UStaffrollTextWidget");

// Class UNION.StaffrollLogoTextWidget
// 0x0010 (0x02F8 - 0x02E8)
class UStaffrollLogoTextWidget final : public UStaffrollTextWidget
{
public:
	class UImage*                                 _LogoImage;                                        // 0x02E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollLogoTextWidget">();
	}
	static class UStaffrollLogoTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollLogoTextWidget>();
	}
};
static_assert(alignof(UStaffrollLogoTextWidget) == 0x000008, "Wrong alignment on UStaffrollLogoTextWidget");
static_assert(sizeof(UStaffrollLogoTextWidget) == 0x0002F8, "Wrong size on UStaffrollLogoTextWidget");
static_assert(offsetof(UStaffrollLogoTextWidget, _LogoImage) == 0x0002E8, "Member 'UStaffrollLogoTextWidget::_LogoImage' has a wrong offset!");

// Class UNION.CustomMatchCorseLotteryWheel
// 0x0000 (0x1418 - 0x1418)
class UCustomMatchCorseLotteryWheel final : public UCorseLotteryWheelBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomMatchCorseLotteryWheel">();
	}
	static class UCustomMatchCorseLotteryWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomMatchCorseLotteryWheel>();
	}
};
static_assert(alignof(UCustomMatchCorseLotteryWheel) == 0x000008, "Wrong alignment on UCustomMatchCorseLotteryWheel");
static_assert(sizeof(UCustomMatchCorseLotteryWheel) == 0x001418, "Wrong size on UCustomMatchCorseLotteryWheel");

// Class UNION.UnionStagePrimaryAssetLabel
// 0x0008 (0x0090 - 0x0088)
class UUnionStagePrimaryAssetLabel final : public UUnionPrimaryAssetLabel
{
public:
	EStageId                                      StageId;                                           // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialChunk;                                   // 0x0089(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionStagePrimaryAssetLabel">();
	}
	static class UUnionStagePrimaryAssetLabel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionStagePrimaryAssetLabel>();
	}
};
static_assert(alignof(UUnionStagePrimaryAssetLabel) == 0x000008, "Wrong alignment on UUnionStagePrimaryAssetLabel");
static_assert(sizeof(UUnionStagePrimaryAssetLabel) == 0x000090, "Wrong size on UUnionStagePrimaryAssetLabel");
static_assert(offsetof(UUnionStagePrimaryAssetLabel, StageId) == 0x000088, "Member 'UUnionStagePrimaryAssetLabel::StageId' has a wrong offset!");
static_assert(offsetof(UUnionStagePrimaryAssetLabel, bIsInitialChunk) == 0x000089, "Member 'UUnionStagePrimaryAssetLabel::bIsInitialChunk' has a wrong offset!");

// Class UNION.CustomMatchLobbyControlComponent
// 0x0020 (0x0130 - 0x0110)
class UCustomMatchLobbyControlComponent : public UNetLobbyControlComponent
{
public:
	uint8                                         Pad_110[0x20];                                     // 0x0110(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateLobby(class USquadContext* InSquadContext, int32 MaxMember);
	void EndSyncGroupSetting();
	void GetGroupSetting(TMap<class FString, int32>* OutGroupSetting);
	EFriendMatchLobbyJoinResult GetJoinResult();
	bool GetRuleSetting(bool* UsingPreset, EPartyRacePreset* PresetId, struct FCustomRaceSetting* RaceSetting, struct FItemSwitchSetting* ItemSetting, struct FCourseSwitchSetting* CourseSetting, ERivalTeamId* RivalTeamId);
	bool IsFinishNextRaceSetting();
	bool IsGroupSettingCompleted();
	bool IsInRace();
	bool IsNotReadyAllMember();
	bool IsReady(const struct FUniqueNetIdRepl& MemberId);
	bool IsReadyAllMember();
	bool IsRuleSettingUpdated();
	void JoinByInviteInfo();
	void JoinBySearchLobbyId();
	void OnCheckInvitation();
	void OnCompleteJoinByInviteInfo(bool bSuccessful, const struct FCreateOrConnectLobbyResult& Result);
	void OnCompleteJoinBySearchLobbyId(bool bSuccessful, const struct FCreateOrConnectLobbyResult& Result);
	void SetFinishNextRaceSetting(bool IsFinished);
	void SetInRace(bool IsInRace);
	void SetMemberGroup(const class FString& MemberId, int32 GroupIndex);
	void SetReadyLocalMember(bool IsReady);
	void StartSyncGroupSetting();
	void SyncRuleSettingForCustom(const struct FCustomRaceSetting& RaceSetting, const struct FItemSwitchSetting& ItemSetting, const TArray<EStageId>& CourseSetting);
	void SyncRuleSettingForPreset(const struct FCustomRaceSetting& RaceSetting, EPartyRacePreset PresetId);

	void CheckHasPlanningToJoinLobby(bool* bHasAcceptInvite, bool* bHasSearchLobbyId, bool* bShouldQuitLobby) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomMatchLobbyControlComponent">();
	}
	static class UCustomMatchLobbyControlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomMatchLobbyControlComponent>();
	}
};
static_assert(alignof(UCustomMatchLobbyControlComponent) == 0x000008, "Wrong alignment on UCustomMatchLobbyControlComponent");
static_assert(sizeof(UCustomMatchLobbyControlComponent) == 0x000130, "Wrong size on UCustomMatchLobbyControlComponent");

// Class UNION.UnionRacerAnimSyncChild
// 0x0000 (0x0000 - 0x0000)
class IUnionRacerAnimSyncChild final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionRacerAnimSyncChild">();
	}
	static class IUnionRacerAnimSyncChild* GetDefaultObj()
	{
		return GetDefaultObjImpl<IUnionRacerAnimSyncChild>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IUnionRacerAnimSyncChild) == 0x000001, "Wrong alignment on IUnionRacerAnimSyncChild");
static_assert(sizeof(IUnionRacerAnimSyncChild) == 0x000001, "Wrong size on IUnionRacerAnimSyncChild");

// Class UNION.CustomRaceSubOptionPreviewLine
// 0x0028 (0x0308 - 0x02E0)
class UCustomRaceSubOptionPreviewLine : public UUserWidget
{
public:
	ECustomRaceSettingLine                        SettingLineNumber;                                 // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SettingLineText;                                   // 0x02E8(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SettingContentText;                                // 0x02F8(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomRaceSubOptionPreviewLine">();
	}
	static class UCustomRaceSubOptionPreviewLine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomRaceSubOptionPreviewLine>();
	}
};
static_assert(alignof(UCustomRaceSubOptionPreviewLine) == 0x000008, "Wrong alignment on UCustomRaceSubOptionPreviewLine");
static_assert(sizeof(UCustomRaceSubOptionPreviewLine) == 0x000308, "Wrong size on UCustomRaceSubOptionPreviewLine");
static_assert(offsetof(UCustomRaceSubOptionPreviewLine, SettingLineNumber) == 0x0002E0, "Member 'UCustomRaceSubOptionPreviewLine::SettingLineNumber' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionPreviewLine, SettingLineText) == 0x0002E8, "Member 'UCustomRaceSubOptionPreviewLine::SettingLineText' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionPreviewLine, SettingContentText) == 0x0002F8, "Member 'UCustomRaceSubOptionPreviewLine::SettingContentText' has a wrong offset!");

// Class UNION.RewardDialog
// 0x0090 (0x0468 - 0x03D8)
class URewardDialog : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(EDialogResult Result)> OnResultDelegate;                           // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UCommonItemIcon*                        WBP_CMN_ItemIcon;                                  // 0x03E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_ItemName;                                      // 0x03F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_Category;                                      // 0x03F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcherText;                                // 0x0400(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_MainTitle;                                     // 0x0408(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_MainTitle_1;                                   // 0x0410(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_MainTitle_2;                                   // 0x0418(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Overlay_SourceNumber;                              // 0x0420(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachinePartsTicketNumber*              WBP_DonpaTicketApp_Sub_TicketNumber;               // 0x0428(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuPopupSubBtnStandard*         WBP_Popup_Sub_Btn_03;                              // 0x0430(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuPopupSubBtnStandard*         WBP_Popup_Sub_Btn_04;                              // 0x0438(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          SoundCueYes;                                       // 0x0440(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          SoundCueNo;                                        // 0x0448(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          SoundCueCancel;                                    // 0x0450(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButtonsPanel*                   ButtonsPanel;                                      // 0x0458(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_460[0x8];                                      // 0x0460(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimationEndIn();
	void AnimationEndOut();
	void OnCancelOK(class UUnionUIButtonBase* Button, int32 ButtonIndex);
	void OnCancelYesNo(class UUnionUIButtonBase* Button, int32 ButtonIndex);
	void OnDecisionYesNo(class UUnionUIButtonBase* Button, int32 ButtonIndex);
	void PlayAnimationIn();
	void PlayAnimationLoop();
	void PlayAnimationOut();
	void SetupOK(const struct FRewardDialogParameter& InParam);
	void SetupYesNo(const struct FRewardDialogParameter& InParam);

	class UCommonMenuPopupSubBtnStandard* GetButtonNo() const;
	class UCommonMenuPopupSubBtnStandard* GetButtonYes() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RewardDialog">();
	}
	static class URewardDialog* GetDefaultObj()
	{
		return GetDefaultObjImpl<URewardDialog>();
	}
};
static_assert(alignof(URewardDialog) == 0x000008, "Wrong alignment on URewardDialog");
static_assert(sizeof(URewardDialog) == 0x000468, "Wrong size on URewardDialog");
static_assert(offsetof(URewardDialog, OnResultDelegate) == 0x0003D8, "Member 'URewardDialog::OnResultDelegate' has a wrong offset!");
static_assert(offsetof(URewardDialog, WBP_CMN_ItemIcon) == 0x0003E8, "Member 'URewardDialog::WBP_CMN_ItemIcon' has a wrong offset!");
static_assert(offsetof(URewardDialog, TXT_ItemName) == 0x0003F0, "Member 'URewardDialog::TXT_ItemName' has a wrong offset!");
static_assert(offsetof(URewardDialog, TXT_Category) == 0x0003F8, "Member 'URewardDialog::TXT_Category' has a wrong offset!");
static_assert(offsetof(URewardDialog, WidgetSwitcherText) == 0x000400, "Member 'URewardDialog::WidgetSwitcherText' has a wrong offset!");
static_assert(offsetof(URewardDialog, TXT_MainTitle) == 0x000408, "Member 'URewardDialog::TXT_MainTitle' has a wrong offset!");
static_assert(offsetof(URewardDialog, TXT_MainTitle_1) == 0x000410, "Member 'URewardDialog::TXT_MainTitle_1' has a wrong offset!");
static_assert(offsetof(URewardDialog, TXT_MainTitle_2) == 0x000418, "Member 'URewardDialog::TXT_MainTitle_2' has a wrong offset!");
static_assert(offsetof(URewardDialog, Overlay_SourceNumber) == 0x000420, "Member 'URewardDialog::Overlay_SourceNumber' has a wrong offset!");
static_assert(offsetof(URewardDialog, WBP_DonpaTicketApp_Sub_TicketNumber) == 0x000428, "Member 'URewardDialog::WBP_DonpaTicketApp_Sub_TicketNumber' has a wrong offset!");
static_assert(offsetof(URewardDialog, WBP_Popup_Sub_Btn_03) == 0x000430, "Member 'URewardDialog::WBP_Popup_Sub_Btn_03' has a wrong offset!");
static_assert(offsetof(URewardDialog, WBP_Popup_Sub_Btn_04) == 0x000438, "Member 'URewardDialog::WBP_Popup_Sub_Btn_04' has a wrong offset!");
static_assert(offsetof(URewardDialog, SoundCueYes) == 0x000440, "Member 'URewardDialog::SoundCueYes' has a wrong offset!");
static_assert(offsetof(URewardDialog, SoundCueNo) == 0x000448, "Member 'URewardDialog::SoundCueNo' has a wrong offset!");
static_assert(offsetof(URewardDialog, SoundCueCancel) == 0x000450, "Member 'URewardDialog::SoundCueCancel' has a wrong offset!");
static_assert(offsetof(URewardDialog, ButtonsPanel) == 0x000458, "Member 'URewardDialog::ButtonsPanel' has a wrong offset!");

// Class UNION.CustomRaceSubOptionSettingBtn
// 0x0050 (0x04D0 - 0x0480)
class UCustomRaceSubOptionSettingBtn : public UUnionUIButtonBase
{
public:
	class UMaterialInstanceDynamic*               PatImageMaterial;                                  // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnionUIControlDir                            EdgeType;                                          // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         BtnArrows;                                         // 0x0490(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bIgnore;                                           // 0x04A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       LastLoopAnim;                                      // 0x04A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnionUIButtonLoopAnim                        CurrentLoopState;                                  // 0x04B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Btn_Active_Loop;                                   // 0x04B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_Loop;                                   // 0x04C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_NonActive_Loop;                                // 0x04C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void FireLoopAnimation(EUnionUIButtonLoopAnim InLoopAnim);
	void SetButtonVisibility(bool Visible);
	void SetIsButtonSelected(bool IsSelected);
	void SetLineParent(class UCustomRaceSubOptionSettingLine* LineParent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomRaceSubOptionSettingBtn">();
	}
	static class UCustomRaceSubOptionSettingBtn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomRaceSubOptionSettingBtn>();
	}
};
static_assert(alignof(UCustomRaceSubOptionSettingBtn) == 0x000008, "Wrong alignment on UCustomRaceSubOptionSettingBtn");
static_assert(sizeof(UCustomRaceSubOptionSettingBtn) == 0x0004D0, "Wrong size on UCustomRaceSubOptionSettingBtn");
static_assert(offsetof(UCustomRaceSubOptionSettingBtn, PatImageMaterial) == 0x000480, "Member 'UCustomRaceSubOptionSettingBtn::PatImageMaterial' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingBtn, EdgeType) == 0x000488, "Member 'UCustomRaceSubOptionSettingBtn::EdgeType' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingBtn, BtnArrows) == 0x000490, "Member 'UCustomRaceSubOptionSettingBtn::BtnArrows' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingBtn, bIgnore) == 0x0004A0, "Member 'UCustomRaceSubOptionSettingBtn::bIgnore' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingBtn, LastLoopAnim) == 0x0004A8, "Member 'UCustomRaceSubOptionSettingBtn::LastLoopAnim' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingBtn, CurrentLoopState) == 0x0004B0, "Member 'UCustomRaceSubOptionSettingBtn::CurrentLoopState' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingBtn, Btn_Active_Loop) == 0x0004B8, "Member 'UCustomRaceSubOptionSettingBtn::Btn_Active_Loop' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingBtn, Btn_Select_Loop) == 0x0004C0, "Member 'UCustomRaceSubOptionSettingBtn::Btn_Select_Loop' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingBtn, Btn_NonActive_Loop) == 0x0004C8, "Member 'UCustomRaceSubOptionSettingBtn::Btn_NonActive_Loop' has a wrong offset!");

// Class UNION.CustomRaceSubOptionSettingLine
// 0x00E8 (0x0568 - 0x0480)
class UCustomRaceSubOptionSettingLine : public UUnionUIButtonBase
{
public:
	TMulticastInlineDelegate<void(int32 SelectedIndex)> FocusSelectedEvent;                          // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	ECustomRaceSettingLine                        SettingLineIndex;                                  // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomRaceSettingLineType                    SettingType;                                       // 0x0491(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492[0x6];                                      // 0x0492(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomRaceSettingLine                 SettingStruct;                                     // 0x0498(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class UCustomRaceSubOptionSettingBtn*> SettingButtons;                                    // 0x04F0(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UUnionUIButtonsPanel*                   SettingButtonsPanel;                               // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedIndex)> FocusSelectedSubRaceCountEvent;              // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedIndex)> FocusSelectedSubTopPointEvent;               // 0x0518(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<class UCustomRaceSubOptionSettingBtn*> SubSettingButtons;                                 // 0x0528(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UUnionUIButtonsPanel*                   SubSettingButtonsPanel;                            // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubButtonIndex;                                    // 0x0540(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DefaultIndex;                                      // 0x0544(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LastIndex;                                         // 0x0545(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_546[0x2];                                      // 0x0546(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DisableIndex;                                      // 0x0548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 IgnoreIndex;                                       // 0x0558(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void CheckIsGuestEvent(bool IsGuest);
	void GetButtonTextArr(TArray<class FText>* OutButtonTextArr);
	void GetExplainTextArr(TArray<class FText>* OutExplainTextArr);
	void SetIgnoreIndexAndUpdate(const TArray<int32>& InIgnoreIndex);
	void SetLastSelectedIndex(uint8 InIndex);
	void SetSettingButtonNum(int32 InButtonsNum);
	void WhenIgnoreSetNavigation(int32 CurrentIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomRaceSubOptionSettingLine">();
	}
	static class UCustomRaceSubOptionSettingLine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomRaceSubOptionSettingLine>();
	}
};
static_assert(alignof(UCustomRaceSubOptionSettingLine) == 0x000008, "Wrong alignment on UCustomRaceSubOptionSettingLine");
static_assert(sizeof(UCustomRaceSubOptionSettingLine) == 0x000568, "Wrong size on UCustomRaceSubOptionSettingLine");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, FocusSelectedEvent) == 0x000480, "Member 'UCustomRaceSubOptionSettingLine::FocusSelectedEvent' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, SettingLineIndex) == 0x000490, "Member 'UCustomRaceSubOptionSettingLine::SettingLineIndex' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, SettingType) == 0x000491, "Member 'UCustomRaceSubOptionSettingLine::SettingType' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, SettingStruct) == 0x000498, "Member 'UCustomRaceSubOptionSettingLine::SettingStruct' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, SettingButtons) == 0x0004F0, "Member 'UCustomRaceSubOptionSettingLine::SettingButtons' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, SettingButtonsPanel) == 0x000500, "Member 'UCustomRaceSubOptionSettingLine::SettingButtonsPanel' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, FocusSelectedSubRaceCountEvent) == 0x000508, "Member 'UCustomRaceSubOptionSettingLine::FocusSelectedSubRaceCountEvent' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, FocusSelectedSubTopPointEvent) == 0x000518, "Member 'UCustomRaceSubOptionSettingLine::FocusSelectedSubTopPointEvent' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, SubSettingButtons) == 0x000528, "Member 'UCustomRaceSubOptionSettingLine::SubSettingButtons' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, SubSettingButtonsPanel) == 0x000538, "Member 'UCustomRaceSubOptionSettingLine::SubSettingButtonsPanel' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, SubButtonIndex) == 0x000540, "Member 'UCustomRaceSubOptionSettingLine::SubButtonIndex' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, DefaultIndex) == 0x000544, "Member 'UCustomRaceSubOptionSettingLine::DefaultIndex' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, LastIndex) == 0x000545, "Member 'UCustomRaceSubOptionSettingLine::LastIndex' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, DisableIndex) == 0x000548, "Member 'UCustomRaceSubOptionSettingLine::DisableIndex' has a wrong offset!");
static_assert(offsetof(UCustomRaceSubOptionSettingLine, IgnoreIndex) == 0x000558, "Member 'UCustomRaceSubOptionSettingLine::IgnoreIndex' has a wrong offset!");

// Class UNION.DebugOpenLevelLibrary
// 0x0000 (0x0028 - 0x0028)
class UDebugOpenLevelLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void OpenBootDebugLevel(const class UObject* WorldContextObject);
	static void OpenPacketReplayLevel(const class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DebugOpenLevelLibrary">();
	}
	static class UDebugOpenLevelLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDebugOpenLevelLibrary>();
	}
};
static_assert(alignof(UDebugOpenLevelLibrary) == 0x000008, "Wrong alignment on UDebugOpenLevelLibrary");
static_assert(sizeof(UDebugOpenLevelLibrary) == 0x000028, "Wrong size on UDebugOpenLevelLibrary");

// Class UNION.UnionPlatformSaveDataUpgradePS
// 0x0060 (0x02F0 - 0x0290)
class AUnionPlatformSaveDataUpgradePS : public AActor
{
public:
	uint8                                         Pad_290[0x58];                                     // 0x0290(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIPopupWindowBase*                m_PopupWindowPtr;                                  // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnDecisionErrorVersionPopupWindow(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecisionUserConfirmationPopupWindow(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void RequestStartUpgradeSaveData();

	bool IsBusy() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionPlatformSaveDataUpgradePS">();
	}
	static class AUnionPlatformSaveDataUpgradePS* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionPlatformSaveDataUpgradePS>();
	}
};
static_assert(alignof(AUnionPlatformSaveDataUpgradePS) == 0x000008, "Wrong alignment on AUnionPlatformSaveDataUpgradePS");
static_assert(sizeof(AUnionPlatformSaveDataUpgradePS) == 0x0002F0, "Wrong size on AUnionPlatformSaveDataUpgradePS");
static_assert(offsetof(AUnionPlatformSaveDataUpgradePS, m_PopupWindowPtr) == 0x0002E8, "Member 'AUnionPlatformSaveDataUpgradePS::m_PopupWindowPtr' has a wrong offset!");

// Class UNION.DebugStartMenuSequence
// 0x0000 (0x0368 - 0x0368)
class ADebugStartMenuSequence final : public AHierarchicalStateMachine
{
public:
	void OnInitStateExit();
	void OnInitStateIdle();
	void SetNextDebugStartMenuSequenceState(EDebugStartMenuSequenceState InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DebugStartMenuSequence">();
	}
	static class ADebugStartMenuSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADebugStartMenuSequence>();
	}
};
static_assert(alignof(ADebugStartMenuSequence) == 0x000008, "Wrong alignment on ADebugStartMenuSequence");
static_assert(sizeof(ADebugStartMenuSequence) == 0x000368, "Wrong size on ADebugStartMenuSequence");

// Class UNION.DebugStartMenuSequenceStateBase
// 0x0010 (0x0108 - 0x00F8)
class UDebugStartMenuSequenceStateBase final : public UHierarchicalStateMachineStateComponent
{
public:
	EDebugStartMenuSequenceState                  DefaultMenuState;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADebugStartMenuSequence*                OwnerDebugStartMenuSequence;                       // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetNextDebugStartMenuSequenceState(EDebugStartMenuSequenceState InState);

	class ADebugStartMenuSequence* GetOwnerDebugStartMenuSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DebugStartMenuSequenceStateBase">();
	}
	static class UDebugStartMenuSequenceStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDebugStartMenuSequenceStateBase>();
	}
};
static_assert(alignof(UDebugStartMenuSequenceStateBase) == 0x000008, "Wrong alignment on UDebugStartMenuSequenceStateBase");
static_assert(sizeof(UDebugStartMenuSequenceStateBase) == 0x000108, "Wrong size on UDebugStartMenuSequenceStateBase");
static_assert(offsetof(UDebugStartMenuSequenceStateBase, DefaultMenuState) == 0x0000F8, "Member 'UDebugStartMenuSequenceStateBase::DefaultMenuState' has a wrong offset!");
static_assert(offsetof(UDebugStartMenuSequenceStateBase, OwnerDebugStartMenuSequence) == 0x000100, "Member 'UDebugStartMenuSequenceStateBase::OwnerDebugStartMenuSequence' has a wrong offset!");

// Class UNION.DetachUnavailableContentsUtility
// 0x0000 (0x0028 - 0x0028)
class UDetachUnavailableContentsUtility final : public UBlueprintFunctionLibrary
{
public:
	static void DetachUnavailableContents();
	static EMachineId GetDefaultMachineId(EMachineId MachineId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DetachUnavailableContentsUtility">();
	}
	static class UDetachUnavailableContentsUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDetachUnavailableContentsUtility>();
	}
};
static_assert(alignof(UDetachUnavailableContentsUtility) == 0x000008, "Wrong alignment on UDetachUnavailableContentsUtility");
static_assert(sizeof(UDetachUnavailableContentsUtility) == 0x000028, "Wrong size on UDetachUnavailableContentsUtility");

// Class UNION.DialogueBillboardActor
// 0x0010 (0x02A0 - 0x0290)
class ADialogueBillboardActor final : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x0290(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ChangeMaterial(TSoftObjectPtr<class UMaterialInterface> NewMaterial);
	void ChangeTexture(TSoftObjectPtr<class UTexture2D> NewTexture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogueBillboardActor">();
	}
	static class ADialogueBillboardActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADialogueBillboardActor>();
	}
};
static_assert(alignof(ADialogueBillboardActor) == 0x000008, "Wrong alignment on ADialogueBillboardActor");
static_assert(sizeof(ADialogueBillboardActor) == 0x0002A0, "Wrong size on ADialogueBillboardActor");
static_assert(offsetof(ADialogueBillboardActor, Root) == 0x000290, "Member 'ADialogueBillboardActor::Root' has a wrong offset!");
static_assert(offsetof(ADialogueBillboardActor, StaticMesh) == 0x000298, "Member 'ADialogueBillboardActor::StaticMesh' has a wrong offset!");

// Class UNION.DialogueCharacterAnimInstance
// 0x0060 (0x03D0 - 0x0370)
class UDialogueCharacterAnimInstance : public UAnimInstance
{
public:
	TMap<EDialogueAnimationAssetID, class UAnimSequence*> AnimationAssets;                           // 0x0368(0x0050)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B8[0x18];                                     // 0x03B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UAnimSequence* GetAnimationAssetById(const EDialogueAnimationAssetID AssetId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogueCharacterAnimInstance">();
	}
	static class UDialogueCharacterAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogueCharacterAnimInstance>();
	}
};
static_assert(alignof(UDialogueCharacterAnimInstance) == 0x000010, "Wrong alignment on UDialogueCharacterAnimInstance");
static_assert(sizeof(UDialogueCharacterAnimInstance) == 0x0003D0, "Wrong size on UDialogueCharacterAnimInstance");
static_assert(offsetof(UDialogueCharacterAnimInstance, AnimationAssets) == 0x000368, "Member 'UDialogueCharacterAnimInstance::AnimationAssets' has a wrong offset!");

// Class UNION.DialogueEventInterface
// 0x0000 (0x0000 - 0x0000)
class IDialogueEventInterface final
{
public:
	void CallDialogueEvent(class FName EventName, bool* Success);
	void CheckMenuMode(bool* MenuMode);
	void Destroy();
	void EndMenuMode();
	void GetDialogueEventManager(class ADialogueEventManagerBase** Manager);
	void IsComplete(bool* Complete);
	bool IsDestroyed();
	void IsFirstStarted(bool* Started);
	void SetMenuText(const class FText& TextMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogueEventInterface">();
	}
	static class IDialogueEventInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDialogueEventInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IDialogueEventInterface) == 0x000001, "Wrong alignment on IDialogueEventInterface");
static_assert(sizeof(IDialogueEventInterface) == 0x000001, "Wrong size on IDialogueEventInterface");

// Class UNION.DialogueEventUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UDialogueEventUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CheckDodonpaEventCondition(EEventCondition Condition, EGrandPrixEventFlag SaveDataFlagId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogueEventUtilityLibrary">();
	}
	static class UDialogueEventUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogueEventUtilityLibrary>();
	}
};
static_assert(alignof(UDialogueEventUtilityLibrary) == 0x000008, "Wrong alignment on UDialogueEventUtilityLibrary");
static_assert(sizeof(UDialogueEventUtilityLibrary) == 0x000028, "Wrong size on UDialogueEventUtilityLibrary");

// Class UNION.DodonpaBase
// 0x0010 (0x02A0 - 0x0290)
class ADodonpaBase final : public AActor
{
public:
	TMulticastInlineDelegate<void()>              OnCommandWaitEndEvent;                             // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void Cast2Enum(class FName AnimStateName, bool* IsValid, EDialogueDodonpaAnimationStateID* State);
	void StartDodonpaMotionIF(const class FName& AnimStateName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DodonpaBase">();
	}
	static class ADodonpaBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADodonpaBase>();
	}
};
static_assert(alignof(ADodonpaBase) == 0x000008, "Wrong alignment on ADodonpaBase");
static_assert(sizeof(ADodonpaBase) == 0x0002A0, "Wrong size on ADodonpaBase");
static_assert(offsetof(ADodonpaBase, OnCommandWaitEndEvent) == 0x000290, "Member 'ADodonpaBase::OnCommandWaitEndEvent' has a wrong offset!");

// Class UNION.GrandPrixDisplayWidget
// 0x0000 (0x02E0 - 0x02E0)
class UGrandPrixDisplayWidget final : public UDodonpaEventDisplayWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GrandPrixDisplayWidget">();
	}
	static class UGrandPrixDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGrandPrixDisplayWidget>();
	}
};
static_assert(alignof(UGrandPrixDisplayWidget) == 0x000008, "Wrong alignment on UGrandPrixDisplayWidget");
static_assert(sizeof(UGrandPrixDisplayWidget) == 0x0002E0, "Wrong size on UGrandPrixDisplayWidget");

// Class UNION.DodonpaEventState
// 0x0008 (0x0130 - 0x0128)
class UDodonpaEventState : public UMenuSequenceSubStateBase
{
public:
	class ACameraActor*                           EventCamera;                                       // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DestroyEventCamera();
	void SetDodonpaEventStatus(class FName InCallEventName, EGrandPrixEventFlag InSaveDataFlagId, EMenuSequenceBGM InBGMId);
	void SpawnEventCamera(const struct FTransform& CameraTransform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DodonpaEventState">();
	}
	static class UDodonpaEventState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDodonpaEventState>();
	}
};
static_assert(alignof(UDodonpaEventState) == 0x000008, "Wrong alignment on UDodonpaEventState");
static_assert(sizeof(UDodonpaEventState) == 0x000130, "Wrong size on UDodonpaEventState");
static_assert(offsetof(UDodonpaEventState, EventCamera) == 0x000128, "Member 'UDodonpaEventState::EventCamera' has a wrong offset!");

// Class UNION.DriverDataUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UDriverDataUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CheckNewSkinExist(const EDriverId InDriverId);
	static void Debug_SetAllDriverSelectable(bool bSetNewFlag);
	static TMap<int32, EDriverId> DownSortIntDriverIdMap(const TMap<int32, EDriverId>& Map);
	static int32 GetCharaSelectIndexByDriverId(EDriverId InDriverId);
	static void GetDriverData(const EDriverId InDriverId, struct FDriverData* OutDriverData);
	static TSoftObjectPtr<class UTexture2D> GetDriverIconSoftTexture2D(EDriverId DriverId, bool IsRival);
	static EDriverId GetDriverIdByCharaSelectIndex(int32 InCharaSelectIndex);
	static class FText GetDriverNameText(EDriverId DriverId);
	static EDriverId GetOriginalDriverId(EDriverId InDriverId);
	static void GetSkinCharaSelectIndexArray(const int32 InCharaSelectIndex, const bool bInCheckSelectable, TArray<int32>* OutSkinCharaSelectIndexArray);
	static void GetSkinDriverIdArray(const EDriverId InDriverId, const bool bInCheckSelectable, TArray<EDriverId>* OutSkinDriverIdArray);
	static void InitUserDriverData();
	static bool IsSkinDriverId(const EDriverId InDriverId);
	static bool LoadDriverVoice();
	static bool UnloadDriverVoice();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DriverDataUtilityLibrary">();
	}
	static class UDriverDataUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDriverDataUtilityLibrary>();
	}
};
static_assert(alignof(UDriverDataUtilityLibrary) == 0x000008, "Wrong alignment on UDriverDataUtilityLibrary");
static_assert(sizeof(UDriverDataUtilityLibrary) == 0x000028, "Wrong size on UDriverDataUtilityLibrary");

// Class UNION.TopMenuScene
// 0x0088 (0x0460 - 0x03D8)
class UTopMenuScene : public UUnionUISceneBase
{
public:
	TArray<class UTopMenuPlayModeButton*>         PlayModeButtonArr;                                 // 0x03D8(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UTopMenuGameModeMenu*                   GameModeMenu;                                      // 0x03E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonMenuSubMenu*                     SubMenu;                                           // 0x03F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BtnPlay_In;                                        // 0x03F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BtnPlay_Loop;                                      // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BtnPlay_Out;                                       // 0x0408(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BtnPlay_to_BtnMode;                                // 0x0410(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BtnMode_Loop;                                      // 0x0418(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BtnMode_Change_Out;                                // 0x0420(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BtnMode_Change_In;                                 // 0x0428(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BtnMode_to_BtnPlay;                                // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BtnMode_Out;                                       // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugUnLockWireless;                               // 0x0440(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETopMenuSequenceState                         TopMenuState;                                      // 0x0441(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_442[0x6];                                      // 0x0442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIButtonsPanel*                   PlayModeButtonsPanel;                              // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButtonsPanel*                   PlayerNumButtonsPanel;                             // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButtonsPanel*                   GameModeButtonsPanel;                              // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool CalcTopMenuSequenceSubMenu(ETopMenuSequenceState PrevSequence);
	ECommonMenuButtonType CalcTopMenuSequenceSubMenuToCommonMenuButtonType(ETopMenuSequenceState PrevSequence);
	void InitializeGameMode(const ETopMenuPlayMode PlayMode, const TArray<ETopMenuGameMode>& BeltButtonTypeArr, ETopMenuSequenceState PrevState);
	void InitializeModeMenu(const ETopMenuPlayMode PlayMode, const TArray<ETopMenuGameMode>& BeltButtonTypeArr);
	void InitializePlayerNum();
	void InitializePlayMode(ETopMenuSequenceState PrevState);
	void InitializeTopMenu(ETopMenuSequenceState InitState);
	void PlayAnimationIn();
	void PlayAnimationLoop();
	void PlayAnimationOut();
	void SetIconGameMode(const ETopMenuPlayMode PlayMode);
	void SetTextGameModeTitle(const ETopMenuPlayMode PlayMode);
	void SetTextModeInfo(const class FText& InText);
	void SetTopMenuSequenceState(ETopMenuSequenceState State);
	void SetupGameMode();
	void SetupPlayerNum();
	void SetupPlayMode(const TArray<ETopMenuPlayMode>& TopMenuPlayModeArr);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TopMenuScene">();
	}
	static class UTopMenuScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTopMenuScene>();
	}
};
static_assert(alignof(UTopMenuScene) == 0x000008, "Wrong alignment on UTopMenuScene");
static_assert(sizeof(UTopMenuScene) == 0x000460, "Wrong size on UTopMenuScene");
static_assert(offsetof(UTopMenuScene, PlayModeButtonArr) == 0x0003D8, "Member 'UTopMenuScene::PlayModeButtonArr' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, GameModeMenu) == 0x0003E8, "Member 'UTopMenuScene::GameModeMenu' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, SubMenu) == 0x0003F0, "Member 'UTopMenuScene::SubMenu' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, BtnPlay_In) == 0x0003F8, "Member 'UTopMenuScene::BtnPlay_In' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, BtnPlay_Loop) == 0x000400, "Member 'UTopMenuScene::BtnPlay_Loop' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, BtnPlay_Out) == 0x000408, "Member 'UTopMenuScene::BtnPlay_Out' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, BtnPlay_to_BtnMode) == 0x000410, "Member 'UTopMenuScene::BtnPlay_to_BtnMode' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, BtnMode_Loop) == 0x000418, "Member 'UTopMenuScene::BtnMode_Loop' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, BtnMode_Change_Out) == 0x000420, "Member 'UTopMenuScene::BtnMode_Change_Out' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, BtnMode_Change_In) == 0x000428, "Member 'UTopMenuScene::BtnMode_Change_In' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, BtnMode_to_BtnPlay) == 0x000430, "Member 'UTopMenuScene::BtnMode_to_BtnPlay' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, BtnMode_Out) == 0x000438, "Member 'UTopMenuScene::BtnMode_Out' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, DebugUnLockWireless) == 0x000440, "Member 'UTopMenuScene::DebugUnLockWireless' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, TopMenuState) == 0x000441, "Member 'UTopMenuScene::TopMenuState' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, PlayModeButtonsPanel) == 0x000448, "Member 'UTopMenuScene::PlayModeButtonsPanel' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, PlayerNumButtonsPanel) == 0x000450, "Member 'UTopMenuScene::PlayerNumButtonsPanel' has a wrong offset!");
static_assert(offsetof(UTopMenuScene, GameModeButtonsPanel) == 0x000458, "Member 'UTopMenuScene::GameModeButtonsPanel' has a wrong offset!");

// Class UNION.DriverVoicePlayer
// 0x0000 (0x0000 - 0x0000)
class IDriverVoicePlayer final
{
public:
	void ActivateVoice();
	void DeactivateVoice();
	void DestroyVoicePlayer();
	void SetupVoicePlayer(class AActor* InOwner, const EDriverId InDriverId);

	float GetVoiceDuration(const EDriverVoiceId InDriverVoiceId) const;
	void PlayVoice(const EDriverVoiceId InDriverVoiceId, const ESoundPan InSoundPan) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DriverVoicePlayer">();
	}
	static class IDriverVoicePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDriverVoicePlayer>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IDriverVoicePlayer) == 0x000001, "Wrong alignment on IDriverVoicePlayer");
static_assert(sizeof(IDriverVoicePlayer) == 0x000001, "Wrong size on IDriverVoicePlayer");

// Class UNION.DummyWidget
// 0x0000 (0x0480 - 0x0480)
class UDummyWidget final : public UUnionUIButtonBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DummyWidget">();
	}
	static class UDummyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDummyWidget>();
	}
};
static_assert(alignof(UDummyWidget) == 0x000008, "Wrong alignment on UDummyWidget");
static_assert(sizeof(UDummyWidget) == 0x000480, "Wrong size on UDummyWidget");

// Class UNION.EndingCongratsState
// 0x0040 (0x0168 - 0x0128)
class UEndingCongratsState final : public UMenuSequenceSubStateBase
{
public:
	TSoftClassPtr<class UClass>                   _CongratsWidgetClass;                              // 0x0128(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEndingCongratsWidget*                  _CongratsWidget;                                   // 0x0150(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuInputRecieveObject*                _InputReceiver;                                    // 0x0158(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_160[0x8];                                      // 0x0160(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAcceptKeyPressed(class UObject* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EndingCongratsState">();
	}
	static class UEndingCongratsState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEndingCongratsState>();
	}
};
static_assert(alignof(UEndingCongratsState) == 0x000008, "Wrong alignment on UEndingCongratsState");
static_assert(sizeof(UEndingCongratsState) == 0x000168, "Wrong size on UEndingCongratsState");
static_assert(offsetof(UEndingCongratsState, _CongratsWidgetClass) == 0x000128, "Member 'UEndingCongratsState::_CongratsWidgetClass' has a wrong offset!");
static_assert(offsetof(UEndingCongratsState, _CongratsWidget) == 0x000150, "Member 'UEndingCongratsState::_CongratsWidget' has a wrong offset!");
static_assert(offsetof(UEndingCongratsState, _InputReceiver) == 0x000158, "Member 'UEndingCongratsState::_InputReceiver' has a wrong offset!");

// Class UNION.EndingRewardState
// 0x0050 (0x0178 - 0x0128)
class UEndingRewardState final : public UMenuSequenceSubStateBase
{
public:
	TSoftClassPtr<class UClass>                   _RewardGetWindowClass;                             // 0x0128(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _RewardGetWindowTitleText;                         // 0x0150(0x0010)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class URewardGetWindow*                       _RewardGetWindow;                                  // 0x0160(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuInputRecieveObject*                _InputReceiver;                                    // 0x0168(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_170[0x8];                                      // 0x0170(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAcceptKeyPressed(class UObject* Object);
	void OnFadeEnd(EUnionUIFadeDirection Direction);
	void OnRewardGetWindowClosed();
	void OnRewardGetWindowOpened();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EndingRewardState">();
	}
	static class UEndingRewardState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEndingRewardState>();
	}
};
static_assert(alignof(UEndingRewardState) == 0x000008, "Wrong alignment on UEndingRewardState");
static_assert(sizeof(UEndingRewardState) == 0x000178, "Wrong size on UEndingRewardState");
static_assert(offsetof(UEndingRewardState, _RewardGetWindowClass) == 0x000128, "Member 'UEndingRewardState::_RewardGetWindowClass' has a wrong offset!");
static_assert(offsetof(UEndingRewardState, _RewardGetWindowTitleText) == 0x000150, "Member 'UEndingRewardState::_RewardGetWindowTitleText' has a wrong offset!");
static_assert(offsetof(UEndingRewardState, _RewardGetWindow) == 0x000160, "Member 'UEndingRewardState::_RewardGetWindow' has a wrong offset!");
static_assert(offsetof(UEndingRewardState, _InputReceiver) == 0x000168, "Member 'UEndingRewardState::_InputReceiver' has a wrong offset!");

// Class UNION.EndingStaffrollState
// 0x0050 (0x0178 - 0x0128)
class UEndingStaffrollState final : public UMenuSequenceSubStateBase
{
public:
	TSoftClassPtr<class UClass>                   _StaffrollComponentClass;                          // 0x0128(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _DataTableUnionDirectoryNo;                        // 0x0150(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _HoldTimeSecondsRequiredForSkipping;               // 0x0154(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaffrollTextDataTableLoader*          _StaffrollTextDataLoader;                          // 0x0158(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaffrollComponent*                    _StaffrollComponent;                               // 0x0160(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMenuInputRecieveObject*                _InputReceiver;                                    // 0x0168(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x8];                                      // 0x0170(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackKeyPressed(class UObject* Object);
	void OnBackKeyReleased(class UObject* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EndingStaffrollState">();
	}
	static class UEndingStaffrollState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEndingStaffrollState>();
	}
};
static_assert(alignof(UEndingStaffrollState) == 0x000008, "Wrong alignment on UEndingStaffrollState");
static_assert(sizeof(UEndingStaffrollState) == 0x000178, "Wrong size on UEndingStaffrollState");
static_assert(offsetof(UEndingStaffrollState, _StaffrollComponentClass) == 0x000128, "Member 'UEndingStaffrollState::_StaffrollComponentClass' has a wrong offset!");
static_assert(offsetof(UEndingStaffrollState, _DataTableUnionDirectoryNo) == 0x000150, "Member 'UEndingStaffrollState::_DataTableUnionDirectoryNo' has a wrong offset!");
static_assert(offsetof(UEndingStaffrollState, _HoldTimeSecondsRequiredForSkipping) == 0x000154, "Member 'UEndingStaffrollState::_HoldTimeSecondsRequiredForSkipping' has a wrong offset!");
static_assert(offsetof(UEndingStaffrollState, _StaffrollTextDataLoader) == 0x000158, "Member 'UEndingStaffrollState::_StaffrollTextDataLoader' has a wrong offset!");
static_assert(offsetof(UEndingStaffrollState, _StaffrollComponent) == 0x000160, "Member 'UEndingStaffrollState::_StaffrollComponent' has a wrong offset!");
static_assert(offsetof(UEndingStaffrollState, _InputReceiver) == 0x000168, "Member 'UEndingStaffrollState::_InputReceiver' has a wrong offset!");

// Class UNION.ErrorWatcherActor
// 0x0008 (0x0298 - 0x0290)
class AErrorWatcherActor final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ErrorWatcherActor">();
	}
	static class AErrorWatcherActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AErrorWatcherActor>();
	}
};
static_assert(alignof(AErrorWatcherActor) == 0x000008, "Wrong alignment on AErrorWatcherActor");
static_assert(sizeof(AErrorWatcherActor) == 0x000298, "Wrong size on AErrorWatcherActor");

// Class UNION.EventEndInfoWidgetBase
// 0x0000 (0x02E0 - 0x02E0)
class UEventEndInfoWidgetBase : public UUserWidget
{
public:
	class FString FormatDateTime(const struct FDateTime& DateTime, const class FString& Format);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEndInfoWidgetBase">();
	}
	static class UEventEndInfoWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEndInfoWidgetBase>();
	}
};
static_assert(alignof(UEventEndInfoWidgetBase) == 0x000008, "Wrong alignment on UEventEndInfoWidgetBase");
static_assert(sizeof(UEventEndInfoWidgetBase) == 0x0002E0, "Wrong size on UEventEndInfoWidgetBase");

// Class UNION.EventStateAfterEnding
// 0x0000 (0x0108 - 0x0108)
class UEventStateAfterEnding final : public URaceEndingSequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventStateAfterEnding">();
	}
	static class UEventStateAfterEnding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventStateAfterEnding>();
	}
};
static_assert(alignof(UEventStateAfterEnding) == 0x000008, "Wrong alignment on UEventStateAfterEnding");
static_assert(sizeof(UEventStateAfterEnding) == 0x000108, "Wrong size on UEventStateAfterEnding");

// Class UNION.ExternalFileLibrary
// 0x0000 (0x0028 - 0x0028)
class UExternalFileLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ReadP4ChangelistFromFile(class FString* OutChangeList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExternalFileLibrary">();
	}
	static class UExternalFileLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExternalFileLibrary>();
	}
};
static_assert(alignof(UExternalFileLibrary) == 0x000008, "Wrong alignment on UExternalFileLibrary");
static_assert(sizeof(UExternalFileLibrary) == 0x000028, "Wrong size on UExternalFileLibrary");

// Class UNION.ExtraMenuSceneBase
// 0x0008 (0x03E0 - 0x03D8)
class UExtraMenuSceneBase final : public UUnionUISceneBase
{
public:
	EOptionSequenceMainState                      ExtraMenuType;                                     // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChangeControllerInputType(EAppControllerInputType BeforeType, EAppControllerInputType AfterType);
	class UWidget* OnExecButtonNavigation(EUINavigation Direction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExtraMenuSceneBase">();
	}
	static class UExtraMenuSceneBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExtraMenuSceneBase>();
	}
};
static_assert(alignof(UExtraMenuSceneBase) == 0x000008, "Wrong alignment on UExtraMenuSceneBase");
static_assert(sizeof(UExtraMenuSceneBase) == 0x0003E0, "Wrong size on UExtraMenuSceneBase");
static_assert(offsetof(UExtraMenuSceneBase, ExtraMenuType) == 0x0003D8, "Member 'UExtraMenuSceneBase::ExtraMenuType' has a wrong offset!");

// Class UNION.FestaBonusPointData
// 0x0018 (0x0040 - 0x0028)
class UFestaBonusPointData final : public UObject
{
public:
	int32                                         GaugePoint;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTime;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              endTime;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Destroy();
	void FetchDataUpdate();
	void Setup();
	void StartFechDataUpdate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaBonusPointData">();
	}
	static class UFestaBonusPointData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFestaBonusPointData>();
	}
};
static_assert(alignof(UFestaBonusPointData) == 0x000008, "Wrong alignment on UFestaBonusPointData");
static_assert(sizeof(UFestaBonusPointData) == 0x000040, "Wrong size on UFestaBonusPointData");
static_assert(offsetof(UFestaBonusPointData, GaugePoint) == 0x000028, "Member 'UFestaBonusPointData::GaugePoint' has a wrong offset!");
static_assert(offsetof(UFestaBonusPointData, StartTime) == 0x000030, "Member 'UFestaBonusPointData::StartTime' has a wrong offset!");
static_assert(offsetof(UFestaBonusPointData, endTime) == 0x000038, "Member 'UFestaBonusPointData::endTime' has a wrong offset!");

// Class UNION.FestaCorseLotteryWheel
// 0x0000 (0x1418 - 0x1418)
class UFestaCorseLotteryWheel final : public UCorseLotteryWheelBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaCorseLotteryWheel">();
	}
	static class UFestaCorseLotteryWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFestaCorseLotteryWheel>();
	}
};
static_assert(alignof(UFestaCorseLotteryWheel) == 0x000008, "Wrong alignment on UFestaCorseLotteryWheel");
static_assert(sizeof(UFestaCorseLotteryWheel) == 0x001418, "Wrong size on UFestaCorseLotteryWheel");

// Class UNION.FestaInfoWidgetBase
// 0x05D0 (0x08B0 - 0x02E0)
class UFestaInfoWidgetBase : public UUserWidget
{
public:
	TDelegate<void(bool bWasSuccessful, const TArray<class FString>& ExternalIds, const TArray<class FString>& ConvertedIds)> ExternalIdMappingsCompleteDelegate; // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TDelegate<void(bool bWasSuccessful)>          PFFriendReadCompleteDelegate;                      // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_300[0x468];                                    // 0x0300(0x0468)(Fixing Size After Last Property [ Dumper-7 ])
	EEventInfomationType                          InfomationType;                                    // 0x0768(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_769[0x7];                                      // 0x0769(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventInfoScheduleData                 EventInfoScheduleData;                             // 0x0770(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FEventInfoTitleText                    EventInfoTitleText;                                // 0x0798(0x0060)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFestaPointRewardUIData>        PointRewardData;                                   // 0x07F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UUserWidget*                            WBP_StatusInfo_Sub_Point_Reward;                   // 0x0808(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            WBP_EventEndInfo_Sub_Details;                      // 0x0810(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEventInfoRanking*                      WBP_StatusInfo_Sub_Ranking;                        // 0x0818(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEventInfoRanking*                      WBP_StatusInfo_Sub_Ranking_Friend;                 // 0x0820(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            WBP_StatusInfo_Sub_Honor;                          // 0x0828(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            WBP_StatusInfo_Sub_RaceRule;                       // 0x0830(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            WBP_StasusInfo_Sub_RaceRuleDetail;                 // 0x0838(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStatusInfoPlayerDetail*                WBP_StatusInfo_PlayerDetail;                       // 0x0840(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AUnionCrossPlayResolveWindowManager> CrossPlayResolveUIManagerClass;           // 0x0848(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AUnionCrossPlayResolveWindowManager*    m_CrossPlayResolveUIManager;                       // 0x0850(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<EEventInfoWidgetPageCategory>          EnablePageCategoryArray;                           // 0x0858(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         CurrentArrayIndex;                                 // 0x0868(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelectRuleIndex;                                   // 0x086C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableInput;                                       // 0x0870(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableInputRankingPage;                            // 0x0871(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableInputPlatformSwitch;                         // 0x0872(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_873[0x5];                                      // 0x0873(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFestaRuleInfomation>           RuleInfo;                                          // 0x0878(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          IsRankingAllPlatform;                              // 0x0888(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_889[0x27];                                     // 0x0889(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanEnablePlatformSwitch();
	void ClearInputWaitTimer();
	void ClearRankingDownKeyWaitTimer();
	void ClearRankingUpKeyWaitTimer();
	void ClearRequestWaitTimer();
	void Close();
	void DisplayPFProfile(const class FString& PlatformUserId);
	void DisplayRankingUserNote();
	class FString FormatDateTime(const struct FDateTime& DateTime, const class FString& Format);
	EEventInfoWidgetPageCategory GetCurrentPage();
	void GetOpenUserNoteTargetData(class FString* outPlatformUserID, class FString* ServerPFCode);
	int32 GetTabIndex();
	bool IsDispPFButton(const class FString& TagetServerPFCode);
	bool IsEnablePlatformSwitch();
	void OnCompleteMakePlatformPuidList(bool bWasSuccessful, const TArray<class FString>& ExternalIds, const TArray<class FString>& ConvertedIds);
	void OnPFFriendReadComplete(bool bWasSuccessful);
	void OnPlatformCrossPlayResolveComplete();
	void OnRankingDownKeyLoopInput();
	void OnRankingDownKeyWaitEnd();
	void OnRankingUpKeyLoopInput();
	void OnRankingUpKeyWaitEnd();
	void Open();
	void ReleaseAllInputLoop();
	void ReleaseDownKey();
	void ReleaseLeftKey();
	void ReleaseLeftShoulder();
	void ReleaseRightKey();
	void ReleaseRightShoulder();
	void ReleaseUpKey();
	void SelectFriendRanking();
	void SelectNextRule();
	void SelectPrevRule();
	void SelectRuleDirectly(int32 RuleIndex);
	void SelectWorldRanking();
	void SetFooterSetting(EEventInfoWidgetPageCategory NextPage);
	void SetInfomationType(EEventInfomationType InInfomationType);
	void SetNextPage();
	void SetPage(EEventInfoWidgetPageCategory NextPage, int32 TabIndex);
	void SetPageDirectly(int32 TabIndex);
	void SetPrevPage();
	void SetTitleText(const class FText& RuleTitle, const class FText& PointRewardTitle, const class FText& WorldRankingTitle, const class FText& FriendRankingTitle, const class FText& OtherTitle, const class FText& FinalResultTitle);
	void SetupFinalResult(int32 Ranking, int32 Point, class UTexture2D* TextureBG);
	void SetupFriendRanking();
	void SetupOtherResult(const TArray<struct FFestaStreakRewardUIData>& InStreakRewardData, const TArray<struct FFestaRankingRewardUIData>& InRankingRewardData);
	void SetupPointResult(int32 Point, const TArray<struct FFestaPointRewardUIData>& InPointRewardData, class UTexture2D* TextureBG);
	void SetupRankingClac();
	void SetupRuleInfomation(EGroupRaceRule DefaultRule, const TArray<struct FFestaRuleInfomation>& RuleDataArray);
	void SetupShedule(const struct FDateTime& StartTime, const struct FDateTime& endTime);
	void SetupTab();
	void SetupWorldRanking();
	void StartDownKeyPress();
	void StartLeftKeyPress();
	void StartLeftShoulderPress();
	void StartRankingDownKeyWaitTimer();
	void StartRankingUpKeyWaitTimer();
	void StartRightKeyPress();
	void StartRightShoulderPress();
	void StartUpKeyPress();

	bool IsDownKeyPressLoop() const;
	bool IsLeftKeyPressLoop() const;
	bool IsLeftShoulderPressLoop() const;
	bool IsRightKeyPressLoop() const;
	bool IsRightShoulderPressLoop() const;
	bool IsUpKeyPressLoop() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaInfoWidgetBase">();
	}
	static class UFestaInfoWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFestaInfoWidgetBase>();
	}
};
static_assert(alignof(UFestaInfoWidgetBase) == 0x000008, "Wrong alignment on UFestaInfoWidgetBase");
static_assert(sizeof(UFestaInfoWidgetBase) == 0x0008B0, "Wrong size on UFestaInfoWidgetBase");
static_assert(offsetof(UFestaInfoWidgetBase, ExternalIdMappingsCompleteDelegate) == 0x0002E0, "Member 'UFestaInfoWidgetBase::ExternalIdMappingsCompleteDelegate' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, PFFriendReadCompleteDelegate) == 0x0002F0, "Member 'UFestaInfoWidgetBase::PFFriendReadCompleteDelegate' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, InfomationType) == 0x000768, "Member 'UFestaInfoWidgetBase::InfomationType' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, EventInfoScheduleData) == 0x000770, "Member 'UFestaInfoWidgetBase::EventInfoScheduleData' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, EventInfoTitleText) == 0x000798, "Member 'UFestaInfoWidgetBase::EventInfoTitleText' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, PointRewardData) == 0x0007F8, "Member 'UFestaInfoWidgetBase::PointRewardData' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, WBP_StatusInfo_Sub_Point_Reward) == 0x000808, "Member 'UFestaInfoWidgetBase::WBP_StatusInfo_Sub_Point_Reward' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, WBP_EventEndInfo_Sub_Details) == 0x000810, "Member 'UFestaInfoWidgetBase::WBP_EventEndInfo_Sub_Details' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, WBP_StatusInfo_Sub_Ranking) == 0x000818, "Member 'UFestaInfoWidgetBase::WBP_StatusInfo_Sub_Ranking' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, WBP_StatusInfo_Sub_Ranking_Friend) == 0x000820, "Member 'UFestaInfoWidgetBase::WBP_StatusInfo_Sub_Ranking_Friend' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, WBP_StatusInfo_Sub_Honor) == 0x000828, "Member 'UFestaInfoWidgetBase::WBP_StatusInfo_Sub_Honor' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, WBP_StatusInfo_Sub_RaceRule) == 0x000830, "Member 'UFestaInfoWidgetBase::WBP_StatusInfo_Sub_RaceRule' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, WBP_StasusInfo_Sub_RaceRuleDetail) == 0x000838, "Member 'UFestaInfoWidgetBase::WBP_StasusInfo_Sub_RaceRuleDetail' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, WBP_StatusInfo_PlayerDetail) == 0x000840, "Member 'UFestaInfoWidgetBase::WBP_StatusInfo_PlayerDetail' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, CrossPlayResolveUIManagerClass) == 0x000848, "Member 'UFestaInfoWidgetBase::CrossPlayResolveUIManagerClass' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, m_CrossPlayResolveUIManager) == 0x000850, "Member 'UFestaInfoWidgetBase::m_CrossPlayResolveUIManager' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, EnablePageCategoryArray) == 0x000858, "Member 'UFestaInfoWidgetBase::EnablePageCategoryArray' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, CurrentArrayIndex) == 0x000868, "Member 'UFestaInfoWidgetBase::CurrentArrayIndex' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, SelectRuleIndex) == 0x00086C, "Member 'UFestaInfoWidgetBase::SelectRuleIndex' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, EnableInput) == 0x000870, "Member 'UFestaInfoWidgetBase::EnableInput' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, EnableInputRankingPage) == 0x000871, "Member 'UFestaInfoWidgetBase::EnableInputRankingPage' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, EnableInputPlatformSwitch) == 0x000872, "Member 'UFestaInfoWidgetBase::EnableInputPlatformSwitch' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, RuleInfo) == 0x000878, "Member 'UFestaInfoWidgetBase::RuleInfo' has a wrong offset!");
static_assert(offsetof(UFestaInfoWidgetBase, IsRankingAllPlatform) == 0x000888, "Member 'UFestaInfoWidgetBase::IsRankingAllPlatform' has a wrong offset!");

// Class UNION.FestaLobbyContext
// 0x00A8 (0x04F0 - 0x0448)
class UFestaLobbyContext final : public UCommonLobbyContext
{
public:
	uint8                                         Pad_448[0xA8];                                     // 0x0448(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetBonusChanceData(int32* BonusChanceType, int32* BonusChanceParam);
	bool IsAddMemberComplete2();
	void OnFestaTopComplete(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	bool SyncBonusChanceData(const struct FCommon_FestaBonusChanceData& BonusChanceData);
	void SyncFestaRule(int32 festaId, int32 DefaultRuleId, TDelegate<void(bool bWasSuccessful, const struct FFestaFestaTopResponse& FestaInfo)> OnComplete);

	void DebugGetFestaTopResponse(struct FFestaFestaTopResponse* Response) const;
	void DebugGetRecvFestaDataUserIds(TArray<class FString>* UserIds) const;
	bool DebugGetSyncFestaData() const;
	void GetTeamMemberFromIndex(int32 TeamIndex, TArray<class FString>* MemberIds) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaLobbyContext">();
	}
	static class UFestaLobbyContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFestaLobbyContext>();
	}
};
static_assert(alignof(UFestaLobbyContext) == 0x000008, "Wrong alignment on UFestaLobbyContext");
static_assert(sizeof(UFestaLobbyContext) == 0x0004F0, "Wrong size on UFestaLobbyContext");

// Class UNION.SceneCaptureComponentEx
// 0x00B0 (0x0BA0 - 0x0AF0)
#pragma pack(push, 0x1)
class alignas(0x10) USceneCaptureComponentEx : public USceneCaptureComponent2D
{
public:
	uint8                                         Pad_AF0[0x78];                                     // 0x0AF0(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         OwnerMeshComponent_;                               // 0x0B68(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               MaterialInstance_;                                 // 0x0B70(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B78[0x20];                                     // 0x0B78(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SceneCaptureComponentEx">();
	}
	static class USceneCaptureComponentEx* GetDefaultObj()
	{
		return GetDefaultObjImpl<USceneCaptureComponentEx>();
	}
};
#pragma pack(pop)
static_assert(alignof(USceneCaptureComponentEx) == 0x000010, "Wrong alignment on USceneCaptureComponentEx");
static_assert(sizeof(USceneCaptureComponentEx) == 0x000BA0, "Wrong size on USceneCaptureComponentEx");
static_assert(offsetof(USceneCaptureComponentEx, OwnerMeshComponent_) == 0x000B68, "Member 'USceneCaptureComponentEx::OwnerMeshComponent_' has a wrong offset!");
static_assert(offsetof(USceneCaptureComponentEx, MaterialInstance_) == 0x000B70, "Member 'USceneCaptureComponentEx::MaterialInstance_' has a wrong offset!");

// Class UNION.UnionShortcutComponent
// 0x0020 (0x0BC0 - 0x0BA0)
class UUnionShortcutComponent final : public USceneCaptureComponentEx
{
public:
	class AActor*                                 OwnerRingActor_;                                   // 0x0B98(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 Source_;                                           // 0x0BA0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 Destination_;                                      // 0x0BA8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ShortcutId_;                                       // 0x0BB0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BB4[0xC];                                      // 0x0BB4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionShortcutComponent">();
	}
	static class UUnionShortcutComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionShortcutComponent>();
	}
};
static_assert(alignof(UUnionShortcutComponent) == 0x000010, "Wrong alignment on UUnionShortcutComponent");
static_assert(sizeof(UUnionShortcutComponent) == 0x000BC0, "Wrong size on UUnionShortcutComponent");
static_assert(offsetof(UUnionShortcutComponent, OwnerRingActor_) == 0x000B98, "Member 'UUnionShortcutComponent::OwnerRingActor_' has a wrong offset!");
static_assert(offsetof(UUnionShortcutComponent, Source_) == 0x000BA0, "Member 'UUnionShortcutComponent::Source_' has a wrong offset!");
static_assert(offsetof(UUnionShortcutComponent, Destination_) == 0x000BA8, "Member 'UUnionShortcutComponent::Destination_' has a wrong offset!");
static_assert(offsetof(UUnionShortcutComponent, ShortcutId_) == 0x000BB0, "Member 'UUnionShortcutComponent::ShortcutId_' has a wrong offset!");

// Class UNION.FestaLobbyMemberContext
// 0x0010 (0x0100 - 0x00F0)
class UFestaLobbyMemberContext final : public UCommonLobbyMemberContext
{
public:
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SendEntryRaceIdForFesta(const class FString& InEntryRaceId, const struct FCommon_FestaBonusChanceData& BonusChanceData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaLobbyMemberContext">();
	}
	static class UFestaLobbyMemberContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFestaLobbyMemberContext>();
	}
};
static_assert(alignof(UFestaLobbyMemberContext) == 0x000008, "Wrong alignment on UFestaLobbyMemberContext");
static_assert(sizeof(UFestaLobbyMemberContext) == 0x000100, "Wrong size on UFestaLobbyMemberContext");

// Class UNION.FestaMatchmakingContext
// 0x0010 (0x0280 - 0x0270)
class UFestaMatchmakingContext final : public UCommonMatchmakingContext
{
public:
	uint8                                         Pad_270[0x10];                                     // 0x0270(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaMatchmakingContext">();
	}
	static class UFestaMatchmakingContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFestaMatchmakingContext>();
	}
};
static_assert(alignof(UFestaMatchmakingContext) == 0x000008, "Wrong alignment on UFestaMatchmakingContext");
static_assert(sizeof(UFestaMatchmakingContext) == 0x000280, "Wrong size on UFestaMatchmakingContext");

// Class UNION.FestaRuleInfoWidgetBase
// 0x0010 (0x0338 - 0x0328)
class UFestaRuleInfoWidgetBase : public UUnionUIInputWidget
{
public:
	TMulticastInlineDelegate<void()>              DisplayEndDelegate;                                // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	bool CanWidgetClose();
	bool CanWidgetOpen();
	void ExecWidgetClose();
	void ExecWidgetOpen();
	void ForceWidgetClose();
	void SetFixedRule(const struct FFestaRuleInfomation& InFestaFixedRule);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaRuleInfoWidgetBase">();
	}
	static class UFestaRuleInfoWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFestaRuleInfoWidgetBase>();
	}
};
static_assert(alignof(UFestaRuleInfoWidgetBase) == 0x000008, "Wrong alignment on UFestaRuleInfoWidgetBase");
static_assert(sizeof(UFestaRuleInfoWidgetBase) == 0x000338, "Wrong size on UFestaRuleInfoWidgetBase");
static_assert(offsetof(UFestaRuleInfoWidgetBase, DisplayEndDelegate) == 0x000328, "Member 'UFestaRuleInfoWidgetBase::DisplayEndDelegate' has a wrong offset!");

// Class UNION.FestaSignage
// 0x0078 (0x0308 - 0x0290)
class AFestaSignage final : public AActor
{
public:
	bool                                          bIsTopSignage;                                     // 0x0290(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     TransformList;                                     // 0x0298(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             TopSinage;                                         // 0x02A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             LobbySinage;                                       // 0x02D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopMenuNotFestaEmissiveStrength;                   // 0x02F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopMenuStartingEmissiveStrength;                   // 0x02FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FestaLobbyEmissiveStrength;                        // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Setup(bool bInIsTop);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FestaSignage">();
	}
	static class AFestaSignage* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFestaSignage>();
	}
};
static_assert(alignof(AFestaSignage) == 0x000008, "Wrong alignment on AFestaSignage");
static_assert(sizeof(AFestaSignage) == 0x000308, "Wrong size on AFestaSignage");
static_assert(offsetof(AFestaSignage, bIsTopSignage) == 0x000290, "Member 'AFestaSignage::bIsTopSignage' has a wrong offset!");
static_assert(offsetof(AFestaSignage, TransformList) == 0x000298, "Member 'AFestaSignage::TransformList' has a wrong offset!");
static_assert(offsetof(AFestaSignage, TopSinage) == 0x0002A8, "Member 'AFestaSignage::TopSinage' has a wrong offset!");
static_assert(offsetof(AFestaSignage, LobbySinage) == 0x0002D0, "Member 'AFestaSignage::LobbySinage' has a wrong offset!");
static_assert(offsetof(AFestaSignage, TopMenuNotFestaEmissiveStrength) == 0x0002F8, "Member 'AFestaSignage::TopMenuNotFestaEmissiveStrength' has a wrong offset!");
static_assert(offsetof(AFestaSignage, TopMenuStartingEmissiveStrength) == 0x0002FC, "Member 'AFestaSignage::TopMenuStartingEmissiveStrength' has a wrong offset!");
static_assert(offsetof(AFestaSignage, FestaLobbyEmissiveStrength) == 0x000300, "Member 'AFestaSignage::FestaLobbyEmissiveStrength' has a wrong offset!");

// Class UNION.ForceNextSequenceManagerSubsytem
// 0x00B0 (0x00E0 - 0x0030)
class UForceNextSequenceManagerSubsytem final : public UWorldSubsystem
{
public:
	TMulticastInlineDelegate<void()>              OnChangeUnavailableSequence;                       // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CurrentViewportWidgetArray;                        // 0x0060(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UWidget*                                LastFocusedWidget;                                 // 0x0070(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x68];                                      // 0x0078(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddBusyFlagCount();
	void AddPriorityLobbySequenceType(int32 Priority, ELobbySequenceAvailabilityType SequenceType);
	void MinusBusyFlagCount();
	void RemoveCurrentViewportWidget();
	void RemovePriorityLobbySequenceType(int32 Priority);
	void SetInRaceLobbyInvited(bool Invited);
	void SetLobbyInviteAccepted(bool LobbyInvite);
	void SetNotAvailableLobbyInvite(bool NotAvailable);
	void SetPFLobbyInviteAccepted(bool PFLobbyInvite);
	void SetProceedingToLobby(bool ProceedingStatus);

	int32 GetBusyFlag() const;
	ELobbySequenceAvailabilityType GetCurrentLobbySequenceType() const;
	int32 GetIgnoreInputWidgetCount() const;
	bool GetInRaceLobbyInvited() const;
	bool GetIsProceedingToLobby() const;
	bool GetLobbyInviteAccepted() const;
	bool GetNotAvailableLobbyInvite() const;
	bool GetPFLobbyInviteAccepted() const;
	bool GetRestartOnlineSequence() const;
	bool GetReturnToTitleError() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ForceNextSequenceManagerSubsytem">();
	}
	static class UForceNextSequenceManagerSubsytem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UForceNextSequenceManagerSubsytem>();
	}
};
static_assert(alignof(UForceNextSequenceManagerSubsytem) == 0x000008, "Wrong alignment on UForceNextSequenceManagerSubsytem");
static_assert(sizeof(UForceNextSequenceManagerSubsytem) == 0x0000E0, "Wrong size on UForceNextSequenceManagerSubsytem");
static_assert(offsetof(UForceNextSequenceManagerSubsytem, OnChangeUnavailableSequence) == 0x000030, "Member 'UForceNextSequenceManagerSubsytem::OnChangeUnavailableSequence' has a wrong offset!");
static_assert(offsetof(UForceNextSequenceManagerSubsytem, CurrentViewportWidgetArray) == 0x000060, "Member 'UForceNextSequenceManagerSubsytem::CurrentViewportWidgetArray' has a wrong offset!");
static_assert(offsetof(UForceNextSequenceManagerSubsytem, LastFocusedWidget) == 0x000070, "Member 'UForceNextSequenceManagerSubsytem::LastFocusedWidget' has a wrong offset!");

// Class UNION.FriendListConfirmWidget
// 0x0038 (0x0428 - 0x03F0)
class UFriendListConfirmWidget final : public UUnionUIPopupWindowBase
{
public:
	TMulticastInlineDelegate<void(int32 InSelectButtonIndex)> ButtonDecisionDelegate;                // 0x03F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EFriendListConfirmWindowButtonType            ButtonType;                                        // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_401[0x3];                                      // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitialButtonIndex;                                // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelectButtonIndex;                                 // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUnionUIButtonBase*>             Buttons;                                           // 0x0410(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	int32                                         PFProfileButtonIndex;                              // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayAnimationIn();
	void SetButtonText(const TArray<class FText>& ButtonText);
	void SetInitialButtonIndex(int32 InButtonIndex);
	void SetListPlayerInfo(const struct FFriendListPlayerInfo& InListPlayerInfo, bool InShowPlayerId);
	void SetMessageText(const class FText& MessageText, const class FText& AttentionText);
	void SetTitleText(const class FText& Text);
	void Setup(EFriendListConfirmWindowButtonType InButtonType, const TArray<class FText>& ButtonText);
	void SetupByData(const struct FFriendListConfirmWidgetData& InData);
	void SetWidgetFocus(class APlayerController* PlayerController, bool bInPlayFocusSound);
	void SstAllButtonFocusable(bool InEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendListConfirmWidget">();
	}
	static class UFriendListConfirmWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendListConfirmWidget>();
	}
};
static_assert(alignof(UFriendListConfirmWidget) == 0x000008, "Wrong alignment on UFriendListConfirmWidget");
static_assert(sizeof(UFriendListConfirmWidget) == 0x000428, "Wrong size on UFriendListConfirmWidget");
static_assert(offsetof(UFriendListConfirmWidget, ButtonDecisionDelegate) == 0x0003F0, "Member 'UFriendListConfirmWidget::ButtonDecisionDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListConfirmWidget, ButtonType) == 0x000400, "Member 'UFriendListConfirmWidget::ButtonType' has a wrong offset!");
static_assert(offsetof(UFriendListConfirmWidget, InitialButtonIndex) == 0x000404, "Member 'UFriendListConfirmWidget::InitialButtonIndex' has a wrong offset!");
static_assert(offsetof(UFriendListConfirmWidget, SelectButtonIndex) == 0x000408, "Member 'UFriendListConfirmWidget::SelectButtonIndex' has a wrong offset!");
static_assert(offsetof(UFriendListConfirmWidget, Buttons) == 0x000410, "Member 'UFriendListConfirmWidget::Buttons' has a wrong offset!");
static_assert(offsetof(UFriendListConfirmWidget, PFProfileButtonIndex) == 0x000420, "Member 'UFriendListConfirmWidget::PFProfileButtonIndex' has a wrong offset!");

// Class UNION.FriendListWidgetDataAsset
// 0x01C0 (0x01F0 - 0x0030)
class UFriendListWidgetDataAsset final : public UDataAsset
{
public:
	TMap<EFriendListCategory, struct FFriendListContentsWidgetData> ContentsWidgetData;              // 0x0030(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EFriendListCommandType, class FText>     SubMenuTextData;                                   // 0x0080(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EFriendListType, struct FFriendListSubMenuWidgetData> SubMenuWidgetData;                    // 0x00D0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EFriendListCommandType, struct FFriendListConfirmWidgetData> ConfirmWidgetData;             // 0x0120(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EFriendListCommandType, struct FFriendListResultWidgetData> ResultWidgetData;               // 0x0170(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFriendListOnlineSettingData>   OnlineSettingData;                                 // 0x01C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           ErrorMessageData;                                  // 0x01D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           PopupWindowTextData;                               // 0x01E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendListWidgetDataAsset">();
	}
	static class UFriendListWidgetDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendListWidgetDataAsset>();
	}
};
static_assert(alignof(UFriendListWidgetDataAsset) == 0x000008, "Wrong alignment on UFriendListWidgetDataAsset");
static_assert(sizeof(UFriendListWidgetDataAsset) == 0x0001F0, "Wrong size on UFriendListWidgetDataAsset");
static_assert(offsetof(UFriendListWidgetDataAsset, ContentsWidgetData) == 0x000030, "Member 'UFriendListWidgetDataAsset::ContentsWidgetData' has a wrong offset!");
static_assert(offsetof(UFriendListWidgetDataAsset, SubMenuTextData) == 0x000080, "Member 'UFriendListWidgetDataAsset::SubMenuTextData' has a wrong offset!");
static_assert(offsetof(UFriendListWidgetDataAsset, SubMenuWidgetData) == 0x0000D0, "Member 'UFriendListWidgetDataAsset::SubMenuWidgetData' has a wrong offset!");
static_assert(offsetof(UFriendListWidgetDataAsset, ConfirmWidgetData) == 0x000120, "Member 'UFriendListWidgetDataAsset::ConfirmWidgetData' has a wrong offset!");
static_assert(offsetof(UFriendListWidgetDataAsset, ResultWidgetData) == 0x000170, "Member 'UFriendListWidgetDataAsset::ResultWidgetData' has a wrong offset!");
static_assert(offsetof(UFriendListWidgetDataAsset, OnlineSettingData) == 0x0001C0, "Member 'UFriendListWidgetDataAsset::OnlineSettingData' has a wrong offset!");
static_assert(offsetof(UFriendListWidgetDataAsset, ErrorMessageData) == 0x0001D0, "Member 'UFriendListWidgetDataAsset::ErrorMessageData' has a wrong offset!");
static_assert(offsetof(UFriendListWidgetDataAsset, PopupWindowTextData) == 0x0001E0, "Member 'UFriendListWidgetDataAsset::PopupWindowTextData' has a wrong offset!");

// Class UNION.FriendListNumberInputWidget
// 0x0040 (0x0418 - 0x03D8)
class UFriendListNumberInputWidget : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(const class FString& InputNumber)> SoftwareKeyboardInputComplete;  // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         InitialButtonIndex;                                // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelectButtonIndex;                                 // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InputFigureMax;                                    // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InputText;                                         // 0x03F8(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TArray<class UUnionUIButtonBase*>             Buttons;                                           // 0x0408(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void EndDetectionOfInputTypeChange();
	int32 GetInputFigureMax();
	void GetInputText(class FText* OutInputText);
	bool IsNumberText(const class FString& InInputText);
	void OnChangeControllerInputType(EAppControllerInputType BeforeType, EAppControllerInputType AfterType);
	void OnFinishedSoftwareKeyboard(const struct FSoftwareKeyboardResult& Result);
	bool OnOpenSoftwareKeyboard(int32 MaxLength, const class FString& DefaultText);
	void PlayAnimationIn();
	void ResetPlayerControllerPressedEvent();
	void SetButtonText(const TArray<class FText>& InButtonText);
	void SetInitialButtonIndex(int32 InButtonIndex);
	void SetInputFigureMax(int32 InInputFigureMax);
	void SetMessageText(const class FText& InMessageText);
	void SetTitleText(const class FText& InTitleText);
	void Setup(const class FText& InTitleText, const class FText& InMessageText, const TArray<class FText>& InButtonText);
	void StartDetectionOfInputTypeChange();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendListNumberInputWidget">();
	}
	static class UFriendListNumberInputWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendListNumberInputWidget>();
	}
};
static_assert(alignof(UFriendListNumberInputWidget) == 0x000008, "Wrong alignment on UFriendListNumberInputWidget");
static_assert(sizeof(UFriendListNumberInputWidget) == 0x000418, "Wrong size on UFriendListNumberInputWidget");
static_assert(offsetof(UFriendListNumberInputWidget, SoftwareKeyboardInputComplete) == 0x0003D8, "Member 'UFriendListNumberInputWidget::SoftwareKeyboardInputComplete' has a wrong offset!");
static_assert(offsetof(UFriendListNumberInputWidget, InitialButtonIndex) == 0x0003E8, "Member 'UFriendListNumberInputWidget::InitialButtonIndex' has a wrong offset!");
static_assert(offsetof(UFriendListNumberInputWidget, SelectButtonIndex) == 0x0003EC, "Member 'UFriendListNumberInputWidget::SelectButtonIndex' has a wrong offset!");
static_assert(offsetof(UFriendListNumberInputWidget, InputFigureMax) == 0x0003F0, "Member 'UFriendListNumberInputWidget::InputFigureMax' has a wrong offset!");
static_assert(offsetof(UFriendListNumberInputWidget, InputText) == 0x0003F8, "Member 'UFriendListNumberInputWidget::InputText' has a wrong offset!");
static_assert(offsetof(UFriendListNumberInputWidget, Buttons) == 0x000408, "Member 'UFriendListNumberInputWidget::Buttons' has a wrong offset!");

// Class UNION.FriendListState
// 0x0020 (0x0148 - 0x0128)
class UFriendListState : public UMenuSequenceSubStateBase
{
public:
	EFriendListCategory                           OpenCategory;                                      // 0x0128(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFriendListWidget*                      FriendListWidget;                                  // 0x0130(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFriendListMainWidget*                  MainWidget;                                        // 0x0138(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnlineSequence;                                  // 0x0140(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSendInvitation;                              // 0x0141(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableAcceptInvitation;                            // 0x0142(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenFriendListWindow;                              // 0x0143(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRejectInvitation;                            // 0x0144(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetCloseByNotLoginEOS();
	bool GetOpenFriendListWindow();
	void OnDestroyFriendListWidget();
	void OnForceEndEvent();
	void SetEnableAcceptInvitation(bool InEnable);
	void SetEnableRejectInvitation(bool InEnable);
	void SetEnableSendInvitation(bool InEnable);
	void SetIsOnlineSequence(bool InEnable);
	void SetOpenCategory(EFriendListCategory InCategory);
	void SetOpenFriendListWindow(bool InEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendListState">();
	}
	static class UFriendListState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendListState>();
	}
};
static_assert(alignof(UFriendListState) == 0x000008, "Wrong alignment on UFriendListState");
static_assert(sizeof(UFriendListState) == 0x000148, "Wrong size on UFriendListState");
static_assert(offsetof(UFriendListState, OpenCategory) == 0x000128, "Member 'UFriendListState::OpenCategory' has a wrong offset!");
static_assert(offsetof(UFriendListState, FriendListWidget) == 0x000130, "Member 'UFriendListState::FriendListWidget' has a wrong offset!");
static_assert(offsetof(UFriendListState, MainWidget) == 0x000138, "Member 'UFriendListState::MainWidget' has a wrong offset!");
static_assert(offsetof(UFriendListState, IsOnlineSequence) == 0x000140, "Member 'UFriendListState::IsOnlineSequence' has a wrong offset!");
static_assert(offsetof(UFriendListState, EnableSendInvitation) == 0x000141, "Member 'UFriendListState::EnableSendInvitation' has a wrong offset!");
static_assert(offsetof(UFriendListState, EnableAcceptInvitation) == 0x000142, "Member 'UFriendListState::EnableAcceptInvitation' has a wrong offset!");
static_assert(offsetof(UFriendListState, OpenFriendListWindow) == 0x000143, "Member 'UFriendListState::OpenFriendListWindow' has a wrong offset!");
static_assert(offsetof(UFriendListState, EnableRejectInvitation) == 0x000144, "Member 'UFriendListState::EnableRejectInvitation' has a wrong offset!");

// Class UNION.FriendListWidget
// 0x0070 (0x0398 - 0x0328)
class UFriendListWidget : public UUnionUIInputWidget
{
public:
	TMulticastInlineDelegate<void()>              DisplayEndDelegate;                                // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              LobbyIdGetDelegate;                                // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& TargetShortLobbyId)> LobbyIdSearchDecideDelegate; // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLobbyId& TargetLobbyId)> JoinLobbyByLobbyIdSearchDelegate; // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& TargetUserId)> LobbyInvitaionDecideDelegate;  // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULobbyJoinInfo* TargetLobbyJoinInfo)> LobbyInvitationAcceptDelegate; // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UFriendListMainWidget*                  MainWidget;                                        // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_390[0x8];                                      // 0x0390(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConsumeNotifyFriendInviteFlag();
	void EndDisplay(bool PlayCloseSound);
	bool GetCloseByNotLoginEOS();
	void OnLobbyIdSearchComplete(bool bInSuccessful, const TArray<struct FLobbyId>& InLobbyId, const class FString& InOwnerUserId, ELobbyType InLobbyType);
	void OnLobbyInvitationComplete(bool bSuccess, const struct FLobbyOperationResult& Result);
	void SetCloseByNotLoginEOS(bool InEnable);
	void SetDebugListDisplay(bool bInEnable);
	void SetFairPlayPointWidgetVisible(bool bInVisible);
	void SetPlayerIconListVisible(bool bInVisible);
	void SetRacerInfoWidgetVisible(bool bInVisible);
	void Setup(int32 InLocalUserNumber, EFriendListCategory InInitialCategory, int32 InZOrder, bool bInLobbySequence, bool bInLobbyInvitationSendEnable, bool bInLobbyInvitationAcceptEnable, bool bInLobbyInvitationRejectEnable);
	void StartDisplay();
	void UpdateLobbyIdDisplay(const class FString& InShortLobbyId, bool bInSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendListWidget">();
	}
	static class UFriendListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendListWidget>();
	}
};
static_assert(alignof(UFriendListWidget) == 0x000008, "Wrong alignment on UFriendListWidget");
static_assert(sizeof(UFriendListWidget) == 0x000398, "Wrong size on UFriendListWidget");
static_assert(offsetof(UFriendListWidget, DisplayEndDelegate) == 0x000328, "Member 'UFriendListWidget::DisplayEndDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListWidget, LobbyIdGetDelegate) == 0x000338, "Member 'UFriendListWidget::LobbyIdGetDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListWidget, LobbyIdSearchDecideDelegate) == 0x000348, "Member 'UFriendListWidget::LobbyIdSearchDecideDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListWidget, JoinLobbyByLobbyIdSearchDelegate) == 0x000358, "Member 'UFriendListWidget::JoinLobbyByLobbyIdSearchDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListWidget, LobbyInvitaionDecideDelegate) == 0x000368, "Member 'UFriendListWidget::LobbyInvitaionDecideDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListWidget, LobbyInvitationAcceptDelegate) == 0x000378, "Member 'UFriendListWidget::LobbyInvitationAcceptDelegate' has a wrong offset!");
static_assert(offsetof(UFriendListWidget, MainWidget) == 0x000388, "Member 'UFriendListWidget::MainWidget' has a wrong offset!");

// Class UNION.FriendMatchLobbyControlComponent
// 0x0010 (0x0140 - 0x0130)
class UFriendMatchLobbyControlComponent final : public UCustomMatchLobbyControlComponent
{
public:
	TSubclassOf<class UFriendMatchLobbyContext>   LobbyContextClass;                                 // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendMatchLobbyControlComponent">();
	}
	static class UFriendMatchLobbyControlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendMatchLobbyControlComponent>();
	}
};
static_assert(alignof(UFriendMatchLobbyControlComponent) == 0x000008, "Wrong alignment on UFriendMatchLobbyControlComponent");
static_assert(sizeof(UFriendMatchLobbyControlComponent) == 0x000140, "Wrong size on UFriendMatchLobbyControlComponent");
static_assert(offsetof(UFriendMatchLobbyControlComponent, LobbyContextClass) == 0x000130, "Member 'UFriendMatchLobbyControlComponent::LobbyContextClass' has a wrong offset!");

// Class UNION.FriendMatchMenu
// 0x00A8 (0x0148 - 0x00A0)
class UFriendMatchMenu final : public UActorComponent
{
public:
	TDelegate<void()>                             OnDecideEnterLobbyEvent;                           // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnCancelFriendMatchMenuEvent;                      // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EPrivateMatchPlayType PlayType)> OnLobbyRuleFixedEvent;                           // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnFinishedResultAnimationEvent;                    // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnFinishedOutAnimationEvent;                       // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MenuWidgetPath;                                    // 0x00F0(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   ErrorPopupTitle;                                   // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ErrorPopupMessage;                                 // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseSquadMenu;                                     // 0x0138(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrivateMatchPopup*                     MenuWidget;                                        // 0x0140(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CancelDownEvent(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void DecidedLobbyTypeEvent(int32 ButtonIndex);
	void DecisionCreateOrJoinEvent(int32 ButtonIndex);
	void ExitFriendMatchMenu();
	void FinishedLobbyCompletedAnimation(bool bJoin);
	void FinishedOutAnimation();
	void InitFriendMatchMenu(bool bHasSquad);
	void OpenLobbyCompletedWindow(bool bJoin);
	void OpenLobbyResultWindow(bool bSuccess, bool bJoin);
	void OpenSelectLobbyTypeWindow();
	void OpenWaitingLobbyPopupWindow(bool bJoin);
	void OpenWaitingLobbyPopupWindowFromSquad(bool bJoin);
	void SwitchDecisionEvent(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendMatchMenu">();
	}
	static class UFriendMatchMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendMatchMenu>();
	}
};
static_assert(alignof(UFriendMatchMenu) == 0x000008, "Wrong alignment on UFriendMatchMenu");
static_assert(sizeof(UFriendMatchMenu) == 0x000148, "Wrong size on UFriendMatchMenu");
static_assert(offsetof(UFriendMatchMenu, OnDecideEnterLobbyEvent) == 0x0000A0, "Member 'UFriendMatchMenu::OnDecideEnterLobbyEvent' has a wrong offset!");
static_assert(offsetof(UFriendMatchMenu, OnCancelFriendMatchMenuEvent) == 0x0000B0, "Member 'UFriendMatchMenu::OnCancelFriendMatchMenuEvent' has a wrong offset!");
static_assert(offsetof(UFriendMatchMenu, OnLobbyRuleFixedEvent) == 0x0000C0, "Member 'UFriendMatchMenu::OnLobbyRuleFixedEvent' has a wrong offset!");
static_assert(offsetof(UFriendMatchMenu, OnFinishedResultAnimationEvent) == 0x0000D0, "Member 'UFriendMatchMenu::OnFinishedResultAnimationEvent' has a wrong offset!");
static_assert(offsetof(UFriendMatchMenu, OnFinishedOutAnimationEvent) == 0x0000E0, "Member 'UFriendMatchMenu::OnFinishedOutAnimationEvent' has a wrong offset!");
static_assert(offsetof(UFriendMatchMenu, MenuWidgetPath) == 0x0000F0, "Member 'UFriendMatchMenu::MenuWidgetPath' has a wrong offset!");
static_assert(offsetof(UFriendMatchMenu, ErrorPopupTitle) == 0x000118, "Member 'UFriendMatchMenu::ErrorPopupTitle' has a wrong offset!");
static_assert(offsetof(UFriendMatchMenu, ErrorPopupMessage) == 0x000128, "Member 'UFriendMatchMenu::ErrorPopupMessage' has a wrong offset!");
static_assert(offsetof(UFriendMatchMenu, bUseSquadMenu) == 0x000138, "Member 'UFriendMatchMenu::bUseSquadMenu' has a wrong offset!");
static_assert(offsetof(UFriendMatchMenu, MenuWidget) == 0x000140, "Member 'UFriendMatchMenu::MenuWidget' has a wrong offset!");

// Class UNION.FullGameStoreDialogActor
// 0x0018 (0x02A8 - 0x0290)
class AFullGameStoreDialogActor final : public AActor
{
public:
	TMulticastInlineDelegate<void(bool IsAccept)> OnDecisionEvent;                                   // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UUnionUIPopupWindowBase*                PopupWindow;                                       // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CreateWidget(const class UObject* WorldContextObject);
	void DecideAndRemoveWidget(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void RemoveWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FullGameStoreDialogActor">();
	}
	static class AFullGameStoreDialogActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFullGameStoreDialogActor>();
	}
};
static_assert(alignof(AFullGameStoreDialogActor) == 0x000008, "Wrong alignment on AFullGameStoreDialogActor");
static_assert(sizeof(AFullGameStoreDialogActor) == 0x0002A8, "Wrong size on AFullGameStoreDialogActor");
static_assert(offsetof(AFullGameStoreDialogActor, OnDecisionEvent) == 0x000290, "Member 'AFullGameStoreDialogActor::OnDecisionEvent' has a wrong offset!");
static_assert(offsetof(AFullGameStoreDialogActor, PopupWindow) == 0x0002A0, "Member 'AFullGameStoreDialogActor::PopupWindow' has a wrong offset!");

// Class UNION.GadgetCustomize2SelectState
// 0x00A0 (0x0198 - 0x00F8)
class UGadgetCustomize2SelectState : public UHierarchicalStateMachineStateComponent
{
public:
	int32                                         PlayerNum;                                         // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGroupRaceRule                                CurrentFestaRule;                                  // 0x00FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CurrentFestaPresetText;                            // 0x0100(0x0010)(Edit, BlueprintVisible, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FUserGadgetPresetData                  CurrentFestaPresetData;                            // 0x0110(0x0010)(Edit, BlueprintVisible, EditConst, Protected, NativeAccessSpecifierProtected)
	class UGadgetCustomizeWindow*                 CustomizeWindow;                                   // 0x0120(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UGadgetCustomWindow*>            GadgetCustomWindows;                               // 0x0128(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  bFocusCustomWindowArr;                             // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class UGadgetPlateWindow*>             PlateWindows;                                      // 0x0148(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 LastSlotIndices;                                   // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class UGadgetDetailWindow*>            DetailWindows;                                     // 0x0168(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UCharaMachineParamWindow*>       CharaMachineParamWindows;                          // 0x0178(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                  bParamWindowOpenArr;                               // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)

public:
	void BindGadgetPlateDelegate(const int32 InPlayerIndex);
	void BindGadgetPlateDelegateAllPlayer();
	void BindGadgetSelectWindowDelegate(const int32 InPlayerIndex);
	void BindGadgetSelectWindowDelegateAllPlayer();
	void CanPlateWindowGadgetChange(const int32 InPlayerIndex, const int32 InPlateSlotState, const int32 InPlateSlotIndex, bool* OutResult);
	void ChangeFooterZOrder();
	bool IsFocusCustomWindowFlag(const int32 InPlayerIndex);
	void ResizeFocusCustomWindowFlags(const int32 InPlayerNum);
	void SetFocusCustomWindowFlag(const int32 InPlayerIndex, const bool IsFocus);
	void SetupDonpaTicketBoxWidget();
	void SetupDummyWidget();
	void SetupFestaSpecialRule();
	void SetupFooterButtons();
	void SetupGadgetCustomizeBaseWidget();
	void SetupGadgetDetailWidget();
	void SetupGadgetPlatePresetTabDelegate();
	void SetupGadgetPlateWidget();
	void SetupGadgetPlateWindow(const int32 InPlayerIndex);
	void SetupGadgetSelectWidget();
	void SetupLocalPlayers();
	void SetupMachineParameterWidget();
	void SetupSequenceWidgets();
	void UnbindGadgetPlateDelegate(const int32 InPlayerIndex);
	void UnbindGadgetPlateDelegateAllPlayer();
	void UnbindGadgetSelectWindowDelegate(const int32 InPlayerIndex);
	void UnbindGadgetSelectWindowDelegateAllPlayer();
	void UnbindsGadgetPlatePresetTabDelegate();
	void UpdateFooterDetachButton();
	void UpdateGadgetCustomWindow(const int32 InPlayerIndex, const int32 InPlateSlotFocusIndex);
	void UpdateGadgetDetailWindow(const int32 InPlayerIndex, const EGadgetId InGadgetId);
	void UpdateGadgetDetailWindowFromGadgetPlateLastFocus(const int32 InPlayerIndex);
	void UpdateMachineParameter(const int32 InPlayerIndex, const bool bDiffVisible);
	void UpdateMachineParameterAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomize2SelectState">();
	}
	static class UGadgetCustomize2SelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomize2SelectState>();
	}
};
static_assert(alignof(UGadgetCustomize2SelectState) == 0x000008, "Wrong alignment on UGadgetCustomize2SelectState");
static_assert(sizeof(UGadgetCustomize2SelectState) == 0x000198, "Wrong size on UGadgetCustomize2SelectState");
static_assert(offsetof(UGadgetCustomize2SelectState, PlayerNum) == 0x0000F8, "Member 'UGadgetCustomize2SelectState::PlayerNum' has a wrong offset!");
static_assert(offsetof(UGadgetCustomize2SelectState, CurrentFestaRule) == 0x0000FC, "Member 'UGadgetCustomize2SelectState::CurrentFestaRule' has a wrong offset!");
static_assert(offsetof(UGadgetCustomize2SelectState, CurrentFestaPresetText) == 0x000100, "Member 'UGadgetCustomize2SelectState::CurrentFestaPresetText' has a wrong offset!");
static_assert(offsetof(UGadgetCustomize2SelectState, CurrentFestaPresetData) == 0x000110, "Member 'UGadgetCustomize2SelectState::CurrentFestaPresetData' has a wrong offset!");
static_assert(offsetof(UGadgetCustomize2SelectState, CustomizeWindow) == 0x000120, "Member 'UGadgetCustomize2SelectState::CustomizeWindow' has a wrong offset!");
static_assert(offsetof(UGadgetCustomize2SelectState, GadgetCustomWindows) == 0x000128, "Member 'UGadgetCustomize2SelectState::GadgetCustomWindows' has a wrong offset!");
static_assert(offsetof(UGadgetCustomize2SelectState, bFocusCustomWindowArr) == 0x000138, "Member 'UGadgetCustomize2SelectState::bFocusCustomWindowArr' has a wrong offset!");
static_assert(offsetof(UGadgetCustomize2SelectState, PlateWindows) == 0x000148, "Member 'UGadgetCustomize2SelectState::PlateWindows' has a wrong offset!");
static_assert(offsetof(UGadgetCustomize2SelectState, LastSlotIndices) == 0x000158, "Member 'UGadgetCustomize2SelectState::LastSlotIndices' has a wrong offset!");
static_assert(offsetof(UGadgetCustomize2SelectState, DetailWindows) == 0x000168, "Member 'UGadgetCustomize2SelectState::DetailWindows' has a wrong offset!");
static_assert(offsetof(UGadgetCustomize2SelectState, CharaMachineParamWindows) == 0x000178, "Member 'UGadgetCustomize2SelectState::CharaMachineParamWindows' has a wrong offset!");
static_assert(offsetof(UGadgetCustomize2SelectState, bParamWindowOpenArr) == 0x000188, "Member 'UGadgetCustomize2SelectState::bParamWindowOpenArr' has a wrong offset!");

// Class UNION.GadgetCustomize2State
// 0x0000 (0x0128 - 0x0128)
class UGadgetCustomize2State : public UMenuSequenceSubStateBase
{
public:
	void MatchingTimeOut(float InTimeOutTime);
	void SetMessageBarVisible(bool bInIsVisible);
	void SetPlayerNum(int32 InPlayerNum);
	void SetSelectMode(EGadgetCustomizeSelectMode InSelectMode);

	bool IsSelectedPlateDataChanged() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomize2State">();
	}
	static class UGadgetCustomize2State* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomize2State>();
	}
};
static_assert(alignof(UGadgetCustomize2State) == 0x000008, "Wrong alignment on UGadgetCustomize2State");
static_assert(sizeof(UGadgetCustomize2State) == 0x000128, "Wrong size on UGadgetCustomize2State");

// Class UNION.GadgetCustomizeAttachMethodSelectState
// 0x0000 (0x00F8 - 0x00F8)
class UGadgetCustomizeAttachMethodSelectState final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomizeAttachMethodSelectState">();
	}
	static class UGadgetCustomizeAttachMethodSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomizeAttachMethodSelectState>();
	}
};
static_assert(alignof(UGadgetCustomizeAttachMethodSelectState) == 0x000008, "Wrong alignment on UGadgetCustomizeAttachMethodSelectState");
static_assert(sizeof(UGadgetCustomizeAttachMethodSelectState) == 0x0000F8, "Wrong size on UGadgetCustomizeAttachMethodSelectState");

// Class UNION.RaceSequenceStatePerformRival
// 0x0010 (0x0120 - 0x0110)
class URaceSequenceStatePerformRival : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URaceBeforeSharedData*                  RaceBeforeSharedData;                              // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UObject* GetLoadedObject(const struct FSoftObjectPath& Path);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStatePerformRival">();
	}
	static class URaceSequenceStatePerformRival* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStatePerformRival>();
	}
};
static_assert(alignof(URaceSequenceStatePerformRival) == 0x000008, "Wrong alignment on URaceSequenceStatePerformRival");
static_assert(sizeof(URaceSequenceStatePerformRival) == 0x000120, "Wrong size on URaceSequenceStatePerformRival");
static_assert(offsetof(URaceSequenceStatePerformRival, RaceBeforeSharedData) == 0x000118, "Member 'URaceSequenceStatePerformRival::RaceBeforeSharedData' has a wrong offset!");

// Class UNION.GadgetCustomizeChangeResultState
// 0x0000 (0x00F8 - 0x00F8)
class UGadgetCustomizeChangeResultState final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomizeChangeResultState">();
	}
	static class UGadgetCustomizeChangeResultState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomizeChangeResultState>();
	}
};
static_assert(alignof(UGadgetCustomizeChangeResultState) == 0x000008, "Wrong alignment on UGadgetCustomizeChangeResultState");
static_assert(sizeof(UGadgetCustomizeChangeResultState) == 0x0000F8, "Wrong size on UGadgetCustomizeChangeResultState");

// Class UNION.MachineBaseComponent
// 0x0028 (0x00C8 - 0x00A0)
class UMachineBaseComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x28];                                      // 0x00A0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Setup();
	void SetupGhost();
	void Update(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineBaseComponent">();
	}
	static class UMachineBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineBaseComponent>();
	}
};
static_assert(alignof(UMachineBaseComponent) == 0x000008, "Wrong alignment on UMachineBaseComponent");
static_assert(sizeof(UMachineBaseComponent) == 0x0000C8, "Wrong size on UMachineBaseComponent");

// Class UNION.MachineSoundBaseComponent
// 0x00F0 (0x01B8 - 0x00C8)
class UMachineSoundBaseComponent : public UMachineBaseComponent
{
public:
	TWeakObjectPtr<class USceneComponent>         Root;                                              // 0x00C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EVehicleSound, struct FUnionSurfaceSoundData> SurfaceSoundCueMap;                           // 0x00D0(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x98];                                     // 0x0120(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineSoundBaseComponent">();
	}
	static class UMachineSoundBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineSoundBaseComponent>();
	}
};
static_assert(alignof(UMachineSoundBaseComponent) == 0x000008, "Wrong alignment on UMachineSoundBaseComponent");
static_assert(sizeof(UMachineSoundBaseComponent) == 0x0001B8, "Wrong size on UMachineSoundBaseComponent");
static_assert(offsetof(UMachineSoundBaseComponent, Root) == 0x0000C8, "Member 'UMachineSoundBaseComponent::Root' has a wrong offset!");
static_assert(offsetof(UMachineSoundBaseComponent, SurfaceSoundCueMap) == 0x0000D0, "Member 'UMachineSoundBaseComponent::SurfaceSoundCueMap' has a wrong offset!");

// Class UNION.MachineEngineSoundComponent
// 0x0058 (0x0210 - 0x01B8)
class UMachineEngineSoundComponent final : public UMachineSoundBaseComponent
{
public:
	class USoundAtomCue*                          SPDEngineVibCue;                                   // 0x01B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          ACLEngineVibCue;                                   // 0x01C0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          POWEngineVibCue;                                   // 0x01C8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          HNDEngineVibCue;                                   // 0x01D0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          DSHEngineVibCue;                                   // 0x01D8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USoundAtomCue>           FrontEngineCue;                                    // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class USoundAtomCue>           RearEngineCue;                                     // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class USoundAtomCue>           EngineVibCue;                                      // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F8[0x18];                                     // 0x01F8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineEngineSoundComponent">();
	}
	static class UMachineEngineSoundComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineEngineSoundComponent>();
	}
};
static_assert(alignof(UMachineEngineSoundComponent) == 0x000008, "Wrong alignment on UMachineEngineSoundComponent");
static_assert(sizeof(UMachineEngineSoundComponent) == 0x000210, "Wrong size on UMachineEngineSoundComponent");
static_assert(offsetof(UMachineEngineSoundComponent, SPDEngineVibCue) == 0x0001B8, "Member 'UMachineEngineSoundComponent::SPDEngineVibCue' has a wrong offset!");
static_assert(offsetof(UMachineEngineSoundComponent, ACLEngineVibCue) == 0x0001C0, "Member 'UMachineEngineSoundComponent::ACLEngineVibCue' has a wrong offset!");
static_assert(offsetof(UMachineEngineSoundComponent, POWEngineVibCue) == 0x0001C8, "Member 'UMachineEngineSoundComponent::POWEngineVibCue' has a wrong offset!");
static_assert(offsetof(UMachineEngineSoundComponent, HNDEngineVibCue) == 0x0001D0, "Member 'UMachineEngineSoundComponent::HNDEngineVibCue' has a wrong offset!");
static_assert(offsetof(UMachineEngineSoundComponent, DSHEngineVibCue) == 0x0001D8, "Member 'UMachineEngineSoundComponent::DSHEngineVibCue' has a wrong offset!");
static_assert(offsetof(UMachineEngineSoundComponent, FrontEngineCue) == 0x0001E0, "Member 'UMachineEngineSoundComponent::FrontEngineCue' has a wrong offset!");
static_assert(offsetof(UMachineEngineSoundComponent, RearEngineCue) == 0x0001E8, "Member 'UMachineEngineSoundComponent::RearEngineCue' has a wrong offset!");
static_assert(offsetof(UMachineEngineSoundComponent, EngineVibCue) == 0x0001F0, "Member 'UMachineEngineSoundComponent::EngineVibCue' has a wrong offset!");

// Class UNION.GadgetCustomizeGadgetSelectState
// 0x0000 (0x00F8 - 0x00F8)
class UGadgetCustomizeGadgetSelectState final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomizeGadgetSelectState">();
	}
	static class UGadgetCustomizeGadgetSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomizeGadgetSelectState>();
	}
};
static_assert(alignof(UGadgetCustomizeGadgetSelectState) == 0x000008, "Wrong alignment on UGadgetCustomizeGadgetSelectState");
static_assert(sizeof(UGadgetCustomizeGadgetSelectState) == 0x0000F8, "Wrong size on UGadgetCustomizeGadgetSelectState");

// Class UNION.GadgetCustomizeInitState
// 0x0000 (0x00F8 - 0x00F8)
class UGadgetCustomizeInitState final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomizeInitState">();
	}
	static class UGadgetCustomizeInitState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomizeInitState>();
	}
};
static_assert(alignof(UGadgetCustomizeInitState) == 0x000008, "Wrong alignment on UGadgetCustomizeInitState");
static_assert(sizeof(UGadgetCustomizeInitState) == 0x0000F8, "Wrong size on UGadgetCustomizeInitState");

// Class UNION.LobbyRankMatchSequence
// 0x0008 (0x08D0 - 0x08C8)
class ALobbyRankMatchSequence final : public ALobbySequenceBase
{
public:
	float                                         LobbySearchTime;                                   // 0x08C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LobbySearchCancelLimitTime;                        // 0x08CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyRankMatchSequence">();
	}
	static class ALobbyRankMatchSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyRankMatchSequence>();
	}
};
static_assert(alignof(ALobbyRankMatchSequence) == 0x000008, "Wrong alignment on ALobbyRankMatchSequence");
static_assert(sizeof(ALobbyRankMatchSequence) == 0x0008D0, "Wrong size on ALobbyRankMatchSequence");
static_assert(offsetof(ALobbyRankMatchSequence, LobbySearchTime) == 0x0008C8, "Member 'ALobbyRankMatchSequence::LobbySearchTime' has a wrong offset!");
static_assert(offsetof(ALobbyRankMatchSequence, LobbySearchCancelLimitTime) == 0x0008CC, "Member 'ALobbyRankMatchSequence::LobbySearchCancelLimitTime' has a wrong offset!");

// Class UNION.GadgetCustomizePartsSelectState
// 0x0000 (0x00F8 - 0x00F8)
class UGadgetCustomizePartsSelectState final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomizePartsSelectState">();
	}
	static class UGadgetCustomizePartsSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomizePartsSelectState>();
	}
};
static_assert(alignof(UGadgetCustomizePartsSelectState) == 0x000008, "Wrong alignment on UGadgetCustomizePartsSelectState");
static_assert(sizeof(UGadgetCustomizePartsSelectState) == 0x0000F8, "Wrong size on UGadgetCustomizePartsSelectState");

// Class UNION.GadgetCustomizeSequence
// 0x0000 (0x0368 - 0x0368)
class AGadgetCustomizeSequence final : public AHierarchicalStateMachine
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomizeSequence">();
	}
	static class AGadgetCustomizeSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGadgetCustomizeSequence>();
	}
};
static_assert(alignof(AGadgetCustomizeSequence) == 0x000008, "Wrong alignment on AGadgetCustomizeSequence");
static_assert(sizeof(AGadgetCustomizeSequence) == 0x000368, "Wrong size on AGadgetCustomizeSequence");

// Class UNION.MachineIconStorage
// 0x0008 (0x0030 - 0x0028)
class UMachineIconStorage final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTexture2D* LoadSync(EMachineId InMachineID, ESaveLoadResult* OutResult);
	void SaveSync(EMachineId InMachineID, class UTextureRenderTarget2D* InRenderTexture, ESaveLoadResult* OutResult);
	void Subsystem_OnComplete(ELocalStorageStatus InStatus);

	void GetFileName(EMachineId InMachineID, class FString* OutFileName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineIconStorage">();
	}
	static class UMachineIconStorage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineIconStorage>();
	}
};
static_assert(alignof(UMachineIconStorage) == 0x000008, "Wrong alignment on UMachineIconStorage");
static_assert(sizeof(UMachineIconStorage) == 0x000030, "Wrong size on UMachineIconStorage");

// Class UNION.GadgetCustomizeSlotSelectState
// 0x0000 (0x00F8 - 0x00F8)
class UGadgetCustomizeSlotSelectState final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomizeSlotSelectState">();
	}
	static class UGadgetCustomizeSlotSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomizeSlotSelectState>();
	}
};
static_assert(alignof(UGadgetCustomizeSlotSelectState) == 0x000008, "Wrong alignment on UGadgetCustomizeSlotSelectState");
static_assert(sizeof(UGadgetCustomizeSlotSelectState) == 0x0000F8, "Wrong size on UGadgetCustomizeSlotSelectState");

// Class UNION.GadgetCustomizeWindow
// 0x0008 (0x02E8 - 0x02E0)
class UGadgetCustomizeWindow : public UUserWidget
{
public:
	bool                                          bMultiPlayerControl;                               // 0x02E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFestaSpecialRule;                                 // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMultiPlayerControl(const bool InMultiPlayControl);
	void SetPlateWindowZorderHigherThanSelectWindow(int32 InPlayerControllerIndex, bool bPlateWindowHigher);
	void Setup(const struct FGadgetCustomizeWindowData& InWindowData, const bool bInFestaSpecialRule);
	void SetupPlayerCharaNames();

	void GetCharaNameBoxes(TArray<class UUnionRichTextBlock*>* OutCharaNameBoxes) const;
	void GetDetailWindows(TArray<class UGadgetDetailWindow*>* OutDetailWindows) const;
	void GetGadgetCustomWindows(TArray<class UGadgetCustomWindow*>* OutGadgetCustomWindows) const;
	void GetmachineParameterWindows(TArray<class UCharaMachineParamWindow*>* OutMachineParameterWindows) const;
	void GetPlateWindows(TArray<class UGadgetPlateWindow*>* OutPlateWindows) const;
	class UGadgetSelectWindow* GetSelectWindow() const;
	class UCommonCountNumberWidget* GetTicketBox() const;
	bool IsMultiPlayerControl() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomizeWindow">();
	}
	static class UGadgetCustomizeWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomizeWindow>();
	}
};
static_assert(alignof(UGadgetCustomizeWindow) == 0x000008, "Wrong alignment on UGadgetCustomizeWindow");
static_assert(sizeof(UGadgetCustomizeWindow) == 0x0002E8, "Wrong size on UGadgetCustomizeWindow");
static_assert(offsetof(UGadgetCustomizeWindow, bMultiPlayerControl) == 0x0002E0, "Member 'UGadgetCustomizeWindow::bMultiPlayerControl' has a wrong offset!");
static_assert(offsetof(UGadgetCustomizeWindow, bFestaSpecialRule) == 0x0002E1, "Member 'UGadgetCustomizeWindow::bFestaSpecialRule' has a wrong offset!");

// Class UNION.MachineEffectComponent
// 0x0278 (0x0340 - 0x00C8)
class UMachineEffectComponent final : public UMachineBaseComponent
{
public:
	class UDataTable*                             EffectDataTable;                                   // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             MeshEffectDataTable;                               // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x58];                                      // 0x00D8(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class USceneComponent>         Root;                                              // 0x0130(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        CockpitComponentRef;                               // 0x0138(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        FrontComponentRef;                                 // 0x0140(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        RearComponentRef;                                  // 0x0148(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        TPCameraComponentRef;                              // 0x0150(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USceneComponent*>                BoatUnitComponentRef;                              // 0x0158(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class USceneComponent*>                PlaneUnitComponentRef;                             // 0x0168(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FNiagaraCachedInfo>             NiagaraCachedArray;                                // 0x0178(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class UNiagaraComponent*, EMachineEffectType> UpdateEffects;                                // 0x0188(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<EMachineEffectType, struct FMachineEffectData> MachineEffectDataMap;                        // 0x01D8(0x0050)(NativeAccessSpecifierPrivate)
	TMap<EMachineEffectType, struct FNiagaraComponentArray> EffectHandles;                           // 0x0228(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<EMachineMeshEffectType, struct FOptimizedMeshEffectArray> MeshEffects;                      // 0x0278(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C8[0x78];                                     // 0x02C8(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEnableTransformEffect(bool NewEnable);
	void VehicleModelEventAttackedInfo(const int32& EventId, const struct FAttackedInfo& Value);
	void VehicleModelEventInt(const int32& EventId, const int32& Value);
	void VehicleModelEventSpecialStatus(const int32& EventId, const EVehicleSpecialStatusType& Value);

	bool GetEnableTransformEffect() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineEffectComponent">();
	}
	static class UMachineEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineEffectComponent>();
	}
};
static_assert(alignof(UMachineEffectComponent) == 0x000008, "Wrong alignment on UMachineEffectComponent");
static_assert(sizeof(UMachineEffectComponent) == 0x000340, "Wrong size on UMachineEffectComponent");
static_assert(offsetof(UMachineEffectComponent, EffectDataTable) == 0x0000C8, "Member 'UMachineEffectComponent::EffectDataTable' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, MeshEffectDataTable) == 0x0000D0, "Member 'UMachineEffectComponent::MeshEffectDataTable' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, Root) == 0x000130, "Member 'UMachineEffectComponent::Root' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, CockpitComponentRef) == 0x000138, "Member 'UMachineEffectComponent::CockpitComponentRef' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, FrontComponentRef) == 0x000140, "Member 'UMachineEffectComponent::FrontComponentRef' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, RearComponentRef) == 0x000148, "Member 'UMachineEffectComponent::RearComponentRef' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, TPCameraComponentRef) == 0x000150, "Member 'UMachineEffectComponent::TPCameraComponentRef' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, BoatUnitComponentRef) == 0x000158, "Member 'UMachineEffectComponent::BoatUnitComponentRef' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, PlaneUnitComponentRef) == 0x000168, "Member 'UMachineEffectComponent::PlaneUnitComponentRef' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, NiagaraCachedArray) == 0x000178, "Member 'UMachineEffectComponent::NiagaraCachedArray' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, UpdateEffects) == 0x000188, "Member 'UMachineEffectComponent::UpdateEffects' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, MachineEffectDataMap) == 0x0001D8, "Member 'UMachineEffectComponent::MachineEffectDataMap' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, EffectHandles) == 0x000228, "Member 'UMachineEffectComponent::EffectHandles' has a wrong offset!");
static_assert(offsetof(UMachineEffectComponent, MeshEffects) == 0x000278, "Member 'UMachineEffectComponent::MeshEffects' has a wrong offset!");

// Class UNION.GadgetCustomSubCursor
// 0x0020 (0x04A8 - 0x0488)
class UGadgetCustomSubCursor : public UCommonMenuCrossButton
{
public:
	int32                                         ControlPlayerIndex;                                // 0x0488(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanFocus;                                         // 0x048C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanMove;                                          // 0x048D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48E[0x2];                                      // 0x048E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 CursorImageRef;                                    // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMaterialInterface*>             PlayerCursorImages;                                // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)

public:
	void MoveDelay_Impl();
	void NativeConstruct();
	void NativeOnInitialized();
	void OnAccept_Impl();
	void SetControlPlayerIndex(const int32 InPlayerIndex, const bool InChangeCursorImage);
	void SetIsCanMove(const bool InIsCanMove);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomSubCursor">();
	}
	static class UGadgetCustomSubCursor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomSubCursor>();
	}
};
static_assert(alignof(UGadgetCustomSubCursor) == 0x000008, "Wrong alignment on UGadgetCustomSubCursor");
static_assert(sizeof(UGadgetCustomSubCursor) == 0x0004A8, "Wrong size on UGadgetCustomSubCursor");
static_assert(offsetof(UGadgetCustomSubCursor, ControlPlayerIndex) == 0x000488, "Member 'UGadgetCustomSubCursor::ControlPlayerIndex' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubCursor, bCanFocus) == 0x00048C, "Member 'UGadgetCustomSubCursor::bCanFocus' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubCursor, bCanMove) == 0x00048D, "Member 'UGadgetCustomSubCursor::bCanMove' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubCursor, CursorImageRef) == 0x000490, "Member 'UGadgetCustomSubCursor::CursorImageRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubCursor, PlayerCursorImages) == 0x000498, "Member 'UGadgetCustomSubCursor::PlayerCursorImages' has a wrong offset!");

// Class UNION.GadgetCustomSubTypeBox
// 0x0058 (0x05C8 - 0x0570)
class UGadgetCustomSubTypeBox : public UUnionUIAnimScrollControl
{
public:
	bool                                          bIsLightVer;                                       // 0x0570(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_571[0x3];                                      // 0x0571(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerNumberIndex;                                 // 0x0574(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGadgetCategory                               GadgetCategory;                                    // 0x0578(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlayScrollAnim;                                   // 0x0579(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLeftRightScrolledTriggerCancel;                   // 0x057A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_57B[0x5];                                      // 0x057B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGadgetCustomSubTypeIcon*>       GadgetIconRefArray;                                // 0x0580(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           GadgetIconCanvasPanelRef;                          // 0x0590(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 SelectCursorImageRef;                              // 0x0598(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     TypeColorBrushMaterial;                            // 0x05A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 CategoryBackGroundImageRef;                        // 0x05A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 GadgetKitPatternRef;                               // 0x05B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               InvalidCategoryPatternOverlayRef;                  // 0x05B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CategoryBackGroundImageMaterialWidth;              // 0x05C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CategoryBackGroundImageMaterialHeight;             // 0x05C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ApplyGadgetIcons(const EGadgetCategory InCategory, const TArray<EGadgetId>& InGadgetIds, const EGadgetId InFocusGadgetId, const struct FGadgetPlateUIData& InGadgetPresetData, const int32 InGadgetPlateFocusSlotIndex);
	void ApplyIconTexture(const int32 InIconIndex, class UTexture2D* InTexture2D);
	void CreateGadgetCategoryBackGroundColorMaterial();
	EGadgetId FindIconGadgetId(const TArray<EGadgetId>& InGadgetIds, const EGadgetId InFocusGadgetId, int32 AddIndex);
	EGadgetCategory GetCenterGadgetCategory();
	class UGadgetCustomSubTypeIcon* GetCenterGadgetIcon();
	EGadgetId GetCenterGadgetId();
	EGadgetState GetCenterGadgetState();
	void LeftScrollAnimFinished();
	void LeftScrollAnimStarted();
	void NativeConstruct();
	void NativeOnInitialized();
	void NativePreConstruct();
	void OnInitWidgetReference();
	void RightScrollAnimFinished();
	void RightScrollAnimStarted();
	void SetCursorVisible(const bool bInVisible);
	void SetGadgetCategory(const EGadgetCategory InGadgetCategory, const bool bInOverrideBlackColor);
	void SetGadgetKitPatternOpaque(const bool bInVisible);
	void SetIconCanvasOpaque(const bool bInVisible);
	void SetInvalidCategoryPatternOpaque(const bool bInVisible);
	void SetLeftRightScrolledTriggerCancel(const bool bInFlag);
	void SetPlayerControllerIndex(const int32 InPlayerControllerIndex);
	void Setup(class UGadgetCustomWindow* InGadgetCustomWindow);
	void SetupGadgetIconRef();
	void StartIconTextScroll();
	void StopIconTextScroll();

	EGadgetCategory GetGadgetCategory() const;
	bool IsLeftRightScrolledTriggerCancel() const;
	bool IsPlayScrollAnim() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomSubTypeBox">();
	}
	static class UGadgetCustomSubTypeBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomSubTypeBox>();
	}
};
static_assert(alignof(UGadgetCustomSubTypeBox) == 0x000008, "Wrong alignment on UGadgetCustomSubTypeBox");
static_assert(sizeof(UGadgetCustomSubTypeBox) == 0x0005C8, "Wrong size on UGadgetCustomSubTypeBox");
static_assert(offsetof(UGadgetCustomSubTypeBox, bIsLightVer) == 0x000570, "Member 'UGadgetCustomSubTypeBox::bIsLightVer' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, PlayerNumberIndex) == 0x000574, "Member 'UGadgetCustomSubTypeBox::PlayerNumberIndex' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, GadgetCategory) == 0x000578, "Member 'UGadgetCustomSubTypeBox::GadgetCategory' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, bPlayScrollAnim) == 0x000579, "Member 'UGadgetCustomSubTypeBox::bPlayScrollAnim' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, bLeftRightScrolledTriggerCancel) == 0x00057A, "Member 'UGadgetCustomSubTypeBox::bLeftRightScrolledTriggerCancel' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, GadgetIconRefArray) == 0x000580, "Member 'UGadgetCustomSubTypeBox::GadgetIconRefArray' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, GadgetIconCanvasPanelRef) == 0x000590, "Member 'UGadgetCustomSubTypeBox::GadgetIconCanvasPanelRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, SelectCursorImageRef) == 0x000598, "Member 'UGadgetCustomSubTypeBox::SelectCursorImageRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, TypeColorBrushMaterial) == 0x0005A0, "Member 'UGadgetCustomSubTypeBox::TypeColorBrushMaterial' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, CategoryBackGroundImageRef) == 0x0005A8, "Member 'UGadgetCustomSubTypeBox::CategoryBackGroundImageRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, GadgetKitPatternRef) == 0x0005B0, "Member 'UGadgetCustomSubTypeBox::GadgetKitPatternRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, InvalidCategoryPatternOverlayRef) == 0x0005B8, "Member 'UGadgetCustomSubTypeBox::InvalidCategoryPatternOverlayRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, CategoryBackGroundImageMaterialWidth) == 0x0005C0, "Member 'UGadgetCustomSubTypeBox::CategoryBackGroundImageMaterialWidth' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeBox, CategoryBackGroundImageMaterialHeight) == 0x0005C4, "Member 'UGadgetCustomSubTypeBox::CategoryBackGroundImageMaterialHeight' has a wrong offset!");

// Class UNION.LobbyMatchingUIState
// 0x0050 (0x0428 - 0x03D8)
class ULobbyMatchingUIState : public UUnionUISceneBase
{
public:
	TArray<class ULobbyMatchingCharaIcon*>        CharaIconList;                                     // 0x03D8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class URichTextBlock*                         HeaderPlayerjoinText;                              // 0x03E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FText>                           HeaderPlayerjoinText_Host;                         // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           HeaderPlayerjoinText_Client;                       // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UOverlay*                               HeaderCharaIconPanelOverlay;                       // 0x0410(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOnlineHeaderGameModeIconBase*          HeaderGameModeIcon;                                // 0x0418(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPlayRemind;                                     // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayInOutAnimation(bool bIsInAnim);
	void PlayLoopRemindAnim(bool bPlayLoopRemind);
	void SetDriverIcon(int32 InIndex, EDriverId InDriverId, TSoftObjectPtr<class UTexture2D> InTexture);
	void SetIsReadyStatus(int32 InIndex, bool bIsReady);
	void SetLoginStatus(int32 InIndex, bool bIsOnline);
	void SetOnlineGameModeIcon(bool bIsMulti, EOnlineGameMode InOnlineGameMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyMatchingUIState">();
	}
	static class ULobbyMatchingUIState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyMatchingUIState>();
	}
};
static_assert(alignof(ULobbyMatchingUIState) == 0x000008, "Wrong alignment on ULobbyMatchingUIState");
static_assert(sizeof(ULobbyMatchingUIState) == 0x000428, "Wrong size on ULobbyMatchingUIState");
static_assert(offsetof(ULobbyMatchingUIState, CharaIconList) == 0x0003D8, "Member 'ULobbyMatchingUIState::CharaIconList' has a wrong offset!");
static_assert(offsetof(ULobbyMatchingUIState, HeaderPlayerjoinText) == 0x0003E8, "Member 'ULobbyMatchingUIState::HeaderPlayerjoinText' has a wrong offset!");
static_assert(offsetof(ULobbyMatchingUIState, HeaderPlayerjoinText_Host) == 0x0003F0, "Member 'ULobbyMatchingUIState::HeaderPlayerjoinText_Host' has a wrong offset!");
static_assert(offsetof(ULobbyMatchingUIState, HeaderPlayerjoinText_Client) == 0x000400, "Member 'ULobbyMatchingUIState::HeaderPlayerjoinText_Client' has a wrong offset!");
static_assert(offsetof(ULobbyMatchingUIState, HeaderCharaIconPanelOverlay) == 0x000410, "Member 'ULobbyMatchingUIState::HeaderCharaIconPanelOverlay' has a wrong offset!");
static_assert(offsetof(ULobbyMatchingUIState, HeaderGameModeIcon) == 0x000418, "Member 'ULobbyMatchingUIState::HeaderGameModeIcon' has a wrong offset!");
static_assert(offsetof(ULobbyMatchingUIState, bIsPlayRemind) == 0x000420, "Member 'ULobbyMatchingUIState::bIsPlayRemind' has a wrong offset!");

// Class UNION.GadgetCustomSubTypeIcon
// 0x00D8 (0x0558 - 0x0480)
class UGadgetCustomSubTypeIcon : public UUnionUIButtonBase
{
public:
	int32                                         ControlPlayerIndex;                                // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bVisibleInWidgets;                                 // 0x0484(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGadgetId                                     gadgetId;                                          // 0x0485(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIconUpdate;                                       // 0x0486(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGadgetCategory                               GadgetCategory;                                    // 0x0487(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGadgetState                                  GadgetState;                                       // 0x0488(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMenuGadgetIcon*                        UnlockMenuGadgetIconRef;                           // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuGadgetIcon*                        LockMenuGadgetIconRef;                             // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        GadgetIconSwitcherRef;                             // 0x04A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 CategoryColorRef;                                  // 0x04A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     CategoryColorBrushMaterial;                        // 0x04B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                RockIconRef;                                       // 0x04B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         TicketBoxRootRef;                                  // 0x04C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUITextBlock*                      TicketValueTextRef;                                // 0x04C8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           TicketNumTextColorEnabled;                         // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           TicketNumTextColorDisabled;                        // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                GadgetNameTextRootRef;                             // 0x04F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionFontScroll*                       GadgetNameTextRef;                                 // 0x04F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 NewIconRef;                                        // 0x0500(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 EquippedIconRef;                                   // 0x0508(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 NotAttachIconRef;                                  // 0x0510(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 CanNotAttachIconRef;                               // 0x0518(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 InvalidIconRef;                                    // 0x0520(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UImage*>                         PlayerCursorRefArray;                              // 0x0528(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UCommonPlayerNumber*>            PlayerNumbersRefArray;                             // 0x0538(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnPurchaseAnimFinished;                            // 0x0548(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void ApplyGadgetIcons(const EGadgetId InGadgetId);
	void CreateCategoryColorMaterial();
	ESlateVisibility GetGadgetNameTextVisibility();
	bool IsNewIconVisible();
	void OnConstCategoryColor();
	void RemoveGadgetNameTextWidget();
	void SetCanNotAttachIconOpaque(const bool bVisible);
	void SetControlPlayerIndex(const int32 InPlayerIndex);
	void SetCursorOpaque(const int32 InPlayerIndex, const bool bVisible);
	void SetCursorOpaqueAll(const bool bVisible);
	void SetEquippedIconOpaque(const bool bVisible);
	void SetGadgetCategory(const EGadgetCategory InGadgetCategory);
	void SetGadgetId(const EGadgetId InGadgetId);
	void SetGadgetNameOpaque(const bool bVisible);
	void SetGadgetNameText(const class FText& InText);
	void SetGadgetState(const EGadgetState InGadgetState);
	void SetInvalidIconOpaque(const bool bVisible);
	void SetIsIconUpdate(const bool InFlag);
	void SetLockIconOpaque(const bool bVisible);
	void SetNewIconOpaque(const bool bVisible);
	void SetPlayerNumberOpaque(const int32 InPlayerIndex, const bool bVisible);
	void SetPlayerNumberOpaqueAll(const bool bVisible);
	void SetTexture(class UTexture2D* InTexture);
	void SetTicketBoxOpaque(const bool bVisible);
	void SetTicketValueText(const int32 InTicketNum);
	void SetTicketValueTextColor(const bool bPurchase);
	void SetVisibleInWidgets(const bool bInVisible);
	void StartGadgetNameTextScroll();
	void StopGadgetNameTextScroll();
	void SwitchGadgetIcon(const bool bIsOpen);

	int32 GetControlPlayerIndex() const;
	EGadgetCategory GetGadgetCategory() const;
	EGadgetId GetGadgetId() const;
	EGadgetState GetGadgetState() const;
	bool IsCanNotAttachIconVisible() const;
	bool IsIconUpdate() const;
	bool IsVisibleInWidgets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomSubTypeIcon">();
	}
	static class UGadgetCustomSubTypeIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomSubTypeIcon>();
	}
};
static_assert(alignof(UGadgetCustomSubTypeIcon) == 0x000008, "Wrong alignment on UGadgetCustomSubTypeIcon");
static_assert(sizeof(UGadgetCustomSubTypeIcon) == 0x000558, "Wrong size on UGadgetCustomSubTypeIcon");
static_assert(offsetof(UGadgetCustomSubTypeIcon, ControlPlayerIndex) == 0x000480, "Member 'UGadgetCustomSubTypeIcon::ControlPlayerIndex' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, bVisibleInWidgets) == 0x000484, "Member 'UGadgetCustomSubTypeIcon::bVisibleInWidgets' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, gadgetId) == 0x000485, "Member 'UGadgetCustomSubTypeIcon::gadgetId' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, bIconUpdate) == 0x000486, "Member 'UGadgetCustomSubTypeIcon::bIconUpdate' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, GadgetCategory) == 0x000487, "Member 'UGadgetCustomSubTypeIcon::GadgetCategory' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, GadgetState) == 0x000488, "Member 'UGadgetCustomSubTypeIcon::GadgetState' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, UnlockMenuGadgetIconRef) == 0x000490, "Member 'UGadgetCustomSubTypeIcon::UnlockMenuGadgetIconRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, LockMenuGadgetIconRef) == 0x000498, "Member 'UGadgetCustomSubTypeIcon::LockMenuGadgetIconRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, GadgetIconSwitcherRef) == 0x0004A0, "Member 'UGadgetCustomSubTypeIcon::GadgetIconSwitcherRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, CategoryColorRef) == 0x0004A8, "Member 'UGadgetCustomSubTypeIcon::CategoryColorRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, CategoryColorBrushMaterial) == 0x0004B0, "Member 'UGadgetCustomSubTypeIcon::CategoryColorBrushMaterial' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, RockIconRef) == 0x0004B8, "Member 'UGadgetCustomSubTypeIcon::RockIconRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, TicketBoxRootRef) == 0x0004C0, "Member 'UGadgetCustomSubTypeIcon::TicketBoxRootRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, TicketValueTextRef) == 0x0004C8, "Member 'UGadgetCustomSubTypeIcon::TicketValueTextRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, TicketNumTextColorEnabled) == 0x0004D0, "Member 'UGadgetCustomSubTypeIcon::TicketNumTextColorEnabled' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, TicketNumTextColorDisabled) == 0x0004E0, "Member 'UGadgetCustomSubTypeIcon::TicketNumTextColorDisabled' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, GadgetNameTextRootRef) == 0x0004F0, "Member 'UGadgetCustomSubTypeIcon::GadgetNameTextRootRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, GadgetNameTextRef) == 0x0004F8, "Member 'UGadgetCustomSubTypeIcon::GadgetNameTextRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, NewIconRef) == 0x000500, "Member 'UGadgetCustomSubTypeIcon::NewIconRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, EquippedIconRef) == 0x000508, "Member 'UGadgetCustomSubTypeIcon::EquippedIconRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, NotAttachIconRef) == 0x000510, "Member 'UGadgetCustomSubTypeIcon::NotAttachIconRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, CanNotAttachIconRef) == 0x000518, "Member 'UGadgetCustomSubTypeIcon::CanNotAttachIconRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, InvalidIconRef) == 0x000520, "Member 'UGadgetCustomSubTypeIcon::InvalidIconRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, PlayerCursorRefArray) == 0x000528, "Member 'UGadgetCustomSubTypeIcon::PlayerCursorRefArray' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, PlayerNumbersRefArray) == 0x000538, "Member 'UGadgetCustomSubTypeIcon::PlayerNumbersRefArray' has a wrong offset!");
static_assert(offsetof(UGadgetCustomSubTypeIcon, OnPurchaseAnimFinished) == 0x000548, "Member 'UGadgetCustomSubTypeIcon::OnPurchaseAnimFinished' has a wrong offset!");

// Class UNION.GadgetCustomTab
// 0x0038 (0x0318 - 0x02E0)
class UGadgetCustomTab : public UUserWidget
{
public:
	TArray<class UGadgetCustomTabButton*>         TabButtonArray;                                    // 0x02E0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UGadgetCustomTabButton*                 TabButtonRentalPlate;                              // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FText>                           TabTextArray;                                      // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	class UGadgetPlateWindow*                     OwnerGadgetPlateWindowRef;                         // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PlayerIndex;                                       // 0x0310(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UGadgetPlateWindow* GetOwnerGadgetPlate();
	TArray<class UGadgetCustomTabButton*> GetTabButtonArr();
	void NativeConstruct();
	void NativeOnInitialized();
	void OnConstTabButtons();
	void OnConstTexts();
	void SetMouseCollisionEnabled(const bool InCollisionEnabled, const bool InUseRentalPlate);
	void SetOwnerGadgetPlate(class UGadgetPlateWindow* InGadgetPlatePtr);
	void SetPlayerIndex(int32 InPlayerIndex);
	void SetupTabButtons(const int32 InTabNum, const bool InOpenRentalGadget);
	void SwitchActiveTabButton(const int32 InTabIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomTab">();
	}
	static class UGadgetCustomTab* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomTab>();
	}
};
static_assert(alignof(UGadgetCustomTab) == 0x000008, "Wrong alignment on UGadgetCustomTab");
static_assert(sizeof(UGadgetCustomTab) == 0x000318, "Wrong size on UGadgetCustomTab");
static_assert(offsetof(UGadgetCustomTab, TabButtonArray) == 0x0002E0, "Member 'UGadgetCustomTab::TabButtonArray' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTab, TabButtonRentalPlate) == 0x0002F0, "Member 'UGadgetCustomTab::TabButtonRentalPlate' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTab, TabTextArray) == 0x0002F8, "Member 'UGadgetCustomTab::TabTextArray' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTab, OwnerGadgetPlateWindowRef) == 0x000308, "Member 'UGadgetCustomTab::OwnerGadgetPlateWindowRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTab, PlayerIndex) == 0x000310, "Member 'UGadgetCustomTab::PlayerIndex' has a wrong offset!");

// Class UNION.LobbySequenceP2PConnection
// 0x0000 (0x00A0 - 0x00A0)
class ULobbySequenceP2PConnection : public UActorComponent
{
public:
	void OnExitState();
	void OnInitState();
	void OnUpdateState(float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySequenceP2PConnection">();
	}
	static class ULobbySequenceP2PConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbySequenceP2PConnection>();
	}
};
static_assert(alignof(ULobbySequenceP2PConnection) == 0x000008, "Wrong alignment on ULobbySequenceP2PConnection");
static_assert(sizeof(ULobbySequenceP2PConnection) == 0x0000A0, "Wrong size on ULobbySequenceP2PConnection");

// Class UNION.LobbySequenceP2PConnectionLocal
// 0x0008 (0x00A8 - 0x00A0)
class ULobbySequenceP2PConnectionLocal final : public ULobbySequenceP2PConnection
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCompleteSetupLocalMemberRaceAttributes(bool bSuccessful, const struct FLobbyOperationResult& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySequenceP2PConnectionLocal">();
	}
	static class ULobbySequenceP2PConnectionLocal* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbySequenceP2PConnectionLocal>();
	}
};
static_assert(alignof(ULobbySequenceP2PConnectionLocal) == 0x000008, "Wrong alignment on ULobbySequenceP2PConnectionLocal");
static_assert(sizeof(ULobbySequenceP2PConnectionLocal) == 0x0000A8, "Wrong size on ULobbySequenceP2PConnectionLocal");

// Class UNION.GadgetCustomTabButton
// 0x0078 (0x04F8 - 0x0480)
class UGadgetCustomTabButton : public UUnionUIButtonBase
{
public:
	int32                                         TabIndex;                                          // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTickPressed;                                      // 0x0484(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_485[0x3];                                      // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRichTextBlock*                    ButtonNameTextRef;                                 // 0x0488(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 FestaIconImageRef;                                 // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButton*                         MouseInteractionButtonRef;                         // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGadgetPlateWindow*                     OwnerGadgetPlateWindowRef;                         // 0x04A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 InPlayerIndex)> OnLeftShoulder;                              // 0x04A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 InPlayerIndex)> OnRightShoulder;                             // 0x04B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 InPlayerIndex, int32 InPresetNum)> OnPressed;                // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 InPlayerIndex)> OnCancel;                                    // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 InPlayerIndex)> OnCursorKey;                                 // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	class UGadgetPlateWindow* GetOwnerGadgetPlate();
	int32 GetOwnerGadgetPlatePlayerIndex();
	void IsOwnerGadgetPlatePlayerOne(bool* OutResult);
	void NativeConstruct();
	void NativeOnInitialized();
	void NativeTick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnConstFestaIconImage();
	void OnConstMouseInteractionButton();
	void OnConstNameText();
	void OnFocusReceivedInternal(const struct FGeometry& InGeometry, const struct FFocusEvent& InFocusEvent);
	void RegisterLastFocusGadgetIconToPlayerController(const int32 InPlayerIndex, bool* OutResult);
	void SetActive(const bool InIsActive);
	void SetMouseInteractionButtonEnabled(const bool InEnabled);
	void SetOwnerGadgetPlate(class UGadgetPlateWindow* InGadgetPlatePtr);
	void SetRentalPlateSettings(const bool InUseRentalPlate);
	void SetTabIndex(const int32 InTabIndex);
	void SetTabText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomTabButton">();
	}
	static class UGadgetCustomTabButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomTabButton>();
	}
};
static_assert(alignof(UGadgetCustomTabButton) == 0x000008, "Wrong alignment on UGadgetCustomTabButton");
static_assert(sizeof(UGadgetCustomTabButton) == 0x0004F8, "Wrong size on UGadgetCustomTabButton");
static_assert(offsetof(UGadgetCustomTabButton, TabIndex) == 0x000480, "Member 'UGadgetCustomTabButton::TabIndex' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTabButton, bTickPressed) == 0x000484, "Member 'UGadgetCustomTabButton::bTickPressed' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTabButton, ButtonNameTextRef) == 0x000488, "Member 'UGadgetCustomTabButton::ButtonNameTextRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTabButton, FestaIconImageRef) == 0x000490, "Member 'UGadgetCustomTabButton::FestaIconImageRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTabButton, MouseInteractionButtonRef) == 0x000498, "Member 'UGadgetCustomTabButton::MouseInteractionButtonRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTabButton, OwnerGadgetPlateWindowRef) == 0x0004A0, "Member 'UGadgetCustomTabButton::OwnerGadgetPlateWindowRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTabButton, OnLeftShoulder) == 0x0004A8, "Member 'UGadgetCustomTabButton::OnLeftShoulder' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTabButton, OnRightShoulder) == 0x0004B8, "Member 'UGadgetCustomTabButton::OnRightShoulder' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTabButton, OnPressed) == 0x0004C8, "Member 'UGadgetCustomTabButton::OnPressed' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTabButton, OnCancel) == 0x0004D8, "Member 'UGadgetCustomTabButton::OnCancel' has a wrong offset!");
static_assert(offsetof(UGadgetCustomTabButton, OnCursorKey) == 0x0004E8, "Member 'UGadgetCustomTabButton::OnCursorKey' has a wrong offset!");

// Class UNION.GadgetCustomWindow
// 0x0200 (0x0770 - 0x0570)
class UGadgetCustomWindow : public UUnionUIAnimScrollControl
{
public:
	bool                                          bIsLightVer;                                       // 0x0570(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_571[0x3];                                      // 0x0571(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConstFocusNewGadget;                              // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGadgetId                                     LastSelectGadgetId;                                // 0x0579(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGadgetCategory                               LastSelectGadgetCategory;                          // 0x057A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_57B[0x5];                                      // 0x057B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EGadgetCategory, EGadgetId>              GadgetCategoriesLastSelectId;                      // 0x0580(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	TMap<EGadgetCategory, struct FGadgetCustomWindowCategoryData> SelectableGadgets;                 // 0x05D0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	int32                                         GadgetPlateLastFocusIndex;                         // 0x0620(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EGadgetCategory>                       PresentTypeBoxCategoryArray;                       // 0x0628(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UUserWidget*>                    GadgetCategoryHeaderRefArr;                        // 0x0638(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UGadgetCustomSubCursor*                 FocusCursor;                                       // 0x0648(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UReadyWidget*                           ReadyWidgetRef;                                    // 0x0650(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               RentalPlateWidgetRef;                              // 0x0658(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButton*                         MouseInteractionButtonRef_Decision;                // 0x0660(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButton*                         MouseInteractionButtonRef_ToLeft;                  // 0x0668(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButton*                         MouseInteractionButtonRef_ToRight;                 // 0x0670(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButton*                         MouseInteractionButtonRef_ToTop;                   // 0x0678(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButton*                         MouseInteractionButtonRef_ToDown;                  // 0x0680(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlayUpDownScrollAnim;                             // 0x0688(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUpDownScrolledTriggerCancel;                      // 0x0689(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlayPurchaseAnim;                                 // 0x068A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_68B[0x5];                                      // 0x068B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       MachineType_Loop;                                  // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       MachineType_Up_Program;                            // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       MachineType_Down_Program;                          // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       MachineType_Idle_Program;                          // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, EGadgetCategory SelectedGadgetCategory, EGadgetId SelectedGadgetId, EGadgetState SelectedGadgetState)> OnGadgetCategoryScrollStartEvent; // 0x06B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, EGadgetCategory SelectedGadgetCategory, EGadgetId SelectedGadgetId, EGadgetState SelectedGadgetState)> OnGadgetCategoryScrollEndEvent; // 0x06C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, EGadgetCategory SelectedGadgetCategory, EGadgetId SelectedGadgetId, EGadgetState SelectedGadgetState)> OnGadgetCategoryDecideEvent; // 0x06D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, EGadgetCategory SelectedGadgetCategory, EGadgetId SelectedGadgetId, EGadgetState SelectedGadgetState)> OnGadgetCategoryCancelEvent; // 0x06E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, EGadgetId gadgetId, EGadgetCategory CategoryId, EGadgetState GadgetState)> OnFocusChangeUp; // 0x06F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, EGadgetId gadgetId, EGadgetCategory CategoryId, EGadgetState GadgetState)> OnFocusChangeDown; // 0x0700(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, EGadgetId gadgetId, EGadgetCategory CategoryId, EGadgetState GadgetState)> OnFocusChangeRight; // 0x0710(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, EGadgetId gadgetId, EGadgetCategory CategoryId, EGadgetState GadgetState)> OnFocusChangeLeft; // 0x0720(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, EGadgetId gadgetId, EGadgetState GadgetState)> OnItemFocused; // 0x0730(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, EGadgetId gadgetId, EGadgetState GadgetState)> OnItemSelected; // 0x0740(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex)> OnCancel;                                      // 0x0750(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPurchaseAnimFinished;                            // 0x0760(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void ApplyGadgetCustomCategoryHeader();
	void ApplyGadgetCustomScrollPrintBox(const bool bInReSize);
	void ApplyGadgetWindowIcons();
	void DownScrollAnimFinished();
	void DownScrollAnimStarted();
	void FinishedPurchaseAnim();
	class UGadgetCustomSubTypeBox* GetCenterCategoryTypeBox();
	void GetCurrentCenterBoxGadgetInfo(int32* IndexOnBox, EGadgetCategory* GadgetCategory, int32* CenterElementTypeIndex, EGadgetId* gadgetId, EGadgetState* SelectedGadgetState);
	void GetCurrentCenterBoxInfo(int32* IndexOnBox, ECarStatusType* machineType, int32* CenterElementTypeIndex, EMachineId* MachineId);
	bool IsFocusCategoryArrayLast();
	bool IsFocusCategoryArrayTop();
	bool IsFocusGadgetCategoryArrayEnd();
	bool IsFocusGadgetCategoryArrayTop();
	void NativeConstruct();
	void NativeOnInitialized();
	void NativePreConstruct();
	void OnConstFocusCursor();
	void OnConstGadgetCategoryHeader();
	void OnConstGadgetCustomTypeBox();
	void OnConstGadgetCustomWindowGadgetData();
	void OnConstMouseInteractionButtons();
	void OnInitCrossButtons();
	void OnInitReadyWidget();
	void OnInitRentalGadgetWidget();
	void PlayPurchaseAnim();
	void PlayUISceneAnimation(const EUnionUISceneAnimation& InAnimation);
	void PurchaseAnimFinished();
	void PurchaseAnimStarted();
	void PurchaseGadget(EGadgetId InGadgetId);
	void ResetSelectableGadget();
	void SetAllTypeBoxCursorVisible(const bool InVisible);
	void SetAttachableGadgetIds(int32 InPlayerIndex, const TArray<EGadgetId>& InAttachableGadgetIds);
	void SetAttachedGadgetIds(int32 InPlayerIndex, const TArray<EGadgetId>& InAttachedGadgetIds);
	void SetCursorUpCanMove(const bool InEnabled);
	void SetEnabledSlateGlobalInvalidation(const bool InEnabled);
	void SetFocusByGadgetId(class APlayerController* InPlayerController, EGadgetId InGadgetId);
	void SetFocusByPlayerIndex(class APlayerController* InPlayerController, int32 InSlotIndex);
	void SetFocusCursorVisible(const bool InVisible);
	void SetGadgetPlateLastFocusIndex(const int32 InPlayerGadgetPlateSlotFocusIndex);
	void SetLastFocusGadgetData(const EGadgetId InGadgetId);
	void SetLastSelectGadgetCategory(const EGadgetCategory InGadgetCategory);
	void SetLastSelectGadgetId(const EGadgetId InGadgetId);
	void SetMouseInteractionButtonsEnabled(const bool InEnabled);
	void SetPlayerControllerIndex(int32 InPlayerIndex);
	void SetPresentCenterTypeBoxCursorVisible(const bool InVisible);
	void SetReadyWidgetVisible(bool bInIsVisible);
	void SetRentalPlateWidgetVisible(bool bInIsVisible);
	void Setup(const struct FGadgetSelectWindowData& InWindowData);
	void SetUpDownScrolledTriggerCancel(const bool bInFlag);
	void SetupPerPlayerCount(int32 InPlayerCount);
	void StopAllIconTextScroll();
	void UpCrossButtonRegister(int32 InPlayerIndex);
	void UpdateGadgetCustomWindowLeftRightScrolled(const bool bRightScroll);
	void UpdateGadgetCustomWindowNotScrolled();
	void UpdateGadgetCustomWindowUpDownScrolled(const bool bUpScroll);
	void UpScrollAnimFinished();
	void UpScrollAnimStarted();

	int32 GetPlayerIndex() const;
	bool IsConstFocusNew() const;
	bool IsPlayPurchaseAnim() const;
	bool IsPlayScrollAnimUpDown() const;
	bool IsReadyWidgetVisible() const;
	bool IsUpDownScrolledTriggerCancel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetCustomWindow">();
	}
	static class UGadgetCustomWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetCustomWindow>();
	}
};
static_assert(alignof(UGadgetCustomWindow) == 0x000008, "Wrong alignment on UGadgetCustomWindow");
static_assert(sizeof(UGadgetCustomWindow) == 0x000770, "Wrong size on UGadgetCustomWindow");
static_assert(offsetof(UGadgetCustomWindow, bIsLightVer) == 0x000570, "Member 'UGadgetCustomWindow::bIsLightVer' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, PlayerIndex) == 0x000574, "Member 'UGadgetCustomWindow::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, bConstFocusNewGadget) == 0x000578, "Member 'UGadgetCustomWindow::bConstFocusNewGadget' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, LastSelectGadgetId) == 0x000579, "Member 'UGadgetCustomWindow::LastSelectGadgetId' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, LastSelectGadgetCategory) == 0x00057A, "Member 'UGadgetCustomWindow::LastSelectGadgetCategory' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, GadgetCategoriesLastSelectId) == 0x000580, "Member 'UGadgetCustomWindow::GadgetCategoriesLastSelectId' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, SelectableGadgets) == 0x0005D0, "Member 'UGadgetCustomWindow::SelectableGadgets' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, GadgetPlateLastFocusIndex) == 0x000620, "Member 'UGadgetCustomWindow::GadgetPlateLastFocusIndex' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, PresentTypeBoxCategoryArray) == 0x000628, "Member 'UGadgetCustomWindow::PresentTypeBoxCategoryArray' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, GadgetCategoryHeaderRefArr) == 0x000638, "Member 'UGadgetCustomWindow::GadgetCategoryHeaderRefArr' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, FocusCursor) == 0x000648, "Member 'UGadgetCustomWindow::FocusCursor' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, ReadyWidgetRef) == 0x000650, "Member 'UGadgetCustomWindow::ReadyWidgetRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, RentalPlateWidgetRef) == 0x000658, "Member 'UGadgetCustomWindow::RentalPlateWidgetRef' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, MouseInteractionButtonRef_Decision) == 0x000660, "Member 'UGadgetCustomWindow::MouseInteractionButtonRef_Decision' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, MouseInteractionButtonRef_ToLeft) == 0x000668, "Member 'UGadgetCustomWindow::MouseInteractionButtonRef_ToLeft' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, MouseInteractionButtonRef_ToRight) == 0x000670, "Member 'UGadgetCustomWindow::MouseInteractionButtonRef_ToRight' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, MouseInteractionButtonRef_ToTop) == 0x000678, "Member 'UGadgetCustomWindow::MouseInteractionButtonRef_ToTop' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, MouseInteractionButtonRef_ToDown) == 0x000680, "Member 'UGadgetCustomWindow::MouseInteractionButtonRef_ToDown' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, bPlayUpDownScrollAnim) == 0x000688, "Member 'UGadgetCustomWindow::bPlayUpDownScrollAnim' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, bUpDownScrolledTriggerCancel) == 0x000689, "Member 'UGadgetCustomWindow::bUpDownScrolledTriggerCancel' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, bPlayPurchaseAnim) == 0x00068A, "Member 'UGadgetCustomWindow::bPlayPurchaseAnim' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, MachineType_Loop) == 0x000690, "Member 'UGadgetCustomWindow::MachineType_Loop' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, MachineType_Up_Program) == 0x000698, "Member 'UGadgetCustomWindow::MachineType_Up_Program' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, MachineType_Down_Program) == 0x0006A0, "Member 'UGadgetCustomWindow::MachineType_Down_Program' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, MachineType_Idle_Program) == 0x0006A8, "Member 'UGadgetCustomWindow::MachineType_Idle_Program' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, OnGadgetCategoryScrollStartEvent) == 0x0006B0, "Member 'UGadgetCustomWindow::OnGadgetCategoryScrollStartEvent' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, OnGadgetCategoryScrollEndEvent) == 0x0006C0, "Member 'UGadgetCustomWindow::OnGadgetCategoryScrollEndEvent' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, OnGadgetCategoryDecideEvent) == 0x0006D0, "Member 'UGadgetCustomWindow::OnGadgetCategoryDecideEvent' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, OnGadgetCategoryCancelEvent) == 0x0006E0, "Member 'UGadgetCustomWindow::OnGadgetCategoryCancelEvent' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, OnFocusChangeUp) == 0x0006F0, "Member 'UGadgetCustomWindow::OnFocusChangeUp' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, OnFocusChangeDown) == 0x000700, "Member 'UGadgetCustomWindow::OnFocusChangeDown' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, OnFocusChangeRight) == 0x000710, "Member 'UGadgetCustomWindow::OnFocusChangeRight' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, OnFocusChangeLeft) == 0x000720, "Member 'UGadgetCustomWindow::OnFocusChangeLeft' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, OnItemFocused) == 0x000730, "Member 'UGadgetCustomWindow::OnItemFocused' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, OnItemSelected) == 0x000740, "Member 'UGadgetCustomWindow::OnItemSelected' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, OnCancel) == 0x000750, "Member 'UGadgetCustomWindow::OnCancel' has a wrong offset!");
static_assert(offsetof(UGadgetCustomWindow, OnPurchaseAnimFinished) == 0x000760, "Member 'UGadgetCustomWindow::OnPurchaseAnimFinished' has a wrong offset!");

// Class UNION.RaceSequenceStateSetupAssets
// 0x0028 (0x0138 - 0x0110)
class URaceSequenceStateSetupAssets : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStickerBakerHandle*>            FrontStickerHandleArray;                           // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UStickerBakerHandle*>            RearStickerHandleArray;                            // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateSetupAssets">();
	}
	static class URaceSequenceStateSetupAssets* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateSetupAssets>();
	}
};
static_assert(alignof(URaceSequenceStateSetupAssets) == 0x000008, "Wrong alignment on URaceSequenceStateSetupAssets");
static_assert(sizeof(URaceSequenceStateSetupAssets) == 0x000138, "Wrong size on URaceSequenceStateSetupAssets");
static_assert(offsetof(URaceSequenceStateSetupAssets, FrontStickerHandleArray) == 0x000118, "Member 'URaceSequenceStateSetupAssets::FrontStickerHandleArray' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateSetupAssets, RearStickerHandleArray) == 0x000128, "Member 'URaceSequenceStateSetupAssets::RearStickerHandleArray' has a wrong offset!");

// Class UNION.LobbySceneBase
// 0x0020 (0x03F8 - 0x03D8)
class ULobbySceneBase : public UUnionUISceneBase
{
public:
	class UWidgetAnimation*                       Window_In;                                         // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Window_Loop;                                       // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Window_Out;                                        // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           MainCanvasPanel;                                   // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UCanvasPanel* GetMainCanvasPanel();
	void InitializeLobby();
	void PlayAnimationIn();
	void PlayAnimationLoop();
	void PlayAnimationOut();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySceneBase">();
	}
	static class ULobbySceneBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbySceneBase>();
	}
};
static_assert(alignof(ULobbySceneBase) == 0x000008, "Wrong alignment on ULobbySceneBase");
static_assert(sizeof(ULobbySceneBase) == 0x0003F8, "Wrong size on ULobbySceneBase");
static_assert(offsetof(ULobbySceneBase, Window_In) == 0x0003D8, "Member 'ULobbySceneBase::Window_In' has a wrong offset!");
static_assert(offsetof(ULobbySceneBase, Window_Loop) == 0x0003E0, "Member 'ULobbySceneBase::Window_Loop' has a wrong offset!");
static_assert(offsetof(ULobbySceneBase, Window_Out) == 0x0003E8, "Member 'ULobbySceneBase::Window_Out' has a wrong offset!");
static_assert(offsetof(ULobbySceneBase, MainCanvasPanel) == 0x0003F0, "Member 'ULobbySceneBase::MainCanvasPanel' has a wrong offset!");

// Class UNION.GadgetDetailWindow
// 0x0048 (0x0328 - 0x02E0)
class UGadgetDetailWindow : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x8];                                      // 0x02E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGadgetDetailWindowData                CurrentWindowData;                                 // 0x02F0(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void ChangeInputTypeIF_Implementation(EAppControllerInputType InNewControllerInputType);
	class FText GetRaceButtonText(int32 InPlayerIndex, uint8 InputType, const class FText& InText);
	void Setup(const struct FGadgetDetailWindowData& InWindowData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetDetailWindow">();
	}
	static class UGadgetDetailWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetDetailWindow>();
	}
};
static_assert(alignof(UGadgetDetailWindow) == 0x000008, "Wrong alignment on UGadgetDetailWindow");
static_assert(sizeof(UGadgetDetailWindow) == 0x000328, "Wrong size on UGadgetDetailWindow");
static_assert(offsetof(UGadgetDetailWindow, PlayerIndex) == 0x0002E8, "Member 'UGadgetDetailWindow::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UGadgetDetailWindow, CurrentWindowData) == 0x0002F0, "Member 'UGadgetDetailWindow::CurrentWindowData' has a wrong offset!");

// Class UNION.GadgetLottery
// 0x1390 (0x13B8 - 0x0028)
class UGadgetLottery final : public UObject
{
public:
	uint8                                         Pad_28[0x1390];                                    // 0x0028(0x1390)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EGadgetId Lot(EGadgetId InCurrentGadgetId);
	void Reset();

	int32 GetSeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetLottery">();
	}
	static class UGadgetLottery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetLottery>();
	}
};
static_assert(alignof(UGadgetLottery) == 0x000008, "Wrong alignment on UGadgetLottery");
static_assert(sizeof(UGadgetLottery) == 0x0013B8, "Wrong size on UGadgetLottery");

// Class UNION.LobbySequenceBase2
// 0x05D0 (0x0938 - 0x0368)
class ALobbySequenceBase2 : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x10];                                     // 0x0368(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnGadgetCustmizeFinishedEvent;                     // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLobbyInitData& Data)> OnMakeLobbyHostDataEvent;      // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, int32 RingIndex)> OnVoteSelectCourseEvent;      // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InCourseIndex, int32 InPlayerIndex, const TArray<struct FAnotherStageLotteryResult>& InLotteryResults)> OnHostDecisionSelectCourseEvent; // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnStartSelectCourseResultEvent;                    // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDebugTimeCountForceEnd;                          // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDebugCrownVisibleForceChange;                    // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EMatchingLobbyType                            LobbyType;                                         // 0x03E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOnlineSequence*                        OnlineSequence;                                    // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbySequenceState                           PrevSequenceState;                                 // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbySequenceState                           PrevFadeSequenceState;                             // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3FA[0x6];                                      // 0x03FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLobbyPlayerData>               LobbyPlayerData;                                   // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 PlayerPositionControlTable;                        // 0x0410(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMenuRacerParameterDataAsset*           MenuRacerParameterDataAsset;                       // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<EStageId>                              CourseMainID;                                      // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EStageId>                              VisibleCourseMainId;                               // 0x0438(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class ULobbySceneBase*                        MainUIScene;                                       // 0x0448(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   SubMenuUIClass;                                    // 0x0450(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuSubMenu*                     SubMenu;                                           // 0x0478(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableSubMenuInput;                                // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SelectCourseUIClass;                               // 0x0488(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyCourseSelectSceneBase*            CourseSelectUIScene;                               // 0x04B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   LobbyAnnounceInfoUIClass;                          // 0x04B8(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyAnnounceInfo*                     LobbyAnnounceInfo;                                 // 0x04E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMessageBar*                      MessageBarScene;                                   // 0x04E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   MessageBarClassPtr;                                // 0x04F0(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOnlinePlayerNameButton*                FocusedPlayerName;                                 // 0x0518(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_520[0x10];                                     // 0x0520(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsLobbySearchCancel;                              // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_531[0xF];                                      // 0x0531(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	class ULobbyEntryCheckState*                  EntryCheckStateComponent;                          // 0x0540(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCharaMachineSelectStateBase> CharaMachineSelectClass;                         // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharaMachineSelectStateBase*           CharaMachineSelectComponent;                       // 0x0550(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGadgetCustomize2State>     CustomizeGadgetClass;                              // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGadgetCustomize2State*                 CustomizeGadgetComponent;                          // 0x0560(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UEmoteWheelState>           EmoteWheelClass;                                   // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEmoteWheelState*                       EmoteWheelComponent;                               // 0x0570(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULobbyPlayerListState>      LobbyPlayerListClass;                              // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyPlayerListState*                  LobbyPlayerListComponent;                          // 0x0580(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UPlayerProfileState>        PlayerProfileClass;                                // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerProfileState*                    PlayerProfileComponent;                            // 0x0590(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGarageState>               GarageClass;                                       // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGarageState*                           GarageComponent;                                   // 0x05A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFriendListState>           FriendListClass;                                   // 0x05A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFriendListState*                       FriendListComponent;                               // 0x05B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNoticePopupState>          NoticePopupClass;                                  // 0x05B8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoticePopupState*                      NoticePopupComponent;                              // 0x05C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNetLobbyControlComponent*              NetLobbyControlComponent;                          // 0x05C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbySequenceP2PConnection*            P2PConnection;                                     // 0x05D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuInputRecieveObject*                MenuInputReceiveObject;                            // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuInputRecieveObject*                MenuButtonInputReceiveObject;                      // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFont*                                  FontObject;                                        // 0x05E8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableInputPlayer;                                 // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AMenuCameraManager>         CameraManagerClass;                                // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMenuCameraManager*                     CameraManager;                                     // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACameraActor*                           CameraActor;                                       // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorseLotteryWheelBase*                 CorseLotteryWheel;                                 // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<EStageId>                              CorseLotteryResult;                                // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UAnotherStageLotteryWheel*              AnotherStageLotteryWheel;                          // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FAnotherStageLotteryResult>     AnotherStageLotteryResult;                         // 0x0630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class ALobbyTravelRingManager>    LobbyTravelRingManagerClass;                       // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ALobbyTravelRingManager*                LobbyTravelRingManager;                            // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ALobbyFinishDirectingManager*           LobbyFinishedDirectingManager;                     // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LobbyHostPlayerIndex;                              // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OwnPlayerIndex;                                    // 0x065C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CourseResultSelectedPlayerIndex;                   // 0x0660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStageId                                      CourseResultSelectedCourseId;                      // 0x0664(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AlreadyReceiveDecidedCourse;                       // 0x0665(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsPlaySelectCourseResult;                          // 0x0666(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_667[0x1];                                      // 0x0667(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     TransformMenuRacers;                               // 0x0668(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          CanExitState;                                      // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLobbyFinishedFadeComplete;                        // 0x0679(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsStartFadeOnInitialize;                           // 0x067A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInitializedLobby;                                // 0x067B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsCompleteMatchmaking;                             // 0x067C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsReceivedLobbyHostData;                           // 0x067D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsOwnConnected;                                    // 0x067E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RaceCycleFlag;                                     // 0x067F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseStateSelectCourse;                              // 0x0680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsFinishedSelectCourseResult;                      // 0x0681(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsLobbySearching;                                  // 0x0682(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsVisibleMatchingNow;                              // 0x0683(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsCallForceBack;                                   // 0x0684(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsCallLobbyDeleteFromComponent;                    // 0x0685(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_686[0x2];                                      // 0x0686(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNetLobbyControlComponent>  NetLobbyControlComponentClass;                     // 0x0688(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULobbySequenceP2PConnection> P2PConnectionClass;                               // 0x0690(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SubLevelName;                                      // 0x0698(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbyTimerType                               LobbyTimerType;                                    // 0x06A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A1[0x7];                                      // 0x06A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ELobbyTimerType, int32>                  LobbyTimerStartTimeCount;                          // 0x06A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          MatchingConpleteQue;                               // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          MatchingWaitLoopCue;                               // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoundHandle                           MatchingWaitLoop;                                  // 0x0708(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_70C[0x4];                                      // 0x070C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          MatchingCancelBtnCue;                              // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            LobbySearchCancelTimeLine;                         // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UTimelineComponent>         LongPutCancelTimeLineClass;                        // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTimelineComponent*                     LongPutCancelTimeLine;                             // 0x0728(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETimelineDirection                            TimelineDirection;                                 // 0x0730(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_731[0x7];                                      // 0x0731(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HostCancelWindowText;                              // 0x0738(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   ClientCancelWindowText;                            // 0x0748(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_758[0x68];                                     // 0x0758(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AUnionCrossPlayResolveWindowManager> CrossPlayResolveUIManagerClass;           // 0x07C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AUnionCrossPlayResolveWindowManager*    m_CrossPlayResolveUIManager;                       // 0x07C8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7D0[0x10];                                     // 0x07D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIPopupWindowBase*                PopupWindow;                                       // 0x07E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7E8[0x110];                                    // 0x07E8(0x0110)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPendingRefreshPlayerParamData> PendingRefreshPlayerParam;                         // 0x08F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FPendingDestroyRacer>           PendingDestroyRacer;                               // 0x0908(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_918[0x20];                                     // 0x0918(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AfterCharaMachineSetting(bool InIsTimeUp);
	void AfterEmoteWheelSetting(bool InIsTimeUp);
	void AfterGarageSetting(bool InIsTimeUp);
	bool AlreadyStartedPreloadMainCourse();
	void BackStateFromPlayerList();
	void BeforeCharaMachineSetting();
	void BeforeEmoteWheelSetting();
	void BeforeGarageSetting();
	void BeforePlayerProfileSetting();
	void BindMenuInputReceive();
	void BindPlayerName();
	void BindPlayerProfile();
	void BindPrimaryLobbyEvent(class UCommonLobbyContext* LobbyContext);
	void BindPrivateLobbyEvent(class UCommonLobbyContext* LobbyContext);
	void BindSubMenu();
	void CalcDecideCourse(int32* OutSelectedPlayerIndex, EStageId* OutSelectedCourseId);
	bool CallForceBackFunction();
	void CallOnBackEvent();
	void CancelLongPutCancelTimeLine();
	void ChangeFooterParam(ELobbySequenceState InState);
	void ChangeHeaderParam(ELobbySequenceState InState);
	void ChangeTimerFinished();
	void CheckAndCrownSpawnOrDespawn(const int32 InRacerIndex);
	bool CheckEnableForceBackState(ELobbySequenceState InState);
	bool CheckEnableUpdateForLobbyRacer();
	void CreateCameraManager();
	void CreateCourseSelectUIScene();
	void CreateDisableGadgetMessageBar();
	void CreateLobbyAnnounceInfo();
	void CreateLobbyTravelRingManager();
	void CreateMainUIScene();
	void DebugForceTimeOut();
	void DebugShowCrown();
	void DeleteOnlineActivity();
	class AMenuCameraManager* GetCameraManager();
	ELobbySequenceState GetCurrentLobbyState();
	bool GetDebugLobbyTimeCountStop();
	bool GetEnableInputPlayer();
	void GetEnterLobbyId(struct FLobbyId* OutLobbyId);
	class UCommonMenuFooterMenu* GetFooterMenu();
	class UCommonMenuHeaderMenu* GetHeaderMenu();
	class ULobbyAnnounceInfo* GetLobbyAnnounceInfo();
	class AMenuRacerLobby* GetLobbyRacer(int32 InIndex);
	TArray<class AMenuRacerLobby*> GetLobbyRacers();
	EMatchingLobbyType GetLobbyType();
	class ULobbySceneBase* GetMainUIScene();
	void GetPlayableCourseMainList(TArray<EStageId>* OutPlayableCourseMainList);
	void GetPlayerDisplayName(int32 InPlayerLobbyIndex);
	void GetPlayerSelectedCourseIds(TArray<EStageId>* OutPlayerSelectedCourseIds, TArray<int32>* OutPlayerSelectedCourseIndexs);
	int32 GetStartTimeCount();
	int32 GetTimeCount();
	class UOnlineTimer* GetTimer();
	void GoNextStateAfterInitialize();
	void GoNextStateEmoteWheel();
	void GoNextStateLobbyPlayerList();
	void GoNextStatePlayerProfile(int32 InButtonIndex);
	void GoNextStateRuleSetting();
	void InitializeCameraManager();
	void InitializeCourseSelectUIScene();
	void InitializeLobbyTravelRingManager();
	void InitializeMainUIScene();
	void InitializeMenuRacers();
	void InitializeOwnMenuRacer(bool bIsWaitingToReturnTheRace);
	void InitializeRaceResult();
	void InitializeSubLevelObjects();
	void InitializeSubMenu();
	void InitializeTimer();
	void InitializeTransformLobbyRacers();
	void InitRaceSetting();
	bool IsCom(int32 InPlayerLobbyIndex, bool* OutIsValidLobbyContext, bool* OutIsValidMemberContext);
	bool IsInitSyncCurrentCharaMachine();
	bool IsShortLobbyIdExpired(const double ExpirationTimeSec);
	bool IsSubMenuState(const ELobbySequenceState InState);
	bool IsSubMenuStateUseFade(const ELobbySequenceState InState);
	bool IsValidPlayer(int32 InPlayerIndex);
	bool IsValidPlayerData(const struct FLobbyPlayerData& PlayerData);
	void LoadLobbySubLevel();
	void LoadTopMenuSubLevel();
	struct FLobbyInitData MakeLobbyHostData();
	void MatchingUserSetting();
	void OnAcceptKeyPressedLobby(class UObject* Object);
	void OnAcceptKeyReleasedLobby(class UObject* Object);
	void OnAddMemberInitComplete();
	void OnBackCharaMachine(EMenuSequenceSubState InState);
	void OnBackCustomizeGadget(EMenuSequenceSubState InState);
	void OnBackKeyPressedLobby(class UObject* Object);
	void OnBackKeyReleasedLobby(class UObject* Object);
	void OnBackLobbySubMenuFadeFinished(EUnionUIFadeDirection InFadeDirection);
	void OnBackNoticePopup(EMenuSequenceSubState State);
	void OnBackPlayerName(EMenuSequenceSubState InState);
	void OnBackPlayerProfile(EMenuSequenceSubState InState);
	void OnBackSequence();
	void OnBlockPlayerProfile(const class FString& UserId);
	void OnBlockPlayerProfileResult(EBlockPlayerErrorCode ErrorCode, const class FString& ProductUserId);
	void OnCancelGarage(EMenuSequenceSubState State);
	void OnCancelLobbySearch(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnCancelLongPutCancelTimeLine(class UObject* Object);
	void OnCancelPlayerName(class UUnionUIButtonBase* InButton, int32 InButtonIndex);
	void OnCancelReturnedFromRaceToLobby(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnCancelSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnCancelWaitingInTheLobby(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnChangedPlayerProfile(int32 NextPlayerIndex);
	void OnChangedWaitTimerEmoteWheel(bool IsWaiting);
	void OnComebackMember(bool AllMembersInputFinished);
	void OnCompleteMatchmaking(EGameMatchmakingCompleteStatus Status, const struct FCreateOrConnectLobbyResult& Result);
	void OnDecideLobbySearch(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecideReturnedFromRaceToLobby(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecideSubMenu(class UUnionUIButtonBase* InButton, int32 PanelIndex, int32 ButtonIndex);
	void OnDecideWaitingInTheLobby(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecisionCharaMachine();
	void OnDecisionPlayerName(class UUnionUIButtonBase* InButton, int32 InButtonIndex);
	void OnDecisionSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDisconnectPlayerProfileErrorWindow();
	void OnErrorFromNetLobbyControl(int32 ErrorCode, EAppNetErrorCode ErrorCodeEnum, const class FString& ErrorMessage);
	void OnExitEmoteWheel(EMenuSequenceSubState State);
	void OnExitFriendList(EMenuSequenceSubState State);
	void OnExitPopupWindow(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnExitStateBackToPrevSequence();
	void OnExitStateCheckLobbyHost();
	void OnExitStateCheckMembers();
	void OnExitStateCheckMembersWaiting();
	void OnExitStateErrorWindow();
	void OnExitStateFestaRentalGadgetWindow();
	void OnExitStateFestaRuleWindow();
	void OnExitStateFestaTeamDirecting();
	void OnExitStateFixPlayerData();
	void OnExitStateLobbyFinished();
	void OnExitStateLobbyInit();
	void OnExitStateLobbySearch();
	void OnExitStateLobbySearchComplete();
	void OnExitStateQuitLobbyEndWindow();
	void OnExitStateQuitLobbyWindow();
	void OnExitStateReturnedFromRaceToLobby();
	void OnExitStateSelectCourse();
	void OnExitStateSelectCourseResult();
	void OnExitStateSelectCourseWait();
	void OnExitStateShowFestaFixedRuleInfoWindow();
	void OnExitStateSquadInRaceCheck();
	void OnExitStateSubFairPoint();
	void OnExitStateSubLevelCheck();
	void OnExitStateWaitingInTheLobby();
	void OnExitStateWaitP2PConnection();
	void OnExitStateWaitSquadP2PConnectComplete();
	void OnFaceLeftPressedLobby(class UObject* Object);
	void OnFaceTopPressedLobby(class UObject* Object);
	void OnFaceTopPressedLobbyPlayerList();
	void OnFadeCompleteOnLobbyFinished(EUnionUIFadeDirection InFadeDirection);
	void OnFadeFinishedOnInitialize(EUnionUIFadeDirection InFadeDirection);
	void OnFinishedLevelSequenceLobby();
	void OnFinishedLevelSequenceSelectCourseResult();
	void OnFinishedLoadLobbySubLevelCallback();
	void OnFinishedLoadTopMenuSubLevelCallback();
	void OnFinishedLongPutCancelTimeLine();
	void OnFinishedUnLoadLobbySubLevelCallback();
	void OnFinishedUnLoadTopMenuSubLevelCallback();
	void OnFocusPlayerName(class UUnionUIButtonBase* InButton, int32 InButtonIndex);
	void OnFocusSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnFriendRequestMsgBarPlayerProfileEvent();
	void OnFriendRequestPlayerProfile(int32 PlayerIndex);
	void OnFriendRequestPlayerProfileResult(bool bSuccessful, int32 ErrorCode);
	void OnGotoCharaMachineFadeFinished(EUnionUIFadeDirection InFadeDirection);
	void OnGotoCustomizeGadgetFadeFinished(EUnionUIFadeDirection InFadeDirection);
	void OnGotoGarageFadeFinished(EUnionUIFadeDirection InFadeDirection);
	void OnInitStateBackToPrevSequence();
	void OnInitStateCheckLobbyHost();
	void OnInitStateCheckMembers();
	void OnInitStateCheckMembersWaiting();
	void OnInitStateErrorWindow();
	void OnInitStateExit();
	void OnInitStateFestaRentalGadgetWindow();
	void OnInitStateFestaRuleWindow();
	void OnInitStateFestaTeamDirecting();
	void OnInitStateFixPlayerData();
	void OnInitStateIdle();
	void OnInitStateLobbyFinished();
	void OnInitStateLobbyInit();
	void OnInitStateLobbyPlayerList();
	void OnInitStateLobbySearch();
	void OnInitStateLobbySearchComplete();
	void OnInitStateNotificationWindow();
	void OnInitStateQuitLobbyEndWindow();
	void OnInitStateQuitLobbyWindow();
	void OnInitStateReturnedFromRaceToLobby();
	void OnInitStateSelectCourse();
	void OnInitStateSelectCourseResult();
	void OnInitStateSelectCourseWait();
	void OnInitStateSelectGameMode();
	void OnInitStateShowFestaFixedRuleInfoWindow();
	void OnInitStateShowTipsWindow();
	void OnInitStateSquadInRaceCheck();
	void OnInitStateSubFairPoint();
	void OnInitStateSubLevelCheck();
	void OnInitStateWaitingInTheLobby();
	void OnInitStateWaitP2PConnection();
	void OnInitStateWaitSquadP2PConnectComplete();
	void OnKickPlayerProfile(int32 PlayerIndex);
	void OnKickPlayerProfileResult(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnLeftStickPressedLobby(class UObject* Object);
	void OnLobbyBackFadeFinished(EUnionUIFadeDirection InFadeDirection);
	void OnLobbyFinishFadeFinished(EUnionUIFadeDirection InFadeDirection);
	void OnLobbyMemberConnect(const struct FLobbyPlayerData& InPlayerData, bool InIsOwnPlayer);
	void OnLobbyMemberDisconnect(const struct FLobbyPlayerData& InPlayerData, bool InIsOwnPlayer);
	void OnLobbySystemPreRaceFinished();
	void OnLogoutComplete(int32 LocalUserNum, bool bWasSuccessful);
	void OnMessageBarSceneOutAnimFinish();
	void OnPlatformEvent(const struct FUnionPlatformEventInfo& EventInfo);
	bool OnPlayerNameButtonDecideEvent(bool bIsSuccsess);
	void OnPlayLevelSequenceLobby();
	void OnPlayReverseLevelSequenceLobby();
	void OnReportPlayerProfile(int32 PlayerIndex);
	void OnRightShoulderPressedLobby(class UObject* Object);
	void OnSelectedStampEmoteWheel(int32 StampIndex);
	void OnSendNicePlayerProfile(int32 SendPlayerIndex);
	void OnShowLevelSequenceSelectCourseResultUI();
	void OnShowPopupPlayerProfile(int32 InBtnType);
	void OnSpecialPressedLobby(class UObject* Object);
	void OnStartMatchmaking(class UCommonLobbyContext* LobbyContext);
	void OnStartMatchmakingForMember(class UCommonLobbyContext* LobbyContext);
	void OnStartSelectCourseResultEventCallback();
	void OnSubFairPointComplete(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnSyncLobbyComplete(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnTimeOutLobby();
	void OnUnFocusPlayerName(class UUnionUIButtonBase* InButton, int32 InButtonIndex);
	void OnUnFocusSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnUpdateLongPutCancelTimeLine(float InValue);
	void OnUpdateStateBackToPrevSequence(float InDeltaTime);
	void OnUpdateStateCheckLobbyHost(float InDeltaTime);
	void OnUpdateStateCheckMembers(float InDeltaTime);
	void OnUpdateStateCheckMembersWaiting(float InDeltaTime);
	void OnUpdateStateErrorWindow(float InDeltaTime);
	void OnUpdateStateFixPlayerData(float InDeltaTime);
	void OnUpdateStateLobbyFinished(float InDeltaTime);
	void OnUpdateStateLobbyInit(float InDeltaTime);
	void OnUpdateStateLobbySearch(float InDeltaTime);
	void OnUpdateStateLobbySearchComplete(float InDeltaTime);
	void OnUpdateStateQuitLobbyEndWindow(float InDeltaTime);
	void OnUpdateStateQuitLobbyWindow(float InDeltaTime);
	void OnUpdateStateReturnedFromRaceToLobby(float InDeltaTime);
	void OnUpdateStateSelectCourse(float InDeltaTime);
	void OnUpdateStateSelectCourseResult(float InDeltaTime);
	void OnUpdateStateSelectCourseWait(float InDeltaTime);
	void OnUpdateStateSquadInRaceCheck(float InDeltaTime);
	void OnUpdateStateSubFairPoint(float InDeltaTime);
	void OnUpdateStateSubLevelCheck(float InDeltaTime);
	void OnUpdateStateWaitingInTheLobby(float InDeltaTime);
	void OnUpdateStateWaitP2PConnection(float InDeltaTime);
	void OnUpdateStateWaitSquadP2PConnectComplete(float InDeltaTime);
	void OverrideResultData();
	bool OwnPlayerIsHost();
	void PlayLobbyBgm();
	void PlaySelectCourseResult();
	void QuitLobby();
	void ReceiveChangedLikesCount(int32 InSendPlayerLobbyIndex, int32 OnNewLikesCount);
	void ReceiveDecidedCourse(int32 InDecidedCourseId, int32 InDecidedPlayerOnlineIndex);
	void ReceiveHorn(int32 InSendPlayerLobbyIndex);
	void ReceiveLike(int32 InSendPlayerLobbyIndex, int32 InReceivePlayerLobbyIndex);
	void ReceiveLobbyInitData(class UCommonLobbyContext* InLobbyContext, const struct FLobbyInitData& InData);
	void ReceiveStamp(int32 InSendPlayerLobbyIndex, int32 InStampIndex);
	void RecvHorn(class UCommonLobbyMemberContext* InMemberContext);
	void RecvLike(class UCommonLobbyMemberContext* InSendMemberContext, class UCommonLobbyMemberContext* InRecvMemberContext);
	void RecvSelectCourse(class UCommonLobbyMemberContext* InMemberContext, int32 courseId);
	void RecvStamp(class UCommonLobbyMemberContext* InMemberContext, int32 InStampIndex);
	void RefreshPlayerParam(const struct FLobbyPlayerData& InPlayerData, bool InIsOwnPlayer, ECommonLobbyMemberState InLobbyState);
	void RemoveLobbyWidget();
	void RemoveSelectCourseWidget();
	void ResetLongPutCancelTimeLine();
	void SendHorn();
	void SetAloneLobbyWatchingFlag(bool bWatching);
	void SetCourseSelectSetting(EStageId InSelectedCourseId, TArray<struct FAnotherStageLotteryResult>* LotteryResults);
	void SetFooterHoldGaugeValue(float InValue);
	void SetHiddenAlreadySetupMenuRacers(bool bNewHidden, bool bIsLobbySearchForceBack);
	void SetHiddenInGameMenuRacers(bool bNewHidden, bool bIsLobbySearchForceBack);
	void SetIsInitializedLobby(bool bNewValue);
	void SetLobbyPlayerCount(int32 InPlayerCount);
	void SetLobbyRacer(int32 InPlayerLobbyIndex);
	void SetLobbyRacerParam(class AMenuRacerLobby* InMenuRacerLobby, int32 InIndex);
	void SetLobbySequenceType(ELobbySequenceState InNextState);
	void SetLobbyType(EMatchingLobbyType Type);
	void SetMenuDirectionKeyEnable(const bool Enable);
	void SetNextLobbySequenceState(ELobbySequenceState InState, ELobbySequenceState PrevState);
	void SetNextLobbySubMenuState(class UCommonMenuButtonBase* InButton);
	void SetOnlineActivity();
	void SetPlayerName(int32 InPlayerLobbyIndex, bool bInIsCom);
	void SetTimeCount(int32 InTimeCount);
	void SetUpCameraManager();
	void SetUpConvertPlayerIndexList();
	void SetupCourseSelect();
	void SetupPrimaryLobby();
	void SetupPrivateLobby();
	void SetVisibilitySubMenu(ESlateVisibility InVisibility);
	void SetVisibilityValidOwnIcon(ESlateVisibility InVisibility);
	void SetVisibilityValidPlayerName(ESlateVisibility InVisibility);
	void ShowStageName();
	void StartFadeOnInitialize();
	void StartLongPutCancelTimeLine();
	void StartTimer(ELobbyTimerType InELobbyTimerType);
	void StateInputInit();
	void StateInputInitCheckMembers();
	void StateInputInitControl();
	void StateInputInitLobbySearch();
	void StateInputInitReturnedFromRaceToLobby();
	void StateInputInitSelectGameMode();
	void StateInputInitWaitingInTheLobby();
	void SyncCurrentCharaMachine();
	void UnBindMenuInputReceive();
	void UnBindPlayerName();
	void UnBindPlayerProfile();
	void UnBindPrivateLobbyEvent(class UCommonLobbyContext* LobbyContext);
	void UnBindSubMenu();
	void UnLoadLobbySubLevel();
	void UnLoadTopMenuSubLevel();
	void UpdateLobbyRacers(bool IsAlreadySetupRacerOnly);
	void UpdatePlayerName();
	void WatchShortLobbyIdExpiry(const float DeltaTime);

	class UCommonLobbyContext* CreateLobbyContext(int32 LocalUserNum) const;
	class UCommonLobbyContext* CreateLobbyContextByMatchmakingResult(int32 LocalUserNum, const struct FCreateOrConnectLobbyResult& MatchmakingResult) const;
	class UMatchmakingRequestContext* CreateMatchmakingContext(int32 LocalUserNum) const;
	void FinalizeLobbyContext() const;
	ELobbySequenceState GetBackState() const;
	float GetDeltaTime() const;
	bool GetIsInitializedLobby() const;
	class UCommonLobbyContext* GetLobbyContext() const;
	class FName GetLobbySubLevelName(EMatchingLobbyType InType) const;
	class UNetLobbyControlComponent* GetNetLobbyControlComponent() const;
	class ULobbySequenceP2PConnection* GetP2PConnection() const;
	class FName GetSubLevelName() const;
	class FName GetSubLevelNameOfFesta() const;
	class FName GetSubLevelNameOfFriend() const;
	class FName GetSubLevelNameOfLegend() const;
	class FName GetSubLevelNameOfRankMatch() const;
	class FName GetSubLevelNameOfSquad() const;
	class FName GetSubLevelNameOfWireless() const;
	bool IsEnableSubStateTime(ELobbyTimerType InTimerType) const;
	bool IsFriendMatchLobbyType() const;
	bool ShouldMatchmaking() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySequenceBase2">();
	}
	static class ALobbySequenceBase2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbySequenceBase2>();
	}
};
static_assert(alignof(ALobbySequenceBase2) == 0x000008, "Wrong alignment on ALobbySequenceBase2");
static_assert(sizeof(ALobbySequenceBase2) == 0x000938, "Wrong size on ALobbySequenceBase2");
static_assert(offsetof(ALobbySequenceBase2, OnGadgetCustmizeFinishedEvent) == 0x000378, "Member 'ALobbySequenceBase2::OnGadgetCustmizeFinishedEvent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, OnMakeLobbyHostDataEvent) == 0x000388, "Member 'ALobbySequenceBase2::OnMakeLobbyHostDataEvent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, OnVoteSelectCourseEvent) == 0x000398, "Member 'ALobbySequenceBase2::OnVoteSelectCourseEvent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, OnHostDecisionSelectCourseEvent) == 0x0003A8, "Member 'ALobbySequenceBase2::OnHostDecisionSelectCourseEvent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, OnStartSelectCourseResultEvent) == 0x0003B8, "Member 'ALobbySequenceBase2::OnStartSelectCourseResultEvent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, OnDebugTimeCountForceEnd) == 0x0003C8, "Member 'ALobbySequenceBase2::OnDebugTimeCountForceEnd' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, OnDebugCrownVisibleForceChange) == 0x0003D8, "Member 'ALobbySequenceBase2::OnDebugCrownVisibleForceChange' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbyType) == 0x0003E8, "Member 'ALobbySequenceBase2::LobbyType' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, OnlineSequence) == 0x0003F0, "Member 'ALobbySequenceBase2::OnlineSequence' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, PrevSequenceState) == 0x0003F8, "Member 'ALobbySequenceBase2::PrevSequenceState' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, PrevFadeSequenceState) == 0x0003F9, "Member 'ALobbySequenceBase2::PrevFadeSequenceState' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbyPlayerData) == 0x000400, "Member 'ALobbySequenceBase2::LobbyPlayerData' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, PlayerPositionControlTable) == 0x000410, "Member 'ALobbySequenceBase2::PlayerPositionControlTable' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, MenuRacerParameterDataAsset) == 0x000420, "Member 'ALobbySequenceBase2::MenuRacerParameterDataAsset' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CourseMainID) == 0x000428, "Member 'ALobbySequenceBase2::CourseMainID' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, VisibleCourseMainId) == 0x000438, "Member 'ALobbySequenceBase2::VisibleCourseMainId' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, MainUIScene) == 0x000448, "Member 'ALobbySequenceBase2::MainUIScene' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, SubMenuUIClass) == 0x000450, "Member 'ALobbySequenceBase2::SubMenuUIClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, SubMenu) == 0x000478, "Member 'ALobbySequenceBase2::SubMenu' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, EnableSubMenuInput) == 0x000480, "Member 'ALobbySequenceBase2::EnableSubMenuInput' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, SelectCourseUIClass) == 0x000488, "Member 'ALobbySequenceBase2::SelectCourseUIClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CourseSelectUIScene) == 0x0004B0, "Member 'ALobbySequenceBase2::CourseSelectUIScene' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbyAnnounceInfoUIClass) == 0x0004B8, "Member 'ALobbySequenceBase2::LobbyAnnounceInfoUIClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbyAnnounceInfo) == 0x0004E0, "Member 'ALobbySequenceBase2::LobbyAnnounceInfo' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, MessageBarScene) == 0x0004E8, "Member 'ALobbySequenceBase2::MessageBarScene' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, MessageBarClassPtr) == 0x0004F0, "Member 'ALobbySequenceBase2::MessageBarClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, FocusedPlayerName) == 0x000518, "Member 'ALobbySequenceBase2::FocusedPlayerName' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, bIsLobbySearchCancel) == 0x000530, "Member 'ALobbySequenceBase2::bIsLobbySearchCancel' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, EntryCheckStateComponent) == 0x000540, "Member 'ALobbySequenceBase2::EntryCheckStateComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CharaMachineSelectClass) == 0x000548, "Member 'ALobbySequenceBase2::CharaMachineSelectClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CharaMachineSelectComponent) == 0x000550, "Member 'ALobbySequenceBase2::CharaMachineSelectComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CustomizeGadgetClass) == 0x000558, "Member 'ALobbySequenceBase2::CustomizeGadgetClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CustomizeGadgetComponent) == 0x000560, "Member 'ALobbySequenceBase2::CustomizeGadgetComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, EmoteWheelClass) == 0x000568, "Member 'ALobbySequenceBase2::EmoteWheelClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, EmoteWheelComponent) == 0x000570, "Member 'ALobbySequenceBase2::EmoteWheelComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbyPlayerListClass) == 0x000578, "Member 'ALobbySequenceBase2::LobbyPlayerListClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbyPlayerListComponent) == 0x000580, "Member 'ALobbySequenceBase2::LobbyPlayerListComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, PlayerProfileClass) == 0x000588, "Member 'ALobbySequenceBase2::PlayerProfileClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, PlayerProfileComponent) == 0x000590, "Member 'ALobbySequenceBase2::PlayerProfileComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, GarageClass) == 0x000598, "Member 'ALobbySequenceBase2::GarageClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, GarageComponent) == 0x0005A0, "Member 'ALobbySequenceBase2::GarageComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, FriendListClass) == 0x0005A8, "Member 'ALobbySequenceBase2::FriendListClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, FriendListComponent) == 0x0005B0, "Member 'ALobbySequenceBase2::FriendListComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, NoticePopupClass) == 0x0005B8, "Member 'ALobbySequenceBase2::NoticePopupClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, NoticePopupComponent) == 0x0005C0, "Member 'ALobbySequenceBase2::NoticePopupComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, NetLobbyControlComponent) == 0x0005C8, "Member 'ALobbySequenceBase2::NetLobbyControlComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, P2PConnection) == 0x0005D0, "Member 'ALobbySequenceBase2::P2PConnection' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, MenuInputReceiveObject) == 0x0005D8, "Member 'ALobbySequenceBase2::MenuInputReceiveObject' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, MenuButtonInputReceiveObject) == 0x0005E0, "Member 'ALobbySequenceBase2::MenuButtonInputReceiveObject' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, FontObject) == 0x0005E8, "Member 'ALobbySequenceBase2::FontObject' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, EnableInputPlayer) == 0x0005F0, "Member 'ALobbySequenceBase2::EnableInputPlayer' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CameraManagerClass) == 0x0005F8, "Member 'ALobbySequenceBase2::CameraManagerClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CameraManager) == 0x000600, "Member 'ALobbySequenceBase2::CameraManager' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CameraActor) == 0x000608, "Member 'ALobbySequenceBase2::CameraActor' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CorseLotteryWheel) == 0x000610, "Member 'ALobbySequenceBase2::CorseLotteryWheel' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CorseLotteryResult) == 0x000618, "Member 'ALobbySequenceBase2::CorseLotteryResult' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, AnotherStageLotteryWheel) == 0x000628, "Member 'ALobbySequenceBase2::AnotherStageLotteryWheel' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, AnotherStageLotteryResult) == 0x000630, "Member 'ALobbySequenceBase2::AnotherStageLotteryResult' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbyTravelRingManagerClass) == 0x000640, "Member 'ALobbySequenceBase2::LobbyTravelRingManagerClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbyTravelRingManager) == 0x000648, "Member 'ALobbySequenceBase2::LobbyTravelRingManager' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbyFinishedDirectingManager) == 0x000650, "Member 'ALobbySequenceBase2::LobbyFinishedDirectingManager' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbyHostPlayerIndex) == 0x000658, "Member 'ALobbySequenceBase2::LobbyHostPlayerIndex' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, OwnPlayerIndex) == 0x00065C, "Member 'ALobbySequenceBase2::OwnPlayerIndex' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CourseResultSelectedPlayerIndex) == 0x000660, "Member 'ALobbySequenceBase2::CourseResultSelectedPlayerIndex' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CourseResultSelectedCourseId) == 0x000664, "Member 'ALobbySequenceBase2::CourseResultSelectedCourseId' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, AlreadyReceiveDecidedCourse) == 0x000665, "Member 'ALobbySequenceBase2::AlreadyReceiveDecidedCourse' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, IsPlaySelectCourseResult) == 0x000666, "Member 'ALobbySequenceBase2::IsPlaySelectCourseResult' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, TransformMenuRacers) == 0x000668, "Member 'ALobbySequenceBase2::TransformMenuRacers' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CanExitState) == 0x000678, "Member 'ALobbySequenceBase2::CanExitState' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, bLobbyFinishedFadeComplete) == 0x000679, "Member 'ALobbySequenceBase2::bLobbyFinishedFadeComplete' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, IsStartFadeOnInitialize) == 0x00067A, "Member 'ALobbySequenceBase2::IsStartFadeOnInitialize' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, IsInitializedLobby) == 0x00067B, "Member 'ALobbySequenceBase2::IsInitializedLobby' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, IsCompleteMatchmaking) == 0x00067C, "Member 'ALobbySequenceBase2::IsCompleteMatchmaking' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, IsReceivedLobbyHostData) == 0x00067D, "Member 'ALobbySequenceBase2::IsReceivedLobbyHostData' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, IsOwnConnected) == 0x00067E, "Member 'ALobbySequenceBase2::IsOwnConnected' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, RaceCycleFlag) == 0x00067F, "Member 'ALobbySequenceBase2::RaceCycleFlag' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, UseStateSelectCourse) == 0x000680, "Member 'ALobbySequenceBase2::UseStateSelectCourse' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, IsFinishedSelectCourseResult) == 0x000681, "Member 'ALobbySequenceBase2::IsFinishedSelectCourseResult' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, IsLobbySearching) == 0x000682, "Member 'ALobbySequenceBase2::IsLobbySearching' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, IsVisibleMatchingNow) == 0x000683, "Member 'ALobbySequenceBase2::IsVisibleMatchingNow' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, IsCallForceBack) == 0x000684, "Member 'ALobbySequenceBase2::IsCallForceBack' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, IsCallLobbyDeleteFromComponent) == 0x000685, "Member 'ALobbySequenceBase2::IsCallLobbyDeleteFromComponent' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, NetLobbyControlComponentClass) == 0x000688, "Member 'ALobbySequenceBase2::NetLobbyControlComponentClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, P2PConnectionClass) == 0x000690, "Member 'ALobbySequenceBase2::P2PConnectionClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, SubLevelName) == 0x000698, "Member 'ALobbySequenceBase2::SubLevelName' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbyTimerType) == 0x0006A0, "Member 'ALobbySequenceBase2::LobbyTimerType' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbyTimerStartTimeCount) == 0x0006A8, "Member 'ALobbySequenceBase2::LobbyTimerStartTimeCount' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, MatchingConpleteQue) == 0x0006F8, "Member 'ALobbySequenceBase2::MatchingConpleteQue' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, MatchingWaitLoopCue) == 0x000700, "Member 'ALobbySequenceBase2::MatchingWaitLoopCue' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, MatchingWaitLoop) == 0x000708, "Member 'ALobbySequenceBase2::MatchingWaitLoop' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, MatchingCancelBtnCue) == 0x000710, "Member 'ALobbySequenceBase2::MatchingCancelBtnCue' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LobbySearchCancelTimeLine) == 0x000718, "Member 'ALobbySequenceBase2::LobbySearchCancelTimeLine' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LongPutCancelTimeLineClass) == 0x000720, "Member 'ALobbySequenceBase2::LongPutCancelTimeLineClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, LongPutCancelTimeLine) == 0x000728, "Member 'ALobbySequenceBase2::LongPutCancelTimeLine' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, TimelineDirection) == 0x000730, "Member 'ALobbySequenceBase2::TimelineDirection' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, HostCancelWindowText) == 0x000738, "Member 'ALobbySequenceBase2::HostCancelWindowText' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, ClientCancelWindowText) == 0x000748, "Member 'ALobbySequenceBase2::ClientCancelWindowText' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, CrossPlayResolveUIManagerClass) == 0x0007C0, "Member 'ALobbySequenceBase2::CrossPlayResolveUIManagerClass' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, m_CrossPlayResolveUIManager) == 0x0007C8, "Member 'ALobbySequenceBase2::m_CrossPlayResolveUIManager' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, PopupWindow) == 0x0007E0, "Member 'ALobbySequenceBase2::PopupWindow' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, PendingRefreshPlayerParam) == 0x0008F8, "Member 'ALobbySequenceBase2::PendingRefreshPlayerParam' has a wrong offset!");
static_assert(offsetof(ALobbySequenceBase2, PendingDestroyRacer) == 0x000908, "Member 'ALobbySequenceBase2::PendingDestroyRacer' has a wrong offset!");

// Class UNION.LobbyLegendCompeSequence2
// 0x0008 (0x0940 - 0x0938)
class ALobbyLegendCompeSequence2 final : public ALobbySequenceBase2
{
public:
	float                                         LobbySearchTime;                                   // 0x0938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LobbySearchCancelLimitTime;                        // 0x093C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyLegendCompeSequence2">();
	}
	static class ALobbyLegendCompeSequence2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyLegendCompeSequence2>();
	}
};
static_assert(alignof(ALobbyLegendCompeSequence2) == 0x000008, "Wrong alignment on ALobbyLegendCompeSequence2");
static_assert(sizeof(ALobbyLegendCompeSequence2) == 0x000940, "Wrong size on ALobbyLegendCompeSequence2");
static_assert(offsetof(ALobbyLegendCompeSequence2, LobbySearchTime) == 0x000938, "Member 'ALobbyLegendCompeSequence2::LobbySearchTime' has a wrong offset!");
static_assert(offsetof(ALobbyLegendCompeSequence2, LobbySearchCancelLimitTime) == 0x00093C, "Member 'ALobbyLegendCompeSequence2::LobbySearchCancelLimitTime' has a wrong offset!");

// Class UNION.SelectGrandPrixAndCourseState
// 0x0120 (0x0248 - 0x0128)
class USelectGrandPrixAndCourseState : public UMenuSequenceSubStateBase
{
public:
	bool                                          bSelectGrandPrixOnly;                              // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStageId                                      SelectedStageIdSingle;                             // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStageId                                      PrevSelectedStageIdSingle;                         // 0x012A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrandPrixId                                  SelectedGrandprixId;                               // 0x012B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRivalChanged;                                     // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     LastSelectDriverId;                                // 0x012D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E[0x2];                                      // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LevelDownPopupTextTitle;                           // 0x0130(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LevelDownPopupTextMessage;                         // 0x0140(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LevelDownPopupTextYes;                             // 0x0150(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LevelDownPopupTextNo;                              // 0x0160(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UCourseSelectWidgetBase*                CourseSelectWidget;                                // 0x0170(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecideGrandPrixAndCourse;                        // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCancelAndPrevSequence;                           // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackToClassSelect;                               // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnGoToGadgetCustom;                                // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecideRivalSelectButton;                         // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecisionLevelDownPopupWindow;                    // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFinishedLevelDownPopupWindow;                    // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<EStageId>                              _SelectedGrandPrixMainStageIds;                    // 0x01E8(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _StoreDialogTitleTextForGrandPrix;                 // 0x01F8(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                   _StoreDialogTitleTextForStage;                     // 0x0208(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class ADLCStoreDialogActor*                   _StoreActor;                                       // 0x0218(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIPopupWindowBase*                _PopupWindowWidget;                                // 0x0220(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TDelegate<void()>                             OnPopupClosedDelegate;                             // 0x0228(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGrandPrixCourseLotteryWheel*           _GrandPrixCourseLotteryWheel;                      // 0x0238(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIPopupWindowBase*                PopupWindow;                                       // 0x0240(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CreatePopupWindow(EPopupWindowType PopupWindowType, const class FText& TitleText, const class FText& MessageText, const TDelegate<void()>& OnClosed);
	void DestroyPopupWindow();
	void GetGrandPrixStatus(TArray<struct FGrandPrixStatus>* OutGrandPrixStatus);
	TArray<EStageId> LotAndMakeGrandPrixMainStageIds(EGrandPrixId GrandPrixId);
	void OnPopupClosed(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnRivalLevelDownPopupClose(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnStoreDialogCompleted(bool IsAccept);
	void OnStoreDialogCompletedBP();
	void SetNextMachineSelectState(EMachineSelectState InState);
	void SetupRivalLevelDownPopup(bool* bSpawnPopup);
	bool StartStore(bool GrandPrixSelecting);
	void TransitionToTimeTrial();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SelectGrandPrixAndCourseState">();
	}
	static class USelectGrandPrixAndCourseState* GetDefaultObj()
	{
		return GetDefaultObjImpl<USelectGrandPrixAndCourseState>();
	}
};
static_assert(alignof(USelectGrandPrixAndCourseState) == 0x000008, "Wrong alignment on USelectGrandPrixAndCourseState");
static_assert(sizeof(USelectGrandPrixAndCourseState) == 0x000248, "Wrong size on USelectGrandPrixAndCourseState");
static_assert(offsetof(USelectGrandPrixAndCourseState, bSelectGrandPrixOnly) == 0x000128, "Member 'USelectGrandPrixAndCourseState::bSelectGrandPrixOnly' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, SelectedStageIdSingle) == 0x000129, "Member 'USelectGrandPrixAndCourseState::SelectedStageIdSingle' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, PrevSelectedStageIdSingle) == 0x00012A, "Member 'USelectGrandPrixAndCourseState::PrevSelectedStageIdSingle' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, SelectedGrandprixId) == 0x00012B, "Member 'USelectGrandPrixAndCourseState::SelectedGrandprixId' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, bRivalChanged) == 0x00012C, "Member 'USelectGrandPrixAndCourseState::bRivalChanged' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, LastSelectDriverId) == 0x00012D, "Member 'USelectGrandPrixAndCourseState::LastSelectDriverId' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, LevelDownPopupTextTitle) == 0x000130, "Member 'USelectGrandPrixAndCourseState::LevelDownPopupTextTitle' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, LevelDownPopupTextMessage) == 0x000140, "Member 'USelectGrandPrixAndCourseState::LevelDownPopupTextMessage' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, LevelDownPopupTextYes) == 0x000150, "Member 'USelectGrandPrixAndCourseState::LevelDownPopupTextYes' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, LevelDownPopupTextNo) == 0x000160, "Member 'USelectGrandPrixAndCourseState::LevelDownPopupTextNo' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, CourseSelectWidget) == 0x000170, "Member 'USelectGrandPrixAndCourseState::CourseSelectWidget' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, OnDecideGrandPrixAndCourse) == 0x000178, "Member 'USelectGrandPrixAndCourseState::OnDecideGrandPrixAndCourse' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, OnCancelAndPrevSequence) == 0x000188, "Member 'USelectGrandPrixAndCourseState::OnCancelAndPrevSequence' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, OnBackToClassSelect) == 0x000198, "Member 'USelectGrandPrixAndCourseState::OnBackToClassSelect' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, OnGoToGadgetCustom) == 0x0001A8, "Member 'USelectGrandPrixAndCourseState::OnGoToGadgetCustom' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, OnDecideRivalSelectButton) == 0x0001B8, "Member 'USelectGrandPrixAndCourseState::OnDecideRivalSelectButton' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, OnDecisionLevelDownPopupWindow) == 0x0001C8, "Member 'USelectGrandPrixAndCourseState::OnDecisionLevelDownPopupWindow' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, OnFinishedLevelDownPopupWindow) == 0x0001D8, "Member 'USelectGrandPrixAndCourseState::OnFinishedLevelDownPopupWindow' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, _SelectedGrandPrixMainStageIds) == 0x0001E8, "Member 'USelectGrandPrixAndCourseState::_SelectedGrandPrixMainStageIds' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, _StoreDialogTitleTextForGrandPrix) == 0x0001F8, "Member 'USelectGrandPrixAndCourseState::_StoreDialogTitleTextForGrandPrix' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, _StoreDialogTitleTextForStage) == 0x000208, "Member 'USelectGrandPrixAndCourseState::_StoreDialogTitleTextForStage' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, _StoreActor) == 0x000218, "Member 'USelectGrandPrixAndCourseState::_StoreActor' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, _PopupWindowWidget) == 0x000220, "Member 'USelectGrandPrixAndCourseState::_PopupWindowWidget' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, OnPopupClosedDelegate) == 0x000228, "Member 'USelectGrandPrixAndCourseState::OnPopupClosedDelegate' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, _GrandPrixCourseLotteryWheel) == 0x000238, "Member 'USelectGrandPrixAndCourseState::_GrandPrixCourseLotteryWheel' has a wrong offset!");
static_assert(offsetof(USelectGrandPrixAndCourseState, PopupWindow) == 0x000240, "Member 'USelectGrandPrixAndCourseState::PopupWindow' has a wrong offset!");

// Class UNION.GadgetPlateRankUpWindow
// 0x0018 (0x0340 - 0x0328)
class UGadgetPlateRankUpWindow : public UUnionUIInputWidget
{
public:
	float                                         GaugeBase;                                         // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeAddFixed;                                     // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeAddVariable;                                  // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeNext;                                         // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeTime;                                         // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeAddTime;                                      // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CalculateGauge(float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetPlateRankUpWindow">();
	}
	static class UGadgetPlateRankUpWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetPlateRankUpWindow>();
	}
};
static_assert(alignof(UGadgetPlateRankUpWindow) == 0x000008, "Wrong alignment on UGadgetPlateRankUpWindow");
static_assert(sizeof(UGadgetPlateRankUpWindow) == 0x000340, "Wrong size on UGadgetPlateRankUpWindow");
static_assert(offsetof(UGadgetPlateRankUpWindow, GaugeBase) == 0x000328, "Member 'UGadgetPlateRankUpWindow::GaugeBase' has a wrong offset!");
static_assert(offsetof(UGadgetPlateRankUpWindow, GaugeAddFixed) == 0x00032C, "Member 'UGadgetPlateRankUpWindow::GaugeAddFixed' has a wrong offset!");
static_assert(offsetof(UGadgetPlateRankUpWindow, GaugeAddVariable) == 0x000330, "Member 'UGadgetPlateRankUpWindow::GaugeAddVariable' has a wrong offset!");
static_assert(offsetof(UGadgetPlateRankUpWindow, GaugeNext) == 0x000334, "Member 'UGadgetPlateRankUpWindow::GaugeNext' has a wrong offset!");
static_assert(offsetof(UGadgetPlateRankUpWindow, GaugeTime) == 0x000338, "Member 'UGadgetPlateRankUpWindow::GaugeTime' has a wrong offset!");
static_assert(offsetof(UGadgetPlateRankUpWindow, GaugeAddTime) == 0x00033C, "Member 'UGadgetPlateRankUpWindow::GaugeAddTime' has a wrong offset!");

// Class UNION.GadgetPlateWindow
// 0x00D8 (0x04B0 - 0x03D8)
class UGadgetPlateWindow : public UUnionUISceneBase
{
public:
	int32                                         PlayerIndex;                                       // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRichTextBlock*                    ClassNameTextRef;                                  // 0x03E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 PlateImageRef;                                     // 0x03E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 GadgetSlotStates;                                  // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UUnionUIGridLayoutControl*              GridLayoutControl;                                 // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UEquipmentGadgetIcon*>           GadgetIconRefArray;                                // 0x0408(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UEquipmentGadgetIcon*                   DummyGadgetIconRef;                                // 0x0418(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_420[0x8];                                      // 0x0420(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  NewOpenSlotFlags;                                  // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UUnionUIButtonBase*                     PreviewEquippedGadget;                             // 0x0438(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGadgetCustomTab*                       PresetCustomTabRef;                                // 0x0440(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFestaSpecialRule;                                 // 0x0448(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 PlayerIndex, int32 SlotState, int32 SlotIndex)> OnItemFocused; // 0x0450(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, int32 SlotState, int32 SlotIndex)> OnItemSelected; // 0x0460(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex)> OnCancel;                                      // 0x0470(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex)> OnLeftShoulder;                                // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex)> OnRightShoulder;                               // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A0[0x10];                                     // 0x04A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindDelegateEvents();
	class UGadgetCustomTab* GetGadgetCustomTabRef();
	class UEquipmentGadgetIcon* GetGadgetIcon(const int32 SlotIndex);
	void GetGadgetIds(TArray<EGadgetId>* OutGadgetIds);
	class UEquipmentGadgetIcon* GetLastFocusGadgetIcon();
	void InVisiblePreviewEquippedGadget();
	void NativeConstruct();
	void NativeOnInitialized();
	void OnConstDummyGadgetIconRef();
	void OnConstDummyGadgetIconSetup();
	void OnConstDummyWidget();
	void OnConstGadgetIconRef();
	void OnConstGadgetIconSetup();
	void OnConstGridLayoutControl();
	void OnConstPlateImageRef();
	void OnConstPresetCustomTabRef();
	void OnConstPreviewEquippedGadgetRef();
	void OnConstTextClassNameRef();
	void SetClassNameText(const class FText& InClassName);
	void SetDisableGadgetList(const TArray<EGadgetId>& InDisableGadgetList);
	void SetEnableGadgetIconButton(bool IsEnable);
	void SetFestaSpecialRule(const bool bInFestaSpecialRule);
	void SetFocusBySlotIndex(class APlayerController* InPlayerController, int32 InSlotIndex);
	void SetLastFocusGadgetIcon(class UEquipmentGadgetIcon* InGadgetIconPtr);
	void SetPlayerIndex(const int32 InPlayerIndex);
	void SetPreviewEquippedGadgetVisible(const bool InEnabled);
	void SetShouldPlayCancelSound(bool bInShouldPlay);
	void SetShouldPlayDecisionSound(bool bInShouldPlay);
	void SetSlotInValidIconVisible(const int32 InSlotIndex, const bool bInIsVisible);
	void SetSlotInValidIconVisibleAll(const bool bInIsVisible);
	void SetSlotSelectEffectVisible(const int32 InSlotIndex, const bool bInIsVisible);
	void SetSlotSelectEffectVisibleAll(const bool bInIsVisible);
	void SetupAsEmpty(const EGadgetPlateId InPlateId, const bool bRentalPlate, const bool bInRankUp, const bool bInLvUp);
	void SetupByUIData(const struct FGadgetPlateUIData& InPlateUIData);
	void SetupGadgetIcons(const bool InRankUp, const int32 InSlotNum);
	void SetupGadgetIconsToPlayerDetail(const bool InRankUp, const int32 InSlotNum);
	void SetupToPlayerDetail(const struct FGadgetPlateUIData& InPlateUIData);
	void SwitchPlateBaseImage(const int32 InPlateIndex);
	void SwitchPlateSlotData(const EGadgetPlateId InPlateId);
	void SwitchTab(int32 InTabIndex);
	void UpdateDeviceViewByCurrentPlayerIndex();
	void UpdatePreviewEquippedGadget(const int32 InPlayerIndex, const int32 InSlotNum, const EGadgetId InGadgetId);
	void VisiblePreviewEquippedGadget(const int32 InPlayerIndex, const int32 InSlotNum, const EGadgetId InGadgetId);

	int32 GetGadgetSlotState(const int32 InSlotIndex) const;
	int32 GetPlayerIndex() const;
	bool IsDisableGadget(const EGadgetId InCheckGadgetId, bool* bIsEmptyDisableList) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetPlateWindow">();
	}
	static class UGadgetPlateWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetPlateWindow>();
	}
};
static_assert(alignof(UGadgetPlateWindow) == 0x000008, "Wrong alignment on UGadgetPlateWindow");
static_assert(sizeof(UGadgetPlateWindow) == 0x0004B0, "Wrong size on UGadgetPlateWindow");
static_assert(offsetof(UGadgetPlateWindow, PlayerIndex) == 0x0003D8, "Member 'UGadgetPlateWindow::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, ClassNameTextRef) == 0x0003E0, "Member 'UGadgetPlateWindow::ClassNameTextRef' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, PlateImageRef) == 0x0003E8, "Member 'UGadgetPlateWindow::PlateImageRef' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, GadgetSlotStates) == 0x0003F0, "Member 'UGadgetPlateWindow::GadgetSlotStates' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, GridLayoutControl) == 0x000400, "Member 'UGadgetPlateWindow::GridLayoutControl' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, GadgetIconRefArray) == 0x000408, "Member 'UGadgetPlateWindow::GadgetIconRefArray' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, DummyGadgetIconRef) == 0x000418, "Member 'UGadgetPlateWindow::DummyGadgetIconRef' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, NewOpenSlotFlags) == 0x000428, "Member 'UGadgetPlateWindow::NewOpenSlotFlags' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, PreviewEquippedGadget) == 0x000438, "Member 'UGadgetPlateWindow::PreviewEquippedGadget' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, PresetCustomTabRef) == 0x000440, "Member 'UGadgetPlateWindow::PresetCustomTabRef' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, bFestaSpecialRule) == 0x000448, "Member 'UGadgetPlateWindow::bFestaSpecialRule' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, OnItemFocused) == 0x000450, "Member 'UGadgetPlateWindow::OnItemFocused' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, OnItemSelected) == 0x000460, "Member 'UGadgetPlateWindow::OnItemSelected' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, OnCancel) == 0x000470, "Member 'UGadgetPlateWindow::OnCancel' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, OnLeftShoulder) == 0x000480, "Member 'UGadgetPlateWindow::OnLeftShoulder' has a wrong offset!");
static_assert(offsetof(UGadgetPlateWindow, OnRightShoulder) == 0x000490, "Member 'UGadgetPlateWindow::OnRightShoulder' has a wrong offset!");

// Class UNION.RaceSequenceStateDriverGetting
// 0x0048 (0x0158 - 0x0110)
class URaceSequenceStateDriverGetting : public URaceSequenceStateBase
{
public:
	TSoftClassPtr<class UClass>                   _RewardGetWindowClass;                             // 0x0110(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _TitleText;                                        // 0x0138(0x0010)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class URewardGetWindow*                       _RewardGetWindow;                                  // 0x0148(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFadeEnd(EUnionUIFadeDirection Direction);
	void OnRewardGetWindowClosed();
	void OnRewardGetWindowOpened();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateDriverGetting">();
	}
	static class URaceSequenceStateDriverGetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateDriverGetting>();
	}
};
static_assert(alignof(URaceSequenceStateDriverGetting) == 0x000008, "Wrong alignment on URaceSequenceStateDriverGetting");
static_assert(sizeof(URaceSequenceStateDriverGetting) == 0x000158, "Wrong size on URaceSequenceStateDriverGetting");
static_assert(offsetof(URaceSequenceStateDriverGetting, _RewardGetWindowClass) == 0x000110, "Member 'URaceSequenceStateDriverGetting::_RewardGetWindowClass' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateDriverGetting, _TitleText) == 0x000138, "Member 'URaceSequenceStateDriverGetting::_TitleText' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateDriverGetting, _RewardGetWindow) == 0x000148, "Member 'URaceSequenceStateDriverGetting::_RewardGetWindow' has a wrong offset!");

// Class UNION.GadgetRentalInfoWindow
// 0x0010 (0x03E8 - 0x03D8)
class UGadgetRentalInfoWindow final : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void()>              OnGadetRentalInfoAnimFinished;                     // 0x03D8(0x0010)(Edit, ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnPlayGadetRentalInfoAnim();
	void SetupByUIData(const struct FGadgetPlateUIData& InGadgetPlateUIDataData, const class FText& RentalGadgetName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetRentalInfoWindow">();
	}
	static class UGadgetRentalInfoWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetRentalInfoWindow>();
	}
};
static_assert(alignof(UGadgetRentalInfoWindow) == 0x000008, "Wrong alignment on UGadgetRentalInfoWindow");
static_assert(sizeof(UGadgetRentalInfoWindow) == 0x0003E8, "Wrong size on UGadgetRentalInfoWindow");
static_assert(offsetof(UGadgetRentalInfoWindow, OnGadetRentalInfoAnimFinished) == 0x0003D8, "Member 'UGadgetRentalInfoWindow::OnGadetRentalInfoAnimFinished' has a wrong offset!");

// Class UNION.GadgetSelectWindow
// 0x0040 (0x0418 - 0x03D8)
class UGadgetSelectWindow final : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(int32 PlayerIndex, EGadgetId gadgetId, EGadgetState GadgetState)> OnItemFocused; // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex, EGadgetId gadgetId, EGadgetState GadgetState)> OnItemSelected; // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerIndex)> OnCancel;                                      // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPurchaseAnimFinished;                            // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void PlayPurchaseAnim(EGadgetId InGadgetId);
	void PurchaseGadget(EGadgetId InGadgetId);
	void SetAttachableGadgetIds(int32 InPlayerIndex, const TArray<EGadgetId>& InAttachableGadgetIds);
	void SetAttachedGadgetIds(int32 InPlayerIndex, const TArray<EGadgetId>& InAttachedGadgetIds);
	void SetFocusByGadgetId(class APlayerController* InPlayerController, EGadgetId InGadgetId);
	void Setup(const struct FGadgetSelectWindowData& InWindowData);
	void SetupPerPlayerCount(int32 InPlayerCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GadgetSelectWindow">();
	}
	static class UGadgetSelectWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGadgetSelectWindow>();
	}
};
static_assert(alignof(UGadgetSelectWindow) == 0x000008, "Wrong alignment on UGadgetSelectWindow");
static_assert(sizeof(UGadgetSelectWindow) == 0x000418, "Wrong size on UGadgetSelectWindow");
static_assert(offsetof(UGadgetSelectWindow, OnItemFocused) == 0x0003D8, "Member 'UGadgetSelectWindow::OnItemFocused' has a wrong offset!");
static_assert(offsetof(UGadgetSelectWindow, OnItemSelected) == 0x0003E8, "Member 'UGadgetSelectWindow::OnItemSelected' has a wrong offset!");
static_assert(offsetof(UGadgetSelectWindow, OnCancel) == 0x0003F8, "Member 'UGadgetSelectWindow::OnCancel' has a wrong offset!");
static_assert(offsetof(UGadgetSelectWindow, OnPurchaseAnimFinished) == 0x000408, "Member 'UGadgetSelectWindow::OnPurchaseAnimFinished' has a wrong offset!");

// Class UNION.LoginProcessor
// 0x0118 (0x03A8 - 0x0290)
class ALoginProcessor : public AActor
{
public:
	uint8                                         Pad_290[0x48];                                     // 0x0290(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool IsSuccess, bool IsEnableOnlinePlay, bool IsRequestedSequenceBlock)> OnLoginResult; // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TDelegate<void(bool Result)>                  CrmKickStartDelegate;                              // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F8[0x18];                                     // 0x02F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionErrorViewer*                      WarningViewer;                                     // 0x0310(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIPopupWindowBase*                ServerSavedataDeleteWindow;                        // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   WindowBodyMaint;                                   // 0x0320(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   WindowBodyMaintSchedule;                           // 0x0330(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   ServerSaveDataDeleteHeaderText;                    // 0x0340(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   ServerSaveDataDeleteBodyText;                      // 0x0350(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	ELoginPointState                              LoginPointState;                                   // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_361[0x47];                                     // 0x0361(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateUI_Event();
	void DestroyUI_Event();
	void OnAppDataComplete(ESaveDataStatus Status);
	void OnBlockListComplete(bool bWasSuccessful);
	void OnCheckFairPointComplete(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnCrmKickStart(bool Status);
	void OnDecisionServerSaveDataDelete(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnEnsureNsaIdTokenComplete(bool bWasSuccessful, const class FString& ErrorMessage);
	void OnEosLoginComplete(int32 LocalUserNum, bool bWasSuccessful, const class FString& ErrorMessage);
	void OnEosLogoutComplete(int32 LocalUserNum, bool bWasSuccessful);
	void OnGetDataComplete(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnGetFriendListComplete(bool bWasSuccessful, const struct FFriendGetFriendListResponse& list);
	void OnMasterDataComplete(bool bWasSuccessful, int32 ErrorCode);
	void OnNetDataComplete(ESaveDataStatus Status);
	void OnNotifyFriendInviteComplete(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnQueryServerTimeComplete(const struct FDateTime& UtcTimestamp, bool Error);
	void OnRomVersionComplete(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnSaveUserNetworkSettingsComplete(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnSendNsaIdTokenComplete(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnServerSavedataDeleted();
	void OnStartLoginProcess();
	void OnTerraLoginComplete(bool bError, bool bSavedataDeleted);
	void SetupWarningText(const struct FDateTime& FromDateTime, const struct FDateTime& ToDateTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoginProcessor">();
	}
	static class ALoginProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALoginProcessor>();
	}
};
static_assert(alignof(ALoginProcessor) == 0x000008, "Wrong alignment on ALoginProcessor");
static_assert(sizeof(ALoginProcessor) == 0x0003A8, "Wrong size on ALoginProcessor");
static_assert(offsetof(ALoginProcessor, OnLoginResult) == 0x0002D8, "Member 'ALoginProcessor::OnLoginResult' has a wrong offset!");
static_assert(offsetof(ALoginProcessor, CrmKickStartDelegate) == 0x0002E8, "Member 'ALoginProcessor::CrmKickStartDelegate' has a wrong offset!");
static_assert(offsetof(ALoginProcessor, WarningViewer) == 0x000310, "Member 'ALoginProcessor::WarningViewer' has a wrong offset!");
static_assert(offsetof(ALoginProcessor, ServerSavedataDeleteWindow) == 0x000318, "Member 'ALoginProcessor::ServerSavedataDeleteWindow' has a wrong offset!");
static_assert(offsetof(ALoginProcessor, WindowBodyMaint) == 0x000320, "Member 'ALoginProcessor::WindowBodyMaint' has a wrong offset!");
static_assert(offsetof(ALoginProcessor, WindowBodyMaintSchedule) == 0x000330, "Member 'ALoginProcessor::WindowBodyMaintSchedule' has a wrong offset!");
static_assert(offsetof(ALoginProcessor, ServerSaveDataDeleteHeaderText) == 0x000340, "Member 'ALoginProcessor::ServerSaveDataDeleteHeaderText' has a wrong offset!");
static_assert(offsetof(ALoginProcessor, ServerSaveDataDeleteBodyText) == 0x000350, "Member 'ALoginProcessor::ServerSaveDataDeleteBodyText' has a wrong offset!");
static_assert(offsetof(ALoginProcessor, LoginPointState) == 0x000360, "Member 'ALoginProcessor::LoginPointState' has a wrong offset!");

// Class UNION.GameSettingsScene
// 0x0038 (0x0410 - 0x03D8)
class UGameSettingsScene final : public UUnionUISceneBase
{
public:
	TArray<class UCommonMenuButtonBase*>          TagButtonArr;                                      // 0x03D8(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UUnionUIButtonsPanel*                   TagButtonPanel;                                    // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Window_In;                                         // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Window_Loop;                                       // 0x03F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Window_Out;                                        // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameSettingsSequenceState                    MainState;                                         // 0x0408(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeGameSettings();
	void PlayAnimationIn();
	void PlayAnimationLoop();
	void PlayAnimationOut();
	void SetupGameSettings();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingsScene">();
	}
	static class UGameSettingsScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSettingsScene>();
	}
};
static_assert(alignof(UGameSettingsScene) == 0x000008, "Wrong alignment on UGameSettingsScene");
static_assert(sizeof(UGameSettingsScene) == 0x000410, "Wrong size on UGameSettingsScene");
static_assert(offsetof(UGameSettingsScene, TagButtonArr) == 0x0003D8, "Member 'UGameSettingsScene::TagButtonArr' has a wrong offset!");
static_assert(offsetof(UGameSettingsScene, TagButtonPanel) == 0x0003E8, "Member 'UGameSettingsScene::TagButtonPanel' has a wrong offset!");
static_assert(offsetof(UGameSettingsScene, Window_In) == 0x0003F0, "Member 'UGameSettingsScene::Window_In' has a wrong offset!");
static_assert(offsetof(UGameSettingsScene, Window_Loop) == 0x0003F8, "Member 'UGameSettingsScene::Window_Loop' has a wrong offset!");
static_assert(offsetof(UGameSettingsScene, Window_Out) == 0x000400, "Member 'UGameSettingsScene::Window_Out' has a wrong offset!");
static_assert(offsetof(UGameSettingsScene, MainState) == 0x000408, "Member 'UGameSettingsScene::MainState' has a wrong offset!");

// Class UNION.GameSettingsSequence
// 0x0050 (0x03B8 - 0x0368)
class AGameSettingsSequence final : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   UISceneClass;                                      // 0x0370(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameSettingsScene*                     UIScene;                                           // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EGameSettingsSequenceState                    PrevSequenceState;                                 // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EGameSettingsSequenceState GetCurrentGameSettingsState();
	void OnInitStateExit();
	void OnInitStateGameGeneralSettings();
	void OnInitStateGameSettingsTop();
	void OnInitStateGraphicsSettings();
	void OnInitStateInputAssignSettings();
	void SetNextGameSettingsSequenceState(EGameSettingsSequenceState InState, EGameSettingsSequenceState PrevState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSettingsSequence">();
	}
	static class AGameSettingsSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameSettingsSequence>();
	}
};
static_assert(alignof(AGameSettingsSequence) == 0x000008, "Wrong alignment on AGameSettingsSequence");
static_assert(sizeof(AGameSettingsSequence) == 0x0003B8, "Wrong size on AGameSettingsSequence");
static_assert(offsetof(AGameSettingsSequence, UISceneClass) == 0x000370, "Member 'AGameSettingsSequence::UISceneClass' has a wrong offset!");
static_assert(offsetof(AGameSettingsSequence, UIScene) == 0x000398, "Member 'AGameSettingsSequence::UIScene' has a wrong offset!");
static_assert(offsetof(AGameSettingsSequence, OnBackEvent) == 0x0003A0, "Member 'AGameSettingsSequence::OnBackEvent' has a wrong offset!");
static_assert(offsetof(AGameSettingsSequence, PrevSequenceState) == 0x0003B0, "Member 'AGameSettingsSequence::PrevSequenceState' has a wrong offset!");

// Class UNION.LobbySquadSequence2
// 0x02E0 (0x0C18 - 0x0938)
class ALobbySquadSequence2 final : public ALobbySequenceBase2
{
public:
	uint8                                         Pad_938[0x8];                                      // 0x0938(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UOnlineScene*                           GameModeUIScene;                                   // 0x0940(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOnlineReadySceneBase*                  ReadyUIScene;                                      // 0x0948(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHintPopupWindow*                       TipsUIScene;                                       // 0x0950(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuSequenceSubStateBase*              OptionStateComponent;                              // 0x0958(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         SquadPosition;                                     // 0x0960(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class AActor*                                 MainCamera;                                        // 0x0970(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbySequenceState                           ReturnToState;                                     // 0x0978(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMatchingLobbyType                            SelectedLobbyType;                                 // 0x0979(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_97A[0x6];                                      // 0x097A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMenuRacerParameterDataAsset*           FestaMenuRacerParameterDataAsset;                  // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         SquadEmit;                                         // 0x0988(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         SquadSelectEmit;                                   // 0x0990(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UNiagaraComponent*>              SquadSelectComponent;                              // 0x0998(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bCanCancelInput;                                   // 0x09A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9A9[0x7];                                      // 0x09A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   WaitingRavelText;                                  // 0x09B0(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           PopUpTitleList;                                    // 0x09C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           PopUpMessageList;                                  // 0x09D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           PopUpButtonList;                                   // 0x09E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FText                                   ClientRavelDecidedText;                            // 0x09F0(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   ChangeCrossPlaySettingPopUpText;                   // 0x0A00(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UFriendMatchMenu*                       FriendMatchMenuComponent;                          // 0x0A10(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> LobbyReadyDecideSyncDelegate; // 0x0A18(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> LobbyReadyCancelSyncDelegate; // 0x0A28(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> LobbyChangeStateSyncDelegate; // 0x0A38(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A48[0x20];                                     // 0x0A48(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          CancelQue;                                         // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          LobbyMatchingCompleteQue;                          // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          NGQue;                                             // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   SelectGameModeUISoftClassPtr;                      // 0x0A80(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   ReadyUISoftClassPtr;                               // 0x0AA8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   TipsUISoftClassPtr;                                // 0x0AD0(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   OptionStatePath;                                   // 0x0AF8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   FriendMatchMenuPath;                               // 0x0B20(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   SquadPositionObjectClassPtr;                       // 0x0B48(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UNiagaraSystem>          SquadPositionEmitPtr;                              // 0x0B70(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UNiagaraSystem>          SquadPositionSelectEmitPtr;                        // 0x0B98(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BC0[0x58];                                     // 0x0BC0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckCanCancelMatchmaking(class FString* InReason);
	void CheckMemberCancelEvent();
	void CheckMembersWaitingCancelEvent();
	void DestroySquadPosition();
	void DisconnectGuest(int32 InPlayerIndex);
	void DoneReadyCheckEvent();
	void FriendMatchMenuCancelEvent();
	void FriendMatchMenuEnterLobbyDecisionEvent();
	void FriendMatchMenuFinishOutAnimEvent();
	void FriendRuleFixedEvent(EPrivateMatchPlayType InPlayType);
	void InitiSquadLobbySetupAfterFadeOut();
	bool IsAloneSquadLobby();
	void KickToAllClientMember(class ULobbyContextBase* InContext);
	void LoadFinishAfterCharaMatchingLevelEvent();
	void OnAllCheckedMember_DelegateEvent(bool bSuccessful, const struct FLobbyOperationResult& InResult);
	void OnCancelCheckedMemberWaiting(int32 InPlayerIndex);
	void OnCancelCheckedMemberWaiting_DelegateEvent(bool bSuccessful, const struct FLobbyOperationResult& InResult);
	void OnCancelWaitingComeBackLobby(class UObject* Object);
	void OnChangeLobbyMemberState_DelegateEvent(bool bSuccessful, const struct FLobbyOperationResult& InResult);
	void OnClickGameMode(class UObject* Object);
	void OnCompleteJoinSquad(bool bSuccessful, const struct FLobbyOperationResult& InResult);
	void OnCompleteSyncMovePublicLobbyState(bool bSuccessful, const struct FLobbyOperationResult& InResult);
	void OnCreateSquadLobbyEvent(class ULobbyContextBase* LobbyContext, const struct FOnlineErrorBP& Error);
	void OnDecideCheckedMember_DelegateEvent(bool bSuccessful, const struct FLobbyOperationResult& InResult);
	void OnDecideEventPopUpEvent(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecideLobbyPopUpEvent(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecideRemovedClientPopUpEvent(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnExitStateCheckJoinLobby();
	void OnExitStateCheckMembersWaitTallying();
	void OnExitStateLobbyRuleSetting();
	void OnExitStateOptionSquad(EMenuSequenceSubState State);
	void OnExitStateSelectGameMode();
	void OnExitStateShowTipsWindow();
	void OnExitStateSquadPopupWindow();
	void OnExitStateTransitionToFriendLobbyAlone();
	void OnExitStateWaitingComeBackLobby();
	void OnFinishedFade_GotoLobby(EUnionUIFadeDirection FadeDirection);
	void OnFinishedFade_SelectGameMode(EUnionUIFadeDirection FadeDirection);
	void OnGotoLobbyBeforeEvent();
	void OnInitStateCheckJoinLobby();
	void OnInitStateCheckMembersWaitTallying();
	void OnInitStateLobbyRuleSetting();
	void OnInitStateSquadPopupWindow();
	void OnInitStateTransitionToFriendLobbyAlone();
	void OnInitStateWaitingComeBackLobby();
	void OnInviteConfilmWindowInEvent();
	void OnInviteConfilmWindowOutEvent(bool bIsOut);
	void OnlineGameModeCancelEvent();
	void OnLobbyInvitationRejectComplete(bool bWasSuccessful, const struct FLobbyOperationResult& Result);
	void OnLobbyOperationCompleteSimple(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnPlatformCrossPlayResolveComplete();
	void OnReadyButtonDecideEvent();
	void OnReceiveMemberMemberEvent(int32 InPlayerIndex);
	void OnReceiveMemberUpdateAtCheckMembersEvent(class USquadContext* LobbyContext, class USquadMemberContext* MemberContext);
	void OnSearchLobbyIdComplete(bool bSuccessful, bool bIsLobbyExist, const struct FCommon_UserSearchData& Result);
	void OnSyncDecideSquadGameModeEvent(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnSyncInviteFriendMatchGameModeEvent(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnTipsWindow_CloseEndEvent();
	void OnUpdateStateCheckJoinLobby(float InDeltaTime);
	void OnUpdateStateCheckMembersWaitTallying(float InDeltaTime);
	void OnUpdateStateLobbyRuleSetting(float InDeltaTime);
	void OnUpdateStateSelectGameMode(float InDeltaTime);
	void OnUpdateStateShowTipsWindow(float InDeltaTime);
	void OnUpdateStateSquadPopupWindow(float InDeltaTime);
	void OnUpdateStateTransitionToFriendLobbyAlone(float InDeltaTime);
	void OnUpdateStateWaitingComeBackLobby(float InDeltaTime);
	void RefreshTransformRacersParam();
	void RemoveOnlineWidgets(class UCommonMenuHeaderMenu* InHeader);
	void SetChangedReadyHeaderAndFooter(bool bInIsCheckedReady);
	void SpawnSquadPosition(const TArray<struct FTransform>& InTransforms);
	void SyncOnlineGameMode(EOnlineGameMode OnlineGameMode, TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);
	void SyncOwnReadyCheck(ESquadMemberContextReadyCheckType ReadyCheckType, TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);
	void UnBindGameModeUIScene();
	void WaitGotoLobbyBeforeFadein();

	EMatchingLobbyType GetSelectedOnlineGameModeLobbyType() const;
	class USquadLobbyControlComponent* GetSquadLobbyControlComponent() const;
	bool IsJoiningLobby() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySquadSequence2">();
	}
	static class ALobbySquadSequence2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbySquadSequence2>();
	}
};
static_assert(alignof(ALobbySquadSequence2) == 0x000008, "Wrong alignment on ALobbySquadSequence2");
static_assert(sizeof(ALobbySquadSequence2) == 0x000C18, "Wrong size on ALobbySquadSequence2");
static_assert(offsetof(ALobbySquadSequence2, GameModeUIScene) == 0x000940, "Member 'ALobbySquadSequence2::GameModeUIScene' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, ReadyUIScene) == 0x000948, "Member 'ALobbySquadSequence2::ReadyUIScene' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, TipsUIScene) == 0x000950, "Member 'ALobbySquadSequence2::TipsUIScene' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, OptionStateComponent) == 0x000958, "Member 'ALobbySquadSequence2::OptionStateComponent' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, SquadPosition) == 0x000960, "Member 'ALobbySquadSequence2::SquadPosition' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, MainCamera) == 0x000970, "Member 'ALobbySquadSequence2::MainCamera' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, ReturnToState) == 0x000978, "Member 'ALobbySquadSequence2::ReturnToState' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, SelectedLobbyType) == 0x000979, "Member 'ALobbySquadSequence2::SelectedLobbyType' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, FestaMenuRacerParameterDataAsset) == 0x000980, "Member 'ALobbySquadSequence2::FestaMenuRacerParameterDataAsset' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, SquadEmit) == 0x000988, "Member 'ALobbySquadSequence2::SquadEmit' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, SquadSelectEmit) == 0x000990, "Member 'ALobbySquadSequence2::SquadSelectEmit' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, SquadSelectComponent) == 0x000998, "Member 'ALobbySquadSequence2::SquadSelectComponent' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, bCanCancelInput) == 0x0009A8, "Member 'ALobbySquadSequence2::bCanCancelInput' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, WaitingRavelText) == 0x0009B0, "Member 'ALobbySquadSequence2::WaitingRavelText' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, PopUpTitleList) == 0x0009C0, "Member 'ALobbySquadSequence2::PopUpTitleList' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, PopUpMessageList) == 0x0009D0, "Member 'ALobbySquadSequence2::PopUpMessageList' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, PopUpButtonList) == 0x0009E0, "Member 'ALobbySquadSequence2::PopUpButtonList' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, ClientRavelDecidedText) == 0x0009F0, "Member 'ALobbySquadSequence2::ClientRavelDecidedText' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, ChangeCrossPlaySettingPopUpText) == 0x000A00, "Member 'ALobbySquadSequence2::ChangeCrossPlaySettingPopUpText' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, FriendMatchMenuComponent) == 0x000A10, "Member 'ALobbySquadSequence2::FriendMatchMenuComponent' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, LobbyReadyDecideSyncDelegate) == 0x000A18, "Member 'ALobbySquadSequence2::LobbyReadyDecideSyncDelegate' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, LobbyReadyCancelSyncDelegate) == 0x000A28, "Member 'ALobbySquadSequence2::LobbyReadyCancelSyncDelegate' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, LobbyChangeStateSyncDelegate) == 0x000A38, "Member 'ALobbySquadSequence2::LobbyChangeStateSyncDelegate' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, CancelQue) == 0x000A68, "Member 'ALobbySquadSequence2::CancelQue' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, LobbyMatchingCompleteQue) == 0x000A70, "Member 'ALobbySquadSequence2::LobbyMatchingCompleteQue' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, NGQue) == 0x000A78, "Member 'ALobbySquadSequence2::NGQue' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, SelectGameModeUISoftClassPtr) == 0x000A80, "Member 'ALobbySquadSequence2::SelectGameModeUISoftClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, ReadyUISoftClassPtr) == 0x000AA8, "Member 'ALobbySquadSequence2::ReadyUISoftClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, TipsUISoftClassPtr) == 0x000AD0, "Member 'ALobbySquadSequence2::TipsUISoftClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, OptionStatePath) == 0x000AF8, "Member 'ALobbySquadSequence2::OptionStatePath' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, FriendMatchMenuPath) == 0x000B20, "Member 'ALobbySquadSequence2::FriendMatchMenuPath' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, SquadPositionObjectClassPtr) == 0x000B48, "Member 'ALobbySquadSequence2::SquadPositionObjectClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, SquadPositionEmitPtr) == 0x000B70, "Member 'ALobbySquadSequence2::SquadPositionEmitPtr' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence2, SquadPositionSelectEmitPtr) == 0x000B98, "Member 'ALobbySquadSequence2::SquadPositionSelectEmitPtr' has a wrong offset!");

// Class UNION.GarageCamera
// 0x0010 (0x02A0 - 0x0290)
class AGarageCamera : public AActor
{
public:
	class UCameraComponent*                       CameraComponent;                                   // 0x0290(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGarageCameraMovementComponent*         MovementComponent;                                 // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UCameraComponent* GetCameraComponent();
	class UGarageCameraMovementComponent* GetMovementComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GarageCamera">();
	}
	static class AGarageCamera* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGarageCamera>();
	}
};
static_assert(alignof(AGarageCamera) == 0x000008, "Wrong alignment on AGarageCamera");
static_assert(sizeof(AGarageCamera) == 0x0002A0, "Wrong size on AGarageCamera");
static_assert(offsetof(AGarageCamera, CameraComponent) == 0x000290, "Member 'AGarageCamera::CameraComponent' has a wrong offset!");
static_assert(offsetof(AGarageCamera, MovementComponent) == 0x000298, "Member 'AGarageCamera::MovementComponent' has a wrong offset!");

// Class UNION.GarageCameraMovementComponent
// 0x02E0 (0x0510 - 0x0230)
class UGarageCameraMovementComponent final : public USceneComponent
{
public:
	TMulticastInlineDelegate<void()>              OnMovementFinished;                                // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UDataTable*                             TransformDataTable;                                // 0x0240(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             ArmDataTable;                                      // 0x0248(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x2C0];                                    // 0x0250(0x02C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddToHorizontalAngle(double InVal);
	void AddToVerticalAngle(double InVal);
	void SetArmDataTable(class UDataTable* InArmDataTable);
	void SetMode(EGarageCameraMovementMode InMode);
	void SetMovementTime(float InMovementTime);
	void SetRadii(const TArray<double>& InRadii);
	void SetRadiusByIndex(int32 InRadiusIndex, bool bInImmediateReflection);
	void SetTransformByArmData(const struct FGarageCameraMovementArmData& InArmData, bool bInImmediateReflection);
	void SetTransformByArmDataId(EGarageCameraMovementArmDataId InId, bool bInImmediateReflection);
	void SetTransformByTransformData(const struct FGarageCameraMovementTransformData& InTransformData, bool bInImmediateReflection);
	void SetTransformByTransformDataId(EGarageCameraMovementTransformDataId InId, bool bInImmediateReflection);
	void SetTransformDataTable(class UDataTable* InTransformDataTable);
	void SetVerticalAngleRange(double InMin, double InMax);
	void SwitchRadius(bool bInImmediateReflection);

	class UDataTable* GetArmDataTable() const;
	int32 GetRadiusIndex() const;
	bool IsMoving() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GarageCameraMovementComponent">();
	}
	static class UGarageCameraMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGarageCameraMovementComponent>();
	}
};
static_assert(alignof(UGarageCameraMovementComponent) == 0x000010, "Wrong alignment on UGarageCameraMovementComponent");
static_assert(sizeof(UGarageCameraMovementComponent) == 0x000510, "Wrong size on UGarageCameraMovementComponent");
static_assert(offsetof(UGarageCameraMovementComponent, OnMovementFinished) == 0x000230, "Member 'UGarageCameraMovementComponent::OnMovementFinished' has a wrong offset!");
static_assert(offsetof(UGarageCameraMovementComponent, TransformDataTable) == 0x000240, "Member 'UGarageCameraMovementComponent::TransformDataTable' has a wrong offset!");
static_assert(offsetof(UGarageCameraMovementComponent, ArmDataTable) == 0x000248, "Member 'UGarageCameraMovementComponent::ArmDataTable' has a wrong offset!");

// Class UNION.LobbySequenceBaseInterface
// 0x0000 (0x0000 - 0x0000)
class ILobbySequenceBaseInterface final
{
public:
	void OnLobbyDeleteFromComponent(class ULobbyContextBase* LobbyContext);
	void OnLobbyUpdateFromComponent(class ULobbyContextBase* LobbyContext);
	void OnMemberConnectFromComponent(class ULobbyContextBase* LobbyContext, class ULobbyMemberContextBase* MemberContext);
	void OnMemberDisconnectFromComponent(class ULobbyContextBase* LobbyContext, class ULobbyMemberContextBase* MemberContext, bool bWasKicked);
	void OnMemberPromoteFromComponent(class ULobbyContextBase* LobbyContext, class ULobbyMemberContextBase* MemberContext);
	void OnMemberUpdateFromComponent(class ULobbyContextBase* LobbyContext, class ULobbyMemberContextBase* MemberContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySequenceBaseInterface">();
	}
	static class ILobbySequenceBaseInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILobbySequenceBaseInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ILobbySequenceBaseInterface) == 0x000001, "Wrong alignment on ILobbySequenceBaseInterface");
static_assert(sizeof(ILobbySequenceBaseInterface) == 0x000001, "Wrong size on ILobbySequenceBaseInterface");

// Class UNION.GarageMenuCustomizeGadgetState
// 0x0000 (0x0128 - 0x0128)
class UGarageMenuCustomizeGadgetState : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GarageMenuCustomizeGadgetState">();
	}
	static class UGarageMenuCustomizeGadgetState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGarageMenuCustomizeGadgetState>();
	}
};
static_assert(alignof(UGarageMenuCustomizeGadgetState) == 0x000008, "Wrong alignment on UGarageMenuCustomizeGadgetState");
static_assert(sizeof(UGarageMenuCustomizeGadgetState) == 0x000128, "Wrong size on UGarageMenuCustomizeGadgetState");

// Class UNION.GarageMenuCustomizeMachineState
// 0x0000 (0x0128 - 0x0128)
class UGarageMenuCustomizeMachineState : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GarageMenuCustomizeMachineState">();
	}
	static class UGarageMenuCustomizeMachineState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGarageMenuCustomizeMachineState>();
	}
};
static_assert(alignof(UGarageMenuCustomizeMachineState) == 0x000008, "Wrong alignment on UGarageMenuCustomizeMachineState");
static_assert(sizeof(UGarageMenuCustomizeMachineState) == 0x000128, "Wrong size on UGarageMenuCustomizeMachineState");

// Class UNION.LobbyWirelessSequence
// 0x0000 (0x08C8 - 0x08C8)
class ALobbyWirelessSequence final : public ALobbySequenceBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyWirelessSequence">();
	}
	static class ALobbyWirelessSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyWirelessSequence>();
	}
};
static_assert(alignof(ALobbyWirelessSequence) == 0x000008, "Wrong alignment on ALobbyWirelessSequence");
static_assert(sizeof(ALobbyWirelessSequence) == 0x0008C8, "Wrong size on ALobbyWirelessSequence");

// Class UNION.GarageMenuGalleryState
// 0x0000 (0x0128 - 0x0128)
class UGarageMenuGalleryState : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GarageMenuGalleryState">();
	}
	static class UGarageMenuGalleryState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGarageMenuGalleryState>();
	}
};
static_assert(alignof(UGarageMenuGalleryState) == 0x000008, "Wrong alignment on UGarageMenuGalleryState");
static_assert(sizeof(UGarageMenuGalleryState) == 0x000128, "Wrong size on UGarageMenuGalleryState");

// Class UNION.GarageMenuSequence
// 0x0090 (0x03F8 - 0x0368)
class AGarageMenuSequence : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bIsSelectedCustomizeDataChanged)> OnBackEvent;                // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FVector& InAxisVal)> OnRightStickAxis;                // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_390[0x68];                                     // 0x0390(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Exit();
	void MatchingTimeOut(float InTimeOutTime);
	void OnInitStateExit();
	void OnInitStateIdle();
	void PlayerController_OnRightStickAxis(const struct FVector& InAxisVal);
	void RegisterPlayerController(class APlayerController* InPlayerController);
	void UnregisterPlayerController();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GarageMenuSequence">();
	}
	static class AGarageMenuSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGarageMenuSequence>();
	}
};
static_assert(alignof(AGarageMenuSequence) == 0x000008, "Wrong alignment on AGarageMenuSequence");
static_assert(sizeof(AGarageMenuSequence) == 0x0003F8, "Wrong size on AGarageMenuSequence");
static_assert(offsetof(AGarageMenuSequence, OnBackEvent) == 0x000370, "Member 'AGarageMenuSequence::OnBackEvent' has a wrong offset!");
static_assert(offsetof(AGarageMenuSequence, OnRightStickAxis) == 0x000380, "Member 'AGarageMenuSequence::OnRightStickAxis' has a wrong offset!");

// Class UNION.MachineColorSelectWindow
// 0x0098 (0x0470 - 0x03D8)
class UMachineColorSelectWindow : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void()>              OnItemFocused;                                     // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecision;                                        // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCancel;                                          // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPageSlideStart;                                  // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPageSlideEnd;                                    // 0x0418(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UUnionUISceneBase*                      WBP_MachineCustom_Sub_PresetPaint;                 // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDecisionWidget*                        WBP_MachineSelect_Sub_Btn_OK;                      // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UReadyWidget*                           WBP_MachineSelect_Sub_Ready;                       // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOutOfContentButton*                    OutOfContentButton;                                // 0x0440(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          DecisionSoundCue;                                  // 0x0448(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          CancelSoundCue;                                    // 0x0450(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PlayerIndex;                                       // 0x0458(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DecisionButtonText;                                // 0x0460(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	void DecisionButton_OnCancel(class UUnionUIButtonBase* Button);
	void DecisionButton_OnDecision(class UUnionUIButtonBase* Button);
	void DecisionButton_OnItemFocus(class UUnionUIButtonBase* Button);
	void HideReady();
	void OnItemFocus(class UUnionUIButtonBase* Button);
	void OnSetPlayerIndex(int32 InPlayerIndex);
	void SetEnableShoulder(bool IsEnable);
	void SetVisibleReady(bool IsVisible_0);
	void ShowReady();

	class UDecisionWidget* GetButtonOK() const;
	int32 GetPlayerIndex() const;
	class UUnionUISceneBase* GetPresetPaint() const;
	class UReadyWidget* GetReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineColorSelectWindow">();
	}
	static class UMachineColorSelectWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineColorSelectWindow>();
	}
};
static_assert(alignof(UMachineColorSelectWindow) == 0x000008, "Wrong alignment on UMachineColorSelectWindow");
static_assert(sizeof(UMachineColorSelectWindow) == 0x000470, "Wrong size on UMachineColorSelectWindow");
static_assert(offsetof(UMachineColorSelectWindow, OnItemFocused) == 0x0003D8, "Member 'UMachineColorSelectWindow::OnItemFocused' has a wrong offset!");
static_assert(offsetof(UMachineColorSelectWindow, OnDecision) == 0x0003E8, "Member 'UMachineColorSelectWindow::OnDecision' has a wrong offset!");
static_assert(offsetof(UMachineColorSelectWindow, OnCancel) == 0x0003F8, "Member 'UMachineColorSelectWindow::OnCancel' has a wrong offset!");
static_assert(offsetof(UMachineColorSelectWindow, OnPageSlideStart) == 0x000408, "Member 'UMachineColorSelectWindow::OnPageSlideStart' has a wrong offset!");
static_assert(offsetof(UMachineColorSelectWindow, OnPageSlideEnd) == 0x000418, "Member 'UMachineColorSelectWindow::OnPageSlideEnd' has a wrong offset!");
static_assert(offsetof(UMachineColorSelectWindow, WBP_MachineCustom_Sub_PresetPaint) == 0x000428, "Member 'UMachineColorSelectWindow::WBP_MachineCustom_Sub_PresetPaint' has a wrong offset!");
static_assert(offsetof(UMachineColorSelectWindow, WBP_MachineSelect_Sub_Btn_OK) == 0x000430, "Member 'UMachineColorSelectWindow::WBP_MachineSelect_Sub_Btn_OK' has a wrong offset!");
static_assert(offsetof(UMachineColorSelectWindow, WBP_MachineSelect_Sub_Ready) == 0x000438, "Member 'UMachineColorSelectWindow::WBP_MachineSelect_Sub_Ready' has a wrong offset!");
static_assert(offsetof(UMachineColorSelectWindow, OutOfContentButton) == 0x000440, "Member 'UMachineColorSelectWindow::OutOfContentButton' has a wrong offset!");
static_assert(offsetof(UMachineColorSelectWindow, DecisionSoundCue) == 0x000448, "Member 'UMachineColorSelectWindow::DecisionSoundCue' has a wrong offset!");
static_assert(offsetof(UMachineColorSelectWindow, CancelSoundCue) == 0x000450, "Member 'UMachineColorSelectWindow::CancelSoundCue' has a wrong offset!");
static_assert(offsetof(UMachineColorSelectWindow, PlayerIndex) == 0x000458, "Member 'UMachineColorSelectWindow::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UMachineColorSelectWindow, DecisionButtonText) == 0x000460, "Member 'UMachineColorSelectWindow::DecisionButtonText' has a wrong offset!");

// Class UNION.RaceResultSequenceStateReward
// 0x0000 (0x0108 - 0x0108)
class URaceResultSequenceStateReward : public URaceResultSequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceResultSequenceStateReward">();
	}
	static class URaceResultSequenceStateReward* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceResultSequenceStateReward>();
	}
};
static_assert(alignof(URaceResultSequenceStateReward) == 0x000008, "Wrong alignment on URaceResultSequenceStateReward");
static_assert(sizeof(URaceResultSequenceStateReward) == 0x000108, "Wrong size on URaceResultSequenceStateReward");

// Class UNION.GarageMenuTopState
// 0x0000 (0x0128 - 0x0128)
class UGarageMenuTopState : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GarageMenuTopState">();
	}
	static class UGarageMenuTopState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGarageMenuTopState>();
	}
};
static_assert(alignof(UGarageMenuTopState) == 0x000008, "Wrong alignment on UGarageMenuTopState");
static_assert(sizeof(UGarageMenuTopState) == 0x000128, "Wrong size on UGarageMenuTopState");

// Class UNION.GarageState
// 0x0000 (0x0128 - 0x0128)
class UGarageState : public UMenuSequenceSubStateBase
{
public:
	void MatchingTimeOut(float InTimeOutTime);
	void SetMessageBarVisible(bool bInIsVisible);

	bool IsSelectedCustomizeDataChanged() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GarageState">();
	}
	static class UGarageState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGarageState>();
	}
};
static_assert(alignof(UGarageState) == 0x000008, "Wrong alignment on UGarageState");
static_assert(sizeof(UGarageState) == 0x000128, "Wrong size on UGarageState");

// Class UNION.MachineAnimParameterDataAsset
// 0x0050 (0x0080 - 0x0030)
class UMachineAnimParameterDataAsset final : public UDataAsset
{
public:
	TMap<EDriverId, struct FMachineAirTrickData>  AirTrickData;                                      // 0x0030(0x0050)(Edit, NativeAccessSpecifierPublic)

public:
	void Refresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineAnimParameterDataAsset">();
	}
	static class UMachineAnimParameterDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineAnimParameterDataAsset>();
	}
};
static_assert(alignof(UMachineAnimParameterDataAsset) == 0x000008, "Wrong alignment on UMachineAnimParameterDataAsset");
static_assert(sizeof(UMachineAnimParameterDataAsset) == 0x000080, "Wrong size on UMachineAnimParameterDataAsset");
static_assert(offsetof(UMachineAnimParameterDataAsset, AirTrickData) == 0x000030, "Member 'UMachineAnimParameterDataAsset::AirTrickData' has a wrong offset!");

// Class UNION.GarbageCollectionInvoker
// 0x0000 (0x0028 - 0x0028)
class UGarbageCollectionInvoker final : public UObject
{
public:
	void OnFadeFinished(EUnionUIFadeDirection FadeDirection);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GarbageCollectionInvoker">();
	}
	static class UGarbageCollectionInvoker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGarbageCollectionInvoker>();
	}
};
static_assert(alignof(UGarbageCollectionInvoker) == 0x000008, "Wrong alignment on UGarbageCollectionInvoker");
static_assert(sizeof(UGarbageCollectionInvoker) == 0x000028, "Wrong size on UGarbageCollectionInvoker");

// Class UNION.GeneralizedParameterHelper
// 0x0000 (0x0028 - 0x0028)
class UGeneralizedParameterHelper final : public UBlueprintFunctionLibrary
{
public:
	static bool GetFriendListRequestIntervalMinutes(class UNetMasterDataManageSubsystem* Subsystem, int32* IntervalMinutes);
	static bool GetP2PRaceTimeOutMilliSeconds(class UNetMasterDataManageSubsystem* Subsystem, int32* TimeOutMilliSeconds);
	static bool GetP2PRaceUnstableTimeMilliSeconds(class UNetMasterDataManageSubsystem* Subsystem, int32* UnstableTimeMilliSeconds);
	static bool GetRaceDisableGadgetDetailTextIndex(class UNetMasterDataManageSubsystem* Subsystem, int32* TextIndex);
	static void GetRaceDisableGadgetsFesta(class UNetMasterDataManageSubsystem* Subsystem, TArray<int32>* RefGadgetIds);
	static void GetRaceDisableGadgetsLegendCompe(class UNetMasterDataManageSubsystem* Subsystem, TArray<int32>* RefGadgetIds);
	static void GetRaceDisableGadgetsRankMatch(class UNetMasterDataManageSubsystem* Subsystem, TArray<int32>* RefGadgetIds);
	static void GetRaceDisableItemsFesta(class UNetMasterDataManageSubsystem* Subsystem, TArray<int32>* RefItemIds);
	static void GetRaceDisableItemsLegendCompe(class UNetMasterDataManageSubsystem* Subsystem, TArray<int32>* RefItemIds);
	static void GetRaceDisableItemsRankMatch(class UNetMasterDataManageSubsystem* Subsystem, TArray<int32>* RefItemIds);
	static bool IsExistsRaceDisableGadgetsAny(class UNetMasterDataManageSubsystem* Subsystem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeneralizedParameterHelper">();
	}
	static class UGeneralizedParameterHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneralizedParameterHelper>();
	}
};
static_assert(alignof(UGeneralizedParameterHelper) == 0x000008, "Wrong alignment on UGeneralizedParameterHelper");
static_assert(sizeof(UGeneralizedParameterHelper) == 0x000028, "Wrong size on UGeneralizedParameterHelper");

// Class UNION.LobbyTravelRingManager
// 0x0120 (0x03B0 - 0x0290)
class ALobbyTravelRingManager final : public AActor
{
public:
	TMulticastInlineDelegate<void()>              OnShowStageNameEvent;                              // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              SelectCourseResultFinished;                        // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	ERaceSettingCourseSelecting                   CourseSelectingType;                               // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0xF];                                      // 0x02B1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformTravelRingCenter;                         // 0x02C0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FTransform>                     TransformTravelRings;                              // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AMenuLobbyTravelRingActor*>      TravelRingActors;                                  // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EStageId>                              CourseIds;                                         // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         OwnSelectedRingIndex;                              // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OwnDecidedRingIndex;                               // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDriverId                                     LobbyDecidedDriverId;                              // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LobbyDecidedPlayerName;                            // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LobbyDecidedRingIndex;                             // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStageId                                      LobbyDecidedCourseId;                              // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EStageId>                              PlayerSelectedCourseIds;                           // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 PlayerSelectedRingIndexs;                          // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_398[0x18];                                     // 0x0398(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateTravelRing(const EStageId& InCourseId, ERaceSettingCourseSelecting InCourseSelectingType, bool bIsFirstSetAtRandom);
	void CreateTravelRings(const TArray<EStageId>& InCourseId, bool bIsFirstSetAtRandom);
	void DecideRing(int32 InRingIndex);
	void DestroyTravelRings();
	void HiddenInGameTravelRings(bool bNewHidden);
	void InitializeSelectCourseResult(EDriverId InDriverId, const class FString& InPlayerName, int32 InSelectedRingIndex, EStageId InLobbyDecidedCourseId);
	void OnInitialize();
	void OnSetup(EMatchingLobbyType InGameMode);
	void PlaySequencerLobbyFinished();
	void PlaySequencerSelectCourseResult();
	void PlaySequencerSelectOnceRingLobbyFinished();
	void SelectRing(int32 InRingIndex);
	void SetLobbyDecidedCourseId(EStageId InStageId);
	void SetSelectedStageIds(const TArray<EStageId>& InStageIds, const TArray<int32>& InRingIndexs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyTravelRingManager">();
	}
	static class ALobbyTravelRingManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyTravelRingManager>();
	}
};
static_assert(alignof(ALobbyTravelRingManager) == 0x000010, "Wrong alignment on ALobbyTravelRingManager");
static_assert(sizeof(ALobbyTravelRingManager) == 0x0003B0, "Wrong size on ALobbyTravelRingManager");
static_assert(offsetof(ALobbyTravelRingManager, OnShowStageNameEvent) == 0x000290, "Member 'ALobbyTravelRingManager::OnShowStageNameEvent' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, SelectCourseResultFinished) == 0x0002A0, "Member 'ALobbyTravelRingManager::SelectCourseResultFinished' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, CourseSelectingType) == 0x0002B0, "Member 'ALobbyTravelRingManager::CourseSelectingType' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, TransformTravelRingCenter) == 0x0002C0, "Member 'ALobbyTravelRingManager::TransformTravelRingCenter' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, TransformTravelRings) == 0x000320, "Member 'ALobbyTravelRingManager::TransformTravelRings' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, TravelRingActors) == 0x000330, "Member 'ALobbyTravelRingManager::TravelRingActors' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, CourseIds) == 0x000340, "Member 'ALobbyTravelRingManager::CourseIds' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, OwnSelectedRingIndex) == 0x000350, "Member 'ALobbyTravelRingManager::OwnSelectedRingIndex' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, OwnDecidedRingIndex) == 0x000354, "Member 'ALobbyTravelRingManager::OwnDecidedRingIndex' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, LobbyDecidedDriverId) == 0x000358, "Member 'ALobbyTravelRingManager::LobbyDecidedDriverId' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, LobbyDecidedPlayerName) == 0x000360, "Member 'ALobbyTravelRingManager::LobbyDecidedPlayerName' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, LobbyDecidedRingIndex) == 0x000370, "Member 'ALobbyTravelRingManager::LobbyDecidedRingIndex' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, LobbyDecidedCourseId) == 0x000374, "Member 'ALobbyTravelRingManager::LobbyDecidedCourseId' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, PlayerSelectedCourseIds) == 0x000378, "Member 'ALobbyTravelRingManager::PlayerSelectedCourseIds' has a wrong offset!");
static_assert(offsetof(ALobbyTravelRingManager, PlayerSelectedRingIndexs) == 0x000388, "Member 'ALobbyTravelRingManager::PlayerSelectedRingIndexs' has a wrong offset!");

// Class UNION.GetFreeContentState
// 0x0020 (0x0148 - 0x0128)
class UGetFreeContentState : public UMenuSequenceSubStateBase
{
public:
	TArray<struct FRewardGetWindowParam>          DLCRewardData;                                     // 0x0128(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRewardGetWindowParam>          FreeContentRewardData;                             // 0x0138(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	bool CheckUnlockCutscenCharacter(const TArray<struct FRewardGetWindowParam>& RewardData, TArray<EDriverId>* CutsceneCharacterList);
	void MakeRewardData();
	void SetSaveData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GetFreeContentState">();
	}
	static class UGetFreeContentState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGetFreeContentState>();
	}
};
static_assert(alignof(UGetFreeContentState) == 0x000008, "Wrong alignment on UGetFreeContentState");
static_assert(sizeof(UGetFreeContentState) == 0x000148, "Wrong size on UGetFreeContentState");
static_assert(offsetof(UGetFreeContentState, DLCRewardData) == 0x000128, "Member 'UGetFreeContentState::DLCRewardData' has a wrong offset!");
static_assert(offsetof(UGetFreeContentState, FreeContentRewardData) == 0x000138, "Member 'UGetFreeContentState::FreeContentRewardData' has a wrong offset!");

// Class UNION.ReadyWindowCharacterIcon
// 0x0000 (0x02E0 - 0x02E0)
class UReadyWindowCharacterIcon : public UUserWidget
{
public:
	void SetCharacterIconCheckMark(bool bIsCheck);
	void SetCharacterIconData();
	void SetCharacterIconTexture(const TSoftObjectPtr<class UTexture2D>& Texture, const class FText& Name_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReadyWindowCharacterIcon">();
	}
	static class UReadyWindowCharacterIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReadyWindowCharacterIcon>();
	}
};
static_assert(alignof(UReadyWindowCharacterIcon) == 0x000008, "Wrong alignment on UReadyWindowCharacterIcon");
static_assert(sizeof(UReadyWindowCharacterIcon) == 0x0002E0, "Wrong size on UReadyWindowCharacterIcon");

// Class UNION.GhostSelectState
// 0x0028 (0x0150 - 0x0128)
class UGhostSelectState : public UMenuSequenceSubStateBase
{
public:
	bool                                          bIsGhostMachineDisable;                            // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLineGuideDisable;                               // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGhostOnline;                                    // 0x012A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsViewGhostReplay;                                // 0x012B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGhostSelectModeId                            CurrentGhostSelectModeId;                          // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnDecideGhostSelect;                               // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecideGhostUpload;                               // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostSelectState">();
	}
	static class UGhostSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostSelectState>();
	}
};
static_assert(alignof(UGhostSelectState) == 0x000008, "Wrong alignment on UGhostSelectState");
static_assert(sizeof(UGhostSelectState) == 0x000150, "Wrong size on UGhostSelectState");
static_assert(offsetof(UGhostSelectState, bIsGhostMachineDisable) == 0x000128, "Member 'UGhostSelectState::bIsGhostMachineDisable' has a wrong offset!");
static_assert(offsetof(UGhostSelectState, bIsLineGuideDisable) == 0x000129, "Member 'UGhostSelectState::bIsLineGuideDisable' has a wrong offset!");
static_assert(offsetof(UGhostSelectState, bIsGhostOnline) == 0x00012A, "Member 'UGhostSelectState::bIsGhostOnline' has a wrong offset!");
static_assert(offsetof(UGhostSelectState, bIsViewGhostReplay) == 0x00012B, "Member 'UGhostSelectState::bIsViewGhostReplay' has a wrong offset!");
static_assert(offsetof(UGhostSelectState, CurrentGhostSelectModeId) == 0x00012C, "Member 'UGhostSelectState::CurrentGhostSelectModeId' has a wrong offset!");
static_assert(offsetof(UGhostSelectState, OnDecideGhostSelect) == 0x000130, "Member 'UGhostSelectState::OnDecideGhostSelect' has a wrong offset!");
static_assert(offsetof(UGhostSelectState, OnDecideGhostUpload) == 0x000140, "Member 'UGhostSelectState::OnDecideGhostUpload' has a wrong offset!");

// Class UNION.GrandPrixAwardsCeremonyState
// 0x0000 (0x0128 - 0x0128)
class UGrandPrixAwardsCeremonyState final : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GrandPrixAwardsCeremonyState">();
	}
	static class UGrandPrixAwardsCeremonyState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGrandPrixAwardsCeremonyState>();
	}
};
static_assert(alignof(UGrandPrixAwardsCeremonyState) == 0x000008, "Wrong alignment on UGrandPrixAwardsCeremonyState");
static_assert(sizeof(UGrandPrixAwardsCeremonyState) == 0x000128, "Wrong size on UGrandPrixAwardsCeremonyState");

// Class UNION.MachineCustomizeCustomList
// 0x0028 (0x0400 - 0x03D8)
class UMachineCustomizeCustomList : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex)> OnShowNewButtonEvent; // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UScrollBox*                             ScrollBox;                                         // 0x03E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMachineCustomizeCustomListItem> CustomListItem;                               // 0x03F0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F8[0x8];                                      // 0x03F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetButtonSelect(int32 InButtonIndex);
	int32 SetFocusButtonUnlock();
	void ShowNewButton(class UUnionUIButtonBase* InButton);

	int32 GetFocusIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeCustomList">();
	}
	static class UMachineCustomizeCustomList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeCustomList>();
	}
};
static_assert(alignof(UMachineCustomizeCustomList) == 0x000008, "Wrong alignment on UMachineCustomizeCustomList");
static_assert(sizeof(UMachineCustomizeCustomList) == 0x000400, "Wrong size on UMachineCustomizeCustomList");
static_assert(offsetof(UMachineCustomizeCustomList, OnShowNewButtonEvent) == 0x0003D8, "Member 'UMachineCustomizeCustomList::OnShowNewButtonEvent' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomList, ScrollBox) == 0x0003E8, "Member 'UMachineCustomizeCustomList::ScrollBox' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomList, CustomListItem) == 0x0003F0, "Member 'UMachineCustomizeCustomList::CustomListItem' has a wrong offset!");

// Class UNION.GrandPrixCourseLotteryWheel
// 0x0010 (0x1428 - 0x1418)
class UGrandPrixCourseLotteryWheel final : public UCorseLotteryWheelBase
{
public:
	uint8                                         Pad_1418[0x10];                                    // 0x1418(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GrandPrixCourseLotteryWheel">();
	}
	static class UGrandPrixCourseLotteryWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGrandPrixCourseLotteryWheel>();
	}
};
static_assert(alignof(UGrandPrixCourseLotteryWheel) == 0x000008, "Wrong alignment on UGrandPrixCourseLotteryWheel");
static_assert(sizeof(UGrandPrixCourseLotteryWheel) == 0x001428, "Wrong size on UGrandPrixCourseLotteryWheel");

// Class UNION.GrandPrixSequence
// 0x0018 (0x0380 - 0x0368)
class AGrandPrixSequence : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCourseSelectWidgetBase*                CourseSelectUI;                                    // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGrandPrixCommonData*                   CommonData;                                        // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ChooseRival(bool* OutRivalChanged, bool MileStone);
	int32 GetRivalWinRewardEventThreshold();
	void InitGPRaceResultData();
	void OnInitStateExit();
	void OnInitStateIdle();
	void ResetRivalDataFromMenuData();
	void SetSelectedGPData(class USelectGrandPrixAndCourseState* SelectCourseState);

	int32 GetRivalDominationCount() const;
	int32 GetRivalDominationTargetCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GrandPrixSequence">();
	}
	static class AGrandPrixSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGrandPrixSequence>();
	}
};
static_assert(alignof(AGrandPrixSequence) == 0x000008, "Wrong alignment on AGrandPrixSequence");
static_assert(sizeof(AGrandPrixSequence) == 0x000380, "Wrong size on AGrandPrixSequence");
static_assert(offsetof(AGrandPrixSequence, CourseSelectUI) == 0x000370, "Member 'AGrandPrixSequence::CourseSelectUI' has a wrong offset!");
static_assert(offsetof(AGrandPrixSequence, CommonData) == 0x000378, "Member 'AGrandPrixSequence::CommonData' has a wrong offset!");

// Class UNION.GrandPrixUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UGrandPrixUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<EGrandPrixId> CalcSelectableGrandPrixIds();
	static bool CanUseStageByStreamingInstallStatus(EStageId StageId);
	static bool CheckGrandPrixRankEarnPointBonusExists();
	static bool CheckOpenSuperSonicSpeed();
	static EGrandPrixId FindGrandPrixId(EStageId StageId);
	static uint8 GetBlankIconHiddenCount();
	static ESpeedClassId GetGrandPrixLastFocusedClassId();
	static EMenuSpeedClassId GetGrandPrixLastFocusedMenuSpeedClassId();
	static EMenuSpeedClassId GetGrandPrixLastPlayedMenuSpeedClassId();
	static uint8 GetMaxNormalRivalLevel();
	static uint8 GetMaxRivalLevel();
	static uint8 GetPowerRivalAddLevel();
	static TArray<bool> GetRedStarRingAcquisition(const EStageId InStageId);
	static int32 GetRivalDominationCount();
	static int32 GetRivalDominationTargetCount();
	static uint8 GetRivalLevelMax();
	static int32 GetRivalWinFirstRewardEventThreshold();
	static int32 GetRivalWinRewardEventThreshold();
	static bool HasUnclearedGrandPrixEnding();
	static bool IsBonusUpChallenge(const uint8 NormalRivalLevel);
	static bool IsClearedNormalGrandPrix();
	static bool IsFixedGrandPrix(EGrandPrixId GrandPrixId);
	static bool IsGrandPrixEndingCleared(EGrandPrixEndingId EndingId);
	static bool IsGrandPrixOpened(EGrandPrixId GrandPrixId);
	static void LoadCommonData();
	static void SetGrandPrixLastPlayedMenuSpeedClassId(const EMenuSpeedClassId SetClassId);
	static void UnloadCommonData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GrandPrixUtilityLibrary">();
	}
	static class UGrandPrixUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGrandPrixUtilityLibrary>();
	}
};
static_assert(alignof(UGrandPrixUtilityLibrary) == 0x000008, "Wrong alignment on UGrandPrixUtilityLibrary");
static_assert(sizeof(UGrandPrixUtilityLibrary) == 0x000028, "Wrong size on UGrandPrixUtilityLibrary");

// Class UNION.GroupSelect
// 0x0060 (0x0438 - 0x03D8)
class UGroupSelect : public UUnionUISceneBase
{
public:
	uint8                                         Pad_3D8[0x8];                                      // 0x03D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIButtonsPanel*                   RacersPanel;                                       // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGuest;                                           // 0x03E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnd;                                            // 0x03E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EA[0x2];                                      // 0x03EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OnlinePlayerCount;                                 // 0x03EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnLobbyIndex;                                     // 0x03F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LobbyIndexArray;                                   // 0x03F8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EDriverId>                             OnlineDriverIdArray;                               // 0x0408(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UGroupSelectComponentController*> Components;                                       // 0x0418(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_428[0x10];                                     // 0x0428(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FocusToTop();
	void ForceComponentsMoveEnd();
	void ForceDecisionGroupEvent();
	TArray<int32> GetAllRacerIndexInGroup(int32 GroupIndex, int32 PlayerCnt);
	int32 GetLobbyIndexFromArray(int32 InIndex);
	class UGroupSelectComponentController* GetMouseControllComponent(EGameModeId GameMode);
	EDriverId GetOnlineDriverIdFromArray(int32 InIndex);
	bool IsPlateMoving();
	void OnClickedFocusButtonEvent(class UUnionUIButtonBase* Button);
	void ResolveIsGroupOverflow(int32 PlayerCnt);
	void SetAllVisibleComponents();
	void SetEndControlComponents();
	void SetForceGroupSetting(const TArray<int32>& InGroupIndexArray);
	void SetForceGroupSettingCompleted();
	void SetGroupIndexAll();
	void SetIsGuest(bool Guest);
	void SetLastFocusPlateIndex(int32 Index_0);
	void SetLobbyIndexArray(const TArray<int32>& inArray);
	void SetOnlineDriverIdArray(const TArray<EDriverId>& inArray);
	void SetOnlinePlayerCount(int32 PlayerCnt);
	void SetOwnLobbyIndex(int32 InIndex);
	void StartRandom(int32 StartPosition, int32 EndPosition, bool bIsLast);
	void UpdateComponents();

	TArray<int32> GetAllGroupIndex() const;
	int32 GetGroupIndex(int32 RacerIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GroupSelect">();
	}
	static class UGroupSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGroupSelect>();
	}
};
static_assert(alignof(UGroupSelect) == 0x000008, "Wrong alignment on UGroupSelect");
static_assert(sizeof(UGroupSelect) == 0x000438, "Wrong size on UGroupSelect");
static_assert(offsetof(UGroupSelect, RacersPanel) == 0x0003E0, "Member 'UGroupSelect::RacersPanel' has a wrong offset!");
static_assert(offsetof(UGroupSelect, IsGuest) == 0x0003E8, "Member 'UGroupSelect::IsGuest' has a wrong offset!");
static_assert(offsetof(UGroupSelect, bIsEnd) == 0x0003E9, "Member 'UGroupSelect::bIsEnd' has a wrong offset!");
static_assert(offsetof(UGroupSelect, OnlinePlayerCount) == 0x0003EC, "Member 'UGroupSelect::OnlinePlayerCount' has a wrong offset!");
static_assert(offsetof(UGroupSelect, OwnLobbyIndex) == 0x0003F0, "Member 'UGroupSelect::OwnLobbyIndex' has a wrong offset!");
static_assert(offsetof(UGroupSelect, LobbyIndexArray) == 0x0003F8, "Member 'UGroupSelect::LobbyIndexArray' has a wrong offset!");
static_assert(offsetof(UGroupSelect, OnlineDriverIdArray) == 0x000408, "Member 'UGroupSelect::OnlineDriverIdArray' has a wrong offset!");
static_assert(offsetof(UGroupSelect, Components) == 0x000418, "Member 'UGroupSelect::Components' has a wrong offset!");

// Class UNION.GroupSelectComponent
// 0x0030 (0x0310 - 0x02E0)
class UGroupSelectComponent : public UUserWidget
{
public:
	class FName                                   playerName;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrossplayPlatform                            Platform;                                          // 0x02E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 PlatformIconImage;                                 // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 CharacterIconImage;                                // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0300(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LocalPlayerIndex;                                  // 0x0304(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0308(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCharacter(EDriverId InDriverId);
	void SetGroupIndex(int32 InGroupIndex);
	void SetIconIndex(int32 IconIndex);
	void SetLocalPlayerInfo(bool bInLocalPlayer, int32 InLocalPlayerIndex);
	void SetPlatformIconIndex(int32 InPlatformIconIndex);
	void SetPlayerNameString(const class FString& InPlayerNameString);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GroupSelectComponent">();
	}
	static class UGroupSelectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGroupSelectComponent>();
	}
};
static_assert(alignof(UGroupSelectComponent) == 0x000008, "Wrong alignment on UGroupSelectComponent");
static_assert(sizeof(UGroupSelectComponent) == 0x000310, "Wrong size on UGroupSelectComponent");
static_assert(offsetof(UGroupSelectComponent, playerName) == 0x0002E0, "Member 'UGroupSelectComponent::playerName' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponent, Platform) == 0x0002E8, "Member 'UGroupSelectComponent::Platform' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponent, PlatformIconImage) == 0x0002F0, "Member 'UGroupSelectComponent::PlatformIconImage' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponent, CharacterIconImage) == 0x0002F8, "Member 'UGroupSelectComponent::CharacterIconImage' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponent, bIsLocalPlayer) == 0x000300, "Member 'UGroupSelectComponent::bIsLocalPlayer' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponent, LocalPlayerIndex) == 0x000304, "Member 'UGroupSelectComponent::LocalPlayerIndex' has a wrong offset!");
static_assert(offsetof(UGroupSelectComponent, GroupIndex) == 0x000308, "Member 'UGroupSelectComponent::GroupIndex' has a wrong offset!");

// Class UNION.InputModifierGyroToSteer
// 0x0010 (0x0038 - 0x0028)
class UInputModifierGyroToSteer final : public UInputModifier
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierGyroToSteer">();
	}
	static class UInputModifierGyroToSteer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierGyroToSteer>();
	}
};
static_assert(alignof(UInputModifierGyroToSteer) == 0x000008, "Wrong alignment on UInputModifierGyroToSteer");
static_assert(sizeof(UInputModifierGyroToSteer) == 0x000038, "Wrong size on UInputModifierGyroToSteer");

// Class UNION.MachineCustomizeStickerApplyState
// 0x0008 (0x0100 - 0x00F8)
class UMachineCustomizeStickerApplyState : public UHierarchicalStateMachineStateComponent
{
public:
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActiveAuraEffect(bool IsActive_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeStickerApplyState">();
	}
	static class UMachineCustomizeStickerApplyState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeStickerApplyState>();
	}
};
static_assert(alignof(UMachineCustomizeStickerApplyState) == 0x000008, "Wrong alignment on UMachineCustomizeStickerApplyState");
static_assert(sizeof(UMachineCustomizeStickerApplyState) == 0x000100, "Wrong size on UMachineCustomizeStickerApplyState");

// Class UNION.InputModifierGyroToPitch
// 0x0018 (0x0040 - 0x0028)
class UInputModifierGyroToPitch final : public UInputModifier
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierGyroToPitch">();
	}
	static class UInputModifierGyroToPitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierGyroToPitch>();
	}
};
static_assert(alignof(UInputModifierGyroToPitch) == 0x000008, "Wrong alignment on UInputModifierGyroToPitch");
static_assert(sizeof(UInputModifierGyroToPitch) == 0x000040, "Wrong size on UInputModifierGyroToPitch");

// Class UNION.InputModifierGyroToTrickX
// 0x0018 (0x0040 - 0x0028)
class UInputModifierGyroToTrickX final : public UInputModifier
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierGyroToTrickX">();
	}
	static class UInputModifierGyroToTrickX* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierGyroToTrickX>();
	}
};
static_assert(alignof(UInputModifierGyroToTrickX) == 0x000008, "Wrong alignment on UInputModifierGyroToTrickX");
static_assert(sizeof(UInputModifierGyroToTrickX) == 0x000040, "Wrong size on UInputModifierGyroToTrickX");

// Class UNION.HintPopupWindow
// 0x0048 (0x04C8 - 0x0480)
class UHintPopupWindow : public UUnionUIButtonBase
{
public:
	uint8                                         Pad_480[0x8];                                      // 0x0480(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              CloseEndDelegate;                                  // 0x0488(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UUserWidget*                            ImageWidget;                                       // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidgetAnimation*>               ImageWidgetAnimation;                              // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInputEnable;                                      // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDecisionClose;                                    // 0x04B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateByDeviceImmediately;                        // 0x04B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B3[0x15];                                     // 0x04B3(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CloseWindow();
	void EndImageWidgetAnimation();
	EHintId GetHintId();
	class FText GetRaceButtonText(int32 InPlayerIndex, uint8 InputType, const class FText& InText);
	void OpenWindow();
	void OpenWindowWithoutAnimation();
	void SetBackgroundVisible(const bool bInVisible);
	void SetCharacterVisible(bool bInVisible);
	void SetExplanationText(const class FText& InText);
	void SetFooterVisible(const bool bInVisible);
	void SetImageTexture(const TSoftObjectPtr<class UTexture2D>& InImageTexture);
	void SetImageWidget(const TSoftClassPtr<class UClass>& InImageWidget, float InAnimationInterval);
	void SetImageWidgetImageObjectVisible(int32 InImageIndex, bool bInVisible);
	void SetImageWidgetTexture(int32 InImageIndex, class UTexture2D* InTexture);
	void SetPageDisplay(int32 InPageNum, int32 InCurrentPageIndex);
	void SetTitleText(const class FText& InText);
	void Setup(EHintId InHintId, bool bInDecisionClose);
	void SetupImageWidget(class UUserWidget* InImageWidget, float InAnimationInterval);
	void StartImageWidgetAnimation();
	void StartImageWidgetLoop1Animation();
	void StartImageWidgetLoop2Animation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HintPopupWindow">();
	}
	static class UHintPopupWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHintPopupWindow>();
	}
};
static_assert(alignof(UHintPopupWindow) == 0x000008, "Wrong alignment on UHintPopupWindow");
static_assert(sizeof(UHintPopupWindow) == 0x0004C8, "Wrong size on UHintPopupWindow");
static_assert(offsetof(UHintPopupWindow, CloseEndDelegate) == 0x000488, "Member 'UHintPopupWindow::CloseEndDelegate' has a wrong offset!");
static_assert(offsetof(UHintPopupWindow, ImageWidget) == 0x000498, "Member 'UHintPopupWindow::ImageWidget' has a wrong offset!");
static_assert(offsetof(UHintPopupWindow, ImageWidgetAnimation) == 0x0004A0, "Member 'UHintPopupWindow::ImageWidgetAnimation' has a wrong offset!");
static_assert(offsetof(UHintPopupWindow, bInputEnable) == 0x0004B0, "Member 'UHintPopupWindow::bInputEnable' has a wrong offset!");
static_assert(offsetof(UHintPopupWindow, bDecisionClose) == 0x0004B1, "Member 'UHintPopupWindow::bDecisionClose' has a wrong offset!");
static_assert(offsetof(UHintPopupWindow, bUpdateByDeviceImmediately) == 0x0004B2, "Member 'UHintPopupWindow::bUpdateByDeviceImmediately' has a wrong offset!");

// Class UNION.MachineCustomizeColorDetailState
// 0x0000 (0x00F8 - 0x00F8)
class UMachineCustomizeColorDetailState : public UMachineCustomizePage
{
public:
	void OnSetupPage();
	void SetProperties();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeColorDetailState">();
	}
	static class UMachineCustomizeColorDetailState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeColorDetailState>();
	}
};
static_assert(alignof(UMachineCustomizeColorDetailState) == 0x000008, "Wrong alignment on UMachineCustomizeColorDetailState");
static_assert(sizeof(UMachineCustomizeColorDetailState) == 0x0000F8, "Wrong size on UMachineCustomizeColorDetailState");

// Class UNION.RaceResultSequenceStateGhostSave
// 0x0008 (0x0110 - 0x0108)
class URaceResultSequenceStateGhostSave : public URaceResultSequenceStateBase
{
public:
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceResultSequenceStateGhostSave">();
	}
	static class URaceResultSequenceStateGhostSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceResultSequenceStateGhostSave>();
	}
};
static_assert(alignof(URaceResultSequenceStateGhostSave) == 0x000008, "Wrong alignment on URaceResultSequenceStateGhostSave");
static_assert(sizeof(URaceResultSequenceStateGhostSave) == 0x000110, "Wrong size on URaceResultSequenceStateGhostSave");

// Class UNION.HintSequence
// 0x0050 (0x0178 - 0x0128)
class UHintSequence final : public UMenuSequenceSubStateBase
{
public:
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _HintWidgetClass;                                  // 0x0138(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160[0x8];                                      // 0x0160(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHintTop*                               _HintWidget;                                       // 0x0168(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x8];                                      // 0x0170(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HintSequence">();
	}
	static class UHintSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHintSequence>();
	}
};
static_assert(alignof(UHintSequence) == 0x000008, "Wrong alignment on UHintSequence");
static_assert(sizeof(UHintSequence) == 0x000178, "Wrong size on UHintSequence");
static_assert(offsetof(UHintSequence, OnBackEvent) == 0x000128, "Member 'UHintSequence::OnBackEvent' has a wrong offset!");
static_assert(offsetof(UHintSequence, _HintWidgetClass) == 0x000138, "Member 'UHintSequence::_HintWidgetClass' has a wrong offset!");
static_assert(offsetof(UHintSequence, _HintWidget) == 0x000168, "Member 'UHintSequence::_HintWidget' has a wrong offset!");

// Class UNION.HintTipsInformationWindow
// 0x00B0 (0x0390 - 0x02E0)
class UHintTipsInformationWindow final : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnInputReturnMenu;                                 // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInputTabMoveRight;                               // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInputTabMoveLeft;                                // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UDataTable*                             HintDataTable;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHintPopupWindow*                       WBP_HintWindow;                                    // 0x0318(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHInt_Sub_List*                         WBP_HInt_Sub_List;                                 // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EHintId, struct FHintDataTableRow>       HintDataMap;                                       // 0x0328(0x0050)(NativeAccessSpecifierPrivate)
	TArray<struct FHintDataTableRow>              OutTipsHintDataArray;                              // 0x0378(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeTips(EHintId NextTipsId);
	void OnCancelHintMenu();
	void OnTabMoveLeft();
	void OnTabMoveRight();
	void SetupHintData(bool isInformation);
	void TabChangeTipsScreen(bool isInformation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HintTipsInformationWindow">();
	}
	static class UHintTipsInformationWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHintTipsInformationWindow>();
	}
};
static_assert(alignof(UHintTipsInformationWindow) == 0x000008, "Wrong alignment on UHintTipsInformationWindow");
static_assert(sizeof(UHintTipsInformationWindow) == 0x000390, "Wrong size on UHintTipsInformationWindow");
static_assert(offsetof(UHintTipsInformationWindow, OnInputReturnMenu) == 0x0002E0, "Member 'UHintTipsInformationWindow::OnInputReturnMenu' has a wrong offset!");
static_assert(offsetof(UHintTipsInformationWindow, OnInputTabMoveRight) == 0x0002F0, "Member 'UHintTipsInformationWindow::OnInputTabMoveRight' has a wrong offset!");
static_assert(offsetof(UHintTipsInformationWindow, OnInputTabMoveLeft) == 0x000300, "Member 'UHintTipsInformationWindow::OnInputTabMoveLeft' has a wrong offset!");
static_assert(offsetof(UHintTipsInformationWindow, HintDataTable) == 0x000310, "Member 'UHintTipsInformationWindow::HintDataTable' has a wrong offset!");
static_assert(offsetof(UHintTipsInformationWindow, WBP_HintWindow) == 0x000318, "Member 'UHintTipsInformationWindow::WBP_HintWindow' has a wrong offset!");
static_assert(offsetof(UHintTipsInformationWindow, WBP_HInt_Sub_List) == 0x000320, "Member 'UHintTipsInformationWindow::WBP_HInt_Sub_List' has a wrong offset!");
static_assert(offsetof(UHintTipsInformationWindow, HintDataMap) == 0x000328, "Member 'UHintTipsInformationWindow::HintDataMap' has a wrong offset!");
static_assert(offsetof(UHintTipsInformationWindow, OutTipsHintDataArray) == 0x000378, "Member 'UHintTipsInformationWindow::OutTipsHintDataArray' has a wrong offset!");

// Class UNION.RankMatchMenuMatchingState
// 0x0000 (0x0128 - 0x0128)
class URankMatchMenuMatchingState final : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RankMatchMenuMatchingState">();
	}
	static class URankMatchMenuMatchingState* GetDefaultObj()
	{
		return GetDefaultObjImpl<URankMatchMenuMatchingState>();
	}
};
static_assert(alignof(URankMatchMenuMatchingState) == 0x000008, "Wrong alignment on URankMatchMenuMatchingState");
static_assert(sizeof(URankMatchMenuMatchingState) == 0x000128, "Wrong size on URankMatchMenuMatchingState");

// Class UNION.MachineCustomizeSaveState
// 0x0000 (0x00F8 - 0x00F8)
class UMachineCustomizeSaveState : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeSaveState">();
	}
	static class UMachineCustomizeSaveState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeSaveState>();
	}
};
static_assert(alignof(UMachineCustomizeSaveState) == 0x000008, "Wrong alignment on UMachineCustomizeSaveState");
static_assert(sizeof(UMachineCustomizeSaveState) == 0x0000F8, "Wrong size on UMachineCustomizeSaveState");

// Class UNION.HintTop
// 0x0028 (0x0350 - 0x0328)
class UHintTop final : public UUnionUIInputWidget
{
public:
	uint8                                         Pad_328[0x28];                                     // 0x0328(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangePlayTittleBgm(bool IsPlay);
	void MoveLeftHintTab();
	void MoveRightHintTab();
	void OnChangeControllerInputType(EAppControllerInputType BeforeType, EAppControllerInputType AfterType);
	void OnSubMenuBackKeyPressed();
	void OnSubMenuLeftShoulderPressed();
	void OnSubMenuRightShoulderPressed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HintTop">();
	}
	static class UHintTop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHintTop>();
	}
};
static_assert(alignof(UHintTop) == 0x000008, "Wrong alignment on UHintTop");
static_assert(sizeof(UHintTop) == 0x000350, "Wrong size on UHintTop");

// Class UNION.HintUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UHintUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void GetTipsHintDataArray(class UDataTable* HintDataTable, TArray<struct FHintDataTableRow>* OutTipsHintDataArray);
	static void GetTipsHintDataArrayOnlyNormal(class UDataTable* HintDataTable, TArray<struct FHintDataTableRow>* OutTipsHintDataArray);
	static void SetHintRead(class UDataTable* HintDataTable, EHintId InHintId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HintUtilityLibrary">();
	}
	static class UHintUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHintUtilityLibrary>();
	}
};
static_assert(alignof(UHintUtilityLibrary) == 0x000008, "Wrong alignment on UHintUtilityLibrary");
static_assert(sizeof(UHintUtilityLibrary) == 0x000028, "Wrong size on UHintUtilityLibrary");

// Class UNION.MachinePartsIconTextureSetupTool
// 0x0008 (0x0038 - 0x0030)
class UMachinePartsIconTextureSetupTool final : public UPrimaryDataAsset
{
public:
	class UDataTable*                             MachinePartsDataTable;                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Setup();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachinePartsIconTextureSetupTool">();
	}
	static class UMachinePartsIconTextureSetupTool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachinePartsIconTextureSetupTool>();
	}
};
static_assert(alignof(UMachinePartsIconTextureSetupTool) == 0x000008, "Wrong alignment on UMachinePartsIconTextureSetupTool");
static_assert(sizeof(UMachinePartsIconTextureSetupTool) == 0x000038, "Wrong size on UMachinePartsIconTextureSetupTool");
static_assert(offsetof(UMachinePartsIconTextureSetupTool, MachinePartsDataTable) == 0x000030, "Member 'UMachinePartsIconTextureSetupTool::MachinePartsDataTable' has a wrong offset!");

// Class UNION.Hint_Sub
// 0x0008 (0x02E8 - 0x02E0)
class UHint_Sub : public UUserWidget
{
public:
	class UCommonUIControllerWrapper*             WBP_Tutorial_Controller_Wrapper;                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetControllerUIIndex(int32 InIndex);
	void SetupControllerUI(EHintId InHintId, bool bIsKeyboard);

	EPFControllerTypeUseHint GetPlatformControllerType() const;
	bool IsKeyboard() const;
	bool IsValidControllerUI() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Hint_Sub">();
	}
	static class UHint_Sub* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHint_Sub>();
	}
};
static_assert(alignof(UHint_Sub) == 0x000008, "Wrong alignment on UHint_Sub");
static_assert(sizeof(UHint_Sub) == 0x0002E8, "Wrong size on UHint_Sub");
static_assert(offsetof(UHint_Sub, WBP_Tutorial_Controller_Wrapper) == 0x0002E0, "Member 'UHint_Sub::WBP_Tutorial_Controller_Wrapper' has a wrong offset!");

// Class UNION.Hint_Sub_ItemList
// 0x0030 (0x0358 - 0x0328)
class UHint_Sub_ItemList final : public UUnionUIInputWidget
{
public:
	TMulticastInlineDelegate<void()>              OnSubMenuPressBackKeyEvent;                        // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSubMenuPressTabRightKeyEvent;                    // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSubMenuPressTabLeftKeyEvent;                     // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Hint_Sub_ItemList">();
	}
	static class UHint_Sub_ItemList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHint_Sub_ItemList>();
	}
};
static_assert(alignof(UHint_Sub_ItemList) == 0x000008, "Wrong alignment on UHint_Sub_ItemList");
static_assert(sizeof(UHint_Sub_ItemList) == 0x000358, "Wrong size on UHint_Sub_ItemList");
static_assert(offsetof(UHint_Sub_ItemList, OnSubMenuPressBackKeyEvent) == 0x000328, "Member 'UHint_Sub_ItemList::OnSubMenuPressBackKeyEvent' has a wrong offset!");
static_assert(offsetof(UHint_Sub_ItemList, OnSubMenuPressTabRightKeyEvent) == 0x000338, "Member 'UHint_Sub_ItemList::OnSubMenuPressTabRightKeyEvent' has a wrong offset!");
static_assert(offsetof(UHint_Sub_ItemList, OnSubMenuPressTabLeftKeyEvent) == 0x000348, "Member 'UHint_Sub_ItemList::OnSubMenuPressTabLeftKeyEvent' has a wrong offset!");

// Class UNION.MachineCustomizeStickerSlotSelectState
// 0x0000 (0x00F8 - 0x00F8)
class UMachineCustomizeStickerSlotSelectState : public UMachineCustomizePage
{
public:
	void OnSetup();
	void OnSetupPage();
	void SetProperties();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeStickerSlotSelectState">();
	}
	static class UMachineCustomizeStickerSlotSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeStickerSlotSelectState>();
	}
};
static_assert(alignof(UMachineCustomizeStickerSlotSelectState) == 0x000008, "Wrong alignment on UMachineCustomizeStickerSlotSelectState");
static_assert(sizeof(UMachineCustomizeStickerSlotSelectState) == 0x0000F8, "Wrong size on UMachineCustomizeStickerSlotSelectState");

// Class UNION.HInt_Sub_List_Item
// 0x0000 (0x0480 - 0x0480)
class UHInt_Sub_List_Item final : public UUnionUIButtonBase
{
public:
	void SetupTipsButtonData(const struct FHintDataTableRow& InHintData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HInt_Sub_List_Item">();
	}
	static class UHInt_Sub_List_Item* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHInt_Sub_List_Item>();
	}
};
static_assert(alignof(UHInt_Sub_List_Item) == 0x000008, "Wrong alignment on UHInt_Sub_List_Item");
static_assert(sizeof(UHInt_Sub_List_Item) == 0x000480, "Wrong size on UHInt_Sub_List_Item");

// Class UNION.HInt_Sub_List
// 0x0058 (0x0380 - 0x0328)
class UHInt_Sub_List final : public UUnionUIInputWidget
{
public:
	TMulticastInlineDelegate<void(const EHintId nextHintId)> OnChangeTipsEvent;                      // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTipsSubMenuPressBackKeyEvent;                    // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTipsSubMenuPressTabRightKeyEvent;                // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTipsSubMenuPressTabLeftKeyEvent;                 // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FHintDataTableRow>              TipsDataArray;                                     // 0x0368(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeTipsScreen(EHintId nextHintId);
	bool GetDisplayInformation();
	int32 GetMaxDataNum();
	void OnListPressDawnKey();
	void OnListPressUpKey();
	void SetupHintList(TArray<struct FHintDataTableRow>* InTipsDataArray);
	void SetupScrollHintList();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HInt_Sub_List">();
	}
	static class UHInt_Sub_List* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHInt_Sub_List>();
	}
};
static_assert(alignof(UHInt_Sub_List) == 0x000008, "Wrong alignment on UHInt_Sub_List");
static_assert(sizeof(UHInt_Sub_List) == 0x000380, "Wrong size on UHInt_Sub_List");
static_assert(offsetof(UHInt_Sub_List, OnChangeTipsEvent) == 0x000328, "Member 'UHInt_Sub_List::OnChangeTipsEvent' has a wrong offset!");
static_assert(offsetof(UHInt_Sub_List, OnTipsSubMenuPressBackKeyEvent) == 0x000338, "Member 'UHInt_Sub_List::OnTipsSubMenuPressBackKeyEvent' has a wrong offset!");
static_assert(offsetof(UHInt_Sub_List, OnTipsSubMenuPressTabRightKeyEvent) == 0x000348, "Member 'UHInt_Sub_List::OnTipsSubMenuPressTabRightKeyEvent' has a wrong offset!");
static_assert(offsetof(UHInt_Sub_List, OnTipsSubMenuPressTabLeftKeyEvent) == 0x000358, "Member 'UHInt_Sub_List::OnTipsSubMenuPressTabLeftKeyEvent' has a wrong offset!");
static_assert(offsetof(UHInt_Sub_List, TipsDataArray) == 0x000368, "Member 'UHInt_Sub_List::TipsDataArray' has a wrong offset!");

// Class UNION.MachineCustomizeMachineSelectState
// 0x0000 (0x00F8 - 0x00F8)
class UMachineCustomizeMachineSelectState : public UMachineCustomizePage
{
public:
	void BindMachineTypeSelectWindow(class UMachineTypeScrollControl* InMachineTypeSelectWindow);
	void EventMachineIconSubsystem_OnIconCaptured(EMachineId InMachineID);
	void OnSetup();
	void SetProperties();
	void SetRacerHidden(bool IsHidden);
	void SetupFooter();
	void UnbindMachineTypeSelectWindow(class UMachineTypeScrollControl* InMachineTypeSelectWindow);
	void UpdateRacer(EMachineId InMachineID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeMachineSelectState">();
	}
	static class UMachineCustomizeMachineSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeMachineSelectState>();
	}
};
static_assert(alignof(UMachineCustomizeMachineSelectState) == 0x000008, "Wrong alignment on UMachineCustomizeMachineSelectState");
static_assert(sizeof(UMachineCustomizeMachineSelectState) == 0x0000F8, "Wrong size on UMachineCustomizeMachineSelectState");

// Class UNION.Hint_Sub_MainTab
// 0x0018 (0x02F8 - 0x02E0)
class UHint_Sub_MainTab final : public UUserWidget
{
public:
	TMulticastInlineDelegate<void(EHintTabID InTabID)> OnEventTabChange;                             // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UMenuInputRecieveObject*                MenuInputReceiveObject;                            // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Hint_Sub_MainTab">();
	}
	static class UHint_Sub_MainTab* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHint_Sub_MainTab>();
	}
};
static_assert(alignof(UHint_Sub_MainTab) == 0x000008, "Wrong alignment on UHint_Sub_MainTab");
static_assert(sizeof(UHint_Sub_MainTab) == 0x0002F8, "Wrong size on UHint_Sub_MainTab");
static_assert(offsetof(UHint_Sub_MainTab, OnEventTabChange) == 0x0002E0, "Member 'UHint_Sub_MainTab::OnEventTabChange' has a wrong offset!");
static_assert(offsetof(UHint_Sub_MainTab, MenuInputReceiveObject) == 0x0002F0, "Member 'UHint_Sub_MainTab::MenuInputReceiveObject' has a wrong offset!");

// Class UNION.HoldItem
// 0x0028 (0x02B8 - 0x0290)
class AHoldItem : public AActor
{
public:
	uint8                                         Pad_290[0x10];                                     // 0x0290(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionAtomComponent*                    UnionAtomComponent;                                // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ItemId;                                            // 0x02A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFromItemPool;                                   // 0x02A9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA[0x2];                                      // 0x02AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ADriver>                 OwnerDriver;                                       // 0x02AC(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Create(const struct FHoldItemCreateParam& Param);
	void Destroy();
	void PlayGetEffect();
	void PlayLuckyItemEffect();
	void PlayRareItemEffect();
	void PlayUseEffect();
	void PreCreate(const struct FHoldItemCreateParam& Param);
	void SetLightChannels(bool Channel0, bool Channel1, bool Channel2);

	class UMeshComponent* GetMeshComponent() const;
	bool IsWaitDestroy() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldItem">();
	}
	static class AHoldItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHoldItem>();
	}
};
static_assert(alignof(AHoldItem) == 0x000008, "Wrong alignment on AHoldItem");
static_assert(sizeof(AHoldItem) == 0x0002B8, "Wrong size on AHoldItem");
static_assert(offsetof(AHoldItem, UnionAtomComponent) == 0x0002A0, "Member 'AHoldItem::UnionAtomComponent' has a wrong offset!");
static_assert(offsetof(AHoldItem, ItemId) == 0x0002A8, "Member 'AHoldItem::ItemId' has a wrong offset!");
static_assert(offsetof(AHoldItem, bIsFromItemPool) == 0x0002A9, "Member 'AHoldItem::bIsFromItemPool' has a wrong offset!");
static_assert(offsetof(AHoldItem, OwnerDriver) == 0x0002AC, "Member 'AHoldItem::OwnerDriver' has a wrong offset!");

// Class UNION.MachineCustomizeUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UMachineCustomizeUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddFrontPartsById(EMachineId InMachineID);
	static void AddMachineParts(EMachineId InMachineID, EMachinePartsType InMachinePartsType);
	static void AddRearPartsById(EMachineId InMachineID);
	static void AddTirePartsById(EMachineId InMachineID);
	static int32 AttachGadgetToPlate(int32 InPlayerIndex, EGadgetId InGadgetId, int32 InSlotIndex);
	static bool CanUseGadgetFromSaveData(const EGadgetId InGadgetId);
	static int32 CheckCourseIconStickerCompleteAll();
	static bool CheckFrontPartsComplete(ECarStatusType InStatusType);
	static bool CheckPartsComplete(ECarStatusType InStatusType);
	static int32 CheckPartsCompleteAll();
	static bool CheckRearPartsComplete(ECarStatusType InStatusType);
	static bool CheckTirePartsComplete(ECarStatusType InStatusType);
	static void ConvertGadgetPlateUIDataToIds(const struct FGadgetPlateUIData& InPlateUIData, TArray<EGadgetId>* OutGadgetIds);
	static void ConvertGadgetPlateUIDataToSlotStates(const struct FGadgetPlateUIData& InPlateUIData, TArray<int32>* OutSlotStates);
	static void ConvertGadgetSlotIndexToLocation(int32 InSlotIndex, int32* OutSlotLocationX, int32* OutSlotLocationY);
	static int32 ConvertGadgetSlotLocationToIndex(int32 InSlotLocationX, int32 InSlotLocationY);
	static void ConvertGadgetSlotStatesToIds(const TArray<int32>& InSlotStates, TArray<EGadgetId>* OutGadgetIds);
	static void ConvertGadgetSlotStatesToPlateUIData(const TArray<int32>& InSlotStates, struct FGadgetPlateUIData* OutPlateUIData);
	static void ConvertUserGadgetPresetDataToSlotStates(const struct FUserGadgetPresetData& InUserGadgetPresetData, TArray<int32>* OutSlotStates);
	static void Debug_FillInMachineCustomizeData();
	static void Debug_StoreAllAura();
	static void Debug_StoreAllHorn();
	static void Debug_StoreAllMachineAssembly();
	static void Debug_StoreAllMachineParts();
	static void Debug_StoreAllSticker();
	static bool DebugOverwriteMachineColorDataTableRow(class UDataTable* DataTable, const class FName& RowName, const struct FMachineColorParam& RowData);
	static void DecrementSelectedGadgetPresetId(int32 InPlayerIndex);
	static void DisableCompleteMachineNewFlags();
	static void DisableDisplayedGadgetNewFlags();
	static bool DisableMachineColorPresetNewFlags();
	static bool DisablePartsListNewFlagByType(ECarStatusType InMachineType);
	static bool DisableStickerNewFlags();
	static bool GadgetPlateUIDataEquals(const struct FGadgetPlateUIData& InData0, const struct FGadgetPlateUIData& InData1);
	static int32 GetAllPartsAcquiredCount(ECarStatusType InStatusType);
	static int32 GetAssemblyMachinePartsNum(ECarStatusType InCarStatusType, EMachinePartsType InMachinePartsType);
	static void GetAttachableGadgetIds(int32 InSlotIndex, TArray<EGadgetId>* OutGadgetIds);
	static int32 GetAttachableGadgetSlotIndex(EGadgetId InGadgetId, int32 InSlotIndex);
	static void GetAttachGadgetToPlateMockup(int32 InPlayerIndex, EGadgetId InGadgetId, int32 InSlotIndex, int32* OutAttachableSlotIndex, struct FGadgetPlateUIData* OutResult);
	static bool GetAuraData(const class FText& InName, struct FAuraData* OutAuraData);
	static bool GetAuraDataForID(EMachineAuraId InAuraID, struct FAuraData* OutAuraData);
	static TSoftObjectPtr<class UTexture2D> GetBasicMachineIconTextureById(EMachineId InMachineID, bool bIsBig);
	static void GetBasicMachineIds(TArray<EMachineId>* OutMachineIds);
	static ECarStatusType GetCarStatusType(EMachineId InMachineID);
	static ELockType GetCustomMachineHornLockType(EMachineHornType InHornType);
	static bool GetCustomMachineHornNew(EMachineHornType InHornType);
	static void GetDebugGadgetPlateUIData(const TArray<EGadgetId>& InGadgetIds, struct FGadgetPlateUIData* OutPlateUIData);
	static void GetDefaultGadgetSlotStates(EGadgetPlateId InPlateId, TArray<int32>* OutSlotStates);
	static void GetDefaultMachineCustomizeData(ECarStatusType InMachineType, struct FUserMachineCustomizeData* OutCustomizeData);
	static int32 GetDefaultStickerColorId();
	static int32 GetDefaultStickerSurfaceId();
	static void GetEnableColorPresetIds(TArray<EMachineColorPresetId>* OutColorPresetIds);
	static void GetEnableColorPresetIgnoreGroupRaceIds(TArray<EMachineColorPresetId>* OutColorPresetIds);
	static void GetEnableMachineIds(TArray<EMachineId>* OutMachineIds);
	static TArray<struct FExtraStickerData> GetFrontExtraStickerData(EMachineId MachineId);
	static struct FVector GetFrontStickerInitialLocation(EMachineId MachineId);
	static struct FBox2D GetFrontStickerMoveRange(EMachineId MachineId);
	static class UTexture2D* GetFrontStickerUVTexture(EMachineId MachineId);
	static int32 GetFullDesignStickerColorId();
	static int32 GetFullDesignStickerSurfaceId();
	static int32 GetGadgetCost(const EGadgetId InGadgetId);
	static void GetGadgetCustomCategoryData(EGadgetCategory InCategory, struct FGadgetCustomCategoryColor* OutCategoryData);
	static bool GetGadgetData(const EGadgetId InGadgetId, struct FGadgetData* OutGadgetData);
	static void GetGadgetDataList(TArray<struct FGadgetData>* OutGadgetDataList);
	static int32 GetGadgetFragmentNum();
	static EGadgetPlateFromState GetGadgetFromState();
	static int32 GetGadgetNum(EGadgetId InGadgetId);
	static void GetGadgetPlateData(EGadgetPlateId InGadgetPlateId, struct FGadgetPlateData* OutGadgetPlateData);
	static void GetGadgetPlateDataList(TArray<struct FGadgetPlateData>* OutGadgetPlateDataList);
	static int32 GetGadgetPlateGaugeBaseValue(const EGadgetPlateId InPlateId, int32 InRaceCount);
	static EGadgetPlateId GetGadgetPlateId(const int32 InTotalRaceCount);
	static EGadgetPlateId GetGadgetPlateIdFromTotalGadgetCost(const int32 InGadgetTotalCost);
	static EGadgetPlateId GetGadgetPlateIdFromTotalRaceCount();
	static int32 GetGadgetPlateSizeX();
	static int32 GetGadgetPlateSizeY();
	static void GetGadgetPlateUIData(int32 InPlayerIndex, int32 InGadgetPresetIndex, struct FGadgetPlateUIData* outGadgetPlateUIData);
	static bool GetGadgetSaveData(const EGadgetId InGadgetId, struct FUserItemProperty* OutGadgetSaveData);
	static int32 GetGadgetSelectWindowSizeX();
	static int32 GetGadgetSelectWindowSizeY();
	static int32 GetGadgetSlotStateFilled();
	static int32 GetGadgetSlotStateLocked();
	static void GetGadgetUIData(EGadgetId InGadgetId, struct FGadgetUIData* OutGadgetUIData);
	static void GetGadgetUIData2(EGadgetId InGadgetId, struct FGadgetUIData2* OutGadgetUIData);
	static void GetGadgetUIDataList(TArray<struct FGadgetUIData>* OutGadgetUIDataList);
	static void GetGadgetUIDataList2(TArray<struct FGadgetUIData2>* OutGadgetUIDataList);
	static void GetGadgetUIDataList2Layout(TArray<struct FGadgetUIData2>* OutDataList);
	static bool GetHornData(const class FText& InName, struct FHornData* OutHornData);
	static bool GetHornDataForID(EMachineHornType InHornID, struct FHornData* OutHornData);
	static void GetMachineColorAreaSettingUIData(const struct FUserMachineCustomizeData& InCustomizeData, const struct FMachineColorAreaTextUIData& InTextData, struct FMachineColorAreaSettingUIData* OutUIData);
	static void GetMachineColorById(int32 InMachineColorId, struct FLinearColor* OutMachineColor);
	static void GetMachineColorNameById(int32 InMachineColorId, class FText* OutMachineColorName);
	static void GetMachineColorSelectDataList(TArray<struct FMachineColorSelectData>* OutMachineColorSelectDataList);
	static void GetMachineCustomizeDataById(EMachineId InMachineID, struct FUserMachineCustomizeData* OutUserMachineCustomizeData);
	static void GetMachineCustomizeDataDebugStr(const struct FUserMachineCustomizeData& InMachineCustomizeData, class FString* OutDebugStr);
	static void GetMachineCustomizeTabNewFlags(ECarStatusType InMachineType, TArray<bool>* bTabNewStates);
	static void GetMachineGlowById(int32 InMachineGlowId, struct FLinearColor* OutMachineGlow);
	static void GetMachineGlowNameById(int32 InMachineGlowId, class FText* OutMachineGlowName);
	static void GetMachineGlowSelectDataList(TArray<struct FMachineGlowSelectData>* OutMachineGlowSelectDataList);
	static void GetMachineIdsCarStatusTypeEqualList(const TArray<EMachineId>& InMachineIds, ECarStatusType InCarStatusType, TArray<EMachineId>* OutMachineIds);
	static void GetMachineName(EMachineId InFrontPartsId, EMachineId InRearPartsId, class FText* OutMachineName);
	static void GetMachineNameById(EMachineId InMachineID, class FText* OutMachineName);
	static void GetMachinePartsDataById(EMachineId InMachineID, struct FMachinePartsData* OutMachinePartsData);
	static void GetMachinePartsStickerUIDataList(EMachineId InMachineID, EMachinePartsType InMachinePartsType, TArray<struct FStickerUIData>* OutStickerUIDataList);
	static void GetMachineSurfaceNameById(int32 InMachineSurfaceId, class FText* OutMachineSurfaceName);
	static void GetMachineSurfaceSelectDataList(TArray<struct FMachineSurfaceSelectData>* OutMachineSurfaceSelectDataList);
	static void GetMachineTypeName(ECarStatusType InMachineType, class FText* OutName);
	static void GetMachineTypeNameByMachineId(EMachineId InMachineID, class FText* OutName);
	static int32 GetMaxGadgetNum();
	static int32 GetMaxGadgetPresetIndex();
	static int32 GetMaxGadgetPresetNum();
	static EGadgetPlateId GetNextGadgetPlateId(const EGadgetPlateId InPlateId);
	static int32 GetNextGadgetPlateIdRaceCount(EGadgetPlateId InEGadgetPlateId, int32 InRaceCount, class UDataTable* GadgetPlateDataTable);
	static int32 GetNextGadgetPlateRaceNum();
	static EGadgetPlateId GetNormalGadgetPlateMaxId();
	static void GetPlaceableGadgetIds(EGadgetPlateId InPlateId, int32 InSlotIndex, TArray<EGadgetId>* OutGadgetIds);
	static TArray<struct FExtraStickerData> GetRearExtraStickerData(EMachineId MachineId);
	static struct FVector GetRearStickerInitialLocation(EMachineId MachineId);
	static struct FBox2D GetRearStickerMoveRange(EMachineId MachineId);
	static class UTexture2D* GetRearStickerUVTexture(EMachineId MachineId);
	static int32 GetRemainingRaceNumToGadgetPlate(int32 InSlotIndex);
	static EGadgetPlateId GetRentalGadgetPlateId();
	static int32 GetRequiredGadgetFragmentNum();
	static void GetSelectableMachineColorPresets(TArray<struct FMachineColorPresetUIData>* OutPresets);
	static void GetSelectableMachineIds(ECarStatusType InMachineType, bool bInIncludeBasicMachines, bool bInIncludeUnusedCustomMachines, bool bInIncludeSimpleCustomMachines, int32 InPlayerIndex, TArray<EMachineId>* OutMachineIds);
	static int32 GetSelectableMachineIndex(ECarStatusType InMachineType, EMachineId InMachineID, bool bInIncludeBasicMachines, bool bInIncludeUnusedCustomMachines, bool bInIncludeSimpleCustomMachines, int32 InPlayerIndex);
	static void GetSelectedGadgetIds(int32 InPlayerIndex, TArray<EGadgetId>* OutGadgetIds);
	static void GetSelectedGadgetPlateUIData(int32 InPlayerIndex, struct FGadgetPlateUIData* outGadgetPlateUIData);
	static float GetStickerBaseInitSize();
	static float GetStickerBaseInsideSize();
	static float GetStickerBaseOutsideSize();
	static void GetStickerUIData(int32 InStickerId, struct FStickerUIData* OutStickerUIData);
	static void GetStickerUIDataList(TArray<struct FStickerUIData>* OutStickerUIDataList);
	static int32 GetUsedCustomMachineNum();
	static void GetVisibleGadgetIdsToGadgetCustomWindow(TArray<EGadgetId>* OutGadgetIds);
	static void GetVisibleGadgetIdsToGadgetPlate(TArray<EGadgetId>* OutGadgetIds);
	static void GetWirelessLobbyGadgetIds(const int32 InPlayerIndex, TArray<EGadgetId>* OutGadgetIds);
	static void GiveGadget(const EGadgetId InGadgetId);
	static void GiveSticker(int32 InStickerId);
	static bool HasAnyGadgets();
	static bool HasEnoughGadgetFragments();
	static void IncrementSelectedGadgetPresetId(int32 InPlayerIndex);
	static void InitMachineAssemblyData();
	static void InitMachineAssemblyDataGadgetList();
	static void InitMachineAssemblyDataGadgetPlatePreset();
	static void IntegrityCheckMachineAssemblyDataGadgetList();
	static bool IsAttachableGadgetId(const struct FGadgetPlateUIData& InGadgetPresetData, const EGadgetId& InGadgetId, const int32 InSlotIndex);
	static bool IsGadgetKit(const EGadgetCategory InGadgetCategory);
	static bool IsMachineIdOfCarStatusTypeId(EMachineId InMachineID, ECarStatusType InCarStatusType);
	static bool IsMachineNew(EMachineId InMachineID);
	static bool IsMaxLevelGadgetPlateId(const EGadgetPlateId InPlateId);
	static bool IsPossibleMachineCustomizeByAssemblyMachineParts();
	static bool IsStickerChanged(const TArray<struct FUserStickerData>& InPrevStickerDataList, const TArray<struct FUserStickerData>& InCurrentStickerDataList);
	static bool IsValidMachineCustomizeData(EMachineId InMachineID);
	static void LoadFrontPartsById(EMachineId InMachineID, struct FMachinePartsUIData* OutFrontPartsUIData);
	static void LoadRearPartsById(EMachineId InMachineID, struct FMachinePartsUIData* OutRearPartsUIData);
	static void LoadTirePartsById(EMachineId InMachineID, struct FMachinePartsUIData* OutTirePartsUIData);
	static void LockGadget(const EGadgetId InGadgetId);
	static void LockGadgetAll();
	static bool MachineCustomizeDataEquals(const struct FUserMachineCustomizeData& InData0, const struct FUserMachineCustomizeData& InData1);
	static bool NewGadgetExists();
	static bool NewMachineAuraExists();
	static bool NewMachineColorPresetExists();
	static bool NewMachineHornExists();
	static bool NewMachinePartsExists(ECarStatusType InMachineType);
	static bool NewMachineRandomElementExists();
	static bool NewMachineStickerExists();
	static struct FUserMachineCustomizeData SetAllMachineColorsAsDefault(EMachineId InMachineID, const struct FUserMachineCustomizeData& InMachineCustomizeData);
	static struct FUserMachineCustomizeData SetAllMachineColorsAsPreset(EMachineColorPresetId InMachineColorPresetId, const struct FUserMachineCustomizeData& InMachineCustomizeData);
	static struct FUserMachineCustomizeData SetAllMachineColorsByMode(const struct FUserMachineCustomizeData& InMachineCustomizeData);
	static void SetCurrentGadgetPlateIdUseId(EGadgetPlateId plateId);
	static void SetCustomMachineHornLockType(EMachineHornType InHornType, ELockType InLockType);
	static void SetCustomMachineHornNew(EMachineHornType InHornType, bool IsFlag);
	static void SetGadgetFragmentNum(int32 InGadgetFragmentNum);
	static void SetGadgetFromState(EGadgetPlateFromState InState);
	static void SetGadgetNum(EGadgetId InGadgetId, int32 InGadgetNum);
	static void SetGadgetPlateUIData(int32 InPlayerIndex, int32 InGadgetPresetIndex, const struct FGadgetPlateUIData& InGadgetPlateUIData);
	static void SetMachineCustomizeDataById(EMachineId InMachineID, const struct FUserMachineCustomizeData& InUserMachineCustomizeData);
	static void SetSelectedGadgetPlateUIData(int32 InPlayerIndex, const struct FGadgetPlateUIData& InGadgetPlateUIData);
	static void SetSelectedGadgetPresetId(const int32 InPlayerIndex, const int32 InPresetIndex);
	static void SortStickerData(TArray<struct FStickerSortData>* OutStickerSortedData, bool IsAscendingOrder);
	static void StoreAllAura();
	static void StoreAllHorn();
	static void StoreAllMachineAssembly();
	static void StoreAllMachineParts();
	static void StoreAllSticker();
	static void UnlockGadgetAll();
	static void UnlockMachinePresetColor(EMachineId InMachineID);
	static void UpdateChallengeMachineParts(ECarStatusType InStatusType);
	static void UpdateGadgetSlotNumInUserData();
	static void UpdateMachineAssemblyData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeUtilityLibrary">();
	}
	static class UMachineCustomizeUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeUtilityLibrary>();
	}
};
static_assert(alignof(UMachineCustomizeUtilityLibrary) == 0x000008, "Wrong alignment on UMachineCustomizeUtilityLibrary");
static_assert(sizeof(UMachineCustomizeUtilityLibrary) == 0x000028, "Wrong size on UMachineCustomizeUtilityLibrary");

// Class UNION.HoldItemAnimator
// 0x0000 (0x0000 - 0x0000)
class IHoldItemAnimator final
{
public:
	void Reset();
	void SetVisibility(const EHoldItemVisibility NewVisibility);
	void Use();

	EHoldItemVisibility GetVisibility() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldItemAnimator">();
	}
	static class IHoldItemAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<IHoldItemAnimator>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IHoldItemAnimator) == 0x000001, "Wrong alignment on IHoldItemAnimator");
static_assert(sizeof(IHoldItemAnimator) == 0x000001, "Wrong size on IHoldItemAnimator");

// Class UNION.HoldItemAnimInstance
// 0x0070 (0x03E0 - 0x0370)
class UHoldItemAnimInstance : public UAnimInstance
{
public:
	TScriptInterface<class IHoldItemAnimator>     HoldItemAnimator;                                  // 0x0368(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnActivateItem;                                    // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bDestroyAtEndAnimation;                            // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_389[0x3];                                      // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemainingUses;                                     // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_390[0x50];                                     // 0x0390(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsUsed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldItemAnimInstance">();
	}
	static class UHoldItemAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHoldItemAnimInstance>();
	}
};
static_assert(alignof(UHoldItemAnimInstance) == 0x000010, "Wrong alignment on UHoldItemAnimInstance");
static_assert(sizeof(UHoldItemAnimInstance) == 0x0003E0, "Wrong size on UHoldItemAnimInstance");
static_assert(offsetof(UHoldItemAnimInstance, HoldItemAnimator) == 0x000368, "Member 'UHoldItemAnimInstance::HoldItemAnimator' has a wrong offset!");
static_assert(offsetof(UHoldItemAnimInstance, OnActivateItem) == 0x000378, "Member 'UHoldItemAnimInstance::OnActivateItem' has a wrong offset!");
static_assert(offsetof(UHoldItemAnimInstance, bDestroyAtEndAnimation) == 0x000388, "Member 'UHoldItemAnimInstance::bDestroyAtEndAnimation' has a wrong offset!");
static_assert(offsetof(UHoldItemAnimInstance, RemainingUses) == 0x00038C, "Member 'UHoldItemAnimInstance::RemainingUses' has a wrong offset!");

// Class UNION.MachineHornComponent
// 0x00E0 (0x0180 - 0x00A0)
class UMachineHornComponent final : public UActorComponent
{
public:
	class UNiagaraSystem*                         MachineHornNiagara;                                // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundAtomCue*                          MachineHornSound;                                  // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        MachineHornToAttach;                               // 0x00B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AttachPointName;                                   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNiagaraComponent*                      MachineNiagaraHornComponent;                       // 0x00C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MachineHornEffectParam;                            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttachOffsetLocation;                              // 0x00D0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               AttachOffsetRot;                                   // 0x00E8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x8];                                      // 0x0100(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMenuInputRecieveObject*                MenuInputReceiveObject;                            // 0x0108(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x70];                                     // 0x0110(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindHornInput();
	void OnMenuInputPlayMachineHorn();
	void OnMenuInputPlayMachineHornObject(class UObject* Object);
	void PlayMachineHorn();
	void SetAttachHornToMachineData(class USceneComponent* InHornToAttach, ECarStatusType InCarType);
	void SetAttachOffset(const struct FVector& InOffsetLocation, const struct FRotator& InOffsetRot);
	void SetAttachOffsetFromCarType(ECarStatusType InCarType);
	void SetHornData(EMachineHornType InHornType);
	void SetHornEnable(bool bIsEnable);
	void SetMachineHornSoundPan(ESoundPan InSoundPan);
	void UnBindHornInput();

	bool IsEnableHorn() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineHornComponent">();
	}
	static class UMachineHornComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineHornComponent>();
	}
};
static_assert(alignof(UMachineHornComponent) == 0x000008, "Wrong alignment on UMachineHornComponent");
static_assert(sizeof(UMachineHornComponent) == 0x000180, "Wrong size on UMachineHornComponent");
static_assert(offsetof(UMachineHornComponent, MachineHornNiagara) == 0x0000A0, "Member 'UMachineHornComponent::MachineHornNiagara' has a wrong offset!");
static_assert(offsetof(UMachineHornComponent, MachineHornSound) == 0x0000A8, "Member 'UMachineHornComponent::MachineHornSound' has a wrong offset!");
static_assert(offsetof(UMachineHornComponent, MachineHornToAttach) == 0x0000B0, "Member 'UMachineHornComponent::MachineHornToAttach' has a wrong offset!");
static_assert(offsetof(UMachineHornComponent, AttachPointName) == 0x0000B8, "Member 'UMachineHornComponent::AttachPointName' has a wrong offset!");
static_assert(offsetof(UMachineHornComponent, MachineNiagaraHornComponent) == 0x0000C0, "Member 'UMachineHornComponent::MachineNiagaraHornComponent' has a wrong offset!");
static_assert(offsetof(UMachineHornComponent, MachineHornEffectParam) == 0x0000C8, "Member 'UMachineHornComponent::MachineHornEffectParam' has a wrong offset!");
static_assert(offsetof(UMachineHornComponent, AttachOffsetLocation) == 0x0000D0, "Member 'UMachineHornComponent::AttachOffsetLocation' has a wrong offset!");
static_assert(offsetof(UMachineHornComponent, AttachOffsetRot) == 0x0000E8, "Member 'UMachineHornComponent::AttachOffsetRot' has a wrong offset!");
static_assert(offsetof(UMachineHornComponent, MenuInputReceiveObject) == 0x000108, "Member 'UMachineHornComponent::MenuInputReceiveObject' has a wrong offset!");

// Class UNION.RaceSequenceStateTermination
// 0x0008 (0x0118 - 0x0110)
class URaceSequenceStateTermination : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndTerminationState();
	void OnRaceTermination();
	void RequestQuitLobbyNative();

	EGameModeId GetNextGameMode() const;
	int32 GetReservedExitCode() const;
	class AHierarchicalStateMachine* GetRootStateMachine() const;
	bool IsBackToMenu() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateTermination">();
	}
	static class URaceSequenceStateTermination* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateTermination>();
	}
};
static_assert(alignof(URaceSequenceStateTermination) == 0x000008, "Wrong alignment on URaceSequenceStateTermination");
static_assert(sizeof(URaceSequenceStateTermination) == 0x000118, "Wrong size on URaceSequenceStateTermination");

// Class UNION.HoldItemBlackBombComponent
// 0x0030 (0x00D0 - 0x00A0)
class UHoldItemBlackBombComponent final : public UActorComponent
{
public:
	class UCurveFloat*                            ExpansionEffectCurve;                              // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      ExpansionColor;                                    // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             DefaultMaterials;                                  // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TargetMaterial;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Setup();
	void Update(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldItemBlackBombComponent">();
	}
	static class UHoldItemBlackBombComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHoldItemBlackBombComponent>();
	}
};
static_assert(alignof(UHoldItemBlackBombComponent) == 0x000008, "Wrong alignment on UHoldItemBlackBombComponent");
static_assert(sizeof(UHoldItemBlackBombComponent) == 0x0000D0, "Wrong size on UHoldItemBlackBombComponent");
static_assert(offsetof(UHoldItemBlackBombComponent, ExpansionEffectCurve) == 0x0000A0, "Member 'UHoldItemBlackBombComponent::ExpansionEffectCurve' has a wrong offset!");
static_assert(offsetof(UHoldItemBlackBombComponent, ExpansionColor) == 0x0000A8, "Member 'UHoldItemBlackBombComponent::ExpansionColor' has a wrong offset!");
static_assert(offsetof(UHoldItemBlackBombComponent, DefaultMaterials) == 0x0000B0, "Member 'UHoldItemBlackBombComponent::DefaultMaterials' has a wrong offset!");
static_assert(offsetof(UHoldItemBlackBombComponent, TargetMaterial) == 0x0000C0, "Member 'UHoldItemBlackBombComponent::TargetMaterial' has a wrong offset!");

// Class UNION.RaceSequenceStateResultRival
// 0x0030 (0x0140 - 0x0110)
class URaceSequenceStateResultRival : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AVehicleInRacePawn*                     RivalVehicle;                                      // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ADriver*                                RivalDriver;                                       // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlayerIsTop;                                      // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRivalIsTop;                                       // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPerformRivalOutcome                          RivalOutcome;                                      // 0x012A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDriverId                                     RivalDriverId;                                     // 0x012B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RivalLevel;                                        // 0x012C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ERivalType                                    RivalType;                                         // 0x0130(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         SpeedClassRivalLevel;                              // 0x0131(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonRivalLevelWidget*                RivalLevelWidget;                                  // 0x0138(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool IsBonusUpChallenge();
	bool IsPowerRival();

	float PlayRivalVoice(const EDriverId RivalDriverId_0, const EPerformRivalOutcome RivalOutcome_0, const bool bFinalRace) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateResultRival">();
	}
	static class URaceSequenceStateResultRival* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateResultRival>();
	}
};
static_assert(alignof(URaceSequenceStateResultRival) == 0x000008, "Wrong alignment on URaceSequenceStateResultRival");
static_assert(sizeof(URaceSequenceStateResultRival) == 0x000140, "Wrong size on URaceSequenceStateResultRival");
static_assert(offsetof(URaceSequenceStateResultRival, RivalVehicle) == 0x000118, "Member 'URaceSequenceStateResultRival::RivalVehicle' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateResultRival, RivalDriver) == 0x000120, "Member 'URaceSequenceStateResultRival::RivalDriver' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateResultRival, bPlayerIsTop) == 0x000128, "Member 'URaceSequenceStateResultRival::bPlayerIsTop' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateResultRival, bRivalIsTop) == 0x000129, "Member 'URaceSequenceStateResultRival::bRivalIsTop' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateResultRival, RivalOutcome) == 0x00012A, "Member 'URaceSequenceStateResultRival::RivalOutcome' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateResultRival, RivalDriverId) == 0x00012B, "Member 'URaceSequenceStateResultRival::RivalDriverId' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateResultRival, RivalLevel) == 0x00012C, "Member 'URaceSequenceStateResultRival::RivalLevel' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateResultRival, RivalType) == 0x000130, "Member 'URaceSequenceStateResultRival::RivalType' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateResultRival, SpeedClassRivalLevel) == 0x000131, "Member 'URaceSequenceStateResultRival::SpeedClassRivalLevel' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateResultRival, RivalLevelWidget) == 0x000138, "Member 'URaceSequenceStateResultRival::RivalLevelWidget' has a wrong offset!");

// Class UNION.HoldItemPackageRingComponent
// 0x0000 (0x00A0 - 0x00A0)
class UHoldItemPackageRingComponent final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldItemPackageRingComponent">();
	}
	static class UHoldItemPackageRingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHoldItemPackageRingComponent>();
	}
};
static_assert(alignof(UHoldItemPackageRingComponent) == 0x000008, "Wrong alignment on UHoldItemPackageRingComponent");
static_assert(sizeof(UHoldItemPackageRingComponent) == 0x0000A0, "Wrong size on UHoldItemPackageRingComponent");

// Class UNION.MachineBehaviorParameterDataAsset
// 0x0190 (0x01C0 - 0x0030)
class UMachineBehaviorParameterDataAsset final : public UDataAsset
{
public:
	TMap<ESpeedClassId, struct FVector2f>         SpeedRange;                                        // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ESpeedClassId, struct FVector2f>         SplashOfWaterSpeedRange;                           // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         HitTrackWallIntervalTime;                          // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitTrackWallLowerSpeed;                            // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionIntervalTime;                              // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlipStreamAvailableTime;                           // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunEffectLowerSpeed;                               // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpLowerLimit;                                    // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceLowerLimit;                                  // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassedFollowingBoostAvailableTime;                 // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeMonsterTruckCompletedTime;                   // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoalResultCameraPlaybackDelayTime;                 // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoalActionDelayTime;                               // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoverboardRollLimit;                               // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarrelRollAnimationPlayRate;                       // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ECarStatusType, struct FVector2f>        ShuntPower;                                        // 0x0108(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         BoostLevelMin;                                     // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostLevelMax;                                     // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECarStatusType, struct FTransform>       BodyCutOffsetTransform;                            // 0x0160(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         ActivateTireUnitDelayTime;                         // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivateBoatUnitDelayTime;                         // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivateFlightUnitDelayTime;                       // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineBehaviorParameterDataAsset">();
	}
	static class UMachineBehaviorParameterDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineBehaviorParameterDataAsset>();
	}
};
static_assert(alignof(UMachineBehaviorParameterDataAsset) == 0x000008, "Wrong alignment on UMachineBehaviorParameterDataAsset");
static_assert(sizeof(UMachineBehaviorParameterDataAsset) == 0x0001C0, "Wrong size on UMachineBehaviorParameterDataAsset");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, SpeedRange) == 0x000030, "Member 'UMachineBehaviorParameterDataAsset::SpeedRange' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, SplashOfWaterSpeedRange) == 0x000080, "Member 'UMachineBehaviorParameterDataAsset::SplashOfWaterSpeedRange' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, HitTrackWallIntervalTime) == 0x0000D0, "Member 'UMachineBehaviorParameterDataAsset::HitTrackWallIntervalTime' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, HitTrackWallLowerSpeed) == 0x0000D4, "Member 'UMachineBehaviorParameterDataAsset::HitTrackWallLowerSpeed' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, ReactionIntervalTime) == 0x0000D8, "Member 'UMachineBehaviorParameterDataAsset::ReactionIntervalTime' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, SlipStreamAvailableTime) == 0x0000DC, "Member 'UMachineBehaviorParameterDataAsset::SlipStreamAvailableTime' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, RunEffectLowerSpeed) == 0x0000E0, "Member 'UMachineBehaviorParameterDataAsset::RunEffectLowerSpeed' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, JumpLowerLimit) == 0x0000E4, "Member 'UMachineBehaviorParameterDataAsset::JumpLowerLimit' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, BounceLowerLimit) == 0x0000E8, "Member 'UMachineBehaviorParameterDataAsset::BounceLowerLimit' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, PassedFollowingBoostAvailableTime) == 0x0000EC, "Member 'UMachineBehaviorParameterDataAsset::PassedFollowingBoostAvailableTime' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, ChangeMonsterTruckCompletedTime) == 0x0000F0, "Member 'UMachineBehaviorParameterDataAsset::ChangeMonsterTruckCompletedTime' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, GoalResultCameraPlaybackDelayTime) == 0x0000F4, "Member 'UMachineBehaviorParameterDataAsset::GoalResultCameraPlaybackDelayTime' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, GoalActionDelayTime) == 0x0000F8, "Member 'UMachineBehaviorParameterDataAsset::GoalActionDelayTime' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, HoverboardRollLimit) == 0x0000FC, "Member 'UMachineBehaviorParameterDataAsset::HoverboardRollLimit' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, BarrelRollAnimationPlayRate) == 0x000100, "Member 'UMachineBehaviorParameterDataAsset::BarrelRollAnimationPlayRate' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, ShuntPower) == 0x000108, "Member 'UMachineBehaviorParameterDataAsset::ShuntPower' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, BoostLevelMin) == 0x000158, "Member 'UMachineBehaviorParameterDataAsset::BoostLevelMin' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, BoostLevelMax) == 0x00015C, "Member 'UMachineBehaviorParameterDataAsset::BoostLevelMax' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, BodyCutOffsetTransform) == 0x000160, "Member 'UMachineBehaviorParameterDataAsset::BodyCutOffsetTransform' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, ActivateTireUnitDelayTime) == 0x0001B0, "Member 'UMachineBehaviorParameterDataAsset::ActivateTireUnitDelayTime' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, ActivateBoatUnitDelayTime) == 0x0001B4, "Member 'UMachineBehaviorParameterDataAsset::ActivateBoatUnitDelayTime' has a wrong offset!");
static_assert(offsetof(UMachineBehaviorParameterDataAsset, ActivateFlightUnitDelayTime) == 0x0001B8, "Member 'UMachineBehaviorParameterDataAsset::ActivateFlightUnitDelayTime' has a wrong offset!");

// Class UNION.HoldItemPoolAccessor
// 0x0000 (0x0000 - 0x0000)
class IHoldItemPoolAccessor final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldItemPoolAccessor">();
	}
	static class IHoldItemPoolAccessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<IHoldItemPoolAccessor>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IHoldItemPoolAccessor) == 0x000001, "Wrong alignment on IHoldItemPoolAccessor");
static_assert(sizeof(IHoldItemPoolAccessor) == 0x000001, "Wrong size on IHoldItemPoolAccessor");

// Class UNION.HoldItemPoolDataAsset
// 0x0050 (0x0080 - 0x0030)
class UHoldItemPoolDataAsset final : public UDataAsset
{
public:
	TMap<EHoldItemMeshType, EItemId>              PoolItemMap;                                       // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldItemPoolDataAsset">();
	}
	static class UHoldItemPoolDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHoldItemPoolDataAsset>();
	}
};
static_assert(alignof(UHoldItemPoolDataAsset) == 0x000008, "Wrong alignment on UHoldItemPoolDataAsset");
static_assert(sizeof(UHoldItemPoolDataAsset) == 0x000080, "Wrong size on UHoldItemPoolDataAsset");
static_assert(offsetof(UHoldItemPoolDataAsset, PoolItemMap) == 0x000030, "Member 'UHoldItemPoolDataAsset::PoolItemMap' has a wrong offset!");

// Class UNION.MachineCustomTab
// 0x0038 (0x0318 - 0x02E0)
class UMachineCustomTab : public UUserWidget
{
public:
	class UHorizontalBox*                         TabList;                                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EMachineCustomizeTabID InTabID)> OnEventTabChange;                 // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FMachineCustomizeTabParameter>  Parameter;                                         // 0x02F8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMenuInputRecieveObject*                MenuInputReceiveObject;                            // 0x0308(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeregistInputReceiver();
	void OnLShoulderPressed(class UObject* Object);
	void OnRShoulderPressed(class UObject* Object);
	void OnTabPressed(EMachineCustomizeTabID InTabID);
	void PlaySE();
	void RegistInputReceiver();
	void SetEnable(int32 InIndex, bool IsEnable);
	void SetEnableAll(bool IsEnable);
	void SetNewIcon(int32 InIndex, bool InNewFlag);
	void SetNewIconAll(const TArray<bool>& InNewFlag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomTab">();
	}
	static class UMachineCustomTab* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomTab>();
	}
};
static_assert(alignof(UMachineCustomTab) == 0x000008, "Wrong alignment on UMachineCustomTab");
static_assert(sizeof(UMachineCustomTab) == 0x000318, "Wrong size on UMachineCustomTab");
static_assert(offsetof(UMachineCustomTab, TabList) == 0x0002E0, "Member 'UMachineCustomTab::TabList' has a wrong offset!");
static_assert(offsetof(UMachineCustomTab, OnEventTabChange) == 0x0002E8, "Member 'UMachineCustomTab::OnEventTabChange' has a wrong offset!");
static_assert(offsetof(UMachineCustomTab, Parameter) == 0x0002F8, "Member 'UMachineCustomTab::Parameter' has a wrong offset!");
static_assert(offsetof(UMachineCustomTab, MenuInputReceiveObject) == 0x000308, "Member 'UMachineCustomTab::MenuInputReceiveObject' has a wrong offset!");

// Class UNION.HoldItemPool
// 0x0230 (0x0258 - 0x0028)
class UHoldItemPool final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 HoldItemSTMClass;                                  // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UClass*                                 HoldItemSKMClass;                                  // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UClass*                                 HoldItemVATClass;                                  // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AHoldItem*>                      PooledItem;                                        // 0x0050(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x1F8];                                     // 0x0060(0x01F8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldItemPool">();
	}
	static class UHoldItemPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHoldItemPool>();
	}
};
static_assert(alignof(UHoldItemPool) == 0x000008, "Wrong alignment on UHoldItemPool");
static_assert(sizeof(UHoldItemPool) == 0x000258, "Wrong size on UHoldItemPool");
static_assert(offsetof(UHoldItemPool, HoldItemSTMClass) == 0x000038, "Member 'UHoldItemPool::HoldItemSTMClass' has a wrong offset!");
static_assert(offsetof(UHoldItemPool, HoldItemSKMClass) == 0x000040, "Member 'UHoldItemPool::HoldItemSKMClass' has a wrong offset!");
static_assert(offsetof(UHoldItemPool, HoldItemVATClass) == 0x000048, "Member 'UHoldItemPool::HoldItemVATClass' has a wrong offset!");
static_assert(offsetof(UHoldItemPool, PooledItem) == 0x000050, "Member 'UHoldItemPool::PooledItem' has a wrong offset!");

// Class UNION.SaveDataSetting
// 0x0078 (0x0308 - 0x0290)
class ASaveDataSetting : public AActor
{
public:
	TMulticastInlineDelegate<void(bool bSuccess)> ConfigDataResultDelegate;                          // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool bSuccess)> AppDataResultDelegate;                             // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool bSuccess)> PlayLogDataResultDelegate;                         // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool bSuccess)> ReplayDataResultDelegate;                          // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool bSuccess)> NetDataResultDelegate;                             // 0x02D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UWorld>                  ReloadLevel;                                       // 0x02E0(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool InitAppData();
	bool InitConfigData();
	bool InitNetData();
	bool InitPlayLogData();
	bool InitReplayData();
	void OnAppDataLoadComplete(ESaveDataStatus Status);
	void OnAppDataSaveComplete(ESaveDataStatus Status);
	void OnConfigDataLoadComplete(ESaveDataStatus Status);
	void OnConfigDataSaveComplete(ESaveDataStatus Status);
	void OnNetDataLoadComplete(ESaveDataStatus Status);
	void OnNetDataSaveComplete(ESaveDataStatus Status);
	void OnPlayLogDataSaveComplete(ESaveDataStatus Status);
	void OnReplayDataSaveComplete(ESaveDataStatus Status);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveDataSetting">();
	}
	static class ASaveDataSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASaveDataSetting>();
	}
};
static_assert(alignof(ASaveDataSetting) == 0x000008, "Wrong alignment on ASaveDataSetting");
static_assert(sizeof(ASaveDataSetting) == 0x000308, "Wrong size on ASaveDataSetting");
static_assert(offsetof(ASaveDataSetting, ConfigDataResultDelegate) == 0x000290, "Member 'ASaveDataSetting::ConfigDataResultDelegate' has a wrong offset!");
static_assert(offsetof(ASaveDataSetting, AppDataResultDelegate) == 0x0002A0, "Member 'ASaveDataSetting::AppDataResultDelegate' has a wrong offset!");
static_assert(offsetof(ASaveDataSetting, PlayLogDataResultDelegate) == 0x0002B0, "Member 'ASaveDataSetting::PlayLogDataResultDelegate' has a wrong offset!");
static_assert(offsetof(ASaveDataSetting, ReplayDataResultDelegate) == 0x0002C0, "Member 'ASaveDataSetting::ReplayDataResultDelegate' has a wrong offset!");
static_assert(offsetof(ASaveDataSetting, NetDataResultDelegate) == 0x0002D0, "Member 'ASaveDataSetting::NetDataResultDelegate' has a wrong offset!");
static_assert(offsetof(ASaveDataSetting, ReloadLevel) == 0x0002E0, "Member 'ASaveDataSetting::ReloadLevel' has a wrong offset!");

// Class UNION.HoldItemPoolLibrary
// 0x0000 (0x0028 - 0x0028)
class UHoldItemPoolLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class AHoldItem* GetHoldItem(const int32 RacerIndex, const EItemId ItemId);
	static EHoldItemMeshType GetHoldItemMeshType(const int32 RacerIndex, const EItemId ItemId);
	static bool IsCompleted();
	static void PopulatePool(const EHoldItemPoolQuality Quality);
	static void ResetHoldItem(class AHoldItem* Item);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldItemPoolLibrary">();
	}
	static class UHoldItemPoolLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHoldItemPoolLibrary>();
	}
};
static_assert(alignof(UHoldItemPoolLibrary) == 0x000008, "Wrong alignment on UHoldItemPoolLibrary");
static_assert(sizeof(UHoldItemPoolLibrary) == 0x000028, "Wrong size on UHoldItemPoolLibrary");

// Class UNION.OnlineHeaderGameModeIconBase
// 0x0008 (0x03E0 - 0x03D8)
class UOnlineHeaderGameModeIconBase : public UUnionUISceneBase
{
public:
	class UWidgetSwitcher*                        ModeIcon;                                          // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void PlayOnlineModeIconAnim(bool bIsInAnim);
	void SetOnlineModeIcon(EOnlineGameMode InGameMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineHeaderGameModeIconBase">();
	}
	static class UOnlineHeaderGameModeIconBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineHeaderGameModeIconBase>();
	}
};
static_assert(alignof(UOnlineHeaderGameModeIconBase) == 0x000008, "Wrong alignment on UOnlineHeaderGameModeIconBase");
static_assert(sizeof(UOnlineHeaderGameModeIconBase) == 0x0003E0, "Wrong size on UOnlineHeaderGameModeIconBase");
static_assert(offsetof(UOnlineHeaderGameModeIconBase, ModeIcon) == 0x0003D8, "Member 'UOnlineHeaderGameModeIconBase::ModeIcon' has a wrong offset!");

// Class UNION.HoldItemSKM
// 0x0008 (0x02C0 - 0x02B8)
class AHoldItemSKM : public AHoldItem
{
public:
	class UHoldItemBlackBombComponent*            HoldItemBlackBombComponent;                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldItemSKM">();
	}
	static class AHoldItemSKM* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHoldItemSKM>();
	}
};
static_assert(alignof(AHoldItemSKM) == 0x000008, "Wrong alignment on AHoldItemSKM");
static_assert(sizeof(AHoldItemSKM) == 0x0002C0, "Wrong size on AHoldItemSKM");
static_assert(offsetof(AHoldItemSKM, HoldItemBlackBombComponent) == 0x0002B8, "Member 'AHoldItemSKM::HoldItemBlackBombComponent' has a wrong offset!");

// Class UNION.HoldItemSTM
// 0x0098 (0x0350 - 0x02B8)
class AHoldItemSTM : public AHoldItem
{
public:
	TArray<class UCurveVector*>                   CurveAssets;                                       // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x88];                                     // 0x02C8(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSequence(EHoldItemSTMSequence Sequence);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldItemSTM">();
	}
	static class AHoldItemSTM* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHoldItemSTM>();
	}
};
static_assert(alignof(AHoldItemSTM) == 0x000008, "Wrong alignment on AHoldItemSTM");
static_assert(sizeof(AHoldItemSTM) == 0x000350, "Wrong size on AHoldItemSTM");
static_assert(offsetof(AHoldItemSTM, CurveAssets) == 0x0002B8, "Member 'AHoldItemSTM::CurveAssets' has a wrong offset!");

// Class UNION.MachinePartsDataAsset
// 0x0108 (0x0138 - 0x0030)
class UMachinePartsDataAsset final : public UPrimaryDataAsset
{
public:
	class UStaticMesh*                            PartsStaticMesh;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           EngineSound;                                       // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           EngineSoundLow;                                    // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           RivalEngineSound;                                  // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           MachineSelectEngineSound;                          // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsColor1Enabled;                                  // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsColor2Enabled;                                  // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsColor3Enabled;                                  // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGlowEnabled;                                    // 0x00E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              StickerInitLocation;                               // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox2D                                 StickerMoveRange;                                  // 0x00F8(0x0028)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             StickerUVTexture;                                  // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FExtraStickerData>              PatternData;                                       // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void AutoSet();

	TSoftObjectPtr<class USoundAtomCue> GetEngineSound(bool bLocalPlayer) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachinePartsDataAsset">();
	}
	static class UMachinePartsDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachinePartsDataAsset>();
	}
};
static_assert(alignof(UMachinePartsDataAsset) == 0x000008, "Wrong alignment on UMachinePartsDataAsset");
static_assert(sizeof(UMachinePartsDataAsset) == 0x000138, "Wrong size on UMachinePartsDataAsset");
static_assert(offsetof(UMachinePartsDataAsset, PartsStaticMesh) == 0x000030, "Member 'UMachinePartsDataAsset::PartsStaticMesh' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, EngineSound) == 0x000038, "Member 'UMachinePartsDataAsset::EngineSound' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, EngineSoundLow) == 0x000060, "Member 'UMachinePartsDataAsset::EngineSoundLow' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, RivalEngineSound) == 0x000088, "Member 'UMachinePartsDataAsset::RivalEngineSound' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, MachineSelectEngineSound) == 0x0000B0, "Member 'UMachinePartsDataAsset::MachineSelectEngineSound' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, IconTexture) == 0x0000D8, "Member 'UMachinePartsDataAsset::IconTexture' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, bIsColor1Enabled) == 0x0000E0, "Member 'UMachinePartsDataAsset::bIsColor1Enabled' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, bIsColor2Enabled) == 0x0000E1, "Member 'UMachinePartsDataAsset::bIsColor2Enabled' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, bIsColor3Enabled) == 0x0000E2, "Member 'UMachinePartsDataAsset::bIsColor3Enabled' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, bIsGlowEnabled) == 0x0000E3, "Member 'UMachinePartsDataAsset::bIsGlowEnabled' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, StickerInitLocation) == 0x0000E8, "Member 'UMachinePartsDataAsset::StickerInitLocation' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, StickerMoveRange) == 0x0000F8, "Member 'UMachinePartsDataAsset::StickerMoveRange' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, StickerUVTexture) == 0x000120, "Member 'UMachinePartsDataAsset::StickerUVTexture' has a wrong offset!");
static_assert(offsetof(UMachinePartsDataAsset, PatternData) == 0x000128, "Member 'UMachinePartsDataAsset::PatternData' has a wrong offset!");

// Class UNION.RaceSequenceStateResult
// 0x0018 (0x0128 - 0x0110)
class URaceSequenceStateResult : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x18];                                     // 0x0110(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsRewardUpdateNeeded();
	void SaveResultRewardAndPoint(int32 InFestaId);
	void SetGrandPrixCompleteResult(const int32 LocalPlayerControllerId);
	void SetPartyRaceRivalWinLoseResult();
	void SetResultDataByRacers(class UUnionRacers* InRacers);
	void UpdateRecentPlayerData();
	void UpdateResultData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateResult">();
	}
	static class URaceSequenceStateResult* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateResult>();
	}
};
static_assert(alignof(URaceSequenceStateResult) == 0x000008, "Wrong alignment on URaceSequenceStateResult");
static_assert(sizeof(URaceSequenceStateResult) == 0x000128, "Wrong size on URaceSequenceStateResult");

// Class UNION.HoldItemVAT
// 0x0120 (0x03D8 - 0x02B8)
class AHoldItemVAT : public AHoldItem
{
public:
	class UUnionVATMeshComponent*                 UnionVATMeshComponent;                             // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C0[0x118];                                    // 0x02C0(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetupComponent(class UStaticMesh* StaticMesh, const TArray<class UMaterialInterface*>& Materials, int32 StartIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldItemVAT">();
	}
	static class AHoldItemVAT* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHoldItemVAT>();
	}
};
static_assert(alignof(AHoldItemVAT) == 0x000008, "Wrong alignment on AHoldItemVAT");
static_assert(sizeof(AHoldItemVAT) == 0x0003D8, "Wrong size on AHoldItemVAT");
static_assert(offsetof(AHoldItemVAT, UnionVATMeshComponent) == 0x0002B8, "Member 'AHoldItemVAT::UnionVATMeshComponent' has a wrong offset!");

// Class UNION.HonorTitlePlateUserWidget
// 0x0020 (0x0300 - 0x02E0)
class UHonorTitlePlateUserWidget : public UUserWidget
{
public:
	class UImage*                                 PlateImage;                                        // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionRichTextBlock*                    HonorTitleText;                                    // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionFontScroll*                       HonorTitleTextPtr;                                 // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPlateIndex;                                 // 0x02F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetupTitlePlate(const struct FHonorTitleListData& SetUpData);
	void StartTextScroll();
	void StopTextScroll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HonorTitlePlateUserWidget">();
	}
	static class UHonorTitlePlateUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHonorTitlePlateUserWidget>();
	}
};
static_assert(alignof(UHonorTitlePlateUserWidget) == 0x000008, "Wrong alignment on UHonorTitlePlateUserWidget");
static_assert(sizeof(UHonorTitlePlateUserWidget) == 0x000300, "Wrong size on UHonorTitlePlateUserWidget");
static_assert(offsetof(UHonorTitlePlateUserWidget, PlateImage) == 0x0002E0, "Member 'UHonorTitlePlateUserWidget::PlateImage' has a wrong offset!");
static_assert(offsetof(UHonorTitlePlateUserWidget, HonorTitleText) == 0x0002E8, "Member 'UHonorTitlePlateUserWidget::HonorTitleText' has a wrong offset!");
static_assert(offsetof(UHonorTitlePlateUserWidget, HonorTitleTextPtr) == 0x0002F0, "Member 'UHonorTitlePlateUserWidget::HonorTitleTextPtr' has a wrong offset!");
static_assert(offsetof(UHonorTitlePlateUserWidget, CurrentPlateIndex) == 0x0002F8, "Member 'UHonorTitlePlateUserWidget::CurrentPlateIndex' has a wrong offset!");

// Class UNION.HonorTitleSequence
// 0x0050 (0x0178 - 0x0128)
class UHonorTitleSequence final : public UMenuSequenceSubStateBase
{
public:
	TMulticastInlineDelegate<void()>              OnReturnToOptionTopEvent;                          // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnChangeChallengeSequenceEvent;                    // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   HonorTitleSettingClass;                            // 0x0148(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHonorTitleSettingWindow*               HonorTitleSettingWidget;                           // 0x0170(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HonorTitleSequence">();
	}
	static class UHonorTitleSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHonorTitleSequence>();
	}
};
static_assert(alignof(UHonorTitleSequence) == 0x000008, "Wrong alignment on UHonorTitleSequence");
static_assert(sizeof(UHonorTitleSequence) == 0x000178, "Wrong size on UHonorTitleSequence");
static_assert(offsetof(UHonorTitleSequence, OnReturnToOptionTopEvent) == 0x000128, "Member 'UHonorTitleSequence::OnReturnToOptionTopEvent' has a wrong offset!");
static_assert(offsetof(UHonorTitleSequence, OnChangeChallengeSequenceEvent) == 0x000138, "Member 'UHonorTitleSequence::OnChangeChallengeSequenceEvent' has a wrong offset!");
static_assert(offsetof(UHonorTitleSequence, HonorTitleSettingClass) == 0x000148, "Member 'UHonorTitleSequence::HonorTitleSettingClass' has a wrong offset!");
static_assert(offsetof(UHonorTitleSequence, HonorTitleSettingWidget) == 0x000170, "Member 'UHonorTitleSequence::HonorTitleSettingWidget' has a wrong offset!");

// Class UNION.HonorTitleSettingBtn
// 0x0030 (0x04B0 - 0x0480)
class UHonorTitleSettingBtn final : public UUnionUIButtonBase
{
public:
	TMulticastInlineDelegate<void()>              OnStartTextScroll;                                 // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnStopTextScroll;                                  // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UHonorTitlePlateUserWidget*             HonorTitlePlate;                                   // 0x04A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         plateId;                                           // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ResetNewButtonImage();
	void SetupHonorTitleButtonPlate(const struct FHonorTitleListData& SetUpData);
	void SetupUnlockedHonorTitle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HonorTitleSettingBtn">();
	}
	static class UHonorTitleSettingBtn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHonorTitleSettingBtn>();
	}
};
static_assert(alignof(UHonorTitleSettingBtn) == 0x000008, "Wrong alignment on UHonorTitleSettingBtn");
static_assert(sizeof(UHonorTitleSettingBtn) == 0x0004B0, "Wrong size on UHonorTitleSettingBtn");
static_assert(offsetof(UHonorTitleSettingBtn, OnStartTextScroll) == 0x000480, "Member 'UHonorTitleSettingBtn::OnStartTextScroll' has a wrong offset!");
static_assert(offsetof(UHonorTitleSettingBtn, OnStopTextScroll) == 0x000490, "Member 'UHonorTitleSettingBtn::OnStopTextScroll' has a wrong offset!");
static_assert(offsetof(UHonorTitleSettingBtn, HonorTitlePlate) == 0x0004A0, "Member 'UHonorTitleSettingBtn::HonorTitlePlate' has a wrong offset!");
static_assert(offsetof(UHonorTitleSettingBtn, plateId) == 0x0004A8, "Member 'UHonorTitleSettingBtn::plateId' has a wrong offset!");
static_assert(offsetof(UHonorTitleSettingBtn, SortID) == 0x0004AC, "Member 'UHonorTitleSettingBtn::SortID' has a wrong offset!");

// Class UNION.OnlineFestaTeamDirectionBase
// 0x0028 (0x0400 - 0x03D8)
class UOnlineFestaTeamDirectionBase final : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void()>              OnTeamDecideAnimFinished;                          // 0x03D8(0x0010)(Edit, ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	class UImage*                                 CutInImageObj;                                     // 0x03E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 TeamBaseBand;                                      // 0x03F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionRichTextBlock*                    TeamDecideTextBlock;                               // 0x03F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void FestaTeamDecideSceneInit();
	void LoadFestaTeamIconTextures(const TArray<TSoftObjectPtr<class UTexture2D>>& InFestaDirectionIcons);
	void LoadFestaTeamTextures(const TSoftObjectPtr<class UTexture2D>& InDecideTeamCutInPtr, const TArray<TSoftObjectPtr<class UTexture2D>>& InFestaDirectionIcons);
	void OnPlayDecideTeamEvent(int32 InMyTeamIndex);
	void SetTeamColorEvent(const TArray<struct FLinearColor>& InTeamColors, int32 InMyTeamIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineFestaTeamDirectionBase">();
	}
	static class UOnlineFestaTeamDirectionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineFestaTeamDirectionBase>();
	}
};
static_assert(alignof(UOnlineFestaTeamDirectionBase) == 0x000008, "Wrong alignment on UOnlineFestaTeamDirectionBase");
static_assert(sizeof(UOnlineFestaTeamDirectionBase) == 0x000400, "Wrong size on UOnlineFestaTeamDirectionBase");
static_assert(offsetof(UOnlineFestaTeamDirectionBase, OnTeamDecideAnimFinished) == 0x0003D8, "Member 'UOnlineFestaTeamDirectionBase::OnTeamDecideAnimFinished' has a wrong offset!");
static_assert(offsetof(UOnlineFestaTeamDirectionBase, CutInImageObj) == 0x0003E8, "Member 'UOnlineFestaTeamDirectionBase::CutInImageObj' has a wrong offset!");
static_assert(offsetof(UOnlineFestaTeamDirectionBase, TeamBaseBand) == 0x0003F0, "Member 'UOnlineFestaTeamDirectionBase::TeamBaseBand' has a wrong offset!");
static_assert(offsetof(UOnlineFestaTeamDirectionBase, TeamDecideTextBlock) == 0x0003F8, "Member 'UOnlineFestaTeamDirectionBase::TeamDecideTextBlock' has a wrong offset!");

// Class UNION.HonorTitleSettingTab
// 0x0020 (0x0300 - 0x02E0)
class UHonorTitleSettingTab final : public UUserWidget
{
public:
	TMulticastInlineDelegate<void(int32 CurrentTab)> OnChangeTabEvent;                               // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<class UHonorTitleSettingTabBtn*>       HonorTitleSettingTabButtonArray;                   // 0x02F0(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void Setup();
	void SetupNewTabIcons(const TArray<bool>& NewArray);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HonorTitleSettingTab">();
	}
	static class UHonorTitleSettingTab* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHonorTitleSettingTab>();
	}
};
static_assert(alignof(UHonorTitleSettingTab) == 0x000008, "Wrong alignment on UHonorTitleSettingTab");
static_assert(sizeof(UHonorTitleSettingTab) == 0x000300, "Wrong size on UHonorTitleSettingTab");
static_assert(offsetof(UHonorTitleSettingTab, OnChangeTabEvent) == 0x0002E0, "Member 'UHonorTitleSettingTab::OnChangeTabEvent' has a wrong offset!");
static_assert(offsetof(UHonorTitleSettingTab, HonorTitleSettingTabButtonArray) == 0x0002F0, "Member 'UHonorTitleSettingTab::HonorTitleSettingTabButtonArray' has a wrong offset!");

// Class UNION.RaceSequenceStateEntryRacer
// 0x0010 (0x0120 - 0x0110)
class URaceSequenceStateEntryRacer : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URaceBeforeSharedData*                  RaceBeforeSharedData;                              // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool CanProceedSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateEntryRacer">();
	}
	static class URaceSequenceStateEntryRacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateEntryRacer>();
	}
};
static_assert(alignof(URaceSequenceStateEntryRacer) == 0x000008, "Wrong alignment on URaceSequenceStateEntryRacer");
static_assert(sizeof(URaceSequenceStateEntryRacer) == 0x000120, "Wrong size on URaceSequenceStateEntryRacer");
static_assert(offsetof(URaceSequenceStateEntryRacer, RaceBeforeSharedData) == 0x000118, "Member 'URaceSequenceStateEntryRacer::RaceBeforeSharedData' has a wrong offset!");

// Class UNION.HonorTitleSettingTabBtn
// 0x0020 (0x04A0 - 0x0480)
class UHonorTitleSettingTabBtn final : public UUnionUIButtonBase
{
public:
	TMulticastInlineDelegate<void()>              OnActivateTabButtonEvent;                          // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDeactivateTabButtonEvent;                        // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void SetupNewIcon(bool New);
	void SetupTabButtonImage(int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HonorTitleSettingTabBtn">();
	}
	static class UHonorTitleSettingTabBtn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHonorTitleSettingTabBtn>();
	}
};
static_assert(alignof(UHonorTitleSettingTabBtn) == 0x000008, "Wrong alignment on UHonorTitleSettingTabBtn");
static_assert(sizeof(UHonorTitleSettingTabBtn) == 0x0004A0, "Wrong size on UHonorTitleSettingTabBtn");
static_assert(offsetof(UHonorTitleSettingTabBtn, OnActivateTabButtonEvent) == 0x000480, "Member 'UHonorTitleSettingTabBtn::OnActivateTabButtonEvent' has a wrong offset!");
static_assert(offsetof(UHonorTitleSettingTabBtn, OnDeactivateTabButtonEvent) == 0x000490, "Member 'UHonorTitleSettingTabBtn::OnDeactivateTabButtonEvent' has a wrong offset!");

// Class UNION.MachineOptionWindow
// 0x0040 (0x0418 - 0x03D8)
class UMachineOptionWindow : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(bool IsIn)>     OnFinishedAnim;                                    // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UUnionUIButtonBase*                     WBP_Window_Sub_Option_HandleAssist;                // 0x03E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButtonBase*                     WBP_Window_Sub_Option_AutoAccel;                   // 0x03F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButtonBase*                     WBP_Window_Sub_Option_AerialTrickAssist;           // 0x03F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOutOfContentButton*                    OutOfContentButton;                                // 0x0400(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButtonsPanel*                   ButtonPanel;                                       // 0x0408(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_410[0x8];                                      // 0x0410(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishedAnim();
	void OnCallbackChangeAssistAerialTrick(class UUnionUIButtonBase* InButton);
	void OnCallbackChangeAssistAutoAccel(class UUnionUIButtonBase* InButton);
	void OnCallbackChangeAssistHandle(class UUnionUIButtonBase* InButton);
	void OnPlayAnimIn();
	void OnPlayAnimLoop();
	void OnPlayAnimOut();
	void OnPlaySEAnim();
	void PlayAnimLoop();
	void SetupAssistAerialTrick(bool IsFlag);
	void SetupAssistAutoAccel(bool IsFlag);
	void SetupAssistHandle(bool IsFlag);

	class UUnionUIButtonBase* GetAerialTrickAssist() const;
	class UUnionUIButtonBase* GetAutoAccel() const;
	class UUnionUIButtonBase* GetHandleAssist() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineOptionWindow">();
	}
	static class UMachineOptionWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineOptionWindow>();
	}
};
static_assert(alignof(UMachineOptionWindow) == 0x000008, "Wrong alignment on UMachineOptionWindow");
static_assert(sizeof(UMachineOptionWindow) == 0x000418, "Wrong size on UMachineOptionWindow");
static_assert(offsetof(UMachineOptionWindow, OnFinishedAnim) == 0x0003D8, "Member 'UMachineOptionWindow::OnFinishedAnim' has a wrong offset!");
static_assert(offsetof(UMachineOptionWindow, WBP_Window_Sub_Option_HandleAssist) == 0x0003E8, "Member 'UMachineOptionWindow::WBP_Window_Sub_Option_HandleAssist' has a wrong offset!");
static_assert(offsetof(UMachineOptionWindow, WBP_Window_Sub_Option_AutoAccel) == 0x0003F0, "Member 'UMachineOptionWindow::WBP_Window_Sub_Option_AutoAccel' has a wrong offset!");
static_assert(offsetof(UMachineOptionWindow, WBP_Window_Sub_Option_AerialTrickAssist) == 0x0003F8, "Member 'UMachineOptionWindow::WBP_Window_Sub_Option_AerialTrickAssist' has a wrong offset!");
static_assert(offsetof(UMachineOptionWindow, OutOfContentButton) == 0x000400, "Member 'UMachineOptionWindow::OutOfContentButton' has a wrong offset!");
static_assert(offsetof(UMachineOptionWindow, ButtonPanel) == 0x000408, "Member 'UMachineOptionWindow::ButtonPanel' has a wrong offset!");

// Class UNION.HonorTitleSettingThumbWindow
// 0x0010 (0x02F0 - 0x02E0)
class UHonorTitleSettingThumbWindow final : public UUserWidget
{
public:
	TArray<class UWrapBox*>                       TabWrapBoxArray;                                   // 0x02E0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void AddTabWrapBoxChild(int32 Rarity, class UUserWidget* Object);
	void RemoveAllTabWrapBoxChild();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HonorTitleSettingThumbWindow">();
	}
	static class UHonorTitleSettingThumbWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHonorTitleSettingThumbWindow>();
	}
};
static_assert(alignof(UHonorTitleSettingThumbWindow) == 0x000008, "Wrong alignment on UHonorTitleSettingThumbWindow");
static_assert(sizeof(UHonorTitleSettingThumbWindow) == 0x0002F0, "Wrong size on UHonorTitleSettingThumbWindow");
static_assert(offsetof(UHonorTitleSettingThumbWindow, TabWrapBoxArray) == 0x0002E0, "Member 'UHonorTitleSettingThumbWindow::TabWrapBoxArray' has a wrong offset!");

// Class UNION.HonorTitleSettingWindow
// 0x0050 (0x0428 - 0x03D8)
class UHonorTitleSettingWindow final : public UUnionUISceneBase
{
public:
	class UHonorTitlePlateUserWidget*             HonorTitleSettingUserPlate;                        // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUnionUIButtonsPanel*>           HonorTitleSettingTabPanelArray;                    // 0x03E0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentTabCnt;                                     // 0x03F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHonorTitleTabStruc>            GeneratedHonorTitleTab;                            // 0x03F8(0x0010)(BlueprintVisible, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 GeneratedHonorTitleId;                             // 0x0408(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 GeneratedTabIndex;                                 // 0x0418(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void AddGeneratedHonorTitleToWrapBox();
	void GenerateCurrentTabHonorTitle();
	void GenerateHonorTitle(int32 HonorTitleIndex, const struct FHonorTitleListData& HonorTitleData);
	void Setup();
	void SetupNavigation();
	void SetupTabsNewIcon(class UHonorTitleSettingTab* TabWindow);
	void SortGeneratedHonorTitle();

	class UHonorTitleListDataAsset* GetHonorTitleListDataAsset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HonorTitleSettingWindow">();
	}
	static class UHonorTitleSettingWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHonorTitleSettingWindow>();
	}
};
static_assert(alignof(UHonorTitleSettingWindow) == 0x000008, "Wrong alignment on UHonorTitleSettingWindow");
static_assert(sizeof(UHonorTitleSettingWindow) == 0x000428, "Wrong size on UHonorTitleSettingWindow");
static_assert(offsetof(UHonorTitleSettingWindow, HonorTitleSettingUserPlate) == 0x0003D8, "Member 'UHonorTitleSettingWindow::HonorTitleSettingUserPlate' has a wrong offset!");
static_assert(offsetof(UHonorTitleSettingWindow, HonorTitleSettingTabPanelArray) == 0x0003E0, "Member 'UHonorTitleSettingWindow::HonorTitleSettingTabPanelArray' has a wrong offset!");
static_assert(offsetof(UHonorTitleSettingWindow, CurrentTabCnt) == 0x0003F0, "Member 'UHonorTitleSettingWindow::CurrentTabCnt' has a wrong offset!");
static_assert(offsetof(UHonorTitleSettingWindow, GeneratedHonorTitleTab) == 0x0003F8, "Member 'UHonorTitleSettingWindow::GeneratedHonorTitleTab' has a wrong offset!");
static_assert(offsetof(UHonorTitleSettingWindow, GeneratedHonorTitleId) == 0x000408, "Member 'UHonorTitleSettingWindow::GeneratedHonorTitleId' has a wrong offset!");
static_assert(offsetof(UHonorTitleSettingWindow, GeneratedTabIndex) == 0x000418, "Member 'UHonorTitleSettingWindow::GeneratedTabIndex' has a wrong offset!");

// Class UNION.MachineStickerSelectPresetIcon
// 0x0090 (0x0510 - 0x0480)
class UMachineStickerSelectPresetIcon : public UUnionUIButtonBase
{
public:
	class UImage*                                 MLC_Base;                                          // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Cursor_StickerIcon;                            // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBalloon*                     WBP_CMN_TextBalloon;                               // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Set_Icon;                                      // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Icon_New;                                      // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_PresetIcon;                         // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_PresetIcon;                                    // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_CharaIcon;                                     // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          FocusSoundCue;                                     // 0x04C0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          DecisionSoundCue;                                  // 0x04C8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          CancelSoundCue;                                    // 0x04D0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          ShoulderSoundCue;                                  // 0x04D8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BaseColorOnNotSelected;                            // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BaseColorOnSelected;                               // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_500[0x10];                                     // 0x0500(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFocusLostImpl();
	struct FEventReply OnFocusReceivedImpl();
	void SetBalloonVisible(bool IsVisible_0);
	void SetCharaIconVisible(bool IsVisible_0);
	void SetNew(bool bInIsNew);
	void SetSelected(bool bInIsSelected);
	void Setup();
	void ShowCursor(bool IsVisible_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineStickerSelectPresetIcon">();
	}
	static class UMachineStickerSelectPresetIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineStickerSelectPresetIcon>();
	}
};
static_assert(alignof(UMachineStickerSelectPresetIcon) == 0x000008, "Wrong alignment on UMachineStickerSelectPresetIcon");
static_assert(sizeof(UMachineStickerSelectPresetIcon) == 0x000510, "Wrong size on UMachineStickerSelectPresetIcon");
static_assert(offsetof(UMachineStickerSelectPresetIcon, MLC_Base) == 0x000480, "Member 'UMachineStickerSelectPresetIcon::MLC_Base' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, DSP_Cursor_StickerIcon) == 0x000488, "Member 'UMachineStickerSelectPresetIcon::DSP_Cursor_StickerIcon' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, WBP_CMN_TextBalloon) == 0x000490, "Member 'UMachineStickerSelectPresetIcon::WBP_CMN_TextBalloon' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, DSP_Set_Icon) == 0x000498, "Member 'UMachineStickerSelectPresetIcon::DSP_Set_Icon' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, DSP_Icon_New) == 0x0004A0, "Member 'UMachineStickerSelectPresetIcon::DSP_Icon_New' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, WidgetSwitcher_PresetIcon) == 0x0004A8, "Member 'UMachineStickerSelectPresetIcon::WidgetSwitcher_PresetIcon' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, DMY_PresetIcon) == 0x0004B0, "Member 'UMachineStickerSelectPresetIcon::DMY_PresetIcon' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, DMY_CharaIcon) == 0x0004B8, "Member 'UMachineStickerSelectPresetIcon::DMY_CharaIcon' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, FocusSoundCue) == 0x0004C0, "Member 'UMachineStickerSelectPresetIcon::FocusSoundCue' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, DecisionSoundCue) == 0x0004C8, "Member 'UMachineStickerSelectPresetIcon::DecisionSoundCue' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, CancelSoundCue) == 0x0004D0, "Member 'UMachineStickerSelectPresetIcon::CancelSoundCue' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, ShoulderSoundCue) == 0x0004D8, "Member 'UMachineStickerSelectPresetIcon::ShoulderSoundCue' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, BaseColorOnNotSelected) == 0x0004E0, "Member 'UMachineStickerSelectPresetIcon::BaseColorOnNotSelected' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectPresetIcon, BaseColorOnSelected) == 0x0004F0, "Member 'UMachineStickerSelectPresetIcon::BaseColorOnSelected' has a wrong offset!");

// Class UNION.VehicleBaseActor
// 0x0090 (0x0320 - 0x0290)
class AVehicleBaseActor : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineSoundComponent*                 MachineSoundComponent;                             // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineEngineSoundComponent*           MachineEngineSoundComponent;                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineEffectComponent*                MachineEffectComponent;                            // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineSurfaceEffectComponent*         MachineSurfaceEffectComponent;                     // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineMaterialComponent*              MachineMaterialComponent;                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AVehicleRearPartsActor>     VehicleRearPartsClass;                             // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URacerMaterialParameterDataAsset*       RacerMaterialParameters;                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineMaterialParameterDataAsset*     MachineMaterialParameters;                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInViewer;                                         // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D9[0x17];                                     // 0x02D9(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          FrontEngineSound;                                  // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          RearEngineSound;                                   // 0x02F8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AVehicleRearPartsActor*                 VehicleRearPartsActor;                             // 0x0300(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_308[0x18];                                     // 0x0308(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginAnimation();
	void ChangeVehicleType(EVehicleType NewVehicleType);
	void DamageOff();
	void DamageOn();
	void EndAnimation();
	bool IsEqualMachineForm_PrevCur();
	void PlayMaterialAnimation(EVehicleMaterialAnimationType MaterialAnimationType, float StartTime, bool bAutoDeactive);
	void ReleaseAllEffect();
	void ResetSpecialStatus();
	void SetDamageIntensity(float Intensity);
	void SetDriftIntensity(int32 ChargeLevel, float Intensity);
	void SetForceDisableWheelPosUpdate(const bool bDisable);
	void SetForcedLod(int32 NewForcedLodModel);
	void SetScalarParameterValue(class FName ParameterName, float Value);
	void SetVectorParameterValue(class FName ParameterName, const struct FLinearColor& Value);
	void StopMaterialAnimation(EVehicleMaterialAnimationType MaterialAnimationType, bool bReset);
	void TurnOffEngine();
	void TurnOnEngine();
	void VehicleModelEventAttackedInfo(const int32& EventId, const struct FAttackedInfo& Value);
	void VehicleModelEventInt(const int32& EventId, const int32& Value);
	void VehicleModelEventItemId(const int32& EventId, const EItemId& Value, const int32& IntValue, const EItemThrowDirection& ThrowType, const bool bGadgetLuckyItem);
	void VehicleModelEventSpecialStatus(const int32& EventId, const EVehicleSpecialStatusType& Value);

	bool IsHoverboard() const;
	bool IsInBodyCut() const;
	bool IsInDriving() const;
	bool IsInRace() const;
	bool IsLocalPlayer() const;
	bool IsPlayingAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleBaseActor">();
	}
	static class AVehicleBaseActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVehicleBaseActor>();
	}
};
static_assert(alignof(AVehicleBaseActor) == 0x000008, "Wrong alignment on AVehicleBaseActor");
static_assert(sizeof(AVehicleBaseActor) == 0x000320, "Wrong size on AVehicleBaseActor");
static_assert(offsetof(AVehicleBaseActor, Root) == 0x000290, "Member 'AVehicleBaseActor::Root' has a wrong offset!");
static_assert(offsetof(AVehicleBaseActor, MachineSoundComponent) == 0x000298, "Member 'AVehicleBaseActor::MachineSoundComponent' has a wrong offset!");
static_assert(offsetof(AVehicleBaseActor, MachineEngineSoundComponent) == 0x0002A0, "Member 'AVehicleBaseActor::MachineEngineSoundComponent' has a wrong offset!");
static_assert(offsetof(AVehicleBaseActor, MachineEffectComponent) == 0x0002A8, "Member 'AVehicleBaseActor::MachineEffectComponent' has a wrong offset!");
static_assert(offsetof(AVehicleBaseActor, MachineSurfaceEffectComponent) == 0x0002B0, "Member 'AVehicleBaseActor::MachineSurfaceEffectComponent' has a wrong offset!");
static_assert(offsetof(AVehicleBaseActor, MachineMaterialComponent) == 0x0002B8, "Member 'AVehicleBaseActor::MachineMaterialComponent' has a wrong offset!");
static_assert(offsetof(AVehicleBaseActor, VehicleRearPartsClass) == 0x0002C0, "Member 'AVehicleBaseActor::VehicleRearPartsClass' has a wrong offset!");
static_assert(offsetof(AVehicleBaseActor, RacerMaterialParameters) == 0x0002C8, "Member 'AVehicleBaseActor::RacerMaterialParameters' has a wrong offset!");
static_assert(offsetof(AVehicleBaseActor, MachineMaterialParameters) == 0x0002D0, "Member 'AVehicleBaseActor::MachineMaterialParameters' has a wrong offset!");
static_assert(offsetof(AVehicleBaseActor, bInViewer) == 0x0002D8, "Member 'AVehicleBaseActor::bInViewer' has a wrong offset!");
static_assert(offsetof(AVehicleBaseActor, FrontEngineSound) == 0x0002F0, "Member 'AVehicleBaseActor::FrontEngineSound' has a wrong offset!");
static_assert(offsetof(AVehicleBaseActor, RearEngineSound) == 0x0002F8, "Member 'AVehicleBaseActor::RearEngineSound' has a wrong offset!");
static_assert(offsetof(AVehicleBaseActor, VehicleRearPartsActor) == 0x000300, "Member 'AVehicleBaseActor::VehicleRearPartsActor' has a wrong offset!");

// Class UNION.HoverboardBaseActor
// 0x0470 (0x0790 - 0x0320)
class AHoverboardBaseActor : public AVehicleBaseActor
{
public:
	class UUnionStaticMeshComponent*              FrontMeshComponent;                                // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              RearMeshComponent;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              CenterMeshComponent;                               // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUnionStaticMeshComponent*>      UnitBoatStaticMeshComponents;                      // 0x0338(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UUnionStaticMeshComponent*>      UnitPlaneStaticMeshComponents;                     // 0x0348(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FMachineMaterialData                   FrontMeshMaterial;                                 // 0x0358(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineMaterialData                   RearMeshMaterial;                                  // 0x0400(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineMaterialData                   CenterMeshMaterial;                                // 0x04A8(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineMaterialData                   FrontMeshSubMaterial;                              // 0x0550(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineMaterialData                   RearMeshSubMaterial;                               // 0x05F8(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineMaterialData                   CenterMeshSubMaterial;                             // 0x06A0(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMachineMaterialData>           UnitBoatMeshMaterial;                              // 0x0748(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMachineMaterialData>           UnitPlaneMeshMaterial;                             // 0x0758(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_768[0x28];                                     // 0x0768(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBodyColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetBodyGlowColor(int32 GlowNo);
	void SetBodySurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetCenterMesh();
	void SetCheckContentReleased(bool Check);
	void SetCustomColor(const struct FUserMachineCustomizeData& MachineCustomizeData);
	void SetFrontMesh(EMachineId MachineId);
	void SetFrontSticker(class UTexture* StickerTexture);
	void SetPresetColor(EMachineColorPresetId ColorPresetId);
	void SetRearMesh(EMachineId MachineId);
	void SetRearSticker(class UTexture* StickerTexture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoverboardBaseActor">();
	}
	static class AHoverboardBaseActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHoverboardBaseActor>();
	}
};
static_assert(alignof(AHoverboardBaseActor) == 0x000008, "Wrong alignment on AHoverboardBaseActor");
static_assert(sizeof(AHoverboardBaseActor) == 0x000790, "Wrong size on AHoverboardBaseActor");
static_assert(offsetof(AHoverboardBaseActor, FrontMeshComponent) == 0x000320, "Member 'AHoverboardBaseActor::FrontMeshComponent' has a wrong offset!");
static_assert(offsetof(AHoverboardBaseActor, RearMeshComponent) == 0x000328, "Member 'AHoverboardBaseActor::RearMeshComponent' has a wrong offset!");
static_assert(offsetof(AHoverboardBaseActor, CenterMeshComponent) == 0x000330, "Member 'AHoverboardBaseActor::CenterMeshComponent' has a wrong offset!");
static_assert(offsetof(AHoverboardBaseActor, UnitBoatStaticMeshComponents) == 0x000338, "Member 'AHoverboardBaseActor::UnitBoatStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(AHoverboardBaseActor, UnitPlaneStaticMeshComponents) == 0x000348, "Member 'AHoverboardBaseActor::UnitPlaneStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(AHoverboardBaseActor, FrontMeshMaterial) == 0x000358, "Member 'AHoverboardBaseActor::FrontMeshMaterial' has a wrong offset!");
static_assert(offsetof(AHoverboardBaseActor, RearMeshMaterial) == 0x000400, "Member 'AHoverboardBaseActor::RearMeshMaterial' has a wrong offset!");
static_assert(offsetof(AHoverboardBaseActor, CenterMeshMaterial) == 0x0004A8, "Member 'AHoverboardBaseActor::CenterMeshMaterial' has a wrong offset!");
static_assert(offsetof(AHoverboardBaseActor, FrontMeshSubMaterial) == 0x000550, "Member 'AHoverboardBaseActor::FrontMeshSubMaterial' has a wrong offset!");
static_assert(offsetof(AHoverboardBaseActor, RearMeshSubMaterial) == 0x0005F8, "Member 'AHoverboardBaseActor::RearMeshSubMaterial' has a wrong offset!");
static_assert(offsetof(AHoverboardBaseActor, CenterMeshSubMaterial) == 0x0006A0, "Member 'AHoverboardBaseActor::CenterMeshSubMaterial' has a wrong offset!");
static_assert(offsetof(AHoverboardBaseActor, UnitBoatMeshMaterial) == 0x000748, "Member 'AHoverboardBaseActor::UnitBoatMeshMaterial' has a wrong offset!");
static_assert(offsetof(AHoverboardBaseActor, UnitPlaneMeshMaterial) == 0x000758, "Member 'AHoverboardBaseActor::UnitPlaneMeshMaterial' has a wrong offset!");

// Class UNION.SimpleNpcMonsterTruckActor
// 0x0B08 (0x0E28 - 0x0320)
class ASimpleNpcMonsterTruckActor : public AVehicleBaseActor
{
public:
	class UUnionStaticMeshComponent*              StaticMeshComponent;                               // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             SimpleNpcDataTable;                                // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           EngineSound;                                       // 0x0330(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           RivalEngineSound;                                  // 0x0358(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESimpleNpcMonsterTruckMaterialType, struct FMachineMaterialData> CockpitMeshMaterials;      // 0x0380(0x0050)(NativeAccessSpecifierPrivate)
	TMap<ESimpleNpcMonsterTruckMaterialType, struct FMachineMaterialData> CockpitSusMeshMaterials;   // 0x03D0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<ESimpleNpcMonsterTruckMaterialType, struct FMachineMaterialData> BodyMeshMaterials;         // 0x0420(0x0050)(NativeAccessSpecifierPrivate)
	TMap<ESimpleNpcMonsterTruckMaterialType, struct FMachineMaterialData> UnitBoatMeshMaterials;     // 0x0470(0x0050)(NativeAccessSpecifierPrivate)
	TMap<ESimpleNpcMonsterTruckMaterialType, struct FMachineMaterialDataArray> UnitCarMeshMaterials; // 0x04C0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<ESimpleNpcMonsterTruckMaterialType, struct FMachineMaterialDataArray> UnitPlaneMeshMaterials; // 0x0510(0x0050)(NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     DummyMaterialInterface;                            // 0x0560(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_568[0xE0];                                     // 0x0568(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMachineMaterialData                   FrontMachineMaterial;                              // 0x0648(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   FrontTireMaterial;                                 // 0x06F0(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   RearTireMaterial;                                  // 0x0798(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   AquaTireMaterial;                                  // 0x0840(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   RearFlightUnitJetMaterial;                         // 0x08E8(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   RearFlightUnitMaterial;                            // 0x0990(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   FrontMachineUnlitMaterial;                         // 0x0A38(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   FrontTireUnlitMaterial;                            // 0x0AE0(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   RearTireUnlitMaterial;                             // 0x0B88(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   AquaTireUnlitMaterial;                             // 0x0C30(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   RearFlightUnitJetUnlitMaterial;                    // 0x0CD8(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   RearFlightUnitUnlitMaterial;                       // 0x0D80(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)

public:
	void OnCountDown(bool bIsPlay, const struct FLinearColor& Color, bool bWithDriver);
	void SetBodyColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetBodyGlowColor(int32 GlowNo);
	void SetBodySurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetCockpitColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetCockpitSurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetCustomColor(const struct FUserMachineCustomizeData& MachineCustomizeData);
	void SetPresetColor(EMachineColorPresetId ColorPresetId);
	void SetTireColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetTireGlowColor(int32 GlowNo);
	void SetTireSurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetupEffectData(const EMachineId InMachineID);
	void SetupEngineSound(const EMachineId InMachineID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleNpcMonsterTruckActor">();
	}
	static class ASimpleNpcMonsterTruckActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASimpleNpcMonsterTruckActor>();
	}
};
static_assert(alignof(ASimpleNpcMonsterTruckActor) == 0x000008, "Wrong alignment on ASimpleNpcMonsterTruckActor");
static_assert(sizeof(ASimpleNpcMonsterTruckActor) == 0x000E28, "Wrong size on ASimpleNpcMonsterTruckActor");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, StaticMeshComponent) == 0x000320, "Member 'ASimpleNpcMonsterTruckActor::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, SimpleNpcDataTable) == 0x000328, "Member 'ASimpleNpcMonsterTruckActor::SimpleNpcDataTable' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, EngineSound) == 0x000330, "Member 'ASimpleNpcMonsterTruckActor::EngineSound' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, RivalEngineSound) == 0x000358, "Member 'ASimpleNpcMonsterTruckActor::RivalEngineSound' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, CockpitMeshMaterials) == 0x000380, "Member 'ASimpleNpcMonsterTruckActor::CockpitMeshMaterials' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, CockpitSusMeshMaterials) == 0x0003D0, "Member 'ASimpleNpcMonsterTruckActor::CockpitSusMeshMaterials' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, BodyMeshMaterials) == 0x000420, "Member 'ASimpleNpcMonsterTruckActor::BodyMeshMaterials' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, UnitBoatMeshMaterials) == 0x000470, "Member 'ASimpleNpcMonsterTruckActor::UnitBoatMeshMaterials' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, UnitCarMeshMaterials) == 0x0004C0, "Member 'ASimpleNpcMonsterTruckActor::UnitCarMeshMaterials' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, UnitPlaneMeshMaterials) == 0x000510, "Member 'ASimpleNpcMonsterTruckActor::UnitPlaneMeshMaterials' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, DummyMaterialInterface) == 0x000560, "Member 'ASimpleNpcMonsterTruckActor::DummyMaterialInterface' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, FrontMachineMaterial) == 0x000648, "Member 'ASimpleNpcMonsterTruckActor::FrontMachineMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, FrontTireMaterial) == 0x0006F0, "Member 'ASimpleNpcMonsterTruckActor::FrontTireMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, RearTireMaterial) == 0x000798, "Member 'ASimpleNpcMonsterTruckActor::RearTireMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, AquaTireMaterial) == 0x000840, "Member 'ASimpleNpcMonsterTruckActor::AquaTireMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, RearFlightUnitJetMaterial) == 0x0008E8, "Member 'ASimpleNpcMonsterTruckActor::RearFlightUnitJetMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, RearFlightUnitMaterial) == 0x000990, "Member 'ASimpleNpcMonsterTruckActor::RearFlightUnitMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, FrontMachineUnlitMaterial) == 0x000A38, "Member 'ASimpleNpcMonsterTruckActor::FrontMachineUnlitMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, FrontTireUnlitMaterial) == 0x000AE0, "Member 'ASimpleNpcMonsterTruckActor::FrontTireUnlitMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, RearTireUnlitMaterial) == 0x000B88, "Member 'ASimpleNpcMonsterTruckActor::RearTireUnlitMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, AquaTireUnlitMaterial) == 0x000C30, "Member 'ASimpleNpcMonsterTruckActor::AquaTireUnlitMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, RearFlightUnitJetUnlitMaterial) == 0x000CD8, "Member 'ASimpleNpcMonsterTruckActor::RearFlightUnitJetUnlitMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNpcMonsterTruckActor, RearFlightUnitUnlitMaterial) == 0x000D80, "Member 'ASimpleNpcMonsterTruckActor::RearFlightUnitUnlitMaterial' has a wrong offset!");

// Class UNION.MachinePartsScrollBoxItem
// 0x0118 (0x0598 - 0x0480)
class UMachinePartsScrollBoxItem : public UUnionUIButtonBase
{
public:
	struct FLinearColor                           BaseColorOnNotSelected;                            // 0x0480(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           BaseColorOnSelected;                               // 0x0490(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 MLC_Base;                                          // 0x04A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_PartsIcon_FR;                                  // 0x04A8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 P1_Cursor;                                         // 0x04B0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 P2_Cursor;                                         // 0x04B8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 P3_Cursor;                                         // 0x04C0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 P4_Cursor;                                         // 0x04C8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Set_Icon;                                      // 0x04D0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Icon_New;                                      // 0x04D8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonShopLabel*                       WBP_ShopLabel;                                     // 0x04E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          FocusSoundCue;                                     // 0x04E8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          DecisionSoundCue;                                  // 0x04F0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          CancelSoundCue;                                    // 0x04F8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateColor                            PriceTextColorActive;                              // 0x0500(0x0014)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                            PriceTextColorDisable;                             // 0x0514(0x0014)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_528[0x70];                                     // 0x0528(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetSelected();
	class UWidget* OnDirection(EUINavigation InNavigation);
	void PlayAnimDefault();
	void PlayAnimLock();
	void PlayAnimUnLock();
	void PlaySECancel();
	void PlaySEDecision();

	const struct FLinearColor GetBaseColorOnNotSelected() const;
	const struct FLinearColor GetBaseColorOnSelected() const;
	class APlayerController* GetPlayerController() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachinePartsScrollBoxItem">();
	}
	static class UMachinePartsScrollBoxItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachinePartsScrollBoxItem>();
	}
};
static_assert(alignof(UMachinePartsScrollBoxItem) == 0x000008, "Wrong alignment on UMachinePartsScrollBoxItem");
static_assert(sizeof(UMachinePartsScrollBoxItem) == 0x000598, "Wrong size on UMachinePartsScrollBoxItem");
static_assert(offsetof(UMachinePartsScrollBoxItem, BaseColorOnNotSelected) == 0x000480, "Member 'UMachinePartsScrollBoxItem::BaseColorOnNotSelected' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, BaseColorOnSelected) == 0x000490, "Member 'UMachinePartsScrollBoxItem::BaseColorOnSelected' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, MLC_Base) == 0x0004A0, "Member 'UMachinePartsScrollBoxItem::MLC_Base' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, DMY_PartsIcon_FR) == 0x0004A8, "Member 'UMachinePartsScrollBoxItem::DMY_PartsIcon_FR' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, P1_Cursor) == 0x0004B0, "Member 'UMachinePartsScrollBoxItem::P1_Cursor' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, P2_Cursor) == 0x0004B8, "Member 'UMachinePartsScrollBoxItem::P2_Cursor' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, P3_Cursor) == 0x0004C0, "Member 'UMachinePartsScrollBoxItem::P3_Cursor' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, P4_Cursor) == 0x0004C8, "Member 'UMachinePartsScrollBoxItem::P4_Cursor' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, DSP_Set_Icon) == 0x0004D0, "Member 'UMachinePartsScrollBoxItem::DSP_Set_Icon' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, DSP_Icon_New) == 0x0004D8, "Member 'UMachinePartsScrollBoxItem::DSP_Icon_New' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, WBP_ShopLabel) == 0x0004E0, "Member 'UMachinePartsScrollBoxItem::WBP_ShopLabel' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, FocusSoundCue) == 0x0004E8, "Member 'UMachinePartsScrollBoxItem::FocusSoundCue' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, DecisionSoundCue) == 0x0004F0, "Member 'UMachinePartsScrollBoxItem::DecisionSoundCue' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, CancelSoundCue) == 0x0004F8, "Member 'UMachinePartsScrollBoxItem::CancelSoundCue' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, PriceTextColorActive) == 0x000500, "Member 'UMachinePartsScrollBoxItem::PriceTextColorActive' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBoxItem, PriceTextColorDisable) == 0x000514, "Member 'UMachinePartsScrollBoxItem::PriceTextColorDisable' has a wrong offset!");

// Class UNION.HoverboardInRaceActor
// 0x0008 (0x0798 - 0x0790)
class AHoverboardInRaceActor : public AHoverboardBaseActor
{
public:
	class UUnionStaticMeshComponent*              BodyCutRearMeshComponent;                          // 0x0790(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoverboardInRaceActor">();
	}
	static class AHoverboardInRaceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHoverboardInRaceActor>();
	}
};
static_assert(alignof(AHoverboardInRaceActor) == 0x000008, "Wrong alignment on AHoverboardInRaceActor");
static_assert(sizeof(AHoverboardInRaceActor) == 0x000798, "Wrong size on AHoverboardInRaceActor");
static_assert(offsetof(AHoverboardInRaceActor, BodyCutRearMeshComponent) == 0x000790, "Member 'AHoverboardInRaceActor::BodyCutRearMeshComponent' has a wrong offset!");

// Class UNION.IgnoreRemoveWidgetDataAsset
// 0x0010 (0x0040 - 0x0030)
class UIgnoreRemoveWidgetDataAsset final : public UDataAsset
{
public:
	TArray<class UWidget*>                        IgnoreWidgetArray;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IgnoreRemoveWidgetDataAsset">();
	}
	static class UIgnoreRemoveWidgetDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIgnoreRemoveWidgetDataAsset>();
	}
};
static_assert(alignof(UIgnoreRemoveWidgetDataAsset) == 0x000008, "Wrong alignment on UIgnoreRemoveWidgetDataAsset");
static_assert(sizeof(UIgnoreRemoveWidgetDataAsset) == 0x000040, "Wrong size on UIgnoreRemoveWidgetDataAsset");
static_assert(offsetof(UIgnoreRemoveWidgetDataAsset, IgnoreWidgetArray) == 0x000030, "Member 'UIgnoreRemoveWidgetDataAsset::IgnoreWidgetArray' has a wrong offset!");

// Class UNION.MachineBaseActor
// 0x01E0 (0x0500 - 0x0320)
class AMachineBaseActor : public AVehicleBaseActor
{
public:
	uint8                                         Pad_320[0xC8];                                     // 0x0320(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionSkeletalMeshComponent*            CockpitMeshComponent;                              // 0x03E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAOStaticMeshComponent*            FrontMeshComponent;                                // 0x03F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAOStaticMeshComponent*            RearMeshComponent;                                 // 0x03F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              SideMeshComponent;                                 // 0x0400(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUnionStaticMeshComponent*>      TireMeshComponents;                                // 0x0408(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDataTable*                             TireDataTable;                                     // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CarShadowDataTable;                                // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DummyMaterialInterface;                            // 0x0428(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EMachineCockpitMaterialArea, struct FMachineMaterialData> CockpitMeshMaterials;             // 0x0430(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EMachineBodyMaterialArea, struct FMachineMaterialData> BodyMeshMaterials;                   // 0x0480(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMachineMaterialData>           TireMeshMaterials;                                 // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E0[0x20];                                     // 0x04E0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBodyColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetBodyGlowColor(int32 GlowNo);
	void SetBodySurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetCheckContentReleased(bool Check);
	void SetCockpitColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetCockpitMesh(ECarStatusType InCarStatusType, EDriverSize DriverSize, ECockpitMode CockpitMode, bool bIsEnabledAnimation);
	void SetCockpitSurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetCustomColor(const struct FUserMachineCustomizeData& MachineCustomizeData);
	void SetFrontMesh(EMachineId MachineId);
	void SetFrontSticker(class UTexture* StickerTexture);
	void SetPresetColor(EMachineColorPresetId ColorPresetId);
	void SetRearMesh(EMachineId MachineId);
	void SetRearSticker(class UTexture* StickerTexture);
	void SetSideMesh();
	void SetTireColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetTireGlowColor(int32 GlowNo);
	void SetTireMesh(EMachineId MachineId);
	void SetTireSurface(EMachineColorArea ColorArea, int32 SurfaceNo);

	class UTexture* GetFrontSticker() const;
	class UTexture* GetRearSticker() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineBaseActor">();
	}
	static class AMachineBaseActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMachineBaseActor>();
	}
};
static_assert(alignof(AMachineBaseActor) == 0x000008, "Wrong alignment on AMachineBaseActor");
static_assert(sizeof(AMachineBaseActor) == 0x000500, "Wrong size on AMachineBaseActor");
static_assert(offsetof(AMachineBaseActor, CockpitMeshComponent) == 0x0003E8, "Member 'AMachineBaseActor::CockpitMeshComponent' has a wrong offset!");
static_assert(offsetof(AMachineBaseActor, FrontMeshComponent) == 0x0003F0, "Member 'AMachineBaseActor::FrontMeshComponent' has a wrong offset!");
static_assert(offsetof(AMachineBaseActor, RearMeshComponent) == 0x0003F8, "Member 'AMachineBaseActor::RearMeshComponent' has a wrong offset!");
static_assert(offsetof(AMachineBaseActor, SideMeshComponent) == 0x000400, "Member 'AMachineBaseActor::SideMeshComponent' has a wrong offset!");
static_assert(offsetof(AMachineBaseActor, TireMeshComponents) == 0x000408, "Member 'AMachineBaseActor::TireMeshComponents' has a wrong offset!");
static_assert(offsetof(AMachineBaseActor, TireDataTable) == 0x000418, "Member 'AMachineBaseActor::TireDataTable' has a wrong offset!");
static_assert(offsetof(AMachineBaseActor, CarShadowDataTable) == 0x000420, "Member 'AMachineBaseActor::CarShadowDataTable' has a wrong offset!");
static_assert(offsetof(AMachineBaseActor, DummyMaterialInterface) == 0x000428, "Member 'AMachineBaseActor::DummyMaterialInterface' has a wrong offset!");
static_assert(offsetof(AMachineBaseActor, CockpitMeshMaterials) == 0x000430, "Member 'AMachineBaseActor::CockpitMeshMaterials' has a wrong offset!");
static_assert(offsetof(AMachineBaseActor, BodyMeshMaterials) == 0x000480, "Member 'AMachineBaseActor::BodyMeshMaterials' has a wrong offset!");
static_assert(offsetof(AMachineBaseActor, TireMeshMaterials) == 0x0004D0, "Member 'AMachineBaseActor::TireMeshMaterials' has a wrong offset!");

// Class UNION.MachineInRaceActor
// 0x04E8 (0x09E8 - 0x0500)
class AMachineInRaceActor : public AMachineBaseActor
{
public:
	TArray<class UTireMark*>                      TireMarkComponents;                                // 0x0500(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     TireMarkMaterialInterface;                         // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_518[0x4D0];                                    // 0x0518(0x04D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MontageJumpToSection(class FName SectionName);
	void MontagePlay(EMachineAnimationMontageAssetId AssetId, float PlayRate);
	void MontageStop(EMachineAnimationMontageAssetId AssetId, float InBlendOutTime);
	void MontageStopAll(float InBlendOutTime);
	void SetCarShadow();
	void SetTireMarkScale();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineInRaceActor">();
	}
	static class AMachineInRaceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMachineInRaceActor>();
	}
};
static_assert(alignof(AMachineInRaceActor) == 0x000008, "Wrong alignment on AMachineInRaceActor");
static_assert(sizeof(AMachineInRaceActor) == 0x0009E8, "Wrong size on AMachineInRaceActor");
static_assert(offsetof(AMachineInRaceActor, TireMarkComponents) == 0x000500, "Member 'AMachineInRaceActor::TireMarkComponents' has a wrong offset!");
static_assert(offsetof(AMachineInRaceActor, TireMarkMaterialInterface) == 0x000510, "Member 'AMachineInRaceActor::TireMarkMaterialInterface' has a wrong offset!");

// Class UNION.UnionAssetManager
// 0x0000 (0x04D0 - 0x04D0)
class UUnionAssetManager final : public UAssetManager
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionAssetManager">();
	}
	static class UUnionAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionAssetManager>();
	}
};
static_assert(alignof(UUnionAssetManager) == 0x000008, "Wrong alignment on UUnionAssetManager");
static_assert(sizeof(UUnionAssetManager) == 0x0004D0, "Wrong size on UUnionAssetManager");

// Class UNION.InitializeSequence
// 0x0028 (0x0390 - 0x0368)
class AInitializeSequence : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x28];                                     // 0x0368(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void EndLoadingAnime();
	static void ExecuteLoadSequence(class FName LevelName, float CheckInterval);
	static bool IsLoadedMenuResidentAsset();
	static void StartLoadingAnime();

	void OnExitStateEnterMenu();
	void OnInitStateBody();
	void OnInitStateBoot();
	void OnInitStateEnterMenu();
	void OnUpdateStateBody(float DeltaTime);
	void OnUpdateStateBoot(float DeltaTime);
	void OnUpdateStateEnterMenu(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InitializeSequence">();
	}
	static class AInitializeSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInitializeSequence>();
	}
};
static_assert(alignof(AInitializeSequence) == 0x000008, "Wrong alignment on AInitializeSequence");
static_assert(sizeof(AInitializeSequence) == 0x000390, "Wrong size on AInitializeSequence");

// Class UNION.RewardUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class URewardUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CheckDisplayReward(ERewardType rewardType, int32 rewardId);
	static bool CheckRewardItemCountDisplay(ERewardType rewardType);
	static bool FindNumRewardRivalWinDonpaTicket(int32 RivalLevel, EMenuSpeedClassId SpeedClassId, struct FRewardRedStarRingHonorTableRow* OutData);
	static int32 GetGadgetCurrentRaceCount(int32 TotalRaceCount, class UDataTable* RacecountDataTable, class UDataTable* GadgetPlateDataTable);
	static int32 GetGadgetNextRaceCount(int32 TotalRaceCount, class UDataTable* RacecountDataTable, class UDataTable* GadgetPlateDataTable);
	static int32 GetGadgetPlateRaceCount(class UDataTable* GadgetPlateDataTable);
	static int32 GetGadgetPlateRewardRaceCount(class UDataTable* RacecountDataTable, class UDataTable* GadgetPlateDataTable);
	static bool GetGadgetRaceCountData(int32 TotalRaceCount, class UDataTable* RacecountDataTable, class UDataTable* GadgetPlateDataTable, struct FGadgetRaceCountData* OutRaceCountData, int32* OutIndex);
	static int32 GetGadgetTotalNextRaceCount(int32 InIndex, class UDataTable* RacecountDataTable, class UDataTable* GadgetPlateDataTable);
	static int32 GetNumRewardRivalWinDonpaTicket(int32 RivalLevel, EMenuSpeedClassId SpeedClassId);
	static struct FGadgetRaceCountData GetRaceCountData();
	static TArray<EGadgetId> GetRaceCountGadgetIDs(int32 InRaceCount, class UDataTable* RacecountDataTable, class UDataTable* GadgetPlateDataTable);
	static struct FGadgetRaceCountData GetRaceCountIndexData(class UDataTable* RacecountDataTable, int32 InIndex);
	static ERewardAchievementType GetRewardAchievementTypeByDriverId(class UDataTable* RewardAchievementDriverDataTable, ERewardAchievementDriverType InRewardAchievementDriverType, EDriverId InDriverId);
	static int32 GetRewardItemCount(ERewardType rewardType, int32 rewardId);
	static class UTexture2D* GetRewardItemIconTexture(ERewardType rewardType, int32 rewardId, bool bIsBigIcon);
	static class FText GetRewardItemNameText(ERewardType rewardType, int32 InRewardId, int32 rewardNum);
	static class FText GetRewardTypeText(ERewardType rewardType);
	static void GetWinRivalDonpaTicket(const int32 InRivalLevel, const EMenuSpeedClassId InSpeedClassId, const bool bInStrong, const bool bBonusUpChallenge, int32* OutDonpaTicket, int32* OutAddBonus);
	static bool IsReleasedReward(ERewardType InRewardType, int32 InRewardId);
	static void SetRaceCountData(const struct FGadgetRaceCountData& InData);
	static bool SetReward(ERewardType InRewardType, int32 InRewardId, int32 InRewardNum);
	static void SetRewardForAchievement(const struct FRewardAchievementData& AchievementData);
	static void SetRewardItemIconTexture(ERewardType rewardType, int32 rewardId, class UImage* ImageWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RewardUtilityLibrary">();
	}
	static class URewardUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URewardUtilityLibrary>();
	}
};
static_assert(alignof(URewardUtilityLibrary) == 0x000008, "Wrong alignment on URewardUtilityLibrary");
static_assert(sizeof(URewardUtilityLibrary) == 0x000028, "Wrong size on URewardUtilityLibrary");

// Class UNION.MachinePartsTicketNumber
// 0x0010 (0x02F0 - 0x02E0)
class UMachinePartsTicketNumber : public UUserWidget
{
public:
	class UUnionUITextBlock*                      TXT_Num_DonpaTicket01;                             // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUITextBlock*                      TXT_Num_DonpaTicket02;                             // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetNum(int32 InTicketNum, int32 InUseTicketNum);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachinePartsTicketNumber">();
	}
	static class UMachinePartsTicketNumber* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachinePartsTicketNumber>();
	}
};
static_assert(alignof(UMachinePartsTicketNumber) == 0x000008, "Wrong alignment on UMachinePartsTicketNumber");
static_assert(sizeof(UMachinePartsTicketNumber) == 0x0002F0, "Wrong size on UMachinePartsTicketNumber");
static_assert(offsetof(UMachinePartsTicketNumber, TXT_Num_DonpaTicket01) == 0x0002E0, "Member 'UMachinePartsTicketNumber::TXT_Num_DonpaTicket01' has a wrong offset!");
static_assert(offsetof(UMachinePartsTicketNumber, TXT_Num_DonpaTicket02) == 0x0002E8, "Member 'UMachinePartsTicketNumber::TXT_Num_DonpaTicket02' has a wrong offset!");

// Class UNION.ItemDarkChaoPerformance
// 0x01D8 (0x0620 - 0x0448)
class AItemDarkChaoPerformance : public AItemPerformanceBase
{
public:
	uint8                                         Pad_448[0x8];                                      // 0x0448(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitTriggerTime;                                    // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StealEffectPlayTime;                               // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisappearTime;                                     // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisappearHoldMeshTime;                             // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsorbEnableTime;                                  // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MeshModelScaleValue;                               // 0x0468(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionSkeletalMeshComponent*            DarkChaoSkeletalMeshComponent;                     // 0x0480(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              m_ItemBoxMeshComponent;                            // 0x0488(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        HoldItemRootComponent;                             // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      DarkChaoNiagaraComponent;                          // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    DarckChaoSoundComponent;                           // 0x04A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    DarckChaoThrowSoundComponent;                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    DarckChaoLearveSoundComponent;                     // 0x04B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemStaticBodyComponent*               DarckChaoStaticBody;                               // 0x04B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VioletVoidAbsorbTargetScale;                       // 0x04C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             tableItemMeshData;                                 // 0x04D8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E0[0x90];                                     // 0x04E0(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemDarkChaoAnimInstance*              AnimInstance;                                      // 0x0570(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRacerStatusObject*                m_racerStatusCache;                                // 0x0578(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_580[0xA0];                                     // 0x0580(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayItemEffect();
	void PlayLeaveSound();
	void PlayThrowSound();
	void SetPerfomanceType(EItemDarkChaoPerfomanceType ChaoType);
	void SetRingDisplayTimer(EItemDarkChaoPerfomanceType ChaoType);
	void SettingRingVisible(bool IsEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemDarkChaoPerformance">();
	}
	static class AItemDarkChaoPerformance* GetDefaultObj()
	{
		return GetDefaultObjImpl<AItemDarkChaoPerformance>();
	}
};
static_assert(alignof(AItemDarkChaoPerformance) == 0x000008, "Wrong alignment on AItemDarkChaoPerformance");
static_assert(sizeof(AItemDarkChaoPerformance) == 0x000620, "Wrong size on AItemDarkChaoPerformance");
static_assert(offsetof(AItemDarkChaoPerformance, HitTriggerTime) == 0x000450, "Member 'AItemDarkChaoPerformance::HitTriggerTime' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, StealEffectPlayTime) == 0x000454, "Member 'AItemDarkChaoPerformance::StealEffectPlayTime' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, DisappearTime) == 0x000458, "Member 'AItemDarkChaoPerformance::DisappearTime' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, DisappearHoldMeshTime) == 0x00045C, "Member 'AItemDarkChaoPerformance::DisappearHoldMeshTime' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, AbsorbEnableTime) == 0x000460, "Member 'AItemDarkChaoPerformance::AbsorbEnableTime' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, MeshModelScaleValue) == 0x000468, "Member 'AItemDarkChaoPerformance::MeshModelScaleValue' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, DarkChaoSkeletalMeshComponent) == 0x000480, "Member 'AItemDarkChaoPerformance::DarkChaoSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, m_ItemBoxMeshComponent) == 0x000488, "Member 'AItemDarkChaoPerformance::m_ItemBoxMeshComponent' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, HoldItemRootComponent) == 0x000490, "Member 'AItemDarkChaoPerformance::HoldItemRootComponent' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, DarkChaoNiagaraComponent) == 0x000498, "Member 'AItemDarkChaoPerformance::DarkChaoNiagaraComponent' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, DarckChaoSoundComponent) == 0x0004A0, "Member 'AItemDarkChaoPerformance::DarckChaoSoundComponent' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, DarckChaoThrowSoundComponent) == 0x0004A8, "Member 'AItemDarkChaoPerformance::DarckChaoThrowSoundComponent' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, DarckChaoLearveSoundComponent) == 0x0004B0, "Member 'AItemDarkChaoPerformance::DarckChaoLearveSoundComponent' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, DarckChaoStaticBody) == 0x0004B8, "Member 'AItemDarkChaoPerformance::DarckChaoStaticBody' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, VioletVoidAbsorbTargetScale) == 0x0004C0, "Member 'AItemDarkChaoPerformance::VioletVoidAbsorbTargetScale' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, tableItemMeshData) == 0x0004D8, "Member 'AItemDarkChaoPerformance::tableItemMeshData' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, AnimInstance) == 0x000570, "Member 'AItemDarkChaoPerformance::AnimInstance' has a wrong offset!");
static_assert(offsetof(AItemDarkChaoPerformance, m_racerStatusCache) == 0x000578, "Member 'AItemDarkChaoPerformance::m_racerStatusCache' has a wrong offset!");

// Class UNION.ItemHeroChaoPerformance
// 0x0010 (0x0458 - 0x0448)
class AItemHeroChaoPerformance final : public AItemPerformanceBase
{
public:
	class UNiagaraComponent*                      HeroChaoNiagaraComponent;                          // 0x0448(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         HeroChaoSoundComponent;                            // 0x0450(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemHeroChaoPerformance">();
	}
	static class AItemHeroChaoPerformance* GetDefaultObj()
	{
		return GetDefaultObjImpl<AItemHeroChaoPerformance>();
	}
};
static_assert(alignof(AItemHeroChaoPerformance) == 0x000008, "Wrong alignment on AItemHeroChaoPerformance");
static_assert(sizeof(AItemHeroChaoPerformance) == 0x000458, "Wrong size on AItemHeroChaoPerformance");
static_assert(offsetof(AItemHeroChaoPerformance, HeroChaoNiagaraComponent) == 0x000448, "Member 'AItemHeroChaoPerformance::HeroChaoNiagaraComponent' has a wrong offset!");
static_assert(offsetof(AItemHeroChaoPerformance, HeroChaoSoundComponent) == 0x000450, "Member 'AItemHeroChaoPerformance::HeroChaoSoundComponent' has a wrong offset!");

// Class UNION.MachineUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UMachineUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ConvPartsNo(EMachineId MachineId, int32 InFrontPartsNo, int32 InRearPartsNo, int32* OutFrontPartsNo, int32* OutRearPartsNo, bool* bUseCommonSideParts);
	static void GetCenterPartsPath(int32 InFrontPartsNo, EMachinePartsSize InFrontPartsSize, int32 InRearPartsNo, EMachinePartsSize InRearPartsSize, class FName ExtndName, struct FSoftObjectPath* OutPath);
	static void GetCenterPartsPathByMachineId(EMachineId FrontPartsId, EMachineId RearPartsId, struct FSoftObjectPath* OutPath);
	static int32 GetColorAreaNo(EMachineColorArea ColorArea);
	static EMachineColorPresetId GetColorPresetId(EMachineId InMachineID);
	static void GetExtndName(const class FString& FrontPartsName, const class FString& RearPartsName, class FString* OutExtndName);
	static void GetMachinePartsData(EMachineId InMachineID, struct FMachinePartsData* OutMachinePartsData);
	static void GetPrimaryAssetIdsByCustomizeData(const struct FUserMachineCustomizeData& MachineCustomizeData, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIds);
	static void GetPrimaryAssetIdsByRacerIndex(int32 InRacerIndex, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIds);
	static void GetRootPath(class FName ExtndName, class FString* OutPath);
	static void GetSidePartsPath(ECarStatusType InCarStatusType, int32 InFrontPartsNo, int32 InRearPartsNo, class FName ExtndName, struct FSoftObjectPath* OutPath);
	static void GetSidePartsPathByMachineId(EMachineId FrontPartsId, EMachineId RearPartsId, struct FSoftObjectPath* OutPath);
	static bool IsFrontUnitIndex(uint8 UnitIndex);
	static bool IsRearUnitIndex(uint8 UnitIndex);
	static bool IsValidEmissiveTexture(class UMaterialInstanceDynamic* Mid);
	static void SetColorParameter(class UMaterialInstanceDynamic* Mid, const struct FMachineColorParam& Param, int32 AreaNo);
	static void SetGlowParameter(class UMaterialInstanceDynamic* Mid, const struct FMachineGlowParam& Param);
	static void SetStickerTexture(class UMaterialInstanceDynamic* Mid, class UTexture* StickerTexture);
	static void SetSurfaceParameter(class UMaterialInstanceDynamic* Mid, const struct FMachineSurfaceParam& Param, int32 AreaNo);
	static void ShowMaterialSection(class USkeletalMeshComponent* MeshComponent, class FName MaterialSlotName, bool bShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineUtilityLibrary">();
	}
	static class UMachineUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineUtilityLibrary>();
	}
};
static_assert(alignof(UMachineUtilityLibrary) == 0x000008, "Wrong alignment on UMachineUtilityLibrary");
static_assert(sizeof(UMachineUtilityLibrary) == 0x000028, "Wrong size on UMachineUtilityLibrary");

// Class UNION.ItemHolderComponent
// 0x01A0 (0x0240 - 0x00A0)
class alignas(0x10) UItemHolderComponent final : public UActorComponent
{
public:
	bool                                          bManualUpdate;                                     // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             HoldItemDataTable;                                 // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHoldItem*                              HoldItemActor;                                     // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x188];                                     // 0x00B8(0x0188)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool HoldItem(const struct FHoldItemCreateParam& Param);
	void ReleaseItem();
	void SetHiddenItem(const bool bHidden);
	void SetLightChannels(bool Channel0, bool Channel1, bool Channel2);
	bool SetupComponent(const EDriverId DriverId);
	void SetupDefaultPosition();
	void UpdateItemPosition();
	void UseItem();

	bool IsDefaultPositionSetup() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemHolderComponent">();
	}
	static class UItemHolderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemHolderComponent>();
	}
};
static_assert(alignof(UItemHolderComponent) == 0x000010, "Wrong alignment on UItemHolderComponent");
static_assert(sizeof(UItemHolderComponent) == 0x000240, "Wrong size on UItemHolderComponent");
static_assert(offsetof(UItemHolderComponent, bManualUpdate) == 0x0000A0, "Member 'UItemHolderComponent::bManualUpdate' has a wrong offset!");
static_assert(offsetof(UItemHolderComponent, HoldItemDataTable) == 0x0000A8, "Member 'UItemHolderComponent::HoldItemDataTable' has a wrong offset!");
static_assert(offsetof(UItemHolderComponent, HoldItemActor) == 0x0000B0, "Member 'UItemHolderComponent::HoldItemActor' has a wrong offset!");

// Class UNION.MachineStickerSlotIcon
// 0x0090 (0x0510 - 0x0480)
class UMachineStickerSlotIcon : public UUnionUIButtonBase
{
public:
	TMulticastInlineDelegate<void(class UUnionUIButtonBase* Button)> OnFaceButtonTopEvent;           // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UImage*                                 MLC_Base;                                          // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 DMY_StickerImage;                                  // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 DSP_Cursor;                                        // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonTextBalloon*                     WBP_CMN_TextBalloon;                               // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 DSP_Set_Icon;                                      // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 DSP_Icon_New;                                      // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 MLC_LiquidIcon;                                    // 0x04C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x04D0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsClearSoundEnable;                               // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          FocusSoundCue;                                     // 0x04E0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          DecisionSoundCue;                                  // 0x04E8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          CancelSoundCue;                                    // 0x04F0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          StickerClearSoundCue;                              // 0x04F8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_500[0x10];                                     // 0x0500(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideCursor();
	void PlaySECancel();
	void PlaySEDecision();
	void PlaySEFocus();
	void PlaySEStickerClear();
	void SetItemData(const struct FMachineStickerSlotItemData& InItemData);
	void SetStickerDesignTexture(class UTexture2D* InStickerDesignTexture);
	void Setup(class APlayerController* InPlayerController);
	void ShowCursor();

	const struct FMachineStickerSlotItemData GetItemData() const;
	class APlayerController* GetPlayerController() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineStickerSlotIcon">();
	}
	static class UMachineStickerSlotIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineStickerSlotIcon>();
	}
};
static_assert(alignof(UMachineStickerSlotIcon) == 0x000008, "Wrong alignment on UMachineStickerSlotIcon");
static_assert(sizeof(UMachineStickerSlotIcon) == 0x000510, "Wrong size on UMachineStickerSlotIcon");
static_assert(offsetof(UMachineStickerSlotIcon, OnFaceButtonTopEvent) == 0x000480, "Member 'UMachineStickerSlotIcon::OnFaceButtonTopEvent' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, MLC_Base) == 0x000490, "Member 'UMachineStickerSlotIcon::MLC_Base' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, DMY_StickerImage) == 0x000498, "Member 'UMachineStickerSlotIcon::DMY_StickerImage' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, DSP_Cursor) == 0x0004A0, "Member 'UMachineStickerSlotIcon::DSP_Cursor' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, WBP_CMN_TextBalloon) == 0x0004A8, "Member 'UMachineStickerSlotIcon::WBP_CMN_TextBalloon' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, DSP_Set_Icon) == 0x0004B0, "Member 'UMachineStickerSlotIcon::DSP_Set_Icon' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, DSP_Icon_New) == 0x0004B8, "Member 'UMachineStickerSlotIcon::DSP_Icon_New' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, MLC_LiquidIcon) == 0x0004C0, "Member 'UMachineStickerSlotIcon::MLC_LiquidIcon' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, SlotIndex) == 0x0004C8, "Member 'UMachineStickerSlotIcon::SlotIndex' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, PlayerController) == 0x0004D0, "Member 'UMachineStickerSlotIcon::PlayerController' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, bIsClearSoundEnable) == 0x0004D8, "Member 'UMachineStickerSlotIcon::bIsClearSoundEnable' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, FocusSoundCue) == 0x0004E0, "Member 'UMachineStickerSlotIcon::FocusSoundCue' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, DecisionSoundCue) == 0x0004E8, "Member 'UMachineStickerSlotIcon::DecisionSoundCue' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, CancelSoundCue) == 0x0004F0, "Member 'UMachineStickerSlotIcon::CancelSoundCue' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotIcon, StickerClearSoundCue) == 0x0004F8, "Member 'UMachineStickerSlotIcon::StickerClearSoundCue' has a wrong offset!");

// Class UNION.ItemWarpRingPerformance
// 0x0048 (0x0490 - 0x0448)
class AItemWarpRingPerformance : public AItemPerformanceBase
{
public:
	class UUnionAtomComponent*                    WarpStartSound;                                    // 0x0448(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    WarpEndSound;                                      // 0x0450(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CarPosition;                                       // 0x0458(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInWarpRingExit;                                 // 0x0470(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTeamWarp;                                       // 0x0471(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_472[0x1E];                                     // 0x0472(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemWarpRingPerformance">();
	}
	static class AItemWarpRingPerformance* GetDefaultObj()
	{
		return GetDefaultObjImpl<AItemWarpRingPerformance>();
	}
};
static_assert(alignof(AItemWarpRingPerformance) == 0x000008, "Wrong alignment on AItemWarpRingPerformance");
static_assert(sizeof(AItemWarpRingPerformance) == 0x000490, "Wrong size on AItemWarpRingPerformance");
static_assert(offsetof(AItemWarpRingPerformance, WarpStartSound) == 0x000448, "Member 'AItemWarpRingPerformance::WarpStartSound' has a wrong offset!");
static_assert(offsetof(AItemWarpRingPerformance, WarpEndSound) == 0x000450, "Member 'AItemWarpRingPerformance::WarpEndSound' has a wrong offset!");
static_assert(offsetof(AItemWarpRingPerformance, CarPosition) == 0x000458, "Member 'AItemWarpRingPerformance::CarPosition' has a wrong offset!");
static_assert(offsetof(AItemWarpRingPerformance, bIsInWarpRingExit) == 0x000470, "Member 'AItemWarpRingPerformance::bIsInWarpRingExit' has a wrong offset!");
static_assert(offsetof(AItemWarpRingPerformance, bIsTeamWarp) == 0x000471, "Member 'AItemWarpRingPerformance::bIsTeamWarp' has a wrong offset!");

// Class UNION.ItemWeightPerformance
// 0x0170 (0x05B8 - 0x0448)
class AItemWeightPerformance : public AItemPerformanceBase
{
public:
	uint8                                         Pad_448[0x10];                                     // 0x0448(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        MeshRoot;                                          // 0x0458(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              Mesh;                                              // 0x0460(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      BreakEffect;                                       // 0x0468(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    WeightSound;                                       // 0x0470(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemStaticBodyComponent*               StaticBody;                                        // 0x0478(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallTime;                                          // 0x0480(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoScale;                                         // 0x0484(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_485[0x3];                                      // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoScaledHeight;                                  // 0x0488(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitTriggerTime;                                    // 0x048C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingWaitTime;                                   // 0x0490(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandScaleFadeOutTime;                              // 0x0494(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VioletVoidAbsorbTargetScale;                       // 0x0498(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZScaleMin;                                         // 0x04B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Rank1MeshReference;                                // 0x04B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Rank2MeshReference;                                // 0x04C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           DropDownCurve;                                     // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          FallSound;                                         // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          BreakSound;                                        // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E0[0xD8];                                     // 0x04E0(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemWeightPerformance">();
	}
	static class AItemWeightPerformance* GetDefaultObj()
	{
		return GetDefaultObjImpl<AItemWeightPerformance>();
	}
};
static_assert(alignof(AItemWeightPerformance) == 0x000008, "Wrong alignment on AItemWeightPerformance");
static_assert(sizeof(AItemWeightPerformance) == 0x0005B8, "Wrong size on AItemWeightPerformance");
static_assert(offsetof(AItemWeightPerformance, MeshRoot) == 0x000458, "Member 'AItemWeightPerformance::MeshRoot' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, Mesh) == 0x000460, "Member 'AItemWeightPerformance::Mesh' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, BreakEffect) == 0x000468, "Member 'AItemWeightPerformance::BreakEffect' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, WeightSound) == 0x000470, "Member 'AItemWeightPerformance::WeightSound' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, StaticBody) == 0x000478, "Member 'AItemWeightPerformance::StaticBody' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, FallTime) == 0x000480, "Member 'AItemWeightPerformance::FallTime' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, AutoScale) == 0x000484, "Member 'AItemWeightPerformance::AutoScale' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, AutoScaledHeight) == 0x000488, "Member 'AItemWeightPerformance::AutoScaledHeight' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, HitTriggerTime) == 0x00048C, "Member 'AItemWeightPerformance::HitTriggerTime' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, LandingWaitTime) == 0x000490, "Member 'AItemWeightPerformance::LandingWaitTime' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, LandScaleFadeOutTime) == 0x000494, "Member 'AItemWeightPerformance::LandScaleFadeOutTime' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, VioletVoidAbsorbTargetScale) == 0x000498, "Member 'AItemWeightPerformance::VioletVoidAbsorbTargetScale' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, ZScaleMin) == 0x0004B0, "Member 'AItemWeightPerformance::ZScaleMin' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, Rank1MeshReference) == 0x0004B8, "Member 'AItemWeightPerformance::Rank1MeshReference' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, Rank2MeshReference) == 0x0004C0, "Member 'AItemWeightPerformance::Rank2MeshReference' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, DropDownCurve) == 0x0004C8, "Member 'AItemWeightPerformance::DropDownCurve' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, FallSound) == 0x0004D0, "Member 'AItemWeightPerformance::FallSound' has a wrong offset!");
static_assert(offsetof(AItemWeightPerformance, BreakSound) == 0x0004D8, "Member 'AItemWeightPerformance::BreakSound' has a wrong offset!");

// Class UNION.MachinePartsSelectWindow
// 0x0178 (0x0550 - 0x03D8)
class UMachinePartsSelectWindow : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(EMachinePartsType InPartsType, EMachineId InPartsId)> OnItemFocused; // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EMachinePartsType InPartsType, EMachineId InPartsId)> OnItemSelected; // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecision;                                        // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCancel;                                          // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecisionButtonFocused;                           // 0x0418(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDialogShow;                                      // 0x0428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EDialogResult Result)> OnDialogHide;                               // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class URichTextBlock*                         TXT_TypeName;                                      // 0x0448(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           VBScrollBox;                                       // 0x0450(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_Balloon;                            // 0x0458(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachinePartsTextBalloonGroup*          WBP_MachineSelect_Sub_PartsScrollBox_TextBalloon;  // 0x0460(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachinePartsTextBalloonGroup*          WBP_MachineSelect_Sub_ReleaseDate_TextBalloon;     // 0x0468(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDecisionWidget*                        WBP_MachineSelect_Sub_Btn_OK;                      // 0x0470(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOutOfContentButton*                    OutOfContentButton;                                // 0x0478(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMachinePartsSelectWindowMode                 Mode;                                              // 0x0480(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      TextBalloonPosition;                               // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FText                                   DecisionButtonText;                                // 0x0498(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsAutoFocusEnabled;                               // 0x04A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldPlayShoulderSound;                          // 0x04A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4AA[0x6];                                      // 0x04AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMachinePartsDialogParameter           DialogParam;                                       // 0x04B0(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class URewardDialog*                          Dialog;                                            // 0x0500(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ADLCStoreDialogActor*                   DLCDialog;                                         // 0x0508(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_510[0x40];                                     // 0x0510(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DecisionButton_OnCancel(class UUnionUIButtonBase* Button);
	void DecisionButton_OnDecision(class UUnionUIButtonBase* Button);
	void DecisionButton_OnDirection(class UUnionUIButtonBase* Button, EUnionUIControlDir Dir);
	void DecisionButton_OnFocus(class UUnionUIButtonBase* Button);
	void DeleteDialogDLC(bool IsAccept);
	void FrontScrollBox_OnItemFocused(class UUnionUIButtonBase* InButton);
	void FrontScrollBox_OnItemSelected();
	void GetFocusedPartsIdAndType(EMachineId* OutMachineId, EMachinePartsType* OutMachinePartsType);
	void OnDialogEventCreateDLC(EMachinePartsType InType);
	void OnDialogEventCreatePrice(const struct FMachinePartsUIData& InPartsData, EMachinePartsType InType);
	void OnDialogEventCreateUnlock(const struct FMachinePartsUIData& InPartsData, EMachinePartsType InType);
	void OnDialogEventDelete();
	void OnDialogEventResult(EDialogResult InResult);
	void RearScrollBox_OnItemFocused(class UUnionUIButtonBase* InButton);
	void RearScrollBox_OnItemSelected();
	void ScrollBox_OnCancel();
	void ScrollBox_OnEscape(class UMachinePartsScrollBox* InSender, EUnionUIControlDir InDirection);
	void ScrollImmediately();
	void SetFocusByPartsTypeAndId(EMachinePartsType InPartsType, EMachineId InPartsId);
	void SetFocusToFirstSelectedItem();
	void SetupInternal();
	void TireScrollBox_OnItemFocused(class UUnionUIButtonBase* InButton);
	void TireScrollBox_OnItemSelected();

	void GetCurrentPartsIds(EMachineId* OutFrontPartsId, EMachineId* OutRearPartsId, EMachineId* OutTirePartsId) const;
	class APlayerController* GetPlayerController() const;
	void GetSelectedPartsIds(EMachineId* OutFrontPartsId, EMachineId* OutRearPartsId, EMachineId* OutTirePartsId) const;
	class URewardDialog* OnCreateRewardDialog() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachinePartsSelectWindow">();
	}
	static class UMachinePartsSelectWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachinePartsSelectWindow>();
	}
};
static_assert(alignof(UMachinePartsSelectWindow) == 0x000008, "Wrong alignment on UMachinePartsSelectWindow");
static_assert(sizeof(UMachinePartsSelectWindow) == 0x000550, "Wrong size on UMachinePartsSelectWindow");
static_assert(offsetof(UMachinePartsSelectWindow, OnItemFocused) == 0x0003D8, "Member 'UMachinePartsSelectWindow::OnItemFocused' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, OnItemSelected) == 0x0003E8, "Member 'UMachinePartsSelectWindow::OnItemSelected' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, OnDecision) == 0x0003F8, "Member 'UMachinePartsSelectWindow::OnDecision' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, OnCancel) == 0x000408, "Member 'UMachinePartsSelectWindow::OnCancel' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, OnDecisionButtonFocused) == 0x000418, "Member 'UMachinePartsSelectWindow::OnDecisionButtonFocused' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, OnDialogShow) == 0x000428, "Member 'UMachinePartsSelectWindow::OnDialogShow' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, OnDialogHide) == 0x000438, "Member 'UMachinePartsSelectWindow::OnDialogHide' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, TXT_TypeName) == 0x000448, "Member 'UMachinePartsSelectWindow::TXT_TypeName' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, VBScrollBox) == 0x000450, "Member 'UMachinePartsSelectWindow::VBScrollBox' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, WidgetSwitcher_Balloon) == 0x000458, "Member 'UMachinePartsSelectWindow::WidgetSwitcher_Balloon' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, WBP_MachineSelect_Sub_PartsScrollBox_TextBalloon) == 0x000460, "Member 'UMachinePartsSelectWindow::WBP_MachineSelect_Sub_PartsScrollBox_TextBalloon' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, WBP_MachineSelect_Sub_ReleaseDate_TextBalloon) == 0x000468, "Member 'UMachinePartsSelectWindow::WBP_MachineSelect_Sub_ReleaseDate_TextBalloon' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, WBP_MachineSelect_Sub_Btn_OK) == 0x000470, "Member 'UMachinePartsSelectWindow::WBP_MachineSelect_Sub_Btn_OK' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, OutOfContentButton) == 0x000478, "Member 'UMachinePartsSelectWindow::OutOfContentButton' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, Mode) == 0x000480, "Member 'UMachinePartsSelectWindow::Mode' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, TextBalloonPosition) == 0x000488, "Member 'UMachinePartsSelectWindow::TextBalloonPosition' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, DecisionButtonText) == 0x000498, "Member 'UMachinePartsSelectWindow::DecisionButtonText' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, bIsAutoFocusEnabled) == 0x0004A8, "Member 'UMachinePartsSelectWindow::bIsAutoFocusEnabled' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, bShouldPlayShoulderSound) == 0x0004A9, "Member 'UMachinePartsSelectWindow::bShouldPlayShoulderSound' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, DialogParam) == 0x0004B0, "Member 'UMachinePartsSelectWindow::DialogParam' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, Dialog) == 0x000500, "Member 'UMachinePartsSelectWindow::Dialog' has a wrong offset!");
static_assert(offsetof(UMachinePartsSelectWindow, DLCDialog) == 0x000508, "Member 'UMachinePartsSelectWindow::DLCDialog' has a wrong offset!");

// Class UNION.RaceSequenceStatePauseMenu
// 0x0008 (0x0118 - 0x0110)
class URaceSequenceStatePauseMenu : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StopVehiclePawnSE();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStatePauseMenu">();
	}
	static class URaceSequenceStatePauseMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStatePauseMenu>();
	}
};
static_assert(alignof(URaceSequenceStatePauseMenu) == 0x000008, "Wrong alignment on URaceSequenceStatePauseMenu");
static_assert(sizeof(URaceSequenceStatePauseMenu) == 0x000118, "Wrong size on URaceSequenceStatePauseMenu");

// Class UNION.RaceResultSequenceStateSave
// 0x0000 (0x0108 - 0x0108)
class URaceResultSequenceStateSave : public URaceResultSequenceStateBase
{
public:
	void OnAppSaveComplete(ESaveDataStatus Status);
	void OnPlayLogSaveComplete(ESaveDataStatus Status);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceResultSequenceStateSave">();
	}
	static class URaceResultSequenceStateSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceResultSequenceStateSave>();
	}
};
static_assert(alignof(URaceResultSequenceStateSave) == 0x000008, "Wrong alignment on URaceResultSequenceStateSave");
static_assert(sizeof(URaceResultSequenceStateSave) == 0x000108, "Wrong size on URaceResultSequenceStateSave");

// Class UNION.MachineTypeScrollControl
// 0x01F0 (0x0760 - 0x0570)
class UMachineTypeScrollControl : public UUnionUIAnimScrollControl
{
public:
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, ECarStatusType SelectedMachineType, EMachineId SelectedBaseMachineId)> OnMachineTypeScrollStartEvent; // 0x0570(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, ECarStatusType SelectedMachineType, EMachineId SelectedBaseMachineId)> OnMachineTypeScrollEndEvent; // 0x0580(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex, ECarStatusType SelectedMachineType, EMachineId SelectedBaseMachineId)> OnMachineTypeDecideEvent; // 0x0590(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SelectedPlayerControllerIndex)> OnMachineTypeCancelEvent;    // 0x05A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              AnimTranslation_00;                                // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              AnimTranslation_01;                                // 0x05C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              AnimTranslation_02;                                // 0x05D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              AnimTranslation_03;                                // 0x05E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              AnimTranslation_04;                                // 0x05F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              AnimTranslation_05;                                // 0x0608(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              AnimTranslation_06;                                // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                AnimMargin_00;                                     // 0x0628(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                AnimMargin_01;                                     // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                AnimMargin_02;                                     // 0x0648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                AnimMargin_03;                                     // 0x0658(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                AnimMargin_04;                                     // 0x0668(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                AnimMargin_05;                                     // 0x0678(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                AnimMargin_06;                                     // 0x0688(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                           AnimLinearColor_00;                                // 0x0698(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           AnimLinearColor_01;                                // 0x06A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           AnimLinearColor_02;                                // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           AnimLinearColor_03;                                // 0x06C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           AnimLinearColor_04;                                // 0x06D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           AnimLinearColor_05;                                // 0x06E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           AnimLinearColor_06;                                // 0x06F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              AnimVisible_00;                                    // 0x0708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              AnimVisible_01;                                    // 0x0709(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              AnimVisible_02;                                    // 0x070A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              AnimVisible_03;                                    // 0x070B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              AnimVisible_04;                                    // 0x070C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              AnimVisible_05;                                    // 0x070D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              AnimVisible_06;                                    // 0x070E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_70F[0x1];                                      // 0x070F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UReadyWidget*                           WBP_MachineSelect_Sub_Ready;                       // 0x0710(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOutOfContentButton*                    OutOfContentButton;                                // 0x0718(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_720[0x40];                                     // 0x0720(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ECarStatusType AddLoopMachineType(ECarStatusType InMachineType, int32 InAdd);
	void Cancel(class UUnionUIButtonBase* InButton);
	void Decision(class UUnionUIButtonBase* InButton);
	void Direction(EUnionUIControlDir InDir);
	void GetBoxInfo(int32 InIndex, int32* IndexOnBox, ECarStatusType* machineType, int32* CenterElementTypeIndex, EMachineId* MachineId);
	void GetCurrentCenterBoxInfo(int32* IndexOnBox, ECarStatusType* machineType, int32* CenterElementTypeIndex, EMachineId* MachineId);
	void OnCancelBack();
	void OnDirectionLeftRight(bool IsRight);
	void OnFocusLastSelected(ECarStatusType InMachineType, EMachineId InMachineID);
	void PlaySECancel();
	void PlaySEError();
	void PlaySESelect();
	void PlayUISceneAnimation(EUnionUISceneAnimation InAnimation);
	void ResetParam();
	void SetCenterCursorVisible(bool NewVisible);
	void SetCrossButtonPlayerIndex();
	void SetDecidedAll(bool IsAllDecided);
	void SetElement();
	void SetElementPlayerIndex();
	void SetEnableInputButton(bool IsEnable);
	void SetupElement();
	void SetupHeader(ECarStatusType InMachineType);
	void SetupPresentElement();
	void SetVisibleCrossButton(bool IsVisible_0);
	void SetVisibleReady(bool IsVisible_0);
	void SetVisibleTips(bool IsVisible_0);
	void UpdateIconTextures();
	void UpdateMachineTypeColorWidth();
	void UpdateScrollPointBox();

	int32 GetPlayerIndex() const;
	EMachineId GetSelectMachineID() const;
	ECarStatusType GetSelectMachineType() const;
	bool IsCharaMachineSelectMode() const;
	bool IsGarageMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineTypeScrollControl">();
	}
	static class UMachineTypeScrollControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineTypeScrollControl>();
	}
};
static_assert(alignof(UMachineTypeScrollControl) == 0x000008, "Wrong alignment on UMachineTypeScrollControl");
static_assert(sizeof(UMachineTypeScrollControl) == 0x000760, "Wrong size on UMachineTypeScrollControl");
static_assert(offsetof(UMachineTypeScrollControl, OnMachineTypeScrollStartEvent) == 0x000570, "Member 'UMachineTypeScrollControl::OnMachineTypeScrollStartEvent' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, OnMachineTypeScrollEndEvent) == 0x000580, "Member 'UMachineTypeScrollControl::OnMachineTypeScrollEndEvent' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, OnMachineTypeDecideEvent) == 0x000590, "Member 'UMachineTypeScrollControl::OnMachineTypeDecideEvent' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, OnMachineTypeCancelEvent) == 0x0005A0, "Member 'UMachineTypeScrollControl::OnMachineTypeCancelEvent' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, PlayerIndex) == 0x0005B0, "Member 'UMachineTypeScrollControl::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimTranslation_00) == 0x0005B8, "Member 'UMachineTypeScrollControl::AnimTranslation_00' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimTranslation_01) == 0x0005C8, "Member 'UMachineTypeScrollControl::AnimTranslation_01' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimTranslation_02) == 0x0005D8, "Member 'UMachineTypeScrollControl::AnimTranslation_02' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimTranslation_03) == 0x0005E8, "Member 'UMachineTypeScrollControl::AnimTranslation_03' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimTranslation_04) == 0x0005F8, "Member 'UMachineTypeScrollControl::AnimTranslation_04' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimTranslation_05) == 0x000608, "Member 'UMachineTypeScrollControl::AnimTranslation_05' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimTranslation_06) == 0x000618, "Member 'UMachineTypeScrollControl::AnimTranslation_06' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimMargin_00) == 0x000628, "Member 'UMachineTypeScrollControl::AnimMargin_00' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimMargin_01) == 0x000638, "Member 'UMachineTypeScrollControl::AnimMargin_01' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimMargin_02) == 0x000648, "Member 'UMachineTypeScrollControl::AnimMargin_02' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimMargin_03) == 0x000658, "Member 'UMachineTypeScrollControl::AnimMargin_03' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimMargin_04) == 0x000668, "Member 'UMachineTypeScrollControl::AnimMargin_04' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimMargin_05) == 0x000678, "Member 'UMachineTypeScrollControl::AnimMargin_05' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimMargin_06) == 0x000688, "Member 'UMachineTypeScrollControl::AnimMargin_06' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimLinearColor_00) == 0x000698, "Member 'UMachineTypeScrollControl::AnimLinearColor_00' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimLinearColor_01) == 0x0006A8, "Member 'UMachineTypeScrollControl::AnimLinearColor_01' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimLinearColor_02) == 0x0006B8, "Member 'UMachineTypeScrollControl::AnimLinearColor_02' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimLinearColor_03) == 0x0006C8, "Member 'UMachineTypeScrollControl::AnimLinearColor_03' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimLinearColor_04) == 0x0006D8, "Member 'UMachineTypeScrollControl::AnimLinearColor_04' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimLinearColor_05) == 0x0006E8, "Member 'UMachineTypeScrollControl::AnimLinearColor_05' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimLinearColor_06) == 0x0006F8, "Member 'UMachineTypeScrollControl::AnimLinearColor_06' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimVisible_00) == 0x000708, "Member 'UMachineTypeScrollControl::AnimVisible_00' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimVisible_01) == 0x000709, "Member 'UMachineTypeScrollControl::AnimVisible_01' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimVisible_02) == 0x00070A, "Member 'UMachineTypeScrollControl::AnimVisible_02' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimVisible_03) == 0x00070B, "Member 'UMachineTypeScrollControl::AnimVisible_03' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimVisible_04) == 0x00070C, "Member 'UMachineTypeScrollControl::AnimVisible_04' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimVisible_05) == 0x00070D, "Member 'UMachineTypeScrollControl::AnimVisible_05' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, AnimVisible_06) == 0x00070E, "Member 'UMachineTypeScrollControl::AnimVisible_06' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, WBP_MachineSelect_Sub_Ready) == 0x000710, "Member 'UMachineTypeScrollControl::WBP_MachineSelect_Sub_Ready' has a wrong offset!");
static_assert(offsetof(UMachineTypeScrollControl, OutOfContentButton) == 0x000718, "Member 'UMachineTypeScrollControl::OutOfContentButton' has a wrong offset!");

// Class UNION.JukeboxActor
// 0x0180 (0x0410 - 0x0290)
class AJukeboxActor final : public AActor
{
public:
	TMulticastInlineDelegate<void()>              OnLoadAssetCompleted;                              // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              OnBGMCompleted;                                    // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              OnBGMStart;                                        // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	class USoundAtomCue*                          DefaultBGM;                                        // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FUserAlbumTrackID>              CustomLapBGMDataAlbumTrackList;                    // 0x02C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FCustomLapBGMIndex>             CurrentCustomLapBGMIndex;                          // 0x02D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FCustomLapBGMIndex>             PrevCustomLapBGMIndex;                             // 0x02E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FCustomLapBGMIndex                     SelectedAlbumTrackIndex;                           // 0x02F8(0x000C)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAlbumStruct>                   AlbumList;                                         // 0x0308(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FTrackStruct>                   TrackList;                                         // 0x0318(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<int32, struct FAlbumCondition>           AlbumConditionMap;                                 // 0x0328(0x0050)(NativeAccessSpecifierPrivate)
	TMap<int32, struct FTrackCondition>           TrackConditionMap;                                 // 0x0378(0x0050)(NativeAccessSpecifierPrivate)
	class UJukeboxDataAsset*                      JukeboxDataAsset;                                  // 0x03C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           PlayTrackTimerHandle;                              // 0x03D0(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionAtomComponent*                    JukeboxAtomComponent;                              // 0x03D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundAtomCue*                          NextBGMCue;                                        // 0x03E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundAtomCue*                          CurrentBGMCue;                                     // 0x03E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F0[0x8];                                      // 0x03F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsDirty;                                          // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAutoPlayMusic;                                    // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShuffle;                                          // 0x03FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFirstEnter;                                     // 0x03FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingAlbumPosition;                              // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingTrackPosition;                              // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentAlbumPosition;                              // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentTrackPosition;                              // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlbumSelected;                                    // 0x040C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40D[0x3];                                      // 0x040D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<int32> GetDefaultAvailableAlbumIdsNeedNewMark();

	void AddTrackIndexToFavoriteAlbum(int32 TrackIndex);
	EAvailableLap CheckAvailableLapFromFavoriteAlbum();
	bool CurrentAlbumHasTrack();
	void EraseNewMarkAlbumAndTrack(int32 AlbumIndex);
	void FixInvalidAssignedFavoriteAlbum();
	void GetAppearedAlbumConditionList(TArray<struct FAlbumCondition>* OutAlbumCondition);
	void GetAppearedAlbumInfo(int32 Index_0, struct FAlbumInfo* AlbumInfo, struct FAlbumCondition* AlbumCondition, bool* IsRegistered);
	void GetAppearedAlbumInfoList(TArray<struct FAlbumInfo>* AlbumInfo);
	void GetAppearedTrackInfo(int32 Index_0, bool* IsExist, struct FTrackInfo* TrackInfo, struct FTrackCondition* TrackCondition, bool* IsPlaying, bool* IsRegistered);
	void GetAvailableLapInCurrentAlbum(bool* AvailableOnRace, bool* Lap12Available, bool* Lap3Available);
	int32 GetCurrentTrackPosition();
	void GetCustomLapBGMInfo(int32 Lap, ESelectedState* State, struct FAlbumInfo* AlbumInfo, struct FTrackInfo* TrackInfo, int32* AlbumID, int32* TrackID);
	struct FAlbumStruct GetFavoriteAlbum();
	bool GetIsDirty();
	void GetPlayingTrackInfo(struct FTrackInfo* TrackInfo);
	void GetSelectedAlbumTrackInfo(ESelectedState* State, struct FAlbumInfo* AlbumInfo, struct FTrackInfo* TrackInfo, int32* AlbumID, int32* TrackID);
	int32 GetTrackNumInCurrentAlbum();
	bool IsRaceBGMContainedFavoriteAlbum();
	void LoadAsset();
	void LoadData();
	void MoveDownAlbum();
	void MoveDownTrack();
	void MoveUpAlbum();
	void MoveUpTrack();
	void PlayCurrentTrack();
	void PlayDefaultBGM();
	void PlayTrack(int32 AlbumPosition, int32 TrackPosition);
	void PlayTrackScheduled(int32 AlbumPosition, int32 TrackPosition);
	void PreFinalize();
	void RemoveTrackIndexToFavoriteAlbum(int32 TrackIndex);
	void ResetCustomLapBGM();
	void SaveData();
	void SelectAlbum();
	void SelectTrack();
	void SetAvailableAlbum(int32 AlbumID, bool bNew);
	void SetCurrentAlbumNew(bool bNew);
	void SetCurrentTrackNew(bool bNew);
	void SetCustomLapBGM(int32 Lap);
	void SetDefaultAvailableTrackInAlbum(int32 AlbumID, bool bNew);
	void SetDefaultBGM(class USoundAtomCue* Cue);
	void SetDefaultCustomLapBGM(int32 Lap);
	void SetFavorite(bool bFav);
	void SetNew(bool bNew);
	void SetSelectedAlbumTrackIndex();
	void ToggleFavoriteCurrentSelected();
	void UnSetCustomLapBGM(int32 Lap);
	void UpdatePrevCustomLapBGM();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JukeboxActor">();
	}
	static class AJukeboxActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AJukeboxActor>();
	}
};
static_assert(alignof(AJukeboxActor) == 0x000008, "Wrong alignment on AJukeboxActor");
static_assert(sizeof(AJukeboxActor) == 0x000410, "Wrong size on AJukeboxActor");
static_assert(offsetof(AJukeboxActor, OnLoadAssetCompleted) == 0x000290, "Member 'AJukeboxActor::OnLoadAssetCompleted' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, OnBGMCompleted) == 0x0002A0, "Member 'AJukeboxActor::OnBGMCompleted' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, OnBGMStart) == 0x0002B0, "Member 'AJukeboxActor::OnBGMStart' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, DefaultBGM) == 0x0002C0, "Member 'AJukeboxActor::DefaultBGM' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, CustomLapBGMDataAlbumTrackList) == 0x0002C8, "Member 'AJukeboxActor::CustomLapBGMDataAlbumTrackList' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, CurrentCustomLapBGMIndex) == 0x0002D8, "Member 'AJukeboxActor::CurrentCustomLapBGMIndex' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, PrevCustomLapBGMIndex) == 0x0002E8, "Member 'AJukeboxActor::PrevCustomLapBGMIndex' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, SelectedAlbumTrackIndex) == 0x0002F8, "Member 'AJukeboxActor::SelectedAlbumTrackIndex' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, AlbumList) == 0x000308, "Member 'AJukeboxActor::AlbumList' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, TrackList) == 0x000318, "Member 'AJukeboxActor::TrackList' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, AlbumConditionMap) == 0x000328, "Member 'AJukeboxActor::AlbumConditionMap' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, TrackConditionMap) == 0x000378, "Member 'AJukeboxActor::TrackConditionMap' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, JukeboxDataAsset) == 0x0003C8, "Member 'AJukeboxActor::JukeboxDataAsset' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, PlayTrackTimerHandle) == 0x0003D0, "Member 'AJukeboxActor::PlayTrackTimerHandle' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, JukeboxAtomComponent) == 0x0003D8, "Member 'AJukeboxActor::JukeboxAtomComponent' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, NextBGMCue) == 0x0003E0, "Member 'AJukeboxActor::NextBGMCue' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, CurrentBGMCue) == 0x0003E8, "Member 'AJukeboxActor::CurrentBGMCue' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, bIsDirty) == 0x0003F8, "Member 'AJukeboxActor::bIsDirty' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, bAutoPlayMusic) == 0x0003F9, "Member 'AJukeboxActor::bAutoPlayMusic' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, bShuffle) == 0x0003FA, "Member 'AJukeboxActor::bShuffle' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, bIsFirstEnter) == 0x0003FB, "Member 'AJukeboxActor::bIsFirstEnter' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, PlayingAlbumPosition) == 0x0003FC, "Member 'AJukeboxActor::PlayingAlbumPosition' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, PlayingTrackPosition) == 0x000400, "Member 'AJukeboxActor::PlayingTrackPosition' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, CurrentAlbumPosition) == 0x000404, "Member 'AJukeboxActor::CurrentAlbumPosition' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, CurrentTrackPosition) == 0x000408, "Member 'AJukeboxActor::CurrentTrackPosition' has a wrong offset!");
static_assert(offsetof(AJukeboxActor, bAlbumSelected) == 0x00040C, "Member 'AJukeboxActor::bAlbumSelected' has a wrong offset!");

// Class UNION.JukeboxSelectWidget
// 0x0000 (0x02E0 - 0x02E0)
class UJukeboxSelectWidget final : public UUserWidget
{
public:
	void RefleshAlbum();
	void RefleshTrack();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JukeboxSelectWidget">();
	}
	static class UJukeboxSelectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJukeboxSelectWidget>();
	}
};
static_assert(alignof(UJukeboxSelectWidget) == 0x000008, "Wrong alignment on UJukeboxSelectWidget");
static_assert(sizeof(UJukeboxSelectWidget) == 0x0002E0, "Wrong size on UJukeboxSelectWidget");

// Class UNION.MenuLightingLevel
// 0x0008 (0x02A0 - 0x0298)
class AMenuLightingLevel final : public ALevelScriptActor
{
public:
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuLightingLevel">();
	}
	static class AMenuLightingLevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMenuLightingLevel>();
	}
};
static_assert(alignof(AMenuLightingLevel) == 0x000008, "Wrong alignment on AMenuLightingLevel");
static_assert(sizeof(AMenuLightingLevel) == 0x0002A0, "Wrong size on AMenuLightingLevel");

// Class UNION.ResultDonpaTicket
// 0x0070 (0x0398 - 0x0328)
class UResultDonpaTicket : public UUnionUIInputWidget
{
public:
	EMenuSpeedClassId                             SpeedClassId;                                      // 0x0328(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RivalLevel;                                        // 0x032C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPowerRival;                                       // 0x0330(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlayAnimFinished;                                 // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_332[0x6];                                      // 0x0332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUITextBlock*                      _BeforeTicketText;                                 // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUITextBlock*                      _AfterTicketText;                                  // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _AddTicketText;                                    // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOverlay*                               _BonusOverlay;                                     // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              OnFinishedEvent;                                   // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OpenOnAcceptDelegate;                              // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OpenEndDelegate;                                   // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              CloseEndDelegate;                                  // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void AddOpen(int32 AddNum, bool bIsCountUp);
	void AddOpenForRival(int32 AddNum);
	void AppendRaceResultDonpaTicket();
	void AppendRivalLevelDonpaTicket();
	void BeginRivalLevelDonpaTicket(const int32 ZOrder);
	void CloseAnimation();
	int32 GetAddTicketCount();
	void PlayAnimOnBPFromRivalLevel();
	void SetForceCloseTime(float InTime);

	bool IsAnimFinished() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResultDonpaTicket">();
	}
	static class UResultDonpaTicket* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResultDonpaTicket>();
	}
};
static_assert(alignof(UResultDonpaTicket) == 0x000008, "Wrong alignment on UResultDonpaTicket");
static_assert(sizeof(UResultDonpaTicket) == 0x000398, "Wrong size on UResultDonpaTicket");
static_assert(offsetof(UResultDonpaTicket, SpeedClassId) == 0x000328, "Member 'UResultDonpaTicket::SpeedClassId' has a wrong offset!");
static_assert(offsetof(UResultDonpaTicket, RivalLevel) == 0x00032C, "Member 'UResultDonpaTicket::RivalLevel' has a wrong offset!");
static_assert(offsetof(UResultDonpaTicket, bPowerRival) == 0x000330, "Member 'UResultDonpaTicket::bPowerRival' has a wrong offset!");
static_assert(offsetof(UResultDonpaTicket, bPlayAnimFinished) == 0x000331, "Member 'UResultDonpaTicket::bPlayAnimFinished' has a wrong offset!");
static_assert(offsetof(UResultDonpaTicket, _BeforeTicketText) == 0x000338, "Member 'UResultDonpaTicket::_BeforeTicketText' has a wrong offset!");
static_assert(offsetof(UResultDonpaTicket, _AfterTicketText) == 0x000340, "Member 'UResultDonpaTicket::_AfterTicketText' has a wrong offset!");
static_assert(offsetof(UResultDonpaTicket, _AddTicketText) == 0x000348, "Member 'UResultDonpaTicket::_AddTicketText' has a wrong offset!");
static_assert(offsetof(UResultDonpaTicket, _BonusOverlay) == 0x000350, "Member 'UResultDonpaTicket::_BonusOverlay' has a wrong offset!");
static_assert(offsetof(UResultDonpaTicket, OnFinishedEvent) == 0x000358, "Member 'UResultDonpaTicket::OnFinishedEvent' has a wrong offset!");
static_assert(offsetof(UResultDonpaTicket, OpenOnAcceptDelegate) == 0x000368, "Member 'UResultDonpaTicket::OpenOnAcceptDelegate' has a wrong offset!");
static_assert(offsetof(UResultDonpaTicket, OpenEndDelegate) == 0x000378, "Member 'UResultDonpaTicket::OpenEndDelegate' has a wrong offset!");
static_assert(offsetof(UResultDonpaTicket, CloseEndDelegate) == 0x000388, "Member 'UResultDonpaTicket::CloseEndDelegate' has a wrong offset!");

// Class UNION.JukeboxSequence
// 0x0010 (0x0138 - 0x0128)
class UJukeboxSequence final : public UMenuSequenceSubStateBase
{
public:
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JukeboxSequence">();
	}
	static class UJukeboxSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJukeboxSequence>();
	}
};
static_assert(alignof(UJukeboxSequence) == 0x000008, "Wrong alignment on UJukeboxSequence");
static_assert(sizeof(UJukeboxSequence) == 0x000138, "Wrong size on UJukeboxSequence");
static_assert(offsetof(UJukeboxSequence, OnBackEvent) == 0x000128, "Member 'UJukeboxSequence::OnBackEvent' has a wrong offset!");

// Class UNION.MatchingSequenceStateBase
// 0x0018 (0x0110 - 0x00F8)
class UMatchingSequenceStateBase : public UHierarchicalStateMachineStateComponent
{
public:
	EMenuSequenceSubState                         DefaultMenuState;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void SetNextMatchingSequenceState(EOnlineSequenceState InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatchingSequenceStateBase">();
	}
	static class UMatchingSequenceStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatchingSequenceStateBase>();
	}
};
static_assert(alignof(UMatchingSequenceStateBase) == 0x000008, "Wrong alignment on UMatchingSequenceStateBase");
static_assert(sizeof(UMatchingSequenceStateBase) == 0x000110, "Wrong size on UMatchingSequenceStateBase");
static_assert(offsetof(UMatchingSequenceStateBase, DefaultMenuState) == 0x0000F8, "Member 'UMatchingSequenceStateBase::DefaultMenuState' has a wrong offset!");
static_assert(offsetof(UMatchingSequenceStateBase, OnBackEvent) == 0x000100, "Member 'UMatchingSequenceStateBase::OnBackEvent' has a wrong offset!");

// Class UNION.JukeBoxSequenceStateExit
// 0x0000 (0x00F8 - 0x00F8)
class UJukeBoxSequenceStateExit final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JukeBoxSequenceStateExit">();
	}
	static class UJukeBoxSequenceStateExit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJukeBoxSequenceStateExit>();
	}
};
static_assert(alignof(UJukeBoxSequenceStateExit) == 0x000008, "Wrong alignment on UJukeBoxSequenceStateExit");
static_assert(sizeof(UJukeBoxSequenceStateExit) == 0x0000F8, "Wrong size on UJukeBoxSequenceStateExit");

// Class UNION.JukeBoxSequenceStateSelectBGM
// 0x0000 (0x00F8 - 0x00F8)
class UJukeBoxSequenceStateSelectBGM final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JukeBoxSequenceStateSelectBGM">();
	}
	static class UJukeBoxSequenceStateSelectBGM* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJukeBoxSequenceStateSelectBGM>();
	}
};
static_assert(alignof(UJukeBoxSequenceStateSelectBGM) == 0x000008, "Wrong alignment on UJukeBoxSequenceStateSelectBGM");
static_assert(sizeof(UJukeBoxSequenceStateSelectBGM) == 0x0000F8, "Wrong size on UJukeBoxSequenceStateSelectBGM");

// Class UNION.MachineSurfaceEffectComponent
// 0x0218 (0x02E0 - 0x00C8)
class UMachineSurfaceEffectComponent final : public UMachineBaseComponent
{
public:
	class UMachineSurfaceEffectDataAsset*         SurfaceEffectDataAsset;                            // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EUnionSurfaceType, struct FMachineSurfaceData> CarAssets;                                   // 0x00D0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<EUnionSurfaceType, struct FMachineSurfaceData> BoatAssets;                                  // 0x0120(0x0050)(NativeAccessSpecifierPrivate)
	struct FMachineSurfaceData                    FlightAsset;                                       // 0x0170(0x0080)(NoDestructor, NativeAccessSpecifierPrivate)
	TMap<EUnionSurfaceType, struct FMachineSurfaceData> BodycutAssets;                               // 0x01F0(0x0050)(NativeAccessSpecifierPrivate)
	struct FMachineSurfaceData                    TravelRingBoostAsset;                              // 0x0240(0x0080)(NoDestructor, NativeAccessSpecifierPrivate)
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C8[0x18];                                     // 0x02C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void VehicleModelEventInt(const int32& EventId, const int32& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineSurfaceEffectComponent">();
	}
	static class UMachineSurfaceEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineSurfaceEffectComponent>();
	}
};
static_assert(alignof(UMachineSurfaceEffectComponent) == 0x000010, "Wrong alignment on UMachineSurfaceEffectComponent");
static_assert(sizeof(UMachineSurfaceEffectComponent) == 0x0002E0, "Wrong size on UMachineSurfaceEffectComponent");
static_assert(offsetof(UMachineSurfaceEffectComponent, SurfaceEffectDataAsset) == 0x0000C8, "Member 'UMachineSurfaceEffectComponent::SurfaceEffectDataAsset' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectComponent, CarAssets) == 0x0000D0, "Member 'UMachineSurfaceEffectComponent::CarAssets' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectComponent, BoatAssets) == 0x000120, "Member 'UMachineSurfaceEffectComponent::BoatAssets' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectComponent, FlightAsset) == 0x000170, "Member 'UMachineSurfaceEffectComponent::FlightAsset' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectComponent, BodycutAssets) == 0x0001F0, "Member 'UMachineSurfaceEffectComponent::BodycutAssets' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectComponent, TravelRingBoostAsset) == 0x000240, "Member 'UMachineSurfaceEffectComponent::TravelRingBoostAsset' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectComponent, NiagaraComponent) == 0x0002C0, "Member 'UMachineSurfaceEffectComponent::NiagaraComponent' has a wrong offset!");

// Class UNION.JukeBoxSequenceStateSettingBGM
// 0x0000 (0x00F8 - 0x00F8)
class UJukeBoxSequenceStateSettingBGM final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JukeBoxSequenceStateSettingBGM">();
	}
	static class UJukeBoxSequenceStateSettingBGM* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJukeBoxSequenceStateSettingBGM>();
	}
};
static_assert(alignof(UJukeBoxSequenceStateSettingBGM) == 0x000008, "Wrong alignment on UJukeBoxSequenceStateSettingBGM");
static_assert(sizeof(UJukeBoxSequenceStateSettingBGM) == 0x0000F8, "Wrong size on UJukeBoxSequenceStateSettingBGM");

// Class UNION.StaffrollTertiaryWithSecondaryTextWidget
// 0x0038 (0x0320 - 0x02E8)
class UStaffrollTertiaryWithSecondaryTextWidget final : public UStaffrollTextWidget
{
public:
	class UUnionRichTextBlock*                    _SecondaryTextWidget;                              // 0x02E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UUnionRichTextBlock*>            _TertiaryForDoubleTextWidgets;                     // 0x02F0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UUnionRichTextBlock*>            _TertiaryForSingleTextWidgets;                     // 0x0300(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UWidget*                                _SpacerWidget;                                     // 0x0310(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollTertiaryWithSecondaryTextWidget">();
	}
	static class UStaffrollTertiaryWithSecondaryTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollTertiaryWithSecondaryTextWidget>();
	}
};
static_assert(alignof(UStaffrollTertiaryWithSecondaryTextWidget) == 0x000008, "Wrong alignment on UStaffrollTertiaryWithSecondaryTextWidget");
static_assert(sizeof(UStaffrollTertiaryWithSecondaryTextWidget) == 0x000320, "Wrong size on UStaffrollTertiaryWithSecondaryTextWidget");
static_assert(offsetof(UStaffrollTertiaryWithSecondaryTextWidget, _SecondaryTextWidget) == 0x0002E8, "Member 'UStaffrollTertiaryWithSecondaryTextWidget::_SecondaryTextWidget' has a wrong offset!");
static_assert(offsetof(UStaffrollTertiaryWithSecondaryTextWidget, _TertiaryForDoubleTextWidgets) == 0x0002F0, "Member 'UStaffrollTertiaryWithSecondaryTextWidget::_TertiaryForDoubleTextWidgets' has a wrong offset!");
static_assert(offsetof(UStaffrollTertiaryWithSecondaryTextWidget, _TertiaryForSingleTextWidgets) == 0x000300, "Member 'UStaffrollTertiaryWithSecondaryTextWidget::_TertiaryForSingleTextWidgets' has a wrong offset!");
static_assert(offsetof(UStaffrollTertiaryWithSecondaryTextWidget, _SpacerWidget) == 0x000310, "Member 'UStaffrollTertiaryWithSecondaryTextWidget::_SpacerWidget' has a wrong offset!");

// Class UNION.JukeboxSettingWidget
// 0x0000 (0x02E0 - 0x02E0)
class UJukeboxSettingWidget final : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JukeboxSettingWidget">();
	}
	static class UJukeboxSettingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJukeboxSettingWidget>();
	}
};
static_assert(alignof(UJukeboxSettingWidget) == 0x000008, "Wrong alignment on UJukeboxSettingWidget");
static_assert(sizeof(UJukeboxSettingWidget) == 0x0002E0, "Wrong size on UJukeboxSettingWidget");

// Class UNION.JukeboxTopWidget
// 0x0000 (0x02E0 - 0x02E0)
class UJukeboxTopWidget final : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JukeboxTopWidget">();
	}
	static class UJukeboxTopWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJukeboxTopWidget>();
	}
};
static_assert(alignof(UJukeboxTopWidget) == 0x000008, "Wrong alignment on UJukeboxTopWidget");
static_assert(sizeof(UJukeboxTopWidget) == 0x0002E0, "Wrong size on UJukeboxTopWidget");

// Class UNION.JukeboxUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UJukeboxUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void GetJukeboxLapBGM(int32 Lap, class FString* BGMName, bool* IsFound);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JukeboxUtilityLibrary">();
	}
	static class UJukeboxUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJukeboxUtilityLibrary>();
	}
};
static_assert(alignof(UJukeboxUtilityLibrary) == 0x000008, "Wrong alignment on UJukeboxUtilityLibrary");
static_assert(sizeof(UJukeboxUtilityLibrary) == 0x000028, "Wrong size on UJukeboxUtilityLibrary");

// Class UNION.MenuRacerMachine
// 0x0000 (0x0500 - 0x0500)
class AMenuRacerMachine : public AMachineBaseActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuRacerMachine">();
	}
	static class AMenuRacerMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMenuRacerMachine>();
	}
};
static_assert(alignof(AMenuRacerMachine) == 0x000008, "Wrong alignment on AMenuRacerMachine");
static_assert(sizeof(AMenuRacerMachine) == 0x000500, "Wrong size on AMenuRacerMachine");

// Class UNION.LapTimer
// 0x0030 (0x0058 - 0x0028)
class ULapTimer final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLapTimerResult>                LapResults;                                        // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void Finish();
	void Lap(const class FString& EventTag);
	void Start();

	float GetCurrentElapsedTime() const;
	void GetResult(float* OutSecond) const;
	void GetResultWithLap(float* OutSecond, TArray<struct FLapTimerResult>* OutLapResults) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LapTimer">();
	}
	static class ULapTimer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULapTimer>();
	}
};
static_assert(alignof(ULapTimer) == 0x000008, "Wrong alignment on ULapTimer");
static_assert(sizeof(ULapTimer) == 0x000058, "Wrong size on ULapTimer");
static_assert(offsetof(ULapTimer, LapResults) == 0x000048, "Member 'ULapTimer::LapResults' has a wrong offset!");

// Class UNION.LapTimerLibrary
// 0x0000 (0x0028 - 0x0028)
class ULapTimerLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void OutputLog(const class ULapTimer* Timer, const class FString& Title);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LapTimerLibrary">();
	}
	static class ULapTimerLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULapTimerLibrary>();
	}
};
static_assert(alignof(ULapTimerLibrary) == 0x000008, "Wrong alignment on ULapTimerLibrary");
static_assert(sizeof(ULapTimerLibrary) == 0x000028, "Wrong size on ULapTimerLibrary");

// Class UNION.MachineCustomizeAuraSelectState
// 0x0050 (0x0148 - 0x00F8)
class UMachineCustomizeAuraSelectState : public UMachineCustomizePage
{
public:
	class FText                                   DialogButtonTextYes;                               // 0x00F8(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   DialogButtonTextNo;                                // 0x0108(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   DialogButtonTextOK;                                // 0x0118(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	class URewardDialog*                          Dialog;                                            // 0x0128(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_130[0x18];                                     // 0x0130(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class URewardDialog* CreateRewardDialog();
	void DialogCallback(EDialogResult InResult);
	void EventCancel(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void EventDecision(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void EventFocus(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void EventShowNewButton(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void EventUnfocus(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void MatchingTimeOut();
	void PlaySoundImpossible();
	void PlaySoundPossible();

	class UMachineCustomizeCustomList* GetCustomList() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeAuraSelectState">();
	}
	static class UMachineCustomizeAuraSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeAuraSelectState>();
	}
};
static_assert(alignof(UMachineCustomizeAuraSelectState) == 0x000008, "Wrong alignment on UMachineCustomizeAuraSelectState");
static_assert(sizeof(UMachineCustomizeAuraSelectState) == 0x000148, "Wrong size on UMachineCustomizeAuraSelectState");
static_assert(offsetof(UMachineCustomizeAuraSelectState, DialogButtonTextYes) == 0x0000F8, "Member 'UMachineCustomizeAuraSelectState::DialogButtonTextYes' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeAuraSelectState, DialogButtonTextNo) == 0x000108, "Member 'UMachineCustomizeAuraSelectState::DialogButtonTextNo' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeAuraSelectState, DialogButtonTextOK) == 0x000118, "Member 'UMachineCustomizeAuraSelectState::DialogButtonTextOK' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeAuraSelectState, Dialog) == 0x000128, "Member 'UMachineCustomizeAuraSelectState::Dialog' has a wrong offset!");

// Class UNION.LegendCompeLobbyContext
// 0x0000 (0x0448 - 0x0448)
class ULegendCompeLobbyContext final : public UCommonLobbyContext
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LegendCompeLobbyContext">();
	}
	static class ULegendCompeLobbyContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULegendCompeLobbyContext>();
	}
};
static_assert(alignof(ULegendCompeLobbyContext) == 0x000008, "Wrong alignment on ULegendCompeLobbyContext");
static_assert(sizeof(ULegendCompeLobbyContext) == 0x000448, "Wrong size on ULegendCompeLobbyContext");

// Class UNION.LegendCompeLobbyControlComponent
// 0x0010 (0x0120 - 0x0110)
class ULegendCompeLobbyControlComponent final : public UNetLobbyControlComponent
{
public:
	TSubclassOf<class ULegendCompeLobbyContext>   LobbyContextClass;                                 // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULegendCompeMatchmakingContext> MatchmakingContextClass;                       // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LegendCompeLobbyControlComponent">();
	}
	static class ULegendCompeLobbyControlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULegendCompeLobbyControlComponent>();
	}
};
static_assert(alignof(ULegendCompeLobbyControlComponent) == 0x000008, "Wrong alignment on ULegendCompeLobbyControlComponent");
static_assert(sizeof(ULegendCompeLobbyControlComponent) == 0x000120, "Wrong size on ULegendCompeLobbyControlComponent");
static_assert(offsetof(ULegendCompeLobbyControlComponent, LobbyContextClass) == 0x000110, "Member 'ULegendCompeLobbyControlComponent::LobbyContextClass' has a wrong offset!");
static_assert(offsetof(ULegendCompeLobbyControlComponent, MatchmakingContextClass) == 0x000118, "Member 'ULegendCompeLobbyControlComponent::MatchmakingContextClass' has a wrong offset!");

// Class UNION.MachineAnimNotifyState
// 0x0000 (0x0030 - 0x0030)
class UMachineAnimNotifyState final : public UAnimNotifyState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineAnimNotifyState">();
	}
	static class UMachineAnimNotifyState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineAnimNotifyState>();
	}
};
static_assert(alignof(UMachineAnimNotifyState) == 0x000008, "Wrong alignment on UMachineAnimNotifyState");
static_assert(sizeof(UMachineAnimNotifyState) == 0x000030, "Wrong size on UMachineAnimNotifyState");

// Class UNION.LegendCompeLobbyMemberContext
// 0x0000 (0x00F0 - 0x00F0)
class ULegendCompeLobbyMemberContext final : public UCommonLobbyMemberContext
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LegendCompeLobbyMemberContext">();
	}
	static class ULegendCompeLobbyMemberContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULegendCompeLobbyMemberContext>();
	}
};
static_assert(alignof(ULegendCompeLobbyMemberContext) == 0x000008, "Wrong alignment on ULegendCompeLobbyMemberContext");
static_assert(sizeof(ULegendCompeLobbyMemberContext) == 0x0000F0, "Wrong size on ULegendCompeLobbyMemberContext");

// Class UNION.RateRankUtility
// 0x0000 (0x0028 - 0x0028)
class URateRankUtility final : public UBlueprintFunctionLibrary
{
public:
	static ERateRank GetByteRankToRateRank(uint8 ByteRank);
	static struct FGaugePointResult GetGaugePointUpOrDown(float Now, float RemainAdd, float Speed, float High, float Low);
	static ERateRank GetIntRankToRateRank(int32 IntRank);
	static int32 GetMaxPointAtRank(ERateRank InRateRank);
	static int32 GetMinPointAtRank(ERateRank InRateRank);
	static ERateRank GetRateRankBack(ERateRank NowRateRank);
	static int32 GetRateRankCategoryNo(ERateRank Rank);
	static ERateRank GetRateRankNext(ERateRank NowRateRank);
	static int32 GetRateRankPoint(const struct FRateRankPoint& Table, int32 Rank);
	static int32 GetRateRankToIntRank(ERateRank NowRateRank);
	static struct FRateRankUIData GetRateRankUIData(ERateRank NowRateRank);
	static ERateRank GetRateToRank(int32 Rate);
	static bool IsRateRank_DifferentCategory(ERateRank NowRateRank, ERateRank NextRateRank);
	static bool IsRateRankLegend(ERateRank RateRank);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RateRankUtility">();
	}
	static class URateRankUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<URateRankUtility>();
	}
};
static_assert(alignof(URateRankUtility) == 0x000008, "Wrong alignment on URateRankUtility");
static_assert(sizeof(URateRankUtility) == 0x000028, "Wrong size on URateRankUtility");

// Class UNION.LegendCompeMasterDataHelper
// 0x0000 (0x0028 - 0x0028)
class ULegendCompeMasterDataHelper final : public UBlueprintFunctionLibrary
{
public:
	static bool CheckLegendCompeRankingCalcDateTime(class UNetMasterDataManageSubsystem* Subsystem);
	static bool CheckLegendCompeStartDateTime(class UNetMasterDataManageSubsystem* Subsystem);
	static bool CheckLegendCompeStartDateTimeFromParam(class UNetMasterDataManageSubsystem* Subsystem, const struct FDateTime& CheckUtcTime);
	static bool CheckLegendCompeStartNoticeDateTime(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetLegendCompeEndTime(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetLegendCompeEndUTCTime(class UNetMasterDataManageSubsystem* Subsystem);
	static int32 GetLegendCompeId(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetLegendCompeNoticeStartTime(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetLegendCompeNoticeStartUTCTime(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetLegendCompeRankingCalcEndTime(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetLegendCompeRankingCalcEndUTCTime(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetLegendCompeStartTime(class UNetMasterDataManageSubsystem* Subsystem);
	static struct FDateTime GetLegendCompeStartUTCTime(class UNetMasterDataManageSubsystem* Subsystem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LegendCompeMasterDataHelper">();
	}
	static class ULegendCompeMasterDataHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULegendCompeMasterDataHelper>();
	}
};
static_assert(alignof(ULegendCompeMasterDataHelper) == 0x000008, "Wrong alignment on ULegendCompeMasterDataHelper");
static_assert(sizeof(ULegendCompeMasterDataHelper) == 0x000028, "Wrong size on ULegendCompeMasterDataHelper");

// Class UNION.MenuRacerInterface
// 0x0000 (0x0000 - 0x0000)
class IMenuRacerInterface final
{
public:
	void SetupTranformForCharaMachine(int32 PlayerIndex, int32 SelectedPlayerCount);
	void SetupTranformForLobby(int32 PlayerIndex);
	void SetupTranformForTopMenu(int32 PlayerIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuRacerInterface">();
	}
	static class IMenuRacerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMenuRacerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IMenuRacerInterface) == 0x000001, "Wrong alignment on IMenuRacerInterface");
static_assert(sizeof(IMenuRacerInterface) == 0x000001, "Wrong size on IMenuRacerInterface");

// Class UNION.LegendCompeMatchmakingContext
// 0x0000 (0x0270 - 0x0270)
class ULegendCompeMatchmakingContext final : public UCommonMatchmakingContext
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LegendCompeMatchmakingContext">();
	}
	static class ULegendCompeMatchmakingContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULegendCompeMatchmakingContext>();
	}
};
static_assert(alignof(ULegendCompeMatchmakingContext) == 0x000008, "Wrong alignment on ULegendCompeMatchmakingContext");
static_assert(sizeof(ULegendCompeMatchmakingContext) == 0x000270, "Wrong size on ULegendCompeMatchmakingContext");

// Class UNION.MenuSequenceStateBase
// 0x0040 (0x0138 - 0x00F8)
class UMenuSequenceStateBase : public UHierarchicalStateMachineStateComponent
{
public:
	EMenuSequenceMainState                        DefaultMenuState;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   UISceneClass;                                      // 0x0100(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionUISceneBase*                      UIScene;                                           // 0x0128(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMenuSequence*                          OwnerMenuSequence;                                 // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetNextMenuSequenceState(EMenuSequenceMainState InState);

	class AMenuSequence* GetOwnerMenuSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuSequenceStateBase">();
	}
	static class UMenuSequenceStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuSequenceStateBase>();
	}
};
static_assert(alignof(UMenuSequenceStateBase) == 0x000008, "Wrong alignment on UMenuSequenceStateBase");
static_assert(sizeof(UMenuSequenceStateBase) == 0x000138, "Wrong size on UMenuSequenceStateBase");
static_assert(offsetof(UMenuSequenceStateBase, DefaultMenuState) == 0x0000F8, "Member 'UMenuSequenceStateBase::DefaultMenuState' has a wrong offset!");
static_assert(offsetof(UMenuSequenceStateBase, UISceneClass) == 0x000100, "Member 'UMenuSequenceStateBase::UISceneClass' has a wrong offset!");
static_assert(offsetof(UMenuSequenceStateBase, UIScene) == 0x000128, "Member 'UMenuSequenceStateBase::UIScene' has a wrong offset!");
static_assert(offsetof(UMenuSequenceStateBase, OwnerMenuSequence) == 0x000130, "Member 'UMenuSequenceStateBase::OwnerMenuSequence' has a wrong offset!");

// Class UNION.MonsterTruckInRaceActor
// 0x08D8 (0x0BF8 - 0x0320)
class AMonsterTruckInRaceActor : public AVehicleBaseActor
{
public:
	uint8                                         Pad_320[0xC8];                                     // 0x0320(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundAtomCue>           EngineSound;                                       // 0x03E8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           RivalEngineSound;                                  // 0x0410(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionSkeletalMeshComponent*            CockpitMeshComponent;                              // 0x0438(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUnionStaticMeshComponent*>      UnitCarStaticMeshComponents;                       // 0x0440(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UUnionStaticMeshComponent*>      UnitBoatStaticMeshComponents;                      // 0x0450(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UTireMark*>                      TireMarkComponents;                                // 0x0460(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     TireMarkMaterialInterface;                         // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TireDataTable;                                     // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CarShadowDataTable;                                // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              DecalMeshComponent;                                // 0x0488(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DecalMID;                                          // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideVehicleMeshType;                          // 0x0498(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleMeshType                              VehicleMeshTypeOverride;                           // 0x0499(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49A[0x6];                                      // 0x049A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMonsterTruckMaterialType, struct FMachineMaterialData> CockpitMeshMaterials;               // 0x04A0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<EMonsterTruckMaterialType, struct FMachineMaterialData> CockpitSusMeshMaterials;            // 0x04F0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<EMonsterTruckMaterialType, struct FMachineMaterialData> BodyMeshMaterials;                  // 0x0540(0x0050)(NativeAccessSpecifierPrivate)
	TMap<EMonsterTruckMaterialType, struct FMachineMaterialDataArray> UnitCarMeshMaterials;          // 0x0590(0x0050)(NativeAccessSpecifierPrivate)
	TMap<EMonsterTruckMaterialType, struct FMachineMaterialDataArray> UnitBoatMeshMaterials;         // 0x05E0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<EMonsterTruckMaterialType, struct FMachineMaterialDataArray> UnitPlaneMeshMaterials;        // 0x0630(0x0050)(NativeAccessSpecifierPrivate)
	TMap<EMonsterTruckMaterialType, struct FMachineMaterialData> UnitSimplePlaneMeshMaterials;       // 0x0680(0x0050)(NativeAccessSpecifierPrivate)
	TMap<EMonsterTruckMaterialType, struct FMachineMaterialData> UnitSimplePlaneJetMeshMaterials;    // 0x06D0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_720[0x4D8];                                    // 0x0720(0x04D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoadingCockpitAnimation(const EDriverSize InDriverSize);
	void LoadingCockpitMesh(const EDriverSize InDriverSize);
	void MontageJumpToSection(EMachineAnimationMontageAssetId AssetId, class FName SectionName);
	void MontagePlay(EMachineAnimationMontageAssetId AssetId, float PlayRate);
	void MontageStop(EMachineAnimationMontageAssetId AssetId, float InBlendOutTime);
	void OnCountDown(bool bIsPlay, const struct FLinearColor& Color, bool bWithDriver);
	void SetBodyColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetBodyGlowColor(int32 GlowNo);
	void SetBodySurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetCarShadow();
	void SetCockpitColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetCockpitSurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetCustomColor(const struct FUserMachineCustomizeData& MachineCustomizeData);
	void SetPresetColor(EMachineColorPresetId ColorPresetId);
	void SetTireColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetTireGlowColor(int32 GlowNo);
	void SetTireMarkScale();
	void SetTireSurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetupAttachments();
	void SetupCockpitMesh(const EDriverSize InDriverSize, const bool bEnabledAnimation);
	void SetupMaterials();
	void SetVisibleFlightUnitMaterial(const bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MonsterTruckInRaceActor">();
	}
	static class AMonsterTruckInRaceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMonsterTruckInRaceActor>();
	}
};
static_assert(alignof(AMonsterTruckInRaceActor) == 0x000008, "Wrong alignment on AMonsterTruckInRaceActor");
static_assert(sizeof(AMonsterTruckInRaceActor) == 0x000BF8, "Wrong size on AMonsterTruckInRaceActor");
static_assert(offsetof(AMonsterTruckInRaceActor, EngineSound) == 0x0003E8, "Member 'AMonsterTruckInRaceActor::EngineSound' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, RivalEngineSound) == 0x000410, "Member 'AMonsterTruckInRaceActor::RivalEngineSound' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, CockpitMeshComponent) == 0x000438, "Member 'AMonsterTruckInRaceActor::CockpitMeshComponent' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, UnitCarStaticMeshComponents) == 0x000440, "Member 'AMonsterTruckInRaceActor::UnitCarStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, UnitBoatStaticMeshComponents) == 0x000450, "Member 'AMonsterTruckInRaceActor::UnitBoatStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, TireMarkComponents) == 0x000460, "Member 'AMonsterTruckInRaceActor::TireMarkComponents' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, TireMarkMaterialInterface) == 0x000470, "Member 'AMonsterTruckInRaceActor::TireMarkMaterialInterface' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, TireDataTable) == 0x000478, "Member 'AMonsterTruckInRaceActor::TireDataTable' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, CarShadowDataTable) == 0x000480, "Member 'AMonsterTruckInRaceActor::CarShadowDataTable' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, DecalMeshComponent) == 0x000488, "Member 'AMonsterTruckInRaceActor::DecalMeshComponent' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, DecalMID) == 0x000490, "Member 'AMonsterTruckInRaceActor::DecalMID' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, bOverrideVehicleMeshType) == 0x000498, "Member 'AMonsterTruckInRaceActor::bOverrideVehicleMeshType' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, VehicleMeshTypeOverride) == 0x000499, "Member 'AMonsterTruckInRaceActor::VehicleMeshTypeOverride' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, CockpitMeshMaterials) == 0x0004A0, "Member 'AMonsterTruckInRaceActor::CockpitMeshMaterials' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, CockpitSusMeshMaterials) == 0x0004F0, "Member 'AMonsterTruckInRaceActor::CockpitSusMeshMaterials' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, BodyMeshMaterials) == 0x000540, "Member 'AMonsterTruckInRaceActor::BodyMeshMaterials' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, UnitCarMeshMaterials) == 0x000590, "Member 'AMonsterTruckInRaceActor::UnitCarMeshMaterials' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, UnitBoatMeshMaterials) == 0x0005E0, "Member 'AMonsterTruckInRaceActor::UnitBoatMeshMaterials' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, UnitPlaneMeshMaterials) == 0x000630, "Member 'AMonsterTruckInRaceActor::UnitPlaneMeshMaterials' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, UnitSimplePlaneMeshMaterials) == 0x000680, "Member 'AMonsterTruckInRaceActor::UnitSimplePlaneMeshMaterials' has a wrong offset!");
static_assert(offsetof(AMonsterTruckInRaceActor, UnitSimplePlaneJetMeshMaterials) == 0x0006D0, "Member 'AMonsterTruckInRaceActor::UnitSimplePlaneJetMeshMaterials' has a wrong offset!");

// Class UNION.LoadAssetState
// 0x0018 (0x0150 - 0x0138)
class ULoadAssetState : public UMenuSequenceStateBase
{
public:
	uint8                                         Pad_138[0x18];                                     // 0x0138(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadAssetState">();
	}
	static class ULoadAssetState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadAssetState>();
	}
};
static_assert(alignof(ULoadAssetState) == 0x000008, "Wrong alignment on ULoadAssetState");
static_assert(sizeof(ULoadAssetState) == 0x000150, "Wrong size on ULoadAssetState");

// Class UNION.LobbyAnnounceInfo
// 0x0028 (0x0308 - 0x02E0)
class ULobbyAnnounceInfo final : public UUserWidget
{
public:
	class UOnlineTimer*                           TimerWidget;                                       // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            MatchingWidget;                                    // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            InfoTextWidget;                                    // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       CurrentAnimation;                                  // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableTimeWidget;                                  // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableUpdateState;                                 // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsLobbyHost;                                       // 0x0302(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMatchingLobbyType                            LobbyType;                                         // 0x0303(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbyTimerType                               CurrentTimerType;                                  // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbySequenceState                           CurrentState;                                      // 0x0305(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ERaceSettingCourseSelecting                   CourseSelecting;                                   // 0x0306(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_307[0x1];                                      // 0x0307(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddToViewPortWidget();
	void EnterPrivateLobbyCanceling();
	void MatchCanceling();
	void MatchingNow();
	void OnInitialize(EMatchingLobbyType InLobbyType);
	void OnSetup();
	void PlayAnimationCanceling();
	void PlayAnimationCheckMembers();
	void PlayAnimationCommunicating();
	void PlayAnimationEnterPrivateLobbyCanceling();
	void PlayAnimationGroupSetting();
	void PlayAnimationLobbySearch();
	void PlayAnimationMatchingNow();
	void PlayAnimationPleaseWait();
	void PlayAnimationReturnedFromRaceToLobby();
	void PlayAnimationSelectCourse();
	void PlayAnimationSelectCourseHostWait();
	void PlayAnimationSelectCourseWait();
	void PlayAnimationWaitingHostDecideRule();
	void PlayAnimationWaitingInTheLobby();
	void PlayAnimationWaitingJoinMembers();
	void SetCourseSelectRule(ERaceSettingCourseSelecting InCourseSelectRule);
	void SetIsLobbyHost(bool bIsHost);
	void SetMatchingTimeCount(int32 InValue);
	void SetVisibilityInfoTextWidget(ESlateVisibility InVisibility);
	void SetVisibilityMatchingWidget(ESlateVisibility InVisibility);
	void TimerOnly();
	void UpdateState(ELobbyTimerType InTimerType, ELobbySequenceState InState);

	ERaceSettingCourseSelecting GetCourseSelectRule() const;
	class UOnlineTimer* GetTimer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyAnnounceInfo">();
	}
	static class ULobbyAnnounceInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyAnnounceInfo>();
	}
};
static_assert(alignof(ULobbyAnnounceInfo) == 0x000008, "Wrong alignment on ULobbyAnnounceInfo");
static_assert(sizeof(ULobbyAnnounceInfo) == 0x000308, "Wrong size on ULobbyAnnounceInfo");
static_assert(offsetof(ULobbyAnnounceInfo, TimerWidget) == 0x0002E0, "Member 'ULobbyAnnounceInfo::TimerWidget' has a wrong offset!");
static_assert(offsetof(ULobbyAnnounceInfo, MatchingWidget) == 0x0002E8, "Member 'ULobbyAnnounceInfo::MatchingWidget' has a wrong offset!");
static_assert(offsetof(ULobbyAnnounceInfo, InfoTextWidget) == 0x0002F0, "Member 'ULobbyAnnounceInfo::InfoTextWidget' has a wrong offset!");
static_assert(offsetof(ULobbyAnnounceInfo, CurrentAnimation) == 0x0002F8, "Member 'ULobbyAnnounceInfo::CurrentAnimation' has a wrong offset!");
static_assert(offsetof(ULobbyAnnounceInfo, EnableTimeWidget) == 0x000300, "Member 'ULobbyAnnounceInfo::EnableTimeWidget' has a wrong offset!");
static_assert(offsetof(ULobbyAnnounceInfo, EnableUpdateState) == 0x000301, "Member 'ULobbyAnnounceInfo::EnableUpdateState' has a wrong offset!");
static_assert(offsetof(ULobbyAnnounceInfo, IsLobbyHost) == 0x000302, "Member 'ULobbyAnnounceInfo::IsLobbyHost' has a wrong offset!");
static_assert(offsetof(ULobbyAnnounceInfo, LobbyType) == 0x000303, "Member 'ULobbyAnnounceInfo::LobbyType' has a wrong offset!");
static_assert(offsetof(ULobbyAnnounceInfo, CurrentTimerType) == 0x000304, "Member 'ULobbyAnnounceInfo::CurrentTimerType' has a wrong offset!");
static_assert(offsetof(ULobbyAnnounceInfo, CurrentState) == 0x000305, "Member 'ULobbyAnnounceInfo::CurrentState' has a wrong offset!");
static_assert(offsetof(ULobbyAnnounceInfo, CourseSelecting) == 0x000306, "Member 'ULobbyAnnounceInfo::CourseSelecting' has a wrong offset!");

// Class UNION.RaceResultSequenceStateRaceStats
// 0x0000 (0x0108 - 0x0108)
class URaceResultSequenceStateRaceStats : public URaceResultSequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceResultSequenceStateRaceStats">();
	}
	static class URaceResultSequenceStateRaceStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceResultSequenceStateRaceStats>();
	}
};
static_assert(alignof(URaceResultSequenceStateRaceStats) == 0x000008, "Wrong alignment on URaceResultSequenceStateRaceStats");
static_assert(sizeof(URaceResultSequenceStateRaceStats) == 0x000108, "Wrong size on URaceResultSequenceStateRaceStats");

// Class UNION.MenuSequence
// 0x0080 (0x03E8 - 0x0368)
class AMenuSequence : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnInviteConfirmWindowIn;                           // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bIsYes)>   OnInviteConfirmWindowOut;                          // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSubclassOf<class UOnlinePlayerNameButton>    PlayerNameButtonClass;                             // 0x0390(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUseWirelessDebugSequence;                        // 0x0398(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChildActorComponent*                   CharaSelectPreloaderComponent;                     // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                   SpeedMachineSelectPreloaderComponent;              // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                   AcceleMachineSelectPreloaderComponent;             // 0x03B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                   HandleMachineSelectPreloaderComponent;             // 0x03B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                   PowerMachineSelectPreloaderComponent;              // 0x03C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                   DashMachineSelectPreloaderComponent;               // 0x03C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                   FrontPartsSelectPreloaderComponent;                // 0x03D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                   RearPartsSelectPreloaderComponent;                 // 0x03D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                   TirePartsSelectPreloaderComponent;                 // 0x03E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BindOnReceiveInvite();
	EMenuSequenceMainState GetMainStateID(EGameModeId GameModeID, bool IsCameBackFromRace, bool IsBackToTopMenu, bool IsBackToTitle);
	void InitializeMenuSequence();
	void OnAcceptedInvite();
	void OnChangeToOnlineSequence(EUnionUIFadeDirection FadeDirection);
	void OnChangeToTitleSequence(EUnionUIFadeDirection FadeDirection);
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnReceiveInviteCallback(const struct FUniqueNetIdRepl& UserId, class ULobbyJoinInfo* Invite);
	void OnRestartOnlineSequence();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuSequence">();
	}
	static class AMenuSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMenuSequence>();
	}
};
static_assert(alignof(AMenuSequence) == 0x000008, "Wrong alignment on AMenuSequence");
static_assert(sizeof(AMenuSequence) == 0x0003E8, "Wrong size on AMenuSequence");
static_assert(offsetof(AMenuSequence, OnInviteConfirmWindowIn) == 0x000370, "Member 'AMenuSequence::OnInviteConfirmWindowIn' has a wrong offset!");
static_assert(offsetof(AMenuSequence, OnInviteConfirmWindowOut) == 0x000380, "Member 'AMenuSequence::OnInviteConfirmWindowOut' has a wrong offset!");
static_assert(offsetof(AMenuSequence, PlayerNameButtonClass) == 0x000390, "Member 'AMenuSequence::PlayerNameButtonClass' has a wrong offset!");
static_assert(offsetof(AMenuSequence, IsUseWirelessDebugSequence) == 0x000398, "Member 'AMenuSequence::IsUseWirelessDebugSequence' has a wrong offset!");
static_assert(offsetof(AMenuSequence, CharaSelectPreloaderComponent) == 0x0003A0, "Member 'AMenuSequence::CharaSelectPreloaderComponent' has a wrong offset!");
static_assert(offsetof(AMenuSequence, SpeedMachineSelectPreloaderComponent) == 0x0003A8, "Member 'AMenuSequence::SpeedMachineSelectPreloaderComponent' has a wrong offset!");
static_assert(offsetof(AMenuSequence, AcceleMachineSelectPreloaderComponent) == 0x0003B0, "Member 'AMenuSequence::AcceleMachineSelectPreloaderComponent' has a wrong offset!");
static_assert(offsetof(AMenuSequence, HandleMachineSelectPreloaderComponent) == 0x0003B8, "Member 'AMenuSequence::HandleMachineSelectPreloaderComponent' has a wrong offset!");
static_assert(offsetof(AMenuSequence, PowerMachineSelectPreloaderComponent) == 0x0003C0, "Member 'AMenuSequence::PowerMachineSelectPreloaderComponent' has a wrong offset!");
static_assert(offsetof(AMenuSequence, DashMachineSelectPreloaderComponent) == 0x0003C8, "Member 'AMenuSequence::DashMachineSelectPreloaderComponent' has a wrong offset!");
static_assert(offsetof(AMenuSequence, FrontPartsSelectPreloaderComponent) == 0x0003D0, "Member 'AMenuSequence::FrontPartsSelectPreloaderComponent' has a wrong offset!");
static_assert(offsetof(AMenuSequence, RearPartsSelectPreloaderComponent) == 0x0003D8, "Member 'AMenuSequence::RearPartsSelectPreloaderComponent' has a wrong offset!");
static_assert(offsetof(AMenuSequence, TirePartsSelectPreloaderComponent) == 0x0003E0, "Member 'AMenuSequence::TirePartsSelectPreloaderComponent' has a wrong offset!");

// Class UNION.LobbyCourseSelect
// 0x0060 (0x0188 - 0x0128)
class ULobbyCourseSelect final : public UMenuSequenceSubStateBase
{
public:
	class ALobbyCourseSelectSequence*             ChildCourseSelectSequence;                         // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EStageId>                              RefCourseMainId;                                   // 0x0130(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLobbyCourseSelectData                 RefLobbyCourseSelectData;                          // 0x0150(0x0038)(BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void DecideCalllback(EStageId* StageId);
	void Setup(const struct FLobbyCourseSelectData& LobbyCourseSelectData, TArray<EStageId>* StageIds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCourseSelect">();
	}
	static class ULobbyCourseSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyCourseSelect>();
	}
};
static_assert(alignof(ULobbyCourseSelect) == 0x000008, "Wrong alignment on ULobbyCourseSelect");
static_assert(sizeof(ULobbyCourseSelect) == 0x000188, "Wrong size on ULobbyCourseSelect");
static_assert(offsetof(ULobbyCourseSelect, ChildCourseSelectSequence) == 0x000128, "Member 'ULobbyCourseSelect::ChildCourseSelectSequence' has a wrong offset!");
static_assert(offsetof(ULobbyCourseSelect, RefCourseMainId) == 0x000130, "Member 'ULobbyCourseSelect::RefCourseMainId' has a wrong offset!");
static_assert(offsetof(ULobbyCourseSelect, RefLobbyCourseSelectData) == 0x000150, "Member 'ULobbyCourseSelect::RefLobbyCourseSelectData' has a wrong offset!");

// Class UNION.LobbyCourseSelectGuestComponent
// 0x0040 (0x0168 - 0x0128)
class ULobbyCourseSelectGuestComponent final : public UMenuSequenceSubStateBase
{
public:
	struct FLobbyCourseSelectData                 RefLobbyCourseSelectData;                          // 0x0128(0x0038)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	bool                                          IsFirstUpdate;                                     // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCancelSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCourseSelectGuestComponent">();
	}
	static class ULobbyCourseSelectGuestComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyCourseSelectGuestComponent>();
	}
};
static_assert(alignof(ULobbyCourseSelectGuestComponent) == 0x000008, "Wrong alignment on ULobbyCourseSelectGuestComponent");
static_assert(sizeof(ULobbyCourseSelectGuestComponent) == 0x000168, "Wrong size on ULobbyCourseSelectGuestComponent");
static_assert(offsetof(ULobbyCourseSelectGuestComponent, RefLobbyCourseSelectData) == 0x000128, "Member 'ULobbyCourseSelectGuestComponent::RefLobbyCourseSelectData' has a wrong offset!");
static_assert(offsetof(ULobbyCourseSelectGuestComponent, IsFirstUpdate) == 0x000160, "Member 'ULobbyCourseSelectGuestComponent::IsFirstUpdate' has a wrong offset!");

// Class UNION.MenuRacerBase
// 0x00B8 (0x0348 - 0x0290)
class AMenuRacerBase : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EMenuRacerType                                Type;                                              // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A[0x6];                                      // 0x029A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUserMachineCustomizeData              MachineCustomizeData;                              // 0x02A0(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UMachineHornComponent>      HornComponentClass;                                // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineHornComponent*                  HornComponent;                                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledSound;                                     // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          EngineSoundFront;                                  // 0x0330(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          EngineSoundRear;                                   // 0x0338(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateAuraEffect();
	void CreateAuraEffectID(EMachineAuraId InAuraID);
	void LoadSyncEngineSoundFront(EMachineId InMachineID);
	void LoadSyncEngineSoundRear(EMachineId InMachineID);
	void OnCreateAuraEffect(EMachineAuraId InAuraID, ECarStatusType InType);
	void PlayDriverAnimation(int32 StateId, int32 Index_0);
	void SetDriverInterface(EDriverId InDriverId, bool bInForcedSetting);
	void SetLocalPlayerIndex(int32 InLocalPlayerIndex);
	void StartEffect();
	void StopEffect();

	int32 GetLocalPlayerIndex() const;
	int32 GetStickerSize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuRacerBase">();
	}
	static class AMenuRacerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMenuRacerBase>();
	}
};
static_assert(alignof(AMenuRacerBase) == 0x000008, "Wrong alignment on AMenuRacerBase");
static_assert(sizeof(AMenuRacerBase) == 0x000348, "Wrong size on AMenuRacerBase");
static_assert(offsetof(AMenuRacerBase, Type) == 0x000298, "Member 'AMenuRacerBase::Type' has a wrong offset!");
static_assert(offsetof(AMenuRacerBase, DriverId) == 0x000299, "Member 'AMenuRacerBase::DriverId' has a wrong offset!");
static_assert(offsetof(AMenuRacerBase, MachineCustomizeData) == 0x0002A0, "Member 'AMenuRacerBase::MachineCustomizeData' has a wrong offset!");
static_assert(offsetof(AMenuRacerBase, HornComponentClass) == 0x000318, "Member 'AMenuRacerBase::HornComponentClass' has a wrong offset!");
static_assert(offsetof(AMenuRacerBase, HornComponent) == 0x000320, "Member 'AMenuRacerBase::HornComponent' has a wrong offset!");
static_assert(offsetof(AMenuRacerBase, bEnabledSound) == 0x000328, "Member 'AMenuRacerBase::bEnabledSound' has a wrong offset!");
static_assert(offsetof(AMenuRacerBase, EngineSoundFront) == 0x000330, "Member 'AMenuRacerBase::EngineSoundFront' has a wrong offset!");
static_assert(offsetof(AMenuRacerBase, EngineSoundRear) == 0x000338, "Member 'AMenuRacerBase::EngineSoundRear' has a wrong offset!");

// Class UNION.ResidentDataAsset
// 0x0020 (0x0050 - 0x0030)
class UResidentDataAsset final : public UDataAsset
{
public:
	class UPrimaryDataAssetShelf*                 GameResidentDataAsset;                             // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimaryDataAssetShelf*                 MenuResidentDataAsset;                             // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimaryDataAssetShelf*                 RaceResidentDataAsset;                             // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimaryDataAssetShelf*                 PreloadRaceDataAsset;                              // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResidentDataAsset">();
	}
	static class UResidentDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResidentDataAsset>();
	}
};
static_assert(alignof(UResidentDataAsset) == 0x000008, "Wrong alignment on UResidentDataAsset");
static_assert(sizeof(UResidentDataAsset) == 0x000050, "Wrong size on UResidentDataAsset");
static_assert(offsetof(UResidentDataAsset, GameResidentDataAsset) == 0x000030, "Member 'UResidentDataAsset::GameResidentDataAsset' has a wrong offset!");
static_assert(offsetof(UResidentDataAsset, MenuResidentDataAsset) == 0x000038, "Member 'UResidentDataAsset::MenuResidentDataAsset' has a wrong offset!");
static_assert(offsetof(UResidentDataAsset, RaceResidentDataAsset) == 0x000040, "Member 'UResidentDataAsset::RaceResidentDataAsset' has a wrong offset!");
static_assert(offsetof(UResidentDataAsset, PreloadRaceDataAsset) == 0x000048, "Member 'UResidentDataAsset::PreloadRaceDataAsset' has a wrong offset!");

// Class UNION.LobbyCourseSelectHostComponent
// 0x0078 (0x01A0 - 0x0128)
class ULobbyCourseSelectHostComponent final : public UMenuSequenceSubStateBase
{
public:
	TSoftClassPtr<class UClass>                   CourseSelectWidgetBaseClass;                       // 0x0128(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCourseSelectWidgetBase*                CourseSelectWidgetBase;                            // 0x0150(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          DecisionSoundCue;                                  // 0x0158(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLobbyCourseSelectData                 RefLobbyCourseSelectData;                          // 0x0160(0x0038)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DecideStageCallback(EStageId StageId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCourseSelectHostComponent">();
	}
	static class ULobbyCourseSelectHostComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyCourseSelectHostComponent>();
	}
};
static_assert(alignof(ULobbyCourseSelectHostComponent) == 0x000008, "Wrong alignment on ULobbyCourseSelectHostComponent");
static_assert(sizeof(ULobbyCourseSelectHostComponent) == 0x0001A0, "Wrong size on ULobbyCourseSelectHostComponent");
static_assert(offsetof(ULobbyCourseSelectHostComponent, CourseSelectWidgetBaseClass) == 0x000128, "Member 'ULobbyCourseSelectHostComponent::CourseSelectWidgetBaseClass' has a wrong offset!");
static_assert(offsetof(ULobbyCourseSelectHostComponent, CourseSelectWidgetBase) == 0x000150, "Member 'ULobbyCourseSelectHostComponent::CourseSelectWidgetBase' has a wrong offset!");
static_assert(offsetof(ULobbyCourseSelectHostComponent, DecisionSoundCue) == 0x000158, "Member 'ULobbyCourseSelectHostComponent::DecisionSoundCue' has a wrong offset!");
static_assert(offsetof(ULobbyCourseSelectHostComponent, RefLobbyCourseSelectData) == 0x000160, "Member 'ULobbyCourseSelectHostComponent::RefLobbyCourseSelectData' has a wrong offset!");

// Class UNION.LobbyCourseSelectRandomComponent
// 0x0040 (0x0168 - 0x0128)
class ULobbyCourseSelectRandomComponent final : public UMenuSequenceSubStateBase
{
public:
	struct FLobbyCourseSelectData                 RefLobbyCourseSelectData;                          // 0x0128(0x0038)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	bool                                          IsFirstUpdate;                                     // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCourseSelectRandomComponent">();
	}
	static class ULobbyCourseSelectRandomComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyCourseSelectRandomComponent>();
	}
};
static_assert(alignof(ULobbyCourseSelectRandomComponent) == 0x000008, "Wrong alignment on ULobbyCourseSelectRandomComponent");
static_assert(sizeof(ULobbyCourseSelectRandomComponent) == 0x000168, "Wrong size on ULobbyCourseSelectRandomComponent");
static_assert(offsetof(ULobbyCourseSelectRandomComponent, RefLobbyCourseSelectData) == 0x000128, "Member 'ULobbyCourseSelectRandomComponent::RefLobbyCourseSelectData' has a wrong offset!");
static_assert(offsetof(ULobbyCourseSelectRandomComponent, IsFirstUpdate) == 0x000160, "Member 'ULobbyCourseSelectRandomComponent::IsFirstUpdate' has a wrong offset!");

// Class UNION.StaffrollManaPlayerFinalizer
// 0x0008 (0x0030 - 0x0028)
class UStaffrollManaPlayerFinalizer final : public UObject
{
public:
	class UUnionManaPlayer*                       _ManaPlayer;                                       // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnPlayerClosed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollManaPlayerFinalizer">();
	}
	static class UStaffrollManaPlayerFinalizer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollManaPlayerFinalizer>();
	}
};
static_assert(alignof(UStaffrollManaPlayerFinalizer) == 0x000008, "Wrong alignment on UStaffrollManaPlayerFinalizer");
static_assert(sizeof(UStaffrollManaPlayerFinalizer) == 0x000030, "Wrong size on UStaffrollManaPlayerFinalizer");
static_assert(offsetof(UStaffrollManaPlayerFinalizer, _ManaPlayer) == 0x000028, "Member 'UStaffrollManaPlayerFinalizer::_ManaPlayer' has a wrong offset!");

// Class UNION.MilestoneSpecificTitleDebugCommand
// 0x0010 (0x0038 - 0x0028)
class UMilestoneSpecificTitleDebugCommand final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMenuInputRecieveObject*                MenuInputReceiveObject;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnPressedBackKey(class UObject* Object);
	void OnPressedLeftShoulder(class UObject* Object);
	void OnReleasedBackKey(class UObject* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MilestoneSpecificTitleDebugCommand">();
	}
	static class UMilestoneSpecificTitleDebugCommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMilestoneSpecificTitleDebugCommand>();
	}
};
static_assert(alignof(UMilestoneSpecificTitleDebugCommand) == 0x000008, "Wrong alignment on UMilestoneSpecificTitleDebugCommand");
static_assert(sizeof(UMilestoneSpecificTitleDebugCommand) == 0x000038, "Wrong size on UMilestoneSpecificTitleDebugCommand");
static_assert(offsetof(UMilestoneSpecificTitleDebugCommand, MenuInputReceiveObject) == 0x000030, "Member 'UMilestoneSpecificTitleDebugCommand::MenuInputReceiveObject' has a wrong offset!");

// Class UNION.LobbyCourseSelectSceneBase
// 0x0038 (0x0410 - 0x03D8)
class ULobbyCourseSelectSceneBase final : public UUnionUISceneBase
{
public:
	class UWidgetAnimation*                       Window_In;                                         // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Window_Loop;                                       // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Window_Out;                                        // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionUIButtonsPanel*                   MainButtonsPanel;                                  // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<EStageId>                              courseId;                                          // 0x03F8(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         DecideCourseIndex;                                 // 0x0408(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UUnionUIButtonsPanel* GetMainButtonsPanel();
	void OnInitialize(const TArray<EStageId>& InCourseId, int32 InDecideCourseIndex);
	void PlayAnimationIn();
	void PlayAnimationLoop();
	void PlayAnimationOut();
	void SetDecideCourseIndex(int32 InDecideCourseIndex);
	void SetFocusableButton(bool InFocusable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCourseSelectSceneBase">();
	}
	static class ULobbyCourseSelectSceneBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyCourseSelectSceneBase>();
	}
};
static_assert(alignof(ULobbyCourseSelectSceneBase) == 0x000008, "Wrong alignment on ULobbyCourseSelectSceneBase");
static_assert(sizeof(ULobbyCourseSelectSceneBase) == 0x000410, "Wrong size on ULobbyCourseSelectSceneBase");
static_assert(offsetof(ULobbyCourseSelectSceneBase, Window_In) == 0x0003D8, "Member 'ULobbyCourseSelectSceneBase::Window_In' has a wrong offset!");
static_assert(offsetof(ULobbyCourseSelectSceneBase, Window_Loop) == 0x0003E0, "Member 'ULobbyCourseSelectSceneBase::Window_Loop' has a wrong offset!");
static_assert(offsetof(ULobbyCourseSelectSceneBase, Window_Out) == 0x0003E8, "Member 'ULobbyCourseSelectSceneBase::Window_Out' has a wrong offset!");
static_assert(offsetof(ULobbyCourseSelectSceneBase, MainButtonsPanel) == 0x0003F0, "Member 'ULobbyCourseSelectSceneBase::MainButtonsPanel' has a wrong offset!");
static_assert(offsetof(ULobbyCourseSelectSceneBase, courseId) == 0x0003F8, "Member 'ULobbyCourseSelectSceneBase::courseId' has a wrong offset!");
static_assert(offsetof(ULobbyCourseSelectSceneBase, DecideCourseIndex) == 0x000408, "Member 'ULobbyCourseSelectSceneBase::DecideCourseIndex' has a wrong offset!");

// Class UNION.LobbyCourseSelectSequence
// 0x00B8 (0x0420 - 0x0368)
class ALobbyCourseSelectSequence final : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EStageId>                              RefCourseMainId;                                   // 0x0370(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_380[0x10];                                     // 0x0380(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	ELobbyCourseSelectState                       PrevSquenceState;                                  // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbyCourseSelectState                       SelectedMainState;                                 // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLobbyCourseSelectData                 RefLobbyCourseSelectData;                          // 0x0398(0x0038)(BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class ULobbyCourseSelectHostComponent> LobbyCourseSelectHostComponentClass;          // 0x03D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyCourseSelectHostComponent*        LobbyCourseSelectHostComponent;                    // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULobbyCourseSelectGuestComponent> LobbyCourseSelectGuestComponentClass;        // 0x03E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyCourseSelectGuestComponent*       LobbyCourseSelectGuestComponent;                   // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULobbyCourseSelectVoteComponent> LobbyCourseSelectVoteComponentClass;          // 0x03F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyCourseSelectVoteComponent*        LobbyCourseSelectVoteComponent;                    // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULobbyCourseSelectWaitComponent> LobbyCourseSelectWaitComponentClass;          // 0x0400(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyCourseSelectWaitComponent*        LobbyCourseSelectWaitComponent;                    // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULobbyCourseSelectRandomComponent> LobbyCourseSelectRandomComponentClass;      // 0x0410(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyCourseSelectRandomComponent*      LobbyCourseSelectRandomComponent;                  // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CourseDecideCallback();
	void DecideCalllback(EStageId* StageId);
	void OnInitExitState();
	void OnInitIdleState();
	void SetNextCourseSelectSequenceState(ELobbyCourseSelectState InState, ELobbyCourseSelectState PrevState);
	void Setup(const struct FLobbyCourseSelectData& LobbyCourseSelectData, TArray<EStageId>* StageIds);

	struct FLobbyCourseSelectData GetLobbyCourseSelectData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCourseSelectSequence">();
	}
	static class ALobbyCourseSelectSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyCourseSelectSequence>();
	}
};
static_assert(alignof(ALobbyCourseSelectSequence) == 0x000008, "Wrong alignment on ALobbyCourseSelectSequence");
static_assert(sizeof(ALobbyCourseSelectSequence) == 0x000420, "Wrong size on ALobbyCourseSelectSequence");
static_assert(offsetof(ALobbyCourseSelectSequence, RefCourseMainId) == 0x000370, "Member 'ALobbyCourseSelectSequence::RefCourseMainId' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, PrevSquenceState) == 0x000390, "Member 'ALobbyCourseSelectSequence::PrevSquenceState' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, SelectedMainState) == 0x000391, "Member 'ALobbyCourseSelectSequence::SelectedMainState' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, RefLobbyCourseSelectData) == 0x000398, "Member 'ALobbyCourseSelectSequence::RefLobbyCourseSelectData' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, LobbyCourseSelectHostComponentClass) == 0x0003D0, "Member 'ALobbyCourseSelectSequence::LobbyCourseSelectHostComponentClass' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, LobbyCourseSelectHostComponent) == 0x0003D8, "Member 'ALobbyCourseSelectSequence::LobbyCourseSelectHostComponent' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, LobbyCourseSelectGuestComponentClass) == 0x0003E0, "Member 'ALobbyCourseSelectSequence::LobbyCourseSelectGuestComponentClass' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, LobbyCourseSelectGuestComponent) == 0x0003E8, "Member 'ALobbyCourseSelectSequence::LobbyCourseSelectGuestComponent' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, LobbyCourseSelectVoteComponentClass) == 0x0003F0, "Member 'ALobbyCourseSelectSequence::LobbyCourseSelectVoteComponentClass' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, LobbyCourseSelectVoteComponent) == 0x0003F8, "Member 'ALobbyCourseSelectSequence::LobbyCourseSelectVoteComponent' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, LobbyCourseSelectWaitComponentClass) == 0x000400, "Member 'ALobbyCourseSelectSequence::LobbyCourseSelectWaitComponentClass' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, LobbyCourseSelectWaitComponent) == 0x000408, "Member 'ALobbyCourseSelectSequence::LobbyCourseSelectWaitComponent' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, LobbyCourseSelectRandomComponentClass) == 0x000410, "Member 'ALobbyCourseSelectSequence::LobbyCourseSelectRandomComponentClass' has a wrong offset!");
static_assert(offsetof(ALobbyCourseSelectSequence, LobbyCourseSelectRandomComponent) == 0x000418, "Member 'ALobbyCourseSelectSequence::LobbyCourseSelectRandomComponent' has a wrong offset!");

// Class UNION.NotificationWindowState
// 0x0000 (0x0128 - 0x0128)
class UNotificationWindowState final : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NotificationWindowState">();
	}
	static class UNotificationWindowState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNotificationWindowState>();
	}
};
static_assert(alignof(UNotificationWindowState) == 0x000008, "Wrong alignment on UNotificationWindowState");
static_assert(sizeof(UNotificationWindowState) == 0x000128, "Wrong size on UNotificationWindowState");

// Class UNION.LobbyCourseSelectVoteComponent
// 0x0038 (0x0160 - 0x0128)
class ULobbyCourseSelectVoteComponent final : public UMenuSequenceSubStateBase
{
public:
	struct FLobbyCourseSelectData                 RefLobbyCourseSelectData;                          // 0x0128(0x0038)(ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void OnCancelSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecisionSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnFocusSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnUnFocusSelectCourse(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCourseSelectVoteComponent">();
	}
	static class ULobbyCourseSelectVoteComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyCourseSelectVoteComponent>();
	}
};
static_assert(alignof(ULobbyCourseSelectVoteComponent) == 0x000008, "Wrong alignment on ULobbyCourseSelectVoteComponent");
static_assert(sizeof(ULobbyCourseSelectVoteComponent) == 0x000160, "Wrong size on ULobbyCourseSelectVoteComponent");
static_assert(offsetof(ULobbyCourseSelectVoteComponent, RefLobbyCourseSelectData) == 0x000128, "Member 'ULobbyCourseSelectVoteComponent::RefLobbyCourseSelectData' has a wrong offset!");

// Class UNION.LobbyCourseSelectWaitComponent
// 0x0000 (0x0128 - 0x0128)
class ULobbyCourseSelectWaitComponent final : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCourseSelectWaitComponent">();
	}
	static class ULobbyCourseSelectWaitComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyCourseSelectWaitComponent>();
	}
};
static_assert(alignof(ULobbyCourseSelectWaitComponent) == 0x000008, "Wrong alignment on ULobbyCourseSelectWaitComponent");
static_assert(sizeof(ULobbyCourseSelectWaitComponent) == 0x000128, "Wrong size on ULobbyCourseSelectWaitComponent");

// Class UNION.DebugSquadAutoPlay
// 0x0060 (0x0088 - 0x0028)
class UDebugSquadAutoPlay final : public UObject
{
public:
	TWeakObjectPtr<class UAppNetComponent>        AppNet;                                            // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x58];                                      // 0x0030(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCreateSquadLobbyCompleted(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnJoinSquadCompleted(class ULobbyContextBase* LobbyContext, const struct FOnlineErrorBP& Error);
	void OnReceiveInvitationCallback(const struct FUniqueNetIdRepl& UserId, class ULobbyJoinInfo* Invite);
	void OnSendInvitationCompleted(bool bSuccessful, const struct FLobbyOperationResult& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DebugSquadAutoPlay">();
	}
	static class UDebugSquadAutoPlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDebugSquadAutoPlay>();
	}
};
static_assert(alignof(UDebugSquadAutoPlay) == 0x000008, "Wrong alignment on UDebugSquadAutoPlay");
static_assert(sizeof(UDebugSquadAutoPlay) == 0x000088, "Wrong size on UDebugSquadAutoPlay");
static_assert(offsetof(UDebugSquadAutoPlay, AppNet) == 0x000028, "Member 'UDebugSquadAutoPlay::AppNet' has a wrong offset!");

// Class UNION.LobbyEntryCheckState
// 0x0058 (0x0150 - 0x00F8)
class ULobbyEntryCheckState final : public UHierarchicalStateMachineStateComponent
{
public:
	uint8                                         Pad_F8[0x58];                                      // 0x00F8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCheckFairPointComplete(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnQueryServerTimeComplete(const struct FDateTime& UtcTimestamp, bool Error);
	void OnRomVersionComplete(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void SetOnlyCheckRomVersion(bool bInEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyEntryCheckState">();
	}
	static class ULobbyEntryCheckState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyEntryCheckState>();
	}
};
static_assert(alignof(ULobbyEntryCheckState) == 0x000008, "Wrong alignment on ULobbyEntryCheckState");
static_assert(sizeof(ULobbyEntryCheckState) == 0x000150, "Wrong size on ULobbyEntryCheckState");

// Class UNION.MenuSoundSubsystem
// 0x0008 (0x0038 - 0x0030)
class UMenuSoundSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayBGMMenu(EMenuSequenceBGM NewMenuBGM, bool bForce);
	void PlayBGMStage(EStageId StageId);
	void PlayBGMTitle(bool bForce);
	void StopBGM();

	EMenuSequenceBGM GetPlayMenuType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuSoundSubsystem">();
	}
	static class UMenuSoundSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuSoundSubsystem>();
	}
};
static_assert(alignof(UMenuSoundSubsystem) == 0x000008, "Wrong alignment on UMenuSoundSubsystem");
static_assert(sizeof(UMenuSoundSubsystem) == 0x000038, "Wrong size on UMenuSoundSubsystem");

// Class UNION.ReadyWindow
// 0x0018 (0x02F8 - 0x02E0)
class UReadyWindow : public UUserWidget
{
public:
	bool                                          bSkipGoAnimation;                                  // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnGoAnimationFinished;                             // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void PlayEndAnimation();
	void PlayGoAnimation();
	void PlayInAnimation();
	void PlayOutAnimation();
	void SetReadyColor(bool bIsCheck);
	void UpdateGadgetDetailWindowToSlotZero(const int32 InPlayerIndex);

	void GetCharaMachineParamWindow(TArray<class UCharaMachineParamWindow*>* OutCharaMachineParamWindows) const;
	void GetGadgetPlateWindows(TArray<class UGadgetPlateWindow*>* OutGadgetPlateWindows) const;
	void GetReadyOptions(TArray<class UReadyOption*>* OutReadyOptions) const;
	void GetReadyWindowCharacterIcons(TArray<class UReadyWindowCharacterIcon*>* OutReadyWindowCharacterIcons) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReadyWindow">();
	}
	static class UReadyWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReadyWindow>();
	}
};
static_assert(alignof(UReadyWindow) == 0x000008, "Wrong alignment on UReadyWindow");
static_assert(sizeof(UReadyWindow) == 0x0002F8, "Wrong size on UReadyWindow");
static_assert(offsetof(UReadyWindow, bSkipGoAnimation) == 0x0002E0, "Member 'UReadyWindow::bSkipGoAnimation' has a wrong offset!");
static_assert(offsetof(UReadyWindow, OnGoAnimationFinished) == 0x0002E8, "Member 'UReadyWindow::OnGoAnimationFinished' has a wrong offset!");

// Class UNION.LobbyFestaSequence
// 0x00D8 (0x09A0 - 0x08C8)
class ALobbyFestaSequence final : public ALobbySequenceBase
{
public:
	TSoftClassPtr<class UClass>                   FestaTeamDirectClassPtr;                           // 0x08C8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOnlineFestaTeamDirectionBase*          FestaTeamDirectUIScene;                            // 0x08F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MyTeamId;                                          // 0x08F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8FC[0x4];                                      // 0x08FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   FestaRuleInfoClassPtr;                             // 0x0900(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBeforeRaceRuleExplanationWidget*       FestaRuleInfoWidget;                               // 0x0928(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          RuleExplanationLoopCue;                            // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoundHandle                           RuleExplanationLoop;                               // 0x0938(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_93C[0x4];                                      // 0x093C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   FestaGadgetRentalInfoClassPtr;                     // 0x0940(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGadgetRentalInfoWindow*                FestaGadgetRentalInfoUIScene;                      // 0x0968(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LobbySearchTime;                                   // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LobbySearchCancelLimitTime;                        // 0x0974(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         FestaVoltageActors;                                // 0x0978(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UStaticMeshComponent*>           GroupPlateStaticMeshComponents;                    // 0x0988(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          EnableTeamColor;                                   // 0x0998(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_999[0x7];                                      // 0x0999(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeTeamColorCar();
	void ChangeTeamColorPlate();
	void LoadFinishFestaLevelEvent();
	void OnBackKeyReleasedReturnedFromRaceToLobbyEvent(class UObject* InObject);
	void OnFestaRentalGadgetWindowFinished();
	void OnGotoCharaMachineFadeFinished(EUnionUIFadeDirection InFadeDirection);
	void OnGotoGarageFadeFinished(EUnionUIFadeDirection InFadeDirection);
	void OnInitializeFestaSublevelEvent();
	void OnLobbyFinishFadeFinished(EUnionUIFadeDirection InFadeDirection);
	void OnSyncFestaRule(bool bSuccessful, const struct FFestaFestaTopResponse& Result);
	void SetupFestRaceSettings();
	void ShowStageName();
	void UnloadFestaSubLevelEvent();
	void UnloadFinishTopMenuSubLevelEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyFestaSequence">();
	}
	static class ALobbyFestaSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyFestaSequence>();
	}
};
static_assert(alignof(ALobbyFestaSequence) == 0x000008, "Wrong alignment on ALobbyFestaSequence");
static_assert(sizeof(ALobbyFestaSequence) == 0x0009A0, "Wrong size on ALobbyFestaSequence");
static_assert(offsetof(ALobbyFestaSequence, FestaTeamDirectClassPtr) == 0x0008C8, "Member 'ALobbyFestaSequence::FestaTeamDirectClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, FestaTeamDirectUIScene) == 0x0008F0, "Member 'ALobbyFestaSequence::FestaTeamDirectUIScene' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, MyTeamId) == 0x0008F8, "Member 'ALobbyFestaSequence::MyTeamId' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, FestaRuleInfoClassPtr) == 0x000900, "Member 'ALobbyFestaSequence::FestaRuleInfoClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, FestaRuleInfoWidget) == 0x000928, "Member 'ALobbyFestaSequence::FestaRuleInfoWidget' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, RuleExplanationLoopCue) == 0x000930, "Member 'ALobbyFestaSequence::RuleExplanationLoopCue' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, RuleExplanationLoop) == 0x000938, "Member 'ALobbyFestaSequence::RuleExplanationLoop' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, FestaGadgetRentalInfoClassPtr) == 0x000940, "Member 'ALobbyFestaSequence::FestaGadgetRentalInfoClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, FestaGadgetRentalInfoUIScene) == 0x000968, "Member 'ALobbyFestaSequence::FestaGadgetRentalInfoUIScene' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, LobbySearchTime) == 0x000970, "Member 'ALobbyFestaSequence::LobbySearchTime' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, LobbySearchCancelLimitTime) == 0x000974, "Member 'ALobbyFestaSequence::LobbySearchCancelLimitTime' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, FestaVoltageActors) == 0x000978, "Member 'ALobbyFestaSequence::FestaVoltageActors' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, GroupPlateStaticMeshComponents) == 0x000988, "Member 'ALobbyFestaSequence::GroupPlateStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence, EnableTeamColor) == 0x000998, "Member 'ALobbyFestaSequence::EnableTeamColor' has a wrong offset!");

// Class UNION.RankIcon
// 0x0000 (0x02E0 - 0x02E0)
class URankIcon : public UUserWidget
{
public:
	void SetRateRank(ERateRank InRateRank);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RankIcon">();
	}
	static class URankIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<URankIcon>();
	}
};
static_assert(alignof(URankIcon) == 0x000008, "Wrong alignment on URankIcon");
static_assert(sizeof(URankIcon) == 0x0002E0, "Wrong size on URankIcon");

// Class UNION.NoticePopupState
// 0x00E8 (0x0210 - 0x0128)
class UNoticePopupState : public UMenuSequenceSubStateBase
{
public:
	bool                                          IsViewEmergencyInfo;                               // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsViewDLC;                                         // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DLCTitle;                                          // 0x0130(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   DLCScheduleText;                                   // 0x0140(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UTexture2D*                             DLCBGTexture;                                      // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              DLCStartTime;                                      // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsViewFesta;                                       // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FestaEventID;                                      // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   FestaTitle;                                        // 0x0168(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UTexture2D*                             FestaBGTexture;                                    // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              FestaEventStartTime;                               // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              FestaEventEndTime;                                 // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsViewCollaboInfo;                                 // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CollaboTitle;                                      // 0x0198(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   CollaboScheduleText;                               // 0x01A8(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UTexture2D*                             CollaboBGTexture;                                  // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              CollaboStartTime;                                  // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsViewRegendCompeInfo;                             // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegendCompeID;                                     // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   LegendCompeTitle;                                  // 0x01D0(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UTexture2D*                             LegendCompeBGTexture;                              // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              LegendCompeStartTime;                              // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              LegendCompeEndTime;                                // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsViewWorldMatchInfo;                              // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsViewBonusInfo;                                   // 0x01F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETopMenuSequenceState                         TopMenuReturnState;                                // 0x01FA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbySequenceState                           LobbyReturnState;                                  // 0x01FB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1FC[0x14];                                     // 0x01FC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceReleaseWidget();
	bool IsExistWidget();
	void OnQueryReadPlatformFriend(bool bWasSuccessful);
	void OnReceiveCheckFestaReward(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void SendCheckFestaRewardRequest(const struct FFestaCheckFestaRewardRequest& Request);
	void SetLobbyReturnState(ELobbySequenceState ReturnState);
	void SetOnlineReturnState(EOnlineSequenceState ReturnState);
	void SetTopMenuReturnState(ETopMenuSequenceState ReturnState);

	bool IsReturnStatePreNotice() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NoticePopupState">();
	}
	static class UNoticePopupState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoticePopupState>();
	}
};
static_assert(alignof(UNoticePopupState) == 0x000008, "Wrong alignment on UNoticePopupState");
static_assert(sizeof(UNoticePopupState) == 0x000210, "Wrong size on UNoticePopupState");
static_assert(offsetof(UNoticePopupState, IsViewEmergencyInfo) == 0x000128, "Member 'UNoticePopupState::IsViewEmergencyInfo' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, IsViewDLC) == 0x000129, "Member 'UNoticePopupState::IsViewDLC' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, DLCTitle) == 0x000130, "Member 'UNoticePopupState::DLCTitle' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, DLCScheduleText) == 0x000140, "Member 'UNoticePopupState::DLCScheduleText' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, DLCBGTexture) == 0x000150, "Member 'UNoticePopupState::DLCBGTexture' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, DLCStartTime) == 0x000158, "Member 'UNoticePopupState::DLCStartTime' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, IsViewFesta) == 0x000160, "Member 'UNoticePopupState::IsViewFesta' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, FestaEventID) == 0x000164, "Member 'UNoticePopupState::FestaEventID' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, FestaTitle) == 0x000168, "Member 'UNoticePopupState::FestaTitle' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, FestaBGTexture) == 0x000178, "Member 'UNoticePopupState::FestaBGTexture' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, FestaEventStartTime) == 0x000180, "Member 'UNoticePopupState::FestaEventStartTime' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, FestaEventEndTime) == 0x000188, "Member 'UNoticePopupState::FestaEventEndTime' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, IsViewCollaboInfo) == 0x000190, "Member 'UNoticePopupState::IsViewCollaboInfo' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, CollaboTitle) == 0x000198, "Member 'UNoticePopupState::CollaboTitle' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, CollaboScheduleText) == 0x0001A8, "Member 'UNoticePopupState::CollaboScheduleText' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, CollaboBGTexture) == 0x0001B8, "Member 'UNoticePopupState::CollaboBGTexture' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, CollaboStartTime) == 0x0001C0, "Member 'UNoticePopupState::CollaboStartTime' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, IsViewRegendCompeInfo) == 0x0001C8, "Member 'UNoticePopupState::IsViewRegendCompeInfo' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, LegendCompeID) == 0x0001CC, "Member 'UNoticePopupState::LegendCompeID' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, LegendCompeTitle) == 0x0001D0, "Member 'UNoticePopupState::LegendCompeTitle' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, LegendCompeBGTexture) == 0x0001E0, "Member 'UNoticePopupState::LegendCompeBGTexture' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, LegendCompeStartTime) == 0x0001E8, "Member 'UNoticePopupState::LegendCompeStartTime' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, LegendCompeEndTime) == 0x0001F0, "Member 'UNoticePopupState::LegendCompeEndTime' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, IsViewWorldMatchInfo) == 0x0001F8, "Member 'UNoticePopupState::IsViewWorldMatchInfo' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, IsViewBonusInfo) == 0x0001F9, "Member 'UNoticePopupState::IsViewBonusInfo' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, TopMenuReturnState) == 0x0001FA, "Member 'UNoticePopupState::TopMenuReturnState' has a wrong offset!");
static_assert(offsetof(UNoticePopupState, LobbyReturnState) == 0x0001FB, "Member 'UNoticePopupState::LobbyReturnState' has a wrong offset!");

// Class UNION.LobbyFestaSequence2
// 0x0100 (0x0A38 - 0x0938)
class ALobbyFestaSequence2 final : public ALobbySequenceBase2
{
public:
	class UOnlineFestaTeamDirectionBase*          FestaTeamDirectUIScene;                            // 0x0938(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MyTeamId;                                          // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_944[0x14];                                     // 0x0944(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   FestaRuleInfoClassPtr;                             // 0x0958(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBeforeRaceRuleExplanationWidget*       FestaRuleInfoWidget;                               // 0x0980(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          RuleExplanationLoopCue;                            // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoundHandle                           RuleExplanationLoop;                               // 0x0990(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_994[0x4];                                      // 0x0994(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   FestaGadgetRentalInfoClassPtr;                     // 0x0998(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGadgetRentalInfoWindow*                FestaGadgetRentalInfoUIScene;                      // 0x09C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   FestaFixedRuleInfoClassPtr;                        // 0x09C8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFestaRuleInfoWidgetBase*               FestaFixedRuleInfoWidget;                          // 0x09F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LobbySearchTime;                                   // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LobbySearchCancelLimitTime;                        // 0x09FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         FestaVoltageActors;                                // 0x0A00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UStaticMeshComponent*>           GroupPlateStaticMeshComponents;                    // 0x0A10(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          EnableTeamColor;                                   // 0x0A20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A21[0x17];                                     // 0x0A21(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeTeamColorCar();
	void ChangeTeamColorPlate();
	void FixedRuleInfoWidgetClose();
	void OnBackKeyReleasedReturnedFromRaceToLobbyEvent(class UObject* InObject);
	void OnFestaRentalGadgetWindowAnimFinished();
	void OnFestaRuleInfoWidgetAnimFinished();
	void OnHeaderMenuRuleTimeTableClickedEvent(class UObject* InObject);
	void OnSyncFestaRule(bool bSuccessful, const struct FFestaFestaTopResponse& Result);
	void SetupFestRaceSettings();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyFestaSequence2">();
	}
	static class ALobbyFestaSequence2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyFestaSequence2>();
	}
};
static_assert(alignof(ALobbyFestaSequence2) == 0x000008, "Wrong alignment on ALobbyFestaSequence2");
static_assert(sizeof(ALobbyFestaSequence2) == 0x000A38, "Wrong size on ALobbyFestaSequence2");
static_assert(offsetof(ALobbyFestaSequence2, FestaTeamDirectUIScene) == 0x000938, "Member 'ALobbyFestaSequence2::FestaTeamDirectUIScene' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, MyTeamId) == 0x000940, "Member 'ALobbyFestaSequence2::MyTeamId' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, FestaRuleInfoClassPtr) == 0x000958, "Member 'ALobbyFestaSequence2::FestaRuleInfoClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, FestaRuleInfoWidget) == 0x000980, "Member 'ALobbyFestaSequence2::FestaRuleInfoWidget' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, RuleExplanationLoopCue) == 0x000988, "Member 'ALobbyFestaSequence2::RuleExplanationLoopCue' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, RuleExplanationLoop) == 0x000990, "Member 'ALobbyFestaSequence2::RuleExplanationLoop' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, FestaGadgetRentalInfoClassPtr) == 0x000998, "Member 'ALobbyFestaSequence2::FestaGadgetRentalInfoClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, FestaGadgetRentalInfoUIScene) == 0x0009C0, "Member 'ALobbyFestaSequence2::FestaGadgetRentalInfoUIScene' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, FestaFixedRuleInfoClassPtr) == 0x0009C8, "Member 'ALobbyFestaSequence2::FestaFixedRuleInfoClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, FestaFixedRuleInfoWidget) == 0x0009F0, "Member 'ALobbyFestaSequence2::FestaFixedRuleInfoWidget' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, LobbySearchTime) == 0x0009F8, "Member 'ALobbyFestaSequence2::LobbySearchTime' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, LobbySearchCancelLimitTime) == 0x0009FC, "Member 'ALobbyFestaSequence2::LobbySearchCancelLimitTime' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, FestaVoltageActors) == 0x000A00, "Member 'ALobbyFestaSequence2::FestaVoltageActors' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, GroupPlateStaticMeshComponents) == 0x000A10, "Member 'ALobbyFestaSequence2::GroupPlateStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(ALobbyFestaSequence2, EnableTeamColor) == 0x000A20, "Member 'ALobbyFestaSequence2::EnableTeamColor' has a wrong offset!");

// Class UNION.OnlineMenuSelectMatch
// 0x0000 (0x0128 - 0x0128)
class UOnlineMenuSelectMatch final : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineMenuSelectMatch">();
	}
	static class UOnlineMenuSelectMatch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineMenuSelectMatch>();
	}
};
static_assert(alignof(UOnlineMenuSelectMatch) == 0x000008, "Wrong alignment on UOnlineMenuSelectMatch");
static_assert(sizeof(UOnlineMenuSelectMatch) == 0x000128, "Wrong size on UOnlineMenuSelectMatch");

// Class UNION.SimpleNpcSkeletalDataAsset
// 0x00A0 (0x00D0 - 0x0030)
class USimpleNpcSkeletalDataAsset final : public UPrimaryDataAsset
{
public:
	TSoftObjectPtr<class USkeletalMesh>           VehicleSkeletalMesh;                               // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   VehicleAnimInstance;                               // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           FrontRivalEngineSound;                             // 0x0080(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           RearRivalEngineSound;                              // 0x00A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleNpcSkeletalDataAsset">();
	}
	static class USimpleNpcSkeletalDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleNpcSkeletalDataAsset>();
	}
};
static_assert(alignof(USimpleNpcSkeletalDataAsset) == 0x000008, "Wrong alignment on USimpleNpcSkeletalDataAsset");
static_assert(sizeof(USimpleNpcSkeletalDataAsset) == 0x0000D0, "Wrong size on USimpleNpcSkeletalDataAsset");
static_assert(offsetof(USimpleNpcSkeletalDataAsset, VehicleSkeletalMesh) == 0x000030, "Member 'USimpleNpcSkeletalDataAsset::VehicleSkeletalMesh' has a wrong offset!");
static_assert(offsetof(USimpleNpcSkeletalDataAsset, VehicleAnimInstance) == 0x000058, "Member 'USimpleNpcSkeletalDataAsset::VehicleAnimInstance' has a wrong offset!");
static_assert(offsetof(USimpleNpcSkeletalDataAsset, FrontRivalEngineSound) == 0x000080, "Member 'USimpleNpcSkeletalDataAsset::FrontRivalEngineSound' has a wrong offset!");
static_assert(offsetof(USimpleNpcSkeletalDataAsset, RearRivalEngineSound) == 0x0000A8, "Member 'USimpleNpcSkeletalDataAsset::RearRivalEngineSound' has a wrong offset!");

// Class UNION.LobbyFriendMatchSequence
// 0x0000 (0x08C8 - 0x08C8)
class ALobbyFriendMatchSequence final : public ALobbySequenceBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyFriendMatchSequence">();
	}
	static class ALobbyFriendMatchSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyFriendMatchSequence>();
	}
};
static_assert(alignof(ALobbyFriendMatchSequence) == 0x000008, "Wrong alignment on ALobbyFriendMatchSequence");
static_assert(sizeof(ALobbyFriendMatchSequence) == 0x0008C8, "Wrong size on ALobbyFriendMatchSequence");

// Class UNION.SceneDriverAnimInstance
// 0x0100 (0x0470 - 0x0370)
class USceneDriverAnimInstance final : public UAnimInstance
{
public:
	EDriverId                                     DriverId;                                          // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverPose                                   DriverPose;                                        // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36A[0x2];                                      // 0x036A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LipSyncBlendInTime;                                // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LipSyncBlendOutTime;                               // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_374[0x14];                                     // 0x0374(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          LipSyncAnimAssets[0x3];                            // 0x0388(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimSequence*                          AnimSequenceAssets[0x17];                          // 0x03A0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 OwnerMeshComponent;                                // 0x0458(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCustomAttrAnimComponent*               CustomAttrAnimComponent;                           // 0x0460(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_468[0x8];                                      // 0x0468(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayAnimMontage(class UAnimMontage* AnimMontage, const float Position);
	void PlayAnimMontageById(ESceneDriverAnimationId ID);
	void PlayAnimSequence(class UAnimSequenceBase* AnimSequence, const float Position);
	void PlayLipSyncById(ESceneDriverLipSyncId ID);
	void PlayLipSyncMotion(class UAnimSequence* LipSyncAnimAsset);
	void ReloadAllAsset();

	class UAnimSequence* GetAnimationAsset(const ESceneDriverAnimationId AssetId) const;
	bool GetAnimationFlag(ESceneDriverAnimationFlag flag) const;
	EDriverPose GetDriverPose() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SceneDriverAnimInstance">();
	}
	static class USceneDriverAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USceneDriverAnimInstance>();
	}
};
static_assert(alignof(USceneDriverAnimInstance) == 0x000010, "Wrong alignment on USceneDriverAnimInstance");
static_assert(sizeof(USceneDriverAnimInstance) == 0x000470, "Wrong size on USceneDriverAnimInstance");
static_assert(offsetof(USceneDriverAnimInstance, DriverId) == 0x000368, "Member 'USceneDriverAnimInstance::DriverId' has a wrong offset!");
static_assert(offsetof(USceneDriverAnimInstance, DriverPose) == 0x000369, "Member 'USceneDriverAnimInstance::DriverPose' has a wrong offset!");
static_assert(offsetof(USceneDriverAnimInstance, LipSyncBlendInTime) == 0x00036C, "Member 'USceneDriverAnimInstance::LipSyncBlendInTime' has a wrong offset!");
static_assert(offsetof(USceneDriverAnimInstance, LipSyncBlendOutTime) == 0x000370, "Member 'USceneDriverAnimInstance::LipSyncBlendOutTime' has a wrong offset!");
static_assert(offsetof(USceneDriverAnimInstance, LipSyncAnimAssets) == 0x000388, "Member 'USceneDriverAnimInstance::LipSyncAnimAssets' has a wrong offset!");
static_assert(offsetof(USceneDriverAnimInstance, AnimSequenceAssets) == 0x0003A0, "Member 'USceneDriverAnimInstance::AnimSequenceAssets' has a wrong offset!");
static_assert(offsetof(USceneDriverAnimInstance, OwnerMeshComponent) == 0x000458, "Member 'USceneDriverAnimInstance::OwnerMeshComponent' has a wrong offset!");
static_assert(offsetof(USceneDriverAnimInstance, CustomAttrAnimComponent) == 0x000460, "Member 'USceneDriverAnimInstance::CustomAttrAnimComponent' has a wrong offset!");

// Class UNION.LobbyFriendMatchSequence2
// 0x00F8 (0x0A30 - 0x0938)
class ALobbyFriendMatchSequence2 : public ALobbySequenceBase2
{
public:
	TSubclassOf<class UPrivateMatchRuleSettingComponent> PrivateMatchRuleSettingComponentClass;      // 0x0938(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrivateMatchRuleSettingComponent*      PrivateMatchRuleSettingComponent;                  // 0x0940(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UPrivateMatchSelectGroupComponent> PrivateMatchSelectGroupComponentClass;      // 0x0948(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrivateMatchSelectGroupComponent*      PrivateMatchSelectGroupComponent;                  // 0x0950(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULobbyCourseSelect>         LobbyCourseSelectClass;                            // 0x0958(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyCourseSelect*                     LobbyCourseSelect;                                 // 0x0960(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFriendMatchMenu>           FriendMatchMenuClass;                              // 0x0968(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFriendMatchMenu*                       FriendMatchMenuComponent;                          // 0x0970(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class APrivateMatchCheckMembersUI> PrivateMatchCheckMembersUIClass;                  // 0x0978(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APrivateMatchCheckMembersUI*            PrivateMatchCheckMembersUI;                        // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            CloseLobbyInvitationWindowWidget;                  // 0x0988(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuRacerParameterDataAsset*           FriendMatchRivalChallengeMenuRacerParameterDataAsset; // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   HostQuitWindowText;                                // 0x0998(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   ClientQuitWindowText;                              // 0x09A8(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   HostFixMemberWindowText;                           // 0x09B8(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           PopUpWindowButtonTextList;                         // 0x09C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          PressedSpecialBtnCue;                              // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsRaceCycleFinalRace;                              // 0x09E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9E1[0x3F];                                     // 0x09E1(0x003F)(Fixing Size After Last Property [ Dumper-7 ])
	class ULobbyJoinInfo*                         CashLobbyJoinInfo;                                 // 0x0A20(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMenuInputRecieveObject*                CancelInputReceiveObject;                          // 0x0A28(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BeforeSelectCourseSetting();
	void DisconnectPlayer(int32 InDisconnectPlayerIndex);
	void FailedCreateLobby();
	void FinishGroupSetting(EMenuSequenceSubState InState);
	void FixedHostGroupSetting();
	void GoNextStateSelectCourse();
	void KickNotFinishCustomizeMembers();
	void KickNotReadyMembers();
	void LoadingDisplayHideFinished();
	void OnBackRuleSetting(EMenuSequenceSubState InState);
	void OnCancelCheckMembers(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnCancelTryToEnterLobby(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnCancelWaitingJoinMembers(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnCancelWaitingJoinMembersAloneHost(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnCheckInvitationComplete(bool Enable, const struct FCreateOrConnectLobbyResult& ConnectResult, EFriendMatchLobbyJoinResult JoinResult);
	void OnDecideCheckMembers(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecideCloseLobbyInvitationWindow(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecideQuitLobbyWindow(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnDecideReadyButton(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnExitStateChangeP2PRaceCycle();
	void OnExitStateCloseLobbyInvitationWindow();
	void OnExitStateTryToEnterLobby();
	void OnExitStateWaitForHostLobbyId();
	void OnExitStateWaitingInTheLobbyTimerEnd();
	void OnExitStateWaitingJoinMembers();
	void OnExitStateWaitingJoinMembersAloneHost();
	void OnExitStateWaitingReceiveLobbyInitData();
	void OnFinishedTimeLineTryToEnterLobby();
	void OnInitStatChangeP2PRaceCycle();
	void OnInitStateCloseLobbyInvitationWindow();
	void OnInitStateTryToEnterLobby();
	void OnInitStateWaitForHostLobbyId();
	void OnInitStateWaitingInTheLobbyTimerEnd();
	void OnInitStateWaitingJoinMembers();
	void OnInitStateWaitingJoinMembersAloneHost();
	void OnInitStateWaitingReceiveLobbyInitData();
	void OnUpdateStateChangeP2PRaceCycle(float InDeltaTime);
	void OnUpdateStateCloseLobbyInvitationWindow(float InDeltaTime);
	void OnUpdateStateTryToEnterLobby(float InDeltaTime);
	void OnUpdateStateWaitForHostLobbyId(float InDeltaTime);
	void OnUpdateStateWaitingInTheLobbyTimerEnd(float InDeltaTime);
	void OnUpdateStateWaitingJoinMembers(float InDeltaTime);
	void OnUpdateStateWaitingJoinMembersAloneHost(float InDeltaTime);
	void OnUpdateStateWaitingReceiveLobbyInitData(float InDeltaTime);
	void OnUpdateTimeLineTryToEnterLobby(float InValue);
	bool ReceiveRuleSetting(bool* OutUsingPreset, bool SetRaceCount);
	void RecieveHostGroupSetting();
	void SelectCourseOnDecideCallback(EStageId* StageId);
	void SendHostGroupSetting(const TArray<int32>& InGroupIndex);
	void SendRuleSetting();
	void SetNextStateWaitingJoinMembers();
	void StartGroupSetting();
	void StateInputInitTryToEnterLobby();
	void StateInputInitWaitingJoinMembers();
	void StateInputInitWaitingJoinMembersAloneHost();

	ELobbySequenceState CheckNextStateWaitingJoinMembers() const;
	bool EnableStateWaitingJoinMembers() const;
	class UCustomMatchLobbyContext* GetFriendMatchLobbyContext() const;
	class UCustomMatchLobbyControlComponent* GetFriendMatchLobbyControlComponent() const;
	int32 GetReadyMemberCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyFriendMatchSequence2">();
	}
	static class ALobbyFriendMatchSequence2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyFriendMatchSequence2>();
	}
};
static_assert(alignof(ALobbyFriendMatchSequence2) == 0x000008, "Wrong alignment on ALobbyFriendMatchSequence2");
static_assert(sizeof(ALobbyFriendMatchSequence2) == 0x000A30, "Wrong size on ALobbyFriendMatchSequence2");
static_assert(offsetof(ALobbyFriendMatchSequence2, PrivateMatchRuleSettingComponentClass) == 0x000938, "Member 'ALobbyFriendMatchSequence2::PrivateMatchRuleSettingComponentClass' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, PrivateMatchRuleSettingComponent) == 0x000940, "Member 'ALobbyFriendMatchSequence2::PrivateMatchRuleSettingComponent' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, PrivateMatchSelectGroupComponentClass) == 0x000948, "Member 'ALobbyFriendMatchSequence2::PrivateMatchSelectGroupComponentClass' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, PrivateMatchSelectGroupComponent) == 0x000950, "Member 'ALobbyFriendMatchSequence2::PrivateMatchSelectGroupComponent' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, LobbyCourseSelectClass) == 0x000958, "Member 'ALobbyFriendMatchSequence2::LobbyCourseSelectClass' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, LobbyCourseSelect) == 0x000960, "Member 'ALobbyFriendMatchSequence2::LobbyCourseSelect' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, FriendMatchMenuClass) == 0x000968, "Member 'ALobbyFriendMatchSequence2::FriendMatchMenuClass' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, FriendMatchMenuComponent) == 0x000970, "Member 'ALobbyFriendMatchSequence2::FriendMatchMenuComponent' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, PrivateMatchCheckMembersUIClass) == 0x000978, "Member 'ALobbyFriendMatchSequence2::PrivateMatchCheckMembersUIClass' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, PrivateMatchCheckMembersUI) == 0x000980, "Member 'ALobbyFriendMatchSequence2::PrivateMatchCheckMembersUI' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, CloseLobbyInvitationWindowWidget) == 0x000988, "Member 'ALobbyFriendMatchSequence2::CloseLobbyInvitationWindowWidget' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, FriendMatchRivalChallengeMenuRacerParameterDataAsset) == 0x000990, "Member 'ALobbyFriendMatchSequence2::FriendMatchRivalChallengeMenuRacerParameterDataAsset' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, HostQuitWindowText) == 0x000998, "Member 'ALobbyFriendMatchSequence2::HostQuitWindowText' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, ClientQuitWindowText) == 0x0009A8, "Member 'ALobbyFriendMatchSequence2::ClientQuitWindowText' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, HostFixMemberWindowText) == 0x0009B8, "Member 'ALobbyFriendMatchSequence2::HostFixMemberWindowText' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, PopUpWindowButtonTextList) == 0x0009C8, "Member 'ALobbyFriendMatchSequence2::PopUpWindowButtonTextList' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, PressedSpecialBtnCue) == 0x0009D8, "Member 'ALobbyFriendMatchSequence2::PressedSpecialBtnCue' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, IsRaceCycleFinalRace) == 0x0009E0, "Member 'ALobbyFriendMatchSequence2::IsRaceCycleFinalRace' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, CashLobbyJoinInfo) == 0x000A20, "Member 'ALobbyFriendMatchSequence2::CashLobbyJoinInfo' has a wrong offset!");
static_assert(offsetof(ALobbyFriendMatchSequence2, CancelInputReceiveObject) == 0x000A28, "Member 'ALobbyFriendMatchSequence2::CancelInputReceiveObject' has a wrong offset!");

// Class UNION.ObjectAccessorLibrary
// 0x0000 (0x0028 - 0x0028)
class UObjectAccessorLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UObject* FindObject(const class UClass* Class_0, class FName Tag);
	static void RegisterObject(class UObject* Object, class FName Tag);
	static void UnregisterObject(class UObject* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectAccessorLibrary">();
	}
	static class UObjectAccessorLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectAccessorLibrary>();
	}
};
static_assert(alignof(UObjectAccessorLibrary) == 0x000008, "Wrong alignment on UObjectAccessorLibrary");
static_assert(sizeof(UObjectAccessorLibrary) == 0x000028, "Wrong size on UObjectAccessorLibrary");

// Class UNION.LobbyHolderBase
// 0x0008 (0x0100 - 0x00F8)
class ULobbyHolderBase : public UHierarchicalStateMachineStateComponent
{
public:
	EMenuSequenceSubState                         DefaultMenuState;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetNextMatchingSequenceState(EOnlineSequenceState InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyHolderBase">();
	}
	static class ULobbyHolderBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyHolderBase>();
	}
};
static_assert(alignof(ULobbyHolderBase) == 0x000008, "Wrong alignment on ULobbyHolderBase");
static_assert(sizeof(ULobbyHolderBase) == 0x000100, "Wrong size on ULobbyHolderBase");
static_assert(offsetof(ULobbyHolderBase, DefaultMenuState) == 0x0000F8, "Member 'ULobbyHolderBase::DefaultMenuState' has a wrong offset!");

// Class UNION.LobbyInvitationNoticeWidget
// 0x02B8 (0x05E0 - 0x0328)
class ULobbyInvitationNoticeWidget : public UUnionUIInputWidget
{
public:
	TMulticastInlineDelegate<void()>              DisplayEndDelegate;                                // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              DisplayFinishDelegate;                             // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bAccept)>  LobbyInvitaionDecideDelegate;                      // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ConfirmStartDelegate;                              // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bResultYes)> ConfirmEndDelegate;                              // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnGamerCardErrorCreatedDelegate;                   // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnGamerCardErrorDestroyedDelegate;                 // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAttentionCreatedDelegate;                        // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAttentionCreateFinishDelegate;                   // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              PlayerIconDataTable;                               // 0x03B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              PlayerIconBgColorDataTable;                        // 0x03E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELobbyInvitationSequenceType                  CurrentInvitationSequenceType;                     // 0x0408(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisplayTime;                                       // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldInputTime;                                     // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultPlayerIconBgColorId;                        // 0x0414(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ConfirmMessageText;                                // 0x0418(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           ConfirmButtonText;                                 // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           AttentionMessageText;                              // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           AttentionDecideButtonText;                         // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   AttentionCancelButtonText;                         // 0x0458(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsHiding;                                          // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFriendListConfirmWidget*               ConfirmWidget;                                     // 0x0470(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFriendListConfirmAnimationWidget*      ConfirmAnimationWidget;                            // 0x0478(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                PrevRegisteredMenu;                                // 0x0480(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                CachePrevRegisteredMenu;                           // 0x0488(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             LoadPlayerIconDataTable;                           // 0x0490(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             LoadPlayerIconBgColorDataTable;                    // 0x0498(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIPopupWindowBase*                PopupWindow;                                       // 0x04A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0x138];                                    // 0x04A8(0x0138)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateConfirmWidget();
	void DestroyConfirmAnimationWidget();
	void DestroyConfirmWidget();
	void EndDisplay();
	bool GetDisplayCountDisable();
	bool GetHoldInputCountState();
	bool GetInputEnable();
	bool GetPlayerIconBgColor(const class FString& InBgColor, struct FLinearColor* OutColor);
	bool GetPlayerIconTexture(int32 InIconId, TSoftObjectPtr<class UTexture2D>* OutIconTexture);
	class UObject* GetPrevRegisteredMenu();
	void OnAttentionPopupWindowClose(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnConfirmAnimationWidgetAnimationOutFinished();
	void OnConfirmWidgetButtonDecision(int32 InButtonIndex);
	void OnConfirmWidgetDecision(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnErrorPFProfileEvent();
	void OnRequestPFrofileEvent(const class FString& PlatformUserId);
	void PlayAnimationIn();
	void PlayAnimationOut();
	void RegisterMenuInputReceiveObject();
	void SetAttentionType(ELobbyInvitationNoticeAttentionType InAttentionType);
	void SetConfirmWidgetAllButtonFocusable(bool bInEnable);
	void SetDisplayCountDisable(bool bInDisable);
	void SetDisplayCountState(bool bInEnable, bool bInResetCount);
	void SetHoldInputCountState(bool bInEnable);
	void SetInputEnable(bool bInEnable);
	void SetLobbyInfo(const struct FLobbyInvitationNoticeInfo& InLobbyInfo);
	void SetupNoticeSequenceType(ELobbyInvitationSequenceType SequenceType);
	void StartDisplay();
	void UnbindAllDelegate();
	void UnregisterMenuInputReceiveObject();
	void UpdateHoldInputCountDisplay(float CountValue);
	void UpdateLobbyInfoDisplay(const struct FLobbyInvitationNoticeInfo& InLobbyInfo);

	ELobbyInvitationSequenceType GetCurrentInvitationSequenceType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyInvitationNoticeWidget">();
	}
	static class ULobbyInvitationNoticeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyInvitationNoticeWidget>();
	}
};
static_assert(alignof(ULobbyInvitationNoticeWidget) == 0x000008, "Wrong alignment on ULobbyInvitationNoticeWidget");
static_assert(sizeof(ULobbyInvitationNoticeWidget) == 0x0005E0, "Wrong size on ULobbyInvitationNoticeWidget");
static_assert(offsetof(ULobbyInvitationNoticeWidget, DisplayEndDelegate) == 0x000328, "Member 'ULobbyInvitationNoticeWidget::DisplayEndDelegate' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, DisplayFinishDelegate) == 0x000338, "Member 'ULobbyInvitationNoticeWidget::DisplayFinishDelegate' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, LobbyInvitaionDecideDelegate) == 0x000348, "Member 'ULobbyInvitationNoticeWidget::LobbyInvitaionDecideDelegate' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, ConfirmStartDelegate) == 0x000358, "Member 'ULobbyInvitationNoticeWidget::ConfirmStartDelegate' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, ConfirmEndDelegate) == 0x000368, "Member 'ULobbyInvitationNoticeWidget::ConfirmEndDelegate' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, OnGamerCardErrorCreatedDelegate) == 0x000378, "Member 'ULobbyInvitationNoticeWidget::OnGamerCardErrorCreatedDelegate' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, OnGamerCardErrorDestroyedDelegate) == 0x000388, "Member 'ULobbyInvitationNoticeWidget::OnGamerCardErrorDestroyedDelegate' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, OnAttentionCreatedDelegate) == 0x000398, "Member 'ULobbyInvitationNoticeWidget::OnAttentionCreatedDelegate' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, OnAttentionCreateFinishDelegate) == 0x0003A8, "Member 'ULobbyInvitationNoticeWidget::OnAttentionCreateFinishDelegate' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, PlayerIconDataTable) == 0x0003B8, "Member 'ULobbyInvitationNoticeWidget::PlayerIconDataTable' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, PlayerIconBgColorDataTable) == 0x0003E0, "Member 'ULobbyInvitationNoticeWidget::PlayerIconBgColorDataTable' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, CurrentInvitationSequenceType) == 0x000408, "Member 'ULobbyInvitationNoticeWidget::CurrentInvitationSequenceType' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, DisplayTime) == 0x00040C, "Member 'ULobbyInvitationNoticeWidget::DisplayTime' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, HoldInputTime) == 0x000410, "Member 'ULobbyInvitationNoticeWidget::HoldInputTime' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, DefaultPlayerIconBgColorId) == 0x000414, "Member 'ULobbyInvitationNoticeWidget::DefaultPlayerIconBgColorId' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, ConfirmMessageText) == 0x000418, "Member 'ULobbyInvitationNoticeWidget::ConfirmMessageText' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, ConfirmButtonText) == 0x000428, "Member 'ULobbyInvitationNoticeWidget::ConfirmButtonText' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, AttentionMessageText) == 0x000438, "Member 'ULobbyInvitationNoticeWidget::AttentionMessageText' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, AttentionDecideButtonText) == 0x000448, "Member 'ULobbyInvitationNoticeWidget::AttentionDecideButtonText' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, AttentionCancelButtonText) == 0x000458, "Member 'ULobbyInvitationNoticeWidget::AttentionCancelButtonText' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, IsHiding) == 0x000468, "Member 'ULobbyInvitationNoticeWidget::IsHiding' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, ConfirmWidget) == 0x000470, "Member 'ULobbyInvitationNoticeWidget::ConfirmWidget' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, ConfirmAnimationWidget) == 0x000478, "Member 'ULobbyInvitationNoticeWidget::ConfirmAnimationWidget' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, PrevRegisteredMenu) == 0x000480, "Member 'ULobbyInvitationNoticeWidget::PrevRegisteredMenu' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, CachePrevRegisteredMenu) == 0x000488, "Member 'ULobbyInvitationNoticeWidget::CachePrevRegisteredMenu' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, LoadPlayerIconDataTable) == 0x000490, "Member 'ULobbyInvitationNoticeWidget::LoadPlayerIconDataTable' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, LoadPlayerIconBgColorDataTable) == 0x000498, "Member 'ULobbyInvitationNoticeWidget::LoadPlayerIconBgColorDataTable' has a wrong offset!");
static_assert(offsetof(ULobbyInvitationNoticeWidget, PopupWindow) == 0x0004A0, "Member 'ULobbyInvitationNoticeWidget::PopupWindow' has a wrong offset!");

// Class UNION.NoticeEventEndState
// 0x0000 (0x0128 - 0x0128)
class UNoticeEventEndState : public UMenuSequenceSubStateBase
{
public:
	void SetSaveData(const TArray<struct FRewardGetWindowParam>& RewardDataList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NoticeEventEndState">();
	}
	static class UNoticeEventEndState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoticeEventEndState>();
	}
};
static_assert(alignof(UNoticeEventEndState) == 0x000008, "Wrong alignment on UNoticeEventEndState");
static_assert(sizeof(UNoticeEventEndState) == 0x000128, "Wrong size on UNoticeEventEndState");

// Class UNION.LobbyLegendCompeSequence
// 0x0000 (0x08C8 - 0x08C8)
class ALobbyLegendCompeSequence final : public ALobbySequenceBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyLegendCompeSequence">();
	}
	static class ALobbyLegendCompeSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyLegendCompeSequence>();
	}
};
static_assert(alignof(ALobbyLegendCompeSequence) == 0x000008, "Wrong alignment on ALobbyLegendCompeSequence");
static_assert(sizeof(ALobbyLegendCompeSequence) == 0x0008C8, "Wrong size on ALobbyLegendCompeSequence");

// Class UNION.LobbyMatchingCharaIcon
// 0x0018 (0x03F0 - 0x03D8)
class ULobbyMatchingCharaIcon : public UUnionUISceneBase
{
public:
	class UMaterialInstanceDynamic*               CharaIcon;                                         // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WS_StatusIcon;                                     // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PlayerIndex;                                       // 0x03E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSetUpCharaIconEvent(EDriverId InDriverId, const TSoftObjectPtr<class UTexture2D>& InTexture);
	void SetChangeOnlineIcon(bool bIsOnline);
	void SetChangeStatusIcon(bool bIsReady);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyMatchingCharaIcon">();
	}
	static class ULobbyMatchingCharaIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyMatchingCharaIcon>();
	}
};
static_assert(alignof(ULobbyMatchingCharaIcon) == 0x000008, "Wrong alignment on ULobbyMatchingCharaIcon");
static_assert(sizeof(ULobbyMatchingCharaIcon) == 0x0003F0, "Wrong size on ULobbyMatchingCharaIcon");
static_assert(offsetof(ULobbyMatchingCharaIcon, CharaIcon) == 0x0003D8, "Member 'ULobbyMatchingCharaIcon::CharaIcon' has a wrong offset!");
static_assert(offsetof(ULobbyMatchingCharaIcon, WS_StatusIcon) == 0x0003E0, "Member 'ULobbyMatchingCharaIcon::WS_StatusIcon' has a wrong offset!");
static_assert(offsetof(ULobbyMatchingCharaIcon, PlayerIndex) == 0x0003E8, "Member 'ULobbyMatchingCharaIcon::PlayerIndex' has a wrong offset!");

// Class UNION.TopInfoWidgetBase
// 0x0038 (0x0318 - 0x02E0)
class UTopInfoWidgetBase : public UUserWidget
{
public:
	TArray<bool>                                  ValidPageCategory;                                 // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<ETopInfoWidgetPageCategory>            NewDispCategory;                                   // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_300[0x18];                                     // 0x0300(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ETopInfoWidgetPageCategory GetAfterNextPage();
	ETopInfoWidgetPageCategory GetBeforePrevPage();
	ETopInfoWidgetPageCategory GetCurrentPage();
	ETopInfoWidgetPageCategory GetNextPage();
	ETopInfoWidgetPageCategory GetPrevPage();
	bool IsLeftKeyPressLoop();
	bool IsNewAfterNextPage();
	bool IsNewBeforePrevPage();
	bool IsNewCurrentPage();
	bool IsNewNextPage();
	bool IsNewPrevPage();
	bool IsRightKeyPressLoop();
	void ReleaseLeftKey();
	void ReleaseRightKey();
	void SetPageNext();
	void SetPagePrev();
	void SetupEnablePageCategory(ETopInfoWidgetPageCategory ReturnPage);
	void StartLeftKeyPress();
	void StartRightKeyPress();
	void UpdateArrawVisible();
	void WatchedPage(bool IsCenterCategoryL, bool IsCenterCategoryR);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TopInfoWidgetBase">();
	}
	static class UTopInfoWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTopInfoWidgetBase>();
	}
};
static_assert(alignof(UTopInfoWidgetBase) == 0x000008, "Wrong alignment on UTopInfoWidgetBase");
static_assert(sizeof(UTopInfoWidgetBase) == 0x000318, "Wrong size on UTopInfoWidgetBase");
static_assert(offsetof(UTopInfoWidgetBase, ValidPageCategory) == 0x0002E0, "Member 'UTopInfoWidgetBase::ValidPageCategory' has a wrong offset!");
static_assert(offsetof(UTopInfoWidgetBase, NewDispCategory) == 0x0002F0, "Member 'UTopInfoWidgetBase::NewDispCategory' has a wrong offset!");

// Class UNION.LobbyPlayerListState
// 0x0058 (0x0180 - 0x0128)
class ULobbyPlayerListState : public UMenuSequenceSubStateBase
{
public:
	class UUnionUIButtonsPanel*                   PlayerNameButtonsPanel;                            // 0x0128(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUISceneBase*                      BaseScene;                                         // 0x0130(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           PlayerNameButtonCanvasPanel;                       // 0x0138(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                WidgetForBack;                                     // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsSquadMode;                                       // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     TargetTransforms;                                  // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          IsInitialized;                                     // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_161[0x1F];                                     // 0x0161(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearPlayerNameButtonsPanel();
	class UOnlinePlayerNameButton* CreatePlayerName();
	class UUnionUIButtonBase* FocusPlayerName();
	class UUnionUIButtonBase* FocusPrevPlayerName(bool bIsSquad);
	class UOnlinePlayerNameButton* GetOwnPlayerNameButton();
	class UUnionUIButtonsPanel* GetPlayerNameButtonsPanel();
	void OnInitialize(const int32 InPlayerNameMaxCount);
	void RemovePlayerName();
	void SetNavigationPlayerName();
	void SetPlayerName(int32 InPlayerIndex, const struct FPlayerNameContext& InContext);
	void SetPlayerNameViewportPosition(int32 InRacerIndex, const struct FVector& InTargetLocation, const struct FVector2D& InOffset);
	void Setup(class UUnionUISceneBase* InBaseScene, class UCanvasPanel* InCanvasPanel, bool InIsSquadMode);
	void SetVisibilityAllPlayerName(ESlateVisibility InVisibility, ESlateVisibility InPlatformIconVisibility);
	void SetVisibilityOwnerIcon(ESlateVisibility InVisibility);
	void SetVisibilityPlayerName(int32 InButtonIndex, ESlateVisibility InVisibility, ESlateVisibility InPlatformIconVisibility);
	void UnFocusPlayerName();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyPlayerListState">();
	}
	static class ULobbyPlayerListState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyPlayerListState>();
	}
};
static_assert(alignof(ULobbyPlayerListState) == 0x000008, "Wrong alignment on ULobbyPlayerListState");
static_assert(sizeof(ULobbyPlayerListState) == 0x000180, "Wrong size on ULobbyPlayerListState");
static_assert(offsetof(ULobbyPlayerListState, PlayerNameButtonsPanel) == 0x000128, "Member 'ULobbyPlayerListState::PlayerNameButtonsPanel' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListState, BaseScene) == 0x000130, "Member 'ULobbyPlayerListState::BaseScene' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListState, PlayerNameButtonCanvasPanel) == 0x000138, "Member 'ULobbyPlayerListState::PlayerNameButtonCanvasPanel' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListState, WidgetForBack) == 0x000140, "Member 'ULobbyPlayerListState::WidgetForBack' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListState, IsSquadMode) == 0x000148, "Member 'ULobbyPlayerListState::IsSquadMode' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListState, TargetTransforms) == 0x000150, "Member 'ULobbyPlayerListState::TargetTransforms' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListState, IsInitialized) == 0x000160, "Member 'ULobbyPlayerListState::IsInitialized' has a wrong offset!");

// Class UNION.LobbyRankMatchSequence2
// 0x0008 (0x0940 - 0x0938)
class ALobbyRankMatchSequence2 final : public ALobbySequenceBase2
{
public:
	float                                         LobbySearchTime;                                   // 0x0938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LobbySearchCancelLimitTime;                        // 0x093C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyRankMatchSequence2">();
	}
	static class ALobbyRankMatchSequence2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyRankMatchSequence2>();
	}
};
static_assert(alignof(ALobbyRankMatchSequence2) == 0x000008, "Wrong alignment on ALobbyRankMatchSequence2");
static_assert(sizeof(ALobbyRankMatchSequence2) == 0x000940, "Wrong size on ALobbyRankMatchSequence2");
static_assert(offsetof(ALobbyRankMatchSequence2, LobbySearchTime) == 0x000938, "Member 'ALobbyRankMatchSequence2::LobbySearchTime' has a wrong offset!");
static_assert(offsetof(ALobbyRankMatchSequence2, LobbySearchCancelLimitTime) == 0x00093C, "Member 'ALobbyRankMatchSequence2::LobbySearchCancelLimitTime' has a wrong offset!");

// Class UNION.SimpleMachineAnimInstance
// 0x00E0 (0x04D0 - 0x03F0)
class USimpleMachineAnimInstance : public URacerAnimInstance
{
public:
	uint8                                         Pad_3F0[0x20];                                     // 0x03F0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedRate;                                         // 0x0410(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringLR;                                        // 0x0414(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyG;                                             // 0x0418(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyGd;                                            // 0x041C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyGr;                                            // 0x0420(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitFront;                                          // 0x0424(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitRear;                                           // 0x0425(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitLeft;                                           // 0x0426(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitRight;                                          // 0x0427(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInAir;                                           // 0x0428(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInDrift;                                         // 0x0429(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableWheelPosUpdate;                            // 0x042A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableWheelRotUpdate;                            // 0x042B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  HitMonsterTruckTire;                               // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        WheelPos;                                          // 0x0440(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       WheelRot;                                          // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_460[0x48];                                     // 0x0460(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class ASimpleNPCSkeletalActor*                Owner;                                             // 0x04A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRacerStatusObject*                UnionRacerStatusObject;                            // 0x04B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMachineAnimDataAsset*                  MachineAnimDataAsset;                              // 0x04B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMachineAnimParameterDataAsset*         MachineAnimParameterDataAsset;                     // 0x04C0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C8[0x8];                                      // 0x04C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MontageJumpToSection(EMachineAnimationMontageAssetId AssetId, class FName SectionName);
	void MontagePlay(EMachineAnimationMontageAssetId AssetId, float PlayRate);
	void MontageStop(EMachineAnimationMontageAssetId AssetId, float InBlendOutTime);
	void SetAnimState(EMachineAnimState AnimState);
	void SetAnimSyncChild(TScriptInterface<class IUnionRacerAnimSyncChild> Child);

	EMachineAnimState GetAnimState() const;
	float GetBoatSyncAnimTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleMachineAnimInstance">();
	}
	static class USimpleMachineAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleMachineAnimInstance>();
	}
};
static_assert(alignof(USimpleMachineAnimInstance) == 0x000010, "Wrong alignment on USimpleMachineAnimInstance");
static_assert(sizeof(USimpleMachineAnimInstance) == 0x0004D0, "Wrong size on USimpleMachineAnimInstance");
static_assert(offsetof(USimpleMachineAnimInstance, SpeedRate) == 0x000410, "Member 'USimpleMachineAnimInstance::SpeedRate' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, SteeringLR) == 0x000414, "Member 'USimpleMachineAnimInstance::SteeringLR' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, BodyG) == 0x000418, "Member 'USimpleMachineAnimInstance::BodyG' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, BodyGd) == 0x00041C, "Member 'USimpleMachineAnimInstance::BodyGd' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, BodyGr) == 0x000420, "Member 'USimpleMachineAnimInstance::BodyGr' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, HitFront) == 0x000424, "Member 'USimpleMachineAnimInstance::HitFront' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, HitRear) == 0x000425, "Member 'USimpleMachineAnimInstance::HitRear' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, HitLeft) == 0x000426, "Member 'USimpleMachineAnimInstance::HitLeft' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, HitRight) == 0x000427, "Member 'USimpleMachineAnimInstance::HitRight' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, IsInAir) == 0x000428, "Member 'USimpleMachineAnimInstance::IsInAir' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, IsInDrift) == 0x000429, "Member 'USimpleMachineAnimInstance::IsInDrift' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, IsEnableWheelPosUpdate) == 0x00042A, "Member 'USimpleMachineAnimInstance::IsEnableWheelPosUpdate' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, IsEnableWheelRotUpdate) == 0x00042B, "Member 'USimpleMachineAnimInstance::IsEnableWheelRotUpdate' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, HitMonsterTruckTire) == 0x000430, "Member 'USimpleMachineAnimInstance::HitMonsterTruckTire' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, WheelPos) == 0x000440, "Member 'USimpleMachineAnimInstance::WheelPos' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, WheelRot) == 0x000450, "Member 'USimpleMachineAnimInstance::WheelRot' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, Owner) == 0x0004A8, "Member 'USimpleMachineAnimInstance::Owner' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, UnionRacerStatusObject) == 0x0004B0, "Member 'USimpleMachineAnimInstance::UnionRacerStatusObject' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, MachineAnimDataAsset) == 0x0004B8, "Member 'USimpleMachineAnimInstance::MachineAnimDataAsset' has a wrong offset!");
static_assert(offsetof(USimpleMachineAnimInstance, MachineAnimParameterDataAsset) == 0x0004C0, "Member 'USimpleMachineAnimInstance::MachineAnimParameterDataAsset' has a wrong offset!");

// Class UNION.LobbySceneOnline
// 0x0018 (0x0410 - 0x03F8)
class ULobbySceneOnline final : public ULobbySceneBase
{
public:
	class UOnlinePlayerNameButton*                PlayerNameButton;                                  // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    StageName;                                         // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DmyIcon;                                           // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void LoadResultCharaIcon(EDriverId InResultDriverId);
	void SetVisibilitySelectCourseResultEvent(ESlateVisibility InVisibility, bool HiddenPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySceneOnline">();
	}
	static class ULobbySceneOnline* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbySceneOnline>();
	}
};
static_assert(alignof(ULobbySceneOnline) == 0x000008, "Wrong alignment on ULobbySceneOnline");
static_assert(sizeof(ULobbySceneOnline) == 0x000410, "Wrong size on ULobbySceneOnline");
static_assert(offsetof(ULobbySceneOnline, PlayerNameButton) == 0x0003F8, "Member 'ULobbySceneOnline::PlayerNameButton' has a wrong offset!");
static_assert(offsetof(ULobbySceneOnline, StageName) == 0x000400, "Member 'ULobbySceneOnline::StageName' has a wrong offset!");
static_assert(offsetof(ULobbySceneOnline, DmyIcon) == 0x000408, "Member 'ULobbySceneOnline::DmyIcon' has a wrong offset!");

// Class UNION.MenuRacerParameterDataAsset
// 0x0010 (0x0040 - 0x0030)
class UMenuRacerParameterDataAsset final : public UDataAsset
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuRacerParameterDataAsset">();
	}
	static class UMenuRacerParameterDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuRacerParameterDataAsset>();
	}
};
static_assert(alignof(UMenuRacerParameterDataAsset) == 0x000008, "Wrong alignment on UMenuRacerParameterDataAsset");
static_assert(sizeof(UMenuRacerParameterDataAsset) == 0x000040, "Wrong size on UMenuRacerParameterDataAsset");
static_assert(offsetof(UMenuRacerParameterDataAsset, Transforms) == 0x000030, "Member 'UMenuRacerParameterDataAsset::Transforms' has a wrong offset!");

// Class UNION.RewardGetBase
// 0x0050 (0x0378 - 0x0328)
class URewardGetBase : public UUnionUIInputWidget
{
public:
	TMulticastInlineDelegate<void()>              OpenEndDelegate;                                   // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              CloseEndDelegate;                                  // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bEnableWindowInput;                                // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRichTextBlock*                    TXT_Title;                                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x10];                                     // 0x0358(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _DonpaTicketNameText;                              // 0x0368(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	void CloseWindow();
	class UImage* GetMachineTypeIconImage();
	void InitializeTimeClose();
	void OpenWindow();
	void SetCloseTime(float InCloseTime);
	void SetDisplayMachineId(const TArray<EMachineId>& InMachineIdArray);
	void SetDisplayParam(const TArray<struct FRewardGetWindowParam>& InDisplayParamArray, int32 InWindowZOrder);
	void SetMachineTypeIcon(uint8 InMachineType);
	void SetTitleText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RewardGetBase">();
	}
	static class URewardGetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URewardGetBase>();
	}
};
static_assert(alignof(URewardGetBase) == 0x000008, "Wrong alignment on URewardGetBase");
static_assert(sizeof(URewardGetBase) == 0x000378, "Wrong size on URewardGetBase");
static_assert(offsetof(URewardGetBase, OpenEndDelegate) == 0x000328, "Member 'URewardGetBase::OpenEndDelegate' has a wrong offset!");
static_assert(offsetof(URewardGetBase, CloseEndDelegate) == 0x000338, "Member 'URewardGetBase::CloseEndDelegate' has a wrong offset!");
static_assert(offsetof(URewardGetBase, bEnableWindowInput) == 0x000348, "Member 'URewardGetBase::bEnableWindowInput' has a wrong offset!");
static_assert(offsetof(URewardGetBase, TXT_Title) == 0x000350, "Member 'URewardGetBase::TXT_Title' has a wrong offset!");
static_assert(offsetof(URewardGetBase, _DonpaTicketNameText) == 0x000368, "Member 'URewardGetBase::_DonpaTicketNameText' has a wrong offset!");

// Class UNION.RewardGetWindow
// 0x0030 (0x03A8 - 0x0378)
class URewardGetWindow : public URewardGetBase
{
public:
	bool                                          bOverrideUpperText;                                // 0x0378(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OverrideUpperText;                                 // 0x0380(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    DSP_TXT_ItemType;                                  // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_ItemName;                                      // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonItemIcon*                        WBP_CMN_ItemIcon;                                  // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DoOverrideUpperText();
	void SetEnabledOverrideUpperText(const bool bEnabled);
	void SetLowerText(const class FText& Text);
	void SetOverrideUpperText(const class FText& InText);
	void SetupItemIconWidget(ERewardType InRewardType, class UTexture2D* Texture);
	void SetupItemIconWidgetWithNum(ERewardType InRewardType, class UTexture2D* Texture, int32 NumItem);
	void SetUpperText(ERewardType InRewardType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RewardGetWindow">();
	}
	static class URewardGetWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<URewardGetWindow>();
	}
};
static_assert(alignof(URewardGetWindow) == 0x000008, "Wrong alignment on URewardGetWindow");
static_assert(sizeof(URewardGetWindow) == 0x0003A8, "Wrong size on URewardGetWindow");
static_assert(offsetof(URewardGetWindow, bOverrideUpperText) == 0x000378, "Member 'URewardGetWindow::bOverrideUpperText' has a wrong offset!");
static_assert(offsetof(URewardGetWindow, OverrideUpperText) == 0x000380, "Member 'URewardGetWindow::OverrideUpperText' has a wrong offset!");
static_assert(offsetof(URewardGetWindow, DSP_TXT_ItemType) == 0x000390, "Member 'URewardGetWindow::DSP_TXT_ItemType' has a wrong offset!");
static_assert(offsetof(URewardGetWindow, TXT_ItemName) == 0x000398, "Member 'URewardGetWindow::TXT_ItemName' has a wrong offset!");
static_assert(offsetof(URewardGetWindow, WBP_CMN_ItemIcon) == 0x0003A0, "Member 'URewardGetWindow::WBP_CMN_ItemIcon' has a wrong offset!");

// Class UNION.LobbySequenceP2PConnectionEOS
// 0x0020 (0x00C0 - 0x00A0)
class ULobbySequenceP2PConnectionEOS final : public ULobbySequenceP2PConnection
{
public:
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCompleteSetupLocalMemberRaceAttributes(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnCompleteSetupLocalMemberRaceAttributesForSquad(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnCompleteSetupLocalMemberRaceAttributesForSquadMember(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnKickedMemberContext(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnStageUpdateComplete(bool bSuccessful, const struct FLobbyOperationResult& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySequenceP2PConnectionEOS">();
	}
	static class ULobbySequenceP2PConnectionEOS* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbySequenceP2PConnectionEOS>();
	}
};
static_assert(alignof(ULobbySequenceP2PConnectionEOS) == 0x000008, "Wrong alignment on ULobbySequenceP2PConnectionEOS");
static_assert(sizeof(ULobbySequenceP2PConnectionEOS) == 0x0000C0, "Wrong size on ULobbySequenceP2PConnectionEOS");

// Class UNION.LobbySquadSequence
// 0x0260 (0x0B28 - 0x08C8)
class ALobbySquadSequence final : public ALobbySequenceBase
{
public:
	uint8                                         Pad_8C8[0x8];                                      // 0x08C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UOnlineScene*                           GameModeUIScene;                                   // 0x08D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOnlineReadySceneBase*                  ReadyUIScene;                                      // 0x08D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHintPopupWindow*                       TipsUIScene;                                       // 0x08E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMessageBar*                      MessageBarScene;                                   // 0x08E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         SquadPosition;                                     // 0x08F0(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class AActor*                                 MainCamera;                                        // 0x0900(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbySequenceState                           ReturnToState;                                     // 0x0908(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMatchingLobbyType                            SelectedLobbyType;                                 // 0x0909(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_90A[0x6];                                      // 0x090A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         SquadEmit;                                         // 0x0910(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCheckReady;                                     // 0x0918(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanCancelInput;                                   // 0x0919(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanOwnCancel;                                     // 0x091A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_91B[0x5];                                      // 0x091B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           PopUpTitleList;                                    // 0x0920(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           PopUpMessageList;                                  // 0x0930(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           PopUpButtonList;                                   // 0x0940(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   OptionStatePath;                                   // 0x0950(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuSequenceSubStateBase*              OptionStateComponent;                              // 0x0978(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   FriendMatchMenuPath;                               // 0x0980(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFriendMatchMenu*                       FriendMatchMenuComponent;                          // 0x09A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFriendListState*                       FriendListComponent;                               // 0x09B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   FriendLsitPtr;                                     // 0x09B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> LobbyReadyDecideSyncDelegate; // 0x09E0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> LobbyReadyCancelSyncDelegate; // 0x09F0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> LobbyChangeStateSyncDelegate; // 0x0A00(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A10[0x8];                                      // 0x0A10(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          CancelQue;                                         // 0x0A18(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          LobbyMatchingCompleteQue;                          // 0x0A20(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   SelectGameModeUISoftClassPtr;                      // 0x0A28(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   ReadyUISoftClassPtr;                               // 0x0A50(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   TipsUISoftClassPtr;                                // 0x0A78(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   MessageBarClassPtr;                                // 0x0AA0(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   SquadPositionObjectClassPtr;                       // 0x0AC8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UNiagaraSystem>          SquadPositionEmitPtr;                              // 0x0AF0(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B18[0x8];                                      // 0x0B18(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIPopupWindowBase*                PopupWindow;                                       // 0x0B20(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CheckMemberCancelEvent();
	void CreateSquadLobbyEvent(class ULobbyContextBase* LobbyContext, const struct FOnlineErrorBP& Error);
	void DecidedSquadGameMode(EOnlineGameMode InSelectGameMode);
	void DisconnectGuest(int32 InPlayerIndex);
	void DoneReadyCheckEvent();
	void FriendMatchMenuCancelEvent();
	void FriendMatchMenuCompleteAnimFinishedEvent();
	void FriendMatchMenuEnterLobbyDecisionEvent();
	void FriendRuleFixedEvent(EPrivateMatchPlayType InPlayType);
	bool IsAloneSquadLobby();
	void KickToAllClientMember(class ULobbyContextBase* InContext);
	void LoadFinishAfterCharaMatchingLevelEvent();
	void OnCancelCheckedMember(int32 InPlayerIndex);
	void OnCancelCheckedMember_DelegateEvent(bool bSuccessful, const struct FLobbyOperationResult& InResult);
	void OnChangeLobbyMemberState_DelegateEvent(bool bSuccessful, const struct FLobbyOperationResult& InResult);
	void OnCompleteSyncComebackSquadLobbyState(bool bSuccessful, const struct FLobbyOperationResult& InResult);
	void OnCompleteSyncMovePublicLobbyState(bool bSuccessful, const struct FLobbyOperationResult& InResult);
	void OnDecideCheckedMember_DelegateEvent(bool bSuccessful, const struct FLobbyOperationResult& InResult);
	void OnDecideLobbyPopUpEvent(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnExitStateCheckJoinLobby();
	void OnExitStateOptionSquad(EMenuSequenceSubState State);
	void OnExitStateWaitingComeBackLobby();
	void OnFinishedFade_GotoCharaMachineSelect(EUnionUIFadeDirection FadeDirection);
	void OnFinishedFade_GotoGarage(EUnionUIFadeDirection FadeDirection);
	void OnFinishedFade_GotoLobby(EUnionUIFadeDirection FadeDirection);
	void OnFinishedFade_SelectGameMode(EUnionUIFadeDirection FadeDirection);
	void OnGameModeButtonDecideEvent(class UUnionUIButtonBase* Button);
	void OnInitStateCheckJoinLobby();
	void OnInitStateOptionSquad();
	void OnInitStateWaitingComeBackLobby();
	void OnInviteConfilmWindowInEvent();
	void OnInviteConfilmWindowOutEvent(bool bIsOut);
	void OnlineGameModeCancelEvent();
	void OnLobbyOperationCompleteSimple(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnReadyButtonDecideEvent();
	void OnReceiveMemberUpdateAtCheckMembersEvent(class USquadContext* LobbyContext, class USquadMemberContext* MemberContext);
	void OnSideMenuButtonDecide(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnSyncDecideSquadGameModeEvent(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnTipsWindow_CloseEndEvent();
	void OnUpdateStateCheckMembers(float InDeltaTime);
	void OnUpdateStateWaitingComeBackLobby(float InDeltaTime);
	void RemoveOnlineWidgets(class UCommonMenuHeaderMenu* InHeader);
	void SyncOnlineGameMode(EOnlineGameMode OnlineGameMode, TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);
	void SyncOwnReadyCheck(bool bReadyCheckOk, TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);
	void WaitGotoLobbyBeforeFadein();

	EMatchingLobbyType GetSelectedOnlineGameModeLobbyType() const;
	bool IsJoiningLobby() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySquadSequence">();
	}
	static class ALobbySquadSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbySquadSequence>();
	}
};
static_assert(alignof(ALobbySquadSequence) == 0x000008, "Wrong alignment on ALobbySquadSequence");
static_assert(sizeof(ALobbySquadSequence) == 0x000B28, "Wrong size on ALobbySquadSequence");
static_assert(offsetof(ALobbySquadSequence, GameModeUIScene) == 0x0008D0, "Member 'ALobbySquadSequence::GameModeUIScene' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, ReadyUIScene) == 0x0008D8, "Member 'ALobbySquadSequence::ReadyUIScene' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, TipsUIScene) == 0x0008E0, "Member 'ALobbySquadSequence::TipsUIScene' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, MessageBarScene) == 0x0008E8, "Member 'ALobbySquadSequence::MessageBarScene' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, SquadPosition) == 0x0008F0, "Member 'ALobbySquadSequence::SquadPosition' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, MainCamera) == 0x000900, "Member 'ALobbySquadSequence::MainCamera' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, ReturnToState) == 0x000908, "Member 'ALobbySquadSequence::ReturnToState' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, SelectedLobbyType) == 0x000909, "Member 'ALobbySquadSequence::SelectedLobbyType' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, SquadEmit) == 0x000910, "Member 'ALobbySquadSequence::SquadEmit' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, bIsCheckReady) == 0x000918, "Member 'ALobbySquadSequence::bIsCheckReady' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, bCanCancelInput) == 0x000919, "Member 'ALobbySquadSequence::bCanCancelInput' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, bCanOwnCancel) == 0x00091A, "Member 'ALobbySquadSequence::bCanOwnCancel' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, PopUpTitleList) == 0x000920, "Member 'ALobbySquadSequence::PopUpTitleList' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, PopUpMessageList) == 0x000930, "Member 'ALobbySquadSequence::PopUpMessageList' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, PopUpButtonList) == 0x000940, "Member 'ALobbySquadSequence::PopUpButtonList' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, OptionStatePath) == 0x000950, "Member 'ALobbySquadSequence::OptionStatePath' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, OptionStateComponent) == 0x000978, "Member 'ALobbySquadSequence::OptionStateComponent' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, FriendMatchMenuPath) == 0x000980, "Member 'ALobbySquadSequence::FriendMatchMenuPath' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, FriendMatchMenuComponent) == 0x0009A8, "Member 'ALobbySquadSequence::FriendMatchMenuComponent' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, FriendListComponent) == 0x0009B0, "Member 'ALobbySquadSequence::FriendListComponent' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, FriendLsitPtr) == 0x0009B8, "Member 'ALobbySquadSequence::FriendLsitPtr' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, LobbyReadyDecideSyncDelegate) == 0x0009E0, "Member 'ALobbySquadSequence::LobbyReadyDecideSyncDelegate' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, LobbyReadyCancelSyncDelegate) == 0x0009F0, "Member 'ALobbySquadSequence::LobbyReadyCancelSyncDelegate' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, LobbyChangeStateSyncDelegate) == 0x000A00, "Member 'ALobbySquadSequence::LobbyChangeStateSyncDelegate' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, CancelQue) == 0x000A18, "Member 'ALobbySquadSequence::CancelQue' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, LobbyMatchingCompleteQue) == 0x000A20, "Member 'ALobbySquadSequence::LobbyMatchingCompleteQue' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, SelectGameModeUISoftClassPtr) == 0x000A28, "Member 'ALobbySquadSequence::SelectGameModeUISoftClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, ReadyUISoftClassPtr) == 0x000A50, "Member 'ALobbySquadSequence::ReadyUISoftClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, TipsUISoftClassPtr) == 0x000A78, "Member 'ALobbySquadSequence::TipsUISoftClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, MessageBarClassPtr) == 0x000AA0, "Member 'ALobbySquadSequence::MessageBarClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, SquadPositionObjectClassPtr) == 0x000AC8, "Member 'ALobbySquadSequence::SquadPositionObjectClassPtr' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, SquadPositionEmitPtr) == 0x000AF0, "Member 'ALobbySquadSequence::SquadPositionEmitPtr' has a wrong offset!");
static_assert(offsetof(ALobbySquadSequence, PopupWindow) == 0x000B20, "Member 'ALobbySquadSequence::PopupWindow' has a wrong offset!");

// Class UNION.LobbySquadSequenceInterface
// 0x0000 (0x0000 - 0x0000)
class ILobbySquadSequenceInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySquadSequenceInterface">();
	}
	static class ILobbySquadSequenceInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILobbySquadSequenceInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ILobbySquadSequenceInterface) == 0x000001, "Wrong alignment on ILobbySquadSequenceInterface");
static_assert(sizeof(ILobbySquadSequenceInterface) == 0x000001, "Wrong size on ILobbySquadSequenceInterface");

// Class UNION.UnionLobbyUtils
// 0x0000 (0x0028 - 0x0028)
class UUnionLobbyUtils final : public UBlueprintFunctionLibrary
{
public:
	static ELobbyType GetLobbyTypeFromJoinInfo(const class ULobbyJoinInfo* JoinInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionLobbyUtils">();
	}
	static class UUnionLobbyUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionLobbyUtils>();
	}
};
static_assert(alignof(UUnionLobbyUtils) == 0x000008, "Wrong alignment on UUnionLobbyUtils");
static_assert(sizeof(UUnionLobbyUtils) == 0x000028, "Wrong size on UUnionLobbyUtils");

// Class UNION.RaceResultSequenceStateRivalTeamResult
// 0x0048 (0x0150 - 0x0108)
class URaceResultSequenceStateRivalTeamResult : public URaceResultSequenceStateBase
{
public:
	TSoftClassPtr<class UClass>                   _RivalResultWidgetClass;                           // 0x0108(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASceneInputKeyHandler*                  _InputKeyHandler;                                  // 0x0130(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMenuInputRecieveObject*                _InputReceiver;                                    // 0x0138(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPartyRaceRivalResultWidget*            _RivalResultWidget;                                // 0x0140(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAcceptKeyPressed(class UObject* Object);
	void OnButtonInput();
	void OnKeyPressed(const struct FKey& PressedKey);
	void OnPlayOutFinished();
	void OnProgressPlayFinished();
	void OnRewardGetWindowFinished();
	void OnWidgetLoaded();
	void OnWinPlayFinished();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceResultSequenceStateRivalTeamResult">();
	}
	static class URaceResultSequenceStateRivalTeamResult* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceResultSequenceStateRivalTeamResult>();
	}
};
static_assert(alignof(URaceResultSequenceStateRivalTeamResult) == 0x000008, "Wrong alignment on URaceResultSequenceStateRivalTeamResult");
static_assert(sizeof(URaceResultSequenceStateRivalTeamResult) == 0x000150, "Wrong size on URaceResultSequenceStateRivalTeamResult");
static_assert(offsetof(URaceResultSequenceStateRivalTeamResult, _RivalResultWidgetClass) == 0x000108, "Member 'URaceResultSequenceStateRivalTeamResult::_RivalResultWidgetClass' has a wrong offset!");
static_assert(offsetof(URaceResultSequenceStateRivalTeamResult, _InputKeyHandler) == 0x000130, "Member 'URaceResultSequenceStateRivalTeamResult::_InputKeyHandler' has a wrong offset!");
static_assert(offsetof(URaceResultSequenceStateRivalTeamResult, _InputReceiver) == 0x000138, "Member 'URaceResultSequenceStateRivalTeamResult::_InputReceiver' has a wrong offset!");
static_assert(offsetof(URaceResultSequenceStateRivalTeamResult, _RivalResultWidget) == 0x000140, "Member 'URaceResultSequenceStateRivalTeamResult::_RivalResultWidget' has a wrong offset!");

// Class UNION.LobbyWirelessSequence2
// 0x0008 (0x0A38 - 0x0A30)
class ALobbyWirelessSequence2 final : public ALobbyFriendMatchSequence2
{
public:
	class AWirelessSequence*                      WirelessSequence;                                  // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyWirelessSequence2">();
	}
	static class ALobbyWirelessSequence2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyWirelessSequence2>();
	}
};
static_assert(alignof(ALobbyWirelessSequence2) == 0x000008, "Wrong alignment on ALobbyWirelessSequence2");
static_assert(sizeof(ALobbyWirelessSequence2) == 0x000A38, "Wrong size on ALobbyWirelessSequence2");
static_assert(offsetof(ALobbyWirelessSequence2, WirelessSequence) == 0x000A30, "Member 'ALobbyWirelessSequence2::WirelessSequence' has a wrong offset!");

// Class UNION.MachineAnimDataAsset
// 0x0050 (0x0080 - 0x0030)
class UMachineAnimDataAsset final : public UPrimaryDataAsset
{
public:
	TMap<EMachineAnimationMontageAssetId, class UAnimMontage*> AnimMontageAssets;                    // 0x0030(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineAnimDataAsset">();
	}
	static class UMachineAnimDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineAnimDataAsset>();
	}
};
static_assert(alignof(UMachineAnimDataAsset) == 0x000008, "Wrong alignment on UMachineAnimDataAsset");
static_assert(sizeof(UMachineAnimDataAsset) == 0x000080, "Wrong size on UMachineAnimDataAsset");
static_assert(offsetof(UMachineAnimDataAsset, AnimMontageAssets) == 0x000030, "Member 'UMachineAnimDataAsset::AnimMontageAssets' has a wrong offset!");

// Class UNION.WirelessLobbySelectScene
// 0x00D0 (0x04A8 - 0x03D8)
class UWirelessLobbySelectScene final : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void()>              OnFinishedInAnimationEvent;                        // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFinishedOutAnimationEvent;                       // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              PlayerIconDataTable;                               // 0x03F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              PlayerIconBgColorDataTable;                        // 0x0420(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultPlayerIconBgColorId;                        // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUnionUIButtonBase*>             MenuButtonArr;                                     // 0x0450(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UUnionUIButtonsPanel*                   MenuButtonsPanel;                                  // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UUnionUIButtonBase*>             FoundLobbyButtonArr;                               // 0x0468(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UUnionUIButtonsPanel*                   FoundLobbyButtonsPanel;                            // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Window_In;                                         // 0x0480(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Window_Loop;                                       // 0x0488(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Window_Out;                                        // 0x0490(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             LoadPlayerIconDataTable;                           // 0x0498(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             LoadPlayerIconBgColorDataTable;                    // 0x04A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool GetPlayerIconBgColor(const class FString& InBgColor, struct FLinearColor* OutColor);
	bool GetPlayerIconTexture(int32 InIconId, TSoftObjectPtr<class UTexture2D>* OutIconTexture);
	void OnInitialize();
	void PlayAnimationIn();
	void PlayAnimationLoop();
	void PlayAnimationOut();
	void SwitchLobbySearchWidget(ELobbySearchSceneType InLobbySearchSceneType);
	void UpdateLobbyList(const TArray<int32>& InLobbies);
	void UpdateLobbyListByLobbySessions(const TArray<class ULobbyJoinInfo*>& LobbySessions);
	void UpdateMemberList(const TArray<class ULobbyMemberContextBase*>& NewMembers);
	void UpdateMemberTodayRecord(const TArray<class ULobbyMemberContextBase*>& Members);

	class UUnionUIButtonsPanel* GetFoundLobbyButtonsPanel() const;
	class UUnionUIButtonsPanel* GetMenuButtonsPanel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WirelessLobbySelectScene">();
	}
	static class UWirelessLobbySelectScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWirelessLobbySelectScene>();
	}
};
static_assert(alignof(UWirelessLobbySelectScene) == 0x000008, "Wrong alignment on UWirelessLobbySelectScene");
static_assert(sizeof(UWirelessLobbySelectScene) == 0x0004A8, "Wrong size on UWirelessLobbySelectScene");
static_assert(offsetof(UWirelessLobbySelectScene, OnFinishedInAnimationEvent) == 0x0003D8, "Member 'UWirelessLobbySelectScene::OnFinishedInAnimationEvent' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, OnFinishedOutAnimationEvent) == 0x0003E8, "Member 'UWirelessLobbySelectScene::OnFinishedOutAnimationEvent' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, PlayerIconDataTable) == 0x0003F8, "Member 'UWirelessLobbySelectScene::PlayerIconDataTable' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, PlayerIconBgColorDataTable) == 0x000420, "Member 'UWirelessLobbySelectScene::PlayerIconBgColorDataTable' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, DefaultPlayerIconBgColorId) == 0x000448, "Member 'UWirelessLobbySelectScene::DefaultPlayerIconBgColorId' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, MenuButtonArr) == 0x000450, "Member 'UWirelessLobbySelectScene::MenuButtonArr' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, MenuButtonsPanel) == 0x000460, "Member 'UWirelessLobbySelectScene::MenuButtonsPanel' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, FoundLobbyButtonArr) == 0x000468, "Member 'UWirelessLobbySelectScene::FoundLobbyButtonArr' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, FoundLobbyButtonsPanel) == 0x000478, "Member 'UWirelessLobbySelectScene::FoundLobbyButtonsPanel' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, Window_In) == 0x000480, "Member 'UWirelessLobbySelectScene::Window_In' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, Window_Loop) == 0x000488, "Member 'UWirelessLobbySelectScene::Window_Loop' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, Window_Out) == 0x000490, "Member 'UWirelessLobbySelectScene::Window_Out' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, LoadPlayerIconDataTable) == 0x000498, "Member 'UWirelessLobbySelectScene::LoadPlayerIconDataTable' has a wrong offset!");
static_assert(offsetof(UWirelessLobbySelectScene, LoadPlayerIconBgColorDataTable) == 0x0004A0, "Member 'UWirelessLobbySelectScene::LoadPlayerIconBgColorDataTable' has a wrong offset!");

// Class UNION.MachineAnimInstance
// 0x00F0 (0x04E0 - 0x03F0)
class UMachineAnimInstance : public URacerAnimInstance
{
public:
	uint8                                         Pad_3F0[0x20];                                     // 0x03F0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UUnionRacerStatusObject> UnionRacerStatusObject;                            // 0x0410(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedRate;                                         // 0x0418(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringLR;                                        // 0x041C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitFront;                                          // 0x0420(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitRear;                                           // 0x0421(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitLeft;                                           // 0x0422(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitRight;                                          // 0x0423(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInAir;                                           // 0x0424(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInDrift;                                         // 0x0425(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFloating;                                        // 0x0426(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_427[0x1];                                      // 0x0427(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScrewRotationValue;                                // 0x0428(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrewRotationRate;                                 // 0x042C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0430(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0434(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brake;                                             // 0x0438(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableWheelPosUpdate;                            // 0x043C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableWheelRotUpdate;                            // 0x043D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43E[0x2];                                      // 0x043E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        WheelPos;                                          // 0x0440(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       WheelRot;                                          // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_460[0x48];                                     // 0x0460(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class AVehicleInRacePawn*                     VehicleInRacePawn;                                 // 0x04A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AMachineInRaceActor*                    MachineActor;                                      // 0x04B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMachineAnimDataAsset*                  MachineAnimDataAsset;                              // 0x04B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMachineAnimParameterDataAsset*         MachineAnimParameterDataAsset;                     // 0x04C0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C8[0x18];                                     // 0x04C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeRaceState(ERaceInfoStateType InNewState);
	void MontageJumpToSection(EMachineAnimationMontageAssetId AssetId, class FName SectionName);
	void MontagePlay(EMachineAnimationMontageAssetId AssetId, float PlayRate);
	void MontageStop(EMachineAnimationMontageAssetId AssetId, float InBlendOutTime);
	void SetAnimState(EMachineAnimState AnimState);
	void SetAnimSyncChild(TScriptInterface<class IUnionRacerAnimSyncChild> Child);
	void VehicleModelEventInt(const int32& EventId, const int32& Value);
	void VehicleModelEventSpecialStatus(const int32& EventId, const EVehicleSpecialStatusType& Value);

	EMachineAnimState GetAnimState() const;
	float GetBoatSyncAnimTime() const;
	bool IsUpdateState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineAnimInstance">();
	}
	static class UMachineAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineAnimInstance>();
	}
};
static_assert(alignof(UMachineAnimInstance) == 0x000010, "Wrong alignment on UMachineAnimInstance");
static_assert(sizeof(UMachineAnimInstance) == 0x0004E0, "Wrong size on UMachineAnimInstance");
static_assert(offsetof(UMachineAnimInstance, UnionRacerStatusObject) == 0x000410, "Member 'UMachineAnimInstance::UnionRacerStatusObject' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, SpeedRate) == 0x000418, "Member 'UMachineAnimInstance::SpeedRate' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, SteeringLR) == 0x00041C, "Member 'UMachineAnimInstance::SteeringLR' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, HitFront) == 0x000420, "Member 'UMachineAnimInstance::HitFront' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, HitRear) == 0x000421, "Member 'UMachineAnimInstance::HitRear' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, HitLeft) == 0x000422, "Member 'UMachineAnimInstance::HitLeft' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, HitRight) == 0x000423, "Member 'UMachineAnimInstance::HitRight' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, IsInAir) == 0x000424, "Member 'UMachineAnimInstance::IsInAir' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, IsInDrift) == 0x000425, "Member 'UMachineAnimInstance::IsInDrift' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, IsFloating) == 0x000426, "Member 'UMachineAnimInstance::IsFloating' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, ScrewRotationValue) == 0x000428, "Member 'UMachineAnimInstance::ScrewRotationValue' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, ScrewRotationRate) == 0x00042C, "Member 'UMachineAnimInstance::ScrewRotationRate' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, Yaw) == 0x000430, "Member 'UMachineAnimInstance::Yaw' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, Pitch) == 0x000434, "Member 'UMachineAnimInstance::Pitch' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, Brake) == 0x000438, "Member 'UMachineAnimInstance::Brake' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, IsEnableWheelPosUpdate) == 0x00043C, "Member 'UMachineAnimInstance::IsEnableWheelPosUpdate' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, IsEnableWheelRotUpdate) == 0x00043D, "Member 'UMachineAnimInstance::IsEnableWheelRotUpdate' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, WheelPos) == 0x000440, "Member 'UMachineAnimInstance::WheelPos' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, WheelRot) == 0x000450, "Member 'UMachineAnimInstance::WheelRot' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, VehicleInRacePawn) == 0x0004A8, "Member 'UMachineAnimInstance::VehicleInRacePawn' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, MachineActor) == 0x0004B0, "Member 'UMachineAnimInstance::MachineActor' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, MachineAnimDataAsset) == 0x0004B8, "Member 'UMachineAnimInstance::MachineAnimDataAsset' has a wrong offset!");
static_assert(offsetof(UMachineAnimInstance, MachineAnimParameterDataAsset) == 0x0004C0, "Member 'UMachineAnimInstance::MachineAnimParameterDataAsset' has a wrong offset!");

// Class UNION.MachineAuraEffectComponent
// 0x00E0 (0x0180 - 0x00A0)
class UMachineAuraEffectComponent final : public UActorComponent
{
public:
	class UNiagaraComponent*                      AuraEffectComponent;                               // 0x00A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransHoverboard;                                   // 0x00B0(0x0060)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTransform                             TransMachine;                                      // 0x0110(0x0060)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_170[0x10];                                     // 0x0170(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateAuraHoverboard(class USceneComponent* InDriverComponent, EMachineAuraId InAuraID, ECarStatusType InCarStatusType);
	void CreateAuraMachine(class USceneComponent* InMachineComponent, EMachineAuraId InAuraID, ECarStatusType InCarStatusType);
	void StartEffect();
	void StopEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineAuraEffectComponent">();
	}
	static class UMachineAuraEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineAuraEffectComponent>();
	}
};
static_assert(alignof(UMachineAuraEffectComponent) == 0x000010, "Wrong alignment on UMachineAuraEffectComponent");
static_assert(sizeof(UMachineAuraEffectComponent) == 0x000180, "Wrong size on UMachineAuraEffectComponent");
static_assert(offsetof(UMachineAuraEffectComponent, AuraEffectComponent) == 0x0000A0, "Member 'UMachineAuraEffectComponent::AuraEffectComponent' has a wrong offset!");
static_assert(offsetof(UMachineAuraEffectComponent, TransHoverboard) == 0x0000B0, "Member 'UMachineAuraEffectComponent::TransHoverboard' has a wrong offset!");
static_assert(offsetof(UMachineAuraEffectComponent, TransMachine) == 0x000110, "Member 'UMachineAuraEffectComponent::TransMachine' has a wrong offset!");

// Class UNION.TimeTrialLoginState
// 0x0008 (0x0130 - 0x0128)
class UTimeTrialLoginState : public UMenuSequenceSubStateBase
{
public:
	EMenuSequenceSubState                         NextMenuState;                                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetNextMenuState(const EMenuSequenceSubState InState);

	EMenuSequenceSubState GetNextMenuState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeTrialLoginState">();
	}
	static class UTimeTrialLoginState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeTrialLoginState>();
	}
};
static_assert(alignof(UTimeTrialLoginState) == 0x000008, "Wrong alignment on UTimeTrialLoginState");
static_assert(sizeof(UTimeTrialLoginState) == 0x000130, "Wrong size on UTimeTrialLoginState");
static_assert(offsetof(UTimeTrialLoginState, NextMenuState) == 0x000128, "Member 'UTimeTrialLoginState::NextMenuState' has a wrong offset!");

// Class UNION.MachineCustomizeColorAreaSelectState
// 0x0000 (0x00F8 - 0x00F8)
class UMachineCustomizeColorAreaSelectState : public UMachineCustomizePage
{
public:
	void OnExit();
	void OnSetupPage(bool InDefault);
	void SetProperties();
	void SetSelectedMachineColorAreaId(EMachineColorAreaUIId InId);
	void SetupFooter();
	void SetupPage(bool InDefault);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeColorAreaSelectState">();
	}
	static class UMachineCustomizeColorAreaSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeColorAreaSelectState>();
	}
};
static_assert(alignof(UMachineCustomizeColorAreaSelectState) == 0x000008, "Wrong alignment on UMachineCustomizeColorAreaSelectState");
static_assert(sizeof(UMachineCustomizeColorAreaSelectState) == 0x0000F8, "Wrong size on UMachineCustomizeColorAreaSelectState");

// Class UNION.UnionPlatformSaveDataTransferFromDemo
// 0x0058 (0x02E8 - 0x0290)
class AUnionPlatformSaveDataTransferFromDemo : public AActor
{
public:
	class UUnionUIPopupWindowBase*                m_PopupWindow;                                     // 0x0290(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_298[0x50];                                     // 0x0298(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDecisionPopupWindow(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void RequestStart();

	bool IsBusy() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionPlatformSaveDataTransferFromDemo">();
	}
	static class AUnionPlatformSaveDataTransferFromDemo* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionPlatformSaveDataTransferFromDemo>();
	}
};
static_assert(alignof(AUnionPlatformSaveDataTransferFromDemo) == 0x000008, "Wrong alignment on AUnionPlatformSaveDataTransferFromDemo");
static_assert(sizeof(AUnionPlatformSaveDataTransferFromDemo) == 0x0002E8, "Wrong size on AUnionPlatformSaveDataTransferFromDemo");
static_assert(offsetof(AUnionPlatformSaveDataTransferFromDemo, m_PopupWindow) == 0x000290, "Member 'AUnionPlatformSaveDataTransferFromDemo::m_PopupWindow' has a wrong offset!");

// Class UNION.MachineCustomizeCustomListItem
// 0x00B8 (0x0538 - 0x0480)
class UMachineCustomizeCustomListItem : public UUnionUIButtonBase
{
public:
	TMulticastInlineDelegate<void(class UUnionUIButtonBase* Button)> OnLeftStickButtonPress;         // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UUnionUIButtonBase* Button)> OnShowNew;                      // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UImage*                                 DSP_Cursor;                                        // 0x04A0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Set_Icon;                                      // 0x04A8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Icon_New;                                      // 0x04B0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_Name;                                          // 0x04B8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_0;                                  // 0x04C0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Black;                                         // 0x04C8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUITextBlock*                      TXT_ItemCount_Num;                                 // 0x04D0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               DSP_PlayBackBtn;                                   // 0x04D8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonMenuControllerUI*                WBP_CMN_ControllerBtn;                             // 0x04E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateColor                            PriceTextColorActive;                              // 0x04E8(0x0014)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                            PriceTextColorDisable;                             // 0x04FC(0x0014)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_510[0x28];                                     // 0x0510(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayAnimationActiveLoop();
	void PlayAnimationSelectLoop();
	void PlaySECancel();
	void PlaySEDecision();
	void PlaySEFocus();

	bool IsSelect() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeCustomListItem">();
	}
	static class UMachineCustomizeCustomListItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeCustomListItem>();
	}
};
static_assert(alignof(UMachineCustomizeCustomListItem) == 0x000008, "Wrong alignment on UMachineCustomizeCustomListItem");
static_assert(sizeof(UMachineCustomizeCustomListItem) == 0x000538, "Wrong size on UMachineCustomizeCustomListItem");
static_assert(offsetof(UMachineCustomizeCustomListItem, OnLeftStickButtonPress) == 0x000480, "Member 'UMachineCustomizeCustomListItem::OnLeftStickButtonPress' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomListItem, OnShowNew) == 0x000490, "Member 'UMachineCustomizeCustomListItem::OnShowNew' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomListItem, DSP_Cursor) == 0x0004A0, "Member 'UMachineCustomizeCustomListItem::DSP_Cursor' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomListItem, DSP_Set_Icon) == 0x0004A8, "Member 'UMachineCustomizeCustomListItem::DSP_Set_Icon' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomListItem, DSP_Icon_New) == 0x0004B0, "Member 'UMachineCustomizeCustomListItem::DSP_Icon_New' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomListItem, TXT_Name) == 0x0004B8, "Member 'UMachineCustomizeCustomListItem::TXT_Name' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomListItem, WidgetSwitcher_0) == 0x0004C0, "Member 'UMachineCustomizeCustomListItem::WidgetSwitcher_0' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomListItem, DSP_Black) == 0x0004C8, "Member 'UMachineCustomizeCustomListItem::DSP_Black' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomListItem, TXT_ItemCount_Num) == 0x0004D0, "Member 'UMachineCustomizeCustomListItem::TXT_ItemCount_Num' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomListItem, DSP_PlayBackBtn) == 0x0004D8, "Member 'UMachineCustomizeCustomListItem::DSP_PlayBackBtn' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomListItem, WBP_CMN_ControllerBtn) == 0x0004E0, "Member 'UMachineCustomizeCustomListItem::WBP_CMN_ControllerBtn' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomListItem, PriceTextColorActive) == 0x0004E8, "Member 'UMachineCustomizeCustomListItem::PriceTextColorActive' has a wrong offset!");
static_assert(offsetof(UMachineCustomizeCustomListItem, PriceTextColorDisable) == 0x0004FC, "Member 'UMachineCustomizeCustomListItem::PriceTextColorDisable' has a wrong offset!");

// Class UNION.RaceResultSequenceStateParty
// 0x0000 (0x0108 - 0x0108)
class URaceResultSequenceStateParty : public URaceResultSequenceStateBase
{
public:
	static class FString AddFloatTimeToString(float InSeconds);
	static class FString FloatTimeToString(float InSeconds);
	static TArray<struct FPartyResultRacer> GetPartyLoadingRacerAll(class UObject* WorldContextObject, struct FPartyResultTeamInfo* TeamInfo);
	static TArray<struct FPartyResultRacer> GetPartyResultRacerAll(class UObject* WorldContextObject, struct FPartyResultTeamInfo* TeamInfo, bool bIsRankSort);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceResultSequenceStateParty">();
	}
	static class URaceResultSequenceStateParty* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceResultSequenceStateParty>();
	}
};
static_assert(alignof(URaceResultSequenceStateParty) == 0x000008, "Wrong alignment on URaceResultSequenceStateParty");
static_assert(sizeof(URaceResultSequenceStateParty) == 0x000108, "Wrong size on URaceResultSequenceStateParty");

// Class UNION.MachineCustomizeInitState
// 0x0000 (0x00F8 - 0x00F8)
class UMachineCustomizeInitState : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeInitState">();
	}
	static class UMachineCustomizeInitState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizeInitState>();
	}
};
static_assert(alignof(UMachineCustomizeInitState) == 0x000008, "Wrong alignment on UMachineCustomizeInitState");
static_assert(sizeof(UMachineCustomizeInitState) == 0x0000F8, "Wrong size on UMachineCustomizeInitState");

// Class UNION.MachineCustomizePartsSelectState
// 0x0010 (0x0108 - 0x00F8)
class UMachineCustomizePartsSelectState : public UMachineCustomizePage
{
public:
	float                                         CustomizeUpdateDelay;                              // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC[0xC];                                       // 0x00FC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnExit();
	void OnPartsFocused(EMachinePartsType InPartsType, EMachineId InPartsId);
	void OnPartsSelected(EMachinePartsType InPartsType, EMachineId InPartsId);
	void OnSetup();
	void OnSetupPage();
	void PartsDialogHide(EDialogResult InResult);
	void PartsDialogShow();
	void PartsFocused(EMachinePartsType InPartsType, EMachineId InPartsId);
	void PartsSelected(EMachinePartsType InPartsType, EMachineId InPartsId);
	void SetCustomizeModelView();
	void SetProperties();

	class UMachinePartsSelectWindow* GetPartsSelectWindow() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizePartsSelectState">();
	}
	static class UMachineCustomizePartsSelectState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomizePartsSelectState>();
	}
};
static_assert(alignof(UMachineCustomizePartsSelectState) == 0x000008, "Wrong alignment on UMachineCustomizePartsSelectState");
static_assert(sizeof(UMachineCustomizePartsSelectState) == 0x000108, "Wrong size on UMachineCustomizePartsSelectState");
static_assert(offsetof(UMachineCustomizePartsSelectState, CustomizeUpdateDelay) == 0x0000F8, "Member 'UMachineCustomizePartsSelectState::CustomizeUpdateDelay' has a wrong offset!");

// Class UNION.SquadState
// 0x0000 (0x0128 - 0x0128)
class USquadState final : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SquadState">();
	}
	static class USquadState* GetDefaultObj()
	{
		return GetDefaultObjImpl<USquadState>();
	}
};
static_assert(alignof(USquadState) == 0x000008, "Wrong alignment on USquadState");
static_assert(sizeof(USquadState) == 0x000128, "Wrong size on USquadState");

// Class UNION.MachineCustomizeSequence
// 0x0010 (0x0378 - 0x0368)
class AMachineCustomizeSequence : public AHierarchicalStateMachine
{
public:
	class UMachineCustomizeAuraSelectState*       AuraSelectState;                                   // 0x0368(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_370[0x8];                                      // 0x0370(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Exit();
	void MatchingTimeOut();
	void ResetMessageBar();
	void SetCanControlParamWindow(bool bInCanControl);
	void SetCanControlTurntable(bool bInCanControl);
	void SetFocusToDummy();
	void SetIsDirty(bool bInIsDirty);
	void SetMachineCustomizeDataById(EMachineId InMachineID, const struct FUserMachineCustomizeData& InMachineCustomizeData);
	void SetSelectedMachineColorAreaId(EMachineColorAreaUIId InColorAreaId);
	void SetSelectedMachineCustomizeAuraID(EMachineAuraId InAuraID);
	void SetSelectedMachineCustomizeData(const struct FUserMachineCustomizeData& InMachineCustomizeData);
	void SetSelectedMachineCustomizeHornType(EMachineHornType InHornType);
	void SetSelectedMachineID(EMachineId InSelectedMachineId);
	void SetSelectedMachineType(ECarStatusType InSelectedMachineType);
	void SetupMessageBar();
	void SetupTabs();
	void UpdateMachineInfoWidget(const struct FUserMachineCustomizeData& InMachineCustomizeData);
	void UpdateParamWindowByCustomizeData(const struct FUserMachineCustomizeData& InCurrentCustomizeData, const struct FUserMachineCustomizeData& InCandCustomizeData);
	void UpdateParamWindowBySelectedData();
	void UpdateRacer(bool bInForcedSetting);
	void UpdateTabs();

	class AAppPlayerController* GetAppPlayerController() const;
	class UUnionUISceneBase* GetColorAreaSelectPage() const;
	class UUnionUISceneBase* GetColorDetailPage() const;
	class UUnionUISceneBase* GetColorPresetSelectPage() const;
	class UMachineCustomizeCustomList* GetCustomList() const;
	bool GetIsDirty() const;
	class UMachineCustomCommonWindow* GetMachineCustomCommonWindow() const;
	struct FUserMachineCustomizeData GetMachineCustomizeDataById(EMachineId InMachineID) const;
	class UMachineCustomTop* GetMachineCustomTop() const;
	class UMachinePartsSelectWindow* GetPartsSelectWindow() const;
	class APlayerController* GetPlayerController() const;
	class AMenuRacerBase* GetRacer() const;
	EMachineColorAreaUIId GetSelectedMachineColorAreaId() const;
	EMachineAuraId GetSelectedMachineCustomizeAuraID() const;
	struct FUserMachineCustomizeData GetSelectedMachineCustomizeData() const;
	EMachineHornType GetSelectedMachineCustomizeHornType() const;
	EMachineId GetSelectedMachineID() const;
	ECarStatusType GetSelectedMachineType() const;
	class UMachineStickerSelectWindow* GetStickerSelectPage() const;
	class UMachineStickerSlotSelectWindow* GetStickerTopPage() const;
	class UMachineCustomTab* GetTabWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomizeSequence">();
	}
	static class AMachineCustomizeSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMachineCustomizeSequence>();
	}
};
static_assert(alignof(AMachineCustomizeSequence) == 0x000008, "Wrong alignment on AMachineCustomizeSequence");
static_assert(sizeof(AMachineCustomizeSequence) == 0x000378, "Wrong size on AMachineCustomizeSequence");
static_assert(offsetof(AMachineCustomizeSequence, AuraSelectState) == 0x000368, "Member 'AMachineCustomizeSequence::AuraSelectState' has a wrong offset!");

// Class UNION.MachineCustomTabButton
// 0x0030 (0x0310 - 0x02E0)
class UMachineCustomTabButton : public UUserWidget
{
public:
	class UImage*                                 PAT_TabPict;                                       // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_CategoryName;                                  // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_NewIconWave;                                   // 0x02F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EMachineCustomizeTabID InTabID)> OnEventClick;                     // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	int32                                         IconIndex;                                         // 0x0308(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayAnim(bool bInIsActive);
	void SetEnabled(bool bInIsEnabled);
	void SetIconIndex(int32 InIconIndex);
	void SetNewIconVisible(bool InVisible);
	void SetTabID(EMachineCustomizeTabID InTabID);
	void SetText(const class FText& InText);

	EMachineCustomizeTabID GetTabID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomTabButton">();
	}
	static class UMachineCustomTabButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomTabButton>();
	}
};
static_assert(alignof(UMachineCustomTabButton) == 0x000008, "Wrong alignment on UMachineCustomTabButton");
static_assert(sizeof(UMachineCustomTabButton) == 0x000310, "Wrong size on UMachineCustomTabButton");
static_assert(offsetof(UMachineCustomTabButton, PAT_TabPict) == 0x0002E0, "Member 'UMachineCustomTabButton::PAT_TabPict' has a wrong offset!");
static_assert(offsetof(UMachineCustomTabButton, TXT_CategoryName) == 0x0002E8, "Member 'UMachineCustomTabButton::TXT_CategoryName' has a wrong offset!");
static_assert(offsetof(UMachineCustomTabButton, DSP_NewIconWave) == 0x0002F0, "Member 'UMachineCustomTabButton::DSP_NewIconWave' has a wrong offset!");
static_assert(offsetof(UMachineCustomTabButton, OnEventClick) == 0x0002F8, "Member 'UMachineCustomTabButton::OnEventClick' has a wrong offset!");
static_assert(offsetof(UMachineCustomTabButton, IconIndex) == 0x000308, "Member 'UMachineCustomTabButton::IconIndex' has a wrong offset!");

// Class UNION.MachineCustomTop
// 0x0010 (0x02F0 - 0x02E0)
class UMachineCustomTop : public UUserWidget
{
public:
	class UMachineCustomInfoWindow*               WBP_MachineCustom_Sub_CurrentWindow;               // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMachineTypeScrollControl*              WBP_MachineSelect_Sub_TypeWindow;                  // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HiddenDonpaTicket();
	void SetupDonpaTicket();
	void SetupMachineCustomizeTabWindow(bool IsShowDonpaTicket);
	void SetupMachineSelectWindow();
	void SetupOther();
	void SetVisibleDonpaTicket(bool IsVisible_0);
	void ShowDonpaTicket();
	void UpdateDonpaTicket();

	class UMachineCustomCommonWindow* GetMachineCustomCommonWindow() const;
	class UMachineCustomInfoWindow* GetMachineInfoWidget() const;
	class UMachineTypeScrollControl* GetMachineTypeSelectWindow() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCustomTop">();
	}
	static class UMachineCustomTop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCustomTop>();
	}
};
static_assert(alignof(UMachineCustomTop) == 0x000008, "Wrong alignment on UMachineCustomTop");
static_assert(sizeof(UMachineCustomTop) == 0x0002F0, "Wrong size on UMachineCustomTop");
static_assert(offsetof(UMachineCustomTop, WBP_MachineCustom_Sub_CurrentWindow) == 0x0002E0, "Member 'UMachineCustomTop::WBP_MachineCustom_Sub_CurrentWindow' has a wrong offset!");
static_assert(offsetof(UMachineCustomTop, WBP_MachineSelect_Sub_TypeWindow) == 0x0002E8, "Member 'UMachineCustomTop::WBP_MachineSelect_Sub_TypeWindow' has a wrong offset!");

// Class UNION.RaceStandings
// 0x0008 (0x0298 - 0x0290)
class ARaceStandings : public AActor
{
public:
	class UUnionRaceUIResultScene*                ResultHUD;                                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Destroy();
	void InitDisplay(bool UseTotalStandings);
	bool ResultAsyncLoadMenuResidentAsset(class UAppSystemSubsystem* Subsystem);
	void SaveTimeTrialRecordData(ESpeedClassId InSpeedClass, EStageId InStageId);
	void ShowLoadInfo();
	void ViewEndLoadInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceStandings">();
	}
	static class ARaceStandings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARaceStandings>();
	}
};
static_assert(alignof(ARaceStandings) == 0x000008, "Wrong alignment on ARaceStandings");
static_assert(sizeof(ARaceStandings) == 0x000298, "Wrong size on ARaceStandings");
static_assert(offsetof(ARaceStandings, ResultHUD) == 0x000290, "Member 'ARaceStandings::ResultHUD' has a wrong offset!");

// Class UNION.MachineSurfaceEffectDataAsset
// 0x0300 (0x0330 - 0x0030)
class UMachineSurfaceEffectDataAsset final : public UDataAsset
{
public:
	EMachineEffectVisibleType                     CarVisibleType;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EUnionSurfaceType, struct FMachineSurfaceEffectAssetData> CarAssets;                        // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMachineEffectVisibleType                     BoatVisibleType;                                   // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EUnionSurfaceType, struct FMachineSurfaceEffectAssetData> BoatAssets;                       // 0x0090(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMachineEffectVisibleType                     FlightVisibleType;                                 // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMachineSurfaceEffectAssetData         FlightAsset;                                       // 0x00F0(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMachineEffectVisibleType                     BodycutVisibleType;                                // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EUnionSurfaceType, struct FMachineSurfaceEffectAssetData> BodycutAssets;                    // 0x01E8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMachineEffectVisibleType                     TravelRingBoostVisibleType;                        // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMachineSurfaceEffectAssetData         TravelRingBoostAsset;                              // 0x0240(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineSurfaceEffectDataAsset">();
	}
	static class UMachineSurfaceEffectDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineSurfaceEffectDataAsset>();
	}
};
static_assert(alignof(UMachineSurfaceEffectDataAsset) == 0x000010, "Wrong alignment on UMachineSurfaceEffectDataAsset");
static_assert(sizeof(UMachineSurfaceEffectDataAsset) == 0x000330, "Wrong size on UMachineSurfaceEffectDataAsset");
static_assert(offsetof(UMachineSurfaceEffectDataAsset, CarVisibleType) == 0x000030, "Member 'UMachineSurfaceEffectDataAsset::CarVisibleType' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectDataAsset, CarAssets) == 0x000038, "Member 'UMachineSurfaceEffectDataAsset::CarAssets' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectDataAsset, BoatVisibleType) == 0x000088, "Member 'UMachineSurfaceEffectDataAsset::BoatVisibleType' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectDataAsset, BoatAssets) == 0x000090, "Member 'UMachineSurfaceEffectDataAsset::BoatAssets' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectDataAsset, FlightVisibleType) == 0x0000E0, "Member 'UMachineSurfaceEffectDataAsset::FlightVisibleType' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectDataAsset, FlightAsset) == 0x0000F0, "Member 'UMachineSurfaceEffectDataAsset::FlightAsset' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectDataAsset, BodycutVisibleType) == 0x0001E0, "Member 'UMachineSurfaceEffectDataAsset::BodycutVisibleType' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectDataAsset, BodycutAssets) == 0x0001E8, "Member 'UMachineSurfaceEffectDataAsset::BodycutAssets' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectDataAsset, TravelRingBoostVisibleType) == 0x000238, "Member 'UMachineSurfaceEffectDataAsset::TravelRingBoostVisibleType' has a wrong offset!");
static_assert(offsetof(UMachineSurfaceEffectDataAsset, TravelRingBoostAsset) == 0x000240, "Member 'UMachineSurfaceEffectDataAsset::TravelRingBoostAsset' has a wrong offset!");

// Class UNION.MachineMaterialParameterDataAsset
// 0x0090 (0x00C0 - 0x0030)
class UMachineMaterialParameterDataAsset final : public UDataAsset
{
public:
	struct FDriftEffectProperty                   FrontDriftEffect;                                  // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDriftEffectProperty                   CenterDriftEffect;                                 // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDriftEffectProperty                   RearDriftEffect;                                   // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDriftEffectProperty                   TireDriftEffect;                                   // 0x0078(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDriftEffectProperty                   MonsterTruckDriftEffect;                           // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         BodyCutEffectIntensity;                            // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDriftEffectParameter                  DamageEffectParam;                                 // 0x00AC(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineMaterialParameterDataAsset">();
	}
	static class UMachineMaterialParameterDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineMaterialParameterDataAsset>();
	}
};
static_assert(alignof(UMachineMaterialParameterDataAsset) == 0x000008, "Wrong alignment on UMachineMaterialParameterDataAsset");
static_assert(sizeof(UMachineMaterialParameterDataAsset) == 0x0000C0, "Wrong size on UMachineMaterialParameterDataAsset");
static_assert(offsetof(UMachineMaterialParameterDataAsset, FrontDriftEffect) == 0x000030, "Member 'UMachineMaterialParameterDataAsset::FrontDriftEffect' has a wrong offset!");
static_assert(offsetof(UMachineMaterialParameterDataAsset, CenterDriftEffect) == 0x000048, "Member 'UMachineMaterialParameterDataAsset::CenterDriftEffect' has a wrong offset!");
static_assert(offsetof(UMachineMaterialParameterDataAsset, RearDriftEffect) == 0x000060, "Member 'UMachineMaterialParameterDataAsset::RearDriftEffect' has a wrong offset!");
static_assert(offsetof(UMachineMaterialParameterDataAsset, TireDriftEffect) == 0x000078, "Member 'UMachineMaterialParameterDataAsset::TireDriftEffect' has a wrong offset!");
static_assert(offsetof(UMachineMaterialParameterDataAsset, MonsterTruckDriftEffect) == 0x000090, "Member 'UMachineMaterialParameterDataAsset::MonsterTruckDriftEffect' has a wrong offset!");
static_assert(offsetof(UMachineMaterialParameterDataAsset, BodyCutEffectIntensity) == 0x0000A8, "Member 'UMachineMaterialParameterDataAsset::BodyCutEffectIntensity' has a wrong offset!");
static_assert(offsetof(UMachineMaterialParameterDataAsset, DamageEffectParam) == 0x0000AC, "Member 'UMachineMaterialParameterDataAsset::DamageEffectParam' has a wrong offset!");

// Class UNION.MachineCameraObstructDataAsset
// 0x0068 (0x0098 - 0x0030)
class UMachineCameraObstructDataAsset final : public UDataAsset
{
public:
	class UCurveFloat*                            SizeScaleCurve;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AddtionalSizeScaleCurve;                           // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EmitterPosA;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EmitterPosB;                                       // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EmitterPosC;                                       // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endTime;                                           // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRateDrop;                                     // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnTime;                                         // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineCameraObstructDataAsset">();
	}
	static class UMachineCameraObstructDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineCameraObstructDataAsset>();
	}
};
static_assert(alignof(UMachineCameraObstructDataAsset) == 0x000008, "Wrong alignment on UMachineCameraObstructDataAsset");
static_assert(sizeof(UMachineCameraObstructDataAsset) == 0x000098, "Wrong size on UMachineCameraObstructDataAsset");
static_assert(offsetof(UMachineCameraObstructDataAsset, SizeScaleCurve) == 0x000030, "Member 'UMachineCameraObstructDataAsset::SizeScaleCurve' has a wrong offset!");
static_assert(offsetof(UMachineCameraObstructDataAsset, AddtionalSizeScaleCurve) == 0x000038, "Member 'UMachineCameraObstructDataAsset::AddtionalSizeScaleCurve' has a wrong offset!");
static_assert(offsetof(UMachineCameraObstructDataAsset, EmitterPosA) == 0x000040, "Member 'UMachineCameraObstructDataAsset::EmitterPosA' has a wrong offset!");
static_assert(offsetof(UMachineCameraObstructDataAsset, EmitterPosB) == 0x000058, "Member 'UMachineCameraObstructDataAsset::EmitterPosB' has a wrong offset!");
static_assert(offsetof(UMachineCameraObstructDataAsset, EmitterPosC) == 0x000070, "Member 'UMachineCameraObstructDataAsset::EmitterPosC' has a wrong offset!");
static_assert(offsetof(UMachineCameraObstructDataAsset, endTime) == 0x000088, "Member 'UMachineCameraObstructDataAsset::endTime' has a wrong offset!");
static_assert(offsetof(UMachineCameraObstructDataAsset, SpawnRateDrop) == 0x00008C, "Member 'UMachineCameraObstructDataAsset::SpawnRateDrop' has a wrong offset!");
static_assert(offsetof(UMachineCameraObstructDataAsset, SpawnTime) == 0x000090, "Member 'UMachineCameraObstructDataAsset::SpawnTime' has a wrong offset!");

// Class UNION.MachineGadgetActionComponent
// 0x0058 (0x00F8 - 0x00A0)
class UMachineGadgetActionComponent final : public UActorComponent
{
public:
	class UCurveFloat*                            SpinDriftStartCurve;                               // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SpinDriftEndCurve;                                 // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         SpinDriftEffectAsset;                              // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpinMaxAnglePerSecond;                             // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpinDriftMaxAccelerationDuration;                  // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpinDriftDecelerationDuration;                     // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      SpinDriftNiagaraComponent;                         // 0x00C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x28];                                      // 0x00D0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineGadgetActionComponent">();
	}
	static class UMachineGadgetActionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineGadgetActionComponent>();
	}
};
static_assert(alignof(UMachineGadgetActionComponent) == 0x000008, "Wrong alignment on UMachineGadgetActionComponent");
static_assert(sizeof(UMachineGadgetActionComponent) == 0x0000F8, "Wrong size on UMachineGadgetActionComponent");
static_assert(offsetof(UMachineGadgetActionComponent, SpinDriftStartCurve) == 0x0000A0, "Member 'UMachineGadgetActionComponent::SpinDriftStartCurve' has a wrong offset!");
static_assert(offsetof(UMachineGadgetActionComponent, SpinDriftEndCurve) == 0x0000A8, "Member 'UMachineGadgetActionComponent::SpinDriftEndCurve' has a wrong offset!");
static_assert(offsetof(UMachineGadgetActionComponent, SpinDriftEffectAsset) == 0x0000B0, "Member 'UMachineGadgetActionComponent::SpinDriftEffectAsset' has a wrong offset!");
static_assert(offsetof(UMachineGadgetActionComponent, SpinMaxAnglePerSecond) == 0x0000B8, "Member 'UMachineGadgetActionComponent::SpinMaxAnglePerSecond' has a wrong offset!");
static_assert(offsetof(UMachineGadgetActionComponent, SpinDriftMaxAccelerationDuration) == 0x0000BC, "Member 'UMachineGadgetActionComponent::SpinDriftMaxAccelerationDuration' has a wrong offset!");
static_assert(offsetof(UMachineGadgetActionComponent, SpinDriftDecelerationDuration) == 0x0000C0, "Member 'UMachineGadgetActionComponent::SpinDriftDecelerationDuration' has a wrong offset!");
static_assert(offsetof(UMachineGadgetActionComponent, SpinDriftNiagaraComponent) == 0x0000C8, "Member 'UMachineGadgetActionComponent::SpinDriftNiagaraComponent' has a wrong offset!");

// Class UNION.MachineIconCaptureLevelScriptActor
// 0x0010 (0x02A8 - 0x0298)
class AMachineIconCaptureLevelScriptActor : public ALevelScriptActor
{
public:
	TMulticastInlineDelegate<void(class UTextureRenderTarget2D* RenderTextureColor, class UTextureRenderTarget2D* RenderTextureAlpha)> OnCaptureCompleted; // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void Capture(EMachineId InMachineID, int32 InSizeX, int32 InSizeY, const class UDataTable* InCaptureDataTable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineIconCaptureLevelScriptActor">();
	}
	static class AMachineIconCaptureLevelScriptActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMachineIconCaptureLevelScriptActor>();
	}
};
static_assert(alignof(AMachineIconCaptureLevelScriptActor) == 0x000008, "Wrong alignment on AMachineIconCaptureLevelScriptActor");
static_assert(sizeof(AMachineIconCaptureLevelScriptActor) == 0x0002A8, "Wrong size on AMachineIconCaptureLevelScriptActor");
static_assert(offsetof(AMachineIconCaptureLevelScriptActor, OnCaptureCompleted) == 0x000298, "Member 'AMachineIconCaptureLevelScriptActor::OnCaptureCompleted' has a wrong offset!");

// Class UNION.UNIONGameMode
// 0x0000 (0x0328 - 0x0328)
class AUNIONGameMode final : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UNIONGameMode">();
	}
	static class AUNIONGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUNIONGameMode>();
	}
};
static_assert(alignof(AUNIONGameMode) == 0x000008, "Wrong alignment on AUNIONGameMode");
static_assert(sizeof(AUNIONGameMode) == 0x000328, "Wrong size on AUNIONGameMode");

// Class UNION.MachineIconSubsystem
// 0x0138 (0x0168 - 0x0030)
class UMachineIconSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EMachineId MachineId)> OnIconCaptured;                             // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnIconCapturedAll;                                 // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x28];                                      // 0x0058(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class AMachineIconCaptureLevelScriptActor*    CaptureLevelScriptActor;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMachineId, class UTexture2D*>           TextureMap;                                        // 0x0090(0x0050)(NativeAccessSpecifierPrivate)
	class UStaticMesh*                            SideCenterPartsMesh;                               // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x80];                                      // 0x00E8(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CallbackLevelLoaded();
	void Capture(EMachineId InMachineID);
	void CaptureFromNeededIds();
	void CaptureLevelScriptActor_OnCaptureCompleted(class UTextureRenderTarget2D* InRenderTextureColor, class UTextureRenderTarget2D* InRenderTextureAlpha);
	void LocalStorageSubsystem_OnComplete(ELocalStorageStatus InStatus);
	void OnPrimaryAssetLoaded();
	void OnSideCenterPartsLoaded();
	void SetAutoCaptureEnabled(bool bInIsEnabled);
	void SetCaptureDataTable(const class UDataTable* InCaptureDataTable);
	void SetMachineIconCaptureNeededIds(EMachineId InMachineID);
	void SetSaveToLocalStorage(bool bInSave);
	void SetSizeX(int32 InSizeX);
	void SetSizeY(int32 InSizeY);
	void StartCapture();
	void StopCapture();

	void GetTextureMap(TMap<EMachineId, class UTexture2D*>* OutTextureMap) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineIconSubsystem">();
	}
	static class UMachineIconSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineIconSubsystem>();
	}
};
static_assert(alignof(UMachineIconSubsystem) == 0x000008, "Wrong alignment on UMachineIconSubsystem");
static_assert(sizeof(UMachineIconSubsystem) == 0x000168, "Wrong size on UMachineIconSubsystem");
static_assert(offsetof(UMachineIconSubsystem, OnIconCaptured) == 0x000038, "Member 'UMachineIconSubsystem::OnIconCaptured' has a wrong offset!");
static_assert(offsetof(UMachineIconSubsystem, OnIconCapturedAll) == 0x000048, "Member 'UMachineIconSubsystem::OnIconCapturedAll' has a wrong offset!");
static_assert(offsetof(UMachineIconSubsystem, CaptureLevelScriptActor) == 0x000080, "Member 'UMachineIconSubsystem::CaptureLevelScriptActor' has a wrong offset!");
static_assert(offsetof(UMachineIconSubsystem, TextureMap) == 0x000090, "Member 'UMachineIconSubsystem::TextureMap' has a wrong offset!");
static_assert(offsetof(UMachineIconSubsystem, SideCenterPartsMesh) == 0x0000E0, "Member 'UMachineIconSubsystem::SideCenterPartsMesh' has a wrong offset!");

// Class UNION.MachineMaterialComponent
// 0x0108 (0x01D0 - 0x00C8)
class UMachineMaterialComponent final : public UMachineBaseComponent
{
public:
	class UDataTable*                             MaterialAnimationDataTable;                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFreshlyPaintData*                      FreshlyPaintColor;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialPlayerComponent*               MaterialPlayerComponent;                           // 0x00D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0xF0];                                      // 0x00E0(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void VehicleModelEventSpecialStatus(const int32& EventId, const EVehicleSpecialStatusType& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineMaterialComponent">();
	}
	static class UMachineMaterialComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineMaterialComponent>();
	}
};
static_assert(alignof(UMachineMaterialComponent) == 0x000008, "Wrong alignment on UMachineMaterialComponent");
static_assert(sizeof(UMachineMaterialComponent) == 0x0001D0, "Wrong size on UMachineMaterialComponent");
static_assert(offsetof(UMachineMaterialComponent, MaterialAnimationDataTable) == 0x0000C8, "Member 'UMachineMaterialComponent::MaterialAnimationDataTable' has a wrong offset!");
static_assert(offsetof(UMachineMaterialComponent, FreshlyPaintColor) == 0x0000D0, "Member 'UMachineMaterialComponent::FreshlyPaintColor' has a wrong offset!");
static_assert(offsetof(UMachineMaterialComponent, MaterialPlayerComponent) == 0x0000D8, "Member 'UMachineMaterialComponent::MaterialPlayerComponent' has a wrong offset!");

// Class UNION.YellowDrillActor
// 0x00A0 (0x0330 - 0x0290)
class AYellowDrillActor : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionVATMeshComponent*                 BodyVATMeshComponent;                              // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      LoopEffectComponent;                               // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      RunEffectComponent;                                // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EUnionSurfaceType, class UNiagaraSystem*> RunEffectAssets;                                  // 0x02B0(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    MoveSoundComponent;                                // 0x0300(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          MoveSoundLocalCue;                                 // 0x0308(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          MoveSoundCue;                                      // 0x0310(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_318[0x10];                                     // 0x0318(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BodyMeshMaterial;                                  // 0x0328(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnCountDown(bool bIsPlay);
	void OnEnd();
	void OnStart();
	void SetEmissive(float Value);
	void VehicleModelEventInt(const int32& EventId, const int32& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"YellowDrillActor">();
	}
	static class AYellowDrillActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AYellowDrillActor>();
	}
};
static_assert(alignof(AYellowDrillActor) == 0x000008, "Wrong alignment on AYellowDrillActor");
static_assert(sizeof(AYellowDrillActor) == 0x000330, "Wrong size on AYellowDrillActor");
static_assert(offsetof(AYellowDrillActor, Root) == 0x000290, "Member 'AYellowDrillActor::Root' has a wrong offset!");
static_assert(offsetof(AYellowDrillActor, BodyVATMeshComponent) == 0x000298, "Member 'AYellowDrillActor::BodyVATMeshComponent' has a wrong offset!");
static_assert(offsetof(AYellowDrillActor, LoopEffectComponent) == 0x0002A0, "Member 'AYellowDrillActor::LoopEffectComponent' has a wrong offset!");
static_assert(offsetof(AYellowDrillActor, RunEffectComponent) == 0x0002A8, "Member 'AYellowDrillActor::RunEffectComponent' has a wrong offset!");
static_assert(offsetof(AYellowDrillActor, RunEffectAssets) == 0x0002B0, "Member 'AYellowDrillActor::RunEffectAssets' has a wrong offset!");
static_assert(offsetof(AYellowDrillActor, MoveSoundComponent) == 0x000300, "Member 'AYellowDrillActor::MoveSoundComponent' has a wrong offset!");
static_assert(offsetof(AYellowDrillActor, MoveSoundLocalCue) == 0x000308, "Member 'AYellowDrillActor::MoveSoundLocalCue' has a wrong offset!");
static_assert(offsetof(AYellowDrillActor, MoveSoundCue) == 0x000310, "Member 'AYellowDrillActor::MoveSoundCue' has a wrong offset!");
static_assert(offsetof(AYellowDrillActor, BodyMeshMaterial) == 0x000328, "Member 'AYellowDrillActor::BodyMeshMaterial' has a wrong offset!");

// Class UNION.MachinePartsCharaParameter
// 0x0028 (0x0308 - 0x02E0)
class UMachinePartsCharaParameter : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnClick;                                           // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UUnionRichTextBlock*                    TXT_Chara_MachineName;                             // 0x02F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharaMachineSelectPartsMachineType*    WBP_CharaMachineSelect_Sub_TypeBtn;                // 0x02F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonPlayerNumber*                    WBP_CMN_PlayerNumber;                              // 0x0300(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachinePartsCharaParameter">();
	}
	static class UMachinePartsCharaParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachinePartsCharaParameter>();
	}
};
static_assert(alignof(UMachinePartsCharaParameter) == 0x000008, "Wrong alignment on UMachinePartsCharaParameter");
static_assert(sizeof(UMachinePartsCharaParameter) == 0x000308, "Wrong size on UMachinePartsCharaParameter");
static_assert(offsetof(UMachinePartsCharaParameter, OnClick) == 0x0002E0, "Member 'UMachinePartsCharaParameter::OnClick' has a wrong offset!");
static_assert(offsetof(UMachinePartsCharaParameter, TXT_Chara_MachineName) == 0x0002F0, "Member 'UMachinePartsCharaParameter::TXT_Chara_MachineName' has a wrong offset!");
static_assert(offsetof(UMachinePartsCharaParameter, WBP_CharaMachineSelect_Sub_TypeBtn) == 0x0002F8, "Member 'UMachinePartsCharaParameter::WBP_CharaMachineSelect_Sub_TypeBtn' has a wrong offset!");
static_assert(offsetof(UMachinePartsCharaParameter, WBP_CMN_PlayerNumber) == 0x000300, "Member 'UMachinePartsCharaParameter::WBP_CMN_PlayerNumber' has a wrong offset!");

// Class UNION.MachinePartsScrollBox
// 0x00B0 (0x0390 - 0x02E0)
class UMachinePartsScrollBox : public UUserWidget
{
public:
	TMulticastInlineDelegate<void(class UUnionUIButtonBase* InButton)> OnItemFocused;                // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnItemSelected;                                    // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCancel;                                          // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UMachinePartsScrollBox* InSender, EUnionUIControlDir InDirection)> OnEscape; // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FMachinePartsUIData& InPartsData, EMachinePartsType InType)> OnCreateDialogPrice; // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FMachinePartsUIData& InPartsData, EMachinePartsType InType)> OnCreateDialogUnlock; // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EMachinePartsType InType)> OnCreateDialogDLC;                      // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnNavigation;                                      // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TSubclassOf<class UMachinePartsScrollBoxItem> ItemClass;                                         // 0x0360(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIFixedScrollBox*                 InnerScrollBox;                                    // 0x0368(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonScrollPointBox*                  WBP_CMN_ScrollSnapPoint;                           // 0x0370(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionUIButtonsPanel*                   ButtonsPanel;                                      // 0x0378(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_380[0x10];                                     // 0x0380(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Button_OnCancel(class UUnionUIButtonBase* Button);
	void Button_OnDecision(class UUnionUIButtonBase* Button);
	void Button_OnFocus(class UUnionUIButtonBase* Button);
	void ButtonsPanel_OnDirection(class UUnionUIButtonBase* Button, int32 ButtonIndex, EUnionUIControlDir Dir);
	void PlaySoundImpossible();
	void PlaySoundPossible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachinePartsScrollBox">();
	}
	static class UMachinePartsScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachinePartsScrollBox>();
	}
};
static_assert(alignof(UMachinePartsScrollBox) == 0x000008, "Wrong alignment on UMachinePartsScrollBox");
static_assert(sizeof(UMachinePartsScrollBox) == 0x000390, "Wrong size on UMachinePartsScrollBox");
static_assert(offsetof(UMachinePartsScrollBox, OnItemFocused) == 0x0002E0, "Member 'UMachinePartsScrollBox::OnItemFocused' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBox, OnItemSelected) == 0x0002F0, "Member 'UMachinePartsScrollBox::OnItemSelected' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBox, OnCancel) == 0x000300, "Member 'UMachinePartsScrollBox::OnCancel' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBox, OnEscape) == 0x000310, "Member 'UMachinePartsScrollBox::OnEscape' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBox, OnCreateDialogPrice) == 0x000320, "Member 'UMachinePartsScrollBox::OnCreateDialogPrice' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBox, OnCreateDialogUnlock) == 0x000330, "Member 'UMachinePartsScrollBox::OnCreateDialogUnlock' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBox, OnCreateDialogDLC) == 0x000340, "Member 'UMachinePartsScrollBox::OnCreateDialogDLC' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBox, OnNavigation) == 0x000350, "Member 'UMachinePartsScrollBox::OnNavigation' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBox, ItemClass) == 0x000360, "Member 'UMachinePartsScrollBox::ItemClass' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBox, InnerScrollBox) == 0x000368, "Member 'UMachinePartsScrollBox::InnerScrollBox' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBox, WBP_CMN_ScrollSnapPoint) == 0x000370, "Member 'UMachinePartsScrollBox::WBP_CMN_ScrollSnapPoint' has a wrong offset!");
static_assert(offsetof(UMachinePartsScrollBox, ButtonsPanel) == 0x000378, "Member 'UMachinePartsScrollBox::ButtonsPanel' has a wrong offset!");

// Class UNION.PreloadAssetData
// 0x0028 (0x0058 - 0x0030)
class UPreloadAssetData final : public UDataAsset
{
public:
	EPreloadAssetType                             AssetType;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LoadBundles;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetId>                PrimaryAssetIds;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreloadAssetData">();
	}
	static class UPreloadAssetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreloadAssetData>();
	}
};
static_assert(alignof(UPreloadAssetData) == 0x000008, "Wrong alignment on UPreloadAssetData");
static_assert(sizeof(UPreloadAssetData) == 0x000058, "Wrong size on UPreloadAssetData");
static_assert(offsetof(UPreloadAssetData, AssetType) == 0x000030, "Member 'UPreloadAssetData::AssetType' has a wrong offset!");
static_assert(offsetof(UPreloadAssetData, LoadBundles) == 0x000038, "Member 'UPreloadAssetData::LoadBundles' has a wrong offset!");
static_assert(offsetof(UPreloadAssetData, PrimaryAssetIds) == 0x000048, "Member 'UPreloadAssetData::PrimaryAssetIds' has a wrong offset!");

// Class UNION.MachinePartsResourceElement
// 0x0028 (0x0088 - 0x0060)
class UMachinePartsResourceElement final : public UMenuResourceElement
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMachinePartsResource                  Resource;                                          // 0x0068(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x10];                                      // 0x0078(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachinePartsResourceElement">();
	}
	static class UMachinePartsResourceElement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachinePartsResourceElement>();
	}
};
static_assert(alignof(UMachinePartsResourceElement) == 0x000008, "Wrong alignment on UMachinePartsResourceElement");
static_assert(sizeof(UMachinePartsResourceElement) == 0x000088, "Wrong size on UMachinePartsResourceElement");
static_assert(offsetof(UMachinePartsResourceElement, Resource) == 0x000068, "Member 'UMachinePartsResourceElement::Resource' has a wrong offset!");

// Class UNION.MachinePartsTextBalloonGroup
// 0x0008 (0x02E8 - 0x02E0)
class UMachinePartsTextBalloonGroup : public UUserWidget
{
public:
	class UWidgetSwitcher*                        WidgetSwitcher;                                    // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachinePartsTextBalloonGroup">();
	}
	static class UMachinePartsTextBalloonGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachinePartsTextBalloonGroup>();
	}
};
static_assert(alignof(UMachinePartsTextBalloonGroup) == 0x000008, "Wrong alignment on UMachinePartsTextBalloonGroup");
static_assert(sizeof(UMachinePartsTextBalloonGroup) == 0x0002E8, "Wrong size on UMachinePartsTextBalloonGroup");
static_assert(offsetof(UMachinePartsTextBalloonGroup, WidgetSwitcher) == 0x0002E0, "Member 'UMachinePartsTextBalloonGroup::WidgetSwitcher' has a wrong offset!");

// Class UNION.TimeTrialReplayLoadState
// 0x0000 (0x0128 - 0x0128)
class UTimeTrialReplayLoadState : public UMenuSequenceSubStateBase
{
public:
	bool IsReplayDataLoad();
	void ReplayDataLoad(const EStageId StageId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeTrialReplayLoadState">();
	}
	static class UTimeTrialReplayLoadState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeTrialReplayLoadState>();
	}
};
static_assert(alignof(UTimeTrialReplayLoadState) == 0x000008, "Wrong alignment on UTimeTrialReplayLoadState");
static_assert(sizeof(UTimeTrialReplayLoadState) == 0x000128, "Wrong size on UTimeTrialReplayLoadState");

// Class UNION.MachineSoundComponent
// 0x0030 (0x01E8 - 0x01B8)
class UMachineSoundComponent final : public UMachineSoundBaseComponent
{
public:
	class UDataTable*                             SurfaceSoundDataTable;                             // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0x28];                                     // 0x01C0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void VehicleModelEventAttackedInfo(const int32& EventId, const struct FAttackedInfo& Value);
	void VehicleModelEventInt(const int32& EventId, const int32& Value);
	void VehicleModelEventItemId(const int32& EventId, const EItemId& Value, const int32& IntValue, const EItemThrowDirection& ThrowType, const bool bGadgetLuckyItem);
	void VehicleModelEventSpecialStatus(const int32& EventId, const EVehicleSpecialStatusType& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineSoundComponent">();
	}
	static class UMachineSoundComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineSoundComponent>();
	}
};
static_assert(alignof(UMachineSoundComponent) == 0x000008, "Wrong alignment on UMachineSoundComponent");
static_assert(sizeof(UMachineSoundComponent) == 0x0001E8, "Wrong size on UMachineSoundComponent");
static_assert(offsetof(UMachineSoundComponent, SurfaceSoundDataTable) == 0x0001B8, "Member 'UMachineSoundComponent::SurfaceSoundDataTable' has a wrong offset!");

// Class UNION.MachineStickerSelectWindow
// 0x0020 (0x03F8 - 0x03D8)
class UMachineStickerSelectWindow : public UUnionUISceneBase
{
public:
	int32                                         PlayerIndex;                                       // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          DecisionSoundCue;                                  // 0x03E0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundAtomCue*                          CancelSoundCue;                                    // 0x03E8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F0[0x8];                                      // 0x03F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FEventReply OnFocusReceivedImpl(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineStickerSelectWindow">();
	}
	static class UMachineStickerSelectWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineStickerSelectWindow>();
	}
};
static_assert(alignof(UMachineStickerSelectWindow) == 0x000008, "Wrong alignment on UMachineStickerSelectWindow");
static_assert(sizeof(UMachineStickerSelectWindow) == 0x0003F8, "Wrong size on UMachineStickerSelectWindow");
static_assert(offsetof(UMachineStickerSelectWindow, PlayerIndex) == 0x0003D8, "Member 'UMachineStickerSelectWindow::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectWindow, DecisionSoundCue) == 0x0003E0, "Member 'UMachineStickerSelectWindow::DecisionSoundCue' has a wrong offset!");
static_assert(offsetof(UMachineStickerSelectWindow, CancelSoundCue) == 0x0003E8, "Member 'UMachineStickerSelectWindow::CancelSoundCue' has a wrong offset!");

// Class UNION.MachineStickerSlotSelectWindow
// 0x00A8 (0x0480 - 0x03D8)
class UMachineStickerSlotSelectWindow : public UUnionUISceneBase
{
public:
	class UUnionUISceneBase*                      WBP_MachineCustom_Sub_StickerSlot;                 // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMachineStickerSlotIcon*                WBP_CustomSticker_Sub_PartsIcon_01;                // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineStickerSlotIcon*                WBP_CustomSticker_Sub_PartsIcon_02;                // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineStickerSlotIcon*                WBP_CustomSticker_Sub_PartsIcon_03;                // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineStickerSlotIcon*                WBP_CustomSticker_Sub_PartsIcon_04;                // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineStickerSlotIcon*                WBP_CustomSticker_Sub_PartsIcon_05;                // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineStickerSlotIcon*                WBP_CustomSticker_Sub_PartsIcon_06;                // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineStickerSlotIcon*                WBP_CustomSticker_Sub_PartsIcon_07;                // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineStickerSlotIcon*                WBP_CustomSticker_Sub_PartsIcon_08;                // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecision;                                        // 0x0428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCancel;                                          // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnItemFocused;                                     // 0x0448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnItemSelected;                                    // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          DecisionSoundCue;                                  // 0x0468(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundAtomCue*                          CancelSoundCue;                                    // 0x0470(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_478[0x8];                                      // 0x0478(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FEventReply OnFocusReceivedImpl(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineStickerSlotSelectWindow">();
	}
	static class UMachineStickerSlotSelectWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineStickerSlotSelectWindow>();
	}
};
static_assert(alignof(UMachineStickerSlotSelectWindow) == 0x000008, "Wrong alignment on UMachineStickerSlotSelectWindow");
static_assert(sizeof(UMachineStickerSlotSelectWindow) == 0x000480, "Wrong size on UMachineStickerSlotSelectWindow");
static_assert(offsetof(UMachineStickerSlotSelectWindow, WBP_MachineCustom_Sub_StickerSlot) == 0x0003D8, "Member 'UMachineStickerSlotSelectWindow::WBP_MachineCustom_Sub_StickerSlot' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, PlayerIndex) == 0x0003E0, "Member 'UMachineStickerSlotSelectWindow::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, WBP_CustomSticker_Sub_PartsIcon_01) == 0x0003E8, "Member 'UMachineStickerSlotSelectWindow::WBP_CustomSticker_Sub_PartsIcon_01' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, WBP_CustomSticker_Sub_PartsIcon_02) == 0x0003F0, "Member 'UMachineStickerSlotSelectWindow::WBP_CustomSticker_Sub_PartsIcon_02' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, WBP_CustomSticker_Sub_PartsIcon_03) == 0x0003F8, "Member 'UMachineStickerSlotSelectWindow::WBP_CustomSticker_Sub_PartsIcon_03' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, WBP_CustomSticker_Sub_PartsIcon_04) == 0x000400, "Member 'UMachineStickerSlotSelectWindow::WBP_CustomSticker_Sub_PartsIcon_04' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, WBP_CustomSticker_Sub_PartsIcon_05) == 0x000408, "Member 'UMachineStickerSlotSelectWindow::WBP_CustomSticker_Sub_PartsIcon_05' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, WBP_CustomSticker_Sub_PartsIcon_06) == 0x000410, "Member 'UMachineStickerSlotSelectWindow::WBP_CustomSticker_Sub_PartsIcon_06' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, WBP_CustomSticker_Sub_PartsIcon_07) == 0x000418, "Member 'UMachineStickerSlotSelectWindow::WBP_CustomSticker_Sub_PartsIcon_07' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, WBP_CustomSticker_Sub_PartsIcon_08) == 0x000420, "Member 'UMachineStickerSlotSelectWindow::WBP_CustomSticker_Sub_PartsIcon_08' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, OnDecision) == 0x000428, "Member 'UMachineStickerSlotSelectWindow::OnDecision' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, OnCancel) == 0x000438, "Member 'UMachineStickerSlotSelectWindow::OnCancel' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, OnItemFocused) == 0x000448, "Member 'UMachineStickerSlotSelectWindow::OnItemFocused' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, OnItemSelected) == 0x000458, "Member 'UMachineStickerSlotSelectWindow::OnItemSelected' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, DecisionSoundCue) == 0x000468, "Member 'UMachineStickerSlotSelectWindow::DecisionSoundCue' has a wrong offset!");
static_assert(offsetof(UMachineStickerSlotSelectWindow, CancelSoundCue) == 0x000470, "Member 'UMachineStickerSlotSelectWindow::CancelSoundCue' has a wrong offset!");

// Class UNION.MachineTirePartsDataAsset
// 0x0030 (0x0060 - 0x0030)
class UMachineTirePartsDataAsset final : public UPrimaryDataAsset
{
public:
	TArray<class UStaticMesh*>                    TireMesh;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsColor1Enabled;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsColor2Enabled;                                  // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsColor3Enabled;                                  // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGlowEnabled;                                    // 0x004B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireRotMaxSpeedKPM_30fps1Screen;                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireRotMaxSpeedKPM_30fpsOther;                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireRotMaxSpeedKPM_60fps1Screen;                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireRotMaxSpeedKPM_60fpsOther;                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineTirePartsDataAsset">();
	}
	static class UMachineTirePartsDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineTirePartsDataAsset>();
	}
};
static_assert(alignof(UMachineTirePartsDataAsset) == 0x000008, "Wrong alignment on UMachineTirePartsDataAsset");
static_assert(sizeof(UMachineTirePartsDataAsset) == 0x000060, "Wrong size on UMachineTirePartsDataAsset");
static_assert(offsetof(UMachineTirePartsDataAsset, TireMesh) == 0x000030, "Member 'UMachineTirePartsDataAsset::TireMesh' has a wrong offset!");
static_assert(offsetof(UMachineTirePartsDataAsset, IconTexture) == 0x000040, "Member 'UMachineTirePartsDataAsset::IconTexture' has a wrong offset!");
static_assert(offsetof(UMachineTirePartsDataAsset, bIsColor1Enabled) == 0x000048, "Member 'UMachineTirePartsDataAsset::bIsColor1Enabled' has a wrong offset!");
static_assert(offsetof(UMachineTirePartsDataAsset, bIsColor2Enabled) == 0x000049, "Member 'UMachineTirePartsDataAsset::bIsColor2Enabled' has a wrong offset!");
static_assert(offsetof(UMachineTirePartsDataAsset, bIsColor3Enabled) == 0x00004A, "Member 'UMachineTirePartsDataAsset::bIsColor3Enabled' has a wrong offset!");
static_assert(offsetof(UMachineTirePartsDataAsset, bIsGlowEnabled) == 0x00004B, "Member 'UMachineTirePartsDataAsset::bIsGlowEnabled' has a wrong offset!");
static_assert(offsetof(UMachineTirePartsDataAsset, TireRotMaxSpeedKPM_30fps1Screen) == 0x00004C, "Member 'UMachineTirePartsDataAsset::TireRotMaxSpeedKPM_30fps1Screen' has a wrong offset!");
static_assert(offsetof(UMachineTirePartsDataAsset, TireRotMaxSpeedKPM_30fpsOther) == 0x000050, "Member 'UMachineTirePartsDataAsset::TireRotMaxSpeedKPM_30fpsOther' has a wrong offset!");
static_assert(offsetof(UMachineTirePartsDataAsset, TireRotMaxSpeedKPM_60fps1Screen) == 0x000054, "Member 'UMachineTirePartsDataAsset::TireRotMaxSpeedKPM_60fps1Screen' has a wrong offset!");
static_assert(offsetof(UMachineTirePartsDataAsset, TireRotMaxSpeedKPM_60fpsOther) == 0x000058, "Member 'UMachineTirePartsDataAsset::TireRotMaxSpeedKPM_60fpsOther' has a wrong offset!");

// Class UNION.ResultRateRank
// 0x0000 (0x02E0 - 0x02E0)
class UResultRateRank : public UUserWidget
{
public:
	static struct FRateRankBonusList GetRateRankBonusList(bool* Get_bIsGetReward);

	void PlayRateRank_GaugeUpDownVoice(ERateRank NowRateRank, float NowRate, float NextRate, float Bonus);
	void PlayRateRank_RankUpVoice(ERateRank NextRank);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResultRateRank">();
	}
	static class UResultRateRank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResultRateRank>();
	}
};
static_assert(alignof(UResultRateRank) == 0x000008, "Wrong alignment on UResultRateRank");
static_assert(sizeof(UResultRateRank) == 0x0002E0, "Wrong size on UResultRateRank");

// Class UNION.MachineTypeMachineIcon
// 0x0030 (0x0310 - 0x02E0)
class UMachineTypeMachineIcon : public UUserWidget
{
public:
	class UImage*                                 DMY_3DMachine;                                     // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_CutomText;                          // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Icon_Custom;                                   // 0x02F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DSP_Icon_New;                                      // 0x02F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             TXT_NEW;                                           // 0x0300(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIconCustomVisible(bool IsVisible_0);
	void SetIndex(int32 InIndex);
	void SetMachineID(EMachineId InMachineID);
	void SetNewText(const class FText& IsText);
	void SetNewVisible(bool IsVisible_0);
	void SetTexture(class UTexture2D* InTexture);
	void SetTextureScale(float InScaleRate);
	void SetTextureScaleWithYTransrate(float InScaleRate, float InY);
	void SetupText(int32 InIndex, bool IsVisible_0);

	int32 GetIndex() const;
	EMachineId GetMachineId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MachineTypeMachineIcon">();
	}
	static class UMachineTypeMachineIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMachineTypeMachineIcon>();
	}
};
static_assert(alignof(UMachineTypeMachineIcon) == 0x000008, "Wrong alignment on UMachineTypeMachineIcon");
static_assert(sizeof(UMachineTypeMachineIcon) == 0x000310, "Wrong size on UMachineTypeMachineIcon");
static_assert(offsetof(UMachineTypeMachineIcon, DMY_3DMachine) == 0x0002E0, "Member 'UMachineTypeMachineIcon::DMY_3DMachine' has a wrong offset!");
static_assert(offsetof(UMachineTypeMachineIcon, WidgetSwitcher_CutomText) == 0x0002E8, "Member 'UMachineTypeMachineIcon::WidgetSwitcher_CutomText' has a wrong offset!");
static_assert(offsetof(UMachineTypeMachineIcon, DSP_Icon_Custom) == 0x0002F0, "Member 'UMachineTypeMachineIcon::DSP_Icon_Custom' has a wrong offset!");
static_assert(offsetof(UMachineTypeMachineIcon, DSP_Icon_New) == 0x0002F8, "Member 'UMachineTypeMachineIcon::DSP_Icon_New' has a wrong offset!");
static_assert(offsetof(UMachineTypeMachineIcon, TXT_NEW) == 0x000300, "Member 'UMachineTypeMachineIcon::TXT_NEW' has a wrong offset!");

// Class UNION.MatchingSequence
// 0x0048 (0x03B0 - 0x0368)
class AMatchingSequence final : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              TimeOutLobby;                                      // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EMatchingLobbyType                            LobbyType;                                         // 0x0390(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchingSequenceStateMatching*         MatchingComponent;                                 // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A0[0x10];                                     // 0x03A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EMatchingLobbyType GetLobbyType();
	void OnBackSequenceEvent();
	void OnInitStateExit();
	void OnInitStateIdle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatchingSequence">();
	}
	static class AMatchingSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMatchingSequence>();
	}
};
static_assert(alignof(AMatchingSequence) == 0x000008, "Wrong alignment on AMatchingSequence");
static_assert(sizeof(AMatchingSequence) == 0x0003B0, "Wrong size on AMatchingSequence");
static_assert(offsetof(AMatchingSequence, TimeOutLobby) == 0x000370, "Member 'AMatchingSequence::TimeOutLobby' has a wrong offset!");
static_assert(offsetof(AMatchingSequence, OnBackEvent) == 0x000380, "Member 'AMatchingSequence::OnBackEvent' has a wrong offset!");
static_assert(offsetof(AMatchingSequence, LobbyType) == 0x000390, "Member 'AMatchingSequence::LobbyType' has a wrong offset!");
static_assert(offsetof(AMatchingSequence, MatchingComponent) == 0x000398, "Member 'AMatchingSequence::MatchingComponent' has a wrong offset!");

// Class UNION.MatchingSequenceStateMatching
// 0x0130 (0x0240 - 0x0110)
class UMatchingSequenceStateMatching final : public UMatchingSequenceStateBase
{
public:
	EMatchingLocalState                           LocalState;                                        // 0x0110(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMatchingLobbyType                            LobbyType;                                         // 0x0111(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_112[0x12E];                                    // 0x0112(0x012E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientP2PComplete();
	void DebugOverWrite(int32 JoinPlayerCount, int32 OnlineIndex);
	void EndWaitFinish();
	void FinishMatchingSetup();
	EMatchingLobbyType GetLobbyType();
	bool IsEnableAsyncP2P();
	bool IsEnableLegacyStateMatching();
	bool IsEnableP2PStartWithMatching();
	bool IsEnableP2PSubsystem();
	bool IsFinishedP2P();
	bool IsWaitFinish();
	void LoadMatchingSequenceActor(EMatchingLobbyType InLobbyType);
	void RegisterMemberAtSendP2PSignal();
	void SendClientP2PSignal();
	void SendEndPreRace();
	void SendStartP2PSignal(bool bIsResend);
	void SetLobbyType(EMatchingLobbyType InLobbyType);
	void SetLocalState(EMatchingLocalState NewLocalState);
	void SetupOnlinePeerRaceConfig(int32 LocalUserNum);
	bool WaitAsyncP2PConnectCompete();
	void WaitClientP2PConnectComplete();
	void WaitHostConnectionComplete();

	class FString GetComputerNameString() const;
	class UCommonLobbyContext* GetLobbyContext() const;
	int32 GetLobbyMemberCount() const;
	bool IsLobbyHost(int32 LocalUserNum) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatchingSequenceStateMatching">();
	}
	static class UMatchingSequenceStateMatching* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatchingSequenceStateMatching>();
	}
};
static_assert(alignof(UMatchingSequenceStateMatching) == 0x000008, "Wrong alignment on UMatchingSequenceStateMatching");
static_assert(sizeof(UMatchingSequenceStateMatching) == 0x000240, "Wrong size on UMatchingSequenceStateMatching");
static_assert(offsetof(UMatchingSequenceStateMatching, LocalState) == 0x000110, "Member 'UMatchingSequenceStateMatching::LocalState' has a wrong offset!");
static_assert(offsetof(UMatchingSequenceStateMatching, LobbyType) == 0x000111, "Member 'UMatchingSequenceStateMatching::LobbyType' has a wrong offset!");

// Class UNION.MatchingStateBase
// 0x0008 (0x0130 - 0x0128)
class UMatchingStateBase final : public UMenuSequenceSubStateBase
{
public:
	EMenuSequenceSubState                         StartState;                                        // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatchingStateBase">();
	}
	static class UMatchingStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatchingStateBase>();
	}
};
static_assert(alignof(UMatchingStateBase) == 0x000008, "Wrong alignment on UMatchingStateBase");
static_assert(sizeof(UMatchingStateBase) == 0x000130, "Wrong size on UMatchingStateBase");
static_assert(offsetof(UMatchingStateBase, StartState) == 0x000128, "Member 'UMatchingStateBase::StartState' has a wrong offset!");

// Class UNION.MatchmakingContext_ForMember
// 0x0018 (0x0270 - 0x0258)
class UMatchmakingContext_ForMember final : public UMatchmakingRequestContext
{
public:
	class UCommonLobbyContext*                    OwnerLobbyContext;                                 // 0x0258(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_260[0x10];                                     // 0x0260(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeWithOwnerLobby(class UCommonLobbyContext* LobbyContext, bool bIsPublicLobby);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatchmakingContext_ForMember">();
	}
	static class UMatchmakingContext_ForMember* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatchmakingContext_ForMember>();
	}
};
static_assert(alignof(UMatchmakingContext_ForMember) == 0x000008, "Wrong alignment on UMatchmakingContext_ForMember");
static_assert(sizeof(UMatchmakingContext_ForMember) == 0x000270, "Wrong size on UMatchmakingContext_ForMember");
static_assert(offsetof(UMatchmakingContext_ForMember, OwnerLobbyContext) == 0x000258, "Member 'UMatchmakingContext_ForMember::OwnerLobbyContext' has a wrong offset!");

// Class UNION.MenuDriverAnimInstance
// 0x0060 (0x0450 - 0x03F0)
class UMenuDriverAnimInstance : public URacerAnimInstance
{
public:
	uint8                                         Pad_3F0[0x10];                                     // 0x03F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EDriverId                                     DriverId;                                          // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeshVisibilityFromAnimationCurve;                 // 0x0401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimSequence*>                  AnimationAssets;                                   // 0x0408(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UAnimMontage*>                   MontageAssets;                                     // 0x0418(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UBlendSpace*>                    BlendSpaceAssets;                                  // 0x0428(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_438[0x18];                                     // 0x0438(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PreloadMenuAllAssets();
	void SetAnimSyncTimeById(const ERacerAnimSyncId ID, float Time);

	class UAnimSequence* GetAnimationAssetById(const EDriverAnimationAssetId AssetId) const;
	float GetAnimSyncTimeById(const ERacerAnimSyncId ID) const;
	class UBlendSpace* GetBlendSpaceAssetById(const EDriverBlendSpaceAssetId AssetId) const;
	class UAnimMontage* GetMontageAssetById(const EDriverAnimationAssetId AssetId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuDriverAnimInstance">();
	}
	static class UMenuDriverAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuDriverAnimInstance>();
	}
};
static_assert(alignof(UMenuDriverAnimInstance) == 0x000010, "Wrong alignment on UMenuDriverAnimInstance");
static_assert(sizeof(UMenuDriverAnimInstance) == 0x000450, "Wrong size on UMenuDriverAnimInstance");
static_assert(offsetof(UMenuDriverAnimInstance, DriverId) == 0x000400, "Member 'UMenuDriverAnimInstance::DriverId' has a wrong offset!");
static_assert(offsetof(UMenuDriverAnimInstance, bMeshVisibilityFromAnimationCurve) == 0x000401, "Member 'UMenuDriverAnimInstance::bMeshVisibilityFromAnimationCurve' has a wrong offset!");
static_assert(offsetof(UMenuDriverAnimInstance, AnimationAssets) == 0x000408, "Member 'UMenuDriverAnimInstance::AnimationAssets' has a wrong offset!");
static_assert(offsetof(UMenuDriverAnimInstance, MontageAssets) == 0x000418, "Member 'UMenuDriverAnimInstance::MontageAssets' has a wrong offset!");
static_assert(offsetof(UMenuDriverAnimInstance, BlendSpaceAssets) == 0x000428, "Member 'UMenuDriverAnimInstance::BlendSpaceAssets' has a wrong offset!");

// Class UNION.MenuGadgetIcon
// 0x0018 (0x0660 - 0x0648)
class UMenuGadgetIcon : public UUnionUIButtonStandard
{
public:
	EGadgetId                                     gadgetId;                                          // 0x0648(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_649[0x3];                                      // 0x0649(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GadgetCost;                                        // 0x064C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstance*                      DefaultBaseMaterial;                               // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      KitBaseMaterial;                                   // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetBalloonVisible(bool bInIsVisible);
	void SetBaseVisible(bool bInIsVisible);
	void SetCost(int32 InCost);
	void SetCostVisible(bool bInIsVisible);
	void SetCursorColor(int32 InPlayerIndex);
	void SetCursorVisible(bool InIsVisible);
	void SetGadgetCost(const int32 InGadgetCost);
	void SetGadgetId(const EGadgetId InGadgetId);
	void SetGadgetKitBase(const int32 InSizeX, const bool bInGadgetKit);
	void SetLockVisible(bool bInIsVisible);
	void SetNewVisible(bool bInIsVisible);
	void SetPlusVisible(bool bInIsVisible);
	void SetSelectEffectVisible(bool bInIsVisible);
	void SetShape(int32 InSizeX, int32 InSizeY);
	void SetShouldPlayCancelSound(bool bInShouldPlay);
	void SetShouldPlayDecisionSound(bool bInShouldPlay);
	void SetShouldPlayShoulderSound(bool bInShouldPlay);
	void SetTexture(class UTexture2D* InTexture);
	void SetupAsEmpty();
	void SetupAsLocked();
	void SetupAsNone();
	void SetupByGadgetId(EGadgetId InGadgetId, bool bInSetShape);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuGadgetIcon">();
	}
	static class UMenuGadgetIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuGadgetIcon>();
	}
};
static_assert(alignof(UMenuGadgetIcon) == 0x000008, "Wrong alignment on UMenuGadgetIcon");
static_assert(sizeof(UMenuGadgetIcon) == 0x000660, "Wrong size on UMenuGadgetIcon");
static_assert(offsetof(UMenuGadgetIcon, gadgetId) == 0x000648, "Member 'UMenuGadgetIcon::gadgetId' has a wrong offset!");
static_assert(offsetof(UMenuGadgetIcon, GadgetCost) == 0x00064C, "Member 'UMenuGadgetIcon::GadgetCost' has a wrong offset!");
static_assert(offsetof(UMenuGadgetIcon, DefaultBaseMaterial) == 0x000650, "Member 'UMenuGadgetIcon::DefaultBaseMaterial' has a wrong offset!");
static_assert(offsetof(UMenuGadgetIcon, KitBaseMaterial) == 0x000658, "Member 'UMenuGadgetIcon::KitBaseMaterial' has a wrong offset!");

// Class UNION.MenuLightingLevelInterface
// 0x0000 (0x0000 - 0x0000)
class IMenuLightingLevelInterface final
{
public:
	void SetLightingEnable(bool bEnable);
	void SetPostProcessEnable(bool bEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuLightingLevelInterface">();
	}
	static class IMenuLightingLevelInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMenuLightingLevelInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IMenuLightingLevelInterface) == 0x000001, "Wrong alignment on IMenuLightingLevelInterface");
static_assert(sizeof(IMenuLightingLevelInterface) == 0x000001, "Wrong size on IMenuLightingLevelInterface");

// Class UNION.MenuLobbyLevelInterface
// 0x0000 (0x0000 - 0x0000)
class IMenuLobbyLevelInterface final
{
public:
	class ACameraActor* GetCameraActor();
	class ASkeletalMeshActor* GetCubotActor();
	class ASkeletalMeshActor* GetDodonpaActor();
	TArray<class UStaticMeshComponent*> GetFestaGroupPlates();
	TArray<class AActor*> GetFestaVoltageActors();
	class ASkeletalMeshActor* GetOrbotActor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuLobbyLevelInterface">();
	}
	static class IMenuLobbyLevelInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMenuLobbyLevelInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IMenuLobbyLevelInterface) == 0x000001, "Wrong alignment on IMenuLobbyLevelInterface");
static_assert(sizeof(IMenuLobbyLevelInterface) == 0x000001, "Wrong size on IMenuLobbyLevelInterface");

// Class UNION.VehicleInRacePawn
// 0x0678 (0x0990 - 0x0318)
class alignas(0x10) AVehicleInRacePawn : public APawn
{
public:
	uint8                                         Pad_318[0x38];                                     // 0x0318(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Root;                                              // 0x0350(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            TeamRubberBandMesh;                                // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             GhostRoadEffectMesh;                               // 0x0360(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      GhostRoadEffectMaterial;                           // 0x0388(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GhostRoadEffectMeshScale;                          // 0x03B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostRoadEffectForwardOffsetScale;                 // 0x03C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       TPCameraComponent;                                 // 0x03D0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      CameraObstructEffect;                              // 0x03D8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    CameraObstructSound;                               // 0x03E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionAtomComponent*                    CameraObstructInputSound;                          // 0x03E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARaceCameraActor*                       RaceCameraActor;                                   // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAppListenerFocusPoint*                 ListenerFocusPoint;                                // 0x03F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionRacerStatusObject*                UnionRacerStatusObject;                            // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMachineInRaceActor>        MachineClass;                                      // 0x0408(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASimpleNPCSkeletalActor>    SimpleNpcSkeletalMachineClass;                     // 0x0410(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASimpleNPCStaticActor>      SimpleNpcStaticMachineClass;                       // 0x0418(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AHoverboardInRaceActor>     HoverboadClass;                                    // 0x0420(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMonsterTruckInRaceActor>   MonsterTruckClass;                                 // 0x0428(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASimpleNpcMonsterTruckActor> SimpleNpcMonsterTruckClass;                       // 0x0430(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AYellowDrillActor>          YellowDrillClass;                                  // 0x0438(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADrone>                     DroneClass;                                        // 0x0440(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ARecoveryRingExit>          RecoverRingExitClass;                              // 0x0448(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFootcutWarpRingPerformance> FootcutWarpRingPerformanceClass;                  // 0x0450(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemSlimePerformance>      ItemSlimePerformanceClass;                         // 0x0458(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemDarkChaoPerformance>   ItemDarkChaoPerformanceClass;                      // 0x0460(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemWarpRingPerformance>   ItemWarpPerformaceClass;                           // 0x0468(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemWeightPerformance>     ItemWeightPerformaceClass;                         // 0x0470(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EMachineOverlayMaterialType, class UMaterialInterface*> OverlayMaterialInterfaces;          // 0x0478(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMachineBehaviorParameterDataAsset*     BehaviorParameter;                                 // 0x04C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineCameraObstructDataAsset*        CameraObstructEffectParam;                         // 0x04D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ItemCountDownAnimCurve;                            // 0x04D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CameraEffectDisappearCurve;                        // 0x04E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TrickSpinSectionName;                              // 0x04E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMachineGadgetActionComponent*          MachineGadgetAction;                               // 0x04F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineAuraEffectComponent*            MachineAuraEffect;                                 // 0x0500(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const int32& EventId, const int32& Value)> OnVehicleModelEventInt; // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const int32& EventId, const float& Value)> OnVehicleModelEventFloat; // 0x0518(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const int32& EventId, const struct FAttackedInfo& Value)> OnVehicleModelEventAttackedInfo; // 0x0528(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const int32& EventId, const EItemId& Value, const int32& IntValue, const EItemThrowDirection& ThrowType, const bool bValue)> OnVehicleModelEventItemId; // 0x0538(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const int32& EventId, const EVehicleSpecialStatusType& Value)> OnVehicleModelEventSpecialStatus; // 0x0548(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EVehicleType Value)> OnChangeVehicleType;                          // 0x0558(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UMachineHornComponent>      MachineHornComponentClass;                         // 0x0568(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineHornComponent*                  MachineHornComponent;                              // 0x0570(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     GhostMaterialInterface;                            // 0x0578(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               GhostMaterialInterfaceDynamic;                     // 0x0580(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_588[0x68];                                     // 0x0588(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class AVehicleBaseActor*                      VehicleActor;                                      // 0x05F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AVehicleBaseActor*                      MonsterTruckActor;                                 // 0x05F8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AYellowDrillActor*                      YellowDrillActor;                                  // 0x0600(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ADriver*                                DriverActor;                                       // 0x0608(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ADrone*                                 DroneActor;                                        // 0x0610(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ARecoveryRingExit*                      RecoverRingExitActor;                              // 0x0618(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AItemPerformanceBase*>           ItemPerformanceBaseActors;                         // 0x0620(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UUnionCameraModifierPostEffect*         CameraModifierPostEffect;                          // 0x0630(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<EMachineOverlayMaterialType, class UMaterialInstanceDynamic*> OverlayMaterials;             // 0x0638(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<TWeakObjectPtr<class UObject>>           InputListenerSet;                                  // 0x0688(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	class USceneComponent*                        AudioListenerOverride;                             // 0x06D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionStaticMeshComponent*              TeamRubberBandComponents[0x6];                     // 0x06E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionStaticMeshComponent*              GhostRoadEffectMeshComponent;                      // 0x0710(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               GhostRoadEffectMID;                                // 0x0718(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_720[0xF8];                                     // 0x0720(0x00F8)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float Output)>                 CameraFloatStep;                                   // 0x0818(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TDelegate<void()>                             CameraFinishStep;                                  // 0x0828(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTimelineComponent*                     CameraEffectTimeline;                              // 0x0838(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_840[0x140];                                    // 0x0840(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseSimpleSkeletalMeshMachineNPC;                  // 0x0980(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSimpleSkeletalMeshMachineLocalPlayer;          // 0x0981(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSimpleStaticMeshMachineNPC;                    // 0x0982(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSimpleStaticMeshMachineLocalPlayer;            // 0x0983(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableRainbowEffect;                              // 0x0984(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_985[0x3];                                      // 0x0985(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DummyMaterialInterface;                            // 0x0988(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ActivateCamera();
	void AddItemPerformanceObject(class AItemPerformanceBase* obj);
	void CameraEffectTimelineFinishFunction();
	void CameraEffectTimelineStepFunction(float Value);
	void ChangeVehicleDisplayMode(EVehicleDisplayMode NewVehicleDisplayMode);
	void ChangeVehicleSize(float SizeRate);
	void ChangeVehicleType(EVehicleType NewVehicleType);
	void ChangeVehicleTypeGyroSetting(EVehicleType NewVehicleType);
	void DeactivateCamera();
	void EndRacePerformanceState();
	class AVehicleBaseActor* GetActiveVehicle();
	class ADriver* GetDriverActor();
	class USkeletalMeshComponent* GetDriverMeshComponent();
	class UCameraComponent* GetTPCameraComponentRef();
	class UUnionRacerStatusObject* GetUnionRacerStatusObject();
	class UUnionVehicleModelInfo* GetUnionVehicleModelInfo();
	struct FUnionVehicleRaceInput GetVehicleInput();
	void NoticeSpecialStatusEvent(const int32& EventId, const EVehicleSpecialStatusType Value);
	void OnBlinkEnd(bool bWithDriver);
	void OnBlinkStart(const struct FLinearColor& Color, bool bWithDriver);
	void OnBodyCut(bool bIsCut);
	void OnDamage();
	void OnDamageSpin(class AVehicleBaseActor* TargetVehicle, bool bIsPlay);
	void OnDrift(int32 ChargeLevel);
	void OnFadeOutInk(bool bIsPlay);
	void OnGoal();
	void OnRainbowBlinkEnd(bool bWithDriver);
	void OnRainbowBlinkStart(bool bWithDriver);
	void OnResultCamera();
	void ResetSpecialStatus();
	void ResetVehicleDefaultAttachments();
	void SetCameraEffectParameter(float BoostIntensity, float HispeedIntensity);
	void SetCameraPostEffectParameter(EUnionCameraModifierPostEffectType EffectType, class FName ParameterName, float Value);
	void SetDriverActor(class ADriver* InDriverActor);
	void SetEnableCameraPostEffect(EUnionCameraModifierPostEffectType EffectType, bool bEnable);
	void SetForceCameraAttach(bool bNewFlag);
	void SetHoldItem(EItemId ItemId, EItemThrowDirection ThrowType, int32 Value, bool bIsLocalPlayer, bool bUpdateThrowType, bool bGadgetLuckyItem);
	void SetOverwriteModelTransform(bool bEnable, const struct FTransform& Transform);
	void SetRacerIndex_Implementation(const int32& NewIndex);
	void SetRacerStatusObject_Implementation(class UUnionRacerStatusObject* NewUnionRacerStatusObject);
	void SetScalarParameterValue(class FName ParameterName, float Value, bool bWithDriver);
	void SetTPCameraComponent(class UCameraComponent* NewCameraComponent);
	void SetVectorParameterValue(class FName ParameterName, const struct FLinearColor& Value, bool bWithDriver);
	void SpawnDriverActor(EDriverId DriverId, bool bIsHoverboard, bool bUseRivalSkin);
	void StartHiddenNoUpdate();
	void VehicleModelEventAttackedInfo(const int32& EventId, const struct FAttackedInfo& Value);
	void VehicleModelEventFloat(const int32& EventId, const float& Value);
	void VehicleModelEventInt(const int32& EventId, const int32& Value);
	void VehicleModelEventItemId(const int32& EventId, const EItemId& Value, const int32& IntValue, const EItemThrowDirection& ThrowType, const bool bGadgetLuckyItem);
	void VehicleModelEventSpecialStatus(const int32& EventId, const EVehicleSpecialStatusType& Value);

	bool CalculateStartTransform(struct FTransform* OutBaseTransform, struct FTransform* OutTransform) const;
	EDriverSize GetDriverSize() const;
	bool GetIsVehicleChanging() const;
	int32 GetLocalPlayerCount() const;
	class UMaterialInstanceDynamic* GetOverlayMaterial(EMachineOverlayMaterialType OverlayMaterialType) const;
	int32 GetPlayerControllerIndex() const;
	ERaceInfoStateType GetRaceInfoState() const;
	int32 GetRacerIndex_Implementation() const;
	float GetTrickSpeedRate() const;
	EVehicleDisplayMode GetVehicleDisplayMode() const;
	EVehicleMeshType GetVehicleMeshType() const;
	EVehicleType GetVehicleType() const;
	bool IsEnableSound() const;
	bool IsInBodyCut() const;
	bool IsInDriving() const;
	bool IsInFreshlyPaint() const;
	bool IsInRace() const;
	bool IsInRingMax() const;
	bool IsInShield() const;
	bool IsSpawnDriverActor() const;
	bool IsVisibleDriftEffect() const;
	bool IsVisibleEffect() const;
	bool IsVisibleSurfaceEffect() const;
	bool IsVisibleTireMark() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleInRacePawn">();
	}
	static class AVehicleInRacePawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVehicleInRacePawn>();
	}
};
static_assert(alignof(AVehicleInRacePawn) == 0x000010, "Wrong alignment on AVehicleInRacePawn");
static_assert(sizeof(AVehicleInRacePawn) == 0x000990, "Wrong size on AVehicleInRacePawn");
static_assert(offsetof(AVehicleInRacePawn, Root) == 0x000350, "Member 'AVehicleInRacePawn::Root' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, TeamRubberBandMesh) == 0x000358, "Member 'AVehicleInRacePawn::TeamRubberBandMesh' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, GhostRoadEffectMesh) == 0x000360, "Member 'AVehicleInRacePawn::GhostRoadEffectMesh' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, GhostRoadEffectMaterial) == 0x000388, "Member 'AVehicleInRacePawn::GhostRoadEffectMaterial' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, GhostRoadEffectMeshScale) == 0x0003B0, "Member 'AVehicleInRacePawn::GhostRoadEffectMeshScale' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, GhostRoadEffectForwardOffsetScale) == 0x0003C8, "Member 'AVehicleInRacePawn::GhostRoadEffectForwardOffsetScale' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, TPCameraComponent) == 0x0003D0, "Member 'AVehicleInRacePawn::TPCameraComponent' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, CameraObstructEffect) == 0x0003D8, "Member 'AVehicleInRacePawn::CameraObstructEffect' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, CameraObstructSound) == 0x0003E0, "Member 'AVehicleInRacePawn::CameraObstructSound' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, CameraObstructInputSound) == 0x0003E8, "Member 'AVehicleInRacePawn::CameraObstructInputSound' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, RaceCameraActor) == 0x0003F0, "Member 'AVehicleInRacePawn::RaceCameraActor' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, ListenerFocusPoint) == 0x0003F8, "Member 'AVehicleInRacePawn::ListenerFocusPoint' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, UnionRacerStatusObject) == 0x000400, "Member 'AVehicleInRacePawn::UnionRacerStatusObject' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, MachineClass) == 0x000408, "Member 'AVehicleInRacePawn::MachineClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, SimpleNpcSkeletalMachineClass) == 0x000410, "Member 'AVehicleInRacePawn::SimpleNpcSkeletalMachineClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, SimpleNpcStaticMachineClass) == 0x000418, "Member 'AVehicleInRacePawn::SimpleNpcStaticMachineClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, HoverboadClass) == 0x000420, "Member 'AVehicleInRacePawn::HoverboadClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, MonsterTruckClass) == 0x000428, "Member 'AVehicleInRacePawn::MonsterTruckClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, SimpleNpcMonsterTruckClass) == 0x000430, "Member 'AVehicleInRacePawn::SimpleNpcMonsterTruckClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, YellowDrillClass) == 0x000438, "Member 'AVehicleInRacePawn::YellowDrillClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, DroneClass) == 0x000440, "Member 'AVehicleInRacePawn::DroneClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, RecoverRingExitClass) == 0x000448, "Member 'AVehicleInRacePawn::RecoverRingExitClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, FootcutWarpRingPerformanceClass) == 0x000450, "Member 'AVehicleInRacePawn::FootcutWarpRingPerformanceClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, ItemSlimePerformanceClass) == 0x000458, "Member 'AVehicleInRacePawn::ItemSlimePerformanceClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, ItemDarkChaoPerformanceClass) == 0x000460, "Member 'AVehicleInRacePawn::ItemDarkChaoPerformanceClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, ItemWarpPerformaceClass) == 0x000468, "Member 'AVehicleInRacePawn::ItemWarpPerformaceClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, ItemWeightPerformaceClass) == 0x000470, "Member 'AVehicleInRacePawn::ItemWeightPerformaceClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, OverlayMaterialInterfaces) == 0x000478, "Member 'AVehicleInRacePawn::OverlayMaterialInterfaces' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, BehaviorParameter) == 0x0004C8, "Member 'AVehicleInRacePawn::BehaviorParameter' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, CameraObstructEffectParam) == 0x0004D0, "Member 'AVehicleInRacePawn::CameraObstructEffectParam' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, ItemCountDownAnimCurve) == 0x0004D8, "Member 'AVehicleInRacePawn::ItemCountDownAnimCurve' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, CameraEffectDisappearCurve) == 0x0004E0, "Member 'AVehicleInRacePawn::CameraEffectDisappearCurve' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, TrickSpinSectionName) == 0x0004E8, "Member 'AVehicleInRacePawn::TrickSpinSectionName' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, MachineGadgetAction) == 0x0004F8, "Member 'AVehicleInRacePawn::MachineGadgetAction' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, MachineAuraEffect) == 0x000500, "Member 'AVehicleInRacePawn::MachineAuraEffect' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, OnVehicleModelEventInt) == 0x000508, "Member 'AVehicleInRacePawn::OnVehicleModelEventInt' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, OnVehicleModelEventFloat) == 0x000518, "Member 'AVehicleInRacePawn::OnVehicleModelEventFloat' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, OnVehicleModelEventAttackedInfo) == 0x000528, "Member 'AVehicleInRacePawn::OnVehicleModelEventAttackedInfo' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, OnVehicleModelEventItemId) == 0x000538, "Member 'AVehicleInRacePawn::OnVehicleModelEventItemId' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, OnVehicleModelEventSpecialStatus) == 0x000548, "Member 'AVehicleInRacePawn::OnVehicleModelEventSpecialStatus' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, OnChangeVehicleType) == 0x000558, "Member 'AVehicleInRacePawn::OnChangeVehicleType' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, MachineHornComponentClass) == 0x000568, "Member 'AVehicleInRacePawn::MachineHornComponentClass' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, MachineHornComponent) == 0x000570, "Member 'AVehicleInRacePawn::MachineHornComponent' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, GhostMaterialInterface) == 0x000578, "Member 'AVehicleInRacePawn::GhostMaterialInterface' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, GhostMaterialInterfaceDynamic) == 0x000580, "Member 'AVehicleInRacePawn::GhostMaterialInterfaceDynamic' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, VehicleActor) == 0x0005F0, "Member 'AVehicleInRacePawn::VehicleActor' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, MonsterTruckActor) == 0x0005F8, "Member 'AVehicleInRacePawn::MonsterTruckActor' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, YellowDrillActor) == 0x000600, "Member 'AVehicleInRacePawn::YellowDrillActor' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, DriverActor) == 0x000608, "Member 'AVehicleInRacePawn::DriverActor' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, DroneActor) == 0x000610, "Member 'AVehicleInRacePawn::DroneActor' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, RecoverRingExitActor) == 0x000618, "Member 'AVehicleInRacePawn::RecoverRingExitActor' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, ItemPerformanceBaseActors) == 0x000620, "Member 'AVehicleInRacePawn::ItemPerformanceBaseActors' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, CameraModifierPostEffect) == 0x000630, "Member 'AVehicleInRacePawn::CameraModifierPostEffect' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, OverlayMaterials) == 0x000638, "Member 'AVehicleInRacePawn::OverlayMaterials' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, InputListenerSet) == 0x000688, "Member 'AVehicleInRacePawn::InputListenerSet' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, AudioListenerOverride) == 0x0006D8, "Member 'AVehicleInRacePawn::AudioListenerOverride' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, TeamRubberBandComponents) == 0x0006E0, "Member 'AVehicleInRacePawn::TeamRubberBandComponents' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, GhostRoadEffectMeshComponent) == 0x000710, "Member 'AVehicleInRacePawn::GhostRoadEffectMeshComponent' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, GhostRoadEffectMID) == 0x000718, "Member 'AVehicleInRacePawn::GhostRoadEffectMID' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, CameraFloatStep) == 0x000818, "Member 'AVehicleInRacePawn::CameraFloatStep' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, CameraFinishStep) == 0x000828, "Member 'AVehicleInRacePawn::CameraFinishStep' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, CameraEffectTimeline) == 0x000838, "Member 'AVehicleInRacePawn::CameraEffectTimeline' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, bUseSimpleSkeletalMeshMachineNPC) == 0x000980, "Member 'AVehicleInRacePawn::bUseSimpleSkeletalMeshMachineNPC' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, bUseSimpleSkeletalMeshMachineLocalPlayer) == 0x000981, "Member 'AVehicleInRacePawn::bUseSimpleSkeletalMeshMachineLocalPlayer' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, bUseSimpleStaticMeshMachineNPC) == 0x000982, "Member 'AVehicleInRacePawn::bUseSimpleStaticMeshMachineNPC' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, bUseSimpleStaticMeshMachineLocalPlayer) == 0x000983, "Member 'AVehicleInRacePawn::bUseSimpleStaticMeshMachineLocalPlayer' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, bEnableRainbowEffect) == 0x000984, "Member 'AVehicleInRacePawn::bEnableRainbowEffect' has a wrong offset!");
static_assert(offsetof(AVehicleInRacePawn, DummyMaterialInterface) == 0x000988, "Member 'AVehicleInRacePawn::DummyMaterialInterface' has a wrong offset!");

// Class UNION.MenuLobbyTravelRingActor
// 0x0078 (0x0308 - 0x0290)
class AMenuLobbyTravelRingActor final : public AActor
{
public:
	class UStaticMeshComponent*                   RingStaticMesh;                                    // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               MaterialRing;                                      // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               MaterialCenter;                                    // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStageId                                      DecidedStageId;                                    // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DecidedRingIndex;                                  // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStageId                                      RandomStageId;                                     // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EStageId>                              SelectStageIds;                                    // 0x02B8(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 SelectStageIndexs;                                 // 0x02C8(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnShowStageNameEvent;                              // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	ERaceSettingCourseSelecting                   CourseSelectingType;                               // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E9[0x1F];                                     // 0x02E9(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EStageId GetCourseId();
	bool GetIsDecide();
	bool GetIsSelect();
	int32 GetRingIndex();
	void OnInitialize(int32 InRingIndex, EStageId InCourseId);
	void SetCourseId(EStageId InCourseId);
	void SetFixDecidedStageId(EStageId InStageId, int32 InRingIndex);
	void SetIsDecide(bool InIsDecide);
	void SetIsSelect(bool InIsSelect);
	void SetMaterialCenterEmissivePower(float InEmissivePower);
	void SetMaterialCourseResult();
	void SetPlayersSelectedStageIds(const TArray<EStageId>& InStageIds, const TArray<int32>& InRingIndexs);
	void SetRandomMarkMaterial();
	void SetRandomStageId(EStageId InRandomStageId);
	void SetRingCenterMipLevel(int32 InMipLevel);
	void SetScale(float InScale);
	void SetupMaterials();
	void UpdateScale(float InDeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuLobbyTravelRingActor">();
	}
	static class AMenuLobbyTravelRingActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMenuLobbyTravelRingActor>();
	}
};
static_assert(alignof(AMenuLobbyTravelRingActor) == 0x000008, "Wrong alignment on AMenuLobbyTravelRingActor");
static_assert(sizeof(AMenuLobbyTravelRingActor) == 0x000308, "Wrong size on AMenuLobbyTravelRingActor");
static_assert(offsetof(AMenuLobbyTravelRingActor, RingStaticMesh) == 0x000290, "Member 'AMenuLobbyTravelRingActor::RingStaticMesh' has a wrong offset!");
static_assert(offsetof(AMenuLobbyTravelRingActor, MaterialRing) == 0x000298, "Member 'AMenuLobbyTravelRingActor::MaterialRing' has a wrong offset!");
static_assert(offsetof(AMenuLobbyTravelRingActor, MaterialCenter) == 0x0002A0, "Member 'AMenuLobbyTravelRingActor::MaterialCenter' has a wrong offset!");
static_assert(offsetof(AMenuLobbyTravelRingActor, DecidedStageId) == 0x0002A8, "Member 'AMenuLobbyTravelRingActor::DecidedStageId' has a wrong offset!");
static_assert(offsetof(AMenuLobbyTravelRingActor, DecidedRingIndex) == 0x0002AC, "Member 'AMenuLobbyTravelRingActor::DecidedRingIndex' has a wrong offset!");
static_assert(offsetof(AMenuLobbyTravelRingActor, RandomStageId) == 0x0002B0, "Member 'AMenuLobbyTravelRingActor::RandomStageId' has a wrong offset!");
static_assert(offsetof(AMenuLobbyTravelRingActor, SelectStageIds) == 0x0002B8, "Member 'AMenuLobbyTravelRingActor::SelectStageIds' has a wrong offset!");
static_assert(offsetof(AMenuLobbyTravelRingActor, SelectStageIndexs) == 0x0002C8, "Member 'AMenuLobbyTravelRingActor::SelectStageIndexs' has a wrong offset!");
static_assert(offsetof(AMenuLobbyTravelRingActor, OnShowStageNameEvent) == 0x0002D8, "Member 'AMenuLobbyTravelRingActor::OnShowStageNameEvent' has a wrong offset!");
static_assert(offsetof(AMenuLobbyTravelRingActor, CourseSelectingType) == 0x0002E8, "Member 'AMenuLobbyTravelRingActor::CourseSelectingType' has a wrong offset!");

// Class UNION.MenuRacerHoverboard
// 0x0000 (0x0790 - 0x0790)
class AMenuRacerHoverboard : public AHoverboardBaseActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuRacerHoverboard">();
	}
	static class AMenuRacerHoverboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMenuRacerHoverboard>();
	}
};
static_assert(alignof(AMenuRacerHoverboard) == 0x000008, "Wrong alignment on AMenuRacerHoverboard");
static_assert(sizeof(AMenuRacerHoverboard) == 0x000790, "Wrong size on AMenuRacerHoverboard");

// Class UNION.MenuRacerLobby
// 0x0028 (0x0370 - 0x0348)
class AMenuRacerLobby : public AMenuRacerBase
{
public:
	class UNiagaraSystem*                         SelectEffectSystem;                                // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      SelectEffectComponent;                             // 0x0350(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x18];                                     // 0x0358(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeMachineColor(int32 InGroupIndex, bool InEnableEffect);
	void ChangeVisibleCrownfromRacerVisible();
	void HiddenCrown();
	void SetAll(EDriverId InDriverId, const struct FUserMachineCustomizeData& InCustomizeData, bool bIsSpawnCrown);
	void SetEnableSelectEffect(bool InEnable);
	void SetForcedLod(int32 NewForcedLodModel);
	void SetVisibilityCrown(bool bIsVisible);
	void SpawnOrVisibleCrown(bool bIsNotSpawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuRacerLobby">();
	}
	static class AMenuRacerLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMenuRacerLobby>();
	}
};
static_assert(alignof(AMenuRacerLobby) == 0x000008, "Wrong alignment on AMenuRacerLobby");
static_assert(sizeof(AMenuRacerLobby) == 0x000370, "Wrong size on AMenuRacerLobby");
static_assert(offsetof(AMenuRacerLobby, SelectEffectSystem) == 0x000348, "Member 'AMenuRacerLobby::SelectEffectSystem' has a wrong offset!");
static_assert(offsetof(AMenuRacerLobby, SelectEffectComponent) == 0x000350, "Member 'AMenuRacerLobby::SelectEffectComponent' has a wrong offset!");

// Class UNION.MenuResourcePreloader
// 0x0090 (0x0320 - 0x0290)
class AMenuResourcePreloader final : public AActor
{
public:
	TArray<class UMenuResourceElement*>           Elements;                                          // 0x0290(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSubclassOf<class UMenuResourceElement>       ElementClass;                                      // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A8[0x78];                                     // 0x02A8(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishLoad();
	void Initialize(int32 InRowNum, int32 InColumnNum, int32 FirstRowIndex, int32 FirstColumnIndex, int32 LoadCount, TSubclassOf<class UMenuResourceElement> Class_0, TArray<class UMenuResourceElement*>* OutElements);
	void NotifyChangeCursor(int32 RowIndex, int32 ColumnIndex);
	void NotifyChangeCursorByIndex(int32 Index_0);
	void NotifyChangeCursorByIndexWithPlayerIndex(int32 PlayerIndex, int32 CursorIndex);
	void SetupPlayerCount(int32 localPlayerNum);
	void StartLoad();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuResourcePreloader">();
	}
	static class AMenuResourcePreloader* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMenuResourcePreloader>();
	}
};
static_assert(alignof(AMenuResourcePreloader) == 0x000008, "Wrong alignment on AMenuResourcePreloader");
static_assert(sizeof(AMenuResourcePreloader) == 0x000320, "Wrong size on AMenuResourcePreloader");
static_assert(offsetof(AMenuResourcePreloader, Elements) == 0x000290, "Member 'AMenuResourcePreloader::Elements' has a wrong offset!");
static_assert(offsetof(AMenuResourcePreloader, ElementClass) == 0x0002A0, "Member 'AMenuResourcePreloader::ElementClass' has a wrong offset!");

// Class UNION.ResourceHolder
// 0x0038 (0x0060 - 0x0028)
class UResourceHolder final : public UObject
{
public:
	TArray<class UObject*>                        Objects;                                           // 0x0028(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x28];                                      // 0x0038(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResourceHolder">();
	}
	static class UResourceHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResourceHolder>();
	}
};
static_assert(alignof(UResourceHolder) == 0x000008, "Wrong alignment on UResourceHolder");
static_assert(sizeof(UResourceHolder) == 0x000060, "Wrong size on UResourceHolder");
static_assert(offsetof(UResourceHolder, Objects) == 0x000028, "Member 'UResourceHolder::Objects' has a wrong offset!");

// Class UNION.MenuSequenceUIInterface
// 0x0000 (0x0000 - 0x0000)
class IMenuSequenceUIInterface final
{
public:
	void EnableInputPlayerController(const bool Enable);
	class UObject* GetFooter();
	class UObject* GetOwnerMenuSequence();
	void SetNextMenuSequenceState(EMenuSequenceMainState InState, class UObject* PrevSequence);
	void SetNextSubMenuSequenceState(EMenuSequenceSubState InState, class UObject* PrevSequence);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuSequenceUIInterface">();
	}
	static class IMenuSequenceUIInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMenuSequenceUIInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IMenuSequenceUIInterface) == 0x000001, "Wrong alignment on IMenuSequenceUIInterface");
static_assert(sizeof(IMenuSequenceUIInterface) == 0x000001, "Wrong size on IMenuSequenceUIInterface");

// Class UNION.MenuWorldSubsystem
// 0x00A8 (0x00D8 - 0x0030)
class UMenuWorldSubsystem final : public UWorldSubsystem
{
public:
	class AActor*                                 TopMenuBG;                                         // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 BlueFlagMenuBG;                                    // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETopMenuPlayNum                               SelectedTopMenuPlayNum;                            // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CommonMenuTextDataTable;                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonMenuSubMenu*                     CommonSubMenu;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonMenuFooterMenu*                  Footer;                                            // 0x0058(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonMenuHeaderMenu*                  Header;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuSequenceMainState                        PrevMenuSequenceMainState;                         // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaMachineSelectsBase*               CharaMachineSelectWindow;                          // 0x0070(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UComCharaMachineLottery*                ComCharaMachineLottery;                            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsFirstStateInCharaMachine;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AMenuRacerBase>             MenuRacerPreviewClass;                             // 0x0088(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AMenuRacerBase>             MenuRacerLobbyClass;                               // 0x0090(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AMenuRacerBase*>                 MenuRacers;                                        // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class AMenuRacerBase*>                 LobbyRacers;                                       // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   CurrentTopMenuLevelName;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0x18];                                      // 0x00C0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateCharaMachineSelect(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetType, class APlayerController* OwningPlayer);
	class AMenuRacerBase* CreateMenuRacer(const int32& PlayerIndex, EMenuRacerType Type);
	void DeleteCharaMachineSelect();
	void DestroyMenuRacer(const int32& PlayerIndex);
	void DestroyMenuRacers(EMenuRacerType Type);
	void EndProcessAfterLoadLevelTopMenu(float OriginalAsyncLoadingTimeLimit);
	TArray<class AMenuRacerBase*> GetAllMenuRacers();
	class ULevelStreaming* GetAlreadyLoadNeedSubLevel(const class UObject* WorldContextObject, bool* bIsAlreadyLoad);
	class UComCharaMachineLottery* GetComCharaMachineLottery();
	class FName GetCurrentTopMenuLevelName();
	class AMenuRacerBase* GetLobbyRacer(const int32& PlayerIndex);
	TArray<class AMenuRacerBase*> GetLobbyRacers();
	class AMenuRacerBase* GetMenuRacer(const int32& PlayerIndex);
	TArray<class AMenuRacerBase*> GetMenuRacers(EMenuRacerType Type);
	class FName GetSubLevelNameOfCharaMachineSelect();
	class FName GetSubLevelNameOfGarageStage();
	class FName GetSubLevelNameOfTopMenuStage();
	bool IsNeedUnloadAnyTopMenuLevel(const class UObject* WorldContextObject);
	class ULevelStreaming* LoadLevelTopMenu(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	float ReadyBeforeLoadLevelTopMenu();
	void SetFirstStateInCharaMachine(bool bInIsFirstState);
	void UnLoadLevelTopMenu(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void UpdateCurrentTopMenuLevelName(const bool bCheckLoggedIn);

	class UCharaMachineSelectsBase* GetCharaMachineSelectWindow() const;
	bool IsFirstStateInCharaMachine() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuWorldSubsystem">();
	}
	static class UMenuWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuWorldSubsystem>();
	}
};
static_assert(alignof(UMenuWorldSubsystem) == 0x000008, "Wrong alignment on UMenuWorldSubsystem");
static_assert(sizeof(UMenuWorldSubsystem) == 0x0000D8, "Wrong size on UMenuWorldSubsystem");
static_assert(offsetof(UMenuWorldSubsystem, TopMenuBG) == 0x000030, "Member 'UMenuWorldSubsystem::TopMenuBG' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, BlueFlagMenuBG) == 0x000038, "Member 'UMenuWorldSubsystem::BlueFlagMenuBG' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, SelectedTopMenuPlayNum) == 0x000040, "Member 'UMenuWorldSubsystem::SelectedTopMenuPlayNum' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, CommonMenuTextDataTable) == 0x000048, "Member 'UMenuWorldSubsystem::CommonMenuTextDataTable' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, CommonSubMenu) == 0x000050, "Member 'UMenuWorldSubsystem::CommonSubMenu' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, Footer) == 0x000058, "Member 'UMenuWorldSubsystem::Footer' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, Header) == 0x000060, "Member 'UMenuWorldSubsystem::Header' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, PrevMenuSequenceMainState) == 0x000068, "Member 'UMenuWorldSubsystem::PrevMenuSequenceMainState' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, CharaMachineSelectWindow) == 0x000070, "Member 'UMenuWorldSubsystem::CharaMachineSelectWindow' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, ComCharaMachineLottery) == 0x000078, "Member 'UMenuWorldSubsystem::ComCharaMachineLottery' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, bIsFirstStateInCharaMachine) == 0x000080, "Member 'UMenuWorldSubsystem::bIsFirstStateInCharaMachine' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, MenuRacerPreviewClass) == 0x000088, "Member 'UMenuWorldSubsystem::MenuRacerPreviewClass' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, MenuRacerLobbyClass) == 0x000090, "Member 'UMenuWorldSubsystem::MenuRacerLobbyClass' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, MenuRacers) == 0x000098, "Member 'UMenuWorldSubsystem::MenuRacers' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, LobbyRacers) == 0x0000A8, "Member 'UMenuWorldSubsystem::LobbyRacers' has a wrong offset!");
static_assert(offsetof(UMenuWorldSubsystem, CurrentTopMenuLevelName) == 0x0000B8, "Member 'UMenuWorldSubsystem::CurrentTopMenuLevelName' has a wrong offset!");

// Class UNION.BakeWaitingWidget
// 0x0008 (0x02E8 - 0x02E0)
class UBakeWaitingWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x8];                                      // 0x02E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BakeWaitingWidget">();
	}
	static class UBakeWaitingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBakeWaitingWidget>();
	}
};
static_assert(alignof(UBakeWaitingWidget) == 0x000008, "Wrong alignment on UBakeWaitingWidget");
static_assert(sizeof(UBakeWaitingWidget) == 0x0002E8, "Wrong size on UBakeWaitingWidget");

// Class UNION.MonsterTruckAnimInstance
// 0x00D0 (0x1080 - 0x0FB0)
class UMonsterTruckAnimInstance : public UDriverAnimInstance
{
public:
	uint8                                         Pad_FB0[0x20];                                     // 0x0FB0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedRate;                                         // 0x0FD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringLR;                                        // 0x0FD4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyG;                                             // 0x0FD8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyGd;                                            // 0x0FDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyGr;                                            // 0x0FE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInAir;                                           // 0x0FE4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInDrift;                                         // 0x0FE5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableWheelPosUpdate;                            // 0x0FE6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableWheelRotUpdate;                            // 0x0FE7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  HitMonsterTruckTire;                               // 0x0FE8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        WheelPos;                                          // 0x0FF8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       WheelRot;                                          // 0x1008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1018[0x48];                                    // 0x1018(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class AMonsterTruckInRaceActor*               Owner;                                             // 0x1060(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRacerStatusObject*                UnionRacerStatusObject;                            // 0x1068(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMachineAnimDataAsset*                  MachineAnimDataAsset;                              // 0x1070(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1078[0x8];                                     // 0x1078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MontageJumpToSection(EMachineAnimationMontageAssetId AssetId, class FName SectionName);
	void MontagePlay(EMachineAnimationMontageAssetId AssetId, float PlayRate);
	void MontageStop(EMachineAnimationMontageAssetId AssetId, float InBlendOutTime);
	void SetAnimSyncChild(TScriptInterface<class IUnionRacerAnimSyncChild> Child);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MonsterTruckAnimInstance">();
	}
	static class UMonsterTruckAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMonsterTruckAnimInstance>();
	}
};
static_assert(alignof(UMonsterTruckAnimInstance) == 0x000010, "Wrong alignment on UMonsterTruckAnimInstance");
static_assert(sizeof(UMonsterTruckAnimInstance) == 0x001080, "Wrong size on UMonsterTruckAnimInstance");
static_assert(offsetof(UMonsterTruckAnimInstance, SpeedRate) == 0x000FD0, "Member 'UMonsterTruckAnimInstance::SpeedRate' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, SteeringLR) == 0x000FD4, "Member 'UMonsterTruckAnimInstance::SteeringLR' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, BodyG) == 0x000FD8, "Member 'UMonsterTruckAnimInstance::BodyG' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, BodyGd) == 0x000FDC, "Member 'UMonsterTruckAnimInstance::BodyGd' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, BodyGr) == 0x000FE0, "Member 'UMonsterTruckAnimInstance::BodyGr' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, IsInAir) == 0x000FE4, "Member 'UMonsterTruckAnimInstance::IsInAir' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, IsInDrift) == 0x000FE5, "Member 'UMonsterTruckAnimInstance::IsInDrift' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, IsEnableWheelPosUpdate) == 0x000FE6, "Member 'UMonsterTruckAnimInstance::IsEnableWheelPosUpdate' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, IsEnableWheelRotUpdate) == 0x000FE7, "Member 'UMonsterTruckAnimInstance::IsEnableWheelRotUpdate' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, HitMonsterTruckTire) == 0x000FE8, "Member 'UMonsterTruckAnimInstance::HitMonsterTruckTire' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, WheelPos) == 0x000FF8, "Member 'UMonsterTruckAnimInstance::WheelPos' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, WheelRot) == 0x001008, "Member 'UMonsterTruckAnimInstance::WheelRot' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, Owner) == 0x001060, "Member 'UMonsterTruckAnimInstance::Owner' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, UnionRacerStatusObject) == 0x001068, "Member 'UMonsterTruckAnimInstance::UnionRacerStatusObject' has a wrong offset!");
static_assert(offsetof(UMonsterTruckAnimInstance, MachineAnimDataAsset) == 0x001070, "Member 'UMonsterTruckAnimInstance::MachineAnimDataAsset' has a wrong offset!");

// Class UNION.MultiplePanelLoopScrollControl
// 0x0038 (0x0410 - 0x03D8)
class UMultiplePanelLoopScrollControl : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void()>              OnScrollFinishedEvent;                             // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         CenterElementIndex;                                // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUnionUISceneBase*>              ElementArr;                                        // 0x03F0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_400[0x8];                                      // 0x0400(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUILoopScrollBox*                  UnionLoopScrollBox;                                // 0x0408(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UObject* GetCenterElement();
	void OnFinishedScrollAnimation();
	void PlayScrollAnimation(bool bIsMoveRight, bool bInImmediateReflection);
	void SetControllableFlag(bool InControllable);
	void Setup(class UUnionUILoopScrollBox* InUnionUILoopScrollBox, class UWidgetAnimation* InScrollAnimation);
	void SetupCenterElement();

	bool GetControllableFlag() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiplePanelLoopScrollControl">();
	}
	static class UMultiplePanelLoopScrollControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiplePanelLoopScrollControl>();
	}
};
static_assert(alignof(UMultiplePanelLoopScrollControl) == 0x000008, "Wrong alignment on UMultiplePanelLoopScrollControl");
static_assert(sizeof(UMultiplePanelLoopScrollControl) == 0x000410, "Wrong size on UMultiplePanelLoopScrollControl");
static_assert(offsetof(UMultiplePanelLoopScrollControl, OnScrollFinishedEvent) == 0x0003D8, "Member 'UMultiplePanelLoopScrollControl::OnScrollFinishedEvent' has a wrong offset!");
static_assert(offsetof(UMultiplePanelLoopScrollControl, CenterElementIndex) == 0x0003E8, "Member 'UMultiplePanelLoopScrollControl::CenterElementIndex' has a wrong offset!");
static_assert(offsetof(UMultiplePanelLoopScrollControl, ElementArr) == 0x0003F0, "Member 'UMultiplePanelLoopScrollControl::ElementArr' has a wrong offset!");
static_assert(offsetof(UMultiplePanelLoopScrollControl, UnionLoopScrollBox) == 0x000408, "Member 'UMultiplePanelLoopScrollControl::UnionLoopScrollBox' has a wrong offset!");

// Class UNION.NetDataManageSubsystem
// 0x00E0 (0x0110 - 0x0030)
class UNetDataManageSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULobbyContextBase*                      CurrentPublicLobbyContext;                         // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULobbyContextBase*                      CurrentPrivateLobbyContext;                        // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UConsecutiveRaceDataContext*            ConsecutiveRaceDataContext;                        // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULobbyJoinInfo*                         AcceptLobbyInviteInfo;                             // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLobbyId                               SearchLobbyId;                                     // 0x0058(0x0010)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x48];                                      // 0x0068(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UFont*                                  FontObject;                                        // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x28];                                      // 0x00B8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UDebugSquadAutoPlay*                    SquadAutoPlay;                                     // 0x00E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x28];                                      // 0x00E8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckVaildLobbyInviteInfo(class ULobbyContextBase* LobbyContext, ELobbyType TargetLobbyType);
	class UConsecutiveRaceDataContext* CreateConsecutiveRaceDataContext(TSubclassOf<class UConsecutiveRaceDataContext> RaceDataContextClass);
	class ULobbyContextBase* CreatePrivateLobbyContext(TSubclassOf<class ULobbyContextBase> LobbyContextClass);
	class ULobbyContextBase* CreatePublicLobbyContext(TSubclassOf<class ULobbyContextBase> LobbyContextClass);
	class ULobbyContextBase* CreatePublicLobbyContextByMatchmakingResult(TSubclassOf<class ULobbyContextBase> LobbyContextClass, int32 LocalUserNum, const struct FCreateOrConnectLobbyResult& MatchmakingResult);
	void DeleteConsecutiveRaceDataContext();
	void FinalizeWirelessMode(const TDelegate<void(class UWirelessLobbyContext* WirelessLobbyContext, const struct FOnlineErrorBP& Error)>& OnComplete);
	class ULobbyContextBase* GetCurrentJoinedLobbyForMatchmaking(TSubclassOf<class ULobbyContextBase> LobbyContextClass, bool* bIsPublicLobby);
	void GetSearchLobbyId(struct FLobbyId* OutLobbyId);
	void OnSendDebugChangeFairPlayPoint(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnSendDebugChangeRankMatchRate(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void QuitPrivateLobby(const struct FLatentActionInfo& LatentInfo);
	void QuitPublicLobby(const struct FLatentActionInfo& LatentInfo);
	void SendDebugChangeFairPlayPoint(int32 NewPoint);
	void SetAcceptLobbyInviteInfo(class ULobbyJoinInfo* InAcceptLobbyInviteInfo);
	void SetPrivateLobbyContext(class ULobbyContextBase* LobbyContext);
	void SetPublicLobbyContext(class ULobbyContextBase* LobbyContext);
	void SetSearchLobbyId(const struct FLobbyId& InLobbyId);

	class ULobbyJoinInfo* GetAcceptLobbyInviteInfo() const;
	class UConsecutiveRaceDataContext* GetConsecutiveRaceDataContext() const;
	class ULobbyContextBase* GetPrivateLobbyContext() const;
	class ULobbyContextBase* GetPrivateLobbyContextByClass(TSubclassOf<class ULobbyContextBase> LobbyContextClass) const;
	class ULobbyContextBase* GetPublicLobbyContext() const;
	class ULobbyContextBase* GetPublicLobbyContextByClass(TSubclassOf<class ULobbyContextBase> LobbyContextClass) const;
	bool IsJoiningPrivateLobby(TSubclassOf<class ULobbyContextBase> LobbyContextClass) const;
	bool IsJoiningPublicLobby(TSubclassOf<class ULobbyContextBase> LobbyContextClass) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetDataManageSubsystem">();
	}
	static class UNetDataManageSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetDataManageSubsystem>();
	}
};
static_assert(alignof(UNetDataManageSubsystem) == 0x000008, "Wrong alignment on UNetDataManageSubsystem");
static_assert(sizeof(UNetDataManageSubsystem) == 0x000110, "Wrong size on UNetDataManageSubsystem");
static_assert(offsetof(UNetDataManageSubsystem, CurrentPublicLobbyContext) == 0x000038, "Member 'UNetDataManageSubsystem::CurrentPublicLobbyContext' has a wrong offset!");
static_assert(offsetof(UNetDataManageSubsystem, CurrentPrivateLobbyContext) == 0x000040, "Member 'UNetDataManageSubsystem::CurrentPrivateLobbyContext' has a wrong offset!");
static_assert(offsetof(UNetDataManageSubsystem, ConsecutiveRaceDataContext) == 0x000048, "Member 'UNetDataManageSubsystem::ConsecutiveRaceDataContext' has a wrong offset!");
static_assert(offsetof(UNetDataManageSubsystem, AcceptLobbyInviteInfo) == 0x000050, "Member 'UNetDataManageSubsystem::AcceptLobbyInviteInfo' has a wrong offset!");
static_assert(offsetof(UNetDataManageSubsystem, SearchLobbyId) == 0x000058, "Member 'UNetDataManageSubsystem::SearchLobbyId' has a wrong offset!");
static_assert(offsetof(UNetDataManageSubsystem, FontObject) == 0x0000B0, "Member 'UNetDataManageSubsystem::FontObject' has a wrong offset!");
static_assert(offsetof(UNetDataManageSubsystem, SquadAutoPlay) == 0x0000E0, "Member 'UNetDataManageSubsystem::SquadAutoPlay' has a wrong offset!");

// Class UNION.NoticeMasterDataHelper
// 0x0000 (0x0028 - 0x0028)
class UNoticeMasterDataHelper final : public UBlueprintFunctionLibrary
{
public:
	static bool CheckDLCNotice(class UNetMasterDataManageSubsystem* Subsystem);
	static bool CheckFestaNotice(class UNetMasterDataManageSubsystem* Subsystem);
	static bool CheckFreeContentNotice(class UNetMasterDataManageSubsystem* Subsystem);
	static bool CheckRaceDisableGadgetNotice(class UNetMasterDataManageSubsystem* Subsystem);
	static bool GetActiveDLCNoticeInfo(class UNetMasterDataManageSubsystem* Subsystem, class FString* noticeId, struct FDateTime* DLCReleaseTime);
	static bool GetActiveFreeContentNoticeInfo(class UNetMasterDataManageSubsystem* Subsystem, class FString* noticeId, struct FDateTime* releaseTime, struct FDateTime* LaunchNoticeTime);
	static void GetFreeContentsReward(class UNetMasterDataManageSubsystem* Subsystem, TArray<struct FRewardGetWindowParam>* RewardArray);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NoticeMasterDataHelper">();
	}
	static class UNoticeMasterDataHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoticeMasterDataHelper>();
	}
};
static_assert(alignof(UNoticeMasterDataHelper) == 0x000008, "Wrong alignment on UNoticeMasterDataHelper");
static_assert(sizeof(UNoticeMasterDataHelper) == 0x000028, "Wrong size on UNoticeMasterDataHelper");

// Class UNION.SimpleNPCStaticActor
// 0x07C0 (0x0AE0 - 0x0320)
class ASimpleNPCStaticActor : public AVehicleBaseActor
{
public:
	class UUnionStaticMeshComponent*              StaticMeshComponent;                               // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             SimpleNpcDataTable;                                // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineMaterialParameterDataAsset*     HoverboardMaterialParameters;                      // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpinning;                                       // 0x0338(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DummyMaterialInterface;                            // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_348[0xE0];                                     // 0x0348(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMachineMaterialData>           CockpitMaterials;                                  // 0x0428(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   FrontMachineMaterial;                              // 0x0438(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   CenterMachineMaterial;                             // 0x04E0(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   RearMachineMaterial;                               // 0x0588(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   FrontTireMaterial;                                 // 0x0630(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   RearTireMaterial;                                  // 0x06D8(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   FrontAquaUnitMaterial;                             // 0x0780(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   RearAquaUnitMaterial;                              // 0x0828(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   FrontFlightUnitMaterial;                           // 0x08D0(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   RearFlightUnitMaterial;                            // 0x0978(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   HoverboardMaterial;                                // 0x0A20(0x00A8)(Edit, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FMachineMaterialData>           DriverMaterials;                                   // 0x0AC8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AD8[0x8];                                      // 0x0AD8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DamageSpinStart(float Direction);
	void SetBodyColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetBodyGlowColor(int32 GlowNo);
	void SetBodySurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetCockpitColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetCockpitSurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetCustomColor(const struct FUserMachineCustomizeData& MachineCustomizeData);
	void SetTireColor(EMachineColorArea ColorArea, int32 ColorNo);
	void SetTireGlowColor(int32 GlowNo);
	void SetTireSurface(EMachineColorArea ColorArea, int32 SurfaceNo);
	void SetupEffectData(const EMachineId InMachineID);
	void SetupEngineSound(const EMachineId InMachineID);
	void UpdateDamageSpinRotation(float SpinRate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleNPCStaticActor">();
	}
	static class ASimpleNPCStaticActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASimpleNPCStaticActor>();
	}
};
static_assert(alignof(ASimpleNPCStaticActor) == 0x000008, "Wrong alignment on ASimpleNPCStaticActor");
static_assert(sizeof(ASimpleNPCStaticActor) == 0x000AE0, "Wrong size on ASimpleNPCStaticActor");
static_assert(offsetof(ASimpleNPCStaticActor, StaticMeshComponent) == 0x000320, "Member 'ASimpleNPCStaticActor::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, SimpleNpcDataTable) == 0x000328, "Member 'ASimpleNPCStaticActor::SimpleNpcDataTable' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, HoverboardMaterialParameters) == 0x000330, "Member 'ASimpleNPCStaticActor::HoverboardMaterialParameters' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, bIsSpinning) == 0x000338, "Member 'ASimpleNPCStaticActor::bIsSpinning' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, DummyMaterialInterface) == 0x000340, "Member 'ASimpleNPCStaticActor::DummyMaterialInterface' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, CockpitMaterials) == 0x000428, "Member 'ASimpleNPCStaticActor::CockpitMaterials' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, FrontMachineMaterial) == 0x000438, "Member 'ASimpleNPCStaticActor::FrontMachineMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, CenterMachineMaterial) == 0x0004E0, "Member 'ASimpleNPCStaticActor::CenterMachineMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, RearMachineMaterial) == 0x000588, "Member 'ASimpleNPCStaticActor::RearMachineMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, FrontTireMaterial) == 0x000630, "Member 'ASimpleNPCStaticActor::FrontTireMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, RearTireMaterial) == 0x0006D8, "Member 'ASimpleNPCStaticActor::RearTireMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, FrontAquaUnitMaterial) == 0x000780, "Member 'ASimpleNPCStaticActor::FrontAquaUnitMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, RearAquaUnitMaterial) == 0x000828, "Member 'ASimpleNPCStaticActor::RearAquaUnitMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, FrontFlightUnitMaterial) == 0x0008D0, "Member 'ASimpleNPCStaticActor::FrontFlightUnitMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, RearFlightUnitMaterial) == 0x000978, "Member 'ASimpleNPCStaticActor::RearFlightUnitMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, HoverboardMaterial) == 0x000A20, "Member 'ASimpleNPCStaticActor::HoverboardMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleNPCStaticActor, DriverMaterials) == 0x000AC8, "Member 'ASimpleNPCStaticActor::DriverMaterials' has a wrong offset!");

// Class UNION.NoticeWidget
// 0x0000 (0x02E0 - 0x02E0)
class UNoticeWidget : public UUserWidget
{
public:
	void SetupChallengeClearNotice(class UWrapBox* Owner, const int32 InChallengeIndex, const float InTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NoticeWidget">();
	}
	static class UNoticeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoticeWidget>();
	}
};
static_assert(alignof(UNoticeWidget) == 0x000008, "Wrong alignment on UNoticeWidget");
static_assert(sizeof(UNoticeWidget) == 0x0002E0, "Wrong size on UNoticeWidget");

// Class UNION.ObjectAccessor
// 0x0018 (0x0040 - 0x0028)
class UObjectAccessor final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectAccessor">();
	}
	static class UObjectAccessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectAccessor>();
	}
};
static_assert(alignof(UObjectAccessor) == 0x000008, "Wrong alignment on UObjectAccessor");
static_assert(sizeof(UObjectAccessor) == 0x000040, "Wrong size on UObjectAccessor");

// Class UNION.OnlineBlockWindow
// 0x0130 (0x0508 - 0x03D8)
class UOnlineBlockWindow : public UUnionUISceneBase
{
public:
	class FString                                 TargetProductId;                                   // 0x03D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetPlatformId;                                  // 0x03E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBlockUser;                                      // 0x03F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F9[0x3];                                      // 0x03F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectBlockWindowType;                             // 0x03FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            BlockUserPopup;                                    // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUnionUIButtonBase*>             PlayerDetailSubWindowButtons;                      // 0x0408(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UCommonMessageBar*                      MessageBarSceneObject;                             // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_420[0x10];                                     // 0x0420(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EPlayerInfoSubWindowBtnType SubWindowType, bool bIsError)> OnPlayerInfoDecidePopupWindow; // 0x0430(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_440[0x10];                                     // 0x0440(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsShowingPopUpWindow;                             // 0x0450(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShowingPFProfile;                               // 0x0451(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShowBlockWindow;                                // 0x0452(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_453[0x5];                                      // 0x0453(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ButtonsText;                                       // 0x0458(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FText>                           KickTexts;                                         // 0x0468(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FText>                           FriendRequesrTexts;                                // 0x0478(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FText>                           BlockTexts;                                        // 0x0488(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<EPlayerInfoSubWindowErrorType, class FText> ErrorWindowTextMap;                             // 0x0498(0x0050)(Edit, NativeAccessSpecifierPrivate)
	class USoundAtomCue*                          DecideSadQue;                                      // 0x04E8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TargetPlatform;                                    // 0x04F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_500[0x8];                                      // 0x0500(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateCheckPopUpWindowDialog();
	void CreatePopUpErrorWindow(EPlayerInfoSubWindowErrorType InErrorType);
	void CreatePopUpWindowDialog();
	void DecidePFProfileDisplay(class UUnionUIButtonBase* Button);
	void OnAcceptBlockWindow(EBlockPlayerErrorCode ErrorCode, const class FString& ProductUserId);
	void OnAcceptFriendRequestWindow(bool bWasSuccessful, int32 ErrorCode);
	void OnAcceptKickRequestWindow(bool bWasSuccessful, int32 ErrorCode);
	void OnChangeBlockWindowBtnPutType(EPlayerInfoSubWindowBtnType InBtnType, bool bIsEnablePut);
	void OnComeBackPFProfileDelegateEvent();
	void OnDecideBlockPopup(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnDecideCheckPopup(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnDecideResultPopUpEvent(EPlayerInfoSubWindowBtnType InBtnType, bool bInIsError);
	void OnForceEnd();
	void OnShowPfProfileErrorWindowEnd();
	void OnUserSearchComplete(bool bWasSuccessful, const TArray<struct FCommon_UserSearchData>& SearchDatas, EResponseCodeAbstract ResCodeAbstract);
	void OnUserSearchPlatformComplete(bool bWasSuccessful, const TArray<struct FCommon_UserSearchData>& SearchDatas, EResponseCodeAbstract ResCodeAbstract);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineBlockWindow">();
	}
	static class UOnlineBlockWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineBlockWindow>();
	}
};
static_assert(alignof(UOnlineBlockWindow) == 0x000008, "Wrong alignment on UOnlineBlockWindow");
static_assert(sizeof(UOnlineBlockWindow) == 0x000508, "Wrong size on UOnlineBlockWindow");
static_assert(offsetof(UOnlineBlockWindow, TargetProductId) == 0x0003D8, "Member 'UOnlineBlockWindow::TargetProductId' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, TargetPlatformId) == 0x0003E8, "Member 'UOnlineBlockWindow::TargetPlatformId' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, bIsBlockUser) == 0x0003F8, "Member 'UOnlineBlockWindow::bIsBlockUser' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, SelectBlockWindowType) == 0x0003FC, "Member 'UOnlineBlockWindow::SelectBlockWindowType' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, BlockUserPopup) == 0x000400, "Member 'UOnlineBlockWindow::BlockUserPopup' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, PlayerDetailSubWindowButtons) == 0x000408, "Member 'UOnlineBlockWindow::PlayerDetailSubWindowButtons' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, MessageBarSceneObject) == 0x000418, "Member 'UOnlineBlockWindow::MessageBarSceneObject' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, OnPlayerInfoDecidePopupWindow) == 0x000430, "Member 'UOnlineBlockWindow::OnPlayerInfoDecidePopupWindow' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, bIsShowingPopUpWindow) == 0x000450, "Member 'UOnlineBlockWindow::bIsShowingPopUpWindow' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, bIsShowingPFProfile) == 0x000451, "Member 'UOnlineBlockWindow::bIsShowingPFProfile' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, bIsShowBlockWindow) == 0x000452, "Member 'UOnlineBlockWindow::bIsShowBlockWindow' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, ButtonsText) == 0x000458, "Member 'UOnlineBlockWindow::ButtonsText' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, KickTexts) == 0x000468, "Member 'UOnlineBlockWindow::KickTexts' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, FriendRequesrTexts) == 0x000478, "Member 'UOnlineBlockWindow::FriendRequesrTexts' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, BlockTexts) == 0x000488, "Member 'UOnlineBlockWindow::BlockTexts' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, ErrorWindowTextMap) == 0x000498, "Member 'UOnlineBlockWindow::ErrorWindowTextMap' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, DecideSadQue) == 0x0004E8, "Member 'UOnlineBlockWindow::DecideSadQue' has a wrong offset!");
static_assert(offsetof(UOnlineBlockWindow, TargetPlatform) == 0x0004F0, "Member 'UOnlineBlockWindow::TargetPlatform' has a wrong offset!");

// Class UNION.OnlineGameModeButton
// 0x0028 (0x04F0 - 0x04C8)
class UOnlineGameModeButton final : public UCommonMenuButtonBase
{
public:
	EOnlineGameMode                               OnlineGameMode;                                    // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackFlag;                                         // 0x04C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CA[0x26];                                     // 0x04CA(0x0026)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineGameModeButton">();
	}
	static class UOnlineGameModeButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineGameModeButton>();
	}
};
static_assert(alignof(UOnlineGameModeButton) == 0x000008, "Wrong alignment on UOnlineGameModeButton");
static_assert(sizeof(UOnlineGameModeButton) == 0x0004F0, "Wrong size on UOnlineGameModeButton");
static_assert(offsetof(UOnlineGameModeButton, OnlineGameMode) == 0x0004C8, "Member 'UOnlineGameModeButton::OnlineGameMode' has a wrong offset!");
static_assert(offsetof(UOnlineGameModeButton, bBackFlag) == 0x0004C9, "Member 'UOnlineGameModeButton::bBackFlag' has a wrong offset!");

// Class UNION.OnlineMenuEOSCertification
// 0x0000 (0x0128 - 0x0128)
class UOnlineMenuEOSCertification final : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineMenuEOSCertification">();
	}
	static class UOnlineMenuEOSCertification* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineMenuEOSCertification>();
	}
};
static_assert(alignof(UOnlineMenuEOSCertification) == 0x000008, "Wrong alignment on UOnlineMenuEOSCertification");
static_assert(sizeof(UOnlineMenuEOSCertification) == 0x000128, "Wrong size on UOnlineMenuEOSCertification");

// Class UNION.OnlinePlayerDetailBase
// 0x0100 (0x0580 - 0x0480)
class UOnlinePlayerDetailBase : public UUnionUIButtonBase
{
public:
	bool                                          bIsSendNice;                                       // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBlock;                                          // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMoveLock;                                       // 0x0482(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOwnerProfile;                                   // 0x0483(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsNPCProfile;                                     // 0x0484(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_485[0x3];                                      // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProductId;                                         // 0x0488(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_498[0x20];                                     // 0x0498(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	EMatchingLobbyType                            LobbyType;                                         // 0x04B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOwnerHost;                                      // 0x04B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4BA[0x6];                                      // 0x04BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UOnlineBlockWindow*                     BlockWindow;                                       // 0x04C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAloneProfile;                                   // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerDetail*                          CMN_PlayerDetailScene;                             // 0x04D0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               LeftArrow;                                         // 0x04D8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               RightArrow;                                        // 0x04E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOverRomVer10100;                                // 0x04E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnPressedBack;                                     // 0x04F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPressedNice;                                     // 0x0500(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOutAnimEnd;                                      // 0x0510(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bIsLeftInput)> OnPressedNextPlayer;                           // 0x0520(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_530[0x50];                                     // 0x0530(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DecideCheckPopupEvent(EPlayerInfoSubWindowBtnType SubWindowType, bool bIsError);
	void DecideSubWindowEvent(EPlayerInfoSubWindowBtnType SubWindowType, bool bIsError);
	void OnInitialize();
	void OnPlayDetailInAnimEvent();
	void OnPlayDetailOutAnimEvent();
	void OnPlayerProfileFocusEndEvent();
	void OnUpdateNiceCount(int32 InNiceCount);
	void SetPlayerDetailData(const struct FLobbyPlayerData& InPlayerData, EBlockPlayerState InBlockType, bool bInIsOwn, bool bInIsSendNice, bool bInIsNPC, int32 InNiceCount, const class FString& InProductUserId, bool bInIsOwnHost, EMatchingLobbyType InLobbyType, const class FString& InPlatformId, const class FString& InPlatform, bool bInIsEnableBlockWindowButton);
	void SetVisibleArrows(ESlateVisibility InVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlinePlayerDetailBase">();
	}
	static class UOnlinePlayerDetailBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlinePlayerDetailBase>();
	}
};
static_assert(alignof(UOnlinePlayerDetailBase) == 0x000008, "Wrong alignment on UOnlinePlayerDetailBase");
static_assert(sizeof(UOnlinePlayerDetailBase) == 0x000580, "Wrong size on UOnlinePlayerDetailBase");
static_assert(offsetof(UOnlinePlayerDetailBase, bIsSendNice) == 0x000480, "Member 'UOnlinePlayerDetailBase::bIsSendNice' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, bIsBlock) == 0x000481, "Member 'UOnlinePlayerDetailBase::bIsBlock' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, bIsMoveLock) == 0x000482, "Member 'UOnlinePlayerDetailBase::bIsMoveLock' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, bIsOwnerProfile) == 0x000483, "Member 'UOnlinePlayerDetailBase::bIsOwnerProfile' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, bIsNPCProfile) == 0x000484, "Member 'UOnlinePlayerDetailBase::bIsNPCProfile' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, ProductId) == 0x000488, "Member 'UOnlinePlayerDetailBase::ProductId' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, LobbyType) == 0x0004B8, "Member 'UOnlinePlayerDetailBase::LobbyType' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, bIsOwnerHost) == 0x0004B9, "Member 'UOnlinePlayerDetailBase::bIsOwnerHost' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, BlockWindow) == 0x0004C0, "Member 'UOnlinePlayerDetailBase::BlockWindow' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, bIsAloneProfile) == 0x0004C8, "Member 'UOnlinePlayerDetailBase::bIsAloneProfile' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, CMN_PlayerDetailScene) == 0x0004D0, "Member 'UOnlinePlayerDetailBase::CMN_PlayerDetailScene' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, LeftArrow) == 0x0004D8, "Member 'UOnlinePlayerDetailBase::LeftArrow' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, RightArrow) == 0x0004E0, "Member 'UOnlinePlayerDetailBase::RightArrow' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, bIsOverRomVer10100) == 0x0004E8, "Member 'UOnlinePlayerDetailBase::bIsOverRomVer10100' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, OnPressedBack) == 0x0004F0, "Member 'UOnlinePlayerDetailBase::OnPressedBack' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, OnPressedNice) == 0x000500, "Member 'UOnlinePlayerDetailBase::OnPressedNice' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, OnOutAnimEnd) == 0x000510, "Member 'UOnlinePlayerDetailBase::OnOutAnimEnd' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerDetailBase, OnPressedNextPlayer) == 0x000520, "Member 'UOnlinePlayerDetailBase::OnPressedNextPlayer' has a wrong offset!");

// Class UNION.OnlinePlayerNameButton
// 0x0028 (0x04F0 - 0x04C8)
class UOnlinePlayerNameButton : public UCommonMenuButtonBase
{
public:
	struct FPlayerNameContext                     Context;                                           // 0x04C8(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          SkipSelectSEOnlyOnce;                              // 0x04E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeActiveWidget(int32 InActiveWidgetIndex);
	bool IsOwner();
	void SetBlockState(EBlockPlayerState InBlockType);
	void SetContext(const struct FPlayerNameContext& InContext);
	void SetIsRival(bool bIsRival);
	void SetNiceCount(const int32 InNiceCount);
	void SetPlatformIcon(const int32& InPlatformId);
	void SetRank(const int32& InRankIndex);
	void SetSkipSelectSEOnlyOnce(bool Enabled);
	void SetViewportPosition(const struct FVector& TargetWorldLocation, const struct FVector2D& Offset, const struct FVector2D& InCanvasSize);
	void SetVisibilityOwnerIcon(ESlateVisibility InVisibility);
	void SetVisibilityPlatformIcon(ESlateVisibility InVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlinePlayerNameButton">();
	}
	static class UOnlinePlayerNameButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlinePlayerNameButton>();
	}
};
static_assert(alignof(UOnlinePlayerNameButton) == 0x000008, "Wrong alignment on UOnlinePlayerNameButton");
static_assert(sizeof(UOnlinePlayerNameButton) == 0x0004F0, "Wrong size on UOnlinePlayerNameButton");
static_assert(offsetof(UOnlinePlayerNameButton, Context) == 0x0004C8, "Member 'UOnlinePlayerNameButton::Context' has a wrong offset!");
static_assert(offsetof(UOnlinePlayerNameButton, SkipSelectSEOnlyOnce) == 0x0004E8, "Member 'UOnlinePlayerNameButton::SkipSelectSEOnlyOnce' has a wrong offset!");

// Class UNION.OnlineReadySceneBase
// 0x0098 (0x0490 - 0x03F8)
class UOnlineReadySceneBase final : public ULobbySceneBase
{
public:
	TMulticastInlineDelegate<void()>              OnDecideReadyEvent;                                // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UObject* Button)> OnDecideSquadReadyEvent;                   // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UCommonMenuSubMenu*                     SubMenu;                                           // 0x0418(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOverlay*                               BaseOverLay;                                       // 0x0420(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Arrow;                                             // 0x0428(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButtonStandard*                 ReadyButton;                                       // 0x0430(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            ReadyMainTextWidget;                               // 0x0438(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            ReadySubTextWidget;                                // 0x0440(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            ReadySubIconWidget;                                // 0x0448(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            ReadySubInfoReady;                                 // 0x0450(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    ReadyMainText;                                     // 0x0458(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   MatchingReadyText;                                 // 0x0460(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   GotoMatchingLobbyText;                             // 0x0470(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        ReadyUIBaseSwitch;                                 // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          FixQue;                                            // 0x0488(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ChangeStateReady();
	void ChangeStateWaitingOtherPlayer();
	void InitializeGameMode(const bool FocusMainButton, bool InitSubMenu);
	void PlayDecideAnim();
	void PlayInReadyAnim();
	void PlayLoopReadyDecideAnim(bool bIsDecide);
	void ReadyCancel();
	void SetGotoMatchingLobby();
	void SetMainText(const class FText& InMainText);
	void SetSelectReadyButton(bool bIsSelect);
	void SetUpDecideReady(bool bIsAloneLobby);
	void SetupGameMode();
	void SetVisibleReadys(ESlateVisibility InVisibility);
	void SetVisibleReadyTexts(ESlateVisibility InVisibility);
	void SetVisibleSearching(ESlateVisibility InVisibility);
	void SetVisibleSubButtons(ESlateVisibility InVisibility);
	void StartSearch();
	void SwitchReadyButtonInteractable(bool bInteractable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineReadySceneBase">();
	}
	static class UOnlineReadySceneBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineReadySceneBase>();
	}
};
static_assert(alignof(UOnlineReadySceneBase) == 0x000008, "Wrong alignment on UOnlineReadySceneBase");
static_assert(sizeof(UOnlineReadySceneBase) == 0x000490, "Wrong size on UOnlineReadySceneBase");
static_assert(offsetof(UOnlineReadySceneBase, OnDecideReadyEvent) == 0x0003F8, "Member 'UOnlineReadySceneBase::OnDecideReadyEvent' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, OnDecideSquadReadyEvent) == 0x000408, "Member 'UOnlineReadySceneBase::OnDecideSquadReadyEvent' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, SubMenu) == 0x000418, "Member 'UOnlineReadySceneBase::SubMenu' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, BaseOverLay) == 0x000420, "Member 'UOnlineReadySceneBase::BaseOverLay' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, Arrow) == 0x000428, "Member 'UOnlineReadySceneBase::Arrow' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, ReadyButton) == 0x000430, "Member 'UOnlineReadySceneBase::ReadyButton' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, ReadyMainTextWidget) == 0x000438, "Member 'UOnlineReadySceneBase::ReadyMainTextWidget' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, ReadySubTextWidget) == 0x000440, "Member 'UOnlineReadySceneBase::ReadySubTextWidget' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, ReadySubIconWidget) == 0x000448, "Member 'UOnlineReadySceneBase::ReadySubIconWidget' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, ReadySubInfoReady) == 0x000450, "Member 'UOnlineReadySceneBase::ReadySubInfoReady' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, ReadyMainText) == 0x000458, "Member 'UOnlineReadySceneBase::ReadyMainText' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, MatchingReadyText) == 0x000460, "Member 'UOnlineReadySceneBase::MatchingReadyText' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, GotoMatchingLobbyText) == 0x000470, "Member 'UOnlineReadySceneBase::GotoMatchingLobbyText' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, ReadyUIBaseSwitch) == 0x000480, "Member 'UOnlineReadySceneBase::ReadyUIBaseSwitch' has a wrong offset!");
static_assert(offsetof(UOnlineReadySceneBase, FixQue) == 0x000488, "Member 'UOnlineReadySceneBase::FixQue' has a wrong offset!");

// Class UNION.OnlineScene
// 0x0078 (0x0470 - 0x03F8)
class UOnlineScene final : public ULobbySceneBase
{
public:
	TArray<class UOnlineGameModeButton*>          GameModeButtonArr;                                 // 0x03F8(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UCommonMenuSubMenu*                     SubMenu;                                           // 0x0408(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UUnionUIButtonBase* Button)> OnDecideGameModeEvent;          // 0x0410(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UObject* Button)> OnDecideSquadGameModeEvent;                // 0x0420(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_430[0x18];                                     // 0x0430(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	EOnlineSequenceState                          MainState;                                         // 0x0448(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIButtonsPanel*                   GameModeButtonsPanel;                              // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_458[0x18];                                     // 0x0458(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeGameMode(const TArray<EOnlineGameMode>& BeltButtonTypeArr, const bool FocusMainButton);
	void InitializeOnline();
	bool IstNotOpenTipsWindow();
	void ResetBackFlagEvent();
	void SetNotOpenTipsWindow(bool InEnable);
	void SetupGameMode();
	void SetupOnline();
	void SetVisibleModeButtons(ESlateVisibility InVisibility);
	void SetVisibleSubButtons(ESlateVisibility InVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineScene">();
	}
	static class UOnlineScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineScene>();
	}
};
static_assert(alignof(UOnlineScene) == 0x000008, "Wrong alignment on UOnlineScene");
static_assert(sizeof(UOnlineScene) == 0x000470, "Wrong size on UOnlineScene");
static_assert(offsetof(UOnlineScene, GameModeButtonArr) == 0x0003F8, "Member 'UOnlineScene::GameModeButtonArr' has a wrong offset!");
static_assert(offsetof(UOnlineScene, SubMenu) == 0x000408, "Member 'UOnlineScene::SubMenu' has a wrong offset!");
static_assert(offsetof(UOnlineScene, OnDecideGameModeEvent) == 0x000410, "Member 'UOnlineScene::OnDecideGameModeEvent' has a wrong offset!");
static_assert(offsetof(UOnlineScene, OnDecideSquadGameModeEvent) == 0x000420, "Member 'UOnlineScene::OnDecideSquadGameModeEvent' has a wrong offset!");
static_assert(offsetof(UOnlineScene, MainState) == 0x000448, "Member 'UOnlineScene::MainState' has a wrong offset!");
static_assert(offsetof(UOnlineScene, GameModeButtonsPanel) == 0x000450, "Member 'UOnlineScene::GameModeButtonsPanel' has a wrong offset!");

// Class UNION.OnlineSequence
// 0x00E0 (0x0448 - 0x0368)
class AOnlineSequence : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackToTitleEvent;                                // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EMatchingLobbyType NextLobbyType)> OnSquadLobbyFinishedEvent;      // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOnlineLobbyBackedEvent;                          // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOnlineLobbyFinishedEvent;                        // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UMenuSequenceSubStateBase*              OnlineLobbyComponent;                              // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMatchingSequenceStateMatching*         SquadMatchingComponent;                            // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyHolderBase*                       SquadMatchingComponent2;                           // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMenuSequence*                          MenuSequence;                                      // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EOnlineSequenceState                          PrevSequenceState;                                 // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMatchingLobbyType                            CurrentLobbyType;                                  // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E2[0x6];                                      // 0x03E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ErrorPFTitle;                                      // 0x03E8(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   ErrorPFMessage;                                    // 0x03F8(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_408[0x38];                                     // 0x0408(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIPopupWindowBase*                PFInvitationErrorPopup;                            // 0x0440(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool CheckRaceCycleFlag();
	EMatchingLobbyType GetCurrentLobbyType();
	EOnlineSequenceState GetCurrentOnlineState();
	EGameModeId GetRaceCycleGameModeId();
	void OnBackSequenceEvent();
	void OnBackToTitleSequenceEvent();
	void OnClosePFInvitationErrorPopup(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnInitStateCheckPFInvitation();
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnInitStateLogin();
	void OnInitStateOnlineTop();
	void OnOnlineLobbyBacked();
	void OnOnlineLobbyFinished();
	void OnPFInvitationJoinCallback(bool IsSuccess);
	void OnSetNextOnlineLobby(EMatchingLobbyType InNextLobbyType);
	void SetNextOnlineSequenceState(EOnlineSequenceState InState, EOnlineSequenceState PrevState);
	void SetNextRaceCycle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineSequence">();
	}
	static class AOnlineSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AOnlineSequence>();
	}
};
static_assert(alignof(AOnlineSequence) == 0x000008, "Wrong alignment on AOnlineSequence");
static_assert(sizeof(AOnlineSequence) == 0x000448, "Wrong size on AOnlineSequence");
static_assert(offsetof(AOnlineSequence, OnBackEvent) == 0x000370, "Member 'AOnlineSequence::OnBackEvent' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, OnBackToTitleEvent) == 0x000380, "Member 'AOnlineSequence::OnBackToTitleEvent' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, OnSquadLobbyFinishedEvent) == 0x000390, "Member 'AOnlineSequence::OnSquadLobbyFinishedEvent' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, OnOnlineLobbyBackedEvent) == 0x0003A0, "Member 'AOnlineSequence::OnOnlineLobbyBackedEvent' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, OnOnlineLobbyFinishedEvent) == 0x0003B0, "Member 'AOnlineSequence::OnOnlineLobbyFinishedEvent' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, OnlineLobbyComponent) == 0x0003C0, "Member 'AOnlineSequence::OnlineLobbyComponent' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, SquadMatchingComponent) == 0x0003C8, "Member 'AOnlineSequence::SquadMatchingComponent' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, SquadMatchingComponent2) == 0x0003D0, "Member 'AOnlineSequence::SquadMatchingComponent2' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, MenuSequence) == 0x0003D8, "Member 'AOnlineSequence::MenuSequence' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, PrevSequenceState) == 0x0003E0, "Member 'AOnlineSequence::PrevSequenceState' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, CurrentLobbyType) == 0x0003E1, "Member 'AOnlineSequence::CurrentLobbyType' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, ErrorPFTitle) == 0x0003E8, "Member 'AOnlineSequence::ErrorPFTitle' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, ErrorPFMessage) == 0x0003F8, "Member 'AOnlineSequence::ErrorPFMessage' has a wrong offset!");
static_assert(offsetof(AOnlineSequence, PFInvitationErrorPopup) == 0x000440, "Member 'AOnlineSequence::PFInvitationErrorPopup' has a wrong offset!");

// Class UNION.OnlineSettingPlayerIconSelectWidget
// 0x0098 (0x0470 - 0x03D8)
class UOnlineSettingPlayerIconSelectWidget : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(int32 OutId, bool bOutPlayerIconSelect)> DisplayEndDelegate;       // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FLinearColor                           PlayerIconSelectBgColor;                           // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconLineNum;                                       // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              PlayerIconDataTable;                               // 0x0400(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              PlayerIconBgColorDataTable;                        // 0x0428(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             LoadPlayerIconDataTable;                           // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             LoadPlayerIconBgColorDataTable;                    // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlayerIconSelect;                                 // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitialSelectIndex;                                // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelectIndex;                                       // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ListIconNum;                                       // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void EndDisplay();
	class UUnionUIButtonsPanel* GetButtonsPanel();
	bool GetPlayerIconSelect();
	void Setup(int32 InIconId, int32 InBgColorId, bool bInIconSelect);
	void StartDisplay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineSettingPlayerIconSelectWidget">();
	}
	static class UOnlineSettingPlayerIconSelectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineSettingPlayerIconSelectWidget>();
	}
};
static_assert(alignof(UOnlineSettingPlayerIconSelectWidget) == 0x000008, "Wrong alignment on UOnlineSettingPlayerIconSelectWidget");
static_assert(sizeof(UOnlineSettingPlayerIconSelectWidget) == 0x000470, "Wrong size on UOnlineSettingPlayerIconSelectWidget");
static_assert(offsetof(UOnlineSettingPlayerIconSelectWidget, DisplayEndDelegate) == 0x0003D8, "Member 'UOnlineSettingPlayerIconSelectWidget::DisplayEndDelegate' has a wrong offset!");
static_assert(offsetof(UOnlineSettingPlayerIconSelectWidget, PlayerIconSelectBgColor) == 0x0003E8, "Member 'UOnlineSettingPlayerIconSelectWidget::PlayerIconSelectBgColor' has a wrong offset!");
static_assert(offsetof(UOnlineSettingPlayerIconSelectWidget, IconLineNum) == 0x0003F8, "Member 'UOnlineSettingPlayerIconSelectWidget::IconLineNum' has a wrong offset!");
static_assert(offsetof(UOnlineSettingPlayerIconSelectWidget, PlayerIconDataTable) == 0x000400, "Member 'UOnlineSettingPlayerIconSelectWidget::PlayerIconDataTable' has a wrong offset!");
static_assert(offsetof(UOnlineSettingPlayerIconSelectWidget, PlayerIconBgColorDataTable) == 0x000428, "Member 'UOnlineSettingPlayerIconSelectWidget::PlayerIconBgColorDataTable' has a wrong offset!");
static_assert(offsetof(UOnlineSettingPlayerIconSelectWidget, LoadPlayerIconDataTable) == 0x000450, "Member 'UOnlineSettingPlayerIconSelectWidget::LoadPlayerIconDataTable' has a wrong offset!");
static_assert(offsetof(UOnlineSettingPlayerIconSelectWidget, LoadPlayerIconBgColorDataTable) == 0x000458, "Member 'UOnlineSettingPlayerIconSelectWidget::LoadPlayerIconBgColorDataTable' has a wrong offset!");
static_assert(offsetof(UOnlineSettingPlayerIconSelectWidget, bPlayerIconSelect) == 0x000460, "Member 'UOnlineSettingPlayerIconSelectWidget::bPlayerIconSelect' has a wrong offset!");
static_assert(offsetof(UOnlineSettingPlayerIconSelectWidget, InitialSelectIndex) == 0x000464, "Member 'UOnlineSettingPlayerIconSelectWidget::InitialSelectIndex' has a wrong offset!");
static_assert(offsetof(UOnlineSettingPlayerIconSelectWidget, SelectIndex) == 0x000468, "Member 'UOnlineSettingPlayerIconSelectWidget::SelectIndex' has a wrong offset!");
static_assert(offsetof(UOnlineSettingPlayerIconSelectWidget, ListIconNum) == 0x00046C, "Member 'UOnlineSettingPlayerIconSelectWidget::ListIconNum' has a wrong offset!");

// Class UNION.OnlineTimer
// 0x0040 (0x0320 - 0x02E0)
class UOnlineTimer final : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnTimeout;                                         // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         TimeCount;                                         // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         StartTimeCount;                                    // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AlertTimeCount;                                    // 0x02F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateTime;                                        // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsTimeOut;                                         // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsAlert;                                           // 0x0305(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsStartTimer;                                      // 0x0306(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsStopTimer;                                       // 0x0307(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          ChangeCountSoundCue;                               // 0x0308(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          TimeOutSoundCue;                                   // 0x0310(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AlreadyTimeOut();
	void EndTimer();
	int32 GetStartTimeCount();
	int32 GetTimeCount();
	bool IsStopTimeCount();
	void OnInitialize();
	void SetStartTimeCount(int32 InValue);
	void SetTimeCount(int32 InValue);
	void StartTimer();
	void StopTimer();
	void UpdateTimeCount(float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineTimer">();
	}
	static class UOnlineTimer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineTimer>();
	}
};
static_assert(alignof(UOnlineTimer) == 0x000008, "Wrong alignment on UOnlineTimer");
static_assert(sizeof(UOnlineTimer) == 0x000320, "Wrong size on UOnlineTimer");
static_assert(offsetof(UOnlineTimer, OnTimeout) == 0x0002E0, "Member 'UOnlineTimer::OnTimeout' has a wrong offset!");
static_assert(offsetof(UOnlineTimer, TimeCount) == 0x0002F0, "Member 'UOnlineTimer::TimeCount' has a wrong offset!");
static_assert(offsetof(UOnlineTimer, StartTimeCount) == 0x0002F4, "Member 'UOnlineTimer::StartTimeCount' has a wrong offset!");
static_assert(offsetof(UOnlineTimer, AlertTimeCount) == 0x0002F8, "Member 'UOnlineTimer::AlertTimeCount' has a wrong offset!");
static_assert(offsetof(UOnlineTimer, UpdateTime) == 0x000300, "Member 'UOnlineTimer::UpdateTime' has a wrong offset!");
static_assert(offsetof(UOnlineTimer, IsTimeOut) == 0x000304, "Member 'UOnlineTimer::IsTimeOut' has a wrong offset!");
static_assert(offsetof(UOnlineTimer, IsAlert) == 0x000305, "Member 'UOnlineTimer::IsAlert' has a wrong offset!");
static_assert(offsetof(UOnlineTimer, IsStartTimer) == 0x000306, "Member 'UOnlineTimer::IsStartTimer' has a wrong offset!");
static_assert(offsetof(UOnlineTimer, IsStopTimer) == 0x000307, "Member 'UOnlineTimer::IsStopTimer' has a wrong offset!");
static_assert(offsetof(UOnlineTimer, ChangeCountSoundCue) == 0x000308, "Member 'UOnlineTimer::ChangeCountSoundCue' has a wrong offset!");
static_assert(offsetof(UOnlineTimer, TimeOutSoundCue) == 0x000310, "Member 'UOnlineTimer::TimeOutSoundCue' has a wrong offset!");

// Class UNION.OptimizedMeshEffect
// 0x0138 (0x0160 - 0x0028)
class UOptimizedMeshEffect final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOptimizedMeshEffectParams             EffectParams;                                      // 0x0030(0x00D0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UUnionStaticMeshComponent> MeshComponent;                                   // 0x0108(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         TargetComponent;                                   // 0x0110(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInstanceDynamic>> Materials;                                // 0x0118(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class AActor*                                 OwnerActor;                                        // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x28];                                     // 0x0138(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Start();
	void Stop();

	bool IsAlive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptimizedMeshEffect">();
	}
	static class UOptimizedMeshEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptimizedMeshEffect>();
	}
};
static_assert(alignof(UOptimizedMeshEffect) == 0x000010, "Wrong alignment on UOptimizedMeshEffect");
static_assert(sizeof(UOptimizedMeshEffect) == 0x000160, "Wrong size on UOptimizedMeshEffect");
static_assert(offsetof(UOptimizedMeshEffect, EffectParams) == 0x000030, "Member 'UOptimizedMeshEffect::EffectParams' has a wrong offset!");
static_assert(offsetof(UOptimizedMeshEffect, StaticMesh) == 0x000100, "Member 'UOptimizedMeshEffect::StaticMesh' has a wrong offset!");
static_assert(offsetof(UOptimizedMeshEffect, MeshComponent) == 0x000108, "Member 'UOptimizedMeshEffect::MeshComponent' has a wrong offset!");
static_assert(offsetof(UOptimizedMeshEffect, TargetComponent) == 0x000110, "Member 'UOptimizedMeshEffect::TargetComponent' has a wrong offset!");
static_assert(offsetof(UOptimizedMeshEffect, Materials) == 0x000118, "Member 'UOptimizedMeshEffect::Materials' has a wrong offset!");
static_assert(offsetof(UOptimizedMeshEffect, OwnerActor) == 0x000128, "Member 'UOptimizedMeshEffect::OwnerActor' has a wrong offset!");
static_assert(offsetof(UOptimizedMeshEffect, AttachPointName) == 0x000130, "Member 'UOptimizedMeshEffect::AttachPointName' has a wrong offset!");

// Class UNION.OptimizedMeshEffectComponent
// 0x00F0 (0x0190 - 0x00A0)
class UOptimizedMeshEffectComponent final : public UActorComponent
{
public:
	struct FOptimizedMeshEffectParams             EffectParams;                                      // 0x00A0(0x00D0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UOptimizedMeshEffect*                   OptimizedMeshEffect;                               // 0x0170(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bManualUpdate;                                     // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetScalarParameterValue(class FName ParameterName, float Value);
	void SetVectorParameterValue(class FName ParameterName, const struct FVector& Value);
	void StartEffect();
	void StopEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptimizedMeshEffectComponent">();
	}
	static class UOptimizedMeshEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptimizedMeshEffectComponent>();
	}
};
static_assert(alignof(UOptimizedMeshEffectComponent) == 0x000010, "Wrong alignment on UOptimizedMeshEffectComponent");
static_assert(sizeof(UOptimizedMeshEffectComponent) == 0x000190, "Wrong size on UOptimizedMeshEffectComponent");
static_assert(offsetof(UOptimizedMeshEffectComponent, EffectParams) == 0x0000A0, "Member 'UOptimizedMeshEffectComponent::EffectParams' has a wrong offset!");
static_assert(offsetof(UOptimizedMeshEffectComponent, OptimizedMeshEffect) == 0x000170, "Member 'UOptimizedMeshEffectComponent::OptimizedMeshEffect' has a wrong offset!");
static_assert(offsetof(UOptimizedMeshEffectComponent, StaticMesh) == 0x000178, "Member 'UOptimizedMeshEffectComponent::StaticMesh' has a wrong offset!");
static_assert(offsetof(UOptimizedMeshEffectComponent, AttachPointName) == 0x000180, "Member 'UOptimizedMeshEffectComponent::AttachPointName' has a wrong offset!");
static_assert(offsetof(UOptimizedMeshEffectComponent, bManualUpdate) == 0x000188, "Member 'UOptimizedMeshEffectComponent::bManualUpdate' has a wrong offset!");

// Class UNION.UnionAssetPreloaderSubsystem
// 0x0120 (0x0150 - 0x0030)
class UUnionAssetPreloaderSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPreloadAssetData*>              BootPreloadAssetList;                              // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                LoadedMachinePartsAssetIds;                        // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FPrimaryAssetId>                LoadedDriverAssetIds;                              // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0xE0];                                      // 0x0070(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddPreloadStageAssets2(const EStageId& StageId);
	void PreloadBootAssets();
	void PreLoadStageAssets();
	bool PreloadStageAssets2(const TArray<EStageId>& StageIds, bool bIsGatherLoad);
	void SetTextureStreamingEnabled(bool bEnabled);
	void UnloadAnStageAssets2(const EStageId& StageId);
	void UnloadBootAssets();
	int32 UnloadNotSelectedDriverAssets();
	int32 UnloadNotSelectedMachineEffectAssets();
	int32 UnloadNotSelectedMachinePartsAssets();
	void UnloadStageAssets();
	void UnloadStageAssets2();
	int32 WaitForResourceStreaming(float TimeLimit);

	bool IsEnableBootPreloadAsset() const;
	bool IsEnableMenuPreloadAsset() const;
	bool IsEnableUnloadDriverCuesheets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionAssetPreloaderSubsystem">();
	}
	static class UUnionAssetPreloaderSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionAssetPreloaderSubsystem>();
	}
};
static_assert(alignof(UUnionAssetPreloaderSubsystem) == 0x000008, "Wrong alignment on UUnionAssetPreloaderSubsystem");
static_assert(sizeof(UUnionAssetPreloaderSubsystem) == 0x000150, "Wrong size on UUnionAssetPreloaderSubsystem");
static_assert(offsetof(UUnionAssetPreloaderSubsystem, BootPreloadAssetList) == 0x000038, "Member 'UUnionAssetPreloaderSubsystem::BootPreloadAssetList' has a wrong offset!");
static_assert(offsetof(UUnionAssetPreloaderSubsystem, LoadedMachinePartsAssetIds) == 0x000050, "Member 'UUnionAssetPreloaderSubsystem::LoadedMachinePartsAssetIds' has a wrong offset!");
static_assert(offsetof(UUnionAssetPreloaderSubsystem, LoadedDriverAssetIds) == 0x000060, "Member 'UUnionAssetPreloaderSubsystem::LoadedDriverAssetIds' has a wrong offset!");

// Class UNION.OptionSequenceBase
// 0x0098 (0x0138 - 0x00A0)
class UOptionSequenceBase : public UActorComponent
{
public:
	TSoftObjectPtr<class UOptionCommonAsset>      CommonAssetData;                                   // 0x00A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              CellTable;                                         // 0x00C8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPrimaryDataAsset>       IndicatorData;                                     // 0x00F0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionWidget*                          TopOptionWidget;                                   // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            BaseCloseConfirmPopup;                             // 0x0120(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            BaseRevertConfirmPopup;                            // 0x0128(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCloseConfirmDecision(class UUnionUIButtonBase* Button, int32 panelIdx, int32 buttonIdx);
	void OnRevertConfirmDecision(class UUnionUIButtonBase* Button, int32 panelIdx, int32 buttonIdx);
	void RequestRevert();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionSequenceBase">();
	}
	static class UOptionSequenceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionSequenceBase>();
	}
};
static_assert(alignof(UOptionSequenceBase) == 0x000008, "Wrong alignment on UOptionSequenceBase");
static_assert(sizeof(UOptionSequenceBase) == 0x000138, "Wrong size on UOptionSequenceBase");
static_assert(offsetof(UOptionSequenceBase, CommonAssetData) == 0x0000A0, "Member 'UOptionSequenceBase::CommonAssetData' has a wrong offset!");
static_assert(offsetof(UOptionSequenceBase, CellTable) == 0x0000C8, "Member 'UOptionSequenceBase::CellTable' has a wrong offset!");
static_assert(offsetof(UOptionSequenceBase, IndicatorData) == 0x0000F0, "Member 'UOptionSequenceBase::IndicatorData' has a wrong offset!");
static_assert(offsetof(UOptionSequenceBase, TopOptionWidget) == 0x000118, "Member 'UOptionSequenceBase::TopOptionWidget' has a wrong offset!");
static_assert(offsetof(UOptionSequenceBase, BaseCloseConfirmPopup) == 0x000120, "Member 'UOptionSequenceBase::BaseCloseConfirmPopup' has a wrong offset!");
static_assert(offsetof(UOptionSequenceBase, BaseRevertConfirmPopup) == 0x000128, "Member 'UOptionSequenceBase::BaseRevertConfirmPopup' has a wrong offset!");

// Class UNION.OptionAudioSequence
// 0x0010 (0x0148 - 0x0138)
class UOptionAudioSequence final : public UOptionSequenceBase
{
public:
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDecisionEvent(uint8 kind, float Ratio);
	void OnMoveEvent(uint8 kind, float Ratio);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionAudioSequence">();
	}
	static class UOptionAudioSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionAudioSequence>();
	}
};
static_assert(alignof(UOptionAudioSequence) == 0x000008, "Wrong alignment on UOptionAudioSequence");
static_assert(sizeof(UOptionAudioSequence) == 0x000148, "Wrong size on UOptionAudioSequence");

// Class UNION.CellIndicatorRaceData
// 0x0320 (0x0350 - 0x0030)
class UCellIndicatorRaceData final : public UPrimaryDataAsset
{
public:
	TMap<ERaceCameraType, class FText>            CameraType;                                        // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       Fps;                                               // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ETeamRankAndMap, class FText>            TeamRankVisible;                                   // 0x00D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EItemInfoVisible, class FText>           ItemInfoVisible;                                   // 0x0120(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       RaceSerif;                                         // 0x0170(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       DriftAndTrick;                                     // 0x01C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       gadget;                                            // 0x0210(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       RingAndMeter;                                      // 0x0260(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       RaceRank;                                          // 0x02B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       ItemSlot;                                          // 0x0300(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CellIndicatorRaceData">();
	}
	static class UCellIndicatorRaceData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCellIndicatorRaceData>();
	}
};
static_assert(alignof(UCellIndicatorRaceData) == 0x000008, "Wrong alignment on UCellIndicatorRaceData");
static_assert(sizeof(UCellIndicatorRaceData) == 0x000350, "Wrong size on UCellIndicatorRaceData");
static_assert(offsetof(UCellIndicatorRaceData, CameraType) == 0x000030, "Member 'UCellIndicatorRaceData::CameraType' has a wrong offset!");
static_assert(offsetof(UCellIndicatorRaceData, Fps) == 0x000080, "Member 'UCellIndicatorRaceData::Fps' has a wrong offset!");
static_assert(offsetof(UCellIndicatorRaceData, TeamRankVisible) == 0x0000D0, "Member 'UCellIndicatorRaceData::TeamRankVisible' has a wrong offset!");
static_assert(offsetof(UCellIndicatorRaceData, ItemInfoVisible) == 0x000120, "Member 'UCellIndicatorRaceData::ItemInfoVisible' has a wrong offset!");
static_assert(offsetof(UCellIndicatorRaceData, RaceSerif) == 0x000170, "Member 'UCellIndicatorRaceData::RaceSerif' has a wrong offset!");
static_assert(offsetof(UCellIndicatorRaceData, DriftAndTrick) == 0x0001C0, "Member 'UCellIndicatorRaceData::DriftAndTrick' has a wrong offset!");
static_assert(offsetof(UCellIndicatorRaceData, gadget) == 0x000210, "Member 'UCellIndicatorRaceData::gadget' has a wrong offset!");
static_assert(offsetof(UCellIndicatorRaceData, RingAndMeter) == 0x000260, "Member 'UCellIndicatorRaceData::RingAndMeter' has a wrong offset!");
static_assert(offsetof(UCellIndicatorRaceData, RaceRank) == 0x0002B0, "Member 'UCellIndicatorRaceData::RaceRank' has a wrong offset!");
static_assert(offsetof(UCellIndicatorRaceData, ItemSlot) == 0x000300, "Member 'UCellIndicatorRaceData::ItemSlot' has a wrong offset!");

// Class UNION.CellIndicatorGraphicData
// 0x03D0 (0x0400 - 0x0030)
class UCellIndicatorGraphicData final : public UPrimaryDataAsset
{
public:
	TMap<EGraphicMode, class FText>               GraphicMode;                                       // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EFullscreenMode, class FText>            FullscreenMode;                                    // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           MonitorNumber;                                     // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       VSync;                                             // 0x00E0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EFrameRateLimit, class FText>            FrameRateLimit;                                    // 0x0130(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EGraphicQualityPreset, class FText>      GraphicQualityPreset;                              // 0x0180(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EModelQuality, class FText>              ModelQuality;                                      // 0x01D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EShadowQuality, class FText>             ShadowQuality;                                     // 0x0220(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EAntiAliasMethod, class FText>           AntiAliasMethod;                                   // 0x0270(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EReflectionQuality, class FText>         ReflectionQuality;                                 // 0x02C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       AmbientOcclusion;                                  // 0x0310(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ERenderingScale, class FText>            RenderingScale;                                    // 0x0360(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       Blur;                                              // 0x03B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CellIndicatorGraphicData">();
	}
	static class UCellIndicatorGraphicData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCellIndicatorGraphicData>();
	}
};
static_assert(alignof(UCellIndicatorGraphicData) == 0x000008, "Wrong alignment on UCellIndicatorGraphicData");
static_assert(sizeof(UCellIndicatorGraphicData) == 0x000400, "Wrong size on UCellIndicatorGraphicData");
static_assert(offsetof(UCellIndicatorGraphicData, GraphicMode) == 0x000030, "Member 'UCellIndicatorGraphicData::GraphicMode' has a wrong offset!");
static_assert(offsetof(UCellIndicatorGraphicData, FullscreenMode) == 0x000080, "Member 'UCellIndicatorGraphicData::FullscreenMode' has a wrong offset!");
static_assert(offsetof(UCellIndicatorGraphicData, MonitorNumber) == 0x0000D0, "Member 'UCellIndicatorGraphicData::MonitorNumber' has a wrong offset!");
static_assert(offsetof(UCellIndicatorGraphicData, VSync) == 0x0000E0, "Member 'UCellIndicatorGraphicData::VSync' has a wrong offset!");
static_assert(offsetof(UCellIndicatorGraphicData, FrameRateLimit) == 0x000130, "Member 'UCellIndicatorGraphicData::FrameRateLimit' has a wrong offset!");
static_assert(offsetof(UCellIndicatorGraphicData, GraphicQualityPreset) == 0x000180, "Member 'UCellIndicatorGraphicData::GraphicQualityPreset' has a wrong offset!");
static_assert(offsetof(UCellIndicatorGraphicData, ModelQuality) == 0x0001D0, "Member 'UCellIndicatorGraphicData::ModelQuality' has a wrong offset!");
static_assert(offsetof(UCellIndicatorGraphicData, ShadowQuality) == 0x000220, "Member 'UCellIndicatorGraphicData::ShadowQuality' has a wrong offset!");
static_assert(offsetof(UCellIndicatorGraphicData, AntiAliasMethod) == 0x000270, "Member 'UCellIndicatorGraphicData::AntiAliasMethod' has a wrong offset!");
static_assert(offsetof(UCellIndicatorGraphicData, ReflectionQuality) == 0x0002C0, "Member 'UCellIndicatorGraphicData::ReflectionQuality' has a wrong offset!");
static_assert(offsetof(UCellIndicatorGraphicData, AmbientOcclusion) == 0x000310, "Member 'UCellIndicatorGraphicData::AmbientOcclusion' has a wrong offset!");
static_assert(offsetof(UCellIndicatorGraphicData, RenderingScale) == 0x000360, "Member 'UCellIndicatorGraphicData::RenderingScale' has a wrong offset!");
static_assert(offsetof(UCellIndicatorGraphicData, Blur) == 0x0003B0, "Member 'UCellIndicatorGraphicData::Blur' has a wrong offset!");

// Class UNION.TimeTrialSelectCourseState
// 0x00A8 (0x01D0 - 0x0128)
class UTimeTrialSelectCourseState : public UMenuSequenceSubStateBase
{
public:
	EStageId                                      SelectedStageIdSingle;                             // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrandPrixId                                  SelectedGrandprixId;                               // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     LastSelectDriverId;                                // 0x012A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B[0x5];                                      // 0x012B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCourseSelectWidgetBase*                CourseSelectWidget;                                // 0x0130(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecideTimeTrialSelectCource;                     // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCancelAndPrevSequence;                           // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackToClassSelect;                               // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnGoToGadgetCustom;                                // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class FText                                   _StoreDialogTitleTextForGrandPrix;                 // 0x0178(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                   _StoreDialogTitleTextForStage;                     // 0x0188(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class ADLCStoreDialogActor*                   _StoreActor;                                       // 0x0198(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture2D*                             AlbumTexture;                                      // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UTexture2D>              LoadSoftTexturePtr;                                // 0x01A8(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnStoreDialogCompleted(bool IsAccept);
	void OnStoreDialogCompletedBP();
	void SetNextMachineSelectState(EMachineSelectState InState);
	bool StartStore(bool GrandPrixSelecting);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeTrialSelectCourseState">();
	}
	static class UTimeTrialSelectCourseState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeTrialSelectCourseState>();
	}
};
static_assert(alignof(UTimeTrialSelectCourseState) == 0x000008, "Wrong alignment on UTimeTrialSelectCourseState");
static_assert(sizeof(UTimeTrialSelectCourseState) == 0x0001D0, "Wrong size on UTimeTrialSelectCourseState");
static_assert(offsetof(UTimeTrialSelectCourseState, SelectedStageIdSingle) == 0x000128, "Member 'UTimeTrialSelectCourseState::SelectedStageIdSingle' has a wrong offset!");
static_assert(offsetof(UTimeTrialSelectCourseState, SelectedGrandprixId) == 0x000129, "Member 'UTimeTrialSelectCourseState::SelectedGrandprixId' has a wrong offset!");
static_assert(offsetof(UTimeTrialSelectCourseState, LastSelectDriverId) == 0x00012A, "Member 'UTimeTrialSelectCourseState::LastSelectDriverId' has a wrong offset!");
static_assert(offsetof(UTimeTrialSelectCourseState, CourseSelectWidget) == 0x000130, "Member 'UTimeTrialSelectCourseState::CourseSelectWidget' has a wrong offset!");
static_assert(offsetof(UTimeTrialSelectCourseState, OnDecideTimeTrialSelectCource) == 0x000138, "Member 'UTimeTrialSelectCourseState::OnDecideTimeTrialSelectCource' has a wrong offset!");
static_assert(offsetof(UTimeTrialSelectCourseState, OnCancelAndPrevSequence) == 0x000148, "Member 'UTimeTrialSelectCourseState::OnCancelAndPrevSequence' has a wrong offset!");
static_assert(offsetof(UTimeTrialSelectCourseState, OnBackToClassSelect) == 0x000158, "Member 'UTimeTrialSelectCourseState::OnBackToClassSelect' has a wrong offset!");
static_assert(offsetof(UTimeTrialSelectCourseState, OnGoToGadgetCustom) == 0x000168, "Member 'UTimeTrialSelectCourseState::OnGoToGadgetCustom' has a wrong offset!");
static_assert(offsetof(UTimeTrialSelectCourseState, _StoreDialogTitleTextForGrandPrix) == 0x000178, "Member 'UTimeTrialSelectCourseState::_StoreDialogTitleTextForGrandPrix' has a wrong offset!");
static_assert(offsetof(UTimeTrialSelectCourseState, _StoreDialogTitleTextForStage) == 0x000188, "Member 'UTimeTrialSelectCourseState::_StoreDialogTitleTextForStage' has a wrong offset!");
static_assert(offsetof(UTimeTrialSelectCourseState, _StoreActor) == 0x000198, "Member 'UTimeTrialSelectCourseState::_StoreActor' has a wrong offset!");
static_assert(offsetof(UTimeTrialSelectCourseState, AlbumTexture) == 0x0001A0, "Member 'UTimeTrialSelectCourseState::AlbumTexture' has a wrong offset!");
static_assert(offsetof(UTimeTrialSelectCourseState, LoadSoftTexturePtr) == 0x0001A8, "Member 'UTimeTrialSelectCourseState::LoadSoftTexturePtr' has a wrong offset!");

// Class UNION.CellIndicatorControlSettingData
// 0x03C0 (0x03F0 - 0x0030)
class UCellIndicatorControlSettingData final : public UPrimaryDataAsset
{
public:
	TMap<bool, class FText>                       InverseAccept;                                     // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EMenuControllerViewType, class FText>    ButtonDisplayType;                                 // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EOptionLocalPlayerNumber, class FText>   LocalPlayerIndex;                                  // 0x00D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       AssistHandle;                                      // 0x0120(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       AssistAccelerator;                                 // 0x0170(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       AssistAirTrick;                                    // 0x01C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       GyroAssist;                                        // 0x0210(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       ForceFeedback;                                     // 0x0260(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<uint8, class FText>                      ForceFeedback_4Step;                               // 0x02B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EKeyConfigOperationType, class FText>    KeyOperationType_CS;                               // 0x0300(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EKeyConfigOperationType, class FText>    KeyOperationType_PC;                               // 0x0350(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       FlyModeReverse;                                    // 0x03A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CellIndicatorControlSettingData">();
	}
	static class UCellIndicatorControlSettingData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCellIndicatorControlSettingData>();
	}
};
static_assert(alignof(UCellIndicatorControlSettingData) == 0x000008, "Wrong alignment on UCellIndicatorControlSettingData");
static_assert(sizeof(UCellIndicatorControlSettingData) == 0x0003F0, "Wrong size on UCellIndicatorControlSettingData");
static_assert(offsetof(UCellIndicatorControlSettingData, InverseAccept) == 0x000030, "Member 'UCellIndicatorControlSettingData::InverseAccept' has a wrong offset!");
static_assert(offsetof(UCellIndicatorControlSettingData, ButtonDisplayType) == 0x000080, "Member 'UCellIndicatorControlSettingData::ButtonDisplayType' has a wrong offset!");
static_assert(offsetof(UCellIndicatorControlSettingData, LocalPlayerIndex) == 0x0000D0, "Member 'UCellIndicatorControlSettingData::LocalPlayerIndex' has a wrong offset!");
static_assert(offsetof(UCellIndicatorControlSettingData, AssistHandle) == 0x000120, "Member 'UCellIndicatorControlSettingData::AssistHandle' has a wrong offset!");
static_assert(offsetof(UCellIndicatorControlSettingData, AssistAccelerator) == 0x000170, "Member 'UCellIndicatorControlSettingData::AssistAccelerator' has a wrong offset!");
static_assert(offsetof(UCellIndicatorControlSettingData, AssistAirTrick) == 0x0001C0, "Member 'UCellIndicatorControlSettingData::AssistAirTrick' has a wrong offset!");
static_assert(offsetof(UCellIndicatorControlSettingData, GyroAssist) == 0x000210, "Member 'UCellIndicatorControlSettingData::GyroAssist' has a wrong offset!");
static_assert(offsetof(UCellIndicatorControlSettingData, ForceFeedback) == 0x000260, "Member 'UCellIndicatorControlSettingData::ForceFeedback' has a wrong offset!");
static_assert(offsetof(UCellIndicatorControlSettingData, ForceFeedback_4Step) == 0x0002B0, "Member 'UCellIndicatorControlSettingData::ForceFeedback_4Step' has a wrong offset!");
static_assert(offsetof(UCellIndicatorControlSettingData, KeyOperationType_CS) == 0x000300, "Member 'UCellIndicatorControlSettingData::KeyOperationType_CS' has a wrong offset!");
static_assert(offsetof(UCellIndicatorControlSettingData, KeyOperationType_PC) == 0x000350, "Member 'UCellIndicatorControlSettingData::KeyOperationType_PC' has a wrong offset!");
static_assert(offsetof(UCellIndicatorControlSettingData, FlyModeReverse) == 0x0003A0, "Member 'UCellIndicatorControlSettingData::FlyModeReverse' has a wrong offset!");

// Class UNION.WirelessLobbyControlComponent
// 0x0008 (0x0138 - 0x0130)
class UWirelessLobbyControlComponent final : public UCustomMatchLobbyControlComponent
{
public:
	TSubclassOf<class UWirelessLobbyContext>      LobbyContextClass;                                 // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void FinalizeWirelessMode(const TDelegate<void(class UWirelessLobbyContext* WirelessLobbyContext, const struct FOnlineErrorBP& Error)>& OnComplete);
	void InitializeWirelessMode(int32 LocalUserNum, const TDelegate<void(class UWirelessLobbyContext* WirelessLobbyContext, const struct FOnlineErrorBP& Error)>& OnComplete);
	void OnCompleteCreateWirelessSession(class UWirelessLobbyContext* LobbyContext, const struct FOnlineErrorBP& Error);
	void OnCompleteJoinWirelessSession(class UWirelessLobbyContext* LobbyContext, const struct FOnlineErrorBP& Error);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WirelessLobbyControlComponent">();
	}
	static class UWirelessLobbyControlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWirelessLobbyControlComponent>();
	}
};
static_assert(alignof(UWirelessLobbyControlComponent) == 0x000008, "Wrong alignment on UWirelessLobbyControlComponent");
static_assert(sizeof(UWirelessLobbyControlComponent) == 0x000138, "Wrong size on UWirelessLobbyControlComponent");
static_assert(offsetof(UWirelessLobbyControlComponent, LobbyContextClass) == 0x000130, "Member 'UWirelessLobbyControlComponent::LobbyContextClass' has a wrong offset!");

// Class UNION.CellIndicatorLanguageSettingData
// 0x00F0 (0x0120 - 0x0030)
class UCellIndicatorLanguageSettingData final : public UPrimaryDataAsset
{
public:
	TMap<ELanguage, class FText>                  Language;                                          // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ELanguage, class FText>                  Voice;                                             // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ECaptionVisible, class FText>            Caption;                                           // 0x00D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CellIndicatorLanguageSettingData">();
	}
	static class UCellIndicatorLanguageSettingData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCellIndicatorLanguageSettingData>();
	}
};
static_assert(alignof(UCellIndicatorLanguageSettingData) == 0x000008, "Wrong alignment on UCellIndicatorLanguageSettingData");
static_assert(sizeof(UCellIndicatorLanguageSettingData) == 0x000120, "Wrong size on UCellIndicatorLanguageSettingData");
static_assert(offsetof(UCellIndicatorLanguageSettingData, Language) == 0x000030, "Member 'UCellIndicatorLanguageSettingData::Language' has a wrong offset!");
static_assert(offsetof(UCellIndicatorLanguageSettingData, Voice) == 0x000080, "Member 'UCellIndicatorLanguageSettingData::Voice' has a wrong offset!");
static_assert(offsetof(UCellIndicatorLanguageSettingData, Caption) == 0x0000D0, "Member 'UCellIndicatorLanguageSettingData::Caption' has a wrong offset!");

// Class UNION.CellIndicatorOnlineSettingData
// 0x01E0 (0x0210 - 0x0030)
class UCellIndicatorOnlineSettingData final : public UPrimaryDataAsset
{
public:
	TMap<bool, class FText>                       PlayStatus;                                        // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       CrossPlay;                                         // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       FriendRequest;                                     // 0x00D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       IdSearch;                                          // 0x0120(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       InviteLobby;                                       // 0x0170(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<bool, class FText>                       InviteLobbyInRace;                                 // 0x01C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CellIndicatorOnlineSettingData">();
	}
	static class UCellIndicatorOnlineSettingData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCellIndicatorOnlineSettingData>();
	}
};
static_assert(alignof(UCellIndicatorOnlineSettingData) == 0x000008, "Wrong alignment on UCellIndicatorOnlineSettingData");
static_assert(sizeof(UCellIndicatorOnlineSettingData) == 0x000210, "Wrong size on UCellIndicatorOnlineSettingData");
static_assert(offsetof(UCellIndicatorOnlineSettingData, PlayStatus) == 0x000030, "Member 'UCellIndicatorOnlineSettingData::PlayStatus' has a wrong offset!");
static_assert(offsetof(UCellIndicatorOnlineSettingData, CrossPlay) == 0x000080, "Member 'UCellIndicatorOnlineSettingData::CrossPlay' has a wrong offset!");
static_assert(offsetof(UCellIndicatorOnlineSettingData, FriendRequest) == 0x0000D0, "Member 'UCellIndicatorOnlineSettingData::FriendRequest' has a wrong offset!");
static_assert(offsetof(UCellIndicatorOnlineSettingData, IdSearch) == 0x000120, "Member 'UCellIndicatorOnlineSettingData::IdSearch' has a wrong offset!");
static_assert(offsetof(UCellIndicatorOnlineSettingData, InviteLobby) == 0x000170, "Member 'UCellIndicatorOnlineSettingData::InviteLobby' has a wrong offset!");
static_assert(offsetof(UCellIndicatorOnlineSettingData, InviteLobbyInRace) == 0x0001C0, "Member 'UCellIndicatorOnlineSettingData::InviteLobbyInRace' has a wrong offset!");

// Class UNION.OptionCellList
// 0x0080 (0x0458 - 0x03D8)
class UOptionCellList final : public UUnionUISceneBase
{
public:
	class UScrollBox*                             Cell_Scroll;                                       // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FText Text)> OnChangeHoverCellEvent;                   // 0x03E0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitTopEvent;                                    // 0x03F0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UPanelWidget*                           ParentPanel;                                       // 0x0400(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIButtonsPanel*                   ButtonPanel;                                       // 0x0408(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UOptionCommonCell*>              CellList;                                          // 0x0410(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UOptionCellSubCategory*>         SubCategoryList;                                   // 0x0420(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UOptionCommonCell*>              FocusableWidgetList;                               // 0x0430(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FCellGuideParam>                GuideList;                                         // 0x0440(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_450[0x8];                                      // 0x0450(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackToCellList();
	void OnEnterCell();
	void OnExitMenu();
	void OnFocusButtonItem(class UUnionUIButtonBase* InButton);
	void UpdateScroll(int32 ButtonIndex);
	void UpdateScroll_BP(int32 ButtonIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionCellList">();
	}
	static class UOptionCellList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionCellList>();
	}
};
static_assert(alignof(UOptionCellList) == 0x000008, "Wrong alignment on UOptionCellList");
static_assert(sizeof(UOptionCellList) == 0x000458, "Wrong size on UOptionCellList");
static_assert(offsetof(UOptionCellList, Cell_Scroll) == 0x0003D8, "Member 'UOptionCellList::Cell_Scroll' has a wrong offset!");
static_assert(offsetof(UOptionCellList, OnChangeHoverCellEvent) == 0x0003E0, "Member 'UOptionCellList::OnChangeHoverCellEvent' has a wrong offset!");
static_assert(offsetof(UOptionCellList, OnExitTopEvent) == 0x0003F0, "Member 'UOptionCellList::OnExitTopEvent' has a wrong offset!");
static_assert(offsetof(UOptionCellList, ParentPanel) == 0x000400, "Member 'UOptionCellList::ParentPanel' has a wrong offset!");
static_assert(offsetof(UOptionCellList, ButtonPanel) == 0x000408, "Member 'UOptionCellList::ButtonPanel' has a wrong offset!");
static_assert(offsetof(UOptionCellList, CellList) == 0x000410, "Member 'UOptionCellList::CellList' has a wrong offset!");
static_assert(offsetof(UOptionCellList, SubCategoryList) == 0x000420, "Member 'UOptionCellList::SubCategoryList' has a wrong offset!");
static_assert(offsetof(UOptionCellList, FocusableWidgetList) == 0x000430, "Member 'UOptionCellList::FocusableWidgetList' has a wrong offset!");
static_assert(offsetof(UOptionCellList, GuideList) == 0x000440, "Member 'UOptionCellList::GuideList' has a wrong offset!");

// Class UNION.RaceSequenceStateReady
// 0x0010 (0x0120 - 0x0110)
class URaceSequenceStateReady : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RaceStartTimeSec;                                  // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanStartRace();
	bool ReadyRace();
	void SetClockStartWait(bool bInEnable);
	bool StartRace(int32 InRaceStartTimeSec);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateReady">();
	}
	static class URaceSequenceStateReady* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateReady>();
	}
};
static_assert(alignof(URaceSequenceStateReady) == 0x000008, "Wrong alignment on URaceSequenceStateReady");
static_assert(sizeof(URaceSequenceStateReady) == 0x000120, "Wrong size on URaceSequenceStateReady");
static_assert(offsetof(URaceSequenceStateReady, RaceStartTimeSec) == 0x000118, "Member 'URaceSequenceStateReady::RaceStartTimeSec' has a wrong offset!");

// Class UNION.OptionCellSubCategory
// 0x0008 (0x02E8 - 0x02E0)
class UOptionCellSubCategory final : public UUserWidget
{
public:
	class UUnionRichTextBlock*                    TXT_Title;                                         // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionCellSubCategory">();
	}
	static class UOptionCellSubCategory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionCellSubCategory>();
	}
};
static_assert(alignof(UOptionCellSubCategory) == 0x000008, "Wrong alignment on UOptionCellSubCategory");
static_assert(sizeof(UOptionCellSubCategory) == 0x0002E8, "Wrong size on UOptionCellSubCategory");
static_assert(offsetof(UOptionCellSubCategory, TXT_Title) == 0x0002E0, "Member 'UOptionCellSubCategory::TXT_Title' has a wrong offset!");

// Class UNION.OptionCellTypeBase
// 0x0018 (0x0498 - 0x0480)
class UOptionCellTypeBase : public UUnionUIButtonBase
{
public:
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0480(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionCellTypeBase">();
	}
	static class UOptionCellTypeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionCellTypeBase>();
	}
};
static_assert(alignof(UOptionCellTypeBase) == 0x000008, "Wrong alignment on UOptionCellTypeBase");
static_assert(sizeof(UOptionCellTypeBase) == 0x000498, "Wrong size on UOptionCellTypeBase");
static_assert(offsetof(UOptionCellTypeBase, OnBackEvent) == 0x000480, "Member 'UOptionCellTypeBase::OnBackEvent' has a wrong offset!");

// Class UNION.OptionCellTypeBtn
// 0x0020 (0x04B8 - 0x0498)
class UOptionCellTypeBtn final : public UOptionCellTypeBase
{
public:
	uint8                                         Pad_498[0x20];                                     // 0x0498(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetText(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionCellTypeBtn">();
	}
	static class UOptionCellTypeBtn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionCellTypeBtn>();
	}
};
static_assert(alignof(UOptionCellTypeBtn) == 0x000008, "Wrong alignment on UOptionCellTypeBtn");
static_assert(sizeof(UOptionCellTypeBtn) == 0x0004B8, "Wrong size on UOptionCellTypeBtn");

// Class UNION.OptionCellTypeGauge
// 0x0060 (0x04F8 - 0x0498)
class UOptionCellTypeGauge final : public UOptionCellTypeBase
{
public:
	class UUnionRichTextBlock*                    TXT_SettingName;                                   // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionUIButton*                         LButton;                                           // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionUIButton*                         RButton;                                           // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       PRM_Cursor;                                        // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        WidgetSwitcher_PlayerColor;                        // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C0[0x38];                                     // 0x04C0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddValue(int32 InValue);
	void ChangeGageValue(int32 InValue);
	class UWidget* OnLeftNavigation(EUINavigation InNavigation);
	class UWidget* OnRightNavigation(EUINavigation InNavigation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionCellTypeGauge">();
	}
	static class UOptionCellTypeGauge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionCellTypeGauge>();
	}
};
static_assert(alignof(UOptionCellTypeGauge) == 0x000008, "Wrong alignment on UOptionCellTypeGauge");
static_assert(sizeof(UOptionCellTypeGauge) == 0x0004F8, "Wrong size on UOptionCellTypeGauge");
static_assert(offsetof(UOptionCellTypeGauge, TXT_SettingName) == 0x000498, "Member 'UOptionCellTypeGauge::TXT_SettingName' has a wrong offset!");
static_assert(offsetof(UOptionCellTypeGauge, LButton) == 0x0004A0, "Member 'UOptionCellTypeGauge::LButton' has a wrong offset!");
static_assert(offsetof(UOptionCellTypeGauge, RButton) == 0x0004A8, "Member 'UOptionCellTypeGauge::RButton' has a wrong offset!");
static_assert(offsetof(UOptionCellTypeGauge, PRM_Cursor) == 0x0004B0, "Member 'UOptionCellTypeGauge::PRM_Cursor' has a wrong offset!");
static_assert(offsetof(UOptionCellTypeGauge, WidgetSwitcher_PlayerColor) == 0x0004B8, "Member 'UOptionCellTypeGauge::WidgetSwitcher_PlayerColor' has a wrong offset!");

// Class UNION.ResultRateRankBand
// 0x0008 (0x02E8 - 0x02E0)
class UResultRateRankBand : public UUserWidget
{
public:
	uint8                                         Pad_2E0[0x8];                                      // 0x02E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCurrentRank();
	float GetRankMax();
	void SetCurrentRank(float InCurrentRank);
	void SetRankMax(float InRankMax);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResultRateRankBand">();
	}
	static class UResultRateRankBand* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResultRateRankBand>();
	}
};
static_assert(alignof(UResultRateRankBand) == 0x000008, "Wrong alignment on UResultRateRankBand");
static_assert(sizeof(UResultRateRankBand) == 0x0002E8, "Wrong size on UResultRateRankBand");

// Class UNION.OptionCellTypeIndicator
// 0x0088 (0x0520 - 0x0498)
class UOptionCellTypeIndicator final : public UOptionCellTypeBase
{
public:
	class UUnionRichTextBlock*                    TXT_SettingName;                                   // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionUIButton*                         LButton;                                           // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionUIButton*                         RButton;                                           // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         HB_Bar;                                            // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USizeBox*                               DSP_Indicator;                                     // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C0[0x60];                                     // 0x04C0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddValue(int32 InValue);
	void ChangeIndicatorValue(int32 InValue);
	struct FLinearColor GetLinearColor(ECellIndicatorColor Color);
	class UWidget* OnLeftNavigation(EUINavigation InNavigation);
	void OnPopupDecision(bool isApply);
	class UWidget* OnRightNavigation(EUINavigation InNavigation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionCellTypeIndicator">();
	}
	static class UOptionCellTypeIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionCellTypeIndicator>();
	}
};
static_assert(alignof(UOptionCellTypeIndicator) == 0x000008, "Wrong alignment on UOptionCellTypeIndicator");
static_assert(sizeof(UOptionCellTypeIndicator) == 0x000520, "Wrong size on UOptionCellTypeIndicator");
static_assert(offsetof(UOptionCellTypeIndicator, TXT_SettingName) == 0x000498, "Member 'UOptionCellTypeIndicator::TXT_SettingName' has a wrong offset!");
static_assert(offsetof(UOptionCellTypeIndicator, LButton) == 0x0004A0, "Member 'UOptionCellTypeIndicator::LButton' has a wrong offset!");
static_assert(offsetof(UOptionCellTypeIndicator, RButton) == 0x0004A8, "Member 'UOptionCellTypeIndicator::RButton' has a wrong offset!");
static_assert(offsetof(UOptionCellTypeIndicator, HB_Bar) == 0x0004B0, "Member 'UOptionCellTypeIndicator::HB_Bar' has a wrong offset!");
static_assert(offsetof(UOptionCellTypeIndicator, DSP_Indicator) == 0x0004B8, "Member 'UOptionCellTypeIndicator::DSP_Indicator' has a wrong offset!");

// Class UNION.TemporaryMenuSequenceStateBase
// 0x0010 (0x0108 - 0x00F8)
class UTemporaryMenuSequenceStateBase final : public UHierarchicalStateMachineStateComponent
{
public:
	EMenuSequenceMainState                        DefaultMenuState;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATemporaryMenuSequence*                 OwnerMenuSequence;                                 // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetNextMenuSequenceState(EMenuSequenceMainState InState);

	class ATemporaryMenuSequence* GetOwnerMenuSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TemporaryMenuSequenceStateBase">();
	}
	static class UTemporaryMenuSequenceStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTemporaryMenuSequenceStateBase>();
	}
};
static_assert(alignof(UTemporaryMenuSequenceStateBase) == 0x000008, "Wrong alignment on UTemporaryMenuSequenceStateBase");
static_assert(sizeof(UTemporaryMenuSequenceStateBase) == 0x000108, "Wrong size on UTemporaryMenuSequenceStateBase");
static_assert(offsetof(UTemporaryMenuSequenceStateBase, DefaultMenuState) == 0x0000F8, "Member 'UTemporaryMenuSequenceStateBase::DefaultMenuState' has a wrong offset!");
static_assert(offsetof(UTemporaryMenuSequenceStateBase, OwnerMenuSequence) == 0x000100, "Member 'UTemporaryMenuSequenceStateBase::OwnerMenuSequence' has a wrong offset!");

// Class UNION.OptionCommonAsset
// 0x01C0 (0x01F0 - 0x0030)
class UOptionCommonAsset final : public UDataAsset
{
public:
	class FText                                   CategoryRaceTop;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryControlTop;                                // 0x0040(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryControlUI;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryControlRace;                               // 0x0060(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryCustomTop;                                 // 0x0070(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryCustomAction;                              // 0x0080(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryCustomPrimary;                             // 0x0090(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryCustomSecondary;                           // 0x00A0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryCustomGamePad;                             // 0x00B0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryLanguageTop;                               // 0x00C0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryGraphicTop;                                // 0x00D0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryBrightnessTop;                             // 0x00E0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryAudioTop;                                  // 0x00F0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CategoryOnlineTop;                                 // 0x0100(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PopupMessageRevertDefault;                         // 0x0110(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           PopupButtonRevertDefault;                          // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   PopupMessageCloseConfirm;                          // 0x0130(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           PopupButtonCloseConfirm;                           // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   PopupMessageGraphicChanged;                        // 0x0150(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           PopupButtonGraphicChanged;                         // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   PopupMessageLanguageReload;                        // 0x0170(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           PopupButtonLanguageReload;                         // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   PopupTitleOnline;                                  // 0x0190(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PopupMessageOnline;                                // 0x01A0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PopupTitleOnlineError;                             // 0x01B0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PopupMessageOnlineError;                           // 0x01C0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PopupTitleKeyConfigError;                          // 0x01D0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PopupMessageKeyConfigError;                        // 0x01E0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionCommonAsset">();
	}
	static class UOptionCommonAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionCommonAsset>();
	}
};
static_assert(alignof(UOptionCommonAsset) == 0x000008, "Wrong alignment on UOptionCommonAsset");
static_assert(sizeof(UOptionCommonAsset) == 0x0001F0, "Wrong size on UOptionCommonAsset");
static_assert(offsetof(UOptionCommonAsset, CategoryRaceTop) == 0x000030, "Member 'UOptionCommonAsset::CategoryRaceTop' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryControlTop) == 0x000040, "Member 'UOptionCommonAsset::CategoryControlTop' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryControlUI) == 0x000050, "Member 'UOptionCommonAsset::CategoryControlUI' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryControlRace) == 0x000060, "Member 'UOptionCommonAsset::CategoryControlRace' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryCustomTop) == 0x000070, "Member 'UOptionCommonAsset::CategoryCustomTop' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryCustomAction) == 0x000080, "Member 'UOptionCommonAsset::CategoryCustomAction' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryCustomPrimary) == 0x000090, "Member 'UOptionCommonAsset::CategoryCustomPrimary' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryCustomSecondary) == 0x0000A0, "Member 'UOptionCommonAsset::CategoryCustomSecondary' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryCustomGamePad) == 0x0000B0, "Member 'UOptionCommonAsset::CategoryCustomGamePad' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryLanguageTop) == 0x0000C0, "Member 'UOptionCommonAsset::CategoryLanguageTop' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryGraphicTop) == 0x0000D0, "Member 'UOptionCommonAsset::CategoryGraphicTop' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryBrightnessTop) == 0x0000E0, "Member 'UOptionCommonAsset::CategoryBrightnessTop' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryAudioTop) == 0x0000F0, "Member 'UOptionCommonAsset::CategoryAudioTop' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, CategoryOnlineTop) == 0x000100, "Member 'UOptionCommonAsset::CategoryOnlineTop' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupMessageRevertDefault) == 0x000110, "Member 'UOptionCommonAsset::PopupMessageRevertDefault' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupButtonRevertDefault) == 0x000120, "Member 'UOptionCommonAsset::PopupButtonRevertDefault' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupMessageCloseConfirm) == 0x000130, "Member 'UOptionCommonAsset::PopupMessageCloseConfirm' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupButtonCloseConfirm) == 0x000140, "Member 'UOptionCommonAsset::PopupButtonCloseConfirm' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupMessageGraphicChanged) == 0x000150, "Member 'UOptionCommonAsset::PopupMessageGraphicChanged' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupButtonGraphicChanged) == 0x000160, "Member 'UOptionCommonAsset::PopupButtonGraphicChanged' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupMessageLanguageReload) == 0x000170, "Member 'UOptionCommonAsset::PopupMessageLanguageReload' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupButtonLanguageReload) == 0x000180, "Member 'UOptionCommonAsset::PopupButtonLanguageReload' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupTitleOnline) == 0x000190, "Member 'UOptionCommonAsset::PopupTitleOnline' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupMessageOnline) == 0x0001A0, "Member 'UOptionCommonAsset::PopupMessageOnline' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupTitleOnlineError) == 0x0001B0, "Member 'UOptionCommonAsset::PopupTitleOnlineError' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupMessageOnlineError) == 0x0001C0, "Member 'UOptionCommonAsset::PopupMessageOnlineError' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupTitleKeyConfigError) == 0x0001D0, "Member 'UOptionCommonAsset::PopupTitleKeyConfigError' has a wrong offset!");
static_assert(offsetof(UOptionCommonAsset, PopupMessageKeyConfigError) == 0x0001E0, "Member 'UOptionCommonAsset::PopupMessageKeyConfigError' has a wrong offset!");

// Class UNION.OptionCommonCell
// 0x0080 (0x0500 - 0x0480)
class UOptionCommonCell final : public UUnionUIButtonBase
{
public:
	class UWidgetSwitcher*                        WidgetSwitcher_Option;                             // 0x0480(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionCellTypeIndicator*               WBP_Option_Sub_Cell_Indicator;                     // 0x0488(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionCellTypeBtn*                     WBP_Option_Sub_Cell_Btn;                           // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionCellTypeGauge*                   WBP_Option_Sub_Cell_Gauge;                         // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionRichTextBlock*                    TXT_Cell_Title;                                    // 0x04A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Cell_Active_Loop;                                  // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Cell_Selecte_Loop;                                 // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        WidgetSwitcher_Cursor;                             // 0x04B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 DSP_LockCover;                                     // 0x04C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackToListEvent;                                 // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitMenuEvent;                                   // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAcceptCellEvent;                                 // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F8[0x8];                                      // 0x04F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BackToListEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionCommonCell">();
	}
	static class UOptionCommonCell* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionCommonCell>();
	}
};
static_assert(alignof(UOptionCommonCell) == 0x000008, "Wrong alignment on UOptionCommonCell");
static_assert(sizeof(UOptionCommonCell) == 0x000500, "Wrong size on UOptionCommonCell");
static_assert(offsetof(UOptionCommonCell, WidgetSwitcher_Option) == 0x000480, "Member 'UOptionCommonCell::WidgetSwitcher_Option' has a wrong offset!");
static_assert(offsetof(UOptionCommonCell, WBP_Option_Sub_Cell_Indicator) == 0x000488, "Member 'UOptionCommonCell::WBP_Option_Sub_Cell_Indicator' has a wrong offset!");
static_assert(offsetof(UOptionCommonCell, WBP_Option_Sub_Cell_Btn) == 0x000490, "Member 'UOptionCommonCell::WBP_Option_Sub_Cell_Btn' has a wrong offset!");
static_assert(offsetof(UOptionCommonCell, WBP_Option_Sub_Cell_Gauge) == 0x000498, "Member 'UOptionCommonCell::WBP_Option_Sub_Cell_Gauge' has a wrong offset!");
static_assert(offsetof(UOptionCommonCell, TXT_Cell_Title) == 0x0004A0, "Member 'UOptionCommonCell::TXT_Cell_Title' has a wrong offset!");
static_assert(offsetof(UOptionCommonCell, Cell_Active_Loop) == 0x0004A8, "Member 'UOptionCommonCell::Cell_Active_Loop' has a wrong offset!");
static_assert(offsetof(UOptionCommonCell, Cell_Selecte_Loop) == 0x0004B0, "Member 'UOptionCommonCell::Cell_Selecte_Loop' has a wrong offset!");
static_assert(offsetof(UOptionCommonCell, WidgetSwitcher_Cursor) == 0x0004B8, "Member 'UOptionCommonCell::WidgetSwitcher_Cursor' has a wrong offset!");
static_assert(offsetof(UOptionCommonCell, DSP_LockCover) == 0x0004C0, "Member 'UOptionCommonCell::DSP_LockCover' has a wrong offset!");
static_assert(offsetof(UOptionCommonCell, OnBackToListEvent) == 0x0004C8, "Member 'UOptionCommonCell::OnBackToListEvent' has a wrong offset!");
static_assert(offsetof(UOptionCommonCell, OnExitMenuEvent) == 0x0004D8, "Member 'UOptionCommonCell::OnExitMenuEvent' has a wrong offset!");
static_assert(offsetof(UOptionCommonCell, OnAcceptCellEvent) == 0x0004E8, "Member 'UOptionCommonCell::OnAcceptCellEvent' has a wrong offset!");

// Class UNION.OptionControlSequence
// 0x00D0 (0x0208 - 0x0138)
class UOptionControlSequence final : public UOptionSequenceBase
{
public:
	TMulticastInlineDelegate<void()>              OnChangeButtonImageEvent;                          // 0x0138(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FControllerSettings>            Settings;                                          // 0x0148(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	EOptionLocalPlayerNumber                      SelectPlayerIndex;                                 // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FKey>                DisplayKeyConfigs;                                 // 0x0160(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FKey>                PrevDisplayKeyConfigs;                             // 0x01B0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x8];                                      // 0x0200(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChangeCellItem(const class FText& Text);
	void OnExitKeyConfig(bool Val);
	void OnGageDecisionEvent(uint8 kind, float Val);
	void OnIndicatorDecisionEvent(uint8 kind, uint8 Val);
	void OnIndicatorMoveEvent(uint8 kind, uint8 Val);
	void OnMoveKeyConfigListItem(EKeyConfigRace Val);
	void OpenKeyConfigWindow();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionControlSequence">();
	}
	static class UOptionControlSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionControlSequence>();
	}
};
static_assert(alignof(UOptionControlSequence) == 0x000008, "Wrong alignment on UOptionControlSequence");
static_assert(sizeof(UOptionControlSequence) == 0x000208, "Wrong size on UOptionControlSequence");
static_assert(offsetof(UOptionControlSequence, OnChangeButtonImageEvent) == 0x000138, "Member 'UOptionControlSequence::OnChangeButtonImageEvent' has a wrong offset!");
static_assert(offsetof(UOptionControlSequence, Settings) == 0x000148, "Member 'UOptionControlSequence::Settings' has a wrong offset!");
static_assert(offsetof(UOptionControlSequence, SelectPlayerIndex) == 0x000158, "Member 'UOptionControlSequence::SelectPlayerIndex' has a wrong offset!");
static_assert(offsetof(UOptionControlSequence, DisplayKeyConfigs) == 0x000160, "Member 'UOptionControlSequence::DisplayKeyConfigs' has a wrong offset!");
static_assert(offsetof(UOptionControlSequence, PrevDisplayKeyConfigs) == 0x0001B0, "Member 'UOptionControlSequence::PrevDisplayKeyConfigs' has a wrong offset!");

// Class UNION.OptionExplain
// 0x0010 (0x02F0 - 0x02E0)
class UOptionExplain final : public UUserWidget
{
public:
	class URichTextBlock*                         TXT_Explan;                                        // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 DMY_Option_Image;                                  // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionExplain">();
	}
	static class UOptionExplain* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionExplain>();
	}
};
static_assert(alignof(UOptionExplain) == 0x000008, "Wrong alignment on UOptionExplain");
static_assert(sizeof(UOptionExplain) == 0x0002F0, "Wrong size on UOptionExplain");
static_assert(offsetof(UOptionExplain, TXT_Explan) == 0x0002E0, "Member 'UOptionExplain::TXT_Explan' has a wrong offset!");
static_assert(offsetof(UOptionExplain, DMY_Option_Image) == 0x0002E8, "Member 'UOptionExplain::DMY_Option_Image' has a wrong offset!");

// Class UNION.OptionGraphicSequence
// 0x0088 (0x01C0 - 0x0138)
class UOptionGraphicSequence final : public UOptionSequenceBase
{
public:
	float                                         PopupShowTime;                                     // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x6C];                                     // 0x013C(0x006C)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ApplyParamPopup;                                   // 0x01A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B0[0x10];                                     // 0x01B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateConfirmWindow(TDelegate<void(bool isApply)> Callback);
	void OnClosePopupDecision(bool isApply);
	void OnDecisionBrightness(float Val);
	void OnIndicatorDecisionEvent(uint8 kind, uint8 Val);
	void OnMoveBrightness(float Val);
	void OnPopupDecision(class UUnionUIButtonBase* Button, int32 panelIdx, int32 buttonIdx);
	void OpenBrightnessWindow();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionGraphicSequence">();
	}
	static class UOptionGraphicSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionGraphicSequence>();
	}
};
static_assert(alignof(UOptionGraphicSequence) == 0x000008, "Wrong alignment on UOptionGraphicSequence");
static_assert(sizeof(UOptionGraphicSequence) == 0x0001C0, "Wrong size on UOptionGraphicSequence");
static_assert(offsetof(UOptionGraphicSequence, PopupShowTime) == 0x000138, "Member 'UOptionGraphicSequence::PopupShowTime' has a wrong offset!");
static_assert(offsetof(UOptionGraphicSequence, ApplyParamPopup) == 0x0001A8, "Member 'UOptionGraphicSequence::ApplyParamPopup' has a wrong offset!");

// Class UNION.OptionKeyConfigCell
// 0x0048 (0x04C8 - 0x0480)
class UOptionKeyConfigCell final : public UUnionUIButtonBase
{
public:
	uint8                                         Pad_480[0x8];                                      // 0x0480(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsGamePadKey;                                     // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OpenConfigWindow;                                  // 0x0490(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        WidgetSwitcher_Cursor;                             // 0x04A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x04A8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnChangeHoverCellEvent;                            // 0x04B8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)

public:
	void BackToListEvent();
	void ChangeKeyAssginMode(const bool IsEnable);
	void Deactivate();
	void SetKeyData(const struct FKey& InKey, bool isDisable);
	void ShowKeyAssignDialog();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionKeyConfigCell">();
	}
	static class UOptionKeyConfigCell* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionKeyConfigCell>();
	}
};
static_assert(alignof(UOptionKeyConfigCell) == 0x000008, "Wrong alignment on UOptionKeyConfigCell");
static_assert(sizeof(UOptionKeyConfigCell) == 0x0004C8, "Wrong size on UOptionKeyConfigCell");
static_assert(offsetof(UOptionKeyConfigCell, bIsGamePadKey) == 0x000488, "Member 'UOptionKeyConfigCell::bIsGamePadKey' has a wrong offset!");
static_assert(offsetof(UOptionKeyConfigCell, OpenConfigWindow) == 0x000490, "Member 'UOptionKeyConfigCell::OpenConfigWindow' has a wrong offset!");
static_assert(offsetof(UOptionKeyConfigCell, WidgetSwitcher_Cursor) == 0x0004A0, "Member 'UOptionKeyConfigCell::WidgetSwitcher_Cursor' has a wrong offset!");
static_assert(offsetof(UOptionKeyConfigCell, OnBackEvent) == 0x0004A8, "Member 'UOptionKeyConfigCell::OnBackEvent' has a wrong offset!");
static_assert(offsetof(UOptionKeyConfigCell, OnChangeHoverCellEvent) == 0x0004B8, "Member 'UOptionKeyConfigCell::OnChangeHoverCellEvent' has a wrong offset!");

// Class UNION.OptionKeyconfigListItem
// 0x0110 (0x0590 - 0x0480)
class UOptionKeyconfigListItem final : public UUnionUIButtonBase
{
public:
	uint8                                         Pad_480[0x70];                                     // 0x0480(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRichTextBlock*                    TXT_Cell_Title;                                    // 0x04F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Cell_Active_Loop;                                  // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Cell_Selecte_Loop;                                 // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionKeyConfigCell*                   WBP_Option_Sub_Key_Cell_Config_Pri;                // 0x0508(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionKeyConfigCell*                   WBP_Option_Sub_Key_Cell_Config_Sec;                // 0x0510(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionKeyConfigCell*                   WBP_Option_Sub_Key_Cell_Config_pad;                // 0x0518(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackToListEvent;                                 // 0x0520(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitMenuEvent;                                   // 0x0530(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TDelegate<void(class FName val1, uint8 val2, const struct FKey& val3)> OnSwapKeyEvent;           // 0x0540(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAcceptItemEvent;                                 // 0x0550(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UKeyConfigItem*                         KeyBordData;                                       // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKeyConfigItem*                         GamePadData;                                       // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurrentControlKeyName;                             // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57C[0x14];                                     // 0x057C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BackToListEvent();
	void KeyAssignCancel();
	void OnOpenGamePadKeyAssignWindow();
	void OnOpenPrimaryKeyAssignWindow();
	void OnOpenSecondaryKeyAssignWindow();
	void SetCellTitle(const class FText& Text);
	void SetGamePadKeyData(const struct FKey& InGamePadKey);
	void SetKeyItem(class FName KeyName, class UKeyConfigItem* inKeyBordData, class UKeyConfigItem* inGamePadData);
	void SetPrimaryKeyData(const struct FKey& InPrimaryKey);
	void SetSeconderyKeyData(const struct FKey& InSecondaryKey);

	int32 GetItemIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionKeyconfigListItem">();
	}
	static class UOptionKeyconfigListItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionKeyconfigListItem>();
	}
};
static_assert(alignof(UOptionKeyconfigListItem) == 0x000008, "Wrong alignment on UOptionKeyconfigListItem");
static_assert(sizeof(UOptionKeyconfigListItem) == 0x000590, "Wrong size on UOptionKeyconfigListItem");
static_assert(offsetof(UOptionKeyconfigListItem, TXT_Cell_Title) == 0x0004F0, "Member 'UOptionKeyconfigListItem::TXT_Cell_Title' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, Cell_Active_Loop) == 0x0004F8, "Member 'UOptionKeyconfigListItem::Cell_Active_Loop' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, Cell_Selecte_Loop) == 0x000500, "Member 'UOptionKeyconfigListItem::Cell_Selecte_Loop' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, WBP_Option_Sub_Key_Cell_Config_Pri) == 0x000508, "Member 'UOptionKeyconfigListItem::WBP_Option_Sub_Key_Cell_Config_Pri' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, WBP_Option_Sub_Key_Cell_Config_Sec) == 0x000510, "Member 'UOptionKeyconfigListItem::WBP_Option_Sub_Key_Cell_Config_Sec' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, WBP_Option_Sub_Key_Cell_Config_pad) == 0x000518, "Member 'UOptionKeyconfigListItem::WBP_Option_Sub_Key_Cell_Config_pad' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, OnBackToListEvent) == 0x000520, "Member 'UOptionKeyconfigListItem::OnBackToListEvent' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, OnExitMenuEvent) == 0x000530, "Member 'UOptionKeyconfigListItem::OnExitMenuEvent' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, OnSwapKeyEvent) == 0x000540, "Member 'UOptionKeyconfigListItem::OnSwapKeyEvent' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, OnAcceptItemEvent) == 0x000550, "Member 'UOptionKeyconfigListItem::OnAcceptItemEvent' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, KeyBordData) == 0x000560, "Member 'UOptionKeyconfigListItem::KeyBordData' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, GamePadData) == 0x000568, "Member 'UOptionKeyconfigListItem::GamePadData' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, CurrentControlKeyName) == 0x000570, "Member 'UOptionKeyconfigListItem::CurrentControlKeyName' has a wrong offset!");
static_assert(offsetof(UOptionKeyconfigListItem, ItemIndex) == 0x000578, "Member 'UOptionKeyconfigListItem::ItemIndex' has a wrong offset!");

// Class UNION.RaceResultSequenceStateCeremony
// 0x0000 (0x0108 - 0x0108)
class URaceResultSequenceStateCeremony : public URaceResultSequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceResultSequenceStateCeremony">();
	}
	static class URaceResultSequenceStateCeremony* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceResultSequenceStateCeremony>();
	}
};
static_assert(alignof(URaceResultSequenceStateCeremony) == 0x000008, "Wrong alignment on URaceResultSequenceStateCeremony");
static_assert(sizeof(URaceResultSequenceStateCeremony) == 0x000108, "Wrong size on URaceResultSequenceStateCeremony");

// Class UNION.OptionLanguageSequence
// 0x0068 (0x01A0 - 0x0138)
class UOptionLanguageSequence final : public UOptionSequenceBase
{
public:
	TSoftObjectPtr<class UWorld>                  ReloadLevel;                                       // 0x0138(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x28];                                     // 0x0160(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReloadPopup;                                       // 0x0188(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_190[0x10];                                     // 0x0190(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateReloadWindow();
	void OnIndicatorDecisionEvent(uint8 kind, uint8 Val);
	void OnIndicatorMoveEvent(uint8 kind, uint8 Val);
	void OnReloadPopupDecision(class UUnionUIButtonBase* Button, int32 panelIdx, int32 buttonIdx);
	void OnReloadSetteings();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionLanguageSequence">();
	}
	static class UOptionLanguageSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionLanguageSequence>();
	}
};
static_assert(alignof(UOptionLanguageSequence) == 0x000008, "Wrong alignment on UOptionLanguageSequence");
static_assert(sizeof(UOptionLanguageSequence) == 0x0001A0, "Wrong size on UOptionLanguageSequence");
static_assert(offsetof(UOptionLanguageSequence, ReloadLevel) == 0x000138, "Member 'UOptionLanguageSequence::ReloadLevel' has a wrong offset!");
static_assert(offsetof(UOptionLanguageSequence, ReloadPopup) == 0x000188, "Member 'UOptionLanguageSequence::ReloadPopup' has a wrong offset!");

// Class UNION.OptionOnlineSequence
// 0x0018 (0x0150 - 0x0138)
class UOptionOnlineSequence final : public UOptionSequenceBase
{
public:
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            WaitConnectPopup;                                  // 0x0140(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            ErrorConnectPopup;                                 // 0x0148(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DestroyErrorWindow(class UUnionUIButtonBase* Button, int32 panelIdx, int32 buttonIdx);
	void OnCompleteSave(ESaveDataStatus Status);
	void OnIndicatorDecisionEvent(uint8 kind, uint8 Val);
	void OnNetworkRecieve(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionOnlineSequence">();
	}
	static class UOptionOnlineSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionOnlineSequence>();
	}
};
static_assert(alignof(UOptionOnlineSequence) == 0x000008, "Wrong alignment on UOptionOnlineSequence");
static_assert(sizeof(UOptionOnlineSequence) == 0x000150, "Wrong size on UOptionOnlineSequence");
static_assert(offsetof(UOptionOnlineSequence, WaitConnectPopup) == 0x000140, "Member 'UOptionOnlineSequence::WaitConnectPopup' has a wrong offset!");
static_assert(offsetof(UOptionOnlineSequence, ErrorConnectPopup) == 0x000148, "Member 'UOptionOnlineSequence::ErrorConnectPopup' has a wrong offset!");

// Class UNION.OptionProcessor
// 0x00D0 (0x0360 - 0x0290)
class AOptionProcessor final : public AActor
{
public:
	class UOptionRaceSequence*                    RaceSequence;                                      // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionControlSequence*                 ControlSequence;                                   // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionLanguageSequence*                LanguageSequence;                                  // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionGraphicSequence*                 GraphicSequence;                                   // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionAudioSequence*                   AudioSequence;                                     // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionOnlineSequence*                  OnlineSequence;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoActive;                                        // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   OptionWidgetClass;                                 // 0x02C8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitMenuEvent;                                   // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UOptionWidget*                          OptionWidget;                                      // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOptionSequenceBase*                    CurrentSequence;                                   // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_310[0x50];                                     // 0x0310(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeButtonImageEvent();
	void OnChangeTab(EOptionTab Next);
	void OnExitFromWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionProcessor">();
	}
	static class AOptionProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AOptionProcessor>();
	}
};
static_assert(alignof(AOptionProcessor) == 0x000008, "Wrong alignment on AOptionProcessor");
static_assert(sizeof(AOptionProcessor) == 0x000360, "Wrong size on AOptionProcessor");
static_assert(offsetof(AOptionProcessor, RaceSequence) == 0x000290, "Member 'AOptionProcessor::RaceSequence' has a wrong offset!");
static_assert(offsetof(AOptionProcessor, ControlSequence) == 0x000298, "Member 'AOptionProcessor::ControlSequence' has a wrong offset!");
static_assert(offsetof(AOptionProcessor, LanguageSequence) == 0x0002A0, "Member 'AOptionProcessor::LanguageSequence' has a wrong offset!");
static_assert(offsetof(AOptionProcessor, GraphicSequence) == 0x0002A8, "Member 'AOptionProcessor::GraphicSequence' has a wrong offset!");
static_assert(offsetof(AOptionProcessor, AudioSequence) == 0x0002B0, "Member 'AOptionProcessor::AudioSequence' has a wrong offset!");
static_assert(offsetof(AOptionProcessor, OnlineSequence) == 0x0002B8, "Member 'AOptionProcessor::OnlineSequence' has a wrong offset!");
static_assert(offsetof(AOptionProcessor, AutoActive) == 0x0002C0, "Member 'AOptionProcessor::AutoActive' has a wrong offset!");
static_assert(offsetof(AOptionProcessor, OptionWidgetClass) == 0x0002C8, "Member 'AOptionProcessor::OptionWidgetClass' has a wrong offset!");
static_assert(offsetof(AOptionProcessor, OnExitMenuEvent) == 0x0002F0, "Member 'AOptionProcessor::OnExitMenuEvent' has a wrong offset!");
static_assert(offsetof(AOptionProcessor, OptionWidget) == 0x000300, "Member 'AOptionProcessor::OptionWidget' has a wrong offset!");
static_assert(offsetof(AOptionProcessor, CurrentSequence) == 0x000308, "Member 'AOptionProcessor::CurrentSequence' has a wrong offset!");

// Class UNION.OptionRaceSequence
// 0x0010 (0x0148 - 0x0138)
class UOptionRaceSequence final : public UOptionSequenceBase
{
public:
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnIndicatorDecisionEvent(uint8 kind, uint8 Val);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionRaceSequence">();
	}
	static class UOptionRaceSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionRaceSequence>();
	}
};
static_assert(alignof(UOptionRaceSequence) == 0x000008, "Wrong alignment on UOptionRaceSequence");
static_assert(sizeof(UOptionRaceSequence) == 0x000148, "Wrong size on UOptionRaceSequence");

// Class UNION.OptionScene
// 0x0030 (0x0408 - 0x03D8)
class UOptionScene final : public UUnionUISceneBase
{
public:
	TArray<class UCommonMenuOptionButton*>        OptionButtonArr;                                   // 0x03D8(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Window_In;                                         // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Window_Loop;                                       // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Window_Out;                                        // 0x03F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionSequenceMainState                      MainState;                                         // 0x0400(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeOption();
	void InitializeSelectMainOption(const TArray<ECommonMenuButtonType>& BeltButtonTypeArr);
	void PlayAnimationIn();
	void PlayAnimationLoop();
	void PlayAnimationOut();
	void SetupOption();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionScene">();
	}
	static class UOptionScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionScene>();
	}
};
static_assert(alignof(UOptionScene) == 0x000008, "Wrong alignment on UOptionScene");
static_assert(sizeof(UOptionScene) == 0x000408, "Wrong size on UOptionScene");
static_assert(offsetof(UOptionScene, OptionButtonArr) == 0x0003D8, "Member 'UOptionScene::OptionButtonArr' has a wrong offset!");
static_assert(offsetof(UOptionScene, Window_In) == 0x0003E8, "Member 'UOptionScene::Window_In' has a wrong offset!");
static_assert(offsetof(UOptionScene, Window_Loop) == 0x0003F0, "Member 'UOptionScene::Window_Loop' has a wrong offset!");
static_assert(offsetof(UOptionScene, Window_Out) == 0x0003F8, "Member 'UOptionScene::Window_Out' has a wrong offset!");
static_assert(offsetof(UOptionScene, MainState) == 0x000400, "Member 'UOptionScene::MainState' has a wrong offset!");

// Class UNION.OptionSequence
// 0x0050 (0x03B8 - 0x0368)
class AOptionSequence final : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   UISceneClass;                                      // 0x0370(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionUISceneBase*                      UIScene;                                           // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EOptionSequenceMainState                      PrevSequenceState;                                 // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EOptionSequenceMainState                      SelectedMainState;                                 // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B2[0x6];                                      // 0x03B2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnInitStateOptionTop();
	void OnInitStateSelectMainOption();
	void SetNextOptionSequenceState(EOptionSequenceMainState InState, EOptionSequenceMainState PrevState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionSequence">();
	}
	static class AOptionSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AOptionSequence>();
	}
};
static_assert(alignof(AOptionSequence) == 0x000008, "Wrong alignment on AOptionSequence");
static_assert(sizeof(AOptionSequence) == 0x0003B8, "Wrong size on AOptionSequence");
static_assert(offsetof(AOptionSequence, UISceneClass) == 0x000370, "Member 'AOptionSequence::UISceneClass' has a wrong offset!");
static_assert(offsetof(AOptionSequence, UIScene) == 0x000398, "Member 'AOptionSequence::UIScene' has a wrong offset!");
static_assert(offsetof(AOptionSequence, OnBackEvent) == 0x0003A0, "Member 'AOptionSequence::OnBackEvent' has a wrong offset!");
static_assert(offsetof(AOptionSequence, PrevSequenceState) == 0x0003B0, "Member 'AOptionSequence::PrevSequenceState' has a wrong offset!");
static_assert(offsetof(AOptionSequence, SelectedMainState) == 0x0003B1, "Member 'AOptionSequence::SelectedMainState' has a wrong offset!");

// Class UNION.OptionState
// 0x0040 (0x0168 - 0x0128)
class UOptionState final : public UMenuSequenceSubStateBase
{
public:
	TSoftClassPtr<class UClass>                   OptionActorClass;                                  // 0x0128(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class AOptionProcessor*                       OptionActor;                                       // 0x0160(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnExitMenu();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionState">();
	}
	static class UOptionState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionState>();
	}
};
static_assert(alignof(UOptionState) == 0x000008, "Wrong alignment on UOptionState");
static_assert(sizeof(UOptionState) == 0x000168, "Wrong size on UOptionState");
static_assert(offsetof(UOptionState, OptionActorClass) == 0x000128, "Member 'UOptionState::OptionActorClass' has a wrong offset!");
static_assert(offsetof(UOptionState, OnBackEvent) == 0x000150, "Member 'UOptionState::OnBackEvent' has a wrong offset!");
static_assert(offsetof(UOptionState, OptionActor) == 0x000160, "Member 'UOptionState::OptionActor' has a wrong offset!");

// Class UNION.OptionStateTab
// 0x0040 (0x0320 - 0x02E0)
class UOptionStateTab final : public UUserWidget
{
public:
	TMulticastInlineDelegate<void(EOptionTab InType)> OnClickEvent;                                  // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UOptionStateTabBtn*                     TabOnline;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionStateTabBtn*                     TabRace;                                           // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionStateTabBtn*                     TabControl;                                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionStateTabBtn*                     TabLanguage;                                       // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionStateTabBtn*                     TabGraphics;                                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionStateTabBtn*                     TabAudio;                                          // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnClick(class UOptionStateTabBtn* InButton);
	void UpdateShoulderButton();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionStateTab">();
	}
	static class UOptionStateTab* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionStateTab>();
	}
};
static_assert(alignof(UOptionStateTab) == 0x000008, "Wrong alignment on UOptionStateTab");
static_assert(sizeof(UOptionStateTab) == 0x000320, "Wrong size on UOptionStateTab");
static_assert(offsetof(UOptionStateTab, OnClickEvent) == 0x0002E0, "Member 'UOptionStateTab::OnClickEvent' has a wrong offset!");
static_assert(offsetof(UOptionStateTab, TabOnline) == 0x0002F0, "Member 'UOptionStateTab::TabOnline' has a wrong offset!");
static_assert(offsetof(UOptionStateTab, TabRace) == 0x0002F8, "Member 'UOptionStateTab::TabRace' has a wrong offset!");
static_assert(offsetof(UOptionStateTab, TabControl) == 0x000300, "Member 'UOptionStateTab::TabControl' has a wrong offset!");
static_assert(offsetof(UOptionStateTab, TabLanguage) == 0x000308, "Member 'UOptionStateTab::TabLanguage' has a wrong offset!");
static_assert(offsetof(UOptionStateTab, TabGraphics) == 0x000310, "Member 'UOptionStateTab::TabGraphics' has a wrong offset!");
static_assert(offsetof(UOptionStateTab, TabAudio) == 0x000318, "Member 'UOptionStateTab::TabAudio' has a wrong offset!");

// Class UNION.OptionStateTabBtn
// 0x0040 (0x04C0 - 0x0480)
class UOptionStateTabBtn final : public UUnionUIButtonBase
{
public:
	TMulticastInlineDelegate<void(class UOptionStateTabBtn* InButton)> OnClickEvent;                 // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UImage*                                 PAT_BtnIcon;                                       // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Tab_Active_Loop;                                   // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Tab_Select_Loop;                                   // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Tab_NonActive_Loop;                                // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoRevertTime;                                    // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B4[0xC];                                      // 0x04B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionStateTabBtn">();
	}
	static class UOptionStateTabBtn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionStateTabBtn>();
	}
};
static_assert(alignof(UOptionStateTabBtn) == 0x000008, "Wrong alignment on UOptionStateTabBtn");
static_assert(sizeof(UOptionStateTabBtn) == 0x0004C0, "Wrong size on UOptionStateTabBtn");
static_assert(offsetof(UOptionStateTabBtn, OnClickEvent) == 0x000480, "Member 'UOptionStateTabBtn::OnClickEvent' has a wrong offset!");
static_assert(offsetof(UOptionStateTabBtn, PAT_BtnIcon) == 0x000490, "Member 'UOptionStateTabBtn::PAT_BtnIcon' has a wrong offset!");
static_assert(offsetof(UOptionStateTabBtn, Tab_Active_Loop) == 0x000498, "Member 'UOptionStateTabBtn::Tab_Active_Loop' has a wrong offset!");
static_assert(offsetof(UOptionStateTabBtn, Tab_Select_Loop) == 0x0004A0, "Member 'UOptionStateTabBtn::Tab_Select_Loop' has a wrong offset!");
static_assert(offsetof(UOptionStateTabBtn, Tab_NonActive_Loop) == 0x0004A8, "Member 'UOptionStateTabBtn::Tab_NonActive_Loop' has a wrong offset!");
static_assert(offsetof(UOptionStateTabBtn, AutoRevertTime) == 0x0004B0, "Member 'UOptionStateTabBtn::AutoRevertTime' has a wrong offset!");

// Class UNION.OptionWidget
// 0x00A0 (0x0380 - 0x02E0)
class UOptionWidget final : public UUserWidget
{
public:
	class UCommonPlayerNumber*                    DSP_WBP_CMN_PlayerNumber;                          // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 PAT_Option_Icon;                                   // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URichTextBlock*                         TXT_Option_Title;                                  // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionStateTab*                        WBP_Option_Tab;                                    // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        WidgetSwitcher_Info;                               // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionCellList*                        WBP_Option_Sub_List;                               // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionExplain*                         WBP_Option_Sub_Explan;                             // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionWindowBrightness*                WBP_Option_Sub_Brightness;                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionWindowKeyConfig*                 WBP_Option_Sub_KeyConfig;                          // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Option_In;                                         // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Option_Loop;                                       // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Option_Out;                                        // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EOptionTab Next)> OnChangeTabEvent;                                // 0x0340(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitTopEvent;                                    // 0x0350(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRevertDefaultEvent;                              // 0x0360(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UMenuInputRecieveObject*                InputRecieve;                                      // 0x0370(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChangeHoverCell(const class FText& Text);
	void OnCloseWidget();
	void OnRevertDefault(class UObject* obj);
	void OnTabChange(EOptionTab InTab);
	void OnTabLeft(class UObject* obj);
	void OnTabRight(class UObject* obj);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionWidget">();
	}
	static class UOptionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionWidget>();
	}
};
static_assert(alignof(UOptionWidget) == 0x000008, "Wrong alignment on UOptionWidget");
static_assert(sizeof(UOptionWidget) == 0x000380, "Wrong size on UOptionWidget");
static_assert(offsetof(UOptionWidget, DSP_WBP_CMN_PlayerNumber) == 0x0002E0, "Member 'UOptionWidget::DSP_WBP_CMN_PlayerNumber' has a wrong offset!");
static_assert(offsetof(UOptionWidget, PAT_Option_Icon) == 0x0002E8, "Member 'UOptionWidget::PAT_Option_Icon' has a wrong offset!");
static_assert(offsetof(UOptionWidget, TXT_Option_Title) == 0x0002F0, "Member 'UOptionWidget::TXT_Option_Title' has a wrong offset!");
static_assert(offsetof(UOptionWidget, WBP_Option_Tab) == 0x0002F8, "Member 'UOptionWidget::WBP_Option_Tab' has a wrong offset!");
static_assert(offsetof(UOptionWidget, WidgetSwitcher_Info) == 0x000300, "Member 'UOptionWidget::WidgetSwitcher_Info' has a wrong offset!");
static_assert(offsetof(UOptionWidget, WBP_Option_Sub_List) == 0x000308, "Member 'UOptionWidget::WBP_Option_Sub_List' has a wrong offset!");
static_assert(offsetof(UOptionWidget, WBP_Option_Sub_Explan) == 0x000310, "Member 'UOptionWidget::WBP_Option_Sub_Explan' has a wrong offset!");
static_assert(offsetof(UOptionWidget, WBP_Option_Sub_Brightness) == 0x000318, "Member 'UOptionWidget::WBP_Option_Sub_Brightness' has a wrong offset!");
static_assert(offsetof(UOptionWidget, WBP_Option_Sub_KeyConfig) == 0x000320, "Member 'UOptionWidget::WBP_Option_Sub_KeyConfig' has a wrong offset!");
static_assert(offsetof(UOptionWidget, Option_In) == 0x000328, "Member 'UOptionWidget::Option_In' has a wrong offset!");
static_assert(offsetof(UOptionWidget, Option_Loop) == 0x000330, "Member 'UOptionWidget::Option_Loop' has a wrong offset!");
static_assert(offsetof(UOptionWidget, Option_Out) == 0x000338, "Member 'UOptionWidget::Option_Out' has a wrong offset!");
static_assert(offsetof(UOptionWidget, OnChangeTabEvent) == 0x000340, "Member 'UOptionWidget::OnChangeTabEvent' has a wrong offset!");
static_assert(offsetof(UOptionWidget, OnExitTopEvent) == 0x000350, "Member 'UOptionWidget::OnExitTopEvent' has a wrong offset!");
static_assert(offsetof(UOptionWidget, OnRevertDefaultEvent) == 0x000360, "Member 'UOptionWidget::OnRevertDefaultEvent' has a wrong offset!");
static_assert(offsetof(UOptionWidget, InputRecieve) == 0x000370, "Member 'UOptionWidget::InputRecieve' has a wrong offset!");

// Class UNION.OptionWindowBrightness
// 0x0058 (0x04D8 - 0x0480)
class UOptionWindowBrightness final : public UUnionUIButtonBase
{
public:
	uint8                                         Pad_480[0x20];                                     // 0x0480(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIButton*                         LButton;                                           // 0x04A0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButton*                         RButton;                                           // 0x04A8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Left;                                              // 0x04B0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Right;                                             // 0x04B8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USlider*                                Slider_BlackWhite;                                 // 0x04C0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BrightnessImageMin;                                // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrightnessImageMax;                                // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D0[0x8];                                      // 0x04D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddValue(float InValue);
	void OnAddValue(float InValue);
	void UpdateStatus(float InValue);

	float GetSliderStep() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionWindowBrightness">();
	}
	static class UOptionWindowBrightness* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionWindowBrightness>();
	}
};
static_assert(alignof(UOptionWindowBrightness) == 0x000008, "Wrong alignment on UOptionWindowBrightness");
static_assert(sizeof(UOptionWindowBrightness) == 0x0004D8, "Wrong size on UOptionWindowBrightness");
static_assert(offsetof(UOptionWindowBrightness, LButton) == 0x0004A0, "Member 'UOptionWindowBrightness::LButton' has a wrong offset!");
static_assert(offsetof(UOptionWindowBrightness, RButton) == 0x0004A8, "Member 'UOptionWindowBrightness::RButton' has a wrong offset!");
static_assert(offsetof(UOptionWindowBrightness, Left) == 0x0004B0, "Member 'UOptionWindowBrightness::Left' has a wrong offset!");
static_assert(offsetof(UOptionWindowBrightness, Right) == 0x0004B8, "Member 'UOptionWindowBrightness::Right' has a wrong offset!");
static_assert(offsetof(UOptionWindowBrightness, Slider_BlackWhite) == 0x0004C0, "Member 'UOptionWindowBrightness::Slider_BlackWhite' has a wrong offset!");
static_assert(offsetof(UOptionWindowBrightness, BrightnessImageMin) == 0x0004C8, "Member 'UOptionWindowBrightness::BrightnessImageMin' has a wrong offset!");
static_assert(offsetof(UOptionWindowBrightness, BrightnessImageMax) == 0x0004CC, "Member 'UOptionWindowBrightness::BrightnessImageMax' has a wrong offset!");

// Class UNION.OptionWindowKeyConfig
// 0x0428 (0x0800 - 0x03D8)
class UOptionWindowKeyConfig final : public UUnionUISceneBase
{
public:
	uint8                                         Pad_3D8[0x8];                                      // 0x03D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FKey>                DisplayKeyConfigs;                                 // 0x03E0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FKey>                PrevDisplayKeyConfigs;                             // 0x0430(0x0050)(NativeAccessSpecifierPrivate)
	class UPanelWidget*                           ParentPanel;                                       // 0x0480(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIButtonsPanel*                   ButtonPanel;                                       // 0x0488(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UOptionKeyconfigListItem*>       CellList;                                          // 0x0490(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A0[0x20];                                     // 0x04A0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKeyConfigCellGuideParam>       GuideList;                                         // 0x04C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class FName, class UKeyConfigItem*>      KeyBordKeyMapData;                                 // 0x04D0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, class UKeyConfigItem*>      GamePadKeyMapData;                                 // 0x0520(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FKey>                KeybordPrimaryKeyMap;                              // 0x0570(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FKey>                KeybordSecondaryKeyMap;                            // 0x05C0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FKey>                GamePadKeyMap;                                     // 0x0610(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FKeyConfigCategoryKeyData> DisplayKeyMapData;                           // 0x0660(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_6B0[0x18];                                     // 0x06B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   HornKeyboardKey;                                   // 0x06C8(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FKey                                   HornKeyboardSecondaryKey;                          // 0x06E0(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FKey                                   HornGamePadKey;                                    // 0x06F8(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_710[0x8];                                      // 0x0710(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CreateErrorPopup;                                  // 0x0718(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UOptionCommonAsset>      CommonAssetData;                                   // 0x0720(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UInputDataAsset>         InputAssetData;                                    // 0x0748(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              CellTable;                                         // 0x0770(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollBox*                             InnerScroll;                                       // 0x0798(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FText Text)> OnChangeHoverCellEvent;                   // 0x07A0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TDelegate<void(bool Val)>                     OnExitWindowEvent;                                 // 0x07B0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C0[0x20];                                     // 0x07C0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOptionKeyConfigCellTableRow>   TableDataArray;                                    // 0x07E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TableDataNameArray;                                // 0x07F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void CheckRemoveHornKeyAssign();
	void CheckSpecialKeyPrimaryAssigned();
	void ConfigListItemAccept();
	void DestroyErrorWindow(class UUnionUIButtonBase* Button, int32 panelIdx, int32 buttonIdx);
	void Init(EOptionLocalPlayerNumber SelectPlayerNumber);
	void MoveLeftTriggerKeySecondary();
	void MoveRightTriggerKeySecondary();
	void OnBackToCellList();
	void OnExitMenu();
	void OnFocusButtonItem(class UUnionUIButtonBase* InButton);
	void OpenWindow();
	void SetHornAssignKey();
	void SetlistItemFocus();
	void SetupSwapKey(class FName ChangeKeyName, uint8 KeyType, const struct FKey& NewKey);
	void SetupWindow();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OptionWindowKeyConfig">();
	}
	static class UOptionWindowKeyConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptionWindowKeyConfig>();
	}
};
static_assert(alignof(UOptionWindowKeyConfig) == 0x000008, "Wrong alignment on UOptionWindowKeyConfig");
static_assert(sizeof(UOptionWindowKeyConfig) == 0x000800, "Wrong size on UOptionWindowKeyConfig");
static_assert(offsetof(UOptionWindowKeyConfig, DisplayKeyConfigs) == 0x0003E0, "Member 'UOptionWindowKeyConfig::DisplayKeyConfigs' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, PrevDisplayKeyConfigs) == 0x000430, "Member 'UOptionWindowKeyConfig::PrevDisplayKeyConfigs' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, ParentPanel) == 0x000480, "Member 'UOptionWindowKeyConfig::ParentPanel' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, ButtonPanel) == 0x000488, "Member 'UOptionWindowKeyConfig::ButtonPanel' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, CellList) == 0x000490, "Member 'UOptionWindowKeyConfig::CellList' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, GuideList) == 0x0004C0, "Member 'UOptionWindowKeyConfig::GuideList' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, KeyBordKeyMapData) == 0x0004D0, "Member 'UOptionWindowKeyConfig::KeyBordKeyMapData' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, GamePadKeyMapData) == 0x000520, "Member 'UOptionWindowKeyConfig::GamePadKeyMapData' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, KeybordPrimaryKeyMap) == 0x000570, "Member 'UOptionWindowKeyConfig::KeybordPrimaryKeyMap' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, KeybordSecondaryKeyMap) == 0x0005C0, "Member 'UOptionWindowKeyConfig::KeybordSecondaryKeyMap' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, GamePadKeyMap) == 0x000610, "Member 'UOptionWindowKeyConfig::GamePadKeyMap' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, DisplayKeyMapData) == 0x000660, "Member 'UOptionWindowKeyConfig::DisplayKeyMapData' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, HornKeyboardKey) == 0x0006C8, "Member 'UOptionWindowKeyConfig::HornKeyboardKey' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, HornKeyboardSecondaryKey) == 0x0006E0, "Member 'UOptionWindowKeyConfig::HornKeyboardSecondaryKey' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, HornGamePadKey) == 0x0006F8, "Member 'UOptionWindowKeyConfig::HornGamePadKey' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, CreateErrorPopup) == 0x000718, "Member 'UOptionWindowKeyConfig::CreateErrorPopup' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, CommonAssetData) == 0x000720, "Member 'UOptionWindowKeyConfig::CommonAssetData' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, InputAssetData) == 0x000748, "Member 'UOptionWindowKeyConfig::InputAssetData' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, CellTable) == 0x000770, "Member 'UOptionWindowKeyConfig::CellTable' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, InnerScroll) == 0x000798, "Member 'UOptionWindowKeyConfig::InnerScroll' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, OnChangeHoverCellEvent) == 0x0007A0, "Member 'UOptionWindowKeyConfig::OnChangeHoverCellEvent' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, OnExitWindowEvent) == 0x0007B0, "Member 'UOptionWindowKeyConfig::OnExitWindowEvent' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, TableDataArray) == 0x0007E0, "Member 'UOptionWindowKeyConfig::TableDataArray' has a wrong offset!");
static_assert(offsetof(UOptionWindowKeyConfig, TableDataNameArray) == 0x0007F0, "Member 'UOptionWindowKeyConfig::TableDataNameArray' has a wrong offset!");

// Class UNION.ResultCameraDataAsset
// 0x00C8 (0x00F8 - 0x0030)
class UResultCameraDataAsset final : public UDataAsset
{
public:
	float                                         StartUpCompTime;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartUpEaseExp;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledRotationRag;                                // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProdCompTimeDefault;                               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProductionFlowRandom;                              // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EResultCameraProductionType>           ProductionFlowAllay;                               // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EResultCameraProductionType, struct FRaceCameraMapElement> DefaultProductionMap;            // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EDriverId, struct FRaceCameraCustomParam> DriverParam;                                      // 0x00A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void RenameDefaultProdMap();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResultCameraDataAsset">();
	}
	static class UResultCameraDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResultCameraDataAsset>();
	}
};
static_assert(alignof(UResultCameraDataAsset) == 0x000008, "Wrong alignment on UResultCameraDataAsset");
static_assert(sizeof(UResultCameraDataAsset) == 0x0000F8, "Wrong size on UResultCameraDataAsset");
static_assert(offsetof(UResultCameraDataAsset, StartUpCompTime) == 0x000030, "Member 'UResultCameraDataAsset::StartUpCompTime' has a wrong offset!");
static_assert(offsetof(UResultCameraDataAsset, StartUpEaseExp) == 0x000034, "Member 'UResultCameraDataAsset::StartUpEaseExp' has a wrong offset!");
static_assert(offsetof(UResultCameraDataAsset, EnabledRotationRag) == 0x000038, "Member 'UResultCameraDataAsset::EnabledRotationRag' has a wrong offset!");
static_assert(offsetof(UResultCameraDataAsset, ProdCompTimeDefault) == 0x000040, "Member 'UResultCameraDataAsset::ProdCompTimeDefault' has a wrong offset!");
static_assert(offsetof(UResultCameraDataAsset, ProductionFlowRandom) == 0x000044, "Member 'UResultCameraDataAsset::ProductionFlowRandom' has a wrong offset!");
static_assert(offsetof(UResultCameraDataAsset, ProductionFlowAllay) == 0x000048, "Member 'UResultCameraDataAsset::ProductionFlowAllay' has a wrong offset!");
static_assert(offsetof(UResultCameraDataAsset, DefaultProductionMap) == 0x000058, "Member 'UResultCameraDataAsset::DefaultProductionMap' has a wrong offset!");
static_assert(offsetof(UResultCameraDataAsset, DriverParam) == 0x0000A8, "Member 'UResultCameraDataAsset::DriverParam' has a wrong offset!");

// Class UNION.PartyRaceBeforeRaceMissionWidget
// 0x0028 (0x0318 - 0x02F0)
class UPartyRaceBeforeRaceMissionWidget final : public UCommonUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnInAnimationFinishedEvent;                        // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOutAnimationFinishedEvent;                       // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UPartyRaceResultMissionTableWidget*     _MissionTableWidget;                               // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnInAnimationFinished();
	void OnOutAnimationFinished();
	void PlayInAnimation();
	void PlayOutAnimation();
	void SetMissionDataBP(const TArray<struct FPartyRaceMissionData>& MissionData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceBeforeRaceMissionWidget">();
	}
	static class UPartyRaceBeforeRaceMissionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceBeforeRaceMissionWidget>();
	}
};
static_assert(alignof(UPartyRaceBeforeRaceMissionWidget) == 0x000008, "Wrong alignment on UPartyRaceBeforeRaceMissionWidget");
static_assert(sizeof(UPartyRaceBeforeRaceMissionWidget) == 0x000318, "Wrong size on UPartyRaceBeforeRaceMissionWidget");
static_assert(offsetof(UPartyRaceBeforeRaceMissionWidget, OnInAnimationFinishedEvent) == 0x0002F0, "Member 'UPartyRaceBeforeRaceMissionWidget::OnInAnimationFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceBeforeRaceMissionWidget, OnOutAnimationFinishedEvent) == 0x000300, "Member 'UPartyRaceBeforeRaceMissionWidget::OnOutAnimationFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceBeforeRaceMissionWidget, _MissionTableWidget) == 0x000310, "Member 'UPartyRaceBeforeRaceMissionWidget::_MissionTableWidget' has a wrong offset!");

// Class UNION.StickerBakerHandle
// 0x0018 (0x0040 - 0x0028)
class UStickerBakerHandle final : public UObject
{
public:
	bool                                          IsRear;                                            // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AUnionStickerBaker*                     Baker;                                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetHandle();

	class AUnionStickerBaker* GetBaker() const;
	class UTexture* GetBakeResult() const;
	bool IsBakingComplete() const;
	bool IsHandleDead() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StickerBakerHandle">();
	}
	static class UStickerBakerHandle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStickerBakerHandle>();
	}
};
static_assert(alignof(UStickerBakerHandle) == 0x000008, "Wrong alignment on UStickerBakerHandle");
static_assert(sizeof(UStickerBakerHandle) == 0x000040, "Wrong size on UStickerBakerHandle");
static_assert(offsetof(UStickerBakerHandle, IsRear) == 0x000028, "Member 'UStickerBakerHandle::IsRear' has a wrong offset!");
static_assert(offsetof(UStickerBakerHandle, Baker) == 0x000030, "Member 'UStickerBakerHandle::Baker' has a wrong offset!");

// Class UNION.PartyRaceConfirmScene
// 0x0038 (0x0410 - 0x03D8)
class UPartyRaceConfirmScene : public UUnionUISceneBase
{
public:
	class UUnionUIButtonsPanel*                   OptionButtonPanel;                                 // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPartyRaceSubOptionBtn*>         OptionButtonArr;                                   // 0x03E0(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       PartyRace_Option_In;                               // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       PartyRace_Option_Loop;                             // 0x03F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       PartyRace_Option_Out;                              // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyRaceConfirmButton                       LastFocusItemSwitchOrRaceSetting;                  // 0x0408(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GuestEvent();
	void OnGroupSettingSelect(int32 Index_0);
	void OnSpeedClassSelect(int32 Index_0);
	void SetPresetName(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceConfirmScene">();
	}
	static class UPartyRaceConfirmScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceConfirmScene>();
	}
};
static_assert(alignof(UPartyRaceConfirmScene) == 0x000008, "Wrong alignment on UPartyRaceConfirmScene");
static_assert(sizeof(UPartyRaceConfirmScene) == 0x000410, "Wrong size on UPartyRaceConfirmScene");
static_assert(offsetof(UPartyRaceConfirmScene, OptionButtonPanel) == 0x0003D8, "Member 'UPartyRaceConfirmScene::OptionButtonPanel' has a wrong offset!");
static_assert(offsetof(UPartyRaceConfirmScene, OptionButtonArr) == 0x0003E0, "Member 'UPartyRaceConfirmScene::OptionButtonArr' has a wrong offset!");
static_assert(offsetof(UPartyRaceConfirmScene, PartyRace_Option_In) == 0x0003F0, "Member 'UPartyRaceConfirmScene::PartyRace_Option_In' has a wrong offset!");
static_assert(offsetof(UPartyRaceConfirmScene, PartyRace_Option_Loop) == 0x0003F8, "Member 'UPartyRaceConfirmScene::PartyRace_Option_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceConfirmScene, PartyRace_Option_Out) == 0x000400, "Member 'UPartyRaceConfirmScene::PartyRace_Option_Out' has a wrong offset!");
static_assert(offsetof(UPartyRaceConfirmScene, LastFocusItemSwitchOrRaceSetting) == 0x000408, "Member 'UPartyRaceConfirmScene::LastFocusItemSwitchOrRaceSetting' has a wrong offset!");

// Class UNION.PartyRaceCourseIcon
// 0x0018 (0x0498 - 0x0480)
class UPartyRaceCourseIcon : public UUnionUIButtonBase
{
public:
	class UPartyRaceCourseSwitch*                 TopParent;                                         // 0x0480(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCourseSwitchSettingSingle             Setting;                                           // 0x0488(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckIsGuest(bool IsGuest);
	struct FStageDataAssetTableRow GetDataTable(class UDataTable* DataTable);
	void OnUpdatedBP();
	void SetFocusBP(bool bIsFocus);
	void SetSelectBP(bool bIsSelect);
	void SetSelectSoundOffCountBP(int32 Count);
	void UpdateSetting(const struct FCourseSwitchSettingSingle& InSetting);

	const int32 GetIconIndex() const;
	const EStageId GetStageId() const;
	const EPartyRaceCourseSwitchState GetState() const;
	const EPartyRaceCourseSwitchTag GetTag() const;
	const bool IsDLC() const;
	const bool IsNew() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceCourseIcon">();
	}
	static class UPartyRaceCourseIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceCourseIcon>();
	}
};
static_assert(alignof(UPartyRaceCourseIcon) == 0x000008, "Wrong alignment on UPartyRaceCourseIcon");
static_assert(sizeof(UPartyRaceCourseIcon) == 0x000498, "Wrong size on UPartyRaceCourseIcon");
static_assert(offsetof(UPartyRaceCourseIcon, TopParent) == 0x000480, "Member 'UPartyRaceCourseIcon::TopParent' has a wrong offset!");
static_assert(offsetof(UPartyRaceCourseIcon, Setting) == 0x000488, "Member 'UPartyRaceCourseIcon::Setting' has a wrong offset!");

// Class UNION.PartyRaceCourseSwitch
// 0x0068 (0x0348 - 0x02E0)
class UPartyRaceCourseSwitch : public UUserWidget
{
public:
	class UPartyRaceCourseSwitchWindow*           CourseSwitchWindow;                                // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyRaceCourseSwitchTag                     CourseSwitchTag;                                   // 0x02E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CurrentCursorIndexList;                            // 0x02F0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCourseSwitchSetting                   CourseSwitchSetting;                               // 0x0300(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCourseSwitchSetting                   BackUp_CourseSwitchSetting;                        // 0x0318(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<EStageId>                              ShippingUnreleasedStageIds;                        // 0x0330(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UStageUnlockInfoDataAsset*              StageUnlockInfoAsset;                              // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BackupCurrentSetting();
	void ChangeTag(EPartyRaceCourseSwitchTag Tag);
	void ChangeTagImplEvent(EPartyRaceCourseSwitchTag Tag);
	void CheckIsGuest(bool IsGuest);
	void DecisionIconIndex(int32 Index_0);
	void DestroyQuitConfirmWidget();
	class UPartyRaceCourseIcon* GetCourseIcon(int32 Index_0);
	int32 GetCursorIndex();
	void Init(class UDataTable* DataTable);
	bool IsSelectingSameButton(bool IsSelect);
	void ResetFromBackUp();
	void SelectAllIcon(bool bIsSelect);
	void SetCursorIconFocus(bool bIsFocus);
	void SetCursorIconFocusOutAll(int32 NotOutIndex);
	void SetCursorIndex(int32 Index_0);
	bool SetDecisionLastSelect();
	void Update();
	void UpdateCourseSwitchData(class UDataTable* DataTable);

	bool CheckIsSameSetting() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceCourseSwitch">();
	}
	static class UPartyRaceCourseSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceCourseSwitch>();
	}
};
static_assert(alignof(UPartyRaceCourseSwitch) == 0x000008, "Wrong alignment on UPartyRaceCourseSwitch");
static_assert(sizeof(UPartyRaceCourseSwitch) == 0x000348, "Wrong size on UPartyRaceCourseSwitch");
static_assert(offsetof(UPartyRaceCourseSwitch, CourseSwitchWindow) == 0x0002E0, "Member 'UPartyRaceCourseSwitch::CourseSwitchWindow' has a wrong offset!");
static_assert(offsetof(UPartyRaceCourseSwitch, CourseSwitchTag) == 0x0002E8, "Member 'UPartyRaceCourseSwitch::CourseSwitchTag' has a wrong offset!");
static_assert(offsetof(UPartyRaceCourseSwitch, CurrentCursorIndexList) == 0x0002F0, "Member 'UPartyRaceCourseSwitch::CurrentCursorIndexList' has a wrong offset!");
static_assert(offsetof(UPartyRaceCourseSwitch, CourseSwitchSetting) == 0x000300, "Member 'UPartyRaceCourseSwitch::CourseSwitchSetting' has a wrong offset!");
static_assert(offsetof(UPartyRaceCourseSwitch, BackUp_CourseSwitchSetting) == 0x000318, "Member 'UPartyRaceCourseSwitch::BackUp_CourseSwitchSetting' has a wrong offset!");
static_assert(offsetof(UPartyRaceCourseSwitch, ShippingUnreleasedStageIds) == 0x000330, "Member 'UPartyRaceCourseSwitch::ShippingUnreleasedStageIds' has a wrong offset!");
static_assert(offsetof(UPartyRaceCourseSwitch, StageUnlockInfoAsset) == 0x000340, "Member 'UPartyRaceCourseSwitch::StageUnlockInfoAsset' has a wrong offset!");

// Class UNION.BakeDebugActor
// 0x0008 (0x0298 - 0x0290)
class ABakeDebugActor final : public AActor
{
public:
	class UBakeWaitingWidget*                     m_WaitingWidget;                                   // 0x0290(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BakeDebugActor">();
	}
	static class ABakeDebugActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABakeDebugActor>();
	}
};
static_assert(alignof(ABakeDebugActor) == 0x000008, "Wrong alignment on ABakeDebugActor");
static_assert(sizeof(ABakeDebugActor) == 0x000298, "Wrong size on ABakeDebugActor");
static_assert(offsetof(ABakeDebugActor, m_WaitingWidget) == 0x000290, "Member 'ABakeDebugActor::m_WaitingWidget' has a wrong offset!");

// Class UNION.PartyRaceCourseSwitchWindow
// 0x0048 (0x0420 - 0x03D8)
class UPartyRaceCourseSwitchWindow : public UUnionUISceneBase
{
public:
	class UPartyRaceCourseSwitch*                 TopParent;                                         // 0x03D8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EStageId>                              DisableCourseArr;                                  // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class UPartyRaceCourseIcon*>           CourseIconList;                                    // 0x03F0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class FText>                           WindowButtonNameArr;                               // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UUnionUIButtonBase*>             CourseSwitchWindowButtonArr;                       // 0x0410(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void ApplyCourseSwitchEnablePattern(const TArray<EStageId>& InPatternArr);
	void ApplyWindowButtonSetting(EPartyRaceCourseSwitchWindowButton InWindowButtonSetting);
	void StartRandomBP();
	void UpdateSetting();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceCourseSwitchWindow">();
	}
	static class UPartyRaceCourseSwitchWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceCourseSwitchWindow>();
	}
};
static_assert(alignof(UPartyRaceCourseSwitchWindow) == 0x000008, "Wrong alignment on UPartyRaceCourseSwitchWindow");
static_assert(sizeof(UPartyRaceCourseSwitchWindow) == 0x000420, "Wrong size on UPartyRaceCourseSwitchWindow");
static_assert(offsetof(UPartyRaceCourseSwitchWindow, TopParent) == 0x0003D8, "Member 'UPartyRaceCourseSwitchWindow::TopParent' has a wrong offset!");
static_assert(offsetof(UPartyRaceCourseSwitchWindow, DisableCourseArr) == 0x0003E0, "Member 'UPartyRaceCourseSwitchWindow::DisableCourseArr' has a wrong offset!");
static_assert(offsetof(UPartyRaceCourseSwitchWindow, CourseIconList) == 0x0003F0, "Member 'UPartyRaceCourseSwitchWindow::CourseIconList' has a wrong offset!");
static_assert(offsetof(UPartyRaceCourseSwitchWindow, WindowButtonNameArr) == 0x000400, "Member 'UPartyRaceCourseSwitchWindow::WindowButtonNameArr' has a wrong offset!");
static_assert(offsetof(UPartyRaceCourseSwitchWindow, CourseSwitchWindowButtonArr) == 0x000410, "Member 'UPartyRaceCourseSwitchWindow::CourseSwitchWindowButtonArr' has a wrong offset!");

// Class UNION.PartyRaceItemIcon
// 0x00B0 (0x0530 - 0x0480)
class UPartyRaceItemIcon : public UUnionUIButtonBase
{
public:
	EItemId                                       ItemId;                                            // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMultiple;                                       // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ItemCount;                                         // 0x0482(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingGrouping                          GroupSetting;                                      // 0x0483(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, bool>                             GroupIndex_ItemEnableMap;                          // 0x0488(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EPartyRaceItemSwitchState                     ItemSwitchState;                                   // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetSwitcher*                        ItemSwitchPanalHolder;                             // 0x04E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 NonActiveImagePanel;                               // 0x04E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 CursorPanel;                                       // 0x04F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Active_Loop;                                       // 0x04F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Select_Loop;                                       // 0x0500(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       NonActive_Loop;                                    // 0x0508(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ItemIconMaterial;                                  // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOverlay*                               DSP_RingNum;                                       // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_520[0x10];                                     // 0x0520(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeToNextSetting();
	void CheckIsGuest(bool IsGuest);
	void OnUpdatedBP();
	void SetALLGroupSetting(const TMap<int32, bool>& InGroupIndex_ItemEnableMap);
	void SetEnableSetting(int32 GroupIndex, bool bInEnable);
	void SetEnableSettingAutoGroup(bool bInEnable);
	void SetItemId(const EItemId InItemId, bool bInMultiple);
	void SetItemTexture(class UTexture* InTexture);
	void UpdateSetting();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceItemIcon">();
	}
	static class UPartyRaceItemIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceItemIcon>();
	}
};
static_assert(alignof(UPartyRaceItemIcon) == 0x000008, "Wrong alignment on UPartyRaceItemIcon");
static_assert(sizeof(UPartyRaceItemIcon) == 0x000530, "Wrong size on UPartyRaceItemIcon");
static_assert(offsetof(UPartyRaceItemIcon, ItemId) == 0x000480, "Member 'UPartyRaceItemIcon::ItemId' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, bIsMultiple) == 0x000481, "Member 'UPartyRaceItemIcon::bIsMultiple' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, ItemCount) == 0x000482, "Member 'UPartyRaceItemIcon::ItemCount' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, GroupSetting) == 0x000483, "Member 'UPartyRaceItemIcon::GroupSetting' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, GroupIndex_ItemEnableMap) == 0x000488, "Member 'UPartyRaceItemIcon::GroupIndex_ItemEnableMap' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, ItemSwitchState) == 0x0004D8, "Member 'UPartyRaceItemIcon::ItemSwitchState' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, ItemSwitchPanalHolder) == 0x0004E0, "Member 'UPartyRaceItemIcon::ItemSwitchPanalHolder' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, NonActiveImagePanel) == 0x0004E8, "Member 'UPartyRaceItemIcon::NonActiveImagePanel' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, CursorPanel) == 0x0004F0, "Member 'UPartyRaceItemIcon::CursorPanel' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, Active_Loop) == 0x0004F8, "Member 'UPartyRaceItemIcon::Active_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, Select_Loop) == 0x000500, "Member 'UPartyRaceItemIcon::Select_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, NonActive_Loop) == 0x000508, "Member 'UPartyRaceItemIcon::NonActive_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, ItemIconMaterial) == 0x000510, "Member 'UPartyRaceItemIcon::ItemIconMaterial' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemIcon, DSP_RingNum) == 0x000518, "Member 'UPartyRaceItemIcon::DSP_RingNum' has a wrong offset!");

// Class UNION.PartyRaceItemSwitch
// 0x0040 (0x0320 - 0x02E0)
class UPartyRaceItemSwitch : public UUserWidget
{
public:
	class UPartyRaceItemSwitchWindow*             ItemSwitchWindow;                                  // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPartyRaceItemSwitchDetail*             ItemSwitchDetail;                                  // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemSwitchSetting                     ItemSwitchSettingBackUpSingle;                     // 0x02F0(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FItemSwitchSetting                     ItemSwitchSettingBackUpGroup;                      // 0x0308(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void BackupCurrentSetting();
	void CheckIsGuest(bool IsGuest);
	void DecideCurrentSetting(bool* IsRuleChanged);
	void DestroyQuitConfirmWidget();
	void ResetFromBackUp();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceItemSwitch">();
	}
	static class UPartyRaceItemSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceItemSwitch>();
	}
};
static_assert(alignof(UPartyRaceItemSwitch) == 0x000008, "Wrong alignment on UPartyRaceItemSwitch");
static_assert(sizeof(UPartyRaceItemSwitch) == 0x000320, "Wrong size on UPartyRaceItemSwitch");
static_assert(offsetof(UPartyRaceItemSwitch, ItemSwitchWindow) == 0x0002E0, "Member 'UPartyRaceItemSwitch::ItemSwitchWindow' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemSwitch, ItemSwitchDetail) == 0x0002E8, "Member 'UPartyRaceItemSwitch::ItemSwitchDetail' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemSwitch, ItemSwitchSettingBackUpSingle) == 0x0002F0, "Member 'UPartyRaceItemSwitch::ItemSwitchSettingBackUpSingle' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemSwitch, ItemSwitchSettingBackUpGroup) == 0x000308, "Member 'UPartyRaceItemSwitch::ItemSwitchSettingBackUpGroup' has a wrong offset!");

// Class UNION.PartyRaceItemSwitchDetail
// 0x0008 (0x02E8 - 0x02E0)
class UPartyRaceItemSwitchDetail : public UUserWidget
{
public:
	EItemId                                       CurrentItem;                                       // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayDescription();
	void UpdateItem(EItemId InItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceItemSwitchDetail">();
	}
	static class UPartyRaceItemSwitchDetail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceItemSwitchDetail>();
	}
};
static_assert(alignof(UPartyRaceItemSwitchDetail) == 0x000008, "Wrong alignment on UPartyRaceItemSwitchDetail");
static_assert(sizeof(UPartyRaceItemSwitchDetail) == 0x0002E8, "Wrong size on UPartyRaceItemSwitchDetail");
static_assert(offsetof(UPartyRaceItemSwitchDetail, CurrentItem) == 0x0002E0, "Member 'UPartyRaceItemSwitchDetail::CurrentItem' has a wrong offset!");

// Class UNION.RecoveryRingExit
// 0x0048 (0x02D8 - 0x0290)
class ARecoveryRingExit : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              BodyComponent;                                     // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimelineComponent*                     AppearTimelineComponent;                           // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowTime;                                          // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTimeReverse;                                     // 0x02AC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float Output)>                 AppearUpdateEvent;                                 // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             AppearFinishedEvent;                               // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AppearTimelineUpdate(float Ratio);
	void AppearTimelineUpdate_BP(float Ratio);
	void FinishAppearTimeline();
	void FinishAppearTimeline_BP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RecoveryRingExit">();
	}
	static class ARecoveryRingExit* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARecoveryRingExit>();
	}
};
static_assert(alignof(ARecoveryRingExit) == 0x000008, "Wrong alignment on ARecoveryRingExit");
static_assert(sizeof(ARecoveryRingExit) == 0x0002D8, "Wrong size on ARecoveryRingExit");
static_assert(offsetof(ARecoveryRingExit, Root) == 0x000290, "Member 'ARecoveryRingExit::Root' has a wrong offset!");
static_assert(offsetof(ARecoveryRingExit, BodyComponent) == 0x000298, "Member 'ARecoveryRingExit::BodyComponent' has a wrong offset!");
static_assert(offsetof(ARecoveryRingExit, AppearTimelineComponent) == 0x0002A0, "Member 'ARecoveryRingExit::AppearTimelineComponent' has a wrong offset!");
static_assert(offsetof(ARecoveryRingExit, ShowTime) == 0x0002A8, "Member 'ARecoveryRingExit::ShowTime' has a wrong offset!");
static_assert(offsetof(ARecoveryRingExit, IsTimeReverse) == 0x0002AC, "Member 'ARecoveryRingExit::IsTimeReverse' has a wrong offset!");
static_assert(offsetof(ARecoveryRingExit, AppearUpdateEvent) == 0x0002B0, "Member 'ARecoveryRingExit::AppearUpdateEvent' has a wrong offset!");
static_assert(offsetof(ARecoveryRingExit, AppearFinishedEvent) == 0x0002C0, "Member 'ARecoveryRingExit::AppearFinishedEvent' has a wrong offset!");

// Class UNION.PartyRaceItemSwitchWindow
// 0x00A8 (0x0480 - 0x03D8)
class UPartyRaceItemSwitchWindow : public UUnionUISceneBase
{
public:
	TArray<EItemId>                               DisableItemArr;                                    // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TMap<EItemId, class UPartyRaceItemIcon*>      ItemId_IconMap;                                    // 0x03E8(0x0050)(Edit, BlueprintVisible, ExportObject, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPartyRaceItemIcon*>             ItemIconArr;                                       // 0x0438(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class FText>                           WindowButtonNameArr;                               // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UUnionUIButtonBase*>             ItemSwitchWindowButtonArr;                         // 0x0458(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_468[0x18];                                     // 0x0468(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddIcon(const TArray<class UPartyRaceItemIcon*>& InIconArr);
	void ApplyItemSwitchEnablePattern(const TArray<EItemId>& InPatternArr);
	void ApplyWindowButtonSetting(EPartyRaceItemSwitchWindowButton InWindowButtonSetting);
	void HideCertainItems(int32 GroupIndex);
	bool IsButtonChanged(const TArray<struct FItemSwitchSettingSingle>& BackupSetting);
	bool IsSameButtonPressing(EPartyRaceItemSwitchWindowButton InWindowButtonSetting);
	void StartRandomBP();
	void UpdateSetting();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceItemSwitchWindow">();
	}
	static class UPartyRaceItemSwitchWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceItemSwitchWindow>();
	}
};
static_assert(alignof(UPartyRaceItemSwitchWindow) == 0x000008, "Wrong alignment on UPartyRaceItemSwitchWindow");
static_assert(sizeof(UPartyRaceItemSwitchWindow) == 0x000480, "Wrong size on UPartyRaceItemSwitchWindow");
static_assert(offsetof(UPartyRaceItemSwitchWindow, DisableItemArr) == 0x0003D8, "Member 'UPartyRaceItemSwitchWindow::DisableItemArr' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemSwitchWindow, ItemId_IconMap) == 0x0003E8, "Member 'UPartyRaceItemSwitchWindow::ItemId_IconMap' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemSwitchWindow, ItemIconArr) == 0x000438, "Member 'UPartyRaceItemSwitchWindow::ItemIconArr' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemSwitchWindow, WindowButtonNameArr) == 0x000448, "Member 'UPartyRaceItemSwitchWindow::WindowButtonNameArr' has a wrong offset!");
static_assert(offsetof(UPartyRaceItemSwitchWindow, ItemSwitchWindowButtonArr) == 0x000458, "Member 'UPartyRaceItemSwitchWindow::ItemSwitchWindowButtonArr' has a wrong offset!");

// Class UNION.PartyRaceMenuCustomizeRuleState
// 0x0140 (0x0268 - 0x0128)
class UPartyRaceMenuCustomizeRuleState : public UMenuSequenceSubStateBase
{
public:
	class UPartyRaceConfirmScene*                 PartyRaceConfirmScene;                             // 0x0128(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomRaceDetailRuleScene*             CustomRaceDetailRuleScene;                         // 0x0130(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPartyRaceItemSwitch*                   PartyRaceItemSwitch;                               // 0x0138(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPartyRaceCourseSwitch*                 PartyRaceCourseSwitch;                             // 0x0140(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionUIPopupWindowBase*                PopupWindow;                                       // 0x0148(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGuest;                                           // 0x0150(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnCancelAndPrevSequence;                           // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnNextSeqeunce;                                    // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     LoadedStageThumbnailTextureArray;                  // 0x0178(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_188[0xE0];                                     // 0x0188(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindFinalConfirmCancelEvent();
	bool CheckSameCourseSwitch(const TArray<EStageId>& CheckCourseSwitch);
	bool CheckSameCustomMatchRule();
	bool CheckSameItemSwitch(const struct FItemSwitchSetting& CheckItemSwitch);
	bool CheckSameRaceRule(const struct FPartyRacePresetSetting& CheckRule);
	class UUserWidget* CreateCheckPopupWindow(const class FText& InBodyText, const TArray<class FText>& InButtonText);
	void ExitCustomizeRuleMenu();
	void ForceCancelEvent();
	class APartyRaceMenuSequence* GetOwnerPartyRaceMenuSequence();
	void LoadFinishStageThumbnail();
	void LoadStageThumbnail();
	void OnDecideCheckRuleWindow(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void ResetCustomMatchRule();
	void SetIsGuest(bool Guest);
	void SetPrevCustomMatchRule(const struct FPartyRacePresetSetting& InRaceSetting, const struct FItemSwitchSetting& InItemSwitch, const TArray<EStageId>& InCourseSwitch);
	void SetPrivateMatchCustomRaceRule();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceMenuCustomizeRuleState">();
	}
	static class UPartyRaceMenuCustomizeRuleState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceMenuCustomizeRuleState>();
	}
};
static_assert(alignof(UPartyRaceMenuCustomizeRuleState) == 0x000008, "Wrong alignment on UPartyRaceMenuCustomizeRuleState");
static_assert(sizeof(UPartyRaceMenuCustomizeRuleState) == 0x000268, "Wrong size on UPartyRaceMenuCustomizeRuleState");
static_assert(offsetof(UPartyRaceMenuCustomizeRuleState, PartyRaceConfirmScene) == 0x000128, "Member 'UPartyRaceMenuCustomizeRuleState::PartyRaceConfirmScene' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuCustomizeRuleState, CustomRaceDetailRuleScene) == 0x000130, "Member 'UPartyRaceMenuCustomizeRuleState::CustomRaceDetailRuleScene' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuCustomizeRuleState, PartyRaceItemSwitch) == 0x000138, "Member 'UPartyRaceMenuCustomizeRuleState::PartyRaceItemSwitch' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuCustomizeRuleState, PartyRaceCourseSwitch) == 0x000140, "Member 'UPartyRaceMenuCustomizeRuleState::PartyRaceCourseSwitch' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuCustomizeRuleState, PopupWindow) == 0x000148, "Member 'UPartyRaceMenuCustomizeRuleState::PopupWindow' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuCustomizeRuleState, IsGuest) == 0x000150, "Member 'UPartyRaceMenuCustomizeRuleState::IsGuest' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuCustomizeRuleState, OnCancelAndPrevSequence) == 0x000158, "Member 'UPartyRaceMenuCustomizeRuleState::OnCancelAndPrevSequence' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuCustomizeRuleState, OnNextSeqeunce) == 0x000168, "Member 'UPartyRaceMenuCustomizeRuleState::OnNextSeqeunce' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuCustomizeRuleState, LoadedStageThumbnailTextureArray) == 0x000178, "Member 'UPartyRaceMenuCustomizeRuleState::LoadedStageThumbnailTextureArray' has a wrong offset!");

// Class UNION.PartyRaceMenuItemSwitchState
// 0x0000 (0x0128 - 0x0128)
class UPartyRaceMenuItemSwitchState final : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceMenuItemSwitchState">();
	}
	static class UPartyRaceMenuItemSwitchState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceMenuItemSwitchState>();
	}
};
static_assert(alignof(UPartyRaceMenuItemSwitchState) == 0x000008, "Wrong alignment on UPartyRaceMenuItemSwitchState");
static_assert(sizeof(UPartyRaceMenuItemSwitchState) == 0x000128, "Wrong size on UPartyRaceMenuItemSwitchState");

// Class UNION.PartyRaceMenuRivalTeamSelect
// 0x0008 (0x0130 - 0x0128)
class UPartyRaceMenuRivalTeamSelect : public UMenuSequenceSubStateBase
{
public:
	class URivalTeamSelectWidget*                 RivalTeamSelectScene;                              // 0x0128(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceMenuRivalTeamSelect">();
	}
	static class UPartyRaceMenuRivalTeamSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceMenuRivalTeamSelect>();
	}
};
static_assert(alignof(UPartyRaceMenuRivalTeamSelect) == 0x000008, "Wrong alignment on UPartyRaceMenuRivalTeamSelect");
static_assert(sizeof(UPartyRaceMenuRivalTeamSelect) == 0x000130, "Wrong size on UPartyRaceMenuRivalTeamSelect");
static_assert(offsetof(UPartyRaceMenuRivalTeamSelect, RivalTeamSelectScene) == 0x000128, "Member 'UPartyRaceMenuRivalTeamSelect::RivalTeamSelectScene' has a wrong offset!");

// Class UNION.SimpleNpcStaticDataAsset
// 0x00A0 (0x00D0 - 0x0030)
class USimpleNpcStaticDataAsset final : public UPrimaryDataAsset
{
public:
	TSoftObjectPtr<class UStaticMesh>             VehicleMesh;                                       // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             MonsterTruckMesh;                                  // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           FrontRivalEngineSound;                             // 0x0080(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           RearRivalEngineSound;                              // 0x00A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleNpcStaticDataAsset">();
	}
	static class USimpleNpcStaticDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleNpcStaticDataAsset>();
	}
};
static_assert(alignof(USimpleNpcStaticDataAsset) == 0x000008, "Wrong alignment on USimpleNpcStaticDataAsset");
static_assert(sizeof(USimpleNpcStaticDataAsset) == 0x0000D0, "Wrong size on USimpleNpcStaticDataAsset");
static_assert(offsetof(USimpleNpcStaticDataAsset, VehicleMesh) == 0x000030, "Member 'USimpleNpcStaticDataAsset::VehicleMesh' has a wrong offset!");
static_assert(offsetof(USimpleNpcStaticDataAsset, MonsterTruckMesh) == 0x000058, "Member 'USimpleNpcStaticDataAsset::MonsterTruckMesh' has a wrong offset!");
static_assert(offsetof(USimpleNpcStaticDataAsset, FrontRivalEngineSound) == 0x000080, "Member 'USimpleNpcStaticDataAsset::FrontRivalEngineSound' has a wrong offset!");
static_assert(offsetof(USimpleNpcStaticDataAsset, RearRivalEngineSound) == 0x0000A8, "Member 'USimpleNpcStaticDataAsset::RearRivalEngineSound' has a wrong offset!");

// Class UNION.PartyRaceMenuSelectClassState
// 0x0000 (0x0128 - 0x0128)
class UPartyRaceMenuSelectClassState : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceMenuSelectClassState">();
	}
	static class UPartyRaceMenuSelectClassState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceMenuSelectClassState>();
	}
};
static_assert(alignof(UPartyRaceMenuSelectClassState) == 0x000008, "Wrong alignment on UPartyRaceMenuSelectClassState");
static_assert(sizeof(UPartyRaceMenuSelectClassState) == 0x000128, "Wrong size on UPartyRaceMenuSelectClassState");

// Class UNION.UnionCrossPlayCheck
// 0x0020 (0x02B0 - 0x0290)
class AUnionCrossPlayCheck : public AActor
{
public:
	TMulticastInlineDelegate<void(bool IsConfirmed)> OnUserConfirmedDelegate;                        // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UUnionUIPopupWindowBase*                m_PopupWindowPtr;                                  // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          m_bIsUserConfirmed;                                // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckCrossPlay();
	void OnUserConfirmation(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void ResetWarningWindow();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionCrossPlayCheck">();
	}
	static class AUnionCrossPlayCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionCrossPlayCheck>();
	}
};
static_assert(alignof(AUnionCrossPlayCheck) == 0x000008, "Wrong alignment on AUnionCrossPlayCheck");
static_assert(sizeof(AUnionCrossPlayCheck) == 0x0002B0, "Wrong size on AUnionCrossPlayCheck");
static_assert(offsetof(AUnionCrossPlayCheck, OnUserConfirmedDelegate) == 0x000290, "Member 'AUnionCrossPlayCheck::OnUserConfirmedDelegate' has a wrong offset!");
static_assert(offsetof(AUnionCrossPlayCheck, m_PopupWindowPtr) == 0x0002A0, "Member 'AUnionCrossPlayCheck::m_PopupWindowPtr' has a wrong offset!");
static_assert(offsetof(AUnionCrossPlayCheck, m_bIsUserConfirmed) == 0x0002A8, "Member 'AUnionCrossPlayCheck::m_bIsUserConfirmed' has a wrong offset!");

// Class UNION.PartyRaceMenuSelectGroupState
// 0x0058 (0x0180 - 0x0128)
class UPartyRaceMenuSelectGroupState : public UMenuSequenceSubStateBase
{
public:
	class UGroupSelect*                           GroupSelectHUD;                                    // 0x0128(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGuest;                                           // 0x0130(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnCancelAndPrevSequence;                           // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnNextSeqeunce;                                    // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         OnlinePlayerCount;                                 // 0x0158(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OwnLobbyIndex;                                     // 0x015C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 LobbyRacersIndex;                                  // 0x0160(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EDriverId>                             LobbyRacersDriverId;                               // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void ApplyCurrentGroupSetting();
	void ForceFixGroupSettings();
	void SetIsGuest(bool Guest);
	void SetLobbyRacersDriverId(const TArray<EDriverId>& inArray);
	void SetLobbyRacersIndex(const TArray<int32>& inArray);
	void SetOnlinePlayerNum(int32 PlayerCount);
	void SetOwnLobbyIndex(int32 InIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceMenuSelectGroupState">();
	}
	static class UPartyRaceMenuSelectGroupState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceMenuSelectGroupState>();
	}
};
static_assert(alignof(UPartyRaceMenuSelectGroupState) == 0x000008, "Wrong alignment on UPartyRaceMenuSelectGroupState");
static_assert(sizeof(UPartyRaceMenuSelectGroupState) == 0x000180, "Wrong size on UPartyRaceMenuSelectGroupState");
static_assert(offsetof(UPartyRaceMenuSelectGroupState, GroupSelectHUD) == 0x000128, "Member 'UPartyRaceMenuSelectGroupState::GroupSelectHUD' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectGroupState, IsGuest) == 0x000130, "Member 'UPartyRaceMenuSelectGroupState::IsGuest' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectGroupState, OnCancelAndPrevSequence) == 0x000138, "Member 'UPartyRaceMenuSelectGroupState::OnCancelAndPrevSequence' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectGroupState, OnNextSeqeunce) == 0x000148, "Member 'UPartyRaceMenuSelectGroupState::OnNextSeqeunce' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectGroupState, OnlinePlayerCount) == 0x000158, "Member 'UPartyRaceMenuSelectGroupState::OnlinePlayerCount' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectGroupState, OwnLobbyIndex) == 0x00015C, "Member 'UPartyRaceMenuSelectGroupState::OwnLobbyIndex' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectGroupState, LobbyRacersIndex) == 0x000160, "Member 'UPartyRaceMenuSelectGroupState::LobbyRacersIndex' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectGroupState, LobbyRacersDriverId) == 0x000170, "Member 'UPartyRaceMenuSelectGroupState::LobbyRacersDriverId' has a wrong offset!");

// Class UNION.PartyRaceMenuSelectPresetState
// 0x0070 (0x0198 - 0x0128)
class UPartyRaceMenuSelectPresetState : public UMenuSequenceSubStateBase
{
public:
	class UPartyRaceSelectPresetScene*            SelectPresetScene;                                 // 0x0128(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LevelDownPopupTextTitle;                           // 0x0130(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LevelDownPopupTextMessage;                         // 0x0140(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LevelDownPopupTextYes;                             // 0x0150(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LevelDownPopupTextNo;                              // 0x0160(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFinishedRivalLevelDown;                          // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecisionRivalLevelDown;                          // 0x0180(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UUnionUIPopupWindowBase*                PopupWindowPtr;                                    // 0x0190(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class APartyRaceMenuSequence* GetOwnerPartyRaceMenuSequence();
	class UPartyRacePresetSelect* GetPartyRacePresetSelectScene();
	void OnRivalLevelDownDecisionEvent(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void SetupRivalLevelDownPopupWindow(bool* SpawnPopup);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceMenuSelectPresetState">();
	}
	static class UPartyRaceMenuSelectPresetState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceMenuSelectPresetState>();
	}
};
static_assert(alignof(UPartyRaceMenuSelectPresetState) == 0x000008, "Wrong alignment on UPartyRaceMenuSelectPresetState");
static_assert(sizeof(UPartyRaceMenuSelectPresetState) == 0x000198, "Wrong size on UPartyRaceMenuSelectPresetState");
static_assert(offsetof(UPartyRaceMenuSelectPresetState, SelectPresetScene) == 0x000128, "Member 'UPartyRaceMenuSelectPresetState::SelectPresetScene' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectPresetState, LevelDownPopupTextTitle) == 0x000130, "Member 'UPartyRaceMenuSelectPresetState::LevelDownPopupTextTitle' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectPresetState, LevelDownPopupTextMessage) == 0x000140, "Member 'UPartyRaceMenuSelectPresetState::LevelDownPopupTextMessage' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectPresetState, LevelDownPopupTextYes) == 0x000150, "Member 'UPartyRaceMenuSelectPresetState::LevelDownPopupTextYes' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectPresetState, LevelDownPopupTextNo) == 0x000160, "Member 'UPartyRaceMenuSelectPresetState::LevelDownPopupTextNo' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectPresetState, OnFinishedRivalLevelDown) == 0x000170, "Member 'UPartyRaceMenuSelectPresetState::OnFinishedRivalLevelDown' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectPresetState, OnDecisionRivalLevelDown) == 0x000180, "Member 'UPartyRaceMenuSelectPresetState::OnDecisionRivalLevelDown' has a wrong offset!");
static_assert(offsetof(UPartyRaceMenuSelectPresetState, PopupWindowPtr) == 0x000190, "Member 'UPartyRaceMenuSelectPresetState::PopupWindowPtr' has a wrong offset!");

// Class UNION.PartyRaceMenuSequence
// 0x00D0 (0x0438 - 0x0368)
class APartyRaceMenuSequence : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPartyRaceSelectPresetScene*            SelectPresetScene;                                 // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPartyRacePresetSelect*                 PartyRacePresetSelect;                             // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyRacePresetSetting                SelectedPresetSetting;                             // 0x0380(0x00B8)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void OnInitStateExit();
	void OnInitStateIdle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceMenuSequence">();
	}
	static class APartyRaceMenuSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<APartyRaceMenuSequence>();
	}
};
static_assert(alignof(APartyRaceMenuSequence) == 0x000008, "Wrong alignment on APartyRaceMenuSequence");
static_assert(sizeof(APartyRaceMenuSequence) == 0x000438, "Wrong size on APartyRaceMenuSequence");
static_assert(offsetof(APartyRaceMenuSequence, SelectPresetScene) == 0x000370, "Member 'APartyRaceMenuSequence::SelectPresetScene' has a wrong offset!");
static_assert(offsetof(APartyRaceMenuSequence, PartyRacePresetSelect) == 0x000378, "Member 'APartyRaceMenuSequence::PartyRacePresetSelect' has a wrong offset!");
static_assert(offsetof(APartyRaceMenuSequence, SelectedPresetSetting) == 0x000380, "Member 'APartyRaceMenuSequence::SelectedPresetSetting' has a wrong offset!");

// Class UNION.PartyRaceMenuTutorialState
// 0x0000 (0x0128 - 0x0128)
class UPartyRaceMenuTutorialState : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceMenuTutorialState">();
	}
	static class UPartyRaceMenuTutorialState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceMenuTutorialState>();
	}
};
static_assert(alignof(UPartyRaceMenuTutorialState) == 0x000008, "Wrong alignment on UPartyRaceMenuTutorialState");
static_assert(sizeof(UPartyRaceMenuTutorialState) == 0x000128, "Wrong size on UPartyRaceMenuTutorialState");

// Class UNION.PartyRacePresetDetail
// 0x0030 (0x0310 - 0x02E0)
class UPartyRacePresetDetail final : public UUserWidget
{
public:
	class UImage*                                 _PresetIconImage;                                  // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               _PresetIconMaterial;                               // 0x02E8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _PresetImageImage;                                 // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _PresetNameText;                                   // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               _PresetNameMaterial;                               // 0x0300(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _PresetDetailText;                                 // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetPreset(int32 PresetIndex, const class FText& PresetName, const class FText& PresetDetail, const struct FLinearColor& PresetColor, class UTexture2D* ImageTexture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRacePresetDetail">();
	}
	static class UPartyRacePresetDetail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRacePresetDetail>();
	}
};
static_assert(alignof(UPartyRacePresetDetail) == 0x000008, "Wrong alignment on UPartyRacePresetDetail");
static_assert(sizeof(UPartyRacePresetDetail) == 0x000310, "Wrong size on UPartyRacePresetDetail");
static_assert(offsetof(UPartyRacePresetDetail, _PresetIconImage) == 0x0002E0, "Member 'UPartyRacePresetDetail::_PresetIconImage' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetDetail, _PresetIconMaterial) == 0x0002E8, "Member 'UPartyRacePresetDetail::_PresetIconMaterial' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetDetail, _PresetImageImage) == 0x0002F0, "Member 'UPartyRacePresetDetail::_PresetImageImage' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetDetail, _PresetNameText) == 0x0002F8, "Member 'UPartyRacePresetDetail::_PresetNameText' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetDetail, _PresetNameMaterial) == 0x000300, "Member 'UPartyRacePresetDetail::_PresetNameMaterial' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetDetail, _PresetDetailText) == 0x000308, "Member 'UPartyRacePresetDetail::_PresetDetailText' has a wrong offset!");

// Class UNION.PartyRacePresetInfo
// 0x0018 (0x02F8 - 0x02E0)
class UPartyRacePresetInfo : public UUserWidget
{
public:
	EPartyRacePreset                              PresetType;                                        // 0x02E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCustomRaceSubOptionPreviewLine*> PreviewInfoLineArr;                               // 0x02E8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRacePresetInfo">();
	}
	static class UPartyRacePresetInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRacePresetInfo>();
	}
};
static_assert(alignof(UPartyRacePresetInfo) == 0x000008, "Wrong alignment on UPartyRacePresetInfo");
static_assert(sizeof(UPartyRacePresetInfo) == 0x0002F8, "Wrong size on UPartyRacePresetInfo");
static_assert(offsetof(UPartyRacePresetInfo, PresetType) == 0x0002E0, "Member 'UPartyRacePresetInfo::PresetType' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetInfo, PreviewInfoLineArr) == 0x0002E8, "Member 'UPartyRacePresetInfo::PreviewInfoLineArr' has a wrong offset!");

// Class UNION.PartyRacePresetSelect
// 0x0150 (0x0528 - 0x03D8)
class UPartyRacePresetSelect : public UUnionUISceneBase
{
public:
	uint8                                         Pad_3D8[0x30];                                     // 0x03D8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	EPartyRacePreset                              CurrentSelectedPresetButton;                       // 0x0408(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPartyRacePreset, struct FPartyRacePresetSetting> CurrentPrsetSettingMap;                   // 0x0410(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EPartyRacePreset, struct FPartyRacePresetSetting> DefaultPrsetSettingMap;                   // 0x0460(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class UPartyRaceSubPresetBtn*>         PresetButtonArr;                                   // 0x04B0(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UUnionUIButtonsPanel*                   PresetButtonsPanel;                                // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyRaceSelectPresetState                   CurrentSelectPresetState;                          // 0x04C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnDecideRivalSelect;                               // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecideGadgetCustom;                              // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayInFinished;                                  // 0x04F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayOutFinished;                                 // 0x0500(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       PartyRace_In;                                      // 0x0510(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       PartyRace_Loop;                                    // 0x0518(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       PartyRace_Out;                                     // 0x0520(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void PlayIn();
	void PlayOut();
	void ResetPreset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRacePresetSelect">();
	}
	static class UPartyRacePresetSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRacePresetSelect>();
	}
};
static_assert(alignof(UPartyRacePresetSelect) == 0x000008, "Wrong alignment on UPartyRacePresetSelect");
static_assert(sizeof(UPartyRacePresetSelect) == 0x000528, "Wrong size on UPartyRacePresetSelect");
static_assert(offsetof(UPartyRacePresetSelect, CurrentSelectedPresetButton) == 0x000408, "Member 'UPartyRacePresetSelect::CurrentSelectedPresetButton' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetSelect, CurrentPrsetSettingMap) == 0x000410, "Member 'UPartyRacePresetSelect::CurrentPrsetSettingMap' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetSelect, DefaultPrsetSettingMap) == 0x000460, "Member 'UPartyRacePresetSelect::DefaultPrsetSettingMap' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetSelect, PresetButtonArr) == 0x0004B0, "Member 'UPartyRacePresetSelect::PresetButtonArr' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetSelect, PresetButtonsPanel) == 0x0004C0, "Member 'UPartyRacePresetSelect::PresetButtonsPanel' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetSelect, CurrentSelectPresetState) == 0x0004C8, "Member 'UPartyRacePresetSelect::CurrentSelectPresetState' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetSelect, OnDecideRivalSelect) == 0x0004D0, "Member 'UPartyRacePresetSelect::OnDecideRivalSelect' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetSelect, OnDecideGadgetCustom) == 0x0004E0, "Member 'UPartyRacePresetSelect::OnDecideGadgetCustom' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetSelect, OnPlayInFinished) == 0x0004F0, "Member 'UPartyRacePresetSelect::OnPlayInFinished' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetSelect, OnPlayOutFinished) == 0x000500, "Member 'UPartyRacePresetSelect::OnPlayOutFinished' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetSelect, PartyRace_In) == 0x000510, "Member 'UPartyRacePresetSelect::PartyRace_In' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetSelect, PartyRace_Loop) == 0x000518, "Member 'UPartyRacePresetSelect::PartyRace_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRacePresetSelect, PartyRace_Out) == 0x000520, "Member 'UPartyRacePresetSelect::PartyRace_Out' has a wrong offset!");

// Class UNION.RaceSequenceStateRivalTeamEliminateResult
// 0x0110 (0x0220 - 0x0110)
class URaceSequenceStateRivalTeamEliminateResult : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   _RivalResultWidgetClass;                           // 0x0118(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   _RewardGetWindowWidgetClass;                       // 0x0140(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   _ResultDonpaTicketClass;                           // 0x0168(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   _SubRivalAllWinWidgetClass;                        // 0x0190(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _RewardWindowTitleText;                            // 0x01B8(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class ASceneInputKeyHandler*                  _InputKeyHandler;                                  // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMenuInputRecieveObject*                _InputReceiver;                                    // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D8[0x10];                                     // 0x01D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UPartyRaceRivalResultWidget*            _RivalResultWidget;                                // 0x01E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URewardGetBase*                         _RewardGetWindowWidget;                            // 0x01F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UResultDonpaTicket*                     _ResultDonpaTicket;                                // 0x01F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x8];                                      // 0x0200(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URewardGetBase*                         _ActiveRewardGetWindow;                            // 0x0208(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UResultDonpaTicket*                     _ActiveResultDonpaTicket;                          // 0x0210(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPartyRaceSubRivalAllWinWidget*         _SubRivalAllWinWidget;                             // 0x0218(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnAcceptKeyPressed(class UObject* Object);
	void OnButtonInput();
	void OnKeyPressed(const struct FKey& PressedKey);
	void OnPlayOutFinished();
	void OnProgressPlayFinished();
	void OnRewardGetWindowFinished();
	void OnRewardGetWindowOpened();
	void OnSubRivalAllWinFinished();
	void OnSubRivalAllWinPlayFinished();
	void OnSubRivalAllWinRewardFinished();
	void OnWidgetLoaded();
	void OnWinPlayFinished();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateRivalTeamEliminateResult">();
	}
	static class URaceSequenceStateRivalTeamEliminateResult* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateRivalTeamEliminateResult>();
	}
};
static_assert(alignof(URaceSequenceStateRivalTeamEliminateResult) == 0x000008, "Wrong alignment on URaceSequenceStateRivalTeamEliminateResult");
static_assert(sizeof(URaceSequenceStateRivalTeamEliminateResult) == 0x000220, "Wrong size on URaceSequenceStateRivalTeamEliminateResult");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _RivalResultWidgetClass) == 0x000118, "Member 'URaceSequenceStateRivalTeamEliminateResult::_RivalResultWidgetClass' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _RewardGetWindowWidgetClass) == 0x000140, "Member 'URaceSequenceStateRivalTeamEliminateResult::_RewardGetWindowWidgetClass' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _ResultDonpaTicketClass) == 0x000168, "Member 'URaceSequenceStateRivalTeamEliminateResult::_ResultDonpaTicketClass' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _SubRivalAllWinWidgetClass) == 0x000190, "Member 'URaceSequenceStateRivalTeamEliminateResult::_SubRivalAllWinWidgetClass' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _RewardWindowTitleText) == 0x0001B8, "Member 'URaceSequenceStateRivalTeamEliminateResult::_RewardWindowTitleText' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _InputKeyHandler) == 0x0001C8, "Member 'URaceSequenceStateRivalTeamEliminateResult::_InputKeyHandler' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _InputReceiver) == 0x0001D0, "Member 'URaceSequenceStateRivalTeamEliminateResult::_InputReceiver' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _RivalResultWidget) == 0x0001E8, "Member 'URaceSequenceStateRivalTeamEliminateResult::_RivalResultWidget' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _RewardGetWindowWidget) == 0x0001F0, "Member 'URaceSequenceStateRivalTeamEliminateResult::_RewardGetWindowWidget' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _ResultDonpaTicket) == 0x0001F8, "Member 'URaceSequenceStateRivalTeamEliminateResult::_ResultDonpaTicket' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _ActiveRewardGetWindow) == 0x000208, "Member 'URaceSequenceStateRivalTeamEliminateResult::_ActiveRewardGetWindow' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _ActiveResultDonpaTicket) == 0x000210, "Member 'URaceSequenceStateRivalTeamEliminateResult::_ActiveResultDonpaTicket' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateRivalTeamEliminateResult, _SubRivalAllWinWidget) == 0x000218, "Member 'URaceSequenceStateRivalTeamEliminateResult::_SubRivalAllWinWidget' has a wrong offset!");

// Class UNION.PartyRaceResultMissionTableRowWidget
// 0x0060 (0x0350 - 0x02F0)
class UPartyRaceResultMissionTableRowWidget final : public UCommonUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnScoreAnimationFinishedEvent;                     // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UUnionRichTextBlock*                    _MissionNameText;                                  // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUITextBlock*                      _ScoreText;                                        // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUITextBlock*                      _NecessaryScoreText;                               // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUITextBlock*                      _AddedScoreText;                                   // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _Score;                                            // 0x0320(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _NecessaryScore;                                   // 0x0324(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _Completed;                                        // 0x0328(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Mission_Count;                                     // 0x0330(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Mission_Loop;                                      // 0x0338(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Mission_Check;                                     // 0x0340(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Mission_Check_Loop;                                // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void PlayScoreAnimation();
	void SetScoreText(int32 score);
	void SkipScoreAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceResultMissionTableRowWidget">();
	}
	static class UPartyRaceResultMissionTableRowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceResultMissionTableRowWidget>();
	}
};
static_assert(alignof(UPartyRaceResultMissionTableRowWidget) == 0x000008, "Wrong alignment on UPartyRaceResultMissionTableRowWidget");
static_assert(sizeof(UPartyRaceResultMissionTableRowWidget) == 0x000350, "Wrong size on UPartyRaceResultMissionTableRowWidget");
static_assert(offsetof(UPartyRaceResultMissionTableRowWidget, OnScoreAnimationFinishedEvent) == 0x0002F0, "Member 'UPartyRaceResultMissionTableRowWidget::OnScoreAnimationFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableRowWidget, _MissionNameText) == 0x000300, "Member 'UPartyRaceResultMissionTableRowWidget::_MissionNameText' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableRowWidget, _ScoreText) == 0x000308, "Member 'UPartyRaceResultMissionTableRowWidget::_ScoreText' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableRowWidget, _NecessaryScoreText) == 0x000310, "Member 'UPartyRaceResultMissionTableRowWidget::_NecessaryScoreText' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableRowWidget, _AddedScoreText) == 0x000318, "Member 'UPartyRaceResultMissionTableRowWidget::_AddedScoreText' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableRowWidget, _Score) == 0x000320, "Member 'UPartyRaceResultMissionTableRowWidget::_Score' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableRowWidget, _NecessaryScore) == 0x000324, "Member 'UPartyRaceResultMissionTableRowWidget::_NecessaryScore' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableRowWidget, _Completed) == 0x000328, "Member 'UPartyRaceResultMissionTableRowWidget::_Completed' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableRowWidget, Mission_Count) == 0x000330, "Member 'UPartyRaceResultMissionTableRowWidget::Mission_Count' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableRowWidget, Mission_Loop) == 0x000338, "Member 'UPartyRaceResultMissionTableRowWidget::Mission_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableRowWidget, Mission_Check) == 0x000340, "Member 'UPartyRaceResultMissionTableRowWidget::Mission_Check' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableRowWidget, Mission_Check_Loop) == 0x000348, "Member 'UPartyRaceResultMissionTableRowWidget::Mission_Check_Loop' has a wrong offset!");

// Class UNION.PartyRaceResultMissionTableWidget
// 0x0078 (0x0368 - 0x02F0)
class UPartyRaceResultMissionTableWidget final : public UCommonUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnScoreAnimationFinishedEvent;                     // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInAnimationFinishedEvent;                        // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOutAnimationFinishedEvent;                       // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<class UPartyRaceResultMissionTableRowWidget*> _TableRowWidgets;                           // 0x0320(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_330[0x28];                                     // 0x0330(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Mission_InLoop;                                    // 0x0358(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Mission_Out;                                       // 0x0360(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnRowScoreAnimationFinished();
	void PlayInAnimation();
	void PlayOutAnimation();
	void PlayScoreAnimation();
	void SetMissionDataBP(const TArray<struct FPartyRaceMissionData>& MissionData, const TArray<int32>& Scores, const TArray<bool>& Completeds);
	void SkipScoreAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceResultMissionTableWidget">();
	}
	static class UPartyRaceResultMissionTableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceResultMissionTableWidget>();
	}
};
static_assert(alignof(UPartyRaceResultMissionTableWidget) == 0x000008, "Wrong alignment on UPartyRaceResultMissionTableWidget");
static_assert(sizeof(UPartyRaceResultMissionTableWidget) == 0x000368, "Wrong size on UPartyRaceResultMissionTableWidget");
static_assert(offsetof(UPartyRaceResultMissionTableWidget, OnScoreAnimationFinishedEvent) == 0x0002F0, "Member 'UPartyRaceResultMissionTableWidget::OnScoreAnimationFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableWidget, OnInAnimationFinishedEvent) == 0x000300, "Member 'UPartyRaceResultMissionTableWidget::OnInAnimationFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableWidget, OnOutAnimationFinishedEvent) == 0x000310, "Member 'UPartyRaceResultMissionTableWidget::OnOutAnimationFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableWidget, _TableRowWidgets) == 0x000320, "Member 'UPartyRaceResultMissionTableWidget::_TableRowWidgets' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableWidget, Mission_InLoop) == 0x000358, "Member 'UPartyRaceResultMissionTableWidget::Mission_InLoop' has a wrong offset!");
static_assert(offsetof(UPartyRaceResultMissionTableWidget, Mission_Out) == 0x000360, "Member 'UPartyRaceResultMissionTableWidget::Mission_Out' has a wrong offset!");

// Class UNION.PartyRaceRivalResultProgressStampWidget
// 0x0040 (0x0330 - 0x02F0)
class UPartyRaceRivalResultProgressStampWidget : public UCommonUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnPlayCheckFinishedEvent;                          // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        _WidgetSwitcher;                                   // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUITextBlock*                      _NumberText;                                       // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUITextBlock*                      _NumberTextClear;                                  // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Active_Loop;                                       // 0x0318(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Check_In;                                          // 0x0320(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Check_Loop;                                        // 0x0328(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceRivalResultProgressStampWidget">();
	}
	static class UPartyRaceRivalResultProgressStampWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceRivalResultProgressStampWidget>();
	}
};
static_assert(alignof(UPartyRaceRivalResultProgressStampWidget) == 0x000008, "Wrong alignment on UPartyRaceRivalResultProgressStampWidget");
static_assert(sizeof(UPartyRaceRivalResultProgressStampWidget) == 0x000330, "Wrong size on UPartyRaceRivalResultProgressStampWidget");
static_assert(offsetof(UPartyRaceRivalResultProgressStampWidget, OnPlayCheckFinishedEvent) == 0x0002F0, "Member 'UPartyRaceRivalResultProgressStampWidget::OnPlayCheckFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressStampWidget, _WidgetSwitcher) == 0x000300, "Member 'UPartyRaceRivalResultProgressStampWidget::_WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressStampWidget, _NumberText) == 0x000308, "Member 'UPartyRaceRivalResultProgressStampWidget::_NumberText' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressStampWidget, _NumberTextClear) == 0x000310, "Member 'UPartyRaceRivalResultProgressStampWidget::_NumberTextClear' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressStampWidget, Active_Loop) == 0x000318, "Member 'UPartyRaceRivalResultProgressStampWidget::Active_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressStampWidget, Check_In) == 0x000320, "Member 'UPartyRaceRivalResultProgressStampWidget::Check_In' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressStampWidget, Check_Loop) == 0x000328, "Member 'UPartyRaceRivalResultProgressStampWidget::Check_Loop' has a wrong offset!");

// Class UNION.PartyRaceRivalResultProgressWidget
// 0x0078 (0x0368 - 0x02F0)
class UPartyRaceRivalResultProgressWidget : public UCommonUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnPlayCheckFinishedEvent;                          // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayInFinishedEvent;                             // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayOutFinishedEvent;                            // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UCommonItemIcon*                        _ItemIcon;                                         // 0x0320(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UPartyRaceRivalResultProgressStampWidget*> _StampWidgets;                           // 0x0328(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _ConditionText;                                    // 0x0338(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUITextBlock*                      _ItemNumText;                                      // 0x0340(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Anm_InLoop;                                        // 0x0350(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anm_Out;                                           // 0x0358(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Check_InLoop;                                      // 0x0360(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnPlayCheckFinished();
	void PlayCheck();
	void PlayIn();
	void PlayOut();
	void SetDisplay(ERivalTeamId RivalTeamId, int32 EliminatedCount, int32 winCount, bool PreCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceRivalResultProgressWidget">();
	}
	static class UPartyRaceRivalResultProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceRivalResultProgressWidget>();
	}
};
static_assert(alignof(UPartyRaceRivalResultProgressWidget) == 0x000008, "Wrong alignment on UPartyRaceRivalResultProgressWidget");
static_assert(sizeof(UPartyRaceRivalResultProgressWidget) == 0x000368, "Wrong size on UPartyRaceRivalResultProgressWidget");
static_assert(offsetof(UPartyRaceRivalResultProgressWidget, OnPlayCheckFinishedEvent) == 0x0002F0, "Member 'UPartyRaceRivalResultProgressWidget::OnPlayCheckFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressWidget, OnPlayInFinishedEvent) == 0x000300, "Member 'UPartyRaceRivalResultProgressWidget::OnPlayInFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressWidget, OnPlayOutFinishedEvent) == 0x000310, "Member 'UPartyRaceRivalResultProgressWidget::OnPlayOutFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressWidget, _ItemIcon) == 0x000320, "Member 'UPartyRaceRivalResultProgressWidget::_ItemIcon' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressWidget, _StampWidgets) == 0x000328, "Member 'UPartyRaceRivalResultProgressWidget::_StampWidgets' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressWidget, _ConditionText) == 0x000338, "Member 'UPartyRaceRivalResultProgressWidget::_ConditionText' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressWidget, _ItemNumText) == 0x000340, "Member 'UPartyRaceRivalResultProgressWidget::_ItemNumText' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressWidget, Anm_InLoop) == 0x000350, "Member 'UPartyRaceRivalResultProgressWidget::Anm_InLoop' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressWidget, Anm_Out) == 0x000358, "Member 'UPartyRaceRivalResultProgressWidget::Anm_Out' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultProgressWidget, Check_InLoop) == 0x000360, "Member 'UPartyRaceRivalResultProgressWidget::Check_InLoop' has a wrong offset!");

// Class UNION.PartyRaceRivalResultWidget
// 0x00F8 (0x03E8 - 0x02F0)
class UPartyRaceRivalResultWidget final : public UCommonUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnLoadedEvent;                                     // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayWinFinishedEvent;                            // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayProgressFinishedEvent;                       // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayOutFinishedEvent;                            // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnForceCloseEvent;                                 // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<class UImage*>                         _PlayerCharaImages;                                // 0x0340(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UImage*                                 _RivalLeaderImage;                                 // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _RivalMemberImage;                                 // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _RivalTeamIconImage;                               // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _RivalTeamNamePlateImage;                          // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRivalLevelWidget*                _RivalLevelWidget;                                 // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _RivalTeamNameTextBlock;                           // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPartyRaceRivalResultProgressWidget*    _ProgressWidget;                                   // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URewardGetWindow*                       _RewardGetWindow;                                  // 0x0388(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UButton*                                _InputButton;                                      // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_398[0x30];                                     // 0x0398(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Result_InLoop;                                     // 0x03C8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Result_Out;                                        // 0x03D0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Reward_InLoop;                                     // 0x03D8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Reward_Out;                                        // 0x03E0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UButton* GetInputButton();
	class URewardGetWindow* GetRewardGetWindow();
	void OnPlayProgressCheckFinished();
	void PlayOut();
	void PlayProgress();
	void PlayWin();
	void SetNewWinCount(int32 NewWinCount);
	void StartLoad(const TArray<EDriverId>& PlayerDriverIds, ERivalTeamId RivalTeamId, int32 EliminatedCount);

	bool IsReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceRivalResultWidget">();
	}
	static class UPartyRaceRivalResultWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceRivalResultWidget>();
	}
};
static_assert(alignof(UPartyRaceRivalResultWidget) == 0x000008, "Wrong alignment on UPartyRaceRivalResultWidget");
static_assert(sizeof(UPartyRaceRivalResultWidget) == 0x0003E8, "Wrong size on UPartyRaceRivalResultWidget");
static_assert(offsetof(UPartyRaceRivalResultWidget, OnLoadedEvent) == 0x0002F0, "Member 'UPartyRaceRivalResultWidget::OnLoadedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, OnPlayWinFinishedEvent) == 0x000300, "Member 'UPartyRaceRivalResultWidget::OnPlayWinFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, OnPlayProgressFinishedEvent) == 0x000310, "Member 'UPartyRaceRivalResultWidget::OnPlayProgressFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, OnPlayOutFinishedEvent) == 0x000320, "Member 'UPartyRaceRivalResultWidget::OnPlayOutFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, OnForceCloseEvent) == 0x000330, "Member 'UPartyRaceRivalResultWidget::OnForceCloseEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, _PlayerCharaImages) == 0x000340, "Member 'UPartyRaceRivalResultWidget::_PlayerCharaImages' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, _RivalLeaderImage) == 0x000350, "Member 'UPartyRaceRivalResultWidget::_RivalLeaderImage' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, _RivalMemberImage) == 0x000358, "Member 'UPartyRaceRivalResultWidget::_RivalMemberImage' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, _RivalTeamIconImage) == 0x000360, "Member 'UPartyRaceRivalResultWidget::_RivalTeamIconImage' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, _RivalTeamNamePlateImage) == 0x000368, "Member 'UPartyRaceRivalResultWidget::_RivalTeamNamePlateImage' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, _RivalLevelWidget) == 0x000370, "Member 'UPartyRaceRivalResultWidget::_RivalLevelWidget' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, _RivalTeamNameTextBlock) == 0x000378, "Member 'UPartyRaceRivalResultWidget::_RivalTeamNameTextBlock' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, _ProgressWidget) == 0x000380, "Member 'UPartyRaceRivalResultWidget::_ProgressWidget' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, _RewardGetWindow) == 0x000388, "Member 'UPartyRaceRivalResultWidget::_RewardGetWindow' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, _InputButton) == 0x000390, "Member 'UPartyRaceRivalResultWidget::_InputButton' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, Result_InLoop) == 0x0003C8, "Member 'UPartyRaceRivalResultWidget::Result_InLoop' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, Result_Out) == 0x0003D0, "Member 'UPartyRaceRivalResultWidget::Result_Out' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, Reward_InLoop) == 0x0003D8, "Member 'UPartyRaceRivalResultWidget::Reward_InLoop' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalResultWidget, Reward_Out) == 0x0003E0, "Member 'UPartyRaceRivalResultWidget::Reward_Out' has a wrong offset!");

// Class UNION.PartyRaceRivalTeamButton
// 0x0040 (0x0688 - 0x0648)
class UPartyRaceRivalTeamButton : public UUnionUIButtonStandard
{
public:
	class UCanvasPanel*                           _RootCanvasPanel;                                  // 0x0648(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _CharaImage;                                       // 0x0650(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _MachineImage;                                     // 0x0658(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRivalLevelWidget*                _TeamLevelWidget;                                  // 0x0660(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_668[0x8];                                      // 0x0668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       RivalNext_In;                                      // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       RivalNext_Loop;                                    // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       RivalNext_Out;                                     // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void In();
	void Loop();
	void Out();
	void UpdateDisplay(ERivalTeamId RivalTeamId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceRivalTeamButton">();
	}
	static class UPartyRaceRivalTeamButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceRivalTeamButton>();
	}
};
static_assert(alignof(UPartyRaceRivalTeamButton) == 0x000008, "Wrong alignment on UPartyRaceRivalTeamButton");
static_assert(sizeof(UPartyRaceRivalTeamButton) == 0x000688, "Wrong size on UPartyRaceRivalTeamButton");
static_assert(offsetof(UPartyRaceRivalTeamButton, _RootCanvasPanel) == 0x000648, "Member 'UPartyRaceRivalTeamButton::_RootCanvasPanel' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamButton, _CharaImage) == 0x000650, "Member 'UPartyRaceRivalTeamButton::_CharaImage' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamButton, _MachineImage) == 0x000658, "Member 'UPartyRaceRivalTeamButton::_MachineImage' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamButton, _TeamLevelWidget) == 0x000660, "Member 'UPartyRaceRivalTeamButton::_TeamLevelWidget' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamButton, RivalNext_In) == 0x000670, "Member 'UPartyRaceRivalTeamButton::RivalNext_In' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamButton, RivalNext_Loop) == 0x000678, "Member 'UPartyRaceRivalTeamButton::RivalNext_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamButton, RivalNext_Out) == 0x000680, "Member 'UPartyRaceRivalTeamButton::RivalNext_Out' has a wrong offset!");

// Class UNION.PartyRaceRivalTeamCutinWidget
// 0x0088 (0x0368 - 0x02E0)
class UPartyRaceRivalTeamCutinWidget : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnLoadedEvent;                                     // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFinishedEvent;                                   // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           _RootCanvasPanel;                                  // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _LeaderImage;                                      // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _MemberImage;                                      // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _MachineImage;                                     // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _TeamIconImage;                                    // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _TeamNamePlateImage;                               // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _TeamNameTextBlock;                                // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRivalLevelWidget*                _RivalLevelWidget;                                 // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_340[0x18];                                     // 0x0340(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       RivalCutin_InOut;                                  // 0x0358(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       RivalCutin_InOut_Next;                             // 0x0360(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Play(bool PlayNextCutin);
	void StartLoad(ERivalTeamId RivalTeamId, int32 RivalTeamLevel);

	bool IsReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceRivalTeamCutinWidget">();
	}
	static class UPartyRaceRivalTeamCutinWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceRivalTeamCutinWidget>();
	}
};
static_assert(alignof(UPartyRaceRivalTeamCutinWidget) == 0x000008, "Wrong alignment on UPartyRaceRivalTeamCutinWidget");
static_assert(sizeof(UPartyRaceRivalTeamCutinWidget) == 0x000368, "Wrong size on UPartyRaceRivalTeamCutinWidget");
static_assert(offsetof(UPartyRaceRivalTeamCutinWidget, OnLoadedEvent) == 0x0002E0, "Member 'UPartyRaceRivalTeamCutinWidget::OnLoadedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamCutinWidget, OnFinishedEvent) == 0x0002F0, "Member 'UPartyRaceRivalTeamCutinWidget::OnFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamCutinWidget, _RootCanvasPanel) == 0x000300, "Member 'UPartyRaceRivalTeamCutinWidget::_RootCanvasPanel' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamCutinWidget, _LeaderImage) == 0x000308, "Member 'UPartyRaceRivalTeamCutinWidget::_LeaderImage' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamCutinWidget, _MemberImage) == 0x000310, "Member 'UPartyRaceRivalTeamCutinWidget::_MemberImage' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamCutinWidget, _MachineImage) == 0x000318, "Member 'UPartyRaceRivalTeamCutinWidget::_MachineImage' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamCutinWidget, _TeamIconImage) == 0x000320, "Member 'UPartyRaceRivalTeamCutinWidget::_TeamIconImage' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamCutinWidget, _TeamNamePlateImage) == 0x000328, "Member 'UPartyRaceRivalTeamCutinWidget::_TeamNamePlateImage' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamCutinWidget, _TeamNameTextBlock) == 0x000330, "Member 'UPartyRaceRivalTeamCutinWidget::_TeamNameTextBlock' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamCutinWidget, _RivalLevelWidget) == 0x000338, "Member 'UPartyRaceRivalTeamCutinWidget::_RivalLevelWidget' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamCutinWidget, RivalCutin_InOut) == 0x000358, "Member 'UPartyRaceRivalTeamCutinWidget::RivalCutin_InOut' has a wrong offset!");
static_assert(offsetof(UPartyRaceRivalTeamCutinWidget, RivalCutin_InOut_Next) == 0x000360, "Member 'UPartyRaceRivalTeamCutinWidget::RivalCutin_InOut_Next' has a wrong offset!");

// Class UNION.PartyRaceSelectPresetScene
// 0x0120 (0x04F8 - 0x03D8)
class UPartyRaceSelectPresetScene : public UUnionUISceneBase
{
public:
	TMap<EPartyRacePreset, struct FPartyRacePresetSetting> CurrentPrsetSettingMap;                   // 0x03D8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EPartyRacePreset, struct FPartyRacePresetSetting> DefaultPrsetSettingMap;                   // 0x0428(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_478[0x30];                                     // 0x0478(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPartyRaceSubMenuBtn*>           PresetButtonArr;                                   // 0x04A8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UUnionUIButtonsPanel*                   PresetButtonsPanel;                                // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyRaceSelectPresetState                   CurrentSelectPresetState;                          // 0x04C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       PartyRace_In;                                      // 0x04C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       PartyRace_Loop;                                    // 0x04D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       PartyRace_Out;                                     // 0x04D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       PartyRace_Option_In;                               // 0x04E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       PartyRace_Option_Loop;                             // 0x04E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       PartyRace_Option_Out;                              // 0x04F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ResetPreset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceSelectPresetScene">();
	}
	static class UPartyRaceSelectPresetScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceSelectPresetScene>();
	}
};
static_assert(alignof(UPartyRaceSelectPresetScene) == 0x000008, "Wrong alignment on UPartyRaceSelectPresetScene");
static_assert(sizeof(UPartyRaceSelectPresetScene) == 0x0004F8, "Wrong size on UPartyRaceSelectPresetScene");
static_assert(offsetof(UPartyRaceSelectPresetScene, CurrentPrsetSettingMap) == 0x0003D8, "Member 'UPartyRaceSelectPresetScene::CurrentPrsetSettingMap' has a wrong offset!");
static_assert(offsetof(UPartyRaceSelectPresetScene, DefaultPrsetSettingMap) == 0x000428, "Member 'UPartyRaceSelectPresetScene::DefaultPrsetSettingMap' has a wrong offset!");
static_assert(offsetof(UPartyRaceSelectPresetScene, PresetButtonArr) == 0x0004A8, "Member 'UPartyRaceSelectPresetScene::PresetButtonArr' has a wrong offset!");
static_assert(offsetof(UPartyRaceSelectPresetScene, PresetButtonsPanel) == 0x0004B8, "Member 'UPartyRaceSelectPresetScene::PresetButtonsPanel' has a wrong offset!");
static_assert(offsetof(UPartyRaceSelectPresetScene, CurrentSelectPresetState) == 0x0004C0, "Member 'UPartyRaceSelectPresetScene::CurrentSelectPresetState' has a wrong offset!");
static_assert(offsetof(UPartyRaceSelectPresetScene, PartyRace_In) == 0x0004C8, "Member 'UPartyRaceSelectPresetScene::PartyRace_In' has a wrong offset!");
static_assert(offsetof(UPartyRaceSelectPresetScene, PartyRace_Loop) == 0x0004D0, "Member 'UPartyRaceSelectPresetScene::PartyRace_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceSelectPresetScene, PartyRace_Out) == 0x0004D8, "Member 'UPartyRaceSelectPresetScene::PartyRace_Out' has a wrong offset!");
static_assert(offsetof(UPartyRaceSelectPresetScene, PartyRace_Option_In) == 0x0004E0, "Member 'UPartyRaceSelectPresetScene::PartyRace_Option_In' has a wrong offset!");
static_assert(offsetof(UPartyRaceSelectPresetScene, PartyRace_Option_Loop) == 0x0004E8, "Member 'UPartyRaceSelectPresetScene::PartyRace_Option_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceSelectPresetScene, PartyRace_Option_Out) == 0x0004F0, "Member 'UPartyRaceSelectPresetScene::PartyRace_Option_Out' has a wrong offset!");

// Class UNION.PartyRaceSubMenuBtn
// 0x0058 (0x04D8 - 0x0480)
class UPartyRaceSubMenuBtn : public UUnionUIButtonBase
{
public:
	EPartyRacePreset                              Preset;                                            // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               PatImageMaterial;                                  // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UImage*>                         BtnArrows;                                         // 0x0490(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EUnionUIControlDir                            EdgeType;                                          // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Btn_Active_Loop;                                   // 0x04A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_Loop;                                   // 0x04B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Active_to_Select;                              // 0x04B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_to_Active;                              // 0x04C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Active_Out;                                    // 0x04C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_Out;                                    // 0x04D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetPresetId(EPartyRacePreset InPreset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceSubMenuBtn">();
	}
	static class UPartyRaceSubMenuBtn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceSubMenuBtn>();
	}
};
static_assert(alignof(UPartyRaceSubMenuBtn) == 0x000008, "Wrong alignment on UPartyRaceSubMenuBtn");
static_assert(sizeof(UPartyRaceSubMenuBtn) == 0x0004D8, "Wrong size on UPartyRaceSubMenuBtn");
static_assert(offsetof(UPartyRaceSubMenuBtn, Preset) == 0x000480, "Member 'UPartyRaceSubMenuBtn::Preset' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubMenuBtn, PatImageMaterial) == 0x000488, "Member 'UPartyRaceSubMenuBtn::PatImageMaterial' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubMenuBtn, BtnArrows) == 0x000490, "Member 'UPartyRaceSubMenuBtn::BtnArrows' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubMenuBtn, EdgeType) == 0x0004A0, "Member 'UPartyRaceSubMenuBtn::EdgeType' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubMenuBtn, Btn_Active_Loop) == 0x0004A8, "Member 'UPartyRaceSubMenuBtn::Btn_Active_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubMenuBtn, Btn_Select_Loop) == 0x0004B0, "Member 'UPartyRaceSubMenuBtn::Btn_Select_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubMenuBtn, Btn_Active_to_Select) == 0x0004B8, "Member 'UPartyRaceSubMenuBtn::Btn_Active_to_Select' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubMenuBtn, Btn_Select_to_Active) == 0x0004C0, "Member 'UPartyRaceSubMenuBtn::Btn_Select_to_Active' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubMenuBtn, Btn_Active_Out) == 0x0004C8, "Member 'UPartyRaceSubMenuBtn::Btn_Active_Out' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubMenuBtn, Btn_Select_Out) == 0x0004D0, "Member 'UPartyRaceSubMenuBtn::Btn_Select_Out' has a wrong offset!");

// Class UNION.PartyRaceSubOptionBtn
// 0x0028 (0x04A8 - 0x0480)
class UPartyRaceSubOptionBtn : public UUnionUIButtonBase
{
public:
	EPartyRaceConfirmButton                       ButtonType;                                        // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ButtonText;                                        // 0x0488(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Active_Loop;                                   // 0x0498(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Btn_Select_Loop;                                   // 0x04A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetTextBP(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceSubOptionBtn">();
	}
	static class UPartyRaceSubOptionBtn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceSubOptionBtn>();
	}
};
static_assert(alignof(UPartyRaceSubOptionBtn) == 0x000008, "Wrong alignment on UPartyRaceSubOptionBtn");
static_assert(sizeof(UPartyRaceSubOptionBtn) == 0x0004A8, "Wrong size on UPartyRaceSubOptionBtn");
static_assert(offsetof(UPartyRaceSubOptionBtn, ButtonType) == 0x000480, "Member 'UPartyRaceSubOptionBtn::ButtonType' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubOptionBtn, ButtonText) == 0x000488, "Member 'UPartyRaceSubOptionBtn::ButtonText' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubOptionBtn, Btn_Active_Loop) == 0x000498, "Member 'UPartyRaceSubOptionBtn::Btn_Active_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubOptionBtn, Btn_Select_Loop) == 0x0004A0, "Member 'UPartyRaceSubOptionBtn::Btn_Select_Loop' has a wrong offset!");

// Class UNION.PartyRaceSubPresetBtn
// 0x0020 (0x0668 - 0x0648)
class UPartyRaceSubPresetBtn : public UUnionUIButtonStandard
{
public:
	EPartyRacePreset                              _Preset;                                           // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_649[0x7];                                      // 0x0649(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Active_Loop;                                       // 0x0650(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Select_Loop;                                       // 0x0658(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Select_Out;                                        // 0x0660(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnDecided(class UUnionUIButtonBaseCore* Button);
	void OnSelected(class UUnionUIButtonBaseCore* Button);
	void SetPreset(EPartyRacePreset InPreset);

	EPartyRacePreset GetPreset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceSubPresetBtn">();
	}
	static class UPartyRaceSubPresetBtn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceSubPresetBtn>();
	}
};
static_assert(alignof(UPartyRaceSubPresetBtn) == 0x000008, "Wrong alignment on UPartyRaceSubPresetBtn");
static_assert(sizeof(UPartyRaceSubPresetBtn) == 0x000668, "Wrong size on UPartyRaceSubPresetBtn");
static_assert(offsetof(UPartyRaceSubPresetBtn, _Preset) == 0x000648, "Member 'UPartyRaceSubPresetBtn::_Preset' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubPresetBtn, Active_Loop) == 0x000650, "Member 'UPartyRaceSubPresetBtn::Active_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubPresetBtn, Select_Loop) == 0x000658, "Member 'UPartyRaceSubPresetBtn::Select_Loop' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubPresetBtn, Select_Out) == 0x000660, "Member 'UPartyRaceSubPresetBtn::Select_Out' has a wrong offset!");

// Class UNION.PartyRaceSubRivalAllWinWidget
// 0x0050 (0x0340 - 0x02F0)
class UPartyRaceSubRivalAllWinWidget final : public UCommonUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnPlayFinishedEvent;                               // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayOutFinishedEvent;                            // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnForceCloseEvent;                                 // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UButton*                                _InputButton;                                      // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       InLoop;                                            // 0x0330(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Out;                                               // 0x0338(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UButton* GetInputButton();
	void PlayLoop();
	void PlayOut();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceSubRivalAllWinWidget">();
	}
	static class UPartyRaceSubRivalAllWinWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceSubRivalAllWinWidget>();
	}
};
static_assert(alignof(UPartyRaceSubRivalAllWinWidget) == 0x000008, "Wrong alignment on UPartyRaceSubRivalAllWinWidget");
static_assert(sizeof(UPartyRaceSubRivalAllWinWidget) == 0x000340, "Wrong size on UPartyRaceSubRivalAllWinWidget");
static_assert(offsetof(UPartyRaceSubRivalAllWinWidget, OnPlayFinishedEvent) == 0x0002F0, "Member 'UPartyRaceSubRivalAllWinWidget::OnPlayFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubRivalAllWinWidget, OnPlayOutFinishedEvent) == 0x000300, "Member 'UPartyRaceSubRivalAllWinWidget::OnPlayOutFinishedEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubRivalAllWinWidget, OnForceCloseEvent) == 0x000310, "Member 'UPartyRaceSubRivalAllWinWidget::OnForceCloseEvent' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubRivalAllWinWidget, _InputButton) == 0x000320, "Member 'UPartyRaceSubRivalAllWinWidget::_InputButton' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubRivalAllWinWidget, InLoop) == 0x000330, "Member 'UPartyRaceSubRivalAllWinWidget::InLoop' has a wrong offset!");
static_assert(offsetof(UPartyRaceSubRivalAllWinWidget, Out) == 0x000338, "Member 'UPartyRaceSubRivalAllWinWidget::Out' has a wrong offset!");

// Class UNION.PartyRaceUtility
// 0x0000 (0x0028 - 0x0028)
class UPartyRaceUtility final : public UBlueprintFunctionLibrary
{
public:
	static bool CheckDoingResultRivalTeamEliminatedEvent();
	static bool CheckGroupRule(int32 PlayerCount);
	static bool CheckRule(ECustomRaceSettingLine Rule);
	static ERivalTeamId ChooseRivalTeam();
	static void ChooseRivalTeamMembers(int32 NumMembers);
	static void ClearSelectedRivalTeamId();
	static void ConvertCustomRaceSettingToPartyRacePresetSetting(const struct FCustomRaceSetting& RaceSetting, struct FPartyRacePresetSetting* RacePresetSetting);
	static int32 CountEliminatedPrimalRivalTeams();
	static int32 CountPrimalRivalTeams();
	static bool FindPartyRaceMissionDataBP(const class FName& MissionId, struct FPartyRaceMissionData* OutMissionData);
	static bool FindRivalTeamWinRewardDataByWinCount(ERivalTeamId RivalTeamId, int32 EliminatedCount, int32 winCount, ERewardType* OutRewardType, int32* OutRewardId, int32* OutNumRewards);
	static int32 GetAdjustedRivalTeamLevelByID(ERivalTeamId RivalTeamId);
	static int32 GetCurrentAdjustedRivalTeamLevel();
	static ERivalTeamId GetLastCutinRivalTeamId();
	static int32 GetMaxRivalTeamLevel();
	static void GetMultiPlayBonusRacerAwardData(class UDataTable* RaceParkHonorDataTable, struct FRewardRedStarRingHonorTableRow* OutRewardHonor);
	static int32 GetNumRivalTeamWinReward();
	static int32 GetNumWinsNeededToEliminateRivalTeam(ERivalTeamId RivalTeamId, int32 EliminatedCount);
	static int32 GetPartyRaceMaxMissionsOccur();
	static void GetPartyRaceMissionResultDisplayInfoBP(int32 MissionIndex, class FName* OutMissionId, int32* OutScore, bool* OutCompleted);
	static int32 GetPartyRaceNumOccurringMissions();
	static void GetPresetRuleDataTableRowFromPresetId(EPartyRacePreset PresetId, struct FPartyRacePresetSetting* RacePresetSetting);
	static bool GetResultRivalTeamEliminated();
	static ERivalTeamId GetResultRivalTeamId();
	static int32 GetRivalTeamAllEliminatedCount();
	static bool GetRivalTeamCutinNextPlayRequested();
	static int32 GetRivalTeamEliminatedCount(ERivalTeamId RivalTeamId);
	static bool GetRivalTeamEliminatedRewardDisplayData(ERivalTeamId RivalTeamId, ERewardType* OutRewardType, TSoftObjectPtr<class UTexture2D>* OutRewardSoftTexture, int32* OutNumRewards);
	static ERivalTeamId GetRivalTeamIdFromRaceRivalDriverIds();
	static int32 GetRivalTeamLevel(ERivalTeamId RivalTeamId);
	static EMachineId GetRivalTeamMachineId(ERivalTeamId RivalTeamId);
	static void GetRivalTeamMainMembers(ERivalTeamId RivalTeamId, TArray<EDriverId>* OutDriverIds);
	static class FText GetRivalTeamName(ERivalTeamId RivalTeamId);
	static int32 GetRivalTeamWinCount(ERivalTeamId RivalTeamId);
	static void GetRivalTeamWinRacerAwardData(class UDataTable* RaceParkHonorDataTable, int32 InRivalLevel, struct FRewardRedStarRingHonorTableRow* OutRewardHonor);
	static bool GetRivalTeamWinRewardData(ERivalTeamId RivalTeamId, int32 EliminatedCount, int32 RewardIndex, ERewardType* OutRewardType, int32* OutRewardId, int32* OutNumRewards);
	static bool GetRivalTeamWinRewardDisplayData(ERivalTeamId RivalTeamId, int32 EliminatedCount, int32 RewardIndex, ERewardType* OutRewardType, TSoftObjectPtr<class UTexture2D>* OutRewardSoftTexture, int32* OutNumRewards);
	static int32 GetRivalTeamWinRewardNecessaryWinCount(ERivalTeamId RivalTeamId, int32 EliminatedCount, int32 RewardIndex);
	static ERivalTeamId GetSelectedRivalTeamId();
	static int32 IncRivalTeamEliminatedCount(ERivalTeamId RivalTeamId);
	static int32 IncRivalTeamWinCount(ERivalTeamId RivalTeamId);
	static bool IsPartyRaceClassSelected();
	static bool IsPartyRaceCustomRivalExists();
	static bool IsPartyRaceMissionExistsGameMode();
	static bool IsPartyRaceRivalExists();
	static bool IsRacerAwardRivalTeamWin();
	static bool IsResultRivalTeamPlayerWin();
	static struct FRewardAchievementData MakeResultRivalTeamRewardAchievementData();
	static void ResetAllRivalTeamEliminatedCount();
	static void ResetAllRivalTeamWinCount();
	static void ResetRivalTeamEliminatedCount(ERivalTeamId RivalTeamId);
	static void ResetRivalTeamWinCount(ERivalTeamId RivalTeamId);
	static void SetCustomRuleFromPreset(const struct FPartyRacePresetSetting& RacePresetSetting, struct FCustomRaceSetting* RaceSetting);
	static void SetLastCutinRivalTeamId(ERivalTeamId RivalTeamId);
	static void SetPartyRaceClassSelected(bool Value);
	static void SetPartyRaceCustomRivalExists(bool Exists);
	static void SetPartyRaceRivalExists(bool Exists);
	static void SetRacersGroupingForPartyRace(ERaceSettingGrouping RaceSettingGrouping);
	static void SetResultRivalTeamEliminated(bool Value);
	static void SetRivalTeamAllEliminatedCount(int32 Count);
	static void SetRivalTeamCutinNextPlayRequested(bool Value);
	static void SetRivalTeamIdAndWinCount(ERivalTeamId InTeamID, int32 InWinCount);
	static void UpdateDonpaResultData();
	static void UpdateResultData();
	static void UpdateResultDataNoProgress();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PartyRaceUtility">();
	}
	static class UPartyRaceUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPartyRaceUtility>();
	}
};
static_assert(alignof(UPartyRaceUtility) == 0x000008, "Wrong alignment on UPartyRaceUtility");
static_assert(sizeof(UPartyRaceUtility) == 0x000028, "Wrong size on UPartyRaceUtility");

// Class UNION.PerformRivalFinal
// 0x0010 (0x02A0 - 0x0290)
class APerformRivalFinal : public AActor
{
public:
	class UAtomComponent*                         AtomComponent;                                     // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonRivalLevelWidget*                RivalLevelWidget;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	EPerformRivalOutcome GetCurrentRivalOutcome(const int32 RivalRacerIndex);

	EPerformRivalInteractionType GetRivalInteractionType(const EDriverId PlayerDriverId, const EDriverId RivalDriverId, const EPerformRivalOutcome Outcome) const;
	void PlayRivalVoice(const EDriverId RivalDriverId, const EPerformRivalOutcome RivalOutcome, bool UseRivalSkin, TDelegate<void()> OnVoiceFinished) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PerformRivalFinal">();
	}
	static class APerformRivalFinal* GetDefaultObj()
	{
		return GetDefaultObjImpl<APerformRivalFinal>();
	}
};
static_assert(alignof(APerformRivalFinal) == 0x000008, "Wrong alignment on APerformRivalFinal");
static_assert(sizeof(APerformRivalFinal) == 0x0002A0, "Wrong size on APerformRivalFinal");
static_assert(offsetof(APerformRivalFinal, AtomComponent) == 0x000290, "Member 'APerformRivalFinal::AtomComponent' has a wrong offset!");
static_assert(offsetof(APerformRivalFinal, RivalLevelWidget) == 0x000298, "Member 'APerformRivalFinal::RivalLevelWidget' has a wrong offset!");

// Class UNION.PerformRivalFirst
// 0x0010 (0x02A0 - 0x0290)
class APerformRivalFirst : public AActor
{
public:
	class UAtomComponent*                         AtomComponent;                                     // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonRivalLevelWidget*                RivalLevelWidget;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool IsPossibleUniquePerformRival(const EDriverId PlayerDriverId, const EDriverId RivalDriverId);

	EPerformRivalInteractionType GetPlayerLastInteractionType(const EDriverId PlayerDriverId, const EDriverId RivalDriverId) const;
	EPerformRivalInteractionType GetRivalFirstInteractionType(const EDriverId PlayerDriverId, const EDriverId RivalDriverId) const;
	void PlayPlayerLastVoice(const EDriverId PlayerDriverId, const EDriverId RivalDriverId, bool UseRivalSkin, TDelegate<void()> OnVoiceFinished) const;
	void PlayRivalFirstVoice(const EDriverId PlayerDriverId, const EDriverId RivalDriverId, bool UseRivalSkin, TDelegate<void()> OnVoiceFinished) const;
	void PlayRivalSoloVoice(const EDriverId RivalDriverId, bool UseRivalSkin, TDelegate<void()> OnVoiceFinished) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PerformRivalFirst">();
	}
	static class APerformRivalFirst* GetDefaultObj()
	{
		return GetDefaultObjImpl<APerformRivalFirst>();
	}
};
static_assert(alignof(APerformRivalFirst) == 0x000008, "Wrong alignment on APerformRivalFirst");
static_assert(sizeof(APerformRivalFirst) == 0x0002A0, "Wrong size on APerformRivalFirst");
static_assert(offsetof(APerformRivalFirst, AtomComponent) == 0x000290, "Member 'APerformRivalFirst::AtomComponent' has a wrong offset!");
static_assert(offsetof(APerformRivalFirst, RivalLevelWidget) == 0x000298, "Member 'APerformRivalFirst::RivalLevelWidget' has a wrong offset!");

// Class UNION.PerformRivalUtils
// 0x0000 (0x0028 - 0x0028)
class UPerformRivalUtils final : public UBlueprintFunctionLibrary
{
public:
	static EPerformRivalOutcome GetCurrentRivalOutcome(const int32 RivalRacerIndex);
	static EPerformRivalInteractionType GetFinalPerformRivalInteractionType(const EDriverId RivalDriverId, const EPerformRivalOutcome Outcome);
	static EPerformRivalInteractionType GetFirstPerformPlayerInteractionType(const EDriverId PlayerDriverId, const EDriverId RivalDriverId);
	static EPerformRivalInteractionType GetFirstPerformRivalInteractionType(const EDriverId PlayerDriverId, const EDriverId RivalDriverId);
	static struct FSoftObjectPath GetLipSyncAnimationPath(const EDriverId ID, const ERivalLipSyncType Type, const EDriverId RivalId);
	static EPerformRivalMode GetPerformRivalMode(const EDriverId PlayerDriverId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PerformRivalUtils">();
	}
	static class UPerformRivalUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPerformRivalUtils>();
	}
};
static_assert(alignof(UPerformRivalUtils) == 0x000008, "Wrong alignment on UPerformRivalUtils");
static_assert(sizeof(UPerformRivalUtils) == 0x000028, "Wrong size on UPerformRivalUtils");

// Class UNION.WirelessLobbyCreateButton
// 0x0000 (0x0480 - 0x0480)
class UWirelessLobbyCreateButton final : public UUnionUIButtonBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WirelessLobbyCreateButton">();
	}
	static class UWirelessLobbyCreateButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWirelessLobbyCreateButton>();
	}
};
static_assert(alignof(UWirelessLobbyCreateButton) == 0x000008, "Wrong alignment on UWirelessLobbyCreateButton");
static_assert(sizeof(UWirelessLobbyCreateButton) == 0x000480, "Wrong size on UWirelessLobbyCreateButton");

// Class UNION.PlayerDetail
// 0x0010 (0x03E8 - 0x03D8)
class UPlayerDetail : public UUnionUISceneBase
{
public:
	TArray<EGadgetId>                             DisableGadgetIdList;                               // 0x03D8(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void SetDisableGadgetList(const TArray<EGadgetId>& InDisableGadgetList);
	void SetUpData(const struct FLobbyPlayerData& InRacerData, bool bIsOwn, EBlockPlayerState InBlockType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerDetail">();
	}
	static class UPlayerDetail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerDetail>();
	}
};
static_assert(alignof(UPlayerDetail) == 0x000008, "Wrong alignment on UPlayerDetail");
static_assert(sizeof(UPlayerDetail) == 0x0003E8, "Wrong size on UPlayerDetail");
static_assert(offsetof(UPlayerDetail, DisableGadgetIdList) == 0x0003D8, "Member 'UPlayerDetail::DisableGadgetIdList' has a wrong offset!");

// Class UNION.PlayerInfoBillboard
// 0x0008 (0x0298 - 0x0290)
class APlayerInfoBillboard final : public AActor
{
public:
	float                                         UpdateInterval;                                    // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeDriverInfo(const EDriverId& DriverId);
	void UpdateBillboardMonitor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerInfoBillboard">();
	}
	static class APlayerInfoBillboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerInfoBillboard>();
	}
};
static_assert(alignof(APlayerInfoBillboard) == 0x000008, "Wrong alignment on APlayerInfoBillboard");
static_assert(sizeof(APlayerInfoBillboard) == 0x000298, "Wrong size on APlayerInfoBillboard");
static_assert(offsetof(APlayerInfoBillboard, UpdateInterval) == 0x000290, "Member 'APlayerInfoBillboard::UpdateInterval' has a wrong offset!");

// Class UNION.PlayerInfoMenuSequence
// 0x0008 (0x0370 - 0x0368)
class APlayerInfoMenuSequence final : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInitStateExit();
	void OnInitStateIdle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerInfoMenuSequence">();
	}
	static class APlayerInfoMenuSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerInfoMenuSequence>();
	}
};
static_assert(alignof(APlayerInfoMenuSequence) == 0x000008, "Wrong alignment on APlayerInfoMenuSequence");
static_assert(sizeof(APlayerInfoMenuSequence) == 0x000370, "Wrong size on APlayerInfoMenuSequence");

// Class UNION.PlayerLevelUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UPlayerLevelUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddDonpaTicket(int32 InAddTicket);
	static void AddPlayerFestaPoint(int32 AddPoint);
	static void AddRedStarRing(int32 RedStarRingNum, struct FPlayerLevelInfo* OutPlayerLevelInfo, class UDataTable* LevelUpDataTable);
	static void ClearPlayerAddRaceCount();
	static bool FindRewardRedStarRingHonorTableRow(class UDataTable* RewardRedStarRingHonorTableRow, const struct FHonorCommendationData& HonorCommendationData, struct FRewardRedStarRingHonorTableRow* OutData);
	static int32 GetBeforePlayerRaceCount();
	static int32 GetDonpaTicket();
	static int32 GetDonpaTicketMax();
	static int32 GetFinalResultFestaRanking();
	static int32 GetLocalDataFestaId();
	static int32 GetPlayerAddRaceCount();
	static int32 GetPlayerFestaPoint();
	static int32 GetPlayerLevel();
	static int32 GetPlayerTotalRaceCount();
	static int32 GetRateHighPoint();
	static int32 GetRedStarRing();
	static int32 GetRequiredRedStarRingForLevelUp(int32 PlayerLevel, class UDataTable* LevelUpDataTable);
	static int32 GetRSRDonpaTicket(class UDataTable* RewardRedStarRingDataTable, const EStageId InStageId);
	static int32 GetTotalDonpaTicket();
	static int32 GetUseDonpaTicket();
	static void IncPlayerAddRaceCount();
	static void IncPlayerTotalRaceCount();
	static bool IsEmptyFinalResultFestaRanking();
	static bool IsSetFinalResultFestaRanking();
	static bool PreCheckLevelUp(int32 RedStarRingNum, class UDataTable* LevelUpDataTable);
	static void SaveResult(class UDataTable* RewardRedStarRingDataTable, class UDataTable* RewardRedStarRingHonorDataTable, const TArray<ERewardRedStarRingType>& RewardRedStarRingTypes, const TArray<struct FHonorCommendationData>& RSRHonorList, struct FPlayerLevelInfo* OutPlayerLevelInfo, TArray<struct FRewardRedStarRingData>* OutRedStarRingData, class UDataTable* LevelUpDataTable);
	static void SetDonpaTicket(int32 DonpaTicketNum);
	static void SetFinalResultFestaRanking(int32 Ranking);
	static void SetFinalResultFestaRanking_Empty();
	static void SetLocalDataFestaId(int32 festaId);
	static void SetPlayerAddRaceCount(int32 InAddCount);
	static void SetPlayerFestaPoint(int32 InPoint);
	static void SetPlayerLevel(int32 PlayerLevel);
	static void SetPlayerTotalRaceCount(int32 InPlayerTotalRaceCount);
	static void SetRateHighPoint(int32 Point);
	static void SetRatePoint(int32 Point);
	static void SetRedStarRing(int32 RedStarRingNum);
	static void UseDonpaTicket(int32 InUseTicket);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerLevelUtilityLibrary">();
	}
	static class UPlayerLevelUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerLevelUtilityLibrary>();
	}
};
static_assert(alignof(UPlayerLevelUtilityLibrary) == 0x000008, "Wrong alignment on UPlayerLevelUtilityLibrary");
static_assert(sizeof(UPlayerLevelUtilityLibrary) == 0x000028, "Wrong size on UPlayerLevelUtilityLibrary");

// Class UNION.PlayerProfileState
// 0x0338 (0x0460 - 0x0128)
class UPlayerProfileState : public UMenuSequenceSubStateBase
{
public:
	bool                                          bIsUsedTop;                                        // 0x0128(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMenuRacerLobby*                        Racer;                                             // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RacerIndex;                                        // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLobbyPlayerData                       ProfilePlayerData;                                 // 0x0140(0x00F8)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	EBlockPlayerState                             BlockType;                                         // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOwnerProfile;                                   // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsNPCProfile;                                     // 0x023A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSentNice;                                       // 0x023B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOwnerHost;                                      // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMatchingLobbyType                            LobbyType;                                         // 0x023D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bZoomInEnd;                                        // 0x023E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPutLeft;                                        // 0x023F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsUsingCamera;                                    // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          CameraSlideSoundCue;                               // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        OffsetPos;                                         // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        LookAtOffsetPos;                                   // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        TopMenuOffsetPos;                                  // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        TopMenuLookAtOffsetPos;                            // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 TopMenuCameraManualDistance;                       // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 LobbyCameraManualDistance;                         // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FString                                 SelectUserProductId;                               // 0x02B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SelectUserPlatformId;                              // 0x02C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SelectUserPlatform;                                // 0x02D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMenuCameraManager*                     PlayerDetailCameraManager;                         // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOnlinePlayerDetailBase*                PlayerDetailWidget;                                // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OwnerNiceCount;                                    // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayerProfileHideActorStruct>  LobbyPlayerProfileHideList;                        // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPlayerProfileHideActorStruct>  TopMenuPlayerProfileHideList;                      // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPlayerProfileHideActorStruct>  FestaPlayerProfileHideList;                        // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPlayerProfileHideActorStruct>  NSWirelessPlayerProfileHideList;                   // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UCommonMessageBar*                      MessageBarSceneObject;                             // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonLineMessageWidget*               RequestFriendMessageBar;                           // 0x0340(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FText>                           BlockWindowWaitingTextList;                        // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FText                                   DisconenctErrorWindowText;                         // 0x0358(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class AActor*                                 CubotActor;                                        // 0x0368(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 OrbotActor;                                        // 0x0370(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 DodonpaActor;                                      // 0x0378(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIPopupWindowBase*                PopupWindow;                                       // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FriendRequestBarShowTime;                          // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 Index)>   OnPlayerChangedEvent;                              // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   OnPlayerSebdNiceEvent;                             // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B0[0x71];                                     // 0x03B0(0x0071)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsAlone;                                          // 0x0421(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_422[0x6];                                      // 0x0422(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FriendRequestBarSuccessText;                       // 0x0428(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_438[0x28];                                     // 0x0438(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FVector> GetCameraOffsetPos(bool bIsTopMenu);
	TArray<struct FVector> GetCameraViewOffsetPos(bool bIsTopMenu);
	TArray<struct FPlayerProfileHideActorStruct> GetHideMemberList();
	int32 GetLobbyPlayerIndex(bool bIsInputLeft);
	void HideRacers();
	void OnDecideBlockUser();
	void OnDecideFriendRequestUser();
	void OnDecideKickUser();
	void OnDecidePopup(EPlayerInfoSubWindowBtnType InBtnType);
	void OnDecideReportUser();
	void OnFourceEndEvent();
	void OnPlayerProfileCameraMoveEndEvent(ELobbyCameraMoveType MoveType);
	void OnProfileDisconnectErrorWindow(class UUnionUIButtonBase* Object, int32 InBtnIndex, int32 InIndex);
	void OnRequestBarWindowAnimEnd();
	void OnSetChangedNextProfileEvent(bool bIsSuccess);
	void OnUpdateNiceCount(int32 InNiceCount);
	void SetCameraManager(class AMenuCameraManager* InCameraManager);
	void SetChangedNextProfile(class AMenuRacerLobby* InRacer, int32 InCurrentRacerIndex, int32 InNextPlayerDataIndex, bool bInIsOwner, bool bInIsSentNice, bool bInIsNPC, const class FString& InUniqueNetIdRepl, EBlockPlayerState InBlockType, bool bInIsOwnHost, EMatchingLobbyType InLobbyType, int32 InFakeIndex, const class FString& InPlatformId, const class FString& InPlatform);
	void SetLobbyNPCActor(class AActor* InCubotActor, class AActor* InOrbotActor, class AActor* InDodonpaActor);
	void SetLobbyRacerProfile(class AMenuRacerLobby* InRacer, int32 InCurrentRacerIndex, const struct FLobbyPlayerData& InLobbyPlayerData, bool InbIsOwner, bool InbIsSentNice, bool InbIsNPC, const class FString& InUniqueNetIdRepl, EBlockPlayerState InBlockType, bool bInIsOwnHost, EMatchingLobbyType InLobbyType, int32 InNiceCount, int32 InFakeIndex, const class FString& InPlatformId, const class FString& InPlatform);
	void ShowRacers(bool bIsAll);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerProfileState">();
	}
	static class UPlayerProfileState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerProfileState>();
	}
};
static_assert(alignof(UPlayerProfileState) == 0x000008, "Wrong alignment on UPlayerProfileState");
static_assert(sizeof(UPlayerProfileState) == 0x000460, "Wrong size on UPlayerProfileState");
static_assert(offsetof(UPlayerProfileState, bIsUsedTop) == 0x000128, "Member 'UPlayerProfileState::bIsUsedTop' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, Racer) == 0x000130, "Member 'UPlayerProfileState::Racer' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, RacerIndex) == 0x000138, "Member 'UPlayerProfileState::RacerIndex' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, ProfilePlayerData) == 0x000140, "Member 'UPlayerProfileState::ProfilePlayerData' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, BlockType) == 0x000238, "Member 'UPlayerProfileState::BlockType' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, bIsOwnerProfile) == 0x000239, "Member 'UPlayerProfileState::bIsOwnerProfile' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, bIsNPCProfile) == 0x00023A, "Member 'UPlayerProfileState::bIsNPCProfile' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, bIsSentNice) == 0x00023B, "Member 'UPlayerProfileState::bIsSentNice' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, bIsOwnerHost) == 0x00023C, "Member 'UPlayerProfileState::bIsOwnerHost' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, LobbyType) == 0x00023D, "Member 'UPlayerProfileState::LobbyType' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, bZoomInEnd) == 0x00023E, "Member 'UPlayerProfileState::bZoomInEnd' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, bIsPutLeft) == 0x00023F, "Member 'UPlayerProfileState::bIsPutLeft' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, bIsUsingCamera) == 0x000240, "Member 'UPlayerProfileState::bIsUsingCamera' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, CameraSlideSoundCue) == 0x000248, "Member 'UPlayerProfileState::CameraSlideSoundCue' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, OffsetPos) == 0x000250, "Member 'UPlayerProfileState::OffsetPos' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, LookAtOffsetPos) == 0x000260, "Member 'UPlayerProfileState::LookAtOffsetPos' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, TopMenuOffsetPos) == 0x000270, "Member 'UPlayerProfileState::TopMenuOffsetPos' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, TopMenuLookAtOffsetPos) == 0x000280, "Member 'UPlayerProfileState::TopMenuLookAtOffsetPos' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, TopMenuCameraManualDistance) == 0x000290, "Member 'UPlayerProfileState::TopMenuCameraManualDistance' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, LobbyCameraManualDistance) == 0x0002A0, "Member 'UPlayerProfileState::LobbyCameraManualDistance' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, SelectUserProductId) == 0x0002B0, "Member 'UPlayerProfileState::SelectUserProductId' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, SelectUserPlatformId) == 0x0002C0, "Member 'UPlayerProfileState::SelectUserPlatformId' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, SelectUserPlatform) == 0x0002D0, "Member 'UPlayerProfileState::SelectUserPlatform' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, PlayerDetailCameraManager) == 0x0002E0, "Member 'UPlayerProfileState::PlayerDetailCameraManager' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, PlayerDetailWidget) == 0x0002E8, "Member 'UPlayerProfileState::PlayerDetailWidget' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, OwnerNiceCount) == 0x0002F0, "Member 'UPlayerProfileState::OwnerNiceCount' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, LobbyPlayerProfileHideList) == 0x0002F8, "Member 'UPlayerProfileState::LobbyPlayerProfileHideList' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, TopMenuPlayerProfileHideList) == 0x000308, "Member 'UPlayerProfileState::TopMenuPlayerProfileHideList' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, FestaPlayerProfileHideList) == 0x000318, "Member 'UPlayerProfileState::FestaPlayerProfileHideList' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, NSWirelessPlayerProfileHideList) == 0x000328, "Member 'UPlayerProfileState::NSWirelessPlayerProfileHideList' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, MessageBarSceneObject) == 0x000338, "Member 'UPlayerProfileState::MessageBarSceneObject' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, RequestFriendMessageBar) == 0x000340, "Member 'UPlayerProfileState::RequestFriendMessageBar' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, BlockWindowWaitingTextList) == 0x000348, "Member 'UPlayerProfileState::BlockWindowWaitingTextList' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, DisconenctErrorWindowText) == 0x000358, "Member 'UPlayerProfileState::DisconenctErrorWindowText' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, CubotActor) == 0x000368, "Member 'UPlayerProfileState::CubotActor' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, OrbotActor) == 0x000370, "Member 'UPlayerProfileState::OrbotActor' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, DodonpaActor) == 0x000378, "Member 'UPlayerProfileState::DodonpaActor' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, PopupWindow) == 0x000380, "Member 'UPlayerProfileState::PopupWindow' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, FriendRequestBarShowTime) == 0x000388, "Member 'UPlayerProfileState::FriendRequestBarShowTime' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, OnPlayerChangedEvent) == 0x000390, "Member 'UPlayerProfileState::OnPlayerChangedEvent' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, OnPlayerSebdNiceEvent) == 0x0003A0, "Member 'UPlayerProfileState::OnPlayerSebdNiceEvent' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, bIsAlone) == 0x000421, "Member 'UPlayerProfileState::bIsAlone' has a wrong offset!");
static_assert(offsetof(UPlayerProfileState, FriendRequestBarSuccessText) == 0x000428, "Member 'UPlayerProfileState::FriendRequestBarSuccessText' has a wrong offset!");

// Class UNION.PlayLogBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPlayLogBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ModeEnd(EGameModeId InGameModeId);
	static void ModeEndPlayLogGameModeID(EPlayLogGameModeId InGameModeId);
	static void ModeStart(EGameModeId InGameModeId);
	static void ModeStartPlayLogGameModeID(EPlayLogGameModeId InGameModeId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayLogBlueprintFunctionLibrary">();
	}
	static class UPlayLogBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayLogBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UPlayLogBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UPlayLogBlueprintFunctionLibrary");
static_assert(sizeof(UPlayLogBlueprintFunctionLibrary) == 0x000028, "Wrong size on UPlayLogBlueprintFunctionLibrary");

// Class UNION.PopupWindowTutorial
// 0x0020 (0x0348 - 0x0328)
class UPopupWindowTutorial : public UUnionUIInputWidget
{
public:
	TArray<struct FTutorialTextDispTime>          TextDispTime;                                      // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsSetText;                                         // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DispTextIndex;                                     // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsTextDisp(float MovieTime, bool IsRepeat);
	void ResetDispText();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PopupWindowTutorial">();
	}
	static class UPopupWindowTutorial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPopupWindowTutorial>();
	}
};
static_assert(alignof(UPopupWindowTutorial) == 0x000008, "Wrong alignment on UPopupWindowTutorial");
static_assert(sizeof(UPopupWindowTutorial) == 0x000348, "Wrong size on UPopupWindowTutorial");
static_assert(offsetof(UPopupWindowTutorial, TextDispTime) == 0x000328, "Member 'UPopupWindowTutorial::TextDispTime' has a wrong offset!");
static_assert(offsetof(UPopupWindowTutorial, IsSetText) == 0x000338, "Member 'UPopupWindowTutorial::IsSetText' has a wrong offset!");
static_assert(offsetof(UPopupWindowTutorial, DispTextIndex) == 0x00033C, "Member 'UPopupWindowTutorial::DispTextIndex' has a wrong offset!");

// Class UNION.PreNoticeState
// 0x00E8 (0x0210 - 0x0128)
class UPreNoticeState : public UMenuSequenceSubStateBase
{
public:
	TArray<struct FCompensationGetCompensationsResponse_ReceivableCompensationData> ReceiveCompensationData; // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FCompensationGetCompensationsResponse_ReceivableCompensationData> CanUseCompensationData; // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRewardGetWindowParamWithTitle> CompensationItemGetWindowData;                     // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                          bWaitingCompensationCommunication;                 // 0x0158(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitingCompensationCommunicationTime;              // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            WaitingCompensationCommunicationWidget;            // 0x0160(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   CompensationWindowSoftRef;                         // 0x0168(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URewardGetWindow*                       CompensationWindow;                                // 0x0190(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   ResultDonpaTicketWindowSoftRef;                    // 0x0198(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UResultDonpaTicket*                     ResultDonpaTicketWindow;                           // 0x01C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BeforeCompensationDonpaTicket;                     // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIPopupWindowBase*                ErrorPopupWindow;                                  // 0x01D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D8[0x30];                                     // 0x01D8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsOnline;                                          // 0x0208(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckLoggedin();
	void CreateCanUseCompensationDataArray(const TArray<struct FCompensationGetCompensationsResponse_ReceivableCompensationData>& InReceiveData, TArray<struct FCompensationGetCompensationsResponse_ReceivableCompensationData>* OutCanUseReceiveData, TArray<struct FRewardGetWindowParamWithTitle>* OutWindowParamData);
	bool CreateLoggedinErrorPopupWindow(const class FText& InErrorTitle, const class FText& InErrorMessage);
	void CreateWaitingCompensationCommunicationUI();
	void DelayOpenWindow();
	void DoCompensationNext();
	void EndTutorialVideo();
	void FinishedCompensation();
	void FinishedResultDonpaTicketWindow();
	void FinishedSaveCompensationSaveData(ESaveDataStatus Status);
	int32 GetLastOrder();
	void GetRewardTitleHonorList(TArray<int32>* RewardTitleHonorList);
	int32 GetTicketNum();
	bool IsSendFestaEndResult();
	bool IsStartDLCInfomation();
	bool IsStartFestaInfomation();
	bool IsStartFreecontentInfomation();
	bool IsStartGetDLCContent();
	bool IsStartGetDLCFreeContent();
	bool IsStartLegendInfomation();
	bool IsStartNoticeEventEnd();
	bool IsStartRaceDisableGadgetInfomation();
	void OnErrorPopupWindowClose(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnExitStateTutorialVideo();
	void OnInitializeFlow_Compensation();
	void OnInitStateTutorialVideo();
	void OnReceiveCheckCompensation(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnReceiveCheckFestaReward(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void RemoveWaitingCompensationCommunicationUI();
	void SendCheckCompensationRequest(bool* OutSendSuccess);
	void SendCheckFestaRewardRequest();
	void SetCompensationTitleText(const int32 InTextId);
	void SetConnectionErrorTime();
	void SetOverrideUpperText(const int32 InTextId);
	void StartCompensationWindow(bool* OutIsOpenWindow);
	void StartTutorialVideo();
	void UpdateSaveDataPeriod();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreNoticeState">();
	}
	static class UPreNoticeState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreNoticeState>();
	}
};
static_assert(alignof(UPreNoticeState) == 0x000008, "Wrong alignment on UPreNoticeState");
static_assert(sizeof(UPreNoticeState) == 0x000210, "Wrong size on UPreNoticeState");
static_assert(offsetof(UPreNoticeState, ReceiveCompensationData) == 0x000128, "Member 'UPreNoticeState::ReceiveCompensationData' has a wrong offset!");
static_assert(offsetof(UPreNoticeState, CanUseCompensationData) == 0x000138, "Member 'UPreNoticeState::CanUseCompensationData' has a wrong offset!");
static_assert(offsetof(UPreNoticeState, CompensationItemGetWindowData) == 0x000148, "Member 'UPreNoticeState::CompensationItemGetWindowData' has a wrong offset!");
static_assert(offsetof(UPreNoticeState, bWaitingCompensationCommunication) == 0x000158, "Member 'UPreNoticeState::bWaitingCompensationCommunication' has a wrong offset!");
static_assert(offsetof(UPreNoticeState, WaitingCompensationCommunicationTime) == 0x00015C, "Member 'UPreNoticeState::WaitingCompensationCommunicationTime' has a wrong offset!");
static_assert(offsetof(UPreNoticeState, WaitingCompensationCommunicationWidget) == 0x000160, "Member 'UPreNoticeState::WaitingCompensationCommunicationWidget' has a wrong offset!");
static_assert(offsetof(UPreNoticeState, CompensationWindowSoftRef) == 0x000168, "Member 'UPreNoticeState::CompensationWindowSoftRef' has a wrong offset!");
static_assert(offsetof(UPreNoticeState, CompensationWindow) == 0x000190, "Member 'UPreNoticeState::CompensationWindow' has a wrong offset!");
static_assert(offsetof(UPreNoticeState, ResultDonpaTicketWindowSoftRef) == 0x000198, "Member 'UPreNoticeState::ResultDonpaTicketWindowSoftRef' has a wrong offset!");
static_assert(offsetof(UPreNoticeState, ResultDonpaTicketWindow) == 0x0001C0, "Member 'UPreNoticeState::ResultDonpaTicketWindow' has a wrong offset!");
static_assert(offsetof(UPreNoticeState, BeforeCompensationDonpaTicket) == 0x0001C8, "Member 'UPreNoticeState::BeforeCompensationDonpaTicket' has a wrong offset!");
static_assert(offsetof(UPreNoticeState, ErrorPopupWindow) == 0x0001D0, "Member 'UPreNoticeState::ErrorPopupWindow' has a wrong offset!");
static_assert(offsetof(UPreNoticeState, IsOnline) == 0x000208, "Member 'UPreNoticeState::IsOnline' has a wrong offset!");

// Class UNION.TextureSwitcherComponent
// 0x0018 (0x00B8 - 0x00A0)
class UTextureSwitcherComponent final : public UActorComponent
{
public:
	TArray<TSoftObjectPtr<class UTexture2D>>      TextureList;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bPurgeAfterSwitch;                                 // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SwitchTexture(int32 MaterialIndex, const class FName ParameterName, class UTexture2D* Texture);
	bool SwitchTextureByIndex(int32 MaterialIndex, const class FName ParameterName, int32 TextureIndex);
	void SwitchTextureByIndexAfterLoad(int32 TextureIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextureSwitcherComponent">();
	}
	static class UTextureSwitcherComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureSwitcherComponent>();
	}
};
static_assert(alignof(UTextureSwitcherComponent) == 0x000008, "Wrong alignment on UTextureSwitcherComponent");
static_assert(sizeof(UTextureSwitcherComponent) == 0x0000B8, "Wrong size on UTextureSwitcherComponent");
static_assert(offsetof(UTextureSwitcherComponent, TextureList) == 0x0000A0, "Member 'UTextureSwitcherComponent::TextureList' has a wrong offset!");
static_assert(offsetof(UTextureSwitcherComponent, bPurgeAfterSwitch) == 0x0000B0, "Member 'UTextureSwitcherComponent::bPurgeAfterSwitch' has a wrong offset!");

// Class UNION.PreRaceSequence
// 0x0018 (0x0380 - 0x0368)
class APreRaceSequence final : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x10];                                     // 0x0368(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UPreRaceSequenceStateErrorWindow*       PreRaceSequenceStateErrorWindowComponent;          // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ExitCheckLobbyMemberCallback(EPreRaceSeqErrorCode ErrorCode);
	void ExitComSyncCallback(EPreRaceSeqErrorCode ErrorCode);
	void ExitHostMigrationCallback(EPreRaceSeqErrorCode ErrorCode);
	void ExitMeasurementCallback(EPreRaceSeqErrorCode ErrorCode);
	void HandlingError();
	void InitializeRaceResultData();
	void OnExitStateExit();
	void OnExitStateWaitP2PConnection();
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnInitStateWaitP2PConnection();
	void OnLobbyDelete(class ULobbyContextBase* LobbyContext);
	void OnMemberPromote(class ULobbyContextBase* LobbyContext, class ULobbyMemberContextBase* MemberContext);
	void OnUpdateStateWaitP2PConnection(float InDeltaTime);
	void SetNextPreRaceSequenceState(EPreRaceSequenceState InState, EPreRaceSequenceState PrevState);
	void SetPreRaceSequenceType(EPreRaceSequenceState InNextState);

	bool HasAnyError() const;
	bool HasError() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreRaceSequence">();
	}
	static class APreRaceSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<APreRaceSequence>();
	}
};
static_assert(alignof(APreRaceSequence) == 0x000008, "Wrong alignment on APreRaceSequence");
static_assert(sizeof(APreRaceSequence) == 0x000380, "Wrong size on APreRaceSequence");
static_assert(offsetof(APreRaceSequence, PreRaceSequenceStateErrorWindowComponent) == 0x000378, "Member 'APreRaceSequence::PreRaceSequenceStateErrorWindowComponent' has a wrong offset!");

// Class UNION.UnionTravelRingComponent
// 0x0010 (0x0BB0 - 0x0BA0)
class UUnionTravelRingComponent final : public USceneCaptureComponentEx
{
public:
	class AUnionTravelRingLevelActor*             OwnerTravelRingLevelActor_;                        // 0x0B98(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AUnionTravelRingActor*                  OwnerRingActor_;                                   // 0x0BA0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BA8[0x8];                                      // 0x0BA8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionTravelRingComponent">();
	}
	static class UUnionTravelRingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionTravelRingComponent>();
	}
};
static_assert(alignof(UUnionTravelRingComponent) == 0x000010, "Wrong alignment on UUnionTravelRingComponent");
static_assert(sizeof(UUnionTravelRingComponent) == 0x000BB0, "Wrong size on UUnionTravelRingComponent");
static_assert(offsetof(UUnionTravelRingComponent, OwnerTravelRingLevelActor_) == 0x000B98, "Member 'UUnionTravelRingComponent::OwnerTravelRingLevelActor_' has a wrong offset!");
static_assert(offsetof(UUnionTravelRingComponent, OwnerRingActor_) == 0x000BA0, "Member 'UUnionTravelRingComponent::OwnerRingActor_' has a wrong offset!");

// Class UNION.PreRaceSequenceStateBase
// 0x0010 (0x0108 - 0x00F8)
class UPreRaceSequenceStateBase : public UHierarchicalStateMachineStateComponent
{
public:
	EPreRaceSequenceState                         DefaultSequenceState;                              // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F9[0xF];                                       // 0x00F9(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreRaceSequenceStateBase">();
	}
	static class UPreRaceSequenceStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreRaceSequenceStateBase>();
	}
};
static_assert(alignof(UPreRaceSequenceStateBase) == 0x000008, "Wrong alignment on UPreRaceSequenceStateBase");
static_assert(sizeof(UPreRaceSequenceStateBase) == 0x000108, "Wrong size on UPreRaceSequenceStateBase");
static_assert(offsetof(UPreRaceSequenceStateBase, DefaultSequenceState) == 0x0000F8, "Member 'UPreRaceSequenceStateBase::DefaultSequenceState' has a wrong offset!");

// Class UNION.PreRaceSequenceStateCheckLobbyMember
// 0x0018 (0x0120 - 0x0108)
class UPreRaceSequenceStateCheckLobbyMember final : public UPreRaceSequenceStateBase
{
public:
	TMulticastInlineDelegate<void(EPreRaceSeqErrorCode ErrorCode)> OnExitDelegate;                   // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreRaceSequenceStateCheckLobbyMember">();
	}
	static class UPreRaceSequenceStateCheckLobbyMember* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreRaceSequenceStateCheckLobbyMember>();
	}
};
static_assert(alignof(UPreRaceSequenceStateCheckLobbyMember) == 0x000008, "Wrong alignment on UPreRaceSequenceStateCheckLobbyMember");
static_assert(sizeof(UPreRaceSequenceStateCheckLobbyMember) == 0x000120, "Wrong size on UPreRaceSequenceStateCheckLobbyMember");
static_assert(offsetof(UPreRaceSequenceStateCheckLobbyMember, OnExitDelegate) == 0x000108, "Member 'UPreRaceSequenceStateCheckLobbyMember::OnExitDelegate' has a wrong offset!");

// Class UNION.PreRaceSequenceStateCOMSync
// 0x0128 (0x0230 - 0x0108)
class UPreRaceSequenceStateCOMSync final : public UPreRaceSequenceStateBase
{
public:
	TMulticastInlineDelegate<void(EPreRaceSeqErrorCode ErrorCode)> OnExitDelegate;                   // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	uint8                                         Pad_118[0xA8];                                     // 0x0118(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              DriverDataTable;                                   // 0x01C0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UDataTable>              MachineDataTable;                                  // 0x01E8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_210[0x20];                                     // 0x0210(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreRaceSequenceStateCOMSync">();
	}
	static class UPreRaceSequenceStateCOMSync* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreRaceSequenceStateCOMSync>();
	}
};
static_assert(alignof(UPreRaceSequenceStateCOMSync) == 0x000008, "Wrong alignment on UPreRaceSequenceStateCOMSync");
static_assert(sizeof(UPreRaceSequenceStateCOMSync) == 0x000230, "Wrong size on UPreRaceSequenceStateCOMSync");
static_assert(offsetof(UPreRaceSequenceStateCOMSync, OnExitDelegate) == 0x000108, "Member 'UPreRaceSequenceStateCOMSync::OnExitDelegate' has a wrong offset!");
static_assert(offsetof(UPreRaceSequenceStateCOMSync, DriverDataTable) == 0x0001C0, "Member 'UPreRaceSequenceStateCOMSync::DriverDataTable' has a wrong offset!");
static_assert(offsetof(UPreRaceSequenceStateCOMSync, MachineDataTable) == 0x0001E8, "Member 'UPreRaceSequenceStateCOMSync::MachineDataTable' has a wrong offset!");

// Class UNION.RaceSequenceStateEntryRival
// 0x0010 (0x0120 - 0x0110)
class URaceSequenceStateEntryRival : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URaceBeforeSharedData*                  RaceBeforeSharedData;                              // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateEntryRival">();
	}
	static class URaceSequenceStateEntryRival* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateEntryRival>();
	}
};
static_assert(alignof(URaceSequenceStateEntryRival) == 0x000008, "Wrong alignment on URaceSequenceStateEntryRival");
static_assert(sizeof(URaceSequenceStateEntryRival) == 0x000120, "Wrong size on URaceSequenceStateEntryRival");
static_assert(offsetof(URaceSequenceStateEntryRival, RaceBeforeSharedData) == 0x000118, "Member 'URaceSequenceStateEntryRival::RaceBeforeSharedData' has a wrong offset!");

// Class UNION.SequenceStateNetworkCleanup
// 0x0018 (0x0110 - 0x00F8)
class USequenceStateNetworkCleanup : public UHierarchicalStateMachineStateComponent
{
public:
	bool                                          bShouldCleanupP2PConnection;                       // 0x00F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldCleanupPublicLobby;                         // 0x00F9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldCleanupPrivateLobby;                        // 0x00FA(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldEOSLogout;                                  // 0x00FB(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeoutTime;                                       // 0x00FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_100[0x10];                                     // 0x0100(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCompleteEOSLogout(int32 LocalUserNum, bool bWasSuccessful);
	void OnCompleteExitLobby(class ULobbyContextBase* LobbyContext, const struct FOnlineErrorBP& Error);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SequenceStateNetworkCleanup">();
	}
	static class USequenceStateNetworkCleanup* GetDefaultObj()
	{
		return GetDefaultObjImpl<USequenceStateNetworkCleanup>();
	}
};
static_assert(alignof(USequenceStateNetworkCleanup) == 0x000008, "Wrong alignment on USequenceStateNetworkCleanup");
static_assert(sizeof(USequenceStateNetworkCleanup) == 0x000110, "Wrong size on USequenceStateNetworkCleanup");
static_assert(offsetof(USequenceStateNetworkCleanup, bShouldCleanupP2PConnection) == 0x0000F8, "Member 'USequenceStateNetworkCleanup::bShouldCleanupP2PConnection' has a wrong offset!");
static_assert(offsetof(USequenceStateNetworkCleanup, bShouldCleanupPublicLobby) == 0x0000F9, "Member 'USequenceStateNetworkCleanup::bShouldCleanupPublicLobby' has a wrong offset!");
static_assert(offsetof(USequenceStateNetworkCleanup, bShouldCleanupPrivateLobby) == 0x0000FA, "Member 'USequenceStateNetworkCleanup::bShouldCleanupPrivateLobby' has a wrong offset!");
static_assert(offsetof(USequenceStateNetworkCleanup, bShouldEOSLogout) == 0x0000FB, "Member 'USequenceStateNetworkCleanup::bShouldEOSLogout' has a wrong offset!");
static_assert(offsetof(USequenceStateNetworkCleanup, TimeoutTime) == 0x0000FC, "Member 'USequenceStateNetworkCleanup::TimeoutTime' has a wrong offset!");

// Class UNION.PreRaceSequenceStateErrorWindow
// 0x0000 (0x0110 - 0x0110)
class UPreRaceSequenceStateErrorWindow final : public USequenceStateNetworkCleanup
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreRaceSequenceStateErrorWindow">();
	}
	static class UPreRaceSequenceStateErrorWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreRaceSequenceStateErrorWindow>();
	}
};
static_assert(alignof(UPreRaceSequenceStateErrorWindow) == 0x000008, "Wrong alignment on UPreRaceSequenceStateErrorWindow");
static_assert(sizeof(UPreRaceSequenceStateErrorWindow) == 0x000110, "Wrong size on UPreRaceSequenceStateErrorWindow");

// Class UNION.PreRaceSequenceStateHostMigrate
// 0x0138 (0x0240 - 0x0108)
class UPreRaceSequenceStateHostMigrate final : public UPreRaceSequenceStateBase
{
public:
	TMulticastInlineDelegate<void(EPreRaceSeqErrorCode ErrorCode)> OnExitDelegate;                   // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x128];                                    // 0x0118(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHostCandidateUserId(const TArray<class FString>& InUserIdArray);
	void SetLatencyScoreMap(const TMap<class FString, int32>& InScoreMap);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreRaceSequenceStateHostMigrate">();
	}
	static class UPreRaceSequenceStateHostMigrate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreRaceSequenceStateHostMigrate>();
	}
};
static_assert(alignof(UPreRaceSequenceStateHostMigrate) == 0x000008, "Wrong alignment on UPreRaceSequenceStateHostMigrate");
static_assert(sizeof(UPreRaceSequenceStateHostMigrate) == 0x000240, "Wrong size on UPreRaceSequenceStateHostMigrate");
static_assert(offsetof(UPreRaceSequenceStateHostMigrate, OnExitDelegate) == 0x000108, "Member 'UPreRaceSequenceStateHostMigrate::OnExitDelegate' has a wrong offset!");

// Class UNION.PreRaceSequenceStateMeasurement
// 0x00C0 (0x01C8 - 0x0108)
class UPreRaceSequenceStateMeasurement final : public UPreRaceSequenceStateBase
{
public:
	TMulticastInlineDelegate<void(EPreRaceSeqErrorCode ErrorCode)> OnExitDelegate;                   // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0xB0];                                     // 0x0118(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetLatencyScoreMap(TMap<class FString, int32>* OutScoreMap) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreRaceSequenceStateMeasurement">();
	}
	static class UPreRaceSequenceStateMeasurement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreRaceSequenceStateMeasurement>();
	}
};
static_assert(alignof(UPreRaceSequenceStateMeasurement) == 0x000008, "Wrong alignment on UPreRaceSequenceStateMeasurement");
static_assert(sizeof(UPreRaceSequenceStateMeasurement) == 0x0001C8, "Wrong size on UPreRaceSequenceStateMeasurement");
static_assert(offsetof(UPreRaceSequenceStateMeasurement, OnExitDelegate) == 0x000108, "Member 'UPreRaceSequenceStateMeasurement::OnExitDelegate' has a wrong offset!");

// Class UNION.ResidentAssetLoader
// 0x0050 (0x0078 - 0x0028)
class UResidentAssetLoader final : public UObject
{
public:
	class UResidentDataAsset*                     ResidentDataAsset;                                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UResourceHolder*                        ResidentAssetHolder;                               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x40];                                      // 0x0038(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResidentAssetLoader">();
	}
	static class UResidentAssetLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResidentAssetLoader>();
	}
};
static_assert(alignof(UResidentAssetLoader) == 0x000008, "Wrong alignment on UResidentAssetLoader");
static_assert(sizeof(UResidentAssetLoader) == 0x000078, "Wrong size on UResidentAssetLoader");
static_assert(offsetof(UResidentAssetLoader, ResidentDataAsset) == 0x000028, "Member 'UResidentAssetLoader::ResidentDataAsset' has a wrong offset!");
static_assert(offsetof(UResidentAssetLoader, ResidentAssetHolder) == 0x000030, "Member 'UResidentAssetLoader::ResidentAssetHolder' has a wrong offset!");

// Class UNION.PreviewMachineActor
// 0x0008 (0x0298 - 0x0290)
class APreviewMachineActor final : public AActor
{
public:
	class UAlwaysTickCustomAttrAnimComponent*     CustomAttrAnimComponent;                           // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreviewMachineActor">();
	}
	static class APreviewMachineActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APreviewMachineActor>();
	}
};
static_assert(alignof(APreviewMachineActor) == 0x000008, "Wrong alignment on APreviewMachineActor");
static_assert(sizeof(APreviewMachineActor) == 0x000298, "Wrong size on APreviewMachineActor");
static_assert(offsetof(APreviewMachineActor, CustomAttrAnimComponent) == 0x000290, "Member 'APreviewMachineActor::CustomAttrAnimComponent' has a wrong offset!");

// Class UNION.PrimaryDriverDataAsset
// 0x00C0 (0x00F0 - 0x0030)
class UPrimaryDriverDataAsset final : public UPrimaryDataAsset
{
public:
	EDriverId                                     DriverId;                                          // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SceneSkeletalMesh;                                 // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   RaceAnimInstance;                                  // 0x0048(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MenuAnimInstance;                                  // 0x0070(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0098(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CutInTexture;                                      // 0x00A0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TeamCutInTexture;                                  // 0x00C8(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Refresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryDriverDataAsset">();
	}
	static class UPrimaryDriverDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryDriverDataAsset>();
	}
};
static_assert(alignof(UPrimaryDriverDataAsset) == 0x000008, "Wrong alignment on UPrimaryDriverDataAsset");
static_assert(sizeof(UPrimaryDriverDataAsset) == 0x0000F0, "Wrong size on UPrimaryDriverDataAsset");
static_assert(offsetof(UPrimaryDriverDataAsset, DriverId) == 0x000030, "Member 'UPrimaryDriverDataAsset::DriverId' has a wrong offset!");
static_assert(offsetof(UPrimaryDriverDataAsset, SkeletalMesh) == 0x000038, "Member 'UPrimaryDriverDataAsset::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(UPrimaryDriverDataAsset, SceneSkeletalMesh) == 0x000040, "Member 'UPrimaryDriverDataAsset::SceneSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UPrimaryDriverDataAsset, RaceAnimInstance) == 0x000048, "Member 'UPrimaryDriverDataAsset::RaceAnimInstance' has a wrong offset!");
static_assert(offsetof(UPrimaryDriverDataAsset, MenuAnimInstance) == 0x000070, "Member 'UPrimaryDriverDataAsset::MenuAnimInstance' has a wrong offset!");
static_assert(offsetof(UPrimaryDriverDataAsset, IconTexture) == 0x000098, "Member 'UPrimaryDriverDataAsset::IconTexture' has a wrong offset!");
static_assert(offsetof(UPrimaryDriverDataAsset, CutInTexture) == 0x0000A0, "Member 'UPrimaryDriverDataAsset::CutInTexture' has a wrong offset!");
static_assert(offsetof(UPrimaryDriverDataAsset, TeamCutInTexture) == 0x0000C8, "Member 'UPrimaryDriverDataAsset::TeamCutInTexture' has a wrong offset!");

// Class UNION.PrimaryItemDataAsset
// 0x0010 (0x0040 - 0x0030)
class UPrimaryItemDataAsset final : public UPrimaryDataAsset
{
public:
	TArray<TSubclassOf<class AItemObjectBase>>    ItemObjects;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryItemDataAsset">();
	}
	static class UPrimaryItemDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryItemDataAsset>();
	}
};
static_assert(alignof(UPrimaryItemDataAsset) == 0x000008, "Wrong alignment on UPrimaryItemDataAsset");
static_assert(sizeof(UPrimaryItemDataAsset) == 0x000040, "Wrong size on UPrimaryItemDataAsset");
static_assert(offsetof(UPrimaryItemDataAsset, ItemObjects) == 0x000030, "Member 'UPrimaryItemDataAsset::ItemObjects' has a wrong offset!");

// Class UNION.PrimaryMachineCockpitDataAsset
// 0x0058 (0x0088 - 0x0030)
class UPrimaryMachineCockpitDataAsset final : public UPrimaryDataAsset
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   RaceAnimInstance;                                  // 0x0038(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MenuAnimInstance;                                  // 0x0060(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryMachineCockpitDataAsset">();
	}
	static class UPrimaryMachineCockpitDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryMachineCockpitDataAsset>();
	}
};
static_assert(alignof(UPrimaryMachineCockpitDataAsset) == 0x000008, "Wrong alignment on UPrimaryMachineCockpitDataAsset");
static_assert(sizeof(UPrimaryMachineCockpitDataAsset) == 0x000088, "Wrong size on UPrimaryMachineCockpitDataAsset");
static_assert(offsetof(UPrimaryMachineCockpitDataAsset, SkeletalMesh) == 0x000030, "Member 'UPrimaryMachineCockpitDataAsset::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(UPrimaryMachineCockpitDataAsset, RaceAnimInstance) == 0x000038, "Member 'UPrimaryMachineCockpitDataAsset::RaceAnimInstance' has a wrong offset!");
static_assert(offsetof(UPrimaryMachineCockpitDataAsset, MenuAnimInstance) == 0x000060, "Member 'UPrimaryMachineCockpitDataAsset::MenuAnimInstance' has a wrong offset!");

// Class UNION.PrimaryMachineEffectDataAsset
// 0x0020 (0x0050 - 0x0030)
class UPrimaryMachineEffectDataAsset final : public UPrimaryDataAsset
{
public:
	class UDataTable*                             EffectDataTable;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssetLODIndex;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UNiagaraSystem>>  EffectAssets;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void AutoSet();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryMachineEffectDataAsset">();
	}
	static class UPrimaryMachineEffectDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryMachineEffectDataAsset>();
	}
};
static_assert(alignof(UPrimaryMachineEffectDataAsset) == 0x000008, "Wrong alignment on UPrimaryMachineEffectDataAsset");
static_assert(sizeof(UPrimaryMachineEffectDataAsset) == 0x000050, "Wrong size on UPrimaryMachineEffectDataAsset");
static_assert(offsetof(UPrimaryMachineEffectDataAsset, EffectDataTable) == 0x000030, "Member 'UPrimaryMachineEffectDataAsset::EffectDataTable' has a wrong offset!");
static_assert(offsetof(UPrimaryMachineEffectDataAsset, AssetLODIndex) == 0x000038, "Member 'UPrimaryMachineEffectDataAsset::AssetLODIndex' has a wrong offset!");
static_assert(offsetof(UPrimaryMachineEffectDataAsset, EffectAssets) == 0x000040, "Member 'UPrimaryMachineEffectDataAsset::EffectAssets' has a wrong offset!");

// Class UNION.PrimaryStageDataAsset
// 0x0528 (0x0558 - 0x0030)
class UPrimaryStageDataAsset final : public UPrimaryDataAsset
{
public:
	EStageId                                      StageId;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   StageName;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 BGMName;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EStageCourseMainSubMapInfo, class FString> SubBGMName;                                      // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 GoalJingleSelectorName;                            // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          BackgroundLevels;                                  // 0x00B8(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          PerQualityBackgroundLevels;                        // 0x00C8(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FStageDynamicData                      DefaultBasicLapData;                               // 0x00D8(0x0100)(Edit, NativeAccessSpecifierPublic)
	struct FStageDynamicData                      FinalLapData;                                      // 0x01D8(0x0100)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  ObjectItemBoxLevel_Irregular;                      // 0x02D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  ObjectDashGateLevel_Irregular;                     // 0x0300(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStageTravelRingData                   TravelRingData;                                    // 0x0328(0x0168)(Edit, NativeAccessSpecifierPublic)
	TMap<EStageCourseMapInfo, struct FStageCourseMapInfo> CourseMapUIInfo;                           // 0x0490(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EStageCourseMainSubMapInfo, struct FStageCourseMapInfo> SubCourseMapUIInfo;                 // 0x04E0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCueSheet>      CourseCueSheet;                                    // 0x0530(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AutoSet();

	void GetBackgroundLevels(TArray<TSoftObjectPtr<class UWorld>>* OutBackgroundLevels) const;
	const struct FStageDynamicData GetDefaultBasicLapData() const;
	const struct FStageDynamicData GetFinalLapData() const;
	const struct FStageTravelRingData GetTravelRingData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryStageDataAsset">();
	}
	static class UPrimaryStageDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryStageDataAsset>();
	}
};
static_assert(alignof(UPrimaryStageDataAsset) == 0x000008, "Wrong alignment on UPrimaryStageDataAsset");
static_assert(sizeof(UPrimaryStageDataAsset) == 0x000558, "Wrong size on UPrimaryStageDataAsset");
static_assert(offsetof(UPrimaryStageDataAsset, StageId) == 0x000030, "Member 'UPrimaryStageDataAsset::StageId' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, StageName) == 0x000038, "Member 'UPrimaryStageDataAsset::StageName' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, BGMName) == 0x000048, "Member 'UPrimaryStageDataAsset::BGMName' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, SubBGMName) == 0x000058, "Member 'UPrimaryStageDataAsset::SubBGMName' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, GoalJingleSelectorName) == 0x0000A8, "Member 'UPrimaryStageDataAsset::GoalJingleSelectorName' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, BackgroundLevels) == 0x0000B8, "Member 'UPrimaryStageDataAsset::BackgroundLevels' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, PerQualityBackgroundLevels) == 0x0000C8, "Member 'UPrimaryStageDataAsset::PerQualityBackgroundLevels' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, DefaultBasicLapData) == 0x0000D8, "Member 'UPrimaryStageDataAsset::DefaultBasicLapData' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, FinalLapData) == 0x0001D8, "Member 'UPrimaryStageDataAsset::FinalLapData' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, ObjectItemBoxLevel_Irregular) == 0x0002D8, "Member 'UPrimaryStageDataAsset::ObjectItemBoxLevel_Irregular' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, ObjectDashGateLevel_Irregular) == 0x000300, "Member 'UPrimaryStageDataAsset::ObjectDashGateLevel_Irregular' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, TravelRingData) == 0x000328, "Member 'UPrimaryStageDataAsset::TravelRingData' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, CourseMapUIInfo) == 0x000490, "Member 'UPrimaryStageDataAsset::CourseMapUIInfo' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, SubCourseMapUIInfo) == 0x0004E0, "Member 'UPrimaryStageDataAsset::SubCourseMapUIInfo' has a wrong offset!");
static_assert(offsetof(UPrimaryStageDataAsset, CourseCueSheet) == 0x000530, "Member 'UPrimaryStageDataAsset::CourseCueSheet' has a wrong offset!");

// Class UNION.PrivateMatchButton
// 0x0000 (0x0480 - 0x0480)
class UPrivateMatchButton : public UUnionUIButtonBase
{
public:
	void ButtonGrayOut(bool bGrayOut);
	void SetButtonIcon(int32 IconIndex);
	void SetButtonInDetailText(const class FText& InText);
	void SetButtonInText(const class FText& InText);
	void SetupButton();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrivateMatchButton">();
	}
	static class UPrivateMatchButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrivateMatchButton>();
	}
};
static_assert(alignof(UPrivateMatchButton) == 0x000008, "Wrong alignment on UPrivateMatchButton");
static_assert(sizeof(UPrivateMatchButton) == 0x000480, "Wrong size on UPrivateMatchButton");

// Class UNION.PrivateMatchCheckMembersUI
// 0x00C8 (0x0358 - 0x0290)
class APrivateMatchCheckMembersUI final : public AActor
{
public:
	TMulticastInlineDelegate<void(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex)> OnDecideStartRaceEvent; // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UObject* Object)> OnClickedDisplayRuleUIEvent;               // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReadyWidgetPath;                                   // 0x02B0(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   RuleWidgetPath;                                    // 0x02D8(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOnlineReadySceneBase*                  ReadyWidget;                                       // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrivateMatchLobbyRuleInfo*             RuleWidget;                                        // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   RuleInfoWidgetPath;                                // 0x0310(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonLineMessageWidget*               RuleInfoWidget;                                    // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   InfoText;                                          // 0x0340(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                         InfoDisplayTime;                                   // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRivalChallenge;                                   // 0x0354(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsVisibleRuleSettingButton;                       // 0x0355(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInitializedParams;                              // 0x0356(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_357[0x1];                                      // 0x0357(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Finalize();
	void ForceHideRuleUpdateInfo();
	bool GetIsInitializedParamaters();
	bool GetVisibleRuleCustomBtn();
	void Initialize(bool bIsHost);
	void JoinWaiting();
	void OnClickedDisplayRuleUI();
	void OnDecidedButton();
	void OnFinishDisplayInfo();
	void PlayInAnimations();
	void PlayOutAnimations();
	void ReadyCheck();
	void RuleUpdated(bool bDisplayInfo);
	void SetFocusReadyWidget(class APlayerController* Controller);
	void SetIsInitializedParamaters(bool Initialized);
	void SwitchTextRuleCustomBtn(bool bIsRuleChange);
	void SwitchVisibile(bool bIsVisible);
	void SwitchVisibileRuleCustomBtn(bool bIsVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrivateMatchCheckMembersUI">();
	}
	static class APrivateMatchCheckMembersUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<APrivateMatchCheckMembersUI>();
	}
};
static_assert(alignof(APrivateMatchCheckMembersUI) == 0x000008, "Wrong alignment on APrivateMatchCheckMembersUI");
static_assert(sizeof(APrivateMatchCheckMembersUI) == 0x000358, "Wrong size on APrivateMatchCheckMembersUI");
static_assert(offsetof(APrivateMatchCheckMembersUI, OnDecideStartRaceEvent) == 0x000290, "Member 'APrivateMatchCheckMembersUI::OnDecideStartRaceEvent' has a wrong offset!");
static_assert(offsetof(APrivateMatchCheckMembersUI, OnClickedDisplayRuleUIEvent) == 0x0002A0, "Member 'APrivateMatchCheckMembersUI::OnClickedDisplayRuleUIEvent' has a wrong offset!");
static_assert(offsetof(APrivateMatchCheckMembersUI, ReadyWidgetPath) == 0x0002B0, "Member 'APrivateMatchCheckMembersUI::ReadyWidgetPath' has a wrong offset!");
static_assert(offsetof(APrivateMatchCheckMembersUI, RuleWidgetPath) == 0x0002D8, "Member 'APrivateMatchCheckMembersUI::RuleWidgetPath' has a wrong offset!");
static_assert(offsetof(APrivateMatchCheckMembersUI, ReadyWidget) == 0x000300, "Member 'APrivateMatchCheckMembersUI::ReadyWidget' has a wrong offset!");
static_assert(offsetof(APrivateMatchCheckMembersUI, RuleWidget) == 0x000308, "Member 'APrivateMatchCheckMembersUI::RuleWidget' has a wrong offset!");
static_assert(offsetof(APrivateMatchCheckMembersUI, RuleInfoWidgetPath) == 0x000310, "Member 'APrivateMatchCheckMembersUI::RuleInfoWidgetPath' has a wrong offset!");
static_assert(offsetof(APrivateMatchCheckMembersUI, RuleInfoWidget) == 0x000338, "Member 'APrivateMatchCheckMembersUI::RuleInfoWidget' has a wrong offset!");
static_assert(offsetof(APrivateMatchCheckMembersUI, InfoText) == 0x000340, "Member 'APrivateMatchCheckMembersUI::InfoText' has a wrong offset!");
static_assert(offsetof(APrivateMatchCheckMembersUI, InfoDisplayTime) == 0x000350, "Member 'APrivateMatchCheckMembersUI::InfoDisplayTime' has a wrong offset!");
static_assert(offsetof(APrivateMatchCheckMembersUI, bRivalChallenge) == 0x000354, "Member 'APrivateMatchCheckMembersUI::bRivalChallenge' has a wrong offset!");
static_assert(offsetof(APrivateMatchCheckMembersUI, bIsVisibleRuleSettingButton) == 0x000355, "Member 'APrivateMatchCheckMembersUI::bIsVisibleRuleSettingButton' has a wrong offset!");
static_assert(offsetof(APrivateMatchCheckMembersUI, bIsInitializedParams) == 0x000356, "Member 'APrivateMatchCheckMembersUI::bIsInitializedParams' has a wrong offset!");

// Class UNION.PrivateMatchGroupSettingSequence
// 0x00C0 (0x0428 - 0x0368)
class APrivateMatchGroupSettingSequence final : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnFixedGroupSelect;                                // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFinishGroupSettingSequence;                      // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EPrivateMatchGroupSettingState                PrevSquenceState;                                  // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPrivateMatchGroupSettingState                SelectedMainState;                                 // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   FixInfoWidgetPath;                                 // 0x0398(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonLineMessageWidget*               FixInfoWidget;                                     // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 GroupIndexArray;                                   // 0x03C8(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         LobbyMemberNum;                                    // 0x03D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHost;                                           // 0x03DC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3DD[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnLobbyIndex;                                     // 0x03E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           GroupFixTimerHandle;                               // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   InfoText;                                          // 0x03F0(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                         FixGroupInfoTime;                                  // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FixGroupDisplayTime;                               // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 LobbyRacersIndex;                                  // 0x0408(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EDriverId>                             LobbyRacersDriverId;                               // 0x0418(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void CreateGroupFixInfo(const class FText& InText, const float InDisplayTime);
	void FinishDisplayFixInfo();
	void ForceFixGroupSettings();
	TArray<int32> GetGroupIndexArray();
	void GroupSettingCompleted();
	void OnExirSettingCompleteState();
	void OnInitExitState();
	void OnInitIdleState();
	void OnInitSettingCompleteState();
	void OnUpdateSettingCompleteState(float InDeltaTime);
	void SetIsHost(bool bIsHostFlag);
	void SetLobbyMemberCount(int32 LobbyMemberCount);
	void SetLobbyRacersDriverId(const TArray<EDriverId>& inArray);
	void SetLobbyRacersIndex(const TArray<int32>& inArray);
	void SetNextGroupSettingSequenceState(EPrivateMatchGroupSettingState InState, EPrivateMatchGroupSettingState PrevState);
	void SetOwnLobbyIndex(int32 InIndex);
	void UpdateGroupIndexArray(const TArray<int32>& InGroupIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrivateMatchGroupSettingSequence">();
	}
	static class APrivateMatchGroupSettingSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<APrivateMatchGroupSettingSequence>();
	}
};
static_assert(alignof(APrivateMatchGroupSettingSequence) == 0x000008, "Wrong alignment on APrivateMatchGroupSettingSequence");
static_assert(sizeof(APrivateMatchGroupSettingSequence) == 0x000428, "Wrong size on APrivateMatchGroupSettingSequence");
static_assert(offsetof(APrivateMatchGroupSettingSequence, OnFixedGroupSelect) == 0x000370, "Member 'APrivateMatchGroupSettingSequence::OnFixedGroupSelect' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, OnFinishGroupSettingSequence) == 0x000380, "Member 'APrivateMatchGroupSettingSequence::OnFinishGroupSettingSequence' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, PrevSquenceState) == 0x000390, "Member 'APrivateMatchGroupSettingSequence::PrevSquenceState' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, SelectedMainState) == 0x000391, "Member 'APrivateMatchGroupSettingSequence::SelectedMainState' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, FixInfoWidgetPath) == 0x000398, "Member 'APrivateMatchGroupSettingSequence::FixInfoWidgetPath' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, FixInfoWidget) == 0x0003C0, "Member 'APrivateMatchGroupSettingSequence::FixInfoWidget' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, GroupIndexArray) == 0x0003C8, "Member 'APrivateMatchGroupSettingSequence::GroupIndexArray' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, LobbyMemberNum) == 0x0003D8, "Member 'APrivateMatchGroupSettingSequence::LobbyMemberNum' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, bIsHost) == 0x0003DC, "Member 'APrivateMatchGroupSettingSequence::bIsHost' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, OwnLobbyIndex) == 0x0003E0, "Member 'APrivateMatchGroupSettingSequence::OwnLobbyIndex' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, GroupFixTimerHandle) == 0x0003E8, "Member 'APrivateMatchGroupSettingSequence::GroupFixTimerHandle' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, InfoText) == 0x0003F0, "Member 'APrivateMatchGroupSettingSequence::InfoText' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, FixGroupInfoTime) == 0x000400, "Member 'APrivateMatchGroupSettingSequence::FixGroupInfoTime' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, FixGroupDisplayTime) == 0x000404, "Member 'APrivateMatchGroupSettingSequence::FixGroupDisplayTime' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, LobbyRacersIndex) == 0x000408, "Member 'APrivateMatchGroupSettingSequence::LobbyRacersIndex' has a wrong offset!");
static_assert(offsetof(APrivateMatchGroupSettingSequence, LobbyRacersDriverId) == 0x000418, "Member 'APrivateMatchGroupSettingSequence::LobbyRacersDriverId' has a wrong offset!");

// Class UNION.PrivateMatchLobbyRuleInfo
// 0x0010 (0x02F0 - 0x02E0)
class UPrivateMatchLobbyRuleInfo final : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnClickedRuleInfoEvent;                            // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void Finalize();
	void InitialRuleInfo(bool bIsHost);
	void OnClickedRuleInfoWidget();
	void PlayAnimationIn();
	void PlayAnimationOut();
	void RuleUpdate(bool bIsRivalChallenge);
	void SetHeaderText(bool bIsRuleChange);
	void SetVisibleButton(bool bIsVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrivateMatchLobbyRuleInfo">();
	}
	static class UPrivateMatchLobbyRuleInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrivateMatchLobbyRuleInfo>();
	}
};
static_assert(alignof(UPrivateMatchLobbyRuleInfo) == 0x000008, "Wrong alignment on UPrivateMatchLobbyRuleInfo");
static_assert(sizeof(UPrivateMatchLobbyRuleInfo) == 0x0002F0, "Wrong size on UPrivateMatchLobbyRuleInfo");
static_assert(offsetof(UPrivateMatchLobbyRuleInfo, OnClickedRuleInfoEvent) == 0x0002E0, "Member 'UPrivateMatchLobbyRuleInfo::OnClickedRuleInfoEvent' has a wrong offset!");

// Class UNION.PrivateMatchMenuSelectClassState
// 0x0010 (0x0138 - 0x0128)
class UPrivateMatchMenuSelectClassState final : public UMenuSequenceSubStateBase
{
public:
	TMulticastInlineDelegate<void(bool bSelected)> OnSelectedClass;                                  // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrivateMatchMenuSelectClassState">();
	}
	static class UPrivateMatchMenuSelectClassState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrivateMatchMenuSelectClassState>();
	}
};
static_assert(alignof(UPrivateMatchMenuSelectClassState) == 0x000008, "Wrong alignment on UPrivateMatchMenuSelectClassState");
static_assert(sizeof(UPrivateMatchMenuSelectClassState) == 0x000138, "Wrong size on UPrivateMatchMenuSelectClassState");
static_assert(offsetof(UPrivateMatchMenuSelectClassState, OnSelectedClass) == 0x000128, "Member 'UPrivateMatchMenuSelectClassState::OnSelectedClass' has a wrong offset!");

// Class UNION.PrivateMatchPopup
// 0x0048 (0x0420 - 0x03D8)
class UPrivateMatchPopup : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(bool bJoin)>    OnCompletedAnimationFinishEvent;                   // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex)> OnDecisionAnimationFinishEvent; // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex)> OnCancelAnimationFinishEvent; // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOutAnimationFinishEvent;                         // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         DecideButtonIndex;                                 // 0x0418(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DecideButtonsPanelIndex;                           // 0x041C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UUnionUIButtonBase* GetActiveWidgetButton(int32 ButtonIndex);
	class UUnionUIButtonBase* GetButton(int32 SwitcherIndex, int32 ButtonIndex);
	void PlayPopupAnim(bool bInAnim, bool bGetOutAnimCallback);
	void PlayPopupInAnim();
	void PlayPopupInfoAnim(bool bInAnim);
	void PlayPopupOutAnim(bool bGetOutAnimCallback);
	void SettingGrayOutButton(int32 SwitcherIndex, int32 ButtonIndex);
	void Setup(int32 SwitcherIndex);
	void SetupCompletedWindow(bool bJoin);
	void SetupWaitingWindow(bool bJoin);
	void SwitchPopupInfo(int32 SwitcherIndex);
	void UnbindButtonsPanelEvents();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrivateMatchPopup">();
	}
	static class UPrivateMatchPopup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrivateMatchPopup>();
	}
};
static_assert(alignof(UPrivateMatchPopup) == 0x000008, "Wrong alignment on UPrivateMatchPopup");
static_assert(sizeof(UPrivateMatchPopup) == 0x000420, "Wrong size on UPrivateMatchPopup");
static_assert(offsetof(UPrivateMatchPopup, OnCompletedAnimationFinishEvent) == 0x0003D8, "Member 'UPrivateMatchPopup::OnCompletedAnimationFinishEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchPopup, OnDecisionAnimationFinishEvent) == 0x0003E8, "Member 'UPrivateMatchPopup::OnDecisionAnimationFinishEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchPopup, OnCancelAnimationFinishEvent) == 0x0003F8, "Member 'UPrivateMatchPopup::OnCancelAnimationFinishEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchPopup, OnOutAnimationFinishEvent) == 0x000408, "Member 'UPrivateMatchPopup::OnOutAnimationFinishEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchPopup, DecideButtonIndex) == 0x000418, "Member 'UPrivateMatchPopup::DecideButtonIndex' has a wrong offset!");
static_assert(offsetof(UPrivateMatchPopup, DecideButtonsPanelIndex) == 0x00041C, "Member 'UPrivateMatchPopup::DecideButtonsPanelIndex' has a wrong offset!");

// Class UNION.StickerTextureAsyncLoader
// 0x0030 (0x0058 - 0x0028)
class UStickerTextureAsyncLoader final : public UObject
{
public:
	TArray<struct FSoftObjectPath>                SoftTexturePaths;                                  // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UTexture2D*>                     LoadedTextures;                                    // 0x0038(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StickerTextureAsyncLoader">();
	}
	static class UStickerTextureAsyncLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStickerTextureAsyncLoader>();
	}
};
static_assert(alignof(UStickerTextureAsyncLoader) == 0x000008, "Wrong alignment on UStickerTextureAsyncLoader");
static_assert(sizeof(UStickerTextureAsyncLoader) == 0x000058, "Wrong size on UStickerTextureAsyncLoader");
static_assert(offsetof(UStickerTextureAsyncLoader, SoftTexturePaths) == 0x000028, "Member 'UStickerTextureAsyncLoader::SoftTexturePaths' has a wrong offset!");
static_assert(offsetof(UStickerTextureAsyncLoader, LoadedTextures) == 0x000038, "Member 'UStickerTextureAsyncLoader::LoadedTextures' has a wrong offset!");

// Class UNION.PrivateMatchRulePresetComponent
// 0x0140 (0x0268 - 0x0128)
class UPrivateMatchRulePresetComponent final : public UMenuSequenceSubStateBase
{
public:
	TMulticastInlineDelegate<void()>              OpenClassSelectEvent;                              // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              RaceRuleFixedEvent;                                // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OpenCustomRuleEvent;                               // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OpenRivalSelectEvent;                              // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFinishedRivalLevelDown;                          // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PresetWidgetPath;                                  // 0x0188(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   CutInWidgetPath;                                   // 0x01B0(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   ResultProgressWidgetPath;                          // 0x01D8(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   LevelDownPopupTextTitle;                           // 0x0200(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   LevelDownPopupTextMessage;                         // 0x0210(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   LevelDownPopupTextYes;                             // 0x0220(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   LevelDownPopupTextNo;                              // 0x0230(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UPrivateMatchRulePresetSelect*          PresetWidget;                                      // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPartyRaceRivalTeamCutinWidget*         CutInWidget;                                       // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPartyRaceRivalResultProgressWidget*    ResultProgressWidget;                              // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIPopupWindowBase*                PopupWindowPtr;                                    // 0x0258(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRivalChallenge;                                   // 0x0260(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRivalChanged;                                     // 0x0261(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanRivalSelectTransition;                          // 0x0262(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_263[0x5];                                      // 0x0263(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ExitRulePresetSelect();
	void InitRivalCutIn();
	void InitRulePresetSelect();
	void OnCancelDown();
	void OnPartyRaceSelectInFinished();
	void OnRivalLevelDownDecisionEvent(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void RewardPlayInEvent();
	void SelectedCustomRuleEvent();
	void SelectedGroupRuleEvent(EPartyRacePreset RulePreset);
	void SelectedIndividualRuleEvent(EPartyRacePreset RulePreset);
	void SelectedRivalSelectEvent();
	void SetIsRivalChallenge(bool bIsRivalChallenge);
	void SetupRivalLevelDownPopupWindow(bool* SpawnPopup);
	void StartPresetSelect();
	void StartRivalCutIn();
	void StartRivalCutInInputWait();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrivateMatchRulePresetComponent">();
	}
	static class UPrivateMatchRulePresetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrivateMatchRulePresetComponent>();
	}
};
static_assert(alignof(UPrivateMatchRulePresetComponent) == 0x000008, "Wrong alignment on UPrivateMatchRulePresetComponent");
static_assert(sizeof(UPrivateMatchRulePresetComponent) == 0x000268, "Wrong size on UPrivateMatchRulePresetComponent");
static_assert(offsetof(UPrivateMatchRulePresetComponent, OpenClassSelectEvent) == 0x000128, "Member 'UPrivateMatchRulePresetComponent::OpenClassSelectEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, RaceRuleFixedEvent) == 0x000138, "Member 'UPrivateMatchRulePresetComponent::RaceRuleFixedEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, OpenCustomRuleEvent) == 0x000148, "Member 'UPrivateMatchRulePresetComponent::OpenCustomRuleEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, OpenRivalSelectEvent) == 0x000158, "Member 'UPrivateMatchRulePresetComponent::OpenRivalSelectEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, OnBackEvent) == 0x000168, "Member 'UPrivateMatchRulePresetComponent::OnBackEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, OnFinishedRivalLevelDown) == 0x000178, "Member 'UPrivateMatchRulePresetComponent::OnFinishedRivalLevelDown' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, PresetWidgetPath) == 0x000188, "Member 'UPrivateMatchRulePresetComponent::PresetWidgetPath' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, CutInWidgetPath) == 0x0001B0, "Member 'UPrivateMatchRulePresetComponent::CutInWidgetPath' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, ResultProgressWidgetPath) == 0x0001D8, "Member 'UPrivateMatchRulePresetComponent::ResultProgressWidgetPath' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, LevelDownPopupTextTitle) == 0x000200, "Member 'UPrivateMatchRulePresetComponent::LevelDownPopupTextTitle' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, LevelDownPopupTextMessage) == 0x000210, "Member 'UPrivateMatchRulePresetComponent::LevelDownPopupTextMessage' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, LevelDownPopupTextYes) == 0x000220, "Member 'UPrivateMatchRulePresetComponent::LevelDownPopupTextYes' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, LevelDownPopupTextNo) == 0x000230, "Member 'UPrivateMatchRulePresetComponent::LevelDownPopupTextNo' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, PresetWidget) == 0x000240, "Member 'UPrivateMatchRulePresetComponent::PresetWidget' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, CutInWidget) == 0x000248, "Member 'UPrivateMatchRulePresetComponent::CutInWidget' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, ResultProgressWidget) == 0x000250, "Member 'UPrivateMatchRulePresetComponent::ResultProgressWidget' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, PopupWindowPtr) == 0x000258, "Member 'UPrivateMatchRulePresetComponent::PopupWindowPtr' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, bRivalChallenge) == 0x000260, "Member 'UPrivateMatchRulePresetComponent::bRivalChallenge' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, bRivalChanged) == 0x000261, "Member 'UPrivateMatchRulePresetComponent::bRivalChanged' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetComponent, CanRivalSelectTransition) == 0x000262, "Member 'UPrivateMatchRulePresetComponent::CanRivalSelectTransition' has a wrong offset!");

// Class UNION.UnionStickerSystem
// 0x0088 (0x00B0 - 0x0028)
class UUnionStickerSystem final : public UObject
{
public:
	class USoundAtomCue*                          CameraZoomSoundCue1;                               // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          CameraZoomSoundCue2;                               // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          CameraZoomSoundCue3;                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanZoom;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x4F];                                      // 0x0041(0x004F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnionStickerSystemData                SystemData;                                        // 0x0090(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)

public:
	void Finalize();
	void InputReceiver_OnRightStickAxis(class UObject* Object, const struct FVector2D& Value);
	void InputReceiver_OnRightStickButtonPressed(class UObject* Object);
	void SetTransformByArmDataIdAndCurrentRadius(EGarageCameraMovementArmDataId InId, bool bInImmediateReflection);
	void Setup(const struct FUnionStickerSystemData& InSystemData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionStickerSystem">();
	}
	static class UUnionStickerSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionStickerSystem>();
	}
};
static_assert(alignof(UUnionStickerSystem) == 0x000008, "Wrong alignment on UUnionStickerSystem");
static_assert(sizeof(UUnionStickerSystem) == 0x0000B0, "Wrong size on UUnionStickerSystem");
static_assert(offsetof(UUnionStickerSystem, CameraZoomSoundCue1) == 0x000028, "Member 'UUnionStickerSystem::CameraZoomSoundCue1' has a wrong offset!");
static_assert(offsetof(UUnionStickerSystem, CameraZoomSoundCue2) == 0x000030, "Member 'UUnionStickerSystem::CameraZoomSoundCue2' has a wrong offset!");
static_assert(offsetof(UUnionStickerSystem, CameraZoomSoundCue3) == 0x000038, "Member 'UUnionStickerSystem::CameraZoomSoundCue3' has a wrong offset!");
static_assert(offsetof(UUnionStickerSystem, bCanZoom) == 0x000040, "Member 'UUnionStickerSystem::bCanZoom' has a wrong offset!");
static_assert(offsetof(UUnionStickerSystem, SystemData) == 0x000090, "Member 'UUnionStickerSystem::SystemData' has a wrong offset!");

// Class UNION.PrivateMatchRulePresetSelect
// 0x0128 (0x0500 - 0x03D8)
class UPrivateMatchRulePresetSelect final : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(EPartyRacePreset RulePreset)> OnSelectedIndividualRuleEvent;       // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EPartyRacePreset RulePreset)> OnSelectedGruopRuleEvent;            // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSelectedCustomRuleEvent;                         // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSelectedRivalSelectEvent;                        // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0418(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAnimInFinished;                                  // 0x0428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAnimOutFinished;                                 // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMap<EPartyRacePreset, struct FPartyRacePresetSetting> CurrentPrsetSettingMap;                   // 0x0448(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EPartyRacePreset, struct FPartyRacePresetSetting> DefaultPrsetSettingMap;                   // 0x0498(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class UPartyRaceSubPresetBtn*>         PresetButtonArr;                                   // 0x04E8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bIsRivalChallenge;                                 // 0x04F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ButtonCancelEvent(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void ExitRulePresetSelect();
	void InitRulePresetSelect(bool bRivalChallenge);
	void PlayInOutAnimation(bool bPlayInAnim);
	void PresetButtonDecisionEvent(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void RivalSelectButtonDecisionEvent(class UUnionUIButtonBaseCore* Button);
	void SetupWidget(bool bRivalChallenge);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrivateMatchRulePresetSelect">();
	}
	static class UPrivateMatchRulePresetSelect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrivateMatchRulePresetSelect>();
	}
};
static_assert(alignof(UPrivateMatchRulePresetSelect) == 0x000008, "Wrong alignment on UPrivateMatchRulePresetSelect");
static_assert(sizeof(UPrivateMatchRulePresetSelect) == 0x000500, "Wrong size on UPrivateMatchRulePresetSelect");
static_assert(offsetof(UPrivateMatchRulePresetSelect, OnSelectedIndividualRuleEvent) == 0x0003D8, "Member 'UPrivateMatchRulePresetSelect::OnSelectedIndividualRuleEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetSelect, OnSelectedGruopRuleEvent) == 0x0003E8, "Member 'UPrivateMatchRulePresetSelect::OnSelectedGruopRuleEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetSelect, OnSelectedCustomRuleEvent) == 0x0003F8, "Member 'UPrivateMatchRulePresetSelect::OnSelectedCustomRuleEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetSelect, OnSelectedRivalSelectEvent) == 0x000408, "Member 'UPrivateMatchRulePresetSelect::OnSelectedRivalSelectEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetSelect, OnBackEvent) == 0x000418, "Member 'UPrivateMatchRulePresetSelect::OnBackEvent' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetSelect, OnAnimInFinished) == 0x000428, "Member 'UPrivateMatchRulePresetSelect::OnAnimInFinished' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetSelect, OnAnimOutFinished) == 0x000438, "Member 'UPrivateMatchRulePresetSelect::OnAnimOutFinished' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetSelect, CurrentPrsetSettingMap) == 0x000448, "Member 'UPrivateMatchRulePresetSelect::CurrentPrsetSettingMap' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetSelect, DefaultPrsetSettingMap) == 0x000498, "Member 'UPrivateMatchRulePresetSelect::DefaultPrsetSettingMap' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetSelect, PresetButtonArr) == 0x0004E8, "Member 'UPrivateMatchRulePresetSelect::PresetButtonArr' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRulePresetSelect, bIsRivalChallenge) == 0x0004F8, "Member 'UPrivateMatchRulePresetSelect::bIsRivalChallenge' has a wrong offset!");

// Class UNION.PrivateMatchRuleSettingComponent
// 0x0010 (0x0138 - 0x0128)
class UPrivateMatchRuleSettingComponent final : public UMenuSequenceSubStateBase
{
public:
	class APrivateMatchRuleSettingSequence*       ChildRuleSettingSequence;                          // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_130[0x2];                                      // 0x0130(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsInitializedParams;                              // 0x0132(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetIsCustomizedRule();
	bool GetIsInitializedParamaters();
	bool GetIsRuleConfigured();
	void SetHostRuleSettingFlag(bool bIsHost);
	void SetIsInitializedParamaters(bool Initialized);
	void SetLobbyPlayType(EPrivateMatchPlayType PlayType);
	void SetUpRacerCount(int32 LobbyMemberCount);
	void UpdateRacerGroupIndex();
	void UpdateRivalTeamSetting();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrivateMatchRuleSettingComponent">();
	}
	static class UPrivateMatchRuleSettingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrivateMatchRuleSettingComponent>();
	}
};
static_assert(alignof(UPrivateMatchRuleSettingComponent) == 0x000008, "Wrong alignment on UPrivateMatchRuleSettingComponent");
static_assert(sizeof(UPrivateMatchRuleSettingComponent) == 0x000138, "Wrong size on UPrivateMatchRuleSettingComponent");
static_assert(offsetof(UPrivateMatchRuleSettingComponent, ChildRuleSettingSequence) == 0x000128, "Member 'UPrivateMatchRuleSettingComponent::ChildRuleSettingSequence' has a wrong offset!");
static_assert(offsetof(UPrivateMatchRuleSettingComponent, bIsInitializedParams) == 0x000132, "Member 'UPrivateMatchRuleSettingComponent::bIsInitializedParams' has a wrong offset!");

// Class UNION.PrivateMatchRuleSettingSequence
// 0x0168 (0x04D0 - 0x0368)
class APrivateMatchRuleSettingSequence final : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EPrivateMatchRuleSettingState                 PrevSquenceState;                                  // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPrivateMatchRuleSettingState                 SelectedMainState;                                 // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPrivateMatchPlayType                         PlayType;                                          // 0x0382(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRuleSetting;                                      // 0x0383(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRuleConfigured;                                   // 0x0384(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCustomizedRule;                                 // 0x0385(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPartyRacePreset                              CachePresetId;                                     // 0x0386(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_387[0x1];                                      // 0x0387(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomRaceSetting                     CacheRaceSetting;                                  // 0x0388(0x0120)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FItemSwitchSetting                     CacheItemSetting;                                  // 0x04A8(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<EStageId>                              CacheCourseSetting;                                // 0x04C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void FixedCustomizeRule();
	void FixedPresetRule();
	bool GetIsCustomizedRule();
	bool GetIsRuleConfigured();
	void OnBackedRuleSettingMenu();
	void OnInitExitState();
	void OnInitIdleState();
	void OnSelectedClass(bool bSelected);
	void OpenClassSelect();
	void OpenCustomRule();
	void OpenPresetRuleSelect();
	void OpenRivalSelect();
	void SetHostRuleSettingFlag(bool bIsHost);
	void SetLobbyPlayType(EPrivateMatchPlayType LobbyPlayType);
	void SetNextRuleSettingSequenceState(EPrivateMatchRuleSettingState InState, EPrivateMatchRuleSettingState PrevState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrivateMatchRuleSettingSequence">();
	}
	static class APrivateMatchRuleSettingSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<APrivateMatchRuleSettingSequence>();
	}
};
static_assert(alignof(APrivateMatchRuleSettingSequence) == 0x000008, "Wrong alignment on APrivateMatchRuleSettingSequence");
static_assert(sizeof(APrivateMatchRuleSettingSequence) == 0x0004D0, "Wrong size on APrivateMatchRuleSettingSequence");
static_assert(offsetof(APrivateMatchRuleSettingSequence, OnBackEvent) == 0x000370, "Member 'APrivateMatchRuleSettingSequence::OnBackEvent' has a wrong offset!");
static_assert(offsetof(APrivateMatchRuleSettingSequence, PrevSquenceState) == 0x000380, "Member 'APrivateMatchRuleSettingSequence::PrevSquenceState' has a wrong offset!");
static_assert(offsetof(APrivateMatchRuleSettingSequence, SelectedMainState) == 0x000381, "Member 'APrivateMatchRuleSettingSequence::SelectedMainState' has a wrong offset!");
static_assert(offsetof(APrivateMatchRuleSettingSequence, PlayType) == 0x000382, "Member 'APrivateMatchRuleSettingSequence::PlayType' has a wrong offset!");
static_assert(offsetof(APrivateMatchRuleSettingSequence, bRuleSetting) == 0x000383, "Member 'APrivateMatchRuleSettingSequence::bRuleSetting' has a wrong offset!");
static_assert(offsetof(APrivateMatchRuleSettingSequence, bRuleConfigured) == 0x000384, "Member 'APrivateMatchRuleSettingSequence::bRuleConfigured' has a wrong offset!");
static_assert(offsetof(APrivateMatchRuleSettingSequence, bIsCustomizedRule) == 0x000385, "Member 'APrivateMatchRuleSettingSequence::bIsCustomizedRule' has a wrong offset!");
static_assert(offsetof(APrivateMatchRuleSettingSequence, CachePresetId) == 0x000386, "Member 'APrivateMatchRuleSettingSequence::CachePresetId' has a wrong offset!");
static_assert(offsetof(APrivateMatchRuleSettingSequence, CacheRaceSetting) == 0x000388, "Member 'APrivateMatchRuleSettingSequence::CacheRaceSetting' has a wrong offset!");
static_assert(offsetof(APrivateMatchRuleSettingSequence, CacheItemSetting) == 0x0004A8, "Member 'APrivateMatchRuleSettingSequence::CacheItemSetting' has a wrong offset!");
static_assert(offsetof(APrivateMatchRuleSettingSequence, CacheCourseSetting) == 0x0004C0, "Member 'APrivateMatchRuleSettingSequence::CacheCourseSetting' has a wrong offset!");

// Class UNION.PrivateMatchSelectGroupComponent
// 0x0098 (0x01C0 - 0x0128)
class UPrivateMatchSelectGroupComponent final : public UMenuSequenceSubStateBase
{
public:
	TMulticastInlineDelegate<void()>              StartGroupSetting;                                 // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              FinishGroupSetting;                                // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              RecieveGuestGroupIndex;                            // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<int32>& GroupIndexArray)> SendHostGroupSettings;      // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              FixedHostGroupSetting;                             // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	float                                         GroupSettingSyncCycle;                             // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APrivateMatchGroupSettingSequence*      ChildGroupSettingSequence;                         // 0x0180(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsLobbyHost;                                      // 0x0188(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnLobbyIndex;                                     // 0x018C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LobbyMemberCount;                                  // 0x0190(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCompleted;                                      // 0x0194(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInitializedParams;                              // 0x0195(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_196[0x2];                                      // 0x0196(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LobbyRacersIndex;                                  // 0x0198(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EDriverId>                             LobbyRacersDriverId;                               // 0x01A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddRacerLobbyIndex(int32 LobbyIndex);
	void CallFixedHostGroupSetting();
	void CallOnExitStateEvent();
	void CallSyncGroupSetting();
	void ForceFixGroupSettings();
	TArray<int32> GetGroupIndexArray();
	bool GetIsInitializedParamaters();
	void GroupSettingComplete();
	void InitParams(bool bIsHost);
	void SetLobbyMemberCount(int32 MemberCount);
	void SetOwnPlayerIndex(int32 OwnPlayerIndex);
	void SetRacerDriverId(int32 InIndex, EDriverId InDriverId);
	void UpdateGroupSetting(const TArray<int32>& GroupIndexArray);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrivateMatchSelectGroupComponent">();
	}
	static class UPrivateMatchSelectGroupComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrivateMatchSelectGroupComponent>();
	}
};
static_assert(alignof(UPrivateMatchSelectGroupComponent) == 0x000008, "Wrong alignment on UPrivateMatchSelectGroupComponent");
static_assert(sizeof(UPrivateMatchSelectGroupComponent) == 0x0001C0, "Wrong size on UPrivateMatchSelectGroupComponent");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, StartGroupSetting) == 0x000128, "Member 'UPrivateMatchSelectGroupComponent::StartGroupSetting' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, FinishGroupSetting) == 0x000138, "Member 'UPrivateMatchSelectGroupComponent::FinishGroupSetting' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, RecieveGuestGroupIndex) == 0x000148, "Member 'UPrivateMatchSelectGroupComponent::RecieveGuestGroupIndex' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, SendHostGroupSettings) == 0x000158, "Member 'UPrivateMatchSelectGroupComponent::SendHostGroupSettings' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, FixedHostGroupSetting) == 0x000168, "Member 'UPrivateMatchSelectGroupComponent::FixedHostGroupSetting' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, GroupSettingSyncCycle) == 0x000178, "Member 'UPrivateMatchSelectGroupComponent::GroupSettingSyncCycle' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, ChildGroupSettingSequence) == 0x000180, "Member 'UPrivateMatchSelectGroupComponent::ChildGroupSettingSequence' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, bIsLobbyHost) == 0x000188, "Member 'UPrivateMatchSelectGroupComponent::bIsLobbyHost' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, OwnLobbyIndex) == 0x00018C, "Member 'UPrivateMatchSelectGroupComponent::OwnLobbyIndex' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, LobbyMemberCount) == 0x000190, "Member 'UPrivateMatchSelectGroupComponent::LobbyMemberCount' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, bIsCompleted) == 0x000194, "Member 'UPrivateMatchSelectGroupComponent::bIsCompleted' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, bIsInitializedParams) == 0x000195, "Member 'UPrivateMatchSelectGroupComponent::bIsInitializedParams' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, LobbyRacersIndex) == 0x000198, "Member 'UPrivateMatchSelectGroupComponent::LobbyRacersIndex' has a wrong offset!");
static_assert(offsetof(UPrivateMatchSelectGroupComponent, LobbyRacersDriverId) == 0x0001A8, "Member 'UPrivateMatchSelectGroupComponent::LobbyRacersDriverId' has a wrong offset!");

// Class UNION.ProcessLobbyInvitationObject
// 0x0148 (0x03D8 - 0x0290)
class AProcessLobbyInvitationObject final : public AActor
{
public:
	TMulticastInlineDelegate<void(const struct FLobbyInvitationNoticeInfo& LobbyInvitationNoticeInfo, class ULobbyJoinInfo* LobbyInfo)> ShowLobbyInvitationDelegate; // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<class ULobbyJoinInfo*>                 CacheLobbyInvitationArray;                         // 0x02A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class ULobbyJoinInfo*                         CheckLobbyInvitation;                              // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B8[0x120];                                    // 0x02B8(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddLobbyInvitation(class ULobbyJoinInfo* LobbyInvitation);
	void CheckLobbyInvitationStart();
	void CheckPlatformStart();
	void CheckUserNameStart();
	void OnCheckFinishUserName(bool Success, const class FString& SanitizedUserName);
	void OnFinishPlatformCheck(bool Result);
	void OnGetInviteUserData(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProcessLobbyInvitationObject">();
	}
	static class AProcessLobbyInvitationObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProcessLobbyInvitationObject>();
	}
};
static_assert(alignof(AProcessLobbyInvitationObject) == 0x000008, "Wrong alignment on AProcessLobbyInvitationObject");
static_assert(sizeof(AProcessLobbyInvitationObject) == 0x0003D8, "Wrong size on AProcessLobbyInvitationObject");
static_assert(offsetof(AProcessLobbyInvitationObject, ShowLobbyInvitationDelegate) == 0x000290, "Member 'AProcessLobbyInvitationObject::ShowLobbyInvitationDelegate' has a wrong offset!");
static_assert(offsetof(AProcessLobbyInvitationObject, CacheLobbyInvitationArray) == 0x0002A0, "Member 'AProcessLobbyInvitationObject::CacheLobbyInvitationArray' has a wrong offset!");
static_assert(offsetof(AProcessLobbyInvitationObject, CheckLobbyInvitation) == 0x0002B0, "Member 'AProcessLobbyInvitationObject::CheckLobbyInvitation' has a wrong offset!");

// Class UNION.RaceBeforeSharedData
// 0x01B8 (0x01E0 - 0x0028)
class URaceBeforeSharedData final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RaceStartBaseTransform;                            // 0x0030(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValidRacerNum;                                     // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     RacerStartTransforms;                              // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AVehicleInRacePawn*>             RacerActors;                                       // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ASceneDriver*>                   SceneDrivers;                                      // 0x00B8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsPrepared;                                       // 0x00C8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASceneInputKeyHandler*                  InputKeyHandler;                                   // 0x00D0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 LocalPlayerIndices;                                // 0x00D8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RivalRacerIndex;                                   // 0x00E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DebugAuraRacerIndices;                             // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FSoftObjectPath, class UObject*>  LoadedObjectMap;                                   // 0x0100(0x0050)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x90];                                     // 0x0150(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URaceBeforeSharedData* GetOrInitializeData(class ARaceSequence* RaceSequence);

	void CleanupRacers();
	void CloseSequence(class URaceSequenceStateBase* CurrentRaceSequenceState, ERaceSequenceState CurrentSequenceState);
	void OnFinishedFade(EUnionUIFadeDirection FadeDirection);
	void OnFinishedTransition();
	void OpenSequence(class URaceSequenceStateBase* CurrentRaceSequenceState);
	bool PrepareRacers(class ARaceSequence* RaceSequence);
	void RegisterChangeSequenceDelegate(TDelegate<void()> CallbackDelegate);
	void UnregisterChangeSequenceDelegate();

	bool CanSkipSequence(ERaceSequenceState SequenceState) const;
	ERaceSequenceState GetNextSequence(ERaceSequenceState SequenceState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceBeforeSharedData">();
	}
	static class URaceBeforeSharedData* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceBeforeSharedData>();
	}
};
static_assert(alignof(URaceBeforeSharedData) == 0x000010, "Wrong alignment on URaceBeforeSharedData");
static_assert(sizeof(URaceBeforeSharedData) == 0x0001E0, "Wrong size on URaceBeforeSharedData");
static_assert(offsetof(URaceBeforeSharedData, RaceStartBaseTransform) == 0x000030, "Member 'URaceBeforeSharedData::RaceStartBaseTransform' has a wrong offset!");
static_assert(offsetof(URaceBeforeSharedData, ValidRacerNum) == 0x000090, "Member 'URaceBeforeSharedData::ValidRacerNum' has a wrong offset!");
static_assert(offsetof(URaceBeforeSharedData, RacerStartTransforms) == 0x000098, "Member 'URaceBeforeSharedData::RacerStartTransforms' has a wrong offset!");
static_assert(offsetof(URaceBeforeSharedData, RacerActors) == 0x0000A8, "Member 'URaceBeforeSharedData::RacerActors' has a wrong offset!");
static_assert(offsetof(URaceBeforeSharedData, SceneDrivers) == 0x0000B8, "Member 'URaceBeforeSharedData::SceneDrivers' has a wrong offset!");
static_assert(offsetof(URaceBeforeSharedData, bIsPrepared) == 0x0000C8, "Member 'URaceBeforeSharedData::bIsPrepared' has a wrong offset!");
static_assert(offsetof(URaceBeforeSharedData, InputKeyHandler) == 0x0000D0, "Member 'URaceBeforeSharedData::InputKeyHandler' has a wrong offset!");
static_assert(offsetof(URaceBeforeSharedData, LocalPlayerIndices) == 0x0000D8, "Member 'URaceBeforeSharedData::LocalPlayerIndices' has a wrong offset!");
static_assert(offsetof(URaceBeforeSharedData, RivalRacerIndex) == 0x0000E8, "Member 'URaceBeforeSharedData::RivalRacerIndex' has a wrong offset!");
static_assert(offsetof(URaceBeforeSharedData, DebugAuraRacerIndices) == 0x0000F0, "Member 'URaceBeforeSharedData::DebugAuraRacerIndices' has a wrong offset!");
static_assert(offsetof(URaceBeforeSharedData, LoadedObjectMap) == 0x000100, "Member 'URaceBeforeSharedData::LoadedObjectMap' has a wrong offset!");

// Class UNION.RaceCameraActor
// 0x0128 (0x03B8 - 0x0290)
class ARaceCameraActor : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       RaceCameraComponent;                               // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                    RaceSpringArmComponent;                            // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerControllerRef;                               // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewSplitId                                  ViewSplitId;                                       // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LookActorRef;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       CameraComponentRef;                                // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVehicleInRacePawn*                     VehicleInRacePawnRef;                              // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledRaceCamera;                                // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceCameraMode                               RaceCameraMode;                                    // 0x02D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECarStatusType                                CurrentCarStatusType;                              // 0x02D2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     CurrentDriverID;                                   // 0x02D3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x02D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PauseViewTargetOffset;                             // 0x02D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PauseCameraOffset;                                 // 0x02F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UResultCameraDataAsset*                 DataAssetResultCamera;                             // 0x0308(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResultCameraState                            ResultCameraState;                                 // 0x0310(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResultCurrentPlayIndex;                            // 0x0314(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResultCameraProductionType                   CurrentProductionType;                             // 0x0318(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResultNextPlayIndex;                               // 0x031C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResultCameraProductionType                   ResultNextPlayType;                                // 0x0320(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResultCameraProductionType                   ResultFixedPlayType;                               // 0x0321(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_322[0x2];                                      // 0x0322(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FResultCameraParam                     ResultCameraParams;                                // 0x0324(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URivalCameraDataAsset*                  DataAssetRivalCamera;                              // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERivalCameraState                             RivalCameraState;                                  // 0x0360(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FResultCameraParam                     RivalCameraParams;                                 // 0x0364(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	EReplayCameraState                            ReplayCameraState;                                 // 0x0394(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastUpdateProdCameraOffset;                        // 0x0398(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B0[0x8];                                      // 0x03B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnabledRaceCamera(const bool SetEnabled);
	void Finished();
	void ReStart();
	void SetPauseEnabled(const bool SetEnabled);
	void SetResultFixedCameraMode(const EResultCameraProductionType SetProdType);
	void StartReplayCamera(class APlayerController* SetPlayerController, const EViewSplitId SetViewSplitId, class AActor* SetLookActor, class UCameraComponent* SetCameraComponent);
	void StartResultCamera(class APlayerController* SetPlayerController, const EViewSplitId SetViewSplitId, class AActor* SetLookActor, class UCameraComponent* SetCameraComponent);
	void StartRivalViewCamera(class APlayerController* SetPlayerController, const EViewSplitId SetViewSplitId, class AActor* SetLookActor, class UCameraComponent* SetCameraComponent);
	void Stop();
	void SwitchCarStatusType(const ECarStatusType SetType);
	void SwitchDriverID(const EDriverId SetDriverId);
	void SwitchViewSplitID(const EViewSplitId SetViewSplitId);

	bool IsPause() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceCameraActor">();
	}
	static class ARaceCameraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARaceCameraActor>();
	}
};
static_assert(alignof(ARaceCameraActor) == 0x000008, "Wrong alignment on ARaceCameraActor");
static_assert(sizeof(ARaceCameraActor) == 0x0003B8, "Wrong size on ARaceCameraActor");
static_assert(offsetof(ARaceCameraActor, Root) == 0x000290, "Member 'ARaceCameraActor::Root' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, RaceCameraComponent) == 0x000298, "Member 'ARaceCameraActor::RaceCameraComponent' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, RaceSpringArmComponent) == 0x0002A0, "Member 'ARaceCameraActor::RaceSpringArmComponent' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, PlayerControllerRef) == 0x0002A8, "Member 'ARaceCameraActor::PlayerControllerRef' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, ViewSplitId) == 0x0002B0, "Member 'ARaceCameraActor::ViewSplitId' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, LookActorRef) == 0x0002B8, "Member 'ARaceCameraActor::LookActorRef' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, CameraComponentRef) == 0x0002C0, "Member 'ARaceCameraActor::CameraComponentRef' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, VehicleInRacePawnRef) == 0x0002C8, "Member 'ARaceCameraActor::VehicleInRacePawnRef' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, bEnabledRaceCamera) == 0x0002D0, "Member 'ARaceCameraActor::bEnabledRaceCamera' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, RaceCameraMode) == 0x0002D1, "Member 'ARaceCameraActor::RaceCameraMode' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, CurrentCarStatusType) == 0x0002D2, "Member 'ARaceCameraActor::CurrentCarStatusType' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, CurrentDriverID) == 0x0002D3, "Member 'ARaceCameraActor::CurrentDriverID' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, bPause) == 0x0002D4, "Member 'ARaceCameraActor::bPause' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, PauseViewTargetOffset) == 0x0002D8, "Member 'ARaceCameraActor::PauseViewTargetOffset' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, PauseCameraOffset) == 0x0002F0, "Member 'ARaceCameraActor::PauseCameraOffset' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, DataAssetResultCamera) == 0x000308, "Member 'ARaceCameraActor::DataAssetResultCamera' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, ResultCameraState) == 0x000310, "Member 'ARaceCameraActor::ResultCameraState' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, ResultCurrentPlayIndex) == 0x000314, "Member 'ARaceCameraActor::ResultCurrentPlayIndex' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, CurrentProductionType) == 0x000318, "Member 'ARaceCameraActor::CurrentProductionType' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, ResultNextPlayIndex) == 0x00031C, "Member 'ARaceCameraActor::ResultNextPlayIndex' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, ResultNextPlayType) == 0x000320, "Member 'ARaceCameraActor::ResultNextPlayType' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, ResultFixedPlayType) == 0x000321, "Member 'ARaceCameraActor::ResultFixedPlayType' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, ResultCameraParams) == 0x000324, "Member 'ARaceCameraActor::ResultCameraParams' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, DataAssetRivalCamera) == 0x000358, "Member 'ARaceCameraActor::DataAssetRivalCamera' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, RivalCameraState) == 0x000360, "Member 'ARaceCameraActor::RivalCameraState' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, RivalCameraParams) == 0x000364, "Member 'ARaceCameraActor::RivalCameraParams' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, ReplayCameraState) == 0x000394, "Member 'ARaceCameraActor::ReplayCameraState' has a wrong offset!");
static_assert(offsetof(ARaceCameraActor, LastUpdateProdCameraOffset) == 0x000398, "Member 'ARaceCameraActor::LastUpdateProdCameraOffset' has a wrong offset!");

// Class UNION.StaffrollTertiaryTextWidget
// 0x0018 (0x0300 - 0x02E8)
class UStaffrollTertiaryTextWidget final : public UStaffrollTextWidget
{
public:
	TArray<class UUnionRichTextBlock*>            _TextWidgets;                                      // 0x02E8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollTertiaryTextWidget">();
	}
	static class UStaffrollTertiaryTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollTertiaryTextWidget>();
	}
};
static_assert(alignof(UStaffrollTertiaryTextWidget) == 0x000008, "Wrong alignment on UStaffrollTertiaryTextWidget");
static_assert(sizeof(UStaffrollTertiaryTextWidget) == 0x000300, "Wrong size on UStaffrollTertiaryTextWidget");
static_assert(offsetof(UStaffrollTertiaryTextWidget, _TextWidgets) == 0x0002E8, "Member 'UStaffrollTertiaryTextWidget::_TextWidgets' has a wrong offset!");

// Class UNION.RaceCeremonySequence
// 0x0000 (0x0368 - 0x0368)
class ARaceCeremonySequence final : public AHierarchicalStateMachine
{
public:
	void SetCeremonyExitCode(ERaceCeremonySequenceExitCode InValue);
	void SetNextCeremonyState(ERaceCeremonySequenceState InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceCeremonySequence">();
	}
	static class ARaceCeremonySequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARaceCeremonySequence>();
	}
};
static_assert(alignof(ARaceCeremonySequence) == 0x000008, "Wrong alignment on ARaceCeremonySequence");
static_assert(sizeof(ARaceCeremonySequence) == 0x000368, "Wrong size on ARaceCeremonySequence");

// Class UNION.RaceCeremonySequenceStateMainScene
// 0x0080 (0x0188 - 0x0108)
class URaceCeremonySequenceStateMainScene final : public URaceCeremonySequenceStateBase
{
public:
	class AActor*                                 RootActor;                                         // 0x0108(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASceneDriver*>                   SceneDrivers;                                      // 0x0110(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ChampionRankByRounds;                              // 0x0120(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EDriverId>                             PlayersDriverID;                                   // 0x0130(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PlayersRank;                                       // 0x0140(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class ASceneInputKeyHandler*                  InputKeyHandler;                                   // 0x0150(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCeremonyMachineData>           CustomizeDataArray;                                // 0x0158(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RacerIndexArray;                                   // 0x0168(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRivalChampion;                                    // 0x0178(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERivalType                                    ChampionRivalType;                                 // 0x0179(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RivalLevel;                                        // 0x017C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChampionPlayerInLocalMultiplayer;                  // 0x0180(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SaveRewardItemData(const struct FRewardAchievementData& AchievementData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceCeremonySequenceStateMainScene">();
	}
	static class URaceCeremonySequenceStateMainScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceCeremonySequenceStateMainScene>();
	}
};
static_assert(alignof(URaceCeremonySequenceStateMainScene) == 0x000008, "Wrong alignment on URaceCeremonySequenceStateMainScene");
static_assert(sizeof(URaceCeremonySequenceStateMainScene) == 0x000188, "Wrong size on URaceCeremonySequenceStateMainScene");
static_assert(offsetof(URaceCeremonySequenceStateMainScene, RootActor) == 0x000108, "Member 'URaceCeremonySequenceStateMainScene::RootActor' has a wrong offset!");
static_assert(offsetof(URaceCeremonySequenceStateMainScene, SceneDrivers) == 0x000110, "Member 'URaceCeremonySequenceStateMainScene::SceneDrivers' has a wrong offset!");
static_assert(offsetof(URaceCeremonySequenceStateMainScene, ChampionRankByRounds) == 0x000120, "Member 'URaceCeremonySequenceStateMainScene::ChampionRankByRounds' has a wrong offset!");
static_assert(offsetof(URaceCeremonySequenceStateMainScene, PlayersDriverID) == 0x000130, "Member 'URaceCeremonySequenceStateMainScene::PlayersDriverID' has a wrong offset!");
static_assert(offsetof(URaceCeremonySequenceStateMainScene, PlayersRank) == 0x000140, "Member 'URaceCeremonySequenceStateMainScene::PlayersRank' has a wrong offset!");
static_assert(offsetof(URaceCeremonySequenceStateMainScene, InputKeyHandler) == 0x000150, "Member 'URaceCeremonySequenceStateMainScene::InputKeyHandler' has a wrong offset!");
static_assert(offsetof(URaceCeremonySequenceStateMainScene, CustomizeDataArray) == 0x000158, "Member 'URaceCeremonySequenceStateMainScene::CustomizeDataArray' has a wrong offset!");
static_assert(offsetof(URaceCeremonySequenceStateMainScene, RacerIndexArray) == 0x000168, "Member 'URaceCeremonySequenceStateMainScene::RacerIndexArray' has a wrong offset!");
static_assert(offsetof(URaceCeremonySequenceStateMainScene, bRivalChampion) == 0x000178, "Member 'URaceCeremonySequenceStateMainScene::bRivalChampion' has a wrong offset!");
static_assert(offsetof(URaceCeremonySequenceStateMainScene, ChampionRivalType) == 0x000179, "Member 'URaceCeremonySequenceStateMainScene::ChampionRivalType' has a wrong offset!");
static_assert(offsetof(URaceCeremonySequenceStateMainScene, RivalLevel) == 0x00017C, "Member 'URaceCeremonySequenceStateMainScene::RivalLevel' has a wrong offset!");
static_assert(offsetof(URaceCeremonySequenceStateMainScene, ChampionPlayerInLocalMultiplayer) == 0x000180, "Member 'URaceCeremonySequenceStateMainScene::ChampionPlayerInLocalMultiplayer' has a wrong offset!");

// Class UNION.RaceEndingSequence
// 0x0000 (0x0368 - 0x0368)
class ARaceEndingSequence final : public AHierarchicalStateMachine
{
public:
	void SetNextEndingState(ERaceEndingSequenceState InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceEndingSequence">();
	}
	static class ARaceEndingSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARaceEndingSequence>();
	}
};
static_assert(alignof(ARaceEndingSequence) == 0x000008, "Wrong alignment on ARaceEndingSequence");
static_assert(sizeof(ARaceEndingSequence) == 0x000368, "Wrong size on ARaceEndingSequence");

// Class UNION.RaceEndMenuSceneWidgetBase
// 0x0008 (0x03E0 - 0x03D8)
class URaceEndMenuSceneWidgetBase final : public UUnionUISceneBase
{
public:
	class UCommonRaceMenuContentsInfo*            ContentsInfo_;                                     // 0x03D8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BuildContents(const class UCommonRaceMenuContentsInfo* InContentsInfo);
	class UUnionUIButtonsPanel* GetButtonsPanel();
	void OnContentsBuildingRequested();
	void PlayChallengeClear();
	void PlayChallengeProgress();
	void SetAcceptKeyIgnored(bool Ignored);
	void SetChallengeClear(EChallengeId ChallengeId, int32 WindowIdx);
	void SetChallengeProgress(EChallengeId ChallengeId, int32 WindowIdx);
	void SetupChallengeNotice(class UUnionChallengeManager* ChallengeManager);

	const class UCommonRaceMenuContentsInfo* GetContentsInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceEndMenuSceneWidgetBase">();
	}
	static class URaceEndMenuSceneWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceEndMenuSceneWidgetBase>();
	}
};
static_assert(alignof(URaceEndMenuSceneWidgetBase) == 0x000008, "Wrong alignment on URaceEndMenuSceneWidgetBase");
static_assert(sizeof(URaceEndMenuSceneWidgetBase) == 0x0003E0, "Wrong size on URaceEndMenuSceneWidgetBase");
static_assert(offsetof(URaceEndMenuSceneWidgetBase, ContentsInfo_) == 0x0003D8, "Member 'URaceEndMenuSceneWidgetBase::ContentsInfo_' has a wrong offset!");

// Class UNION.UnionCrossPlayResolveWindowManager
// 0x0070 (0x0300 - 0x0290)
class AUnionCrossPlayResolveWindowManager : public AActor
{
public:
	TSubclassOf<class AUnionPlatformCrossPlayChangedWindow> CrossPlayChangedWindowClass;             // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AUnionPlatformCrossPlayChangedWindow*   m_CrossPlayChangedWindow;                          // 0x0298(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A0[0x50];                                     // 0x02A0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             m_ResolveCompleteDelegate;                         // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionCrossPlayResolveWindowManager">();
	}
	static class AUnionCrossPlayResolveWindowManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionCrossPlayResolveWindowManager>();
	}
};
static_assert(alignof(AUnionCrossPlayResolveWindowManager) == 0x000008, "Wrong alignment on AUnionCrossPlayResolveWindowManager");
static_assert(sizeof(AUnionCrossPlayResolveWindowManager) == 0x000300, "Wrong size on AUnionCrossPlayResolveWindowManager");
static_assert(offsetof(AUnionCrossPlayResolveWindowManager, CrossPlayChangedWindowClass) == 0x000290, "Member 'AUnionCrossPlayResolveWindowManager::CrossPlayChangedWindowClass' has a wrong offset!");
static_assert(offsetof(AUnionCrossPlayResolveWindowManager, m_CrossPlayChangedWindow) == 0x000298, "Member 'AUnionCrossPlayResolveWindowManager::m_CrossPlayChangedWindow' has a wrong offset!");
static_assert(offsetof(AUnionCrossPlayResolveWindowManager, m_ResolveCompleteDelegate) == 0x0002F0, "Member 'AUnionCrossPlayResolveWindowManager::m_ResolveCompleteDelegate' has a wrong offset!");

// Class UNION.RaceEndMenuSequence
// 0x01B0 (0x0518 - 0x0368)
class ARaceEndMenuSequence final : public AHierarchicalStateMachine
{
public:
	class UDataTable*                             EndMenuContentTable;                               // 0x0368(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_370[0x50];                                     // 0x0370(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class USquadContext*                          SquadLobbyContext;                                 // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDisConnectedHost;                               // 0x03C8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESquadLobbyMatchContinuation                  SelectOwnConfilm;                                  // 0x03C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3CA[0x6];                                      // 0x03CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonMessageBar*                      MessageBarSceneObject;                             // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   MessageBarText;                                    // 0x03D8(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   WaitingSquadMemberPopupText;                       // 0x03E8(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TArray<class FText>                           ClientPopupText;                                   // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FText                                   HostTimeupSquadMemberPopupText;                    // 0x0408(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   ClientTimeupSquadMemberPopupText;                  // 0x0418(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TArray<class ULobbyMemberContextBase*>        NoAnswerMembers;                                   // 0x0428(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         TimeCount;                                         // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MAX_HOST_TIMER;                                    // 0x043C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MAX_HOST_POPUP_TIMER;                              // 0x0440(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MAX_CLIENT_TIMER;                                  // 0x0444(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_448[0x28];                                     // 0x0448(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class URaceEndMenuSceneWidgetBase*            EndMenuScene;                                      // 0x0470(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UObject>                    _FooterClass;                                      // 0x0478(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonMenuFooterMenu*                  _Footer;                                           // 0x0480(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMenuInputRecieveObject*                _InputReceiver;                                    // 0x0488(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_490[0x58];                                     // 0x0490(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   _UserReportComponentSoftClass;                     // 0x04E8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URaceEndMenuUserReportComponent*        _UserReportComponent;                              // 0x0510(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UCommonRaceMenuContentsInfo* GenerateEndMenuContentsAfterCeremonyInfo();
	class UCommonRaceMenuContentsInfo* GenerateEndMenuContentsInfo();
	void GotoSelectedEndMenuToSquad(ESquadLobbyMatchContinuation InHostStatus, bool bInIsOwnerHost);
	void HideEndMenu();
	void InitCheckSquadContinuation(ECommonRaceMenuContentId SelectedRaceMenu, TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete, bool* bIsJoinedSquad, bool* bIsSquadHost);
	void OnExitStateCheckLobbyInvite();
	void OnExitStateGotoMatchingLobby();
	void OnExitStateGotoSquadLobby();
	void OnExitStateGotoTopMennu();
	void OnExitStateQuitPublicLobby();
	void OnExitStateSelect();
	void OnExitStateShowPopup();
	void OnExitStateUserReport();
	void OnExitStateWaiting();
	void OnFaceButtonTopPressed(class UObject* Object);
	void OnHostTimeupEvent();
	void OnInitStateCheckLobbyInvite();
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnInitStateQuitPublicLobby();
	void OnInitStateSelect();
	void OnInitStateShowPopup();
	void OnInitStateUserReport();
	void OnInitStateWaiting();
	void OnPopupDecidebackToTopMenu(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnPopupDecideSquadLobbyWaitingPlayer(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnPopupDecideSyncSelectMenu(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);
	void OnReceiveSquadDisconnectMember(class ULobbyContextBase* LobbyContext, class ULobbyMemberContextBase* MemberContext, bool bWasKicked);
	void OnReceiveSquadRemoveComplete(class ULobbyContextBase* LobbyContext, const struct FOnlineErrorBP& Error);
	void OnReceiveSquadRemoveComplete_HostDisConnected(class ULobbyContextBase* LobbyContext, const struct FOnlineErrorBP& Error);
	void OnRecevCheckSquadContinuation(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void OnSquadLobbyDelete(class ULobbyContextBase* LobbyContext);
	void OnUpdateStateCheckLobbyInvite(float InDeltaTime);
	void OnUpdateStateQuitPublicLobby(float InDeltaTime);
	void OnUpdateStateSelect(float InDeltaTime);
	void OnUpdateStateShowPopup(float InDeltaTime);
	void OnUpdateStateUserReport(float InDeltaTime);
	void OnUpdateStateWaiting(float InDeltaTime);
	void ReceivedSquadMemberUpdateFromComponent();
	void RemoveSquadClient(bool bSuccessful, const struct FLobbyOperationResult& Result);
	void ReshowEndMenu();
	void SetDecided(bool Value);
	void SetEndMenuExitCode(ERaceEndMenuSequenceExitCode InValue);
	void SetNextEndMenuState(ERaceEndMenuSequenceState InState);
	bool SquadEndMenuHostTimer();
	void SquadStopTimeCount(bool bEnableCount);
	void TickCheckSquadContinuation(float DeltaSeconds, ESquadLobbyMatchContinuation* MatchContinuation);

	bool IsDecided() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceEndMenuSequence">();
	}
	static class ARaceEndMenuSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARaceEndMenuSequence>();
	}
};
static_assert(alignof(ARaceEndMenuSequence) == 0x000008, "Wrong alignment on ARaceEndMenuSequence");
static_assert(sizeof(ARaceEndMenuSequence) == 0x000518, "Wrong size on ARaceEndMenuSequence");
static_assert(offsetof(ARaceEndMenuSequence, EndMenuContentTable) == 0x000368, "Member 'ARaceEndMenuSequence::EndMenuContentTable' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, SquadLobbyContext) == 0x0003C0, "Member 'ARaceEndMenuSequence::SquadLobbyContext' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, bIsDisConnectedHost) == 0x0003C8, "Member 'ARaceEndMenuSequence::bIsDisConnectedHost' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, SelectOwnConfilm) == 0x0003C9, "Member 'ARaceEndMenuSequence::SelectOwnConfilm' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, MessageBarSceneObject) == 0x0003D0, "Member 'ARaceEndMenuSequence::MessageBarSceneObject' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, MessageBarText) == 0x0003D8, "Member 'ARaceEndMenuSequence::MessageBarText' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, WaitingSquadMemberPopupText) == 0x0003E8, "Member 'ARaceEndMenuSequence::WaitingSquadMemberPopupText' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, ClientPopupText) == 0x0003F8, "Member 'ARaceEndMenuSequence::ClientPopupText' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, HostTimeupSquadMemberPopupText) == 0x000408, "Member 'ARaceEndMenuSequence::HostTimeupSquadMemberPopupText' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, ClientTimeupSquadMemberPopupText) == 0x000418, "Member 'ARaceEndMenuSequence::ClientTimeupSquadMemberPopupText' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, NoAnswerMembers) == 0x000428, "Member 'ARaceEndMenuSequence::NoAnswerMembers' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, TimeCount) == 0x000438, "Member 'ARaceEndMenuSequence::TimeCount' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, MAX_HOST_TIMER) == 0x00043C, "Member 'ARaceEndMenuSequence::MAX_HOST_TIMER' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, MAX_HOST_POPUP_TIMER) == 0x000440, "Member 'ARaceEndMenuSequence::MAX_HOST_POPUP_TIMER' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, MAX_CLIENT_TIMER) == 0x000444, "Member 'ARaceEndMenuSequence::MAX_CLIENT_TIMER' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, EndMenuScene) == 0x000470, "Member 'ARaceEndMenuSequence::EndMenuScene' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, _FooterClass) == 0x000478, "Member 'ARaceEndMenuSequence::_FooterClass' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, _Footer) == 0x000480, "Member 'ARaceEndMenuSequence::_Footer' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, _InputReceiver) == 0x000488, "Member 'ARaceEndMenuSequence::_InputReceiver' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, _UserReportComponentSoftClass) == 0x0004E8, "Member 'ARaceEndMenuSequence::_UserReportComponentSoftClass' has a wrong offset!");
static_assert(offsetof(ARaceEndMenuSequence, _UserReportComponent) == 0x000510, "Member 'ARaceEndMenuSequence::_UserReportComponent' has a wrong offset!");

// Class UNION.RaceEndMenuUserReportComponent
// 0x0108 (0x01A8 - 0x00A0)
class URaceEndMenuUserReportComponent final : public UActorComponent
{
public:
	TSoftClassPtr<class UClass>                   _UserReportWidgetSoftClass;                        // 0x00A0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   _DialogTitleText;                                  // 0x00C8(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<ERaceEndMenuUserReportPopupType, class FText> _DialogMessageTexts;                          // 0x00D8(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class URaceEndMenuUserReportWidget*           _UserReportWidget;                                 // 0x0128(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIPopupWindowBase*                _PopupWindowWidget;                                // 0x0130(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x70];                                     // 0x0138(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHttpReceived(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnPopupClosed(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceEndMenuUserReportComponent">();
	}
	static class URaceEndMenuUserReportComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceEndMenuUserReportComponent>();
	}
};
static_assert(alignof(URaceEndMenuUserReportComponent) == 0x000008, "Wrong alignment on URaceEndMenuUserReportComponent");
static_assert(sizeof(URaceEndMenuUserReportComponent) == 0x0001A8, "Wrong size on URaceEndMenuUserReportComponent");
static_assert(offsetof(URaceEndMenuUserReportComponent, _UserReportWidgetSoftClass) == 0x0000A0, "Member 'URaceEndMenuUserReportComponent::_UserReportWidgetSoftClass' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportComponent, _DialogTitleText) == 0x0000C8, "Member 'URaceEndMenuUserReportComponent::_DialogTitleText' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportComponent, _DialogMessageTexts) == 0x0000D8, "Member 'URaceEndMenuUserReportComponent::_DialogMessageTexts' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportComponent, _UserReportWidget) == 0x000128, "Member 'URaceEndMenuUserReportComponent::_UserReportWidget' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportComponent, _PopupWindowWidget) == 0x000130, "Member 'URaceEndMenuUserReportComponent::_PopupWindowWidget' has a wrong offset!");

// Class UNION.RaceEndMenuUserReportConfirmationWidget
// 0x0030 (0x0320 - 0x02F0)
class URaceEndMenuUserReportConfirmationWidget final : public UCommonUserWidget
{
public:
	class URaceEndMenuUserReportPlayerButtonWidget* _PlayerDisplay;                                  // 0x02F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URaceEndMenuUserReportTypeButtonWidget* _ReportTypeDisplay;                                // 0x02F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUIButtonStandard*                 _DecisionButton;                                   // 0x0300(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_308[0x10];                                     // 0x0308(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Confirmation_InLoop;                               // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnButtonDecided(class UUnionUIButtonBaseCore* Button);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceEndMenuUserReportConfirmationWidget">();
	}
	static class URaceEndMenuUserReportConfirmationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceEndMenuUserReportConfirmationWidget>();
	}
};
static_assert(alignof(URaceEndMenuUserReportConfirmationWidget) == 0x000008, "Wrong alignment on URaceEndMenuUserReportConfirmationWidget");
static_assert(sizeof(URaceEndMenuUserReportConfirmationWidget) == 0x000320, "Wrong size on URaceEndMenuUserReportConfirmationWidget");
static_assert(offsetof(URaceEndMenuUserReportConfirmationWidget, _PlayerDisplay) == 0x0002F0, "Member 'URaceEndMenuUserReportConfirmationWidget::_PlayerDisplay' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportConfirmationWidget, _ReportTypeDisplay) == 0x0002F8, "Member 'URaceEndMenuUserReportConfirmationWidget::_ReportTypeDisplay' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportConfirmationWidget, _DecisionButton) == 0x000300, "Member 'URaceEndMenuUserReportConfirmationWidget::_DecisionButton' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportConfirmationWidget, Confirmation_InLoop) == 0x000318, "Member 'URaceEndMenuUserReportConfirmationWidget::Confirmation_InLoop' has a wrong offset!");

// Class UNION.RaceEndMenuUserReportPlayerButtonWidget
// 0x0068 (0x06B0 - 0x0648)
class URaceEndMenuUserReportPlayerButtonWidget final : public UUnionUIButtonStandard
{
public:
	class UImage*                                 DSP_PAT_Rank;                                      // 0x0648(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 PlatformIcon;                                      // 0x0650(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_CharaIcon;                                     // 0x0658(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_PlayerName;                                    // 0x0660(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_668[0x8];                                      // 0x0668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Anim_Active_Loop;                                  // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_Select_Loop;                                  // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_Disabled_Active_Loop;                         // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_Disabled_Select_Loop;                         // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_NP_Active_Loop;                               // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_NP_Select_Loop;                               // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_NP_Disabled_Active_Loop;                      // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_NP_Disabled_Select_Loop;                      // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceEndMenuUserReportPlayerButtonWidget">();
	}
	static class URaceEndMenuUserReportPlayerButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceEndMenuUserReportPlayerButtonWidget>();
	}
};
static_assert(alignof(URaceEndMenuUserReportPlayerButtonWidget) == 0x000008, "Wrong alignment on URaceEndMenuUserReportPlayerButtonWidget");
static_assert(sizeof(URaceEndMenuUserReportPlayerButtonWidget) == 0x0006B0, "Wrong size on URaceEndMenuUserReportPlayerButtonWidget");
static_assert(offsetof(URaceEndMenuUserReportPlayerButtonWidget, DSP_PAT_Rank) == 0x000648, "Member 'URaceEndMenuUserReportPlayerButtonWidget::DSP_PAT_Rank' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportPlayerButtonWidget, PlatformIcon) == 0x000650, "Member 'URaceEndMenuUserReportPlayerButtonWidget::PlatformIcon' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportPlayerButtonWidget, DMY_CharaIcon) == 0x000658, "Member 'URaceEndMenuUserReportPlayerButtonWidget::DMY_CharaIcon' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportPlayerButtonWidget, TXT_PlayerName) == 0x000660, "Member 'URaceEndMenuUserReportPlayerButtonWidget::TXT_PlayerName' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportPlayerButtonWidget, Anim_Active_Loop) == 0x000670, "Member 'URaceEndMenuUserReportPlayerButtonWidget::Anim_Active_Loop' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportPlayerButtonWidget, Anim_Select_Loop) == 0x000678, "Member 'URaceEndMenuUserReportPlayerButtonWidget::Anim_Select_Loop' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportPlayerButtonWidget, Anim_Disabled_Active_Loop) == 0x000680, "Member 'URaceEndMenuUserReportPlayerButtonWidget::Anim_Disabled_Active_Loop' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportPlayerButtonWidget, Anim_Disabled_Select_Loop) == 0x000688, "Member 'URaceEndMenuUserReportPlayerButtonWidget::Anim_Disabled_Select_Loop' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportPlayerButtonWidget, Anim_NP_Active_Loop) == 0x000690, "Member 'URaceEndMenuUserReportPlayerButtonWidget::Anim_NP_Active_Loop' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportPlayerButtonWidget, Anim_NP_Select_Loop) == 0x000698, "Member 'URaceEndMenuUserReportPlayerButtonWidget::Anim_NP_Select_Loop' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportPlayerButtonWidget, Anim_NP_Disabled_Active_Loop) == 0x0006A0, "Member 'URaceEndMenuUserReportPlayerButtonWidget::Anim_NP_Disabled_Active_Loop' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportPlayerButtonWidget, Anim_NP_Disabled_Select_Loop) == 0x0006A8, "Member 'URaceEndMenuUserReportPlayerButtonWidget::Anim_NP_Disabled_Select_Loop' has a wrong offset!");

// Class UNION.ReadyInitState
// 0x0000 (0x00F8 - 0x00F8)
class UReadyInitState final : public UHierarchicalStateMachineStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReadyInitState">();
	}
	static class UReadyInitState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReadyInitState>();
	}
};
static_assert(alignof(UReadyInitState) == 0x000008, "Wrong alignment on UReadyInitState");
static_assert(sizeof(UReadyInitState) == 0x0000F8, "Wrong size on UReadyInitState");

// Class UNION.RaceEndMenuUserReportPlayerSelectWidget
// 0x0038 (0x0328 - 0x02F0)
class URaceEndMenuUserReportPlayerSelectWidget final : public UCommonUserWidget
{
public:
	TArray<class URaceEndMenuUserReportPlayerButtonWidget*> _PlayerButtons;                          // 0x02F0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_300[0x28];                                     // 0x0300(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonDecided(class UUnionUIButtonBaseCore* Button);
	void OnButtonSelected(class UUnionUIButtonBaseCore* Button);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceEndMenuUserReportPlayerSelectWidget">();
	}
	static class URaceEndMenuUserReportPlayerSelectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceEndMenuUserReportPlayerSelectWidget>();
	}
};
static_assert(alignof(URaceEndMenuUserReportPlayerSelectWidget) == 0x000008, "Wrong alignment on URaceEndMenuUserReportPlayerSelectWidget");
static_assert(sizeof(URaceEndMenuUserReportPlayerSelectWidget) == 0x000328, "Wrong size on URaceEndMenuUserReportPlayerSelectWidget");
static_assert(offsetof(URaceEndMenuUserReportPlayerSelectWidget, _PlayerButtons) == 0x0002F0, "Member 'URaceEndMenuUserReportPlayerSelectWidget::_PlayerButtons' has a wrong offset!");

// Class UNION.RaceEndMenuUserReportTypeButtonWidget
// 0x0058 (0x06A0 - 0x0648)
class URaceEndMenuUserReportTypeButtonWidget final : public UUnionUIButtonStandard
{
public:
	TMap<ERaceEndMenuUserReportTypeId, class FText> _TitleTexts;                                     // 0x0648(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    TXT_Title;                                         // 0x0698(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceEndMenuUserReportTypeButtonWidget">();
	}
	static class URaceEndMenuUserReportTypeButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceEndMenuUserReportTypeButtonWidget>();
	}
};
static_assert(alignof(URaceEndMenuUserReportTypeButtonWidget) == 0x000008, "Wrong alignment on URaceEndMenuUserReportTypeButtonWidget");
static_assert(sizeof(URaceEndMenuUserReportTypeButtonWidget) == 0x0006A0, "Wrong size on URaceEndMenuUserReportTypeButtonWidget");
static_assert(offsetof(URaceEndMenuUserReportTypeButtonWidget, _TitleTexts) == 0x000648, "Member 'URaceEndMenuUserReportTypeButtonWidget::_TitleTexts' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportTypeButtonWidget, TXT_Title) == 0x000698, "Member 'URaceEndMenuUserReportTypeButtonWidget::TXT_Title' has a wrong offset!");

// Class UNION.RaceEndMenuUserReportTypeSelectWidget
// 0x0030 (0x0320 - 0x02F0)
class URaceEndMenuUserReportTypeSelectWidget final : public UCommonUserWidget
{
public:
	TArray<class URaceEndMenuUserReportTypeButtonWidget*> _ReportTypeButtons;                        // 0x02F0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class URaceEndMenuUserReportPlayerButtonWidget* _PlayerDisplay;                                  // 0x0300(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_308[0x18];                                     // 0x0308(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonDecided(class UUnionUIButtonBaseCore* Button);
	void OnButtonSelected(class UUnionUIButtonBaseCore* Button);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceEndMenuUserReportTypeSelectWidget">();
	}
	static class URaceEndMenuUserReportTypeSelectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceEndMenuUserReportTypeSelectWidget>();
	}
};
static_assert(alignof(URaceEndMenuUserReportTypeSelectWidget) == 0x000008, "Wrong alignment on URaceEndMenuUserReportTypeSelectWidget");
static_assert(sizeof(URaceEndMenuUserReportTypeSelectWidget) == 0x000320, "Wrong size on URaceEndMenuUserReportTypeSelectWidget");
static_assert(offsetof(URaceEndMenuUserReportTypeSelectWidget, _ReportTypeButtons) == 0x0002F0, "Member 'URaceEndMenuUserReportTypeSelectWidget::_ReportTypeButtons' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportTypeSelectWidget, _PlayerDisplay) == 0x000300, "Member 'URaceEndMenuUserReportTypeSelectWidget::_PlayerDisplay' has a wrong offset!");

// Class UNION.RaceEndMenuUserReportWidget
// 0x0090 (0x0380 - 0x02F0)
class URaceEndMenuUserReportWidget final : public UCommonUserWidget
{
public:
	TSubclassOf<class UObject>                    _FooterClass;                                      // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URaceEndMenuUserReportPlayerSelectWidget* _PlayerSelectWidget;                             // 0x02F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URaceEndMenuUserReportTypeSelectWidget* _ReportTypeSelectWidget;                           // 0x0300(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URaceEndMenuUserReportConfirmationWidget* _ConfirmationWidget;                             // 0x0308(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMenuInputRecieveObject*                _InputReceiver;                                    // 0x0310(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonMenuFooterMenu*                  _Footer;                                           // 0x0318(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_320[0x50];                                     // 0x0320(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Anim_InLoop;                                       // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_Out;                                          // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBackKeyPressed(class UObject* Object);
	void OnFaceButtonTopPressed(class UObject* Object);
	void OnFaceButtonTopReleased(class UObject* Object);
	void OnShowPfProfileErrorWindowEnd();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceEndMenuUserReportWidget">();
	}
	static class URaceEndMenuUserReportWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceEndMenuUserReportWidget>();
	}
};
static_assert(alignof(URaceEndMenuUserReportWidget) == 0x000008, "Wrong alignment on URaceEndMenuUserReportWidget");
static_assert(sizeof(URaceEndMenuUserReportWidget) == 0x000380, "Wrong size on URaceEndMenuUserReportWidget");
static_assert(offsetof(URaceEndMenuUserReportWidget, _FooterClass) == 0x0002F0, "Member 'URaceEndMenuUserReportWidget::_FooterClass' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportWidget, _PlayerSelectWidget) == 0x0002F8, "Member 'URaceEndMenuUserReportWidget::_PlayerSelectWidget' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportWidget, _ReportTypeSelectWidget) == 0x000300, "Member 'URaceEndMenuUserReportWidget::_ReportTypeSelectWidget' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportWidget, _ConfirmationWidget) == 0x000308, "Member 'URaceEndMenuUserReportWidget::_ConfirmationWidget' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportWidget, _InputReceiver) == 0x000310, "Member 'URaceEndMenuUserReportWidget::_InputReceiver' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportWidget, _Footer) == 0x000318, "Member 'URaceEndMenuUserReportWidget::_Footer' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportWidget, Anim_InLoop) == 0x000370, "Member 'URaceEndMenuUserReportWidget::Anim_InLoop' has a wrong offset!");
static_assert(offsetof(URaceEndMenuUserReportWidget, Anim_Out) == 0x000378, "Member 'URaceEndMenuUserReportWidget::Anim_Out' has a wrong offset!");

// Class UNION.SceneDriverVoicePlayer
// 0x0000 (0x0000 - 0x0000)
class ISceneDriverVoicePlayer final
{
public:
	void ActivateVoice();
	void DeactivateVoice();
	void DestroyVoicePlayer();
	void SetupVoicePlayer(class AActor* InOwner, const EDriverId InDriverId);

	void PlayVoice(const ESceneDriverVoiceId InDriverVoiceId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SceneDriverVoicePlayer">();
	}
	static class ISceneDriverVoicePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISceneDriverVoicePlayer>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ISceneDriverVoicePlayer) == 0x000001, "Wrong alignment on ISceneDriverVoicePlayer");
static_assert(sizeof(ISceneDriverVoicePlayer) == 0x000001, "Wrong size on ISceneDriverVoicePlayer");

// Class UNION.RaceErrorHandlingSequence
// 0x0020 (0x0388 - 0x0368)
class ARaceErrorHandlingSequence final : public AHierarchicalStateMachine
{
public:
	TMulticastInlineDelegate<void()>              QuitLobbyFinishedDelegate;                         // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_378[0x10];                                     // 0x0378(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishedAddFairPoint(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnExitStateHandling();
	void OnInitStateAddFairPoint();
	void OnInitStateEOSLogout();
	void OnInitStateExit();
	void OnInitStateHandling();
	void OnInitStateIdle();
	void OnInitStateQuitLobby();
	void OnUpdateStateHandling(float DeltaTime);
	void QuitLobbyFinishedCallback();
	void SetNextSequenceState(ERaceErrorHandlingState InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceErrorHandlingSequence">();
	}
	static class ARaceErrorHandlingSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARaceErrorHandlingSequence>();
	}
};
static_assert(alignof(ARaceErrorHandlingSequence) == 0x000008, "Wrong alignment on ARaceErrorHandlingSequence");
static_assert(sizeof(ARaceErrorHandlingSequence) == 0x000388, "Wrong size on ARaceErrorHandlingSequence");
static_assert(offsetof(ARaceErrorHandlingSequence, QuitLobbyFinishedDelegate) == 0x000368, "Member 'ARaceErrorHandlingSequence::QuitLobbyFinishedDelegate' has a wrong offset!");

// Class UNION.RaceErrorHandlingSequenceStateBase
// 0x0008 (0x0100 - 0x00F8)
class URaceErrorHandlingSequenceStateBase final : public UHierarchicalStateMachineStateComponent
{
public:
	ERaceErrorHandlingState                       DefaultSequenceState;                              // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceErrorHandlingSequenceStateBase">();
	}
	static class URaceErrorHandlingSequenceStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceErrorHandlingSequenceStateBase>();
	}
};
static_assert(alignof(URaceErrorHandlingSequenceStateBase) == 0x000008, "Wrong alignment on URaceErrorHandlingSequenceStateBase");
static_assert(sizeof(URaceErrorHandlingSequenceStateBase) == 0x000100, "Wrong size on URaceErrorHandlingSequenceStateBase");
static_assert(offsetof(URaceErrorHandlingSequenceStateBase, DefaultSequenceState) == 0x0000F8, "Member 'URaceErrorHandlingSequenceStateBase::DefaultSequenceState' has a wrong offset!");

// Class UNION.RaceGadgetPlateSequence
// 0x0000 (0x0368 - 0x0368)
class ARaceGadgetPlateSequence : public AHierarchicalStateMachine
{
public:
	void OnExitStateSelect();
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnInitStateSelect();
	void OnUpdateStateSelect(float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceGadgetPlateSequence">();
	}
	static class ARaceGadgetPlateSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARaceGadgetPlateSequence>();
	}
};
static_assert(alignof(ARaceGadgetPlateSequence) == 0x000008, "Wrong alignment on ARaceGadgetPlateSequence");
static_assert(sizeof(ARaceGadgetPlateSequence) == 0x000368, "Wrong size on ARaceGadgetPlateSequence");

// Class UNION.RacePauseMenuSequence
// 0x0060 (0x03C8 - 0x0368)
class ARacePauseMenuSequence : public AHierarchicalStateMachine
{
public:
	class UDataTable*                             PauseMenuContentTable;                             // 0x0368(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_370[0x58];                                     // 0x0370(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCommonRaceMenuContentsInfo* GeneratePauseMenuContentsInfo();
	void OnExitStateSelect();
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnInitStateSelect();
	void OnUpdateStateSelect(float InDeltaTime);
	void SetNextPauseMenuState(ERacePauseMenuSequenceState InState);
	void SetOwnerPlayerControllerIndex(int32 InIndex);
	void SetPauseMenuExitCode(ERacePauseMenuSequenceExitCode InValue);
	void StopVehicleAllSE();

	int32 GetOwnerPlayerControllerIndex() const;
	class FText GetPopupWarningMessage(ECommonRaceMenuContentId InSelectedContentId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RacePauseMenuSequence">();
	}
	static class ARacePauseMenuSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARacePauseMenuSequence>();
	}
};
static_assert(alignof(ARacePauseMenuSequence) == 0x000008, "Wrong alignment on ARacePauseMenuSequence");
static_assert(sizeof(ARacePauseMenuSequence) == 0x0003C8, "Wrong size on ARacePauseMenuSequence");
static_assert(offsetof(ARacePauseMenuSequence, PauseMenuContentTable) == 0x000368, "Member 'ARacePauseMenuSequence::PauseMenuContentTable' has a wrong offset!");

// Class UNION.RacerAnimPlayerHandler
// 0x0000 (0x0000 - 0x0000)
class IRacerAnimPlayerHandler final
{
public:
	void PlayAnimation(const EDriverAnimMontageId ID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RacerAnimPlayerHandler">();
	}
	static class IRacerAnimPlayerHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRacerAnimPlayerHandler>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IRacerAnimPlayerHandler) == 0x000001, "Wrong alignment on IRacerAnimPlayerHandler");
static_assert(sizeof(IRacerAnimPlayerHandler) == 0x000001, "Wrong size on IRacerAnimPlayerHandler");

// Class UNION.RacerMaterialParameterDataAsset
// 0x0038 (0x0068 - 0x0030)
class URacerMaterialParameterDataAsset final : public UDataAsset
{
public:
	float                                         OpacityFadeNear;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpacityFadeFar;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DamageColor;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CountDownColor;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GroupEnergyBoostChargeColor;                       // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RacerMaterialParameterDataAsset">();
	}
	static class URacerMaterialParameterDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<URacerMaterialParameterDataAsset>();
	}
};
static_assert(alignof(URacerMaterialParameterDataAsset) == 0x000008, "Wrong alignment on URacerMaterialParameterDataAsset");
static_assert(sizeof(URacerMaterialParameterDataAsset) == 0x000068, "Wrong size on URacerMaterialParameterDataAsset");
static_assert(offsetof(URacerMaterialParameterDataAsset, OpacityFadeNear) == 0x000030, "Member 'URacerMaterialParameterDataAsset::OpacityFadeNear' has a wrong offset!");
static_assert(offsetof(URacerMaterialParameterDataAsset, OpacityFadeFar) == 0x000034, "Member 'URacerMaterialParameterDataAsset::OpacityFadeFar' has a wrong offset!");
static_assert(offsetof(URacerMaterialParameterDataAsset, DamageColor) == 0x000038, "Member 'URacerMaterialParameterDataAsset::DamageColor' has a wrong offset!");
static_assert(offsetof(URacerMaterialParameterDataAsset, CountDownColor) == 0x000048, "Member 'URacerMaterialParameterDataAsset::CountDownColor' has a wrong offset!");
static_assert(offsetof(URacerMaterialParameterDataAsset, GroupEnergyBoostChargeColor) == 0x000058, "Member 'URacerMaterialParameterDataAsset::GroupEnergyBoostChargeColor' has a wrong offset!");

// Class UNION.RaceReplayGhostPawn
// 0x0000 (0x0318 - 0x0318)
class ARaceReplayGhostPawn final : public APawn
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceReplayGhostPawn">();
	}
	static class ARaceReplayGhostPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARaceReplayGhostPawn>();
	}
};
static_assert(alignof(ARaceReplayGhostPawn) == 0x000008, "Wrong alignment on ARaceReplayGhostPawn");
static_assert(sizeof(ARaceReplayGhostPawn) == 0x000318, "Wrong size on ARaceReplayGhostPawn");

// Class UNION.RaceResultSequence
// 0x0018 (0x0380 - 0x0368)
class ARaceResultSequence : public AHierarchicalStateMachine
{
public:
	class UUnionRacers*                           Racers;                                            // 0x0368(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionRaceUI*                           RaceHUD;                                           // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static int32 GetResultOtherPlayerRank(int32 Index_0);
	static int32 GetResultPlayerRank();
	static void GetRewardRedStarRingTypeList(TArray<ERewardRedStarRingType>* OutRewardRedStarRingTypes, TArray<struct FHonorCommendationData>* OutRSRHonorList);

	struct FAppRaceResultData GetRaceResultData();
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnSetHonorList(const struct FHonorCommendationDataSetList& list);
	void SetRaceHUD(class UUnionRaceUI* inRaceHud);
	void SetRacers(class UUnionRacers* InRacers);
	void SetResultByRacers(class UUnionRacers* InRacers);
	void SetResultHUD(class UUnionRaceUIResultScene* InResultHUD);
	void UnloadAnotherStageLevels();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceResultSequence">();
	}
	static class ARaceResultSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARaceResultSequence>();
	}
};
static_assert(alignof(ARaceResultSequence) == 0x000008, "Wrong alignment on ARaceResultSequence");
static_assert(sizeof(ARaceResultSequence) == 0x000380, "Wrong size on ARaceResultSequence");
static_assert(offsetof(ARaceResultSequence, Racers) == 0x000368, "Member 'ARaceResultSequence::Racers' has a wrong offset!");
static_assert(offsetof(ARaceResultSequence, RaceHUD) == 0x000370, "Member 'ARaceResultSequence::RaceHUD' has a wrong offset!");

// Class UNION.RaceResultSettingDataAsset
// 0x0018 (0x0048 - 0x0030)
class URaceResultSettingDataAsset final : public UDataAsset
{
public:
	TArray<int32>                                 RankEarnPointDefault;                              // 0x0030(0x0010)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         GrandPrixLastRace1stRankBonusPoint;                // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceResultSettingDataAsset">();
	}
	static class URaceResultSettingDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceResultSettingDataAsset>();
	}
};
static_assert(alignof(URaceResultSettingDataAsset) == 0x000008, "Wrong alignment on URaceResultSettingDataAsset");
static_assert(sizeof(URaceResultSettingDataAsset) == 0x000048, "Wrong size on URaceResultSettingDataAsset");
static_assert(offsetof(URaceResultSettingDataAsset, RankEarnPointDefault) == 0x000030, "Member 'URaceResultSettingDataAsset::RankEarnPointDefault' has a wrong offset!");
static_assert(offsetof(URaceResultSettingDataAsset, GrandPrixLastRace1stRankBonusPoint) == 0x000040, "Member 'URaceResultSettingDataAsset::GrandPrixLastRace1stRankBonusPoint' has a wrong offset!");

// Class UNION.RacerUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class URacerUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void GetParamData(const class UDataTable* InDriverParamDataTable, const class UDataTable* InFrontPartsParamDataTable, const class UDataTable* InRearPartsParamDataTable, const class UDataTable* InTirePartsParamDataTable, EDriverId InDriverId, EMachineId InFrontPartsId, EMachineId InRearPartsId, EMachineId InTirePartsId, const TArray<EGadgetId>& InGadgetIds, struct FRacerParamData* OutParamData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RacerUtilityLibrary">();
	}
	static class URacerUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URacerUtilityLibrary>();
	}
};
static_assert(alignof(URacerUtilityLibrary) == 0x000008, "Wrong alignment on URacerUtilityLibrary");
static_assert(sizeof(URacerUtilityLibrary) == 0x000028, "Wrong size on URacerUtilityLibrary");

// Class UNION.RaceSequenceHolder
// 0x0010 (0x02E8 - 0x02D8)
class ARaceSequenceHolder : public AHierarchicalStateMachineHolder
{
public:
	uint8                                         Pad_2D8[0x10];                                     // 0x02D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 DoCategorizeMenuSelect();
	void StopForceFeedbackLocalPlayerAll();

	int32 GetEndIndexForDebugModeMatchRace() const;
	int32 GetEndIndexForGrandPrix() const;
	int32 GetEndIndexForMatchRace() const;
	int32 GetEndIndexForParty() const;
	int32 GetEndIndexForTimeTrial() const;
	EGameModeId GetNextGameMode() const;
	bool IsSelectMenuRetry() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceHolder">();
	}
	static class ARaceSequenceHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARaceSequenceHolder>();
	}
};
static_assert(alignof(ARaceSequenceHolder) == 0x000008, "Wrong alignment on ARaceSequenceHolder");
static_assert(sizeof(ARaceSequenceHolder) == 0x0002E8, "Wrong size on ARaceSequenceHolder");

// Class UNION.RaceSequenceStateCreateRace
// 0x0000 (0x0110 - 0x0110)
class URaceSequenceStateCreateRace : public URaceSequenceStateBase
{
public:
	void CreateRace();
	void DebugPostCreateRace();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateCreateRace">();
	}
	static class URaceSequenceStateCreateRace* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateCreateRace>();
	}
};
static_assert(alignof(URaceSequenceStateCreateRace) == 0x000008, "Wrong alignment on URaceSequenceStateCreateRace");
static_assert(sizeof(URaceSequenceStateCreateRace) == 0x000110, "Wrong size on URaceSequenceStateCreateRace");

// Class UNION.RaceSequenceStateEnding
// 0x0000 (0x0110 - 0x0110)
class URaceSequenceStateEnding : public URaceSequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateEnding">();
	}
	static class URaceSequenceStateEnding* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateEnding>();
	}
};
static_assert(alignof(URaceSequenceStateEnding) == 0x000008, "Wrong alignment on URaceSequenceStateEnding");
static_assert(sizeof(URaceSequenceStateEnding) == 0x000110, "Wrong size on URaceSequenceStateEnding");

// Class UNION.RaceSequenceStateEndMenu
// 0x0000 (0x0110 - 0x0110)
class URaceSequenceStateEndMenu : public URaceSequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateEndMenu">();
	}
	static class URaceSequenceStateEndMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateEndMenu>();
	}
};
static_assert(alignof(URaceSequenceStateEndMenu) == 0x000008, "Wrong alignment on URaceSequenceStateEndMenu");
static_assert(sizeof(URaceSequenceStateEndMenu) == 0x000110, "Wrong size on URaceSequenceStateEndMenu");

// Class UNION.RaceSequenceStateFeaturedRacer
// 0x0010 (0x0120 - 0x0110)
class URaceSequenceStateFeaturedRacer : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URaceBeforeSharedData*                  RaceBeforeSharedData;                              // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateFeaturedRacer">();
	}
	static class URaceSequenceStateFeaturedRacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateFeaturedRacer>();
	}
};
static_assert(alignof(URaceSequenceStateFeaturedRacer) == 0x000008, "Wrong alignment on URaceSequenceStateFeaturedRacer");
static_assert(sizeof(URaceSequenceStateFeaturedRacer) == 0x000120, "Wrong size on URaceSequenceStateFeaturedRacer");
static_assert(offsetof(URaceSequenceStateFeaturedRacer, RaceBeforeSharedData) == 0x000118, "Member 'URaceSequenceStateFeaturedRacer::RaceBeforeSharedData' has a wrong offset!");

// Class UNION.RaceSequenceStateGadgetPlate
// 0x0000 (0x0110 - 0x0110)
class URaceSequenceStateGadgetPlate : public URaceSequenceStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateGadgetPlate">();
	}
	static class URaceSequenceStateGadgetPlate* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateGadgetPlate>();
	}
};
static_assert(alignof(URaceSequenceStateGadgetPlate) == 0x000008, "Wrong alignment on URaceSequenceStateGadgetPlate");
static_assert(sizeof(URaceSequenceStateGadgetPlate) == 0x000110, "Wrong size on URaceSequenceStateGadgetPlate");

// Class UNION.RaceSequenceStateIntroduceCourse
// 0x0010 (0x0120 - 0x0110)
class URaceSequenceStateIntroduceCourse : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URaceBeforeSharedData*                  RaceBeforeSharedData;                              // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateIntroduceCourse">();
	}
	static class URaceSequenceStateIntroduceCourse* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateIntroduceCourse>();
	}
};
static_assert(alignof(URaceSequenceStateIntroduceCourse) == 0x000008, "Wrong alignment on URaceSequenceStateIntroduceCourse");
static_assert(sizeof(URaceSequenceStateIntroduceCourse) == 0x000120, "Wrong size on URaceSequenceStateIntroduceCourse");
static_assert(offsetof(URaceSequenceStateIntroduceCourse, RaceBeforeSharedData) == 0x000118, "Member 'URaceSequenceStateIntroduceCourse::RaceBeforeSharedData' has a wrong offset!");

// Class UNION.RaceSequenceStateLoadAssets
// 0x0108 (0x0218 - 0x0110)
class URaceSequenceStateLoadAssets : public URaceSequenceStateBase
{
public:
	struct FUnionRacePreCreateParam               PreCreateParam;                                    // 0x0110(0x0040)(Protected, NativeAccessSpecifierProtected)
	bool                                          bLoadedStageAsset;                                 // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLoadedDriverAsset;                                // 0x0151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLoadedMachinePartsAsset;                          // 0x0152(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLoadedMachineEffectAsset;                         // 0x0153(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnablePubCamera;                                  // 0x0154(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                DebugFirstCourseAssetIds;                          // 0x0158(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UDataTable*                             StageDataAssetTable;                               // 0x0168(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_170[0x90];                                     // 0x0170(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimaryStageDataAsset*>         StageDataAssets;                                   // 0x0200(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UResourceHolder*                        ResourceHolder;                                    // 0x0210(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static bool AddTravelRingLevels(const class UObject* InWorldContextObject, EDomainIndex InDomainIndex, const class UPrimaryStageDataAsset* InStageDataAsset, int32 InLightChannel, const struct FVector& InLevelOffset, ERaceType InRaceType);
	static bool StartStageLevels(const class UObject* InWorldContextObject, const struct FLatentActionInfo& InLatentInfo);

	void AddBackgroundLevelName(const class FString& LevelName);
	void AddDomainData(const struct FUnionRaceDomainData& InDomainData);
	void BeginMakePreCreateParam();
	void EndMakePreCreateParam();
	void OnLoadedStageAsset(int32 StageIndex);
	void StartLoadNative();

	void GetGroupRuleData(EGroupRaceRule GroupRaceRule, struct FGroupRaceRuleData* GroupRaceRuleData) const;
	bool ShouldNativeLoad() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateLoadAssets">();
	}
	static class URaceSequenceStateLoadAssets* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateLoadAssets>();
	}
};
static_assert(alignof(URaceSequenceStateLoadAssets) == 0x000008, "Wrong alignment on URaceSequenceStateLoadAssets");
static_assert(sizeof(URaceSequenceStateLoadAssets) == 0x000218, "Wrong size on URaceSequenceStateLoadAssets");
static_assert(offsetof(URaceSequenceStateLoadAssets, PreCreateParam) == 0x000110, "Member 'URaceSequenceStateLoadAssets::PreCreateParam' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateLoadAssets, bLoadedStageAsset) == 0x000150, "Member 'URaceSequenceStateLoadAssets::bLoadedStageAsset' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateLoadAssets, bLoadedDriverAsset) == 0x000151, "Member 'URaceSequenceStateLoadAssets::bLoadedDriverAsset' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateLoadAssets, bLoadedMachinePartsAsset) == 0x000152, "Member 'URaceSequenceStateLoadAssets::bLoadedMachinePartsAsset' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateLoadAssets, bLoadedMachineEffectAsset) == 0x000153, "Member 'URaceSequenceStateLoadAssets::bLoadedMachineEffectAsset' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateLoadAssets, bEnablePubCamera) == 0x000154, "Member 'URaceSequenceStateLoadAssets::bEnablePubCamera' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateLoadAssets, DebugFirstCourseAssetIds) == 0x000158, "Member 'URaceSequenceStateLoadAssets::DebugFirstCourseAssetIds' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateLoadAssets, StageDataAssetTable) == 0x000168, "Member 'URaceSequenceStateLoadAssets::StageDataAssetTable' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateLoadAssets, StageDataAssets) == 0x000200, "Member 'URaceSequenceStateLoadAssets::StageDataAssets' has a wrong offset!");
static_assert(offsetof(URaceSequenceStateLoadAssets, ResourceHolder) == 0x000210, "Member 'URaceSequenceStateLoadAssets::ResourceHolder' has a wrong offset!");

// Class UNION.RaceSequenceStateReadyParam
// 0x0010 (0x0120 - 0x0110)
class URaceSequenceStateReadyParam : public URaceSequenceStateBase
{
public:
	uint8                                         Pad_110[0x10];                                     // 0x0110(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RaceSequenceStateReadyParam">();
	}
	static class URaceSequenceStateReadyParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<URaceSequenceStateReadyParam>();
	}
};
static_assert(alignof(URaceSequenceStateReadyParam) == 0x000008, "Wrong alignment on URaceSequenceStateReadyParam");
static_assert(sizeof(URaceSequenceStateReadyParam) == 0x000120, "Wrong size on URaceSequenceStateReadyParam");

// Class UNION.RankingDataManageSubsystem
// 0x0730 (0x0760 - 0x0030)
class URankingDataManageSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x6F0];                                     // 0x0030(0x06F0)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error)> ReceivedDelegate; // 0x0720(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TDelegate<void(int32 ResCode, bool Error)>    DownloadCompleteDelegate;                          // 0x0730(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TDelegate<void(int32 Length, float Rate)>     DownloadProgressDelegate;                          // 0x0740(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_750[0x10];                                     // 0x0750(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDownloadCompleteFestaWorldRanking(int32 ResCode, bool bIsError);
	void OnDownloadCompleteLegendCompeWorldRanking(int32 ResCode, bool bIsError);
	void OnDownloadCompleteRankMatchWorldRanking(int32 ResCode, bool bIsError);
	void OnDownloadCompleteTimeTrialWorldRanking(int32 ResCode, bool bIsError);
	void OnDownloadProgressDelegate(int32 Length, float Rate);
	void OnReceivedFestaFriendRanking(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnReceivedFestaMyRanking(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnReceivedRankMatchFriendRanking(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnReceivedRankMatchMyRanking(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnReceivedTimeTrialMyRanking(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnReceivedUrlFestaWorldRanking(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnReceivedUrlLegendCompeWorldRanking(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnReceivedUrlRankMatchWorldRanking(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnReceivedUrlTimeTrialWorldRanking(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RankingDataManageSubsystem">();
	}
	static class URankingDataManageSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<URankingDataManageSubsystem>();
	}
};
static_assert(alignof(URankingDataManageSubsystem) == 0x000008, "Wrong alignment on URankingDataManageSubsystem");
static_assert(sizeof(URankingDataManageSubsystem) == 0x000760, "Wrong size on URankingDataManageSubsystem");
static_assert(offsetof(URankingDataManageSubsystem, ReceivedDelegate) == 0x000720, "Member 'URankingDataManageSubsystem::ReceivedDelegate' has a wrong offset!");
static_assert(offsetof(URankingDataManageSubsystem, DownloadCompleteDelegate) == 0x000730, "Member 'URankingDataManageSubsystem::DownloadCompleteDelegate' has a wrong offset!");
static_assert(offsetof(URankingDataManageSubsystem, DownloadProgressDelegate) == 0x000740, "Member 'URankingDataManageSubsystem::DownloadProgressDelegate' has a wrong offset!");

// Class UNION.RankingLine
// 0x00C0 (0x0540 - 0x0480)
class URankingLine : public UUnionUIButtonBase
{
public:
	bool                                          bIsMyLine;                                         // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameModeId                                   GameModeType;                                      // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_482[0x6];                                      // 0x0482(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMenuRankingLineData                   RankingLineData;                                   // 0x0488(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C0[0x8];                                      // 0x04C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetSwitcher*                        DSP_WidgetSwitcher_Rank;                           // 0x04C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUITextBlock*                      NUM_th;                                            // 0x04D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URankIcon*                              DSP_WBP_ResultRate_Sub_RankIcon;                   // 0x04D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_CharaIcon;                                     // 0x04E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_PlayerName;                                    // 0x04E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 PlatformIcon;                                      // 0x04F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHonorTitlePlateUserWidget*             WBP_HonorTitle_Plate;                              // 0x04F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    Num_Point_01;                                      // 0x0500(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUITextBlock*                      Num_Time;                                          // 0x0508(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Active_Loop;                                       // 0x0510(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Select_Loop;                                       // 0x0518(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Myself_Loop;                                       // 0x0520(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   PointBaseText;                                     // 0x0528(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	class USoundAtomCue*                          FocusSoundCue;                                     // 0x0538(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClearDisplay();
	void FireMyselfAnim();
	class UButton* GetMouseButton();
	void SetCharacterId(EDriverId CharaId);
	void SetCrossPlayIcon(ECrossplayPlatform CrossplayType);
	void SetFestaPointValue(int32 TotalPoint);
	void SetHonerTitleId(int32 titleId);
	void SetRacerName(const class FText& RacerName);
	void SetRankingLineData(EGameModeId RankType, const struct FMenuRankingLineData& Data);
	void SetRankValue(int32 rankValue);
	void SetRateValue(int32 rateValue);
	void SetRecordTime(int32 TotalTime);
	void UpdateByRankingModeType();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RankingLine">();
	}
	static class URankingLine* GetDefaultObj()
	{
		return GetDefaultObjImpl<URankingLine>();
	}
};
static_assert(alignof(URankingLine) == 0x000008, "Wrong alignment on URankingLine");
static_assert(sizeof(URankingLine) == 0x000540, "Wrong size on URankingLine");
static_assert(offsetof(URankingLine, bIsMyLine) == 0x000480, "Member 'URankingLine::bIsMyLine' has a wrong offset!");
static_assert(offsetof(URankingLine, GameModeType) == 0x000481, "Member 'URankingLine::GameModeType' has a wrong offset!");
static_assert(offsetof(URankingLine, RankingLineData) == 0x000488, "Member 'URankingLine::RankingLineData' has a wrong offset!");
static_assert(offsetof(URankingLine, DSP_WidgetSwitcher_Rank) == 0x0004C8, "Member 'URankingLine::DSP_WidgetSwitcher_Rank' has a wrong offset!");
static_assert(offsetof(URankingLine, NUM_th) == 0x0004D0, "Member 'URankingLine::NUM_th' has a wrong offset!");
static_assert(offsetof(URankingLine, DSP_WBP_ResultRate_Sub_RankIcon) == 0x0004D8, "Member 'URankingLine::DSP_WBP_ResultRate_Sub_RankIcon' has a wrong offset!");
static_assert(offsetof(URankingLine, DMY_CharaIcon) == 0x0004E0, "Member 'URankingLine::DMY_CharaIcon' has a wrong offset!");
static_assert(offsetof(URankingLine, TXT_PlayerName) == 0x0004E8, "Member 'URankingLine::TXT_PlayerName' has a wrong offset!");
static_assert(offsetof(URankingLine, PlatformIcon) == 0x0004F0, "Member 'URankingLine::PlatformIcon' has a wrong offset!");
static_assert(offsetof(URankingLine, WBP_HonorTitle_Plate) == 0x0004F8, "Member 'URankingLine::WBP_HonorTitle_Plate' has a wrong offset!");
static_assert(offsetof(URankingLine, Num_Point_01) == 0x000500, "Member 'URankingLine::Num_Point_01' has a wrong offset!");
static_assert(offsetof(URankingLine, Num_Time) == 0x000508, "Member 'URankingLine::Num_Time' has a wrong offset!");
static_assert(offsetof(URankingLine, Active_Loop) == 0x000510, "Member 'URankingLine::Active_Loop' has a wrong offset!");
static_assert(offsetof(URankingLine, Select_Loop) == 0x000518, "Member 'URankingLine::Select_Loop' has a wrong offset!");
static_assert(offsetof(URankingLine, Myself_Loop) == 0x000520, "Member 'URankingLine::Myself_Loop' has a wrong offset!");
static_assert(offsetof(URankingLine, PointBaseText) == 0x000528, "Member 'URankingLine::PointBaseText' has a wrong offset!");
static_assert(offsetof(URankingLine, FocusSoundCue) == 0x000538, "Member 'URankingLine::FocusSoundCue' has a wrong offset!");

// Class UNION.RankMatchLobbyContext
// 0x0000 (0x0448 - 0x0448)
class URankMatchLobbyContext final : public UCommonLobbyContext
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RankMatchLobbyContext">();
	}
	static class URankMatchLobbyContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<URankMatchLobbyContext>();
	}
};
static_assert(alignof(URankMatchLobbyContext) == 0x000008, "Wrong alignment on URankMatchLobbyContext");
static_assert(sizeof(URankMatchLobbyContext) == 0x000448, "Wrong size on URankMatchLobbyContext");

// Class UNION.RankMatchLobbyMemberContext
// 0x0000 (0x00F0 - 0x00F0)
class URankMatchLobbyMemberContext final : public UCommonLobbyMemberContext
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RankMatchLobbyMemberContext">();
	}
	static class URankMatchLobbyMemberContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<URankMatchLobbyMemberContext>();
	}
};
static_assert(alignof(URankMatchLobbyMemberContext) == 0x000008, "Wrong alignment on URankMatchLobbyMemberContext");
static_assert(sizeof(URankMatchLobbyMemberContext) == 0x0000F0, "Wrong size on URankMatchLobbyMemberContext");

// Class UNION.RankMatchMenuRankingState
// 0x0000 (0x0128 - 0x0128)
class URankMatchMenuRankingState final : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RankMatchMenuRankingState">();
	}
	static class URankMatchMenuRankingState* GetDefaultObj()
	{
		return GetDefaultObjImpl<URankMatchMenuRankingState>();
	}
};
static_assert(alignof(URankMatchMenuRankingState) == 0x000008, "Wrong alignment on URankMatchMenuRankingState");
static_assert(sizeof(URankMatchMenuRankingState) == 0x000128, "Wrong size on URankMatchMenuRankingState");

// Class UNION.RankMatchMenuSequence
// 0x0000 (0x0368 - 0x0368)
class ARankMatchMenuSequence final : public AHierarchicalStateMachine
{
public:
	void OnInitStateExit();
	void OnInitStateIdle();
	void SetNextMenuSequenceState(EMenuSequenceMainState InState);
	void SetNextSubMenuSequenceState(EMenuSequenceSubState InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RankMatchMenuSequence">();
	}
	static class ARankMatchMenuSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARankMatchMenuSequence>();
	}
};
static_assert(alignof(ARankMatchMenuSequence) == 0x000008, "Wrong alignment on ARankMatchMenuSequence");
static_assert(sizeof(ARankMatchMenuSequence) == 0x000368, "Wrong size on ARankMatchMenuSequence");

// Class UNION.ReadyInputWaitState
// 0x0000 (0x00F8 - 0x00F8)
class UReadyInputWaitState final : public UHierarchicalStateMachineStateComponent
{
public:
	bool IsAllPlayerChecked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReadyInputWaitState">();
	}
	static class UReadyInputWaitState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReadyInputWaitState>();
	}
};
static_assert(alignof(UReadyInputWaitState) == 0x000008, "Wrong alignment on UReadyInputWaitState");
static_assert(sizeof(UReadyInputWaitState) == 0x0000F8, "Wrong size on UReadyInputWaitState");

// Class UNION.ReadyOption
// 0x0000 (0x02E0 - 0x02E0)
class UReadyOption : public UUserWidget
{
public:
	void PlayOnOffAnimation(bool bIsOn, bool SeEnabled);
	void SetIsGamePadButton(bool bIsGamePad);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReadyOption">();
	}
	static class UReadyOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReadyOption>();
	}
};
static_assert(alignof(UReadyOption) == 0x000008, "Wrong alignment on UReadyOption");
static_assert(sizeof(UReadyOption) == 0x0002E0, "Wrong size on UReadyOption");

// Class UNION.ReadySequenceActor
// 0x0000 (0x0290 - 0x0290)
class AReadySequenceActor : public AActor
{
public:
	void OnReadyAccepted();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReadySequenceActor">();
	}
	static class AReadySequenceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AReadySequenceActor>();
	}
};
static_assert(alignof(AReadySequenceActor) == 0x000008, "Wrong alignment on AReadySequenceActor");
static_assert(sizeof(AReadySequenceActor) == 0x000290, "Wrong size on AReadySequenceActor");

// Class UNION.ReadyWidget
// 0x0000 (0x02E0 - 0x02E0)
class UReadyWidget : public UUserWidget
{
public:
	void FireSceneAnim(EUnionUISceneAnimation AnimType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReadyWidget">();
	}
	static class UReadyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReadyWidget>();
	}
};
static_assert(alignof(UReadyWidget) == 0x000008, "Wrong alignment on UReadyWidget");
static_assert(sizeof(UReadyWidget) == 0x0002E0, "Wrong size on UReadyWidget");

// Class UNION.ReplayGhostHoverboard
// 0x0458 (0x07C8 - 0x0370)
class AReplayGhostHoverboard final : public AReplayGhostBase
{
public:
	class UStaticMeshComponent*                   DebguMesh;                                         // 0x0370(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              FrontMeshComponent;                                // 0x0378(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              RearMeshComponent;                                 // 0x0380(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionStaticMeshComponent*              CenterMeshComponent;                               // 0x0388(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUnionStaticMeshComponent*>      UnitBoatStaticMeshComponents;                      // 0x0390(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UUnionStaticMeshComponent*>      UnitPlaneStaticMeshComponents;                     // 0x03A0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FMachineMaterialData                   FrontMeshMaterial;                                 // 0x03B0(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineMaterialData                   RearMeshMaterial;                                  // 0x0458(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineMaterialData                   CenterMeshMaterial;                                // 0x0500(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineMaterialData                   FrontMeshSubMaterial;                              // 0x05A8(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineMaterialData                   RearMeshSubMaterial;                               // 0x0650(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineMaterialData                   CenterMeshSubMaterial;                             // 0x06F8(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMachineMaterialData>           UnitBoatMeshMaterial;                              // 0x07A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMachineMaterialData>           UnitPlaneMeshMaterial;                             // 0x07B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     GhostMaterialInterface;                            // 0x07C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReplayGhostHoverboard">();
	}
	static class AReplayGhostHoverboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<AReplayGhostHoverboard>();
	}
};
static_assert(alignof(AReplayGhostHoverboard) == 0x000008, "Wrong alignment on AReplayGhostHoverboard");
static_assert(sizeof(AReplayGhostHoverboard) == 0x0007C8, "Wrong size on AReplayGhostHoverboard");
static_assert(offsetof(AReplayGhostHoverboard, DebguMesh) == 0x000370, "Member 'AReplayGhostHoverboard::DebguMesh' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, FrontMeshComponent) == 0x000378, "Member 'AReplayGhostHoverboard::FrontMeshComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, RearMeshComponent) == 0x000380, "Member 'AReplayGhostHoverboard::RearMeshComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, CenterMeshComponent) == 0x000388, "Member 'AReplayGhostHoverboard::CenterMeshComponent' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, UnitBoatStaticMeshComponents) == 0x000390, "Member 'AReplayGhostHoverboard::UnitBoatStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, UnitPlaneStaticMeshComponents) == 0x0003A0, "Member 'AReplayGhostHoverboard::UnitPlaneStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, FrontMeshMaterial) == 0x0003B0, "Member 'AReplayGhostHoverboard::FrontMeshMaterial' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, RearMeshMaterial) == 0x000458, "Member 'AReplayGhostHoverboard::RearMeshMaterial' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, CenterMeshMaterial) == 0x000500, "Member 'AReplayGhostHoverboard::CenterMeshMaterial' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, FrontMeshSubMaterial) == 0x0005A8, "Member 'AReplayGhostHoverboard::FrontMeshSubMaterial' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, RearMeshSubMaterial) == 0x000650, "Member 'AReplayGhostHoverboard::RearMeshSubMaterial' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, CenterMeshSubMaterial) == 0x0006F8, "Member 'AReplayGhostHoverboard::CenterMeshSubMaterial' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, UnitBoatMeshMaterial) == 0x0007A0, "Member 'AReplayGhostHoverboard::UnitBoatMeshMaterial' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, UnitPlaneMeshMaterial) == 0x0007B0, "Member 'AReplayGhostHoverboard::UnitPlaneMeshMaterial' has a wrong offset!");
static_assert(offsetof(AReplayGhostHoverboard, GhostMaterialInterface) == 0x0007C0, "Member 'AReplayGhostHoverboard::GhostMaterialInterface' has a wrong offset!");

// Class UNION.RivalCameraDataAsset
// 0x00D8 (0x0108 - 0x0030)
class URivalCameraDataAsset final : public UDataAsset
{
public:
	float                                         StartUpCompTime;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartUpEaseExp;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRaceCameraParam                       DefaultParam;                                      // 0x0038(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMap<EDriverId, struct FRivalCameraCustomParam> CustomParam;                                     // 0x00B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RivalCameraDataAsset">();
	}
	static class URivalCameraDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<URivalCameraDataAsset>();
	}
};
static_assert(alignof(URivalCameraDataAsset) == 0x000008, "Wrong alignment on URivalCameraDataAsset");
static_assert(sizeof(URivalCameraDataAsset) == 0x000108, "Wrong size on URivalCameraDataAsset");
static_assert(offsetof(URivalCameraDataAsset, StartUpCompTime) == 0x000030, "Member 'URivalCameraDataAsset::StartUpCompTime' has a wrong offset!");
static_assert(offsetof(URivalCameraDataAsset, StartUpEaseExp) == 0x000034, "Member 'URivalCameraDataAsset::StartUpEaseExp' has a wrong offset!");
static_assert(offsetof(URivalCameraDataAsset, DefaultParam) == 0x000038, "Member 'URivalCameraDataAsset::DefaultParam' has a wrong offset!");
static_assert(offsetof(URivalCameraDataAsset, CustomParam) == 0x0000B8, "Member 'URivalCameraDataAsset::CustomParam' has a wrong offset!");

// Class UNION.ResultSequenceUtility
// 0x0000 (0x0028 - 0x0028)
class UResultSequenceUtility final : public UBlueprintFunctionLibrary
{
public:
	static void GetResultFestaData(struct FCommon_FestaData* OutUserResultPointInfo, struct FCommon_FestaPointData* OutUserResultPointDetail);
	static void SetResultFestaData(bool* bSuccess, const struct FCommon_FestaData& InUserResultPointInfo, const struct FCommon_FestaPointData& InUserResultPointDetail);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ResultSequenceUtility">();
	}
	static class UResultSequenceUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResultSequenceUtility>();
	}
};
static_assert(alignof(UResultSequenceUtility) == 0x000008, "Wrong alignment on UResultSequenceUtility");
static_assert(sizeof(UResultSequenceUtility) == 0x000028, "Wrong size on UResultSequenceUtility");

// Class UNION.RewardAchievementManager
// 0x0018 (0x0040 - 0x0028)
class URewardAchievementManager : public UObject
{
public:
	class UDataTable*                             RewardAchievementDataTable;                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             RewardAchievementDriverDataTable;                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckGetRewardAchievement(ERewardAchievementType InRewardAchievementType);
	bool CheckRewardAchievementCondition(ERewardAchievementType InRewardAchievementType);
	bool CheckRewardAchievementDriverCondition(ERewardAchievementDriverType InRewardAchievementDriverType);
	void SetRewardAchievement();
	void SetRewardAchievementByDriverType(ERewardAchievementDriverType InRewardAchievementDriverType, bool bInNoRequest);
	void SetRewardAchievementByType(ERewardAchievementType InRewardAchievementType, bool bInNoRequest);
	void SetRewardAchievementGrandPrix();
	void SetRewardAchievementRankMatch();
	void SetRewardGetDisplayRequest(ERewardAchievementType InRewardAchievementType);

	bool CheckSetRewardAchievement() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RewardAchievementManager">();
	}
	static class URewardAchievementManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<URewardAchievementManager>();
	}
};
static_assert(alignof(URewardAchievementManager) == 0x000008, "Wrong alignment on URewardAchievementManager");
static_assert(sizeof(URewardAchievementManager) == 0x000040, "Wrong size on URewardAchievementManager");
static_assert(offsetof(URewardAchievementManager, RewardAchievementDataTable) == 0x000028, "Member 'URewardAchievementManager::RewardAchievementDataTable' has a wrong offset!");
static_assert(offsetof(URewardAchievementManager, RewardAchievementDriverDataTable) == 0x000030, "Member 'URewardAchievementManager::RewardAchievementDriverDataTable' has a wrong offset!");

// Class UNION.RivalSelectBonusProgressWidget
// 0x0020 (0x0300 - 0x02E0)
class URivalSelectBonusProgressWidget : public UUserWidget
{
public:
	TArray<class FText>                           _SpeedClassTexts;                                  // 0x02E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UUnionUITextBlock*                      _NumTextBlock;                                     // 0x02F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionRichTextBlock*                    _SpeedClassTextBlock;                              // 0x02F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RivalSelectBonusProgressWidget">();
	}
	static class URivalSelectBonusProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URivalSelectBonusProgressWidget>();
	}
};
static_assert(alignof(URivalSelectBonusProgressWidget) == 0x000008, "Wrong alignment on URivalSelectBonusProgressWidget");
static_assert(sizeof(URivalSelectBonusProgressWidget) == 0x000300, "Wrong size on URivalSelectBonusProgressWidget");
static_assert(offsetof(URivalSelectBonusProgressWidget, _SpeedClassTexts) == 0x0002E0, "Member 'URivalSelectBonusProgressWidget::_SpeedClassTexts' has a wrong offset!");
static_assert(offsetof(URivalSelectBonusProgressWidget, _NumTextBlock) == 0x0002F0, "Member 'URivalSelectBonusProgressWidget::_NumTextBlock' has a wrong offset!");
static_assert(offsetof(URivalSelectBonusProgressWidget, _SpeedClassTextBlock) == 0x0002F8, "Member 'URivalSelectBonusProgressWidget::_SpeedClassTextBlock' has a wrong offset!");

// Class UNION.RivalSelectCharaCutInWidget
// 0x0018 (0x02F8 - 0x02E0)
class URivalSelectCharaCutInWidget : public UUserWidget
{
public:
	class UWidgetAnimation*                       CharaCutIn_In;                                     // 0x02E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       CharaCutIn_Loop;                                   // 0x02E8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _CharaImage;                                       // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RivalSelectCharaCutInWidget">();
	}
	static class URivalSelectCharaCutInWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URivalSelectCharaCutInWidget>();
	}
};
static_assert(alignof(URivalSelectCharaCutInWidget) == 0x000008, "Wrong alignment on URivalSelectCharaCutInWidget");
static_assert(sizeof(URivalSelectCharaCutInWidget) == 0x0002F8, "Wrong size on URivalSelectCharaCutInWidget");
static_assert(offsetof(URivalSelectCharaCutInWidget, CharaCutIn_In) == 0x0002E0, "Member 'URivalSelectCharaCutInWidget::CharaCutIn_In' has a wrong offset!");
static_assert(offsetof(URivalSelectCharaCutInWidget, CharaCutIn_Loop) == 0x0002E8, "Member 'URivalSelectCharaCutInWidget::CharaCutIn_Loop' has a wrong offset!");
static_assert(offsetof(URivalSelectCharaCutInWidget, _CharaImage) == 0x0002F0, "Member 'URivalSelectCharaCutInWidget::_CharaImage' has a wrong offset!");

// Class UNION.RivalSelectNextRivalMarkWidget
// 0x0048 (0x0338 - 0x02F0)
class URivalSelectNextRivalMarkWidget : public UCommonUserWidget
{
public:
	class UWidgetAnimation*                       NextRival_In;                                      // 0x02F0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       NextRival_Loop;                                    // 0x02F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       NextRival_Out;                                     // 0x0300(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       NextRival_In_High;                                 // 0x0308(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       NextRival_Loop_High;                               // 0x0310(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       NextRival_Out_High;                                // 0x0318(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_320[0x4];                                      // 0x0320(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UUMGSequencePlayer>      _SequencePlayer;                                   // 0x0324(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRichTextBlock*                    _TextRival;                                        // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RivalSelectNextRivalMarkWidget">();
	}
	static class URivalSelectNextRivalMarkWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URivalSelectNextRivalMarkWidget>();
	}
};
static_assert(alignof(URivalSelectNextRivalMarkWidget) == 0x000008, "Wrong alignment on URivalSelectNextRivalMarkWidget");
static_assert(sizeof(URivalSelectNextRivalMarkWidget) == 0x000338, "Wrong size on URivalSelectNextRivalMarkWidget");
static_assert(offsetof(URivalSelectNextRivalMarkWidget, NextRival_In) == 0x0002F0, "Member 'URivalSelectNextRivalMarkWidget::NextRival_In' has a wrong offset!");
static_assert(offsetof(URivalSelectNextRivalMarkWidget, NextRival_Loop) == 0x0002F8, "Member 'URivalSelectNextRivalMarkWidget::NextRival_Loop' has a wrong offset!");
static_assert(offsetof(URivalSelectNextRivalMarkWidget, NextRival_Out) == 0x000300, "Member 'URivalSelectNextRivalMarkWidget::NextRival_Out' has a wrong offset!");
static_assert(offsetof(URivalSelectNextRivalMarkWidget, NextRival_In_High) == 0x000308, "Member 'URivalSelectNextRivalMarkWidget::NextRival_In_High' has a wrong offset!");
static_assert(offsetof(URivalSelectNextRivalMarkWidget, NextRival_Loop_High) == 0x000310, "Member 'URivalSelectNextRivalMarkWidget::NextRival_Loop_High' has a wrong offset!");
static_assert(offsetof(URivalSelectNextRivalMarkWidget, NextRival_Out_High) == 0x000318, "Member 'URivalSelectNextRivalMarkWidget::NextRival_Out_High' has a wrong offset!");
static_assert(offsetof(URivalSelectNextRivalMarkWidget, _SequencePlayer) == 0x000324, "Member 'URivalSelectNextRivalMarkWidget::_SequencePlayer' has a wrong offset!");
static_assert(offsetof(URivalSelectNextRivalMarkWidget, _TextRival) == 0x000330, "Member 'URivalSelectNextRivalMarkWidget::_TextRival' has a wrong offset!");

// Class UNION.RivalSelectWidget
// 0x0188 (0x0478 - 0x02F0)
class URivalSelectWidget : public UCommonUserWidget
{
public:
	TMulticastInlineDelegate<void(EDriverId DriverId, uint8 RivalLevel)> OnDecisionEvent;            // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDecisionAnimFinishedEvent;                       // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(uint8 RivalLevel)> OnCanceledEvent;                                // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBattleResultFinishEvent;                         // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRivalIconInAnimFinishEvent;                      // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMap<EDriverId, TSoftObjectPtr<class UTexture2D>> StickerTmbDriverId_TextureMap;                 // 0x0340(0x0050)(BlueprintVisible, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<EDriverId, TSoftObjectPtr<class UTexture2D>> StickerTextureDriverId_TextureMap;             // 0x0390(0x0050)(BlueprintVisible, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                         _DecisionAnimTime;                                 // 0x03E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharaSelectWindow*                     _CharaSelectWidget;                                // 0x03E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URivalSelectCharaCutInWidget*           _CharaCutInWidget;                                 // 0x03F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URivalSelectCharaInfoWidget*            _CharaInfoWidget;                                  // 0x03F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URivalSelectNextRivalMarkWidget*        _NextRivalMarkWidget;                              // 0x0400(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URivalSelectBonusProgressWidget*        _BonusProgressWidget;                              // 0x0408(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonRivalLevelWidget*                _RivalLevelWidget;                                 // 0x0410(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            _WinInfoWidget;                                    // 0x0418(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionUITextBlock*                      _NumKnockdownCharaTextBlock;                       // 0x0420(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UButton*                                _RivalLevelDownButtonWidget;                       // 0x0428(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UButton*                                _RivalLevelUpButtonWidget;                         // 0x0430(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMenuInputRecieveObject*                _InputReceiver;                                    // 0x0438(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_440[0x20];                                     // 0x0440(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       RivalSelect_In;                                    // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       RivalSelect_Loop;                                  // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       RivalSelect_Out;                                   // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BeginGrandPrixBattleResult();
	void OnButtonFocused(int32 PlayerControllerIndex, int32 CharaIndex);
	void OnCanceled(int32 PlayerControllerIndex);
	void OnChangeControllerInputType(EAppControllerInputType BeforeType, EAppControllerInputType AfterType);
	void OnDecision(int32 PlayerControllerIndex, int32 CharaIndex);
	void OnLeftShoulderPressed(class UObject* Object);
	void OnLevelDownButtonClicked();
	void OnLevelUpButtonClicked();
	void OnRightShoulderPressed(class UObject* Object);
	void SetDebugFlags(const bool SetEnabled, const bool SetPlayRivalIconMax);
	void SetupBattleResult(const EDriverId RivalDriverId, uint8 InRivalLevel, uint8 InBaseRivalLevel, const TArray<uint8>& InSpeedClassTopKnockoutArray);

	uint8 GetBaseRivalLevel() const;
	void GetDriverData(const EDriverId DriverId, bool* bFind, struct FDriverData* DriverData) const;
	EDriverId GetFocusDriverId() const;
	TArray<uint8> GetRivalTopKnockdownLevelArray() const;
	EDriverId GetSelectedRivalDriverId() const;
	uint8 GetSelectedRivalLevel() const;
	bool IsDebugMode() const;
	bool IsDebugPlayAnimRivalIconIn() const;
	bool IsRivalLevelEnhanced() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RivalSelectWidget">();
	}
	static class URivalSelectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URivalSelectWidget>();
	}
};
static_assert(alignof(URivalSelectWidget) == 0x000008, "Wrong alignment on URivalSelectWidget");
static_assert(sizeof(URivalSelectWidget) == 0x000478, "Wrong size on URivalSelectWidget");
static_assert(offsetof(URivalSelectWidget, OnDecisionEvent) == 0x0002F0, "Member 'URivalSelectWidget::OnDecisionEvent' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, OnDecisionAnimFinishedEvent) == 0x000300, "Member 'URivalSelectWidget::OnDecisionAnimFinishedEvent' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, OnCanceledEvent) == 0x000310, "Member 'URivalSelectWidget::OnCanceledEvent' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, OnBattleResultFinishEvent) == 0x000320, "Member 'URivalSelectWidget::OnBattleResultFinishEvent' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, OnRivalIconInAnimFinishEvent) == 0x000330, "Member 'URivalSelectWidget::OnRivalIconInAnimFinishEvent' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, StickerTmbDriverId_TextureMap) == 0x000340, "Member 'URivalSelectWidget::StickerTmbDriverId_TextureMap' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, StickerTextureDriverId_TextureMap) == 0x000390, "Member 'URivalSelectWidget::StickerTextureDriverId_TextureMap' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, _DecisionAnimTime) == 0x0003E0, "Member 'URivalSelectWidget::_DecisionAnimTime' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, _CharaSelectWidget) == 0x0003E8, "Member 'URivalSelectWidget::_CharaSelectWidget' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, _CharaCutInWidget) == 0x0003F0, "Member 'URivalSelectWidget::_CharaCutInWidget' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, _CharaInfoWidget) == 0x0003F8, "Member 'URivalSelectWidget::_CharaInfoWidget' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, _NextRivalMarkWidget) == 0x000400, "Member 'URivalSelectWidget::_NextRivalMarkWidget' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, _BonusProgressWidget) == 0x000408, "Member 'URivalSelectWidget::_BonusProgressWidget' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, _RivalLevelWidget) == 0x000410, "Member 'URivalSelectWidget::_RivalLevelWidget' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, _WinInfoWidget) == 0x000418, "Member 'URivalSelectWidget::_WinInfoWidget' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, _NumKnockdownCharaTextBlock) == 0x000420, "Member 'URivalSelectWidget::_NumKnockdownCharaTextBlock' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, _RivalLevelDownButtonWidget) == 0x000428, "Member 'URivalSelectWidget::_RivalLevelDownButtonWidget' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, _RivalLevelUpButtonWidget) == 0x000430, "Member 'URivalSelectWidget::_RivalLevelUpButtonWidget' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, _InputReceiver) == 0x000438, "Member 'URivalSelectWidget::_InputReceiver' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, RivalSelect_In) == 0x000460, "Member 'URivalSelectWidget::RivalSelect_In' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, RivalSelect_Loop) == 0x000468, "Member 'URivalSelectWidget::RivalSelect_Loop' has a wrong offset!");
static_assert(offsetof(URivalSelectWidget, RivalSelect_Out) == 0x000470, "Member 'URivalSelectWidget::RivalSelect_Out' has a wrong offset!");

// Class UNION.RivalTeamSelectNameWidget
// 0x0030 (0x0310 - 0x02E0)
class URivalTeamSelectNameWidget : public UUserWidget
{
public:
	class UImage*                                 DMY_RivalTeamBase;                                 // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_TeamName;                                      // 0x02E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UTexture2D*>                     TextureTeam;                                       // 0x02F0(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class FText                                   TextSecrets;                                       // 0x0300(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RivalTeamSelectNameWidget">();
	}
	static class URivalTeamSelectNameWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URivalTeamSelectNameWidget>();
	}
};
static_assert(alignof(URivalTeamSelectNameWidget) == 0x000008, "Wrong alignment on URivalTeamSelectNameWidget");
static_assert(sizeof(URivalTeamSelectNameWidget) == 0x000310, "Wrong size on URivalTeamSelectNameWidget");
static_assert(offsetof(URivalTeamSelectNameWidget, DMY_RivalTeamBase) == 0x0002E0, "Member 'URivalTeamSelectNameWidget::DMY_RivalTeamBase' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectNameWidget, TXT_TeamName) == 0x0002E8, "Member 'URivalTeamSelectNameWidget::TXT_TeamName' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectNameWidget, TextureTeam) == 0x0002F0, "Member 'URivalTeamSelectNameWidget::TextureTeam' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectNameWidget, TextSecrets) == 0x000300, "Member 'URivalTeamSelectNameWidget::TextSecrets' has a wrong offset!");

// Class UNION.RivalTeamSelectWidget
// 0x00F8 (0x04D0 - 0x03D8)
class URivalTeamSelectWidget : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void()>              OnCloseDelegate;                                   // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher_Frame_TeamColor;                    // 0x03E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                Border_RivalTeam;                                  // 0x03F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_RivalTeamCut;                                  // 0x03F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DMY_RivalTeamMachine;                              // 0x0400(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URivalTeamSelectNameWidget*             WBP_PartyRace_RivalTeamName;                       // 0x0408(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonRivalLevelWidget*                WBP_CMN_RivalLevel;                                // 0x0410(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         HBRivalTeamIcon;                                   // 0x0418(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               DSP_Lock_Alpha;                                    // 0x0420(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                DSP_LoadingMachine;                                // 0x0428(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                DSP_LoadingChara;                                  // 0x0430(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                DSP_LoadingGadget;                                 // 0x0438(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                _GadgetPlateWidget;                                // 0x0440(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UTexture2D>>      TextureCharaCut;                                   // 0x0448(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UTexture2D>>      TextureTeamCut;                                    // 0x0458(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UTexture2D>>      TextureTeamMachine;                                // 0x0468(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UTexture2D>>      TextureIcon;                                       // 0x0478(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bEnableColorLock;                                  // 0x0488(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_489[0x3];                                      // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorLock;                                         // 0x048C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           ColorUnLock;                                       // 0x049C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableAlphaRom;                                   // 0x04AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4AD[0x3];                                      // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UTexture2D>>      _GadgetIconSoftTextures;                           // 0x04B0(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UUnionUIButtonsPanel*                   ButtonPanel;                                       // 0x04C0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C8[0x8];                                      // 0x04C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindSelectIcon(class URivalTeamSelectIconWidget* InSelectIcon);
	void Cancel();
	void InAnimationFinished();
	void OutAnimationFinished();
	void PlayAnimationIn();
	void PlayAnimationLoop();
	void PlayAnimationOut();
	void SetGadgetVisibilityForGadgetChanged(const TArray<TSoftObjectPtr<class UTexture2D>>& GadgetIconSoftTextures);
	void SetLevel(ERivalTeamId InTeamID, bool bPlayInitAnim);
	void SetupScreen(ERivalTeamId InTeamID);
	void UnbindSelectIcon(class URivalTeamSelectIconWidget* InSelectIcon);

	bool IsLock(ERivalTeamId InTeamID) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RivalTeamSelectWidget">();
	}
	static class URivalTeamSelectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URivalTeamSelectWidget>();
	}
};
static_assert(alignof(URivalTeamSelectWidget) == 0x000008, "Wrong alignment on URivalTeamSelectWidget");
static_assert(sizeof(URivalTeamSelectWidget) == 0x0004D0, "Wrong size on URivalTeamSelectWidget");
static_assert(offsetof(URivalTeamSelectWidget, OnCloseDelegate) == 0x0003D8, "Member 'URivalTeamSelectWidget::OnCloseDelegate' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, WidgetSwitcher_Frame_TeamColor) == 0x0003E8, "Member 'URivalTeamSelectWidget::WidgetSwitcher_Frame_TeamColor' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, Border_RivalTeam) == 0x0003F0, "Member 'URivalTeamSelectWidget::Border_RivalTeam' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, DMY_RivalTeamCut) == 0x0003F8, "Member 'URivalTeamSelectWidget::DMY_RivalTeamCut' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, DMY_RivalTeamMachine) == 0x000400, "Member 'URivalTeamSelectWidget::DMY_RivalTeamMachine' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, WBP_PartyRace_RivalTeamName) == 0x000408, "Member 'URivalTeamSelectWidget::WBP_PartyRace_RivalTeamName' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, WBP_CMN_RivalLevel) == 0x000410, "Member 'URivalTeamSelectWidget::WBP_CMN_RivalLevel' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, HBRivalTeamIcon) == 0x000418, "Member 'URivalTeamSelectWidget::HBRivalTeamIcon' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, DSP_Lock_Alpha) == 0x000420, "Member 'URivalTeamSelectWidget::DSP_Lock_Alpha' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, DSP_LoadingMachine) == 0x000428, "Member 'URivalTeamSelectWidget::DSP_LoadingMachine' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, DSP_LoadingChara) == 0x000430, "Member 'URivalTeamSelectWidget::DSP_LoadingChara' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, DSP_LoadingGadget) == 0x000438, "Member 'URivalTeamSelectWidget::DSP_LoadingGadget' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, _GadgetPlateWidget) == 0x000440, "Member 'URivalTeamSelectWidget::_GadgetPlateWidget' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, TextureCharaCut) == 0x000448, "Member 'URivalTeamSelectWidget::TextureCharaCut' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, TextureTeamCut) == 0x000458, "Member 'URivalTeamSelectWidget::TextureTeamCut' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, TextureTeamMachine) == 0x000468, "Member 'URivalTeamSelectWidget::TextureTeamMachine' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, TextureIcon) == 0x000478, "Member 'URivalTeamSelectWidget::TextureIcon' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, bEnableColorLock) == 0x000488, "Member 'URivalTeamSelectWidget::bEnableColorLock' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, ColorLock) == 0x00048C, "Member 'URivalTeamSelectWidget::ColorLock' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, ColorUnLock) == 0x00049C, "Member 'URivalTeamSelectWidget::ColorUnLock' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, bEnableAlphaRom) == 0x0004AC, "Member 'URivalTeamSelectWidget::bEnableAlphaRom' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, _GadgetIconSoftTextures) == 0x0004B0, "Member 'URivalTeamSelectWidget::_GadgetIconSoftTextures' has a wrong offset!");
static_assert(offsetof(URivalTeamSelectWidget, ButtonPanel) == 0x0004C0, "Member 'URivalTeamSelectWidget::ButtonPanel' has a wrong offset!");

// Class UNION.SaveAndLoadPlayLogState
// 0x0048 (0x0180 - 0x0138)
class USaveAndLoadPlayLogState : public UMenuSequenceStateBase
{
public:
	uint8                                         Pad_138[0x48];                                     // 0x0138(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayLogLoadComplete(ESaveDataStatus Status);
	void OnPlayLogSaveComplete(ESaveDataStatus Status);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveAndLoadPlayLogState">();
	}
	static class USaveAndLoadPlayLogState* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveAndLoadPlayLogState>();
	}
};
static_assert(alignof(USaveAndLoadPlayLogState) == 0x000008, "Wrong alignment on USaveAndLoadPlayLogState");
static_assert(sizeof(USaveAndLoadPlayLogState) == 0x000180, "Wrong size on USaveAndLoadPlayLogState");

// Class UNION.SceneDriver
// 0x0260 (0x04F0 - 0x0290)
class ASceneDriver : public AActor
{
public:
	uint8                                         Pad_290[0x38];                                     // 0x0290(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	EDriverId                                     DriverId;                                          // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverPose                                   DriverPose;                                        // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESceneDriverAnimationMode                     AnimationMode;                                     // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRivalSkin;                                     // 0x02CB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDLC;                                              // 0x02CC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnAssetLoadedEvent;                                // 0x02D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UUnionSkeletalMeshComponent*            SkeletalMeshComponent;                             // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             DriverDataTable;                                   // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LipSyncAnimSequenceAsset;                          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSequenceAssets[0x17];                          // 0x0300(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCustomAttrAnimComponent*               CustomAttrAnimComponent;                           // 0x03B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMachineMaterialData                   DefaultSteeringWheelMaterial;                      // 0x03C0(0x00A8)(NativeAccessSpecifierPrivate)
	class UUnionAtomComponent*                    UnionAtomComponent;                                // 0x0468(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_470[0x80];                                     // 0x0470(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateDriver();
	bool IsValidAnimation(ESceneDriverAnimationId ID);
	void LoadDriver();
	bool LoadRivalLipSyncMotion(EDriverId ID, ERivalLipSyncType Type, EDriverId RivalId);
	void MontageBlendOut(class UAnimMontage* Montage, bool bInterrupted);
	void MontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OverrideAnimation(ESceneDriverAnimationId ID, bool bIsLooping);
	bool OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);
	void PlayAnimation(ESceneDriverAnimationId ID, bool bIsLooping);
	bool PlayAnimationByAsset(class UAnimationAsset* InAnimToPlay, bool bIsLooping, const float Position, const bool bWithPlayFacialSlot);
	void PlayAnimationWithVoiceAndLipSync(EAnimationVoiceLipSyncId ID);
	void PlayAnimMontage(class UAnimMontage* AnimMontage, const bool bIsLooping, const float Position);
	void PlayRivalAnimationAndLipSync(EPerformRivalInteractionType InteractionType);
	void SetDriverPose(const EDriverPose& DriverPose_0);
	void SetSteeringWheelMaterials(const struct FUserMachineCustomizeData& MachineCustomizeData);
	void SetSteeringWheelVisibility(bool IsVisible);
	void StopAnimation();

	EDriverPose GetDriverPose() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SceneDriver">();
	}
	static class ASceneDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASceneDriver>();
	}
};
static_assert(alignof(ASceneDriver) == 0x000008, "Wrong alignment on ASceneDriver");
static_assert(sizeof(ASceneDriver) == 0x0004F0, "Wrong size on ASceneDriver");
static_assert(offsetof(ASceneDriver, DriverId) == 0x0002C8, "Member 'ASceneDriver::DriverId' has a wrong offset!");
static_assert(offsetof(ASceneDriver, DriverPose) == 0x0002C9, "Member 'ASceneDriver::DriverPose' has a wrong offset!");
static_assert(offsetof(ASceneDriver, AnimationMode) == 0x0002CA, "Member 'ASceneDriver::AnimationMode' has a wrong offset!");
static_assert(offsetof(ASceneDriver, bUseRivalSkin) == 0x0002CB, "Member 'ASceneDriver::bUseRivalSkin' has a wrong offset!");
static_assert(offsetof(ASceneDriver, bDLC) == 0x0002CC, "Member 'ASceneDriver::bDLC' has a wrong offset!");
static_assert(offsetof(ASceneDriver, OnAssetLoadedEvent) == 0x0002D0, "Member 'ASceneDriver::OnAssetLoadedEvent' has a wrong offset!");
static_assert(offsetof(ASceneDriver, SkeletalMeshComponent) == 0x0002E0, "Member 'ASceneDriver::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ASceneDriver, StaticMeshComponent) == 0x0002E8, "Member 'ASceneDriver::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(ASceneDriver, DriverDataTable) == 0x0002F0, "Member 'ASceneDriver::DriverDataTable' has a wrong offset!");
static_assert(offsetof(ASceneDriver, LipSyncAnimSequenceAsset) == 0x0002F8, "Member 'ASceneDriver::LipSyncAnimSequenceAsset' has a wrong offset!");
static_assert(offsetof(ASceneDriver, AnimSequenceAssets) == 0x000300, "Member 'ASceneDriver::AnimSequenceAssets' has a wrong offset!");
static_assert(offsetof(ASceneDriver, CustomAttrAnimComponent) == 0x0003B8, "Member 'ASceneDriver::CustomAttrAnimComponent' has a wrong offset!");
static_assert(offsetof(ASceneDriver, DefaultSteeringWheelMaterial) == 0x0003C0, "Member 'ASceneDriver::DefaultSteeringWheelMaterial' has a wrong offset!");
static_assert(offsetof(ASceneDriver, UnionAtomComponent) == 0x000468, "Member 'ASceneDriver::UnionAtomComponent' has a wrong offset!");

// Class UNION.SceneDriverAnimator
// 0x0000 (0x0000 - 0x0000)
class ISceneDriverAnimator final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SceneDriverAnimator">();
	}
	static class ISceneDriverAnimator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISceneDriverAnimator>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ISceneDriverAnimator) == 0x000001, "Wrong alignment on ISceneDriverAnimator");
static_assert(sizeof(ISceneDriverAnimator) == 0x000001, "Wrong size on ISceneDriverAnimator");

// Class UNION.SimpleNPCSkeletalActor
// 0x02C0 (0x05E0 - 0x0320)
class ASimpleNPCSkeletalActor : public AVehicleBaseActor
{
public:
	uint8                                         Pad_320[0xC8];                                     // 0x0320(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionSkeletalMeshComponent*            MachineMeshComponent;                              // 0x03E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           MachineSkeletalMesh;                               // 0x03F0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     TireMarkMaterialInterface;                         // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMachineSurfaceEffectComponent*> MachineSurfaceEffectComponents;                    // 0x0420(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMachineSurfaceEffectComponent*         BodyCutSurfaceEffectComponent;                     // 0x0430(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTireMark*>                      TireMarkComponents;                                // 0x0438(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDataTable*                             SimpleNpcDataTable;                                // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_450[0x190];                                    // 0x0450(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MontageJumpToSection(class FName SectionName);
	void MontagePlay(EMachineAnimationMontageAssetId AssetId, float PlayRate);
	void MontageStop(EMachineAnimationMontageAssetId AssetId, float InBlendOutTime);
	void SetMachineMesh(ECarStatusType InCarStatusType, EDriverSize InDriverSize, bool bIsEnabledAnimation);
	void SetupEffectData(const EMachineId MachineId);
	void SetupEngineSound(const EMachineId MachineId);
	void SetupPresetColor(const EMachineId MachineId);
	void SetupSurfaceEffect();
	void SetupTireMarkEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleNPCSkeletalActor">();
	}
	static class ASimpleNPCSkeletalActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASimpleNPCSkeletalActor>();
	}
};
static_assert(alignof(ASimpleNPCSkeletalActor) == 0x000008, "Wrong alignment on ASimpleNPCSkeletalActor");
static_assert(sizeof(ASimpleNPCSkeletalActor) == 0x0005E0, "Wrong size on ASimpleNPCSkeletalActor");
static_assert(offsetof(ASimpleNPCSkeletalActor, MachineMeshComponent) == 0x0003E8, "Member 'ASimpleNPCSkeletalActor::MachineMeshComponent' has a wrong offset!");
static_assert(offsetof(ASimpleNPCSkeletalActor, MachineSkeletalMesh) == 0x0003F0, "Member 'ASimpleNPCSkeletalActor::MachineSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ASimpleNPCSkeletalActor, TireMarkMaterialInterface) == 0x000418, "Member 'ASimpleNPCSkeletalActor::TireMarkMaterialInterface' has a wrong offset!");
static_assert(offsetof(ASimpleNPCSkeletalActor, MachineSurfaceEffectComponents) == 0x000420, "Member 'ASimpleNPCSkeletalActor::MachineSurfaceEffectComponents' has a wrong offset!");
static_assert(offsetof(ASimpleNPCSkeletalActor, BodyCutSurfaceEffectComponent) == 0x000430, "Member 'ASimpleNPCSkeletalActor::BodyCutSurfaceEffectComponent' has a wrong offset!");
static_assert(offsetof(ASimpleNPCSkeletalActor, TireMarkComponents) == 0x000438, "Member 'ASimpleNPCSkeletalActor::TireMarkComponents' has a wrong offset!");
static_assert(offsetof(ASimpleNPCSkeletalActor, SimpleNpcDataTable) == 0x000448, "Member 'ASimpleNPCSkeletalActor::SimpleNpcDataTable' has a wrong offset!");

// Class UNION.SplitScreenUtility
// 0x0000 (0x0028 - 0x0028)
class USplitScreenUtility final : public UBlueprintFunctionLibrary
{
public:
	static EUnionSplitScreenType GetCurrentSplitscreenConfiguration();
	static struct FVector2D GetViewportSize();
	static void SetSplitscreen(const bool bDisabled);
	static void SetSplitSizeAndLocation(const EUnionSplitScreenType& SplitType, const int32 Index_0, const float SizeX, const float SizeY, const float OriginX, const float OriginY);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplitScreenUtility">();
	}
	static class USplitScreenUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplitScreenUtility>();
	}
};
static_assert(alignof(USplitScreenUtility) == 0x000008, "Wrong alignment on USplitScreenUtility");
static_assert(sizeof(USplitScreenUtility) == 0x000028, "Wrong size on USplitScreenUtility");

// Class UNION.SquadLobbyControlComponent
// 0x0080 (0x0190 - 0x0110)
class USquadLobbyControlComponent final : public UNetLobbyControlComponent
{
public:
	TSubclassOf<class USquadContext>              SquadContextClass;                                 // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EMatchingLobbyType, TSubclassOf<class UNetLobbyControlComponent>> OnlineNetLobbyControls;   // 0x0118(0x0050)(Edit, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_168[0x28];                                     // 0x0168(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void JoinSquadByInviteInfo();
	void JoinSquadByInviteInfo_Callback(TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);
	void JoinSquadBySearchLobbyId();
	void JoinSquadBySearchLobbyId_Callback(TDelegate<void(bool bSuccessful, const struct FLobbyOperationResult& Result)> OnComplete);
	void OnCheckInvitation();
	void OnCompleteJoinSquad(bool bSuccessful, const struct FLobbyOperationResult& Result);

	void CheckHasPlanningToJoinLobby(bool* bHasAcceptInvite, bool* bHasSearchLobbyId, bool* bShouldQuitLobby) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SquadLobbyControlComponent">();
	}
	static class USquadLobbyControlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USquadLobbyControlComponent>();
	}
};
static_assert(alignof(USquadLobbyControlComponent) == 0x000008, "Wrong alignment on USquadLobbyControlComponent");
static_assert(sizeof(USquadLobbyControlComponent) == 0x000190, "Wrong size on USquadLobbyControlComponent");
static_assert(offsetof(USquadLobbyControlComponent, SquadContextClass) == 0x000110, "Member 'USquadLobbyControlComponent::SquadContextClass' has a wrong offset!");
static_assert(offsetof(USquadLobbyControlComponent, OnlineNetLobbyControls) == 0x000118, "Member 'USquadLobbyControlComponent::OnlineNetLobbyControls' has a wrong offset!");

// Class UNION.StaffrollBackgroundController
// 0x0030 (0x0058 - 0x0028)
class UStaffrollBackgroundController final : public UObject
{
public:
	class UDataTable*                             _ScreenDataTable;                                  // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaffrollBackgroundWidget*             _BackgroundWidget;                                 // 0x0030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnionManaPlayer*                       _OboCuboManaPlayer;                                // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOboCuboMovieEndReached();
	void OnOboCuboMovieEventPoint(const struct FManaEventPointInfo& EventPointInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollBackgroundController">();
	}
	static class UStaffrollBackgroundController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollBackgroundController>();
	}
};
static_assert(alignof(UStaffrollBackgroundController) == 0x000008, "Wrong alignment on UStaffrollBackgroundController");
static_assert(sizeof(UStaffrollBackgroundController) == 0x000058, "Wrong size on UStaffrollBackgroundController");
static_assert(offsetof(UStaffrollBackgroundController, _ScreenDataTable) == 0x000028, "Member 'UStaffrollBackgroundController::_ScreenDataTable' has a wrong offset!");
static_assert(offsetof(UStaffrollBackgroundController, _BackgroundWidget) == 0x000030, "Member 'UStaffrollBackgroundController::_BackgroundWidget' has a wrong offset!");
static_assert(offsetof(UStaffrollBackgroundController, _OboCuboManaPlayer) == 0x000038, "Member 'UStaffrollBackgroundController::_OboCuboManaPlayer' has a wrong offset!");

// Class UNION.StaffrollBackgroundWidget
// 0x0030 (0x0320 - 0x02F0)
class UStaffrollBackgroundWidget final : public UCommonUserWidget
{
public:
	class UImage*                                 _OboCuboImage;                                     // 0x02F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UImage*>                         _ScreenImages;                                     // 0x02F8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       ClossFade_InLoopOut;                               // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       BG_Out;                                            // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollBackgroundWidget">();
	}
	static class UStaffrollBackgroundWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollBackgroundWidget>();
	}
};
static_assert(alignof(UStaffrollBackgroundWidget) == 0x000008, "Wrong alignment on UStaffrollBackgroundWidget");
static_assert(sizeof(UStaffrollBackgroundWidget) == 0x000320, "Wrong size on UStaffrollBackgroundWidget");
static_assert(offsetof(UStaffrollBackgroundWidget, _OboCuboImage) == 0x0002F0, "Member 'UStaffrollBackgroundWidget::_OboCuboImage' has a wrong offset!");
static_assert(offsetof(UStaffrollBackgroundWidget, _ScreenImages) == 0x0002F8, "Member 'UStaffrollBackgroundWidget::_ScreenImages' has a wrong offset!");
static_assert(offsetof(UStaffrollBackgroundWidget, ClossFade_InLoopOut) == 0x000310, "Member 'UStaffrollBackgroundWidget::ClossFade_InLoopOut' has a wrong offset!");
static_assert(offsetof(UStaffrollBackgroundWidget, BG_Out) == 0x000318, "Member 'UStaffrollBackgroundWidget::BG_Out' has a wrong offset!");

// Class UNION.StaffrollComponent
// 0x0190 (0x0230 - 0x00A0)
class UStaffrollComponent final : public UActorComponent
{
public:
	TSoftClassPtr<class UClass>                   _TextHolderWidgetClassSoftPtr;                     // 0x00A0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<EStaffrollTextWidgetId, TSoftClassPtr<class UClass>> _TextWidgetClassSoftPtrs;              // 0x00C8(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSoftObjectPtr<class UTexture2D>>      _SegaLogoTextureSoftPtrs;                          // 0x0118(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	float                                         _ScrollTimeSeconds;                                // 0x0128(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _LastWaitTimeSeconds;                              // 0x012C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<EStaffrollVariationId, TSoftObjectPtr<class UDataTable>> _BackgroundScreenDataTableSoftPtrs; // 0x0130(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   _BackgroundWidgetClassSoftPtr;                     // 0x0180(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     _ManaMaterialForPrime;                             // 0x01A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     _ManaMaterialForVp9;                               // 0x01B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UManaTexture*                           _ManaTexture;                                      // 0x01B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C0[0x10];                                     // 0x01C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             _TextDataTable;                                    // 0x01D0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaffrollTextController*               _TextController;                                   // 0x01D8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaffrollBackgroundController*         _BackgroundController;                             // 0x01E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UObject*>                        _LoadedAssets;                                     // 0x01E8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F8[0x38];                                     // 0x01F8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFadeEnd(EUnionUIFadeDirection Direction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollComponent">();
	}
	static class UStaffrollComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollComponent>();
	}
};
static_assert(alignof(UStaffrollComponent) == 0x000008, "Wrong alignment on UStaffrollComponent");
static_assert(sizeof(UStaffrollComponent) == 0x000230, "Wrong size on UStaffrollComponent");
static_assert(offsetof(UStaffrollComponent, _TextHolderWidgetClassSoftPtr) == 0x0000A0, "Member 'UStaffrollComponent::_TextHolderWidgetClassSoftPtr' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _TextWidgetClassSoftPtrs) == 0x0000C8, "Member 'UStaffrollComponent::_TextWidgetClassSoftPtrs' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _SegaLogoTextureSoftPtrs) == 0x000118, "Member 'UStaffrollComponent::_SegaLogoTextureSoftPtrs' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _ScrollTimeSeconds) == 0x000128, "Member 'UStaffrollComponent::_ScrollTimeSeconds' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _LastWaitTimeSeconds) == 0x00012C, "Member 'UStaffrollComponent::_LastWaitTimeSeconds' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _BackgroundScreenDataTableSoftPtrs) == 0x000130, "Member 'UStaffrollComponent::_BackgroundScreenDataTableSoftPtrs' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _BackgroundWidgetClassSoftPtr) == 0x000180, "Member 'UStaffrollComponent::_BackgroundWidgetClassSoftPtr' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _ManaMaterialForPrime) == 0x0001A8, "Member 'UStaffrollComponent::_ManaMaterialForPrime' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _ManaMaterialForVp9) == 0x0001B0, "Member 'UStaffrollComponent::_ManaMaterialForVp9' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _ManaTexture) == 0x0001B8, "Member 'UStaffrollComponent::_ManaTexture' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _TextDataTable) == 0x0001D0, "Member 'UStaffrollComponent::_TextDataTable' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _TextController) == 0x0001D8, "Member 'UStaffrollComponent::_TextController' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _BackgroundController) == 0x0001E0, "Member 'UStaffrollComponent::_BackgroundController' has a wrong offset!");
static_assert(offsetof(UStaffrollComponent, _LoadedAssets) == 0x0001E8, "Member 'UStaffrollComponent::_LoadedAssets' has a wrong offset!");

// Class UNION.StaffrollTextWidgetPoolWrapper
// 0x0010 (0x0038 - 0x0028)
class UStaffrollTextWidgetPoolWrapper final : public UObject
{
public:
	TArray<class UStaffrollTextWidget*>           Value;                                             // 0x0028(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollTextWidgetPoolWrapper">();
	}
	static class UStaffrollTextWidgetPoolWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollTextWidgetPoolWrapper>();
	}
};
static_assert(alignof(UStaffrollTextWidgetPoolWrapper) == 0x000008, "Wrong alignment on UStaffrollTextWidgetPoolWrapper");
static_assert(sizeof(UStaffrollTextWidgetPoolWrapper) == 0x000038, "Wrong size on UStaffrollTextWidgetPoolWrapper");
static_assert(offsetof(UStaffrollTextWidgetPoolWrapper, Value) == 0x000028, "Member 'UStaffrollTextWidgetPoolWrapper::Value' has a wrong offset!");

// Class UNION.StaffrollTextController
// 0x0088 (0x00B0 - 0x0028)
class UStaffrollTextController final : public UObject
{
public:
	class UDataTable*                             _TextDataTable;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture2D*                             _SegaLogoTexture;                                  // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaffrollTextHolderWidget*             _TextHolderWidget;                                 // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<EStaffrollTextWidgetId, class UStaffrollTextWidgetPoolWrapper*> _TextWidgetPools;           // 0x0040(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UStaffrollTextWidget*>           _ActiveTextWidgets;                                // 0x0090(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollTextController">();
	}
	static class UStaffrollTextController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollTextController>();
	}
};
static_assert(alignof(UStaffrollTextController) == 0x000008, "Wrong alignment on UStaffrollTextController");
static_assert(sizeof(UStaffrollTextController) == 0x0000B0, "Wrong size on UStaffrollTextController");
static_assert(offsetof(UStaffrollTextController, _TextDataTable) == 0x000028, "Member 'UStaffrollTextController::_TextDataTable' has a wrong offset!");
static_assert(offsetof(UStaffrollTextController, _SegaLogoTexture) == 0x000030, "Member 'UStaffrollTextController::_SegaLogoTexture' has a wrong offset!");
static_assert(offsetof(UStaffrollTextController, _TextHolderWidget) == 0x000038, "Member 'UStaffrollTextController::_TextHolderWidget' has a wrong offset!");
static_assert(offsetof(UStaffrollTextController, _TextWidgetPools) == 0x000040, "Member 'UStaffrollTextController::_TextWidgetPools' has a wrong offset!");
static_assert(offsetof(UStaffrollTextController, _ActiveTextWidgets) == 0x000090, "Member 'UStaffrollTextController::_ActiveTextWidgets' has a wrong offset!");

// Class UNION.StaffrollPrimaryTextWidget
// 0x0020 (0x0308 - 0x02E8)
class UStaffrollPrimaryTextWidget final : public UStaffrollTextWidget
{
public:
	TArray<class UUnionRichTextBlock*>            _TextWidgets;                                      // 0x02E8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F8[0x10];                                     // 0x02F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollPrimaryTextWidget">();
	}
	static class UStaffrollPrimaryTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollPrimaryTextWidget>();
	}
};
static_assert(alignof(UStaffrollPrimaryTextWidget) == 0x000008, "Wrong alignment on UStaffrollPrimaryTextWidget");
static_assert(sizeof(UStaffrollPrimaryTextWidget) == 0x000308, "Wrong size on UStaffrollPrimaryTextWidget");
static_assert(offsetof(UStaffrollPrimaryTextWidget, _TextWidgets) == 0x0002E8, "Member 'UStaffrollPrimaryTextWidget::_TextWidgets' has a wrong offset!");

// Class UNION.StaffrollSecondaryTextWidget
// 0x0018 (0x0300 - 0x02E8)
class UStaffrollSecondaryTextWidget final : public UStaffrollTextWidget
{
public:
	TArray<class UUnionRichTextBlock*>            _TextWidgets;                                      // 0x02E8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaffrollSecondaryTextWidget">();
	}
	static class UStaffrollSecondaryTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaffrollSecondaryTextWidget>();
	}
};
static_assert(alignof(UStaffrollSecondaryTextWidget) == 0x000008, "Wrong alignment on UStaffrollSecondaryTextWidget");
static_assert(sizeof(UStaffrollSecondaryTextWidget) == 0x000300, "Wrong size on UStaffrollSecondaryTextWidget");
static_assert(offsetof(UStaffrollSecondaryTextWidget, _TextWidgets) == 0x0002E8, "Member 'UStaffrollSecondaryTextWidget::_TextWidgets' has a wrong offset!");

// Class UNION.StageLevelUnloader
// 0x0028 (0x02B8 - 0x0290)
class AStageLevelUnloader final : public AActor
{
public:
	uint8                                         Pad_290[0x28];                                     // 0x0290(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StageLevelUnloader">();
	}
	static class AStageLevelUnloader* GetDefaultObj()
	{
		return GetDefaultObjImpl<AStageLevelUnloader>();
	}
};
static_assert(alignof(AStageLevelUnloader) == 0x000008, "Wrong alignment on AStageLevelUnloader");
static_assert(sizeof(AStageLevelUnloader) == 0x0002B8, "Wrong size on AStageLevelUnloader");

// Class UNION.StageUnlockInfoDataAsset
// 0x0010 (0x0040 - 0x0030)
class UStageUnlockInfoDataAsset final : public UDataAsset
{
public:
	TArray<struct FStageUnlockInfoStruct>         StageInfoArray;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	bool CheckStageDLC(EStageId StageId, EContentId* DLCContent);
	bool CheckStageUnreleased(EStageId StageId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StageUnlockInfoDataAsset">();
	}
	static class UStageUnlockInfoDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStageUnlockInfoDataAsset>();
	}
};
static_assert(alignof(UStageUnlockInfoDataAsset) == 0x000008, "Wrong alignment on UStageUnlockInfoDataAsset");
static_assert(sizeof(UStageUnlockInfoDataAsset) == 0x000040, "Wrong size on UStageUnlockInfoDataAsset");
static_assert(offsetof(UStageUnlockInfoDataAsset, StageInfoArray) == 0x000030, "Member 'UStageUnlockInfoDataAsset::StageInfoArray' has a wrong offset!");

// Class UNION.StatusInfoPlayerDetail
// 0x0020 (0x0300 - 0x02E0)
class UStatusInfoPlayerDetail : public UUserWidget
{
public:
	TMulticastInlineDelegate<void()>              OnOpend;                                           // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnClosed;                                          // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void Close();
	void MakeGadgetPlateUIData(const struct FRankingDataUserNoteGadget& RankingDataUserNoteGadget, struct FGadgetPlateUIData* outGadgetPlateUIData);
	void OnOpenError();
	void OnShowPfProfileErrorWindowEnd();
	void Open();
	void RequestPFProfileDisplay(const class FString& InPlatformUserId);
	void SetupDetailData(int32 DriverId, const struct FRankingDataUserNoteCarParts& CarPartsNote, const struct FRankingDataUserNoteGadget& GadgetNote);
	void SetupPFProfile(int32 RankRate);
	void SetupPlayerData(const class FString& playerName, int32 HonorTitleId, ECrossplayPlatform CrossplayPlatform);
	void SetupRankIcon(int32 RankRate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StatusInfoPlayerDetail">();
	}
	static class UStatusInfoPlayerDetail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStatusInfoPlayerDetail>();
	}
};
static_assert(alignof(UStatusInfoPlayerDetail) == 0x000008, "Wrong alignment on UStatusInfoPlayerDetail");
static_assert(sizeof(UStatusInfoPlayerDetail) == 0x000300, "Wrong size on UStatusInfoPlayerDetail");
static_assert(offsetof(UStatusInfoPlayerDetail, OnOpend) == 0x0002E0, "Member 'UStatusInfoPlayerDetail::OnOpend' has a wrong offset!");
static_assert(offsetof(UStatusInfoPlayerDetail, OnClosed) == 0x0002F0, "Member 'UStatusInfoPlayerDetail::OnClosed' has a wrong offset!");

// Class UNION.StickerBakeManagerSubsystem
// 0x0100 (0x0130 - 0x0030)
class UStickerBakeManagerSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UTexture*>                  FrontStickerMap;                                   // 0x0038(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<int32, class UTexture*>                  RearStickerMap;                                    // 0x0088(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x10];                                      // 0x00D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AUnionStickerBaker*>             BakerList;                                         // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FBakeRequestData>               RequestQueue;                                      // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x28];                                     // 0x0108(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Finalize();
	class UTexture* GetFrontStickerTextureFromRacerIndex(int32 RacerIndex);
	class UTexture* GetRearStickerTextureFromRacerIndex(int32 RacerIndex);
	void RegisterFrontStickerMap(int32 RacerIndex, class UTexture* StickerTexture);
	void RegisterRearStickerMap(int32 RacerIndex, class UTexture* StickerTexture);
	void Setup();
	class UStickerBakerHandle* StartBake(const TArray<struct FUserStickerData>& StickerArray, const int32 InSize, const bool IsAlphaReverse, bool IsRear, bool IsInRace);
	void SweepUnusedRenderTargets();

	class AUnionStickerBaker* GetBaker(const class UStickerBakerHandle* Handle) const;
	bool IsBakingComplete(const class UStickerBakerHandle* Handle) const;
	bool IsUserStickerDataEmpty(const TArray<struct FUserStickerData>& StickerArray) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StickerBakeManagerSubsystem">();
	}
	static class UStickerBakeManagerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStickerBakeManagerSubsystem>();
	}
};
static_assert(alignof(UStickerBakeManagerSubsystem) == 0x000008, "Wrong alignment on UStickerBakeManagerSubsystem");
static_assert(sizeof(UStickerBakeManagerSubsystem) == 0x000130, "Wrong size on UStickerBakeManagerSubsystem");
static_assert(offsetof(UStickerBakeManagerSubsystem, FrontStickerMap) == 0x000038, "Member 'UStickerBakeManagerSubsystem::FrontStickerMap' has a wrong offset!");
static_assert(offsetof(UStickerBakeManagerSubsystem, RearStickerMap) == 0x000088, "Member 'UStickerBakeManagerSubsystem::RearStickerMap' has a wrong offset!");
static_assert(offsetof(UStickerBakeManagerSubsystem, BakerList) == 0x0000E8, "Member 'UStickerBakeManagerSubsystem::BakerList' has a wrong offset!");
static_assert(offsetof(UStickerBakeManagerSubsystem, RequestQueue) == 0x0000F8, "Member 'UStickerBakeManagerSubsystem::RequestQueue' has a wrong offset!");

// Class UNION.StreamingInstallNotice
// 0x0000 (0x02E0 - 0x02E0)
class UStreamingInstallNotice final : public UUserWidget
{
public:
	void PlayNoticeAnimation(bool Display);
	void SetupDeviceDisconnected();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StreamingInstallNotice">();
	}
	static class UStreamingInstallNotice* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStreamingInstallNotice>();
	}
};
static_assert(alignof(UStreamingInstallNotice) == 0x000008, "Wrong alignment on UStreamingInstallNotice");
static_assert(sizeof(UStreamingInstallNotice) == 0x0002E0, "Wrong size on UStreamingInstallNotice");

// Class UNION.TemporaryMenuSequence
// 0x0000 (0x0368 - 0x0368)
class ATemporaryMenuSequence final : public AHierarchicalStateMachine
{
public:
	void OnInitStateExit();
	void OnInitStateIdle();
	void SetNextMenuSequenceState(EMenuSequenceMainState InState);
	void SetNextSubMenuSequenceState(EMenuSequenceSubState InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TemporaryMenuSequence">();
	}
	static class ATemporaryMenuSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATemporaryMenuSequence>();
	}
};
static_assert(alignof(ATemporaryMenuSequence) == 0x000008, "Wrong alignment on ATemporaryMenuSequence");
static_assert(sizeof(ATemporaryMenuSequence) == 0x000368, "Wrong size on ATemporaryMenuSequence");

// Class UNION.TimeTrialRankingState
// 0x0000 (0x0128 - 0x0128)
class UTimeTrialRankingState : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeTrialRankingState">();
	}
	static class UTimeTrialRankingState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeTrialRankingState>();
	}
};
static_assert(alignof(UTimeTrialRankingState) == 0x000008, "Wrong alignment on UTimeTrialRankingState");
static_assert(sizeof(UTimeTrialRankingState) == 0x000128, "Wrong size on UTimeTrialRankingState");

// Class UNION.TimeTrialUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UTimeTrialUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 CalcTotalClassTimeTrialMedalMax();
	static int32 CalcTotalTimeTrialMedalAcquisitionPerClass(ESpeedClassId InSpeedClass);
	static int32 CalcTotalTimeTrialMedalCount();
	static int32 CalcTotalTimeTrialMedalMax();
	static class FText ConvertClockCountToLapTimeText(const int32 InClockCount);
	static bool FindAllWithoutGhostUpload(TArray<EStageId>* OutSonicSpeedList, TArray<EStageId>* OutSuperSonicSpeedList);
	static TArray<EStageId> FindStagesWithoutGhostUpload(const ESpeedClassId InSpeedClassId);
	static class UTexture2D* GetCharacterIconTexture(const EDriverId InDriverId);
	static int32 GetClassExtndTimeTrialMedalMax();
	static int32 GetClassTimeTrialMedalMax();
	static TArray<EStageId> GetCrossWorldStages();
	static TArray<EStageId> GetExthdStages();
	static TArray<EStageId> GetMainStages();
	static class FString GetPlatformUserId();
	static int32 GetTimeTrialMedalAcquisitionPerClass(ESpeedClassId InSpeedClass, bool bIsExtnd);
	static TArray<bool> GetTimeTrialMedalAcquisitionPerCrossWorld(ESpeedClassId InSpeedClass, TArray<ETimeTrialClearRankId>* OutTimeTrialRanks);
	static TArray<bool> GetTimeTrialMedalAcquisitionPerGrandPrix(ESpeedClassId InSpeedClass, const EGrandPrixId InGrandprixId, TArray<ETimeTrialClearRankId>* OutTimeTrialRanks);
	static bool GetTimeTrialMedalAcquisitionPerStage(ESpeedClassId InSpeedClass, const EStageId InStageId);
	static int32 GetTimeTrialMedalCountCrossWorld(ESpeedClassId InSpeedClass, int32* OutSRankCount);
	static int32 GetTimeTrialMedalCountMainStage(ESpeedClassId InSpeedClass, int32* OutSRankCount);
	static ETimeTrialWinLoseDispId GetTimeTrialWinLoseId(ESpeedClassId InSpeedClass, EStageId InStageId, bool bGhostOnline);
	static int32 GetTotalExtndTimeTrialMedalCount();
	static int32 GetTotalExtndTimeTrialMedalMax();
	static int32 GetTotalTimeTrialMedalCount();
	static int32 GetTotalTimeTrialMedalMax();
	static bool IsStageIdActive(const EStageId InStageId);
	static bool IsStageIdIndexActive(const int32 Index_0);
	static bool IsTimeTrialMedalComplete(ESpeedClassId InSpeedClass);
	static class FText LapTimeText(const int32 InMillimeterSecondTime);
	static void SetPlatformUserId(const class FString& InPlatformUserId);
	static void SetTimeTrialMedalAcquisitionPerStage(ESpeedClassId InSpeedClass, const EStageId InStageId, bool bInAcquisition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeTrialUtilityLibrary">();
	}
	static class UTimeTrialUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeTrialUtilityLibrary>();
	}
};
static_assert(alignof(UTimeTrialUtilityLibrary) == 0x000008, "Wrong alignment on UTimeTrialUtilityLibrary");
static_assert(sizeof(UTimeTrialUtilityLibrary) == 0x000028, "Wrong size on UTimeTrialUtilityLibrary");

// Class UNION.TitleScene
// 0x0028 (0x0400 - 0x03D8)
class UTitleScene : public UUnionUISceneBase
{
public:
	class UWidgetAnimation*                       Window_In;                                         // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Window_Loop;                                       // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Window_Out;                                        // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F0[0x10];                                     // 0x03F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetVersion();
	void InitializeTitle();
	void PlayAnimationIn();
	void PlayAnimationLoop();
	void PlayAnimationOut();
	void PressedLicenseButton();
	void PressedTitleAcceptButton();
	void SetDevInfoText(class UTextBlock* InVersionText, class UTextBlock* InEOSRelayControlText, class UTextBlock* InNetworkSettingText, class UTextBlock* InCRMInfoText, class UTextBlock* InMatchingSettingText);
	void SkipAuotSaveInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TitleScene">();
	}
	static class UTitleScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTitleScene>();
	}
};
static_assert(alignof(UTitleScene) == 0x000008, "Wrong alignment on UTitleScene");
static_assert(sizeof(UTitleScene) == 0x000400, "Wrong size on UTitleScene");
static_assert(offsetof(UTitleScene, Window_In) == 0x0003D8, "Member 'UTitleScene::Window_In' has a wrong offset!");
static_assert(offsetof(UTitleScene, Window_Loop) == 0x0003E0, "Member 'UTitleScene::Window_Loop' has a wrong offset!");
static_assert(offsetof(UTitleScene, Window_Out) == 0x0003E8, "Member 'UTitleScene::Window_Out' has a wrong offset!");

// Class UNION.TodayRecordState
// 0x0000 (0x0128 - 0x0128)
class UTodayRecordState final : public UMenuSequenceSubStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TodayRecordState">();
	}
	static class UTodayRecordState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTodayRecordState>();
	}
};
static_assert(alignof(UTodayRecordState) == 0x000008, "Wrong alignment on UTodayRecordState");
static_assert(sizeof(UTodayRecordState) == 0x000128, "Wrong size on UTodayRecordState");

// Class UNION.TopMenuGameModeMenu
// 0x0018 (0x02F8 - 0x02E0)
class UTopMenuGameModeMenu : public UUserWidget
{
public:
	TArray<class UTopMenuGameModeButton*>         ModeButtonArr;                                     // 0x02E0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UUnionUIButtonBase*                     BackFocusButton;                                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitializeGameModeMenu(const TArray<ETopMenuGameMode>& BeltButtonTypeArr, class UCommonMenuSubMenu* SubMenu);
	void SetupGameModeMenu();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TopMenuGameModeMenu">();
	}
	static class UTopMenuGameModeMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTopMenuGameModeMenu>();
	}
};
static_assert(alignof(UTopMenuGameModeMenu) == 0x000008, "Wrong alignment on UTopMenuGameModeMenu");
static_assert(sizeof(UTopMenuGameModeMenu) == 0x0002F8, "Wrong size on UTopMenuGameModeMenu");
static_assert(offsetof(UTopMenuGameModeMenu, ModeButtonArr) == 0x0002E0, "Member 'UTopMenuGameModeMenu::ModeButtonArr' has a wrong offset!");
static_assert(offsetof(UTopMenuGameModeMenu, BackFocusButton) == 0x0002F0, "Member 'UTopMenuGameModeMenu::BackFocusButton' has a wrong offset!");

// Class UNION.TopMenuPlayModeButton
// 0x0020 (0x04E8 - 0x04C8)
class UTopMenuPlayModeButton : public UCommonMenuButtonBase
{
public:
	ETopMenuPlayMode                              TopMenuPlayMode;                                   // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTopMenuPlayerNumButton*>        PlayerNumButtonArr;                                // 0x04D0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          FocusPlayerNum;                                    // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E1[0x7];                                      // 0x04E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializePlayerNum();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TopMenuPlayModeButton">();
	}
	static class UTopMenuPlayModeButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTopMenuPlayModeButton>();
	}
};
static_assert(alignof(UTopMenuPlayModeButton) == 0x000008, "Wrong alignment on UTopMenuPlayModeButton");
static_assert(sizeof(UTopMenuPlayModeButton) == 0x0004E8, "Wrong size on UTopMenuPlayModeButton");
static_assert(offsetof(UTopMenuPlayModeButton, TopMenuPlayMode) == 0x0004C8, "Member 'UTopMenuPlayModeButton::TopMenuPlayMode' has a wrong offset!");
static_assert(offsetof(UTopMenuPlayModeButton, PlayerNumButtonArr) == 0x0004D0, "Member 'UTopMenuPlayModeButton::PlayerNumButtonArr' has a wrong offset!");
static_assert(offsetof(UTopMenuPlayModeButton, FocusPlayerNum) == 0x0004E0, "Member 'UTopMenuPlayModeButton::FocusPlayerNum' has a wrong offset!");

// Class UNION.TopMenuSequence
// 0x00D0 (0x0438 - 0x0368)
class ATopMenuSequence : public AHierarchicalStateMachine
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnBackEvent;                                       // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ETopMenuPlayMode TopMenuPlayMode, ETopMenuGameMode TopMenuGameMode)> OnFinishedTopMenuEvent; // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSubclassOf<class UCharaMachineSelectStateBase> CharaMachineSelectComponentClass;                // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharaMachineSelectStateBase*           CharaMachineSelectComponent;                       // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGarageState>               GarageComponentClass;                              // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGarageState*                           GarageComponent;                                   // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNoticePopupState*                      NoticePopupStateComponent;                         // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UTopMenuScene>              UISceneClass;                                      // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTopMenuScene*                          UIScene;                                           // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCommonMenuSubMenu>         CommonMenuSubMenuClass;                            // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETopMenuSequenceState                         PrevSequenceState;                                 // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETopMenuPlayMode                              SelectedPlayMode;                                  // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETopMenuGameMode                              SelectedGameMode;                                  // 0x03D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D3[0x5];                                      // 0x03D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMenuInputRecieveObject*                MenuInputReceiveObject;                            // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuInputRecieveObject*                MenuButtonInputReceiveObject;                      // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FTransform>                     TransformMenuRacers;                               // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMenuRacerParameterDataAsset*           DefaultMenuRacerParameterDataAsset;                // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuRacerParameterDataAsset*           FestaMenuRacerParameterDataAsset;                  // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              RuleVisibility;                                    // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFullGameStoreDialogActor*              FullGameStorePopup;                                // 0x0410(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_418[0x10];                                     // 0x0418(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIPopupWindowBase*                ErrorPopupWindow;                                  // 0x0428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_430[0x8];                                      // 0x0430(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindMenuInputReceive();
	bool CheckLoggedinForDisplayNews();
	bool CreateLoggedinErrorPopupWindow(const class FText& InErrorTitle, const class FText& InErrorMessage);
	TArray<class AMenuRacerBase*> CreateMenuRacers();
	void DecisionStoreEvent(bool IsAccept);
	ETopMenuSequenceState GetCurrentTopMenuState();
	class UCommonMenuHeaderMenu* GetHeaderMenu();
	void GotoOnlineFromFriendList();
	void InitializeTransformMenuRacers();
	bool IsEnableNews();
	void OnErrorPopupWindowClose(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnExitStateNetworkErrorWindow();
	void OnExitStateSelectGameMode();
	void OnExitStateSelectPlayerNum();
	void OnExitStateSelectPlayMode();
	void OnExitStateTipsWindow();
	void OnFaceButtonLeftPressedTopMenu(class UObject* Object);
	void OnFaceButtonTopPressedTopMenu(class UObject* Object);
	void OnFinishNetworkErrorEvent();
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnInitStateNetworkErrorWindow();
	void OnInitStateSelectGameMode();
	void OnInitStateSelectPlayerNum();
	void OnInitStateSelectPlayMode();
	void OnInitStateStore();
	void OnInitStateTipsWindow();
	void OnInitStateTopMenuTop();
	void OnLeftStickButtonPressedTopMenu(class UObject* Object);
	void OnPlatformEvent(const struct FUnionPlatformEventInfo& EventInfo);
	void OnSpecialPressedTopMenu(class UObject* Object);
	void OnUpdateStateNetworkErrorWindow(float DeltaTime);
	void PreloadAssets();
	bool SelectPlayerNumApplet(int32 PlayerCount);
	void SetNewsUIVisibility(ESlateVisibility Visibility);
	void SetNextTopMenuSequenceState(ETopMenuSequenceState InState, ETopMenuSequenceState PrevState);
	void SetUpHeaderTopMenu();
	void UnBindMenuInputReceive();
	void XboxAddUserEndDelicate();
	void XboxControllerAssignEndDelicate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TopMenuSequence">();
	}
	static class ATopMenuSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATopMenuSequence>();
	}
};
static_assert(alignof(ATopMenuSequence) == 0x000008, "Wrong alignment on ATopMenuSequence");
static_assert(sizeof(ATopMenuSequence) == 0x000438, "Wrong size on ATopMenuSequence");
static_assert(offsetof(ATopMenuSequence, OnBackEvent) == 0x000370, "Member 'ATopMenuSequence::OnBackEvent' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, OnFinishedTopMenuEvent) == 0x000380, "Member 'ATopMenuSequence::OnFinishedTopMenuEvent' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, CharaMachineSelectComponentClass) == 0x000390, "Member 'ATopMenuSequence::CharaMachineSelectComponentClass' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, CharaMachineSelectComponent) == 0x000398, "Member 'ATopMenuSequence::CharaMachineSelectComponent' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, GarageComponentClass) == 0x0003A0, "Member 'ATopMenuSequence::GarageComponentClass' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, GarageComponent) == 0x0003A8, "Member 'ATopMenuSequence::GarageComponent' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, NoticePopupStateComponent) == 0x0003B0, "Member 'ATopMenuSequence::NoticePopupStateComponent' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, UISceneClass) == 0x0003B8, "Member 'ATopMenuSequence::UISceneClass' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, UIScene) == 0x0003C0, "Member 'ATopMenuSequence::UIScene' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, CommonMenuSubMenuClass) == 0x0003C8, "Member 'ATopMenuSequence::CommonMenuSubMenuClass' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, PrevSequenceState) == 0x0003D0, "Member 'ATopMenuSequence::PrevSequenceState' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, SelectedPlayMode) == 0x0003D1, "Member 'ATopMenuSequence::SelectedPlayMode' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, SelectedGameMode) == 0x0003D2, "Member 'ATopMenuSequence::SelectedGameMode' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, MenuInputReceiveObject) == 0x0003D8, "Member 'ATopMenuSequence::MenuInputReceiveObject' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, MenuButtonInputReceiveObject) == 0x0003E0, "Member 'ATopMenuSequence::MenuButtonInputReceiveObject' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, TransformMenuRacers) == 0x0003E8, "Member 'ATopMenuSequence::TransformMenuRacers' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, DefaultMenuRacerParameterDataAsset) == 0x0003F8, "Member 'ATopMenuSequence::DefaultMenuRacerParameterDataAsset' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, FestaMenuRacerParameterDataAsset) == 0x000400, "Member 'ATopMenuSequence::FestaMenuRacerParameterDataAsset' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, RuleVisibility) == 0x000408, "Member 'ATopMenuSequence::RuleVisibility' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, FullGameStorePopup) == 0x000410, "Member 'ATopMenuSequence::FullGameStorePopup' has a wrong offset!");
static_assert(offsetof(ATopMenuSequence, ErrorPopupWindow) == 0x000428, "Member 'ATopMenuSequence::ErrorPopupWindow' has a wrong offset!");

// Class UNION.TurntableComponent
// 0x0060 (0x0290 - 0x0230)
class UTurntableComponent final : public USceneComponent
{
public:
	class USoundAtomCue*                          TurnTableCue;                                      // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundHandle                           TurnTableSEHandle;                                 // 0x0238(0x0004)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsTurnTableSEPlayed;                               // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D[0xB];                                      // 0x023D(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             TurntableDataTable;                                // 0x0248(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x40];                                     // 0x0250(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddToRotation(double InVal);
	void OnExit();
	void SetRotation(const struct FTurntableData& InTurntableData, bool bInImmediateReflection);
	void SetRotationByTurntableDataId(ETurntableDataId InId, bool bInImmediateReflection);
	void SetRotationTime(float InRotationTime);

	const struct FTurntableData GetCurrentTurntableData() const;
	bool IsRotating() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TurntableComponent">();
	}
	static class UTurntableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTurntableComponent>();
	}
};
static_assert(alignof(UTurntableComponent) == 0x000010, "Wrong alignment on UTurntableComponent");
static_assert(sizeof(UTurntableComponent) == 0x000290, "Wrong size on UTurntableComponent");
static_assert(offsetof(UTurntableComponent, TurnTableCue) == 0x000230, "Member 'UTurntableComponent::TurnTableCue' has a wrong offset!");
static_assert(offsetof(UTurntableComponent, TurnTableSEHandle) == 0x000238, "Member 'UTurntableComponent::TurnTableSEHandle' has a wrong offset!");
static_assert(offsetof(UTurntableComponent, IsTurnTableSEPlayed) == 0x00023C, "Member 'UTurntableComponent::IsTurnTableSEPlayed' has a wrong offset!");
static_assert(offsetof(UTurntableComponent, TurntableDataTable) == 0x000248, "Member 'UTurntableComponent::TurntableDataTable' has a wrong offset!");

// Class UNION.UIUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UUIUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool IsCourseSelectDLCStoreEnabled();
	static bool IsDisplayChallengeNewIcon();
	static bool IsDisplayHonorTitletNewIcon();
	static bool IsDisplayJukeboxsNewIcon();
	static bool IsOpenMenuByConditions(bool NotStreamingInstall, bool IsOnlineMode, bool IsOnlineMenu, bool IsSinglePlayer, bool AlreadyGrandPrix1Play, bool IsClearAllGrandPrix, bool IsClearedEnding2, bool IsDisableOnlinePlayByParentalControls, EUnionRomVersion ReleaseVersion);
	static bool IsStoreEnabled(class UDataTable* StageStorePromotionDataTable, EStageId StageId);
	static bool IsStoreRequired(class UDataTable* StageStorePromotionDataTable, EStageId StageId);
	static void SetCustomRivalLevel(class UCommonRivalLevelWidget* RivalLevelWidget, const int32 RivalLevel, const int32 MaxLevel, const int32 BlackCount, int32 BaseRivalLevel);
	static void SetRivalLevel(class UCommonRivalLevelWidget* RivalLevelWidget, const int32 RivalLevel, int32 BaseRivalLevel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIUtilityLibrary">();
	}
	static class UUIUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIUtilityLibrary>();
	}
};
static_assert(alignof(UUIUtilityLibrary) == 0x000008, "Wrong alignment on UUIUtilityLibrary");
static_assert(sizeof(UUIUtilityLibrary) == 0x000028, "Wrong size on UUIUtilityLibrary");

// Class UNION.UnionBootCheatManager
// 0x0000 (0x0088 - 0x0088)
class UUnionBootCheatManager final : public UCheatManager
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionBootCheatManager">();
	}
	static class UUnionBootCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionBootCheatManager>();
	}
};
static_assert(alignof(UUnionBootCheatManager) == 0x000008, "Wrong alignment on UUnionBootCheatManager");
static_assert(sizeof(UUnionBootCheatManager) == 0x000088, "Wrong size on UUnionBootCheatManager");

// Class UNION.UnionDriverPrimaryAssetLabel
// 0x0008 (0x0090 - 0x0088)
class UUnionDriverPrimaryAssetLabel final : public UUnionPrimaryAssetLabel
{
public:
	EDriverId                                     DriverId;                                          // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialChunk;                                   // 0x0089(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionDriverPrimaryAssetLabel">();
	}
	static class UUnionDriverPrimaryAssetLabel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionDriverPrimaryAssetLabel>();
	}
};
static_assert(alignof(UUnionDriverPrimaryAssetLabel) == 0x000008, "Wrong alignment on UUnionDriverPrimaryAssetLabel");
static_assert(sizeof(UUnionDriverPrimaryAssetLabel) == 0x000090, "Wrong size on UUnionDriverPrimaryAssetLabel");
static_assert(offsetof(UUnionDriverPrimaryAssetLabel, DriverId) == 0x000088, "Member 'UUnionDriverPrimaryAssetLabel::DriverId' has a wrong offset!");
static_assert(offsetof(UUnionDriverPrimaryAssetLabel, bIsInitialChunk) == 0x000089, "Member 'UUnionDriverPrimaryAssetLabel::bIsInitialChunk' has a wrong offset!");

// Class UNION.UnionMachinePrimaryAssetLabel
// 0x0008 (0x0090 - 0x0088)
class UUnionMachinePrimaryAssetLabel final : public UUnionPrimaryAssetLabel
{
public:
	EMachineId                                    MachineId;                                         // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialChunk;                                   // 0x0089(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionMachinePrimaryAssetLabel">();
	}
	static class UUnionMachinePrimaryAssetLabel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionMachinePrimaryAssetLabel>();
	}
};
static_assert(alignof(UUnionMachinePrimaryAssetLabel) == 0x000008, "Wrong alignment on UUnionMachinePrimaryAssetLabel");
static_assert(sizeof(UUnionMachinePrimaryAssetLabel) == 0x000090, "Wrong size on UUnionMachinePrimaryAssetLabel");
static_assert(offsetof(UUnionMachinePrimaryAssetLabel, MachineId) == 0x000088, "Member 'UUnionMachinePrimaryAssetLabel::MachineId' has a wrong offset!");
static_assert(offsetof(UUnionMachinePrimaryAssetLabel, bIsInitialChunk) == 0x000089, "Member 'UUnionMachinePrimaryAssetLabel::bIsInitialChunk' has a wrong offset!");

// Class UNION.UnionMaterialUtility
// 0x0000 (0x0028 - 0x0028)
class UUnionMaterialUtility final : public UBlueprintFunctionLibrary
{
public:
	static void ClearMidArray();
	static void CopyMaterialParameters(class UMaterialInstance* SourceMaterialInstance, class UMaterialInstanceDynamic* TargetMaterialInstance, class UMaterialInstanceDynamic* TargetMaterialInstancePP, float* Width, float* Height);
	static class UMaterialInstanceDynamic* GetOrReuseDynamicMaterialInstance(class UMaterialInterface* Material, class UObject* InOuter, class FName Name_0);
	static void MachineBake(class AActor* Actor);
	static void MaterialBakeByActorByStruct(const struct FUnionMaterialBakeSetup& Setup);
	static void OutputMaterialParameters(class UMaterialInstance* SourceMaterialInstance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionMaterialUtility">();
	}
	static class UUnionMaterialUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionMaterialUtility>();
	}
};
static_assert(alignof(UUnionMaterialUtility) == 0x000008, "Wrong alignment on UUnionMaterialUtility");
static_assert(sizeof(UUnionMaterialUtility) == 0x000028, "Wrong size on UUnionMaterialUtility");

// Class UNION.UnionMilestonePrimaryAssetLabel
// 0x0008 (0x0090 - 0x0088)
class UUnionMilestonePrimaryAssetLabel final : public UUnionPrimaryAssetLabel
{
public:
	EMilestoneVersion                             MilestoneVersion;                                  // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionMilestonePrimaryAssetLabel">();
	}
	static class UUnionMilestonePrimaryAssetLabel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionMilestonePrimaryAssetLabel>();
	}
};
static_assert(alignof(UUnionMilestonePrimaryAssetLabel) == 0x000008, "Wrong alignment on UUnionMilestonePrimaryAssetLabel");
static_assert(sizeof(UUnionMilestonePrimaryAssetLabel) == 0x000090, "Wrong size on UUnionMilestonePrimaryAssetLabel");
static_assert(offsetof(UUnionMilestonePrimaryAssetLabel, MilestoneVersion) == 0x000088, "Member 'UUnionMilestonePrimaryAssetLabel::MilestoneVersion' has a wrong offset!");

// Class UNION.UnionPlatformCrossPlayChangedWindow
// 0x0058 (0x02E8 - 0x0290)
class AUnionPlatformCrossPlayChangedWindow final : public AActor
{
public:
	uint8                                         Pad_290[0x50];                                     // 0x0290(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIPopupWindowBase*                m_PopupWindowPtr;                                  // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnDecisionCrossPlayReloginWindow(class UUnionUIButtonBase* InButton, int32 InPanelIndex, int32 InButtonIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionPlatformCrossPlayChangedWindow">();
	}
	static class AUnionPlatformCrossPlayChangedWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionPlatformCrossPlayChangedWindow>();
	}
};
static_assert(alignof(AUnionPlatformCrossPlayChangedWindow) == 0x000008, "Wrong alignment on AUnionPlatformCrossPlayChangedWindow");
static_assert(sizeof(AUnionPlatformCrossPlayChangedWindow) == 0x0002E8, "Wrong size on AUnionPlatformCrossPlayChangedWindow");
static_assert(offsetof(AUnionPlatformCrossPlayChangedWindow, m_PopupWindowPtr) == 0x0002E0, "Member 'AUnionPlatformCrossPlayChangedWindow::m_PopupWindowPtr' has a wrong offset!");

// Class UNION.UnionRacerAnimSync
// 0x0000 (0x0000 - 0x0000)
class IUnionRacerAnimSync final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionRacerAnimSync">();
	}
	static class IUnionRacerAnimSync* GetDefaultObj()
	{
		return GetDefaultObjImpl<IUnionRacerAnimSync>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IUnionRacerAnimSync) == 0x000001, "Wrong alignment on IUnionRacerAnimSync");
static_assert(sizeof(IUnionRacerAnimSync) == 0x000001, "Wrong size on IUnionRacerAnimSync");

// Class UNION.UnionShortcutCameraActor
// 0x0048 (0x02D8 - 0x0290)
class AUnionShortcutCameraActor final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionShortcutComponent*                RootScene_;                                        // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETravelRingType                               TravelRingType_;                                   // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Type_;                                             // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StageId_;                                          // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PlayerId_;                                         // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ShortcutId_;                                       // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         TargetMesh_;                                       // 0x02B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDomainNumber                                 DomainNumber_;                                     // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ShortcutRingSrc_;                                  // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 ShortcutRingDst_;                                  // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Initialize();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionShortcutCameraActor">();
	}
	static class AUnionShortcutCameraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionShortcutCameraActor>();
	}
};
static_assert(alignof(AUnionShortcutCameraActor) == 0x000008, "Wrong alignment on AUnionShortcutCameraActor");
static_assert(sizeof(AUnionShortcutCameraActor) == 0x0002D8, "Wrong size on AUnionShortcutCameraActor");
static_assert(offsetof(AUnionShortcutCameraActor, RootScene_) == 0x000298, "Member 'AUnionShortcutCameraActor::RootScene_' has a wrong offset!");
static_assert(offsetof(AUnionShortcutCameraActor, TravelRingType_) == 0x0002A0, "Member 'AUnionShortcutCameraActor::TravelRingType_' has a wrong offset!");
static_assert(offsetof(AUnionShortcutCameraActor, Type_) == 0x0002A4, "Member 'AUnionShortcutCameraActor::Type_' has a wrong offset!");
static_assert(offsetof(AUnionShortcutCameraActor, StageId_) == 0x0002A8, "Member 'AUnionShortcutCameraActor::StageId_' has a wrong offset!");
static_assert(offsetof(AUnionShortcutCameraActor, PlayerId_) == 0x0002AC, "Member 'AUnionShortcutCameraActor::PlayerId_' has a wrong offset!");
static_assert(offsetof(AUnionShortcutCameraActor, ShortcutId_) == 0x0002B0, "Member 'AUnionShortcutCameraActor::ShortcutId_' has a wrong offset!");
static_assert(offsetof(AUnionShortcutCameraActor, TargetMesh_) == 0x0002B8, "Member 'AUnionShortcutCameraActor::TargetMesh_' has a wrong offset!");
static_assert(offsetof(AUnionShortcutCameraActor, DomainNumber_) == 0x0002C0, "Member 'AUnionShortcutCameraActor::DomainNumber_' has a wrong offset!");
static_assert(offsetof(AUnionShortcutCameraActor, ShortcutRingSrc_) == 0x0002C8, "Member 'AUnionShortcutCameraActor::ShortcutRingSrc_' has a wrong offset!");
static_assert(offsetof(AUnionShortcutCameraActor, ShortcutRingDst_) == 0x0002D0, "Member 'AUnionShortcutCameraActor::ShortcutRingDst_' has a wrong offset!");

// Class UNION.UnionShortcutRingActor
// 0x0030 (0x02C0 - 0x0290)
class AUnionShortcutRingActor final : public AActor
{
public:
	class USceneComponent*                        RootScene_;                                        // 0x0290(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionStaticMeshComponent*              GateMesh_;                                         // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     WhiteOutMaterialInterface;                         // 0x02A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               WhiteoutEffectMaterial_;                           // 0x02A8(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B0[0x10];                                     // 0x02B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionShortcutRingActor">();
	}
	static class AUnionShortcutRingActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionShortcutRingActor>();
	}
};
static_assert(alignof(AUnionShortcutRingActor) == 0x000008, "Wrong alignment on AUnionShortcutRingActor");
static_assert(sizeof(AUnionShortcutRingActor) == 0x0002C0, "Wrong size on AUnionShortcutRingActor");
static_assert(offsetof(AUnionShortcutRingActor, RootScene_) == 0x000290, "Member 'AUnionShortcutRingActor::RootScene_' has a wrong offset!");
static_assert(offsetof(AUnionShortcutRingActor, GateMesh_) == 0x000298, "Member 'AUnionShortcutRingActor::GateMesh_' has a wrong offset!");
static_assert(offsetof(AUnionShortcutRingActor, WhiteOutMaterialInterface) == 0x0002A0, "Member 'AUnionShortcutRingActor::WhiteOutMaterialInterface' has a wrong offset!");
static_assert(offsetof(AUnionShortcutRingActor, WhiteoutEffectMaterial_) == 0x0002A8, "Member 'AUnionShortcutRingActor::WhiteoutEffectMaterial_' has a wrong offset!");

// Class UNION.UnionSoundPrimaryDataAsset
// 0x0000 (0x0080 - 0x0080)
class UUnionSoundPrimaryDataAsset final : public UUnionCookPrimaryDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionSoundPrimaryDataAsset">();
	}
	static class UUnionSoundPrimaryDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionSoundPrimaryDataAsset>();
	}
};
static_assert(alignof(UUnionSoundPrimaryDataAsset) == 0x000008, "Wrong alignment on UUnionSoundPrimaryDataAsset");
static_assert(sizeof(UUnionSoundPrimaryDataAsset) == 0x000080, "Wrong size on UUnionSoundPrimaryDataAsset");

// Class UNION.UnionStickerBaker
// 0x0098 (0x0340 - 0x02A8)
class AUnionStickerBaker final : public ASceneCapture2D
{
public:
	TMulticastInlineDelegate<void()>              OnFinishBakeSticker;                               // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptured;                                         // 0x02BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               SceneCaptureComponent;                             // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     TextureArray;                                      // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           PlaneComponentArray;                               // 0x02D8(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       MaterialArray;                                     // 0x02E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             StickerTextureCompress;                            // 0x02F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnionTextureCompressType                     CompressType;                                      // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStickerTextureAsyncLoader*             StickerLoader;                                     // 0x0308(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_310[0x20];                                     // 0x0310(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0330(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture*                               StickerTexture;                                    // 0x0338(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void FinalizePooling();
	void Finish();
	class UTexture* GetRenderTarget();
	class UTexture* GetStickerTexture();
	class UTexture2D* GetStickerTextureCompress();
	void Loop(float DeltaSeconds);
	void ResetBaker();
	void Setup(const TArray<struct FUserStickerData>& StickerArray, const struct FStickerBakerData& BakeData, const int32 InSize, const bool IsAlphaReverse);
	void SetupPooling();
	void SetupSub(const TArray<struct FUserStickerData>& StickerArray, const struct FStickerBakerData& BakeData, const int32 InSize);
	void Tick(float DeltaSeconds);

	bool IsCapture() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionStickerBaker">();
	}
	static class AUnionStickerBaker* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionStickerBaker>();
	}
};
static_assert(alignof(AUnionStickerBaker) == 0x000008, "Wrong alignment on AUnionStickerBaker");
static_assert(sizeof(AUnionStickerBaker) == 0x000340, "Wrong size on AUnionStickerBaker");
static_assert(offsetof(AUnionStickerBaker, OnFinishBakeSticker) == 0x0002A8, "Member 'AUnionStickerBaker::OnFinishBakeSticker' has a wrong offset!");
static_assert(offsetof(AUnionStickerBaker, Timer) == 0x0002B8, "Member 'AUnionStickerBaker::Timer' has a wrong offset!");
static_assert(offsetof(AUnionStickerBaker, bCaptured) == 0x0002BC, "Member 'AUnionStickerBaker::bCaptured' has a wrong offset!");
static_assert(offsetof(AUnionStickerBaker, SceneCaptureComponent) == 0x0002C0, "Member 'AUnionStickerBaker::SceneCaptureComponent' has a wrong offset!");
static_assert(offsetof(AUnionStickerBaker, TextureArray) == 0x0002C8, "Member 'AUnionStickerBaker::TextureArray' has a wrong offset!");
static_assert(offsetof(AUnionStickerBaker, PlaneComponentArray) == 0x0002D8, "Member 'AUnionStickerBaker::PlaneComponentArray' has a wrong offset!");
static_assert(offsetof(AUnionStickerBaker, MaterialArray) == 0x0002E8, "Member 'AUnionStickerBaker::MaterialArray' has a wrong offset!");
static_assert(offsetof(AUnionStickerBaker, StickerTextureCompress) == 0x0002F8, "Member 'AUnionStickerBaker::StickerTextureCompress' has a wrong offset!");
static_assert(offsetof(AUnionStickerBaker, CompressType) == 0x000300, "Member 'AUnionStickerBaker::CompressType' has a wrong offset!");
static_assert(offsetof(AUnionStickerBaker, StickerLoader) == 0x000308, "Member 'AUnionStickerBaker::StickerLoader' has a wrong offset!");
static_assert(offsetof(AUnionStickerBaker, RenderTarget) == 0x000330, "Member 'AUnionStickerBaker::RenderTarget' has a wrong offset!");
static_assert(offsetof(AUnionStickerBaker, StickerTexture) == 0x000338, "Member 'AUnionStickerBaker::StickerTexture' has a wrong offset!");

// Class UNION.UnionStickerBase
// 0x0150 (0x03E0 - 0x0290)
class AUnionStickerBase final : public AActor
{
public:
	bool                                          IsInnerCollision;                                  // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOuterCollision;                                  // 0x0291(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292[0xE];                                      // 0x0292(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LastSafeTransform;                                 // 0x02A0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LastRotation;                                      // 0x0300(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      MaterialInstance;                                  // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MIDInside;                                         // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      MaterialInstanceInside;                            // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        SceneComponent;                                    // 0x0340(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0348(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComponentInside;                         // 0x0350(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsEnabledColorChange;                              // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabledFreeScale;                                // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRevU_;                                           // 0x0362(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRevV_;                                           // 0x0363(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSavedRevU;                                      // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNoSticker;                                       // 0x0365(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEditRear;                                        // 0x0366(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveRangeOut;                                      // 0x0367(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSavedExtraSticker;                              // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEditSticker;                                    // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEditExtraSticker;                               // 0x036A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36B[0x5];                                      // 0x036B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BaseScale;                                         // 0x0370(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AspectScale;                                       // 0x0388(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OverlappingActors_;                                // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         StickerFrames;                                     // 0x03B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          IsDebugMove_;                                      // 0x03C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C9[0x3];                                      // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IsRotate_;                                         // 0x03CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Margin_;                                           // 0x03D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D4[0xC];                                      // 0x03D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOverlapSticker(class AActor* OtherActor);
	void AddStaticMeshComponent();
	void BeginPlaySub();
	struct FVector CalculateStickerAspect(const class UTexture* StickerTexture);
	void HandleBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void HandleBeginOverlapInside(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void HandleEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void HandleEndOverlapInside(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void RemoveOverlapSticker(class AActor* OtherActor);
	void SetColor(const struct FLinearColor& Color);
	void SetMargin(const float Margin);
	void SetReverseU(const bool IsReverse);
	void SetReverseV(const bool IsReverse);
	void SetSimpleRender(bool IsSimple);
	void SetStickerTexture(class UTexture* StickerTexture, bool IsCalcScale);
	void SetTranslucentSortPriority(int32 SortPriority);
	void SetupCollision();
	void TickSub(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionStickerBase">();
	}
	static class AUnionStickerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionStickerBase>();
	}
};
static_assert(alignof(AUnionStickerBase) == 0x000010, "Wrong alignment on AUnionStickerBase");
static_assert(sizeof(AUnionStickerBase) == 0x0003E0, "Wrong size on AUnionStickerBase");
static_assert(offsetof(AUnionStickerBase, IsInnerCollision) == 0x000290, "Member 'AUnionStickerBase::IsInnerCollision' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, IsOuterCollision) == 0x000291, "Member 'AUnionStickerBase::IsOuterCollision' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, LastSafeTransform) == 0x0002A0, "Member 'AUnionStickerBase::LastSafeTransform' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, LastRotation) == 0x000300, "Member 'AUnionStickerBase::LastRotation' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, Mid) == 0x000318, "Member 'AUnionStickerBase::Mid' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, MaterialInstance) == 0x000320, "Member 'AUnionStickerBase::MaterialInstance' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, MIDInside) == 0x000328, "Member 'AUnionStickerBase::MIDInside' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, MaterialInstanceInside) == 0x000330, "Member 'AUnionStickerBase::MaterialInstanceInside' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, Texture) == 0x000338, "Member 'AUnionStickerBase::Texture' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, SceneComponent) == 0x000340, "Member 'AUnionStickerBase::SceneComponent' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, StaticMeshComponent) == 0x000348, "Member 'AUnionStickerBase::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, StaticMeshComponentInside) == 0x000350, "Member 'AUnionStickerBase::StaticMeshComponentInside' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, IsEnabledColorChange) == 0x000360, "Member 'AUnionStickerBase::IsEnabledColorChange' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, IsEnabledFreeScale) == 0x000361, "Member 'AUnionStickerBase::IsEnabledFreeScale' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, IsRevU_) == 0x000362, "Member 'AUnionStickerBase::IsRevU_' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, IsRevV_) == 0x000363, "Member 'AUnionStickerBase::IsRevV_' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, bIsSavedRevU) == 0x000364, "Member 'AUnionStickerBase::bIsSavedRevU' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, IsNoSticker) == 0x000365, "Member 'AUnionStickerBase::IsNoSticker' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, IsEditRear) == 0x000366, "Member 'AUnionStickerBase::IsEditRear' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, MoveRangeOut) == 0x000367, "Member 'AUnionStickerBase::MoveRangeOut' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, bIsSavedExtraSticker) == 0x000368, "Member 'AUnionStickerBase::bIsSavedExtraSticker' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, bIsEditSticker) == 0x000369, "Member 'AUnionStickerBase::bIsEditSticker' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, bIsEditExtraSticker) == 0x00036A, "Member 'AUnionStickerBase::bIsEditExtraSticker' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, BaseScale) == 0x000370, "Member 'AUnionStickerBase::BaseScale' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, AspectScale) == 0x000388, "Member 'AUnionStickerBase::AspectScale' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, OverlappingActors_) == 0x0003A0, "Member 'AUnionStickerBase::OverlappingActors_' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, SlotIndex) == 0x0003B0, "Member 'AUnionStickerBase::SlotIndex' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, StickerFrames) == 0x0003B8, "Member 'AUnionStickerBase::StickerFrames' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, IsDebugMove_) == 0x0003C8, "Member 'AUnionStickerBase::IsDebugMove_' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, IsRotate_) == 0x0003CC, "Member 'AUnionStickerBase::IsRotate_' has a wrong offset!");
static_assert(offsetof(AUnionStickerBase, Margin_) == 0x0003D0, "Member 'AUnionStickerBase::Margin_' has a wrong offset!");

// Class UNION.UnionStickerUtil
// 0x0000 (0x0028 - 0x0028)
class UUnionStickerUtil final : public UBlueprintFunctionLibrary
{
public:
	static const struct FBox2D GetStickerBox();
	static void RegistStickerActor(class AUnionStickerCamera* Camera);
	static void SetStickerBox(const struct FBox2D& Box, const struct FVector& Center, float Scale, class AStaticMeshActor* RenderTargetPlane);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionStickerUtil">();
	}
	static class UUnionStickerUtil* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionStickerUtil>();
	}
};
static_assert(alignof(UUnionStickerUtil) == 0x000008, "Wrong alignment on UUnionStickerUtil");
static_assert(sizeof(UUnionStickerUtil) == 0x000028, "Wrong size on UUnionStickerUtil");

// Class UNION.UnionTravelRingCameraActor
// 0x0018 (0x02A8 - 0x0290)
class AUnionTravelRingCameraActor final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionTravelRingComponent*              RootScene_;                                        // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETravelRingType                               TravelRingType_;                                   // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionTravelRingCameraActor">();
	}
	static class AUnionTravelRingCameraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionTravelRingCameraActor>();
	}
};
static_assert(alignof(AUnionTravelRingCameraActor) == 0x000008, "Wrong alignment on AUnionTravelRingCameraActor");
static_assert(sizeof(AUnionTravelRingCameraActor) == 0x0002A8, "Wrong size on AUnionTravelRingCameraActor");
static_assert(offsetof(AUnionTravelRingCameraActor, RootScene_) == 0x000298, "Member 'AUnionTravelRingCameraActor::RootScene_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingCameraActor, TravelRingType_) == 0x0002A0, "Member 'AUnionTravelRingCameraActor::TravelRingType_' has a wrong offset!");

// Class UNION.UnionTravelRingLevelActor
// 0x0610 (0x08A8 - 0x0298)
class AUnionTravelRingLevelActor final : public ALevelScriptActor
{
public:
	uint8                                         Pad_298[0x1];                                      // 0x0298(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastSparseDelegateProperty_             OnSetSequence;                                     // 0x0299(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnSetDrawMode;                                     // 0x029A(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29B[0x9D];                                     // 0x029B(0x009D)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AUnionTravelRingActor>   TravelRingActors_[0x14];                           // 0x0338(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_658[0x10];                                     // 0x0658(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  TrackingActor_;                                    // 0x0668(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<EDomainNumber, TSoftObjectPtr<class AActor>> TravelRingLeftWaves_;                          // 0x0690(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<EDomainNumber, TSoftObjectPtr<class AActor>> TravelRingRightWaves_;                         // 0x06E0(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<EDomainNumber, TSoftObjectPtr<class AActor>> TravelRingFloors_;                             // 0x0730(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<EDomainNumber, TSoftObjectPtr<class AActor>> TravelDecidePanels_;                           // 0x0780(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class AActor>                  PrevActor_;                                        // 0x07D0(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7F8[0x10];                                     // 0x07F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             TravelRingMainCourseParamTable;                    // 0x0808(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             TravelRingAnotherCourseParamTable;                 // 0x0810(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_818[0x90];                                     // 0x0818(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool AddTravelRing(const class UObject* WorldContextObject, class FName LevelName, int32 PlayerId, int32 LevelIndex, int32 LevelId, int32 LightChannel, const struct FVector& Location, class FName Dependan);
	static bool AddTravelRingByReference(const class UObject* WorldContextObject, TSoftObjectPtr<class UWorld> Level, int32 PlayerId, int32 LevelIndex, int32 LevelId, int32 LightChannel, const struct FVector& Location, TSoftObjectPtr<class UWorld> Dependant);
	static bool StartTravelRings(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	static bool StartTravelRingsAsync(const class UObject* WorldContextObject);

	void Setup(int32 LevelIndex, int32 LevelId, int32 PlayerId);

	int32 GetLevelId() const;
	int32 GetLevelIndex() const;
	int32 GetPlayerId() const;
	EDomainNumber GetSelectDomainNumber() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionTravelRingLevelActor">();
	}
	static class AUnionTravelRingLevelActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnionTravelRingLevelActor>();
	}
};
static_assert(alignof(AUnionTravelRingLevelActor) == 0x000008, "Wrong alignment on AUnionTravelRingLevelActor");
static_assert(sizeof(AUnionTravelRingLevelActor) == 0x0008A8, "Wrong size on AUnionTravelRingLevelActor");
static_assert(offsetof(AUnionTravelRingLevelActor, OnSetSequence) == 0x000299, "Member 'AUnionTravelRingLevelActor::OnSetSequence' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingLevelActor, OnSetDrawMode) == 0x00029A, "Member 'AUnionTravelRingLevelActor::OnSetDrawMode' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingLevelActor, TravelRingActors_) == 0x000338, "Member 'AUnionTravelRingLevelActor::TravelRingActors_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingLevelActor, TrackingActor_) == 0x000668, "Member 'AUnionTravelRingLevelActor::TrackingActor_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingLevelActor, TravelRingLeftWaves_) == 0x000690, "Member 'AUnionTravelRingLevelActor::TravelRingLeftWaves_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingLevelActor, TravelRingRightWaves_) == 0x0006E0, "Member 'AUnionTravelRingLevelActor::TravelRingRightWaves_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingLevelActor, TravelRingFloors_) == 0x000730, "Member 'AUnionTravelRingLevelActor::TravelRingFloors_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingLevelActor, TravelDecidePanels_) == 0x000780, "Member 'AUnionTravelRingLevelActor::TravelDecidePanels_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingLevelActor, PrevActor_) == 0x0007D0, "Member 'AUnionTravelRingLevelActor::PrevActor_' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingLevelActor, TravelRingMainCourseParamTable) == 0x000808, "Member 'AUnionTravelRingLevelActor::TravelRingMainCourseParamTable' has a wrong offset!");
static_assert(offsetof(AUnionTravelRingLevelActor, TravelRingAnotherCourseParamTable) == 0x000810, "Member 'AUnionTravelRingLevelActor::TravelRingAnotherCourseParamTable' has a wrong offset!");

// Class UNION.UnionYellowDrillMeshContainer
// 0x0040 (0x0FB0 - 0x0F70)
class UUnionYellowDrillMeshContainer final : public UUnionItemSkeletalMeshContainer
{
public:
	class UNiagaraComponent*                      LoopEffect;                                        // 0x0F70(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NomalOnGroundEffect;                               // 0x0F78(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      WaterOnGroundEffect;                               // 0x0F80(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      TransEffect;                                       // 0x0F88(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      ReturnEffect;                                      // 0x0F90(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         DrillLoopSound;                                    // 0x0F98(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVehicleInRacePawn*                     MachineActor;                                      // 0x0FA0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EUnionSurfaceType                             CurrentBodySurfaceType;                            // 0x0FA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FA9[0x7];                                      // 0x0FA9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEndNiagaraSystem(class UNiagaraComponent* EndSystem);
	void VehicleModelEventFloat(const int32& EventId, const float& Value);
	void VehicleModelEventInt(const int32& EventId, const int32& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionYellowDrillMeshContainer">();
	}
	static class UUnionYellowDrillMeshContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionYellowDrillMeshContainer>();
	}
};
static_assert(alignof(UUnionYellowDrillMeshContainer) == 0x000010, "Wrong alignment on UUnionYellowDrillMeshContainer");
static_assert(sizeof(UUnionYellowDrillMeshContainer) == 0x000FB0, "Wrong size on UUnionYellowDrillMeshContainer");
static_assert(offsetof(UUnionYellowDrillMeshContainer, LoopEffect) == 0x000F70, "Member 'UUnionYellowDrillMeshContainer::LoopEffect' has a wrong offset!");
static_assert(offsetof(UUnionYellowDrillMeshContainer, NomalOnGroundEffect) == 0x000F78, "Member 'UUnionYellowDrillMeshContainer::NomalOnGroundEffect' has a wrong offset!");
static_assert(offsetof(UUnionYellowDrillMeshContainer, WaterOnGroundEffect) == 0x000F80, "Member 'UUnionYellowDrillMeshContainer::WaterOnGroundEffect' has a wrong offset!");
static_assert(offsetof(UUnionYellowDrillMeshContainer, TransEffect) == 0x000F88, "Member 'UUnionYellowDrillMeshContainer::TransEffect' has a wrong offset!");
static_assert(offsetof(UUnionYellowDrillMeshContainer, ReturnEffect) == 0x000F90, "Member 'UUnionYellowDrillMeshContainer::ReturnEffect' has a wrong offset!");
static_assert(offsetof(UUnionYellowDrillMeshContainer, DrillLoopSound) == 0x000F98, "Member 'UUnionYellowDrillMeshContainer::DrillLoopSound' has a wrong offset!");
static_assert(offsetof(UUnionYellowDrillMeshContainer, MachineActor) == 0x000FA0, "Member 'UUnionYellowDrillMeshContainer::MachineActor' has a wrong offset!");
static_assert(offsetof(UUnionYellowDrillMeshContainer, CurrentBodySurfaceType) == 0x000FA8, "Member 'UUnionYellowDrillMeshContainer::CurrentBodySurfaceType' has a wrong offset!");

// Class UNION.WindowCharaChange
// 0x0090 (0x0468 - 0x03D8)
class UWindowCharaChange : public UUnionUISceneBase
{
public:
	TMulticastInlineDelegate<void(int32 InPlayerIndex, int32 InCharaIndex)> OnEventHover;            // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InPlayerIndex, int32 InCharaIndex)> OnEventUnhover;          // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InPlayerIndex, int32 InCharaIndex)> OnEventDecision;         // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InPlayerIndex)> OnEventCancel;                               // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnUpdateNew;                                       // 0x0418(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UCommonCountNumberWidget*               DSP_WBP_CMN_GadgetCount;                           // 0x0428(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWrapBox*                               WrapBox;                                           // 0x0430(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               DSP_Text;                                          // 0x0438(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionRichTextBlock*                    TXT_SuperSonicInfo;                                // 0x0440(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOutOfContentButton*                    OutOfContentButton;                                // 0x0448(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUnionUIButtonsPanel*                   ButtonsPanel;                                      // 0x0450(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_458[0x10];                                     // 0x0458(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CloseEnd();
	void IconCancel(int32 InPlayerControllerIndex);
	void IconDecision(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void IconHover(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void IconUnhover(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void OpenEnd();
	void PlayAnimationIn();
	void PlayAnimationLoop();
	void PlayAnimationOut();
	void PlaySEOpen();

	bool IsOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindowCharaChange">();
	}
	static class UWindowCharaChange* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindowCharaChange>();
	}
};
static_assert(alignof(UWindowCharaChange) == 0x000008, "Wrong alignment on UWindowCharaChange");
static_assert(sizeof(UWindowCharaChange) == 0x000468, "Wrong size on UWindowCharaChange");
static_assert(offsetof(UWindowCharaChange, OnEventHover) == 0x0003D8, "Member 'UWindowCharaChange::OnEventHover' has a wrong offset!");
static_assert(offsetof(UWindowCharaChange, OnEventUnhover) == 0x0003E8, "Member 'UWindowCharaChange::OnEventUnhover' has a wrong offset!");
static_assert(offsetof(UWindowCharaChange, OnEventDecision) == 0x0003F8, "Member 'UWindowCharaChange::OnEventDecision' has a wrong offset!");
static_assert(offsetof(UWindowCharaChange, OnEventCancel) == 0x000408, "Member 'UWindowCharaChange::OnEventCancel' has a wrong offset!");
static_assert(offsetof(UWindowCharaChange, OnUpdateNew) == 0x000418, "Member 'UWindowCharaChange::OnUpdateNew' has a wrong offset!");
static_assert(offsetof(UWindowCharaChange, DSP_WBP_CMN_GadgetCount) == 0x000428, "Member 'UWindowCharaChange::DSP_WBP_CMN_GadgetCount' has a wrong offset!");
static_assert(offsetof(UWindowCharaChange, WrapBox) == 0x000430, "Member 'UWindowCharaChange::WrapBox' has a wrong offset!");
static_assert(offsetof(UWindowCharaChange, DSP_Text) == 0x000438, "Member 'UWindowCharaChange::DSP_Text' has a wrong offset!");
static_assert(offsetof(UWindowCharaChange, TXT_SuperSonicInfo) == 0x000440, "Member 'UWindowCharaChange::TXT_SuperSonicInfo' has a wrong offset!");
static_assert(offsetof(UWindowCharaChange, OutOfContentButton) == 0x000448, "Member 'UWindowCharaChange::OutOfContentButton' has a wrong offset!");
static_assert(offsetof(UWindowCharaChange, ButtonsPanel) == 0x000450, "Member 'UWindowCharaChange::ButtonsPanel' has a wrong offset!");

// Class UNION.WirelessLobbySelectButton
// 0x0000 (0x0480 - 0x0480)
class UWirelessLobbySelectButton final : public UUnionUIButtonBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WirelessLobbySelectButton">();
	}
	static class UWirelessLobbySelectButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWirelessLobbySelectButton>();
	}
};
static_assert(alignof(UWirelessLobbySelectButton) == 0x000008, "Wrong alignment on UWirelessLobbySelectButton");
static_assert(sizeof(UWirelessLobbySelectButton) == 0x000480, "Wrong size on UWirelessLobbySelectButton");

// Class UNION.WirelessSequenceStateToOffline
// 0x0008 (0x0118 - 0x0110)
class UWirelessSequenceStateToOffline final : public USequenceStateNetworkCleanup
{
public:
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCompleteInitializeWirelessMode(class UWirelessLobbyContext* WirelessLobbyContext, const struct FOnlineErrorBP& Error);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WirelessSequenceStateToOffline">();
	}
	static class UWirelessSequenceStateToOffline* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWirelessSequenceStateToOffline>();
	}
};
static_assert(alignof(UWirelessSequenceStateToOffline) == 0x000008, "Wrong alignment on UWirelessSequenceStateToOffline");
static_assert(sizeof(UWirelessSequenceStateToOffline) == 0x000118, "Wrong size on UWirelessSequenceStateToOffline");

}

