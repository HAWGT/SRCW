#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_RaceSequenceStateCreateRace

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"
#include "UNION_classes.hpp"
#include "Engine_structs.hpp"
#include "UnionUI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_RaceSequenceStateCreateRace.BPC_RaceSequenceStateCreateRace_C
// 0x0020 (0x0130 - 0x0110)
class UBPC_RaceSequenceStateCreateRace_C final : public URaceSequenceStateCreateRace
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0110(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bDebugForcePlayIntroduceCourse_old;                // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinimumLoadTime;                                   // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsNextEntryRacer;                                 // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool IsNextEntryRacerSequence();
	void EndLoadTimeMeasurement();
	void OnInitState();
	void OnFinishedFade(EUnionUIFadeDirection FadeDirection);
	void OnUpdateState(float InDeltaTime);
	void ExecuteUbergraph_BPC_RaceSequenceStateCreateRace(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_RaceSequenceStateCreateRace_C">();
	}
	static class UBPC_RaceSequenceStateCreateRace_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_RaceSequenceStateCreateRace_C>();
	}
};
static_assert(alignof(UBPC_RaceSequenceStateCreateRace_C) == 0x000008, "Wrong alignment on UBPC_RaceSequenceStateCreateRace_C");
static_assert(sizeof(UBPC_RaceSequenceStateCreateRace_C) == 0x000130, "Wrong size on UBPC_RaceSequenceStateCreateRace_C");
static_assert(offsetof(UBPC_RaceSequenceStateCreateRace_C, UberGraphFrame) == 0x000110, "Member 'UBPC_RaceSequenceStateCreateRace_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateCreateRace_C, bDebugForcePlayIntroduceCourse_old) == 0x000118, "Member 'UBPC_RaceSequenceStateCreateRace_C::bDebugForcePlayIntroduceCourse_old' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateCreateRace_C, MinimumLoadTime) == 0x000120, "Member 'UBPC_RaceSequenceStateCreateRace_C::MinimumLoadTime' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateCreateRace_C, bIsNextEntryRacer) == 0x000128, "Member 'UBPC_RaceSequenceStateCreateRace_C::bIsNextEntryRacer' has a wrong offset!");

}

