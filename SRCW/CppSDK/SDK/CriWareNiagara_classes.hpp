#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CriWareNiagara

#include "Basic.hpp"

#include "Niagara_classes.hpp"


namespace SDK
{

// Class CriWareNiagara.NiagaraDataInterfaceAtomPlayer
// 0x0038 (0x0070 - 0x0038)
class UNiagaraDataInterfaceAtomPlayer final : public UNiagaraDataInterface
{
public:
	class USoundAtomCue*                          SoundToPlay;                                       // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      Attenuation;                                       // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      Concurrency;                                       // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ParameterNames;                                    // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLimitPlaysPerTick;                                // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlaysPerTick;                                   // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenComponentIsDestroyed;                     // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowLoopingOneShotSounds;                        // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraDataInterfaceAtomPlayer">();
	}
	static class UNiagaraDataInterfaceAtomPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraDataInterfaceAtomPlayer>();
	}
};
static_assert(alignof(UNiagaraDataInterfaceAtomPlayer) == 0x000008, "Wrong alignment on UNiagaraDataInterfaceAtomPlayer");
static_assert(sizeof(UNiagaraDataInterfaceAtomPlayer) == 0x000070, "Wrong size on UNiagaraDataInterfaceAtomPlayer");
static_assert(offsetof(UNiagaraDataInterfaceAtomPlayer, SoundToPlay) == 0x000038, "Member 'UNiagaraDataInterfaceAtomPlayer::SoundToPlay' has a wrong offset!");
static_assert(offsetof(UNiagaraDataInterfaceAtomPlayer, Attenuation) == 0x000040, "Member 'UNiagaraDataInterfaceAtomPlayer::Attenuation' has a wrong offset!");
static_assert(offsetof(UNiagaraDataInterfaceAtomPlayer, Concurrency) == 0x000048, "Member 'UNiagaraDataInterfaceAtomPlayer::Concurrency' has a wrong offset!");
static_assert(offsetof(UNiagaraDataInterfaceAtomPlayer, ParameterNames) == 0x000050, "Member 'UNiagaraDataInterfaceAtomPlayer::ParameterNames' has a wrong offset!");
static_assert(offsetof(UNiagaraDataInterfaceAtomPlayer, bLimitPlaysPerTick) == 0x000060, "Member 'UNiagaraDataInterfaceAtomPlayer::bLimitPlaysPerTick' has a wrong offset!");
static_assert(offsetof(UNiagaraDataInterfaceAtomPlayer, MaxPlaysPerTick) == 0x000064, "Member 'UNiagaraDataInterfaceAtomPlayer::MaxPlaysPerTick' has a wrong offset!");
static_assert(offsetof(UNiagaraDataInterfaceAtomPlayer, bStopWhenComponentIsDestroyed) == 0x000068, "Member 'UNiagaraDataInterfaceAtomPlayer::bStopWhenComponentIsDestroyed' has a wrong offset!");
static_assert(offsetof(UNiagaraDataInterfaceAtomPlayer, bAllowLoopingOneShotSounds) == 0x000069, "Member 'UNiagaraDataInterfaceAtomPlayer::bAllowLoopingOneShotSounds' has a wrong offset!");

}

