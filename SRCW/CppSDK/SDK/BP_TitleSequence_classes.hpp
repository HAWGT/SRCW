#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TitleSequence

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"
#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "Engine_structs.hpp"
#include "UnionUI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TitleSequence.BP_TitleSequence_C
// 0x00E8 (0x0488 - 0x03A0)
class ABP_TitleSequence_C final : public ATitleSequence
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        WaitTime;                                          // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaitTime_TitleTop;                                 // 0x03B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WaitTimerHandle;                                   // 0x03B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnRequestInputDispacher;                           // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UWBP_TitleMenu_C*                       MainUIScene;                                       // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_Advertise_Start_C*                 AdvertiseWidget;                                   // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        WaitTimer_Adv;                                     // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WaitTimerAdvHandle;                                // 0x03E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_Advertise_AutoSave_C*              AutoSaveInfoWidget;                                // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUnionUIPopupWindowBase*                PopupScrollWidget;                                 // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_SaveDataSetting_C*                  BP_SaveDataSetting;                                // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnSkipAutoSaveInfoDispacher;                       // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        WaitTimer_AutoSaveInfo;                            // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_Advertise_Black_C*                 BlackWidget;                                       // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_OnlinePrivilegeChecker_C*           BP_OnlinePrivilegeChecker;                         // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_LoginProcessor_C*                   BP_LoginProcessor;                                 // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_PSSaveDataUpgrade_C*                BP_SaveDataUpgradePS;                              // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_SonicLogo_Movie_C*                 TitleMoviewidget;                                  // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WaitMovieHandle;                                   // 0x0448(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_TransferSaveDataFromDemo_C*         BP_TransferSaveDataFromDemo;                       // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUnionUIPopupWindowBase*                SaveDataAppRomVersionWindow;                       // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUnionUIPopupWindowBase*                StoreWindow;                                       // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bTitleLogoLoaded;                                  // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIPopupWindowBase*                UpdateWindow;                                      // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUnionUIPopupWindowBase*                GameQuitWindow;                                    // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInputBound;                                     // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BindMouseClicked();
	void BindMouseEvent(class UWBP_TitleMenu_C* TitleMenu);
	void CheckPlatform_Event();
	void CustomEvent(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void DecisionStoreEvent(bool IsAccept);
	void EnableInputPlayerController(const bool Enable);
	void EndCheckPlatform_Event();
	void EventFinishedFade(EUnionUIFadeDirection FadeDirection);
	void EventInputDisableEnd();
	void EventLeftStickAxis(class UObject* Object, const struct FVector2D& Value);
	void ExecuteUbergraph_BP_TitleSequence(int32 EntryPoint);
	void FinalizeTitleSequence();
	void FinishedInputTitleTop_Event();
	void FinishedLicenseOutAnimation();
	void FinishedLogosOutAnimation();
	void FinishedOnLoginResult_Event(bool IsSuccess, bool IsEnableOnlinePlay, bool IsRequestedSequenceBlock);
	void FinishedTimer();
	void FinishedTimerAgr();
	void FinishedTimerAutoSave();
	void FinishedTitleUI_Event();
	class UObject* GetFooter();
	void GetOSSText(class FText* Text);
	class UObject* GetOwnerMenuSequence();
	void LoginSuccess();
	void MismatchSaveDataVersion();
	void OnAcceptKeyPressedTitle(class UObject* Object);
	void OnBackKeyPressedTitle(class UObject* Object);
	void OnDecisionEvent(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnExitStateCheckDefaultSaveDataForRom();
	void OnExitStateConvertSaveData();
	void OnExitStateConvertSaveDataForDemo();
	void OnExitStateDetachUnavailableContent();
	void OnFaceButtonLeftPressedTitle(class UObject* Object);
	void OnFaceButtonTopPressedTitle(class UObject* Object);
	void OnFinalize();
	void OnFinished_Event();
	void OnFinisshedFade(EUnionUIFadeDirection FadeDirection);
	void OnFullScreenMouseClickEvent();
	void OnInitialize();
	void OnInitStateAgreement();
	void OnInitStateAutoSaveInformation();
	void OnInitStateCheckDefaultSaveDataForRom();
	void OnInitStateCheckPlatformPrivilege();
	void OnInitStateConvertSaveData();
	void OnInitStateConvertSaveDataForDemo();
	void OnInitStateCreateAndLoadSaveData();
	void OnInitStateDetachUnavailableContent();
	void OnInitStateExit();
	void OnInitStateLicense();
	void OnInitStateLogos();
	void OnInitStateMovie();
	void OnInitStateStore();
	void OnInitStateTitleTop();
	void OnInitStateWarning();
	void OnLicenseMouseButtonClicked();
	void OnLoaded_41F8F0A44AFD06D1D263CDB6C8FE8CC3(class UObject* Loaded);
	void OnLoaded_41F8F0A44AFD06D1D263CDB6FB907F3C(class UObject* Loaded);
	void OnQuitGameMouseButton();
	void OnSaveOntParticipantUser(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnUpdateStateCheckDefaultSaveDataForRom(float DeltaTime);
	void OnUpdateStateConvertSaveData(float DeltaTime);
	void OnUpdateStateConvertSaveDataForDemo(float DeltaTime);
	void OnUpdateStateDetachUnavailableContent(float DeltaTime);
	void OnUpdateStateTitleTop(float DeltaTime);
	void OutAnimationFinished();
	void OutAnimationFinished2();
	void OutAnimationFinished7();
	void PatchUpdate();
	void PopupGameQuit();
	void QuitPress(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void SetMovieTimer();
	void SetNextMenuSequenceState(EMenuSequenceMainState InState, class UObject* PrevSequence);
	void SetNextSubMenuSequenceState(EMenuSequenceSubState InState, class UObject* PrevSequence);
	void SetNextTitleSequenceState(ETitleSequenceState InState);
	void SkipAgr();
	void SkipAoutSaveInfo();
	void SkipWarn();
	void StartCheckPlatform_Event();
	void StartLoginProcessor_Event();
	void TitleTop_Event();
	void ToTitleExit();
	void UnbindMouseClicked();
	void カスタムイベント();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TitleSequence_C">();
	}
	static class ABP_TitleSequence_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TitleSequence_C>();
	}
};
static_assert(alignof(ABP_TitleSequence_C) == 0x000008, "Wrong alignment on ABP_TitleSequence_C");
static_assert(sizeof(ABP_TitleSequence_C) == 0x000488, "Wrong size on ABP_TitleSequence_C");
static_assert(offsetof(ABP_TitleSequence_C, UberGraphFrame) == 0x0003A0, "Member 'ABP_TitleSequence_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, WaitTime) == 0x0003A8, "Member 'ABP_TitleSequence_C::WaitTime' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, WaitTime_TitleTop) == 0x0003B0, "Member 'ABP_TitleSequence_C::WaitTime_TitleTop' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, WaitTimerHandle) == 0x0003B8, "Member 'ABP_TitleSequence_C::WaitTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, OnRequestInputDispacher) == 0x0003C0, "Member 'ABP_TitleSequence_C::OnRequestInputDispacher' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, MainUIScene) == 0x0003D0, "Member 'ABP_TitleSequence_C::MainUIScene' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, AdvertiseWidget) == 0x0003D8, "Member 'ABP_TitleSequence_C::AdvertiseWidget' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, WaitTimer_Adv) == 0x0003E0, "Member 'ABP_TitleSequence_C::WaitTimer_Adv' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, WaitTimerAdvHandle) == 0x0003E8, "Member 'ABP_TitleSequence_C::WaitTimerAdvHandle' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, AutoSaveInfoWidget) == 0x0003F0, "Member 'ABP_TitleSequence_C::AutoSaveInfoWidget' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, PopupScrollWidget) == 0x0003F8, "Member 'ABP_TitleSequence_C::PopupScrollWidget' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, BP_SaveDataSetting) == 0x000400, "Member 'ABP_TitleSequence_C::BP_SaveDataSetting' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, OnSkipAutoSaveInfoDispacher) == 0x000408, "Member 'ABP_TitleSequence_C::OnSkipAutoSaveInfoDispacher' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, WaitTimer_AutoSaveInfo) == 0x000418, "Member 'ABP_TitleSequence_C::WaitTimer_AutoSaveInfo' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, BlackWidget) == 0x000420, "Member 'ABP_TitleSequence_C::BlackWidget' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, BP_OnlinePrivilegeChecker) == 0x000428, "Member 'ABP_TitleSequence_C::BP_OnlinePrivilegeChecker' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, BP_LoginProcessor) == 0x000430, "Member 'ABP_TitleSequence_C::BP_LoginProcessor' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, BP_SaveDataUpgradePS) == 0x000438, "Member 'ABP_TitleSequence_C::BP_SaveDataUpgradePS' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, TitleMoviewidget) == 0x000440, "Member 'ABP_TitleSequence_C::TitleMoviewidget' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, WaitMovieHandle) == 0x000448, "Member 'ABP_TitleSequence_C::WaitMovieHandle' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, BP_TransferSaveDataFromDemo) == 0x000450, "Member 'ABP_TitleSequence_C::BP_TransferSaveDataFromDemo' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, SaveDataAppRomVersionWindow) == 0x000458, "Member 'ABP_TitleSequence_C::SaveDataAppRomVersionWindow' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, StoreWindow) == 0x000460, "Member 'ABP_TitleSequence_C::StoreWindow' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, bTitleLogoLoaded) == 0x000468, "Member 'ABP_TitleSequence_C::bTitleLogoLoaded' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, UpdateWindow) == 0x000470, "Member 'ABP_TitleSequence_C::UpdateWindow' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, GameQuitWindow) == 0x000478, "Member 'ABP_TitleSequence_C::GameQuitWindow' has a wrong offset!");
static_assert(offsetof(ABP_TitleSequence_C, bIsInputBound) == 0x000480, "Member 'ABP_TitleSequence_C::bIsInputBound' has a wrong offset!");

}

