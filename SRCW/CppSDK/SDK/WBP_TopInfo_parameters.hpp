#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_TopInfo

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UnionSystem_structs.hpp"
#include "UNION_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_TopInfo.WBP_TopInfo_C.CheckInputAllow
// 0x0003 (0x0003 - 0x0000)
struct WBP_TopInfo_C_CheckInputAllow final
{
public:
	bool                                          bAllow;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_CheckInputAllow) == 0x000001, "Wrong alignment on WBP_TopInfo_C_CheckInputAllow");
static_assert(sizeof(WBP_TopInfo_C_CheckInputAllow) == 0x000003, "Wrong size on WBP_TopInfo_C_CheckInputAllow");
static_assert(offsetof(WBP_TopInfo_C_CheckInputAllow, bAllow) == 0x000000, "Member 'WBP_TopInfo_C_CheckInputAllow::bAllow' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_CheckInputAllow, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'WBP_TopInfo_C_CheckInputAllow::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_CheckInputAllow, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'WBP_TopInfo_C_CheckInputAllow::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.ExecuteUbergraph_WBP_TopInfo
// 0x01C0 (0x01C0 - 0x0000)
struct WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_21;             // 0x0004(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_20;             // 0x0008(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_19;             // 0x000C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_18;             // 0x0010(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_17;             // 0x0014(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_16;             // 0x0018(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Event_Value_3;                              // 0x0020(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_15;             // 0x0030(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_14;             // 0x0034(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_13;             // 0x0038(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_12;             // 0x003C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_11;             // 0x0040(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_10;             // 0x0044(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_9;              // 0x0048(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Event_Value_2;                              // 0x0050(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_Value_1;                              // 0x0060(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_8;              // 0x0070(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_7;              // 0x0074(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_6;              // 0x0078(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_5;              // 0x007C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_4;              // 0x0080(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_3;              // 0x0084(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_2;              // 0x0088(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bOnce;                                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0098(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_22;             // 0x00B8(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_23;             // 0x00BC(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInputAllow_bAllow;                   // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInputAllow_bAllow_1;                 // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInputAllow_bAllow_2;                 // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInputAllow_bAllow_3;                 // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValidPageNum_Num;                      // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_PlayerControllerIndex_24;             // 0x00CC(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValidPageNum_Num_1;                    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_PlayerControllerIndex_25;             // 0x00D8(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETopInfoWidgetPageCategory                    CallFunc_GetCurrentPage_ReturnValue;               // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETopInfoWidgetPageCategory                    CallFunc_GetCurrentPage_ReturnValue_1;             // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x00E0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x00F0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLeftKeyPressLoop_ReturnValue;           // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRightKeyPressLoop_ReturnValue;          // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_PlayerControllerIndex_1;              // 0x0104(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInputAllow_bAllow_4;                 // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_PlayerControllerIndex_26;             // 0x010C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerControllerIndex_27;             // 0x0110(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETopInfoWidgetPageCategory                    CallFunc_GetCurrentPage_ReturnValue_2;             // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0118(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSoundHandle                           CallFunc_SoundPlay_ReturnValue;                    // 0x0128(0x0004)()
	ETopInfoWidgetPageCategory                    CallFunc_GetCurrentPage_ReturnValue_3;             // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12E[0x2];                                      // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0130(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETopInfoWidgetPageCategory                    CallFunc_GetCurrentPage_ReturnValue_4;             // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundHandle                           CallFunc_SoundPlay_ReturnValue_1;                  // 0x0144(0x0004)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundHandle                           CallFunc_SoundPlay_ReturnValue_2;                  // 0x014C(0x0004)()
	int32                                         K2Node_Event_PlayerControllerIndex;                // 0x0150(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Event_Value;                                // 0x0158(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0178(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_6;            // 0x019C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_7;            // 0x01AC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo) == 0x000008, "Wrong alignment on WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo");
static_assert(sizeof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo) == 0x0001C0, "Wrong size on WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, EntryPoint) == 0x000000, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_21) == 0x000004, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_21' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_20) == 0x000008, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_20' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_19) == 0x00000C, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_19' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_18) == 0x000010, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_18' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_17) == 0x000014, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_17' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_16) == 0x000018, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_16' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_Value_3) == 0x000020, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_Value_3' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_15) == 0x000030, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_15' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_14) == 0x000034, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_14' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_13) == 0x000038, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_13' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_12) == 0x00003C, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_12' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_11) == 0x000040, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_11' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_10) == 0x000044, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_10' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_9) == 0x000048, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_9' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_Value_2) == 0x000050, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_Value_2' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_Value_1) == 0x000060, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_Value_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_8) == 0x000070, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_8' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_7) == 0x000074, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_7' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_6) == 0x000078, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_6' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_5) == 0x00007C, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_5' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_4) == 0x000080, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_4' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_3) == 0x000084, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_3' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_2) == 0x000088, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_2' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_bOnce) == 0x00008C, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_bOnce' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_PlayAnimationForward_ReturnValue) == 0x000090, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_CreateDelegate_OutputDelegate) == 0x000098, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x0000A8, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_PlayAnimation_ReturnValue) == 0x0000B0, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_22) == 0x0000B8, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_22' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_23) == 0x0000BC, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_23' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_CheckInputAllow_bAllow) == 0x0000C0, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_CheckInputAllow_bAllow' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_CheckInputAllow_bAllow_1) == 0x0000C1, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_CheckInputAllow_bAllow_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_CheckInputAllow_bAllow_2) == 0x0000C2, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_CheckInputAllow_bAllow_2' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_CheckInputAllow_bAllow_3) == 0x0000C3, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_CheckInputAllow_bAllow_3' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_GetValidPageNum_Num) == 0x0000C4, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_GetValidPageNum_Num' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000C8, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_24) == 0x0000CC, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_24' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_GetValidPageNum_Num_1) == 0x0000D0, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_GetValidPageNum_Num_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0000D4, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_25) == 0x0000D8, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_25' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_GetCurrentPage_ReturnValue) == 0x0000DC, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_GetCurrentPage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_GetCurrentPage_ReturnValue_1) == 0x0000DD, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_GetCurrentPage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000DE, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000DF, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000E0, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000F0, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_IsLeftKeyPressLoop_ReturnValue) == 0x000100, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_IsLeftKeyPressLoop_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_IsRightKeyPressLoop_ReturnValue) == 0x000101, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_IsRightKeyPressLoop_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_1) == 0x000104, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_CheckInputAllow_bAllow_4) == 0x000108, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_CheckInputAllow_bAllow_4' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_26) == 0x00010C, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_26' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex_27) == 0x000110, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex_27' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_GetCurrentPage_ReturnValue_2) == 0x000114, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_GetCurrentPage_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000115, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_CreateDelegate_OutputDelegate_3) == 0x000118, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_SoundPlay_ReturnValue) == 0x000128, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_SoundPlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_GetCurrentPage_ReturnValue_3) == 0x00012C, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_GetCurrentPage_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00012D, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_CreateDelegate_OutputDelegate_4) == 0x000130, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_GetCurrentPage_ReturnValue_4) == 0x000140, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_GetCurrentPage_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_SoundPlay_ReturnValue_1) == 0x000144, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_SoundPlay_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_SwitchEnum_CmpSuccess) == 0x000148, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_SoundPlay_ReturnValue_2) == 0x00014C, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_SoundPlay_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_PlayerControllerIndex) == 0x000150, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_Event_Value) == 0x000158, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_BreakVector2D_X) == 0x000168, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_BreakVector2D_Y) == 0x000170, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_CreateDelegate_OutputDelegate_5) == 0x000178, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000188, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_Abs_ReturnValue) == 0x000190, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000198, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_CreateDelegate_OutputDelegate_6) == 0x00019C, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo, K2Node_CreateDelegate_OutputDelegate_7) == 0x0001AC, "Member 'WBP_TopInfo_C_ExecuteUbergraph_WBP_TopInfo::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.GetValidPageNum
// 0x0024 (0x0024 - 0x0000)
struct WBP_TopInfo_C_GetValidPageNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_Num;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_GetValidPageNum) == 0x000004, "Wrong alignment on WBP_TopInfo_C_GetValidPageNum");
static_assert(sizeof(WBP_TopInfo_C_GetValidPageNum) == 0x000024, "Wrong size on WBP_TopInfo_C_GetValidPageNum");
static_assert(offsetof(WBP_TopInfo_C_GetValidPageNum, Num) == 0x000000, "Member 'WBP_TopInfo_C_GetValidPageNum::Num' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_GetValidPageNum, L_Num) == 0x000004, "Member 'WBP_TopInfo_C_GetValidPageNum::L_Num' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_GetValidPageNum, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'WBP_TopInfo_C_GetValidPageNum::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_GetValidPageNum, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'WBP_TopInfo_C_GetValidPageNum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_GetValidPageNum, Temp_int_Array_Index_Variable) == 0x000010, "Member 'WBP_TopInfo_C_GetValidPageNum::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_GetValidPageNum, Temp_int_Variable) == 0x000014, "Member 'WBP_TopInfo_C_GetValidPageNum::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_GetValidPageNum, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'WBP_TopInfo_C_GetValidPageNum::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_GetValidPageNum, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'WBP_TopInfo_C_GetValidPageNum::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_GetValidPageNum, CallFunc_Array_Get_Item) == 0x000020, "Member 'WBP_TopInfo_C_GetValidPageNum::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_GetValidPageNum, CallFunc_Less_IntInt_ReturnValue) == 0x000021, "Member 'WBP_TopInfo_C_GetValidPageNum::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnAcceptKeyPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnAcceptKeyPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnAcceptKeyPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnAcceptKeyPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnAcceptKeyPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnAcceptKeyPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnAcceptKeyPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnAcceptKeyPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnAcceptKeyReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnAcceptKeyReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnAcceptKeyReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnAcceptKeyReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnAcceptKeyReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnAcceptKeyReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnAcceptKeyReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnAcceptKeyReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnBackKeyPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnBackKeyPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnBackKeyPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnBackKeyPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnBackKeyPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnBackKeyPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnBackKeyPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnBackKeyPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnBackKeyReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnBackKeyReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnBackKeyReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnBackKeyReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnBackKeyReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnBackKeyReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnBackKeyReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnBackKeyReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnDownKeyPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnDownKeyPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnDownKeyPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnDownKeyPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnDownKeyPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnDownKeyPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnDownKeyPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnDownKeyPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnDownKeyReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnDownKeyReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnDownKeyReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnDownKeyReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnDownKeyReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnDownKeyReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnDownKeyReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnDownKeyReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnFaceButtonLeftPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnFaceButtonLeftPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnFaceButtonLeftPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnFaceButtonLeftPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnFaceButtonLeftPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnFaceButtonLeftPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnFaceButtonLeftPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnFaceButtonLeftPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnFaceButtonLeftReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnFaceButtonLeftReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnFaceButtonLeftReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnFaceButtonLeftReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnFaceButtonLeftReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnFaceButtonLeftReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnFaceButtonLeftReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnFaceButtonLeftReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnFaceButtonTopPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnFaceButtonTopPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnFaceButtonTopPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnFaceButtonTopPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnFaceButtonTopPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnFaceButtonTopPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnFaceButtonTopPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnFaceButtonTopPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnFaceButtonTopReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnFaceButtonTopReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnFaceButtonTopReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnFaceButtonTopReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnFaceButtonTopReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnFaceButtonTopReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnFaceButtonTopReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnFaceButtonTopReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnLeftKeyPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnLeftKeyPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnLeftKeyPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnLeftKeyPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnLeftKeyPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnLeftKeyPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnLeftKeyPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnLeftKeyPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnLeftKeyReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnLeftKeyReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnLeftKeyReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnLeftKeyReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnLeftKeyReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnLeftKeyReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnLeftKeyReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnLeftKeyReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnLeftShoulderPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnLeftShoulderPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnLeftShoulderPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnLeftShoulderPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnLeftShoulderPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnLeftShoulderPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnLeftShoulderPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnLeftShoulderPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnLeftShoulderReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnLeftShoulderReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnLeftShoulderReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnLeftShoulderReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnLeftShoulderReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnLeftShoulderReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnLeftShoulderReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnLeftShoulderReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnLeftStickAxis
// 0x0010 (0x0010 - 0x0000)
struct WBP_TopInfo_C_OnLeftStickAxis final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnLeftStickAxis) == 0x000008, "Wrong alignment on WBP_TopInfo_C_OnLeftStickAxis");
static_assert(sizeof(WBP_TopInfo_C_OnLeftStickAxis) == 0x000010, "Wrong size on WBP_TopInfo_C_OnLeftStickAxis");
static_assert(offsetof(WBP_TopInfo_C_OnLeftStickAxis, Value) == 0x000000, "Member 'WBP_TopInfo_C_OnLeftStickAxis::Value' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnLeftStickAxisWithPlayerId
// 0x0018 (0x0018 - 0x0000)
struct WBP_TopInfo_C_OnLeftStickAxisWithPlayerId final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerControllerIndex;                             // 0x0010(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnLeftStickAxisWithPlayerId) == 0x000008, "Wrong alignment on WBP_TopInfo_C_OnLeftStickAxisWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnLeftStickAxisWithPlayerId) == 0x000018, "Wrong size on WBP_TopInfo_C_OnLeftStickAxisWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnLeftStickAxisWithPlayerId, Value) == 0x000000, "Member 'WBP_TopInfo_C_OnLeftStickAxisWithPlayerId::Value' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_OnLeftStickAxisWithPlayerId, PlayerControllerIndex) == 0x000010, "Member 'WBP_TopInfo_C_OnLeftStickAxisWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnLeftStickButtonPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnLeftStickButtonPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnLeftStickButtonPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnLeftStickButtonPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnLeftStickButtonPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnLeftStickButtonPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnLeftStickButtonPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnLeftStickButtonPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnLeftStickButtonReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnLeftStickButtonReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnLeftStickButtonReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnLeftStickButtonReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnLeftStickButtonReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnLeftStickButtonReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnLeftStickButtonReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnLeftStickButtonReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnRightKeyPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnRightKeyPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnRightKeyPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnRightKeyPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnRightKeyPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnRightKeyPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnRightKeyPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnRightKeyPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnRightKeyReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnRightKeyReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnRightKeyReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnRightKeyReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnRightKeyReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnRightKeyReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnRightKeyReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnRightKeyReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnRightShoulderPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnRightShoulderPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnRightShoulderPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnRightShoulderPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnRightShoulderPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnRightShoulderPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnRightShoulderPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnRightShoulderPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnRightShoulderReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnRightShoulderReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnRightShoulderReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnRightShoulderReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnRightShoulderReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnRightShoulderReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnRightShoulderReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnRightShoulderReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnRightStickAxis
// 0x0010 (0x0010 - 0x0000)
struct WBP_TopInfo_C_OnRightStickAxis final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnRightStickAxis) == 0x000008, "Wrong alignment on WBP_TopInfo_C_OnRightStickAxis");
static_assert(sizeof(WBP_TopInfo_C_OnRightStickAxis) == 0x000010, "Wrong size on WBP_TopInfo_C_OnRightStickAxis");
static_assert(offsetof(WBP_TopInfo_C_OnRightStickAxis, Value) == 0x000000, "Member 'WBP_TopInfo_C_OnRightStickAxis::Value' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnRightStickAxisWithPlayerId
// 0x0018 (0x0018 - 0x0000)
struct WBP_TopInfo_C_OnRightStickAxisWithPlayerId final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerControllerIndex;                             // 0x0010(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnRightStickAxisWithPlayerId) == 0x000008, "Wrong alignment on WBP_TopInfo_C_OnRightStickAxisWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnRightStickAxisWithPlayerId) == 0x000018, "Wrong size on WBP_TopInfo_C_OnRightStickAxisWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnRightStickAxisWithPlayerId, Value) == 0x000000, "Member 'WBP_TopInfo_C_OnRightStickAxisWithPlayerId::Value' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_OnRightStickAxisWithPlayerId, PlayerControllerIndex) == 0x000010, "Member 'WBP_TopInfo_C_OnRightStickAxisWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnRightStickButtonPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnRightStickButtonPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnRightStickButtonPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnRightStickButtonPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnRightStickButtonPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnRightStickButtonPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnRightStickButtonPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnRightStickButtonPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnRightStickButtonReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnRightStickButtonReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnRightStickButtonReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnRightStickButtonReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnRightStickButtonReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnRightStickButtonReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnRightStickButtonReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnRightStickButtonReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnSpecialPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnSpecialPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnSpecialPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnSpecialPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnSpecialPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnSpecialPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnSpecialPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnSpecialPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnSpecialReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnSpecialReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnSpecialReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnSpecialReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnSpecialReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnSpecialReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnSpecialReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnSpecialReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnUpKeyPressedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnUpKeyPressedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnUpKeyPressedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnUpKeyPressedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnUpKeyPressedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnUpKeyPressedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnUpKeyPressedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnUpKeyPressedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.OnUpKeyReleasedWithPlayerId
// 0x0004 (0x0004 - 0x0000)
struct WBP_TopInfo_C_OnUpKeyReleasedWithPlayerId final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_OnUpKeyReleasedWithPlayerId) == 0x000004, "Wrong alignment on WBP_TopInfo_C_OnUpKeyReleasedWithPlayerId");
static_assert(sizeof(WBP_TopInfo_C_OnUpKeyReleasedWithPlayerId) == 0x000004, "Wrong size on WBP_TopInfo_C_OnUpKeyReleasedWithPlayerId");
static_assert(offsetof(WBP_TopInfo_C_OnUpKeyReleasedWithPlayerId, PlayerControllerIndex) == 0x000000, "Member 'WBP_TopInfo_C_OnUpKeyReleasedWithPlayerId::PlayerControllerIndex' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.Setup Current Page
// 0x0001 (0x0001 - 0x0000)
struct WBP_TopInfo_C_Setup_Current_Page final
{
public:
	ETopInfoWidgetPageCategory                    ReturnPage;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_Setup_Current_Page) == 0x000001, "Wrong alignment on WBP_TopInfo_C_Setup_Current_Page");
static_assert(sizeof(WBP_TopInfo_C_Setup_Current_Page) == 0x000001, "Wrong size on WBP_TopInfo_C_Setup_Current_Page");
static_assert(offsetof(WBP_TopInfo_C_Setup_Current_Page, ReturnPage) == 0x000000, "Member 'WBP_TopInfo_C_Setup_Current_Page::ReturnPage' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.SetupCollaboInfo
// 0x0108 (0x0108 - 0x0000)
struct WBP_TopInfo_C_SetupCollaboInfo final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   DateTimeText;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FDateTime                              StartTime;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNew;                                             // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             L_Texture;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   L_Schedule;                                        // 0x0040(0x0010)(Edit, BlueprintVisible)
	class FText                                   L_Title;                                           // 0x0050(0x0010)(Edit, BlueprintVisible)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0068(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue;                 // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_LocalizeDateTimePlaceholder_ReturnValue;  // 0x0080(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0090(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00E8(0x0010)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_SetupCollaboInfo) == 0x000008, "Wrong alignment on WBP_TopInfo_C_SetupCollaboInfo");
static_assert(sizeof(WBP_TopInfo_C_SetupCollaboInfo) == 0x000108, "Wrong size on WBP_TopInfo_C_SetupCollaboInfo");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, Title) == 0x000000, "Member 'WBP_TopInfo_C_SetupCollaboInfo::Title' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, DateTimeText) == 0x000010, "Member 'WBP_TopInfo_C_SetupCollaboInfo::DateTimeText' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, StartTime) == 0x000020, "Member 'WBP_TopInfo_C_SetupCollaboInfo::StartTime' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, Texture) == 0x000028, "Member 'WBP_TopInfo_C_SetupCollaboInfo::Texture' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, IsNew) == 0x000030, "Member 'WBP_TopInfo_C_SetupCollaboInfo::IsNew' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, L_Texture) == 0x000038, "Member 'WBP_TopInfo_C_SetupCollaboInfo::L_Texture' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, L_Schedule) == 0x000040, "Member 'WBP_TopInfo_C_SetupCollaboInfo::L_Schedule' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, L_Title) == 0x000050, "Member 'WBP_TopInfo_C_SetupCollaboInfo::L_Title' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, CallFunc_MakeLiteralByte_ReturnValue) == 0x000060, "Member 'WBP_TopInfo_C_SetupCollaboInfo::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000064, "Member 'WBP_TopInfo_C_SetupCollaboInfo::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, Temp_bool_Variable) == 0x000068, "Member 'WBP_TopInfo_C_SetupCollaboInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, CallFunc_MakeDateTime_ReturnValue) == 0x000070, "Member 'WBP_TopInfo_C_SetupCollaboInfo::CallFunc_MakeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, CallFunc_Array_AddUnique_ReturnValue) == 0x000078, "Member 'WBP_TopInfo_C_SetupCollaboInfo::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, CallFunc_LocalizeDateTimePlaceholder_ReturnValue) == 0x000080, "Member 'WBP_TopInfo_C_SetupCollaboInfo::CallFunc_LocalizeDateTimePlaceholder_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, K2Node_MakeStruct_FormatArgumentData) == 0x000090, "Member 'WBP_TopInfo_C_SetupCollaboInfo::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, K2Node_MakeArray_Array) == 0x0000D8, "Member 'WBP_TopInfo_C_SetupCollaboInfo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, CallFunc_Format_ReturnValue) == 0x0000E8, "Member 'WBP_TopInfo_C_SetupCollaboInfo::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupCollaboInfo, CallFunc_Conv_TextToString_ReturnValue) == 0x0000F8, "Member 'WBP_TopInfo_C_SetupCollaboInfo::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.SetupDLCInfo
// 0x0118 (0x0118 - 0x0000)
struct WBP_TopInfo_C_SetupDLCInfo final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   DateTimeText;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FDateTime                              StartTime;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             TextureBG;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnline;                                          // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNew;                                             // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   L_ButtonText;                                      // 0x0038(0x0010)(Edit, BlueprintVisible)
	class UTexture2D*                             L_Texture;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   L_Schedule;                                        // 0x0050(0x0010)(Edit, BlueprintVisible)
	class FText                                   L_Title;                                           // 0x0060(0x0010)(Edit, BlueprintVisible)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0070(0x0048)(HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00D0(0x0010)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00F8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue;                 // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_LocalizeDateTimePlaceholder_ReturnValue;  // 0x0108(0x0010)()
};
static_assert(alignof(WBP_TopInfo_C_SetupDLCInfo) == 0x000008, "Wrong alignment on WBP_TopInfo_C_SetupDLCInfo");
static_assert(sizeof(WBP_TopInfo_C_SetupDLCInfo) == 0x000118, "Wrong size on WBP_TopInfo_C_SetupDLCInfo");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, Title) == 0x000000, "Member 'WBP_TopInfo_C_SetupDLCInfo::Title' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, DateTimeText) == 0x000010, "Member 'WBP_TopInfo_C_SetupDLCInfo::DateTimeText' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, StartTime) == 0x000020, "Member 'WBP_TopInfo_C_SetupDLCInfo::StartTime' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, TextureBG) == 0x000028, "Member 'WBP_TopInfo_C_SetupDLCInfo::TextureBG' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, IsOnline) == 0x000030, "Member 'WBP_TopInfo_C_SetupDLCInfo::IsOnline' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, IsNew) == 0x000031, "Member 'WBP_TopInfo_C_SetupDLCInfo::IsNew' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, L_ButtonText) == 0x000038, "Member 'WBP_TopInfo_C_SetupDLCInfo::L_ButtonText' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, L_Texture) == 0x000048, "Member 'WBP_TopInfo_C_SetupDLCInfo::L_Texture' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, L_Schedule) == 0x000050, "Member 'WBP_TopInfo_C_SetupDLCInfo::L_Schedule' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, L_Title) == 0x000060, "Member 'WBP_TopInfo_C_SetupDLCInfo::L_Title' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, K2Node_MakeStruct_FormatArgumentData) == 0x000070, "Member 'WBP_TopInfo_C_SetupDLCInfo::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, CallFunc_Not_PreBool_ReturnValue) == 0x0000B8, "Member 'WBP_TopInfo_C_SetupDLCInfo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, K2Node_MakeArray_Array) == 0x0000C0, "Member 'WBP_TopInfo_C_SetupDLCInfo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, CallFunc_Format_ReturnValue) == 0x0000D0, "Member 'WBP_TopInfo_C_SetupDLCInfo::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, CallFunc_Conv_TextToString_ReturnValue) == 0x0000E0, "Member 'WBP_TopInfo_C_SetupDLCInfo::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, CallFunc_MakeLiteralByte_ReturnValue) == 0x0000F0, "Member 'WBP_TopInfo_C_SetupDLCInfo::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, CallFunc_Conv_ByteToInt_ReturnValue) == 0x0000F4, "Member 'WBP_TopInfo_C_SetupDLCInfo::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, Temp_bool_Variable) == 0x0000F8, "Member 'WBP_TopInfo_C_SetupDLCInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, CallFunc_Array_AddUnique_ReturnValue) == 0x0000FC, "Member 'WBP_TopInfo_C_SetupDLCInfo::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, CallFunc_MakeDateTime_ReturnValue) == 0x000100, "Member 'WBP_TopInfo_C_SetupDLCInfo::CallFunc_MakeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupDLCInfo, CallFunc_LocalizeDateTimePlaceholder_ReturnValue) == 0x000108, "Member 'WBP_TopInfo_C_SetupDLCInfo::CallFunc_LocalizeDateTimePlaceholder_ReturnValue' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.SetupEmarjencyInfo
// 0x0090 (0x0090 - 0x0000)
struct WBP_TopInfo_C_SetupEmarjencyInfo final
{
public:
	bool                                          IsNew;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_DetailTextIndex;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 L_DisableGadgetLegendCompe;                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 L_DisableGadgetFesta;                              // 0x0018(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 L_DisableGadgetRankMatch;                          // 0x0028(0x0010)(Edit, BlueprintVisible)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0039(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNetMasterDataManageSubsystem*          CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETopInfoWidgetPageCategory                    Temp_byte_Variable;                                // 0x0048(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetRaceDisableGadgetsLegendCompe_RefGadgetIds; // 0x0050(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetRaceDisableGadgetsFesta_RefGadgetIds;  // 0x0068(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetRaceDisableGadgetDetailTextIndex_TextIndex; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetRaceDisableGadgetDetailTextIndex_ReturnValue; // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetRaceDisableGadgetsRankMatch_RefGadgetIds; // 0x0080(0x0010)(ReferenceParm)
};
static_assert(alignof(WBP_TopInfo_C_SetupEmarjencyInfo) == 0x000008, "Wrong alignment on WBP_TopInfo_C_SetupEmarjencyInfo");
static_assert(sizeof(WBP_TopInfo_C_SetupEmarjencyInfo) == 0x000090, "Wrong size on WBP_TopInfo_C_SetupEmarjencyInfo");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, IsNew) == 0x000000, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::IsNew' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, L_DetailTextIndex) == 0x000004, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::L_DetailTextIndex' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, L_DisableGadgetLegendCompe) == 0x000008, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::L_DisableGadgetLegendCompe' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, L_DisableGadgetFesta) == 0x000018, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::L_DisableGadgetFesta' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, L_DisableGadgetRankMatch) == 0x000028, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::L_DisableGadgetRankMatch' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, CallFunc_MakeLiteralByte_ReturnValue) == 0x000038, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, Temp_bool_Variable) == 0x000039, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00003C, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000040, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, Temp_byte_Variable) == 0x000048, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, CallFunc_GetRaceDisableGadgetsLegendCompe_RefGadgetIds) == 0x000050, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::CallFunc_GetRaceDisableGadgetsLegendCompe_RefGadgetIds' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, CallFunc_Array_AddUnique_ReturnValue) == 0x000060, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, CallFunc_GetRaceDisableGadgetsFesta_RefGadgetIds) == 0x000068, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::CallFunc_GetRaceDisableGadgetsFesta_RefGadgetIds' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, CallFunc_GetRaceDisableGadgetDetailTextIndex_TextIndex) == 0x000078, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::CallFunc_GetRaceDisableGadgetDetailTextIndex_TextIndex' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, CallFunc_GetRaceDisableGadgetDetailTextIndex_ReturnValue) == 0x00007C, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::CallFunc_GetRaceDisableGadgetDetailTextIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupEmarjencyInfo, CallFunc_GetRaceDisableGadgetsRankMatch_RefGadgetIds) == 0x000080, "Member 'WBP_TopInfo_C_SetupEmarjencyInfo::CallFunc_GetRaceDisableGadgetsRankMatch_RefGadgetIds' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.SetupFestaInfo
// 0x0128 (0x0128 - 0x0000)
struct WBP_TopInfo_C_SetupFestaInfo final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FDateTime                              StartTime;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              endTime;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             TextureBG;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNew;                                             // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   L_ButtonText;                                      // 0x0030(0x0010)(Edit, BlueprintVisible)
	class UTexture2D*                             L_Texture;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   L_Shedule;                                         // 0x0048(0x0010)(Edit, BlueprintVisible)
	class FText                                   L_Title;                                           // 0x0058(0x0010)(Edit, BlueprintVisible)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0070(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0078(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00D0(0x0010)()
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x00F8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0108(0x0010)()
	class FText                                   CallFunc_LocalizeDateTimePlaceholder_ReturnValue;  // 0x0118(0x0010)()
};
static_assert(alignof(WBP_TopInfo_C_SetupFestaInfo) == 0x000008, "Wrong alignment on WBP_TopInfo_C_SetupFestaInfo");
static_assert(sizeof(WBP_TopInfo_C_SetupFestaInfo) == 0x000128, "Wrong size on WBP_TopInfo_C_SetupFestaInfo");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, Title) == 0x000000, "Member 'WBP_TopInfo_C_SetupFestaInfo::Title' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, StartTime) == 0x000010, "Member 'WBP_TopInfo_C_SetupFestaInfo::StartTime' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, endTime) == 0x000018, "Member 'WBP_TopInfo_C_SetupFestaInfo::endTime' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, TextureBG) == 0x000020, "Member 'WBP_TopInfo_C_SetupFestaInfo::TextureBG' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, IsNew) == 0x000028, "Member 'WBP_TopInfo_C_SetupFestaInfo::IsNew' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, L_ButtonText) == 0x000030, "Member 'WBP_TopInfo_C_SetupFestaInfo::L_ButtonText' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, L_Texture) == 0x000040, "Member 'WBP_TopInfo_C_SetupFestaInfo::L_Texture' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, L_Shedule) == 0x000048, "Member 'WBP_TopInfo_C_SetupFestaInfo::L_Shedule' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, L_Title) == 0x000058, "Member 'WBP_TopInfo_C_SetupFestaInfo::L_Title' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, CallFunc_MakeLiteralByte_ReturnValue) == 0x000068, "Member 'WBP_TopInfo_C_SetupFestaInfo::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00006C, "Member 'WBP_TopInfo_C_SetupFestaInfo::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, Temp_bool_Variable) == 0x000070, "Member 'WBP_TopInfo_C_SetupFestaInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, K2Node_MakeStruct_FormatArgumentData) == 0x000078, "Member 'WBP_TopInfo_C_SetupFestaInfo::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, K2Node_MakeArray_Array) == 0x0000C0, "Member 'WBP_TopInfo_C_SetupFestaInfo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, CallFunc_Format_ReturnValue) == 0x0000D0, "Member 'WBP_TopInfo_C_SetupFestaInfo::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, CallFunc_Array_AddUnique_ReturnValue) == 0x0000E0, "Member 'WBP_TopInfo_C_SetupFestaInfo::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, CallFunc_Conv_TextToString_ReturnValue) == 0x0000E8, "Member 'WBP_TopInfo_C_SetupFestaInfo::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, K2Node_MakeArray_Array_1) == 0x0000F8, "Member 'WBP_TopInfo_C_SetupFestaInfo::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, CallFunc_Format_ReturnValue_1) == 0x000108, "Member 'WBP_TopInfo_C_SetupFestaInfo::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupFestaInfo, CallFunc_LocalizeDateTimePlaceholder_ReturnValue) == 0x000118, "Member 'WBP_TopInfo_C_SetupFestaInfo::CallFunc_LocalizeDateTimePlaceholder_ReturnValue' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.SetupLegendInfo
// 0x0138 (0x0138 - 0x0000)
struct WBP_TopInfo_C_SetupLegendInfo final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FDateTime                              StartTime;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              endTime;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             TextureBG;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNew;                                             // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             L_Texture;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   L_Schedule;                                        // 0x0038(0x0010)(Edit, BlueprintVisible)
	class FText                                   L_Title;                                           // 0x0048(0x0010)(Edit, BlueprintVisible)
	class FText                                   CallFunc_MakeDateTimeText_ReturnValue;             // 0x0058(0x0010)()
	class FText                                   CallFunc_MakeDateTimeText_ReturnValue_1;           // 0x0068(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0078(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00C0(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0108(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0118(0x0010)()
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0134(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_SetupLegendInfo) == 0x000008, "Wrong alignment on WBP_TopInfo_C_SetupLegendInfo");
static_assert(sizeof(WBP_TopInfo_C_SetupLegendInfo) == 0x000138, "Wrong size on WBP_TopInfo_C_SetupLegendInfo");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, Title) == 0x000000, "Member 'WBP_TopInfo_C_SetupLegendInfo::Title' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, StartTime) == 0x000010, "Member 'WBP_TopInfo_C_SetupLegendInfo::StartTime' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, endTime) == 0x000018, "Member 'WBP_TopInfo_C_SetupLegendInfo::endTime' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, TextureBG) == 0x000020, "Member 'WBP_TopInfo_C_SetupLegendInfo::TextureBG' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, IsNew) == 0x000028, "Member 'WBP_TopInfo_C_SetupLegendInfo::IsNew' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, L_Texture) == 0x000030, "Member 'WBP_TopInfo_C_SetupLegendInfo::L_Texture' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, L_Schedule) == 0x000038, "Member 'WBP_TopInfo_C_SetupLegendInfo::L_Schedule' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, L_Title) == 0x000048, "Member 'WBP_TopInfo_C_SetupLegendInfo::L_Title' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, CallFunc_MakeDateTimeText_ReturnValue) == 0x000058, "Member 'WBP_TopInfo_C_SetupLegendInfo::CallFunc_MakeDateTimeText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, CallFunc_MakeDateTimeText_ReturnValue_1) == 0x000068, "Member 'WBP_TopInfo_C_SetupLegendInfo::CallFunc_MakeDateTimeText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, K2Node_MakeStruct_FormatArgumentData) == 0x000078, "Member 'WBP_TopInfo_C_SetupLegendInfo::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000C0, "Member 'WBP_TopInfo_C_SetupLegendInfo::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, K2Node_MakeArray_Array) == 0x000108, "Member 'WBP_TopInfo_C_SetupLegendInfo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, CallFunc_Format_ReturnValue) == 0x000118, "Member 'WBP_TopInfo_C_SetupLegendInfo::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, CallFunc_MakeLiteralByte_ReturnValue) == 0x000128, "Member 'WBP_TopInfo_C_SetupLegendInfo::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, CallFunc_Array_AddUnique_ReturnValue) == 0x00012C, "Member 'WBP_TopInfo_C_SetupLegendInfo::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000130, "Member 'WBP_TopInfo_C_SetupLegendInfo::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupLegendInfo, Temp_bool_Variable) == 0x000134, "Member 'WBP_TopInfo_C_SetupLegendInfo::Temp_bool_Variable' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.SetupWorldMatchInfo
// 0x0018 (0x0018 - 0x0000)
struct WBP_TopInfo_C_SetupWorldMatchInfo final
{
public:
	class FText                                   L_Title;                                           // 0x0000(0x0010)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_SetupWorldMatchInfo) == 0x000008, "Wrong alignment on WBP_TopInfo_C_SetupWorldMatchInfo");
static_assert(sizeof(WBP_TopInfo_C_SetupWorldMatchInfo) == 0x000018, "Wrong size on WBP_TopInfo_C_SetupWorldMatchInfo");
static_assert(offsetof(WBP_TopInfo_C_SetupWorldMatchInfo, L_Title) == 0x000000, "Member 'WBP_TopInfo_C_SetupWorldMatchInfo::L_Title' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupWorldMatchInfo, Temp_bool_Variable) == 0x000010, "Member 'WBP_TopInfo_C_SetupWorldMatchInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupWorldMatchInfo, CallFunc_MakeLiteralByte_ReturnValue) == 0x000011, "Member 'WBP_TopInfo_C_SetupWorldMatchInfo::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_SetupWorldMatchInfo, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000014, "Member 'WBP_TopInfo_C_SetupWorldMatchInfo::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.SilentFocusReady
// 0x0001 (0x0001 - 0x0000)
struct WBP_TopInfo_C_SilentFocusReady final
{
public:
	bool                                          bOnce;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_SilentFocusReady) == 0x000001, "Wrong alignment on WBP_TopInfo_C_SilentFocusReady");
static_assert(sizeof(WBP_TopInfo_C_SilentFocusReady) == 0x000001, "Wrong size on WBP_TopInfo_C_SilentFocusReady");
static_assert(offsetof(WBP_TopInfo_C_SilentFocusReady, bOnce) == 0x000000, "Member 'WBP_TopInfo_C_SilentFocusReady::bOnce' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.StartLeftScroll
// 0x0010 (0x0010 - 0x0000)
struct WBP_TopInfo_C_StartLeftScroll final
{
public:
	struct FSoundHandle                           CallFunc_SoundPlay_ReturnValue;                    // 0x0000(0x0004)()
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_StartLeftScroll) == 0x000008, "Wrong alignment on WBP_TopInfo_C_StartLeftScroll");
static_assert(sizeof(WBP_TopInfo_C_StartLeftScroll) == 0x000010, "Wrong size on WBP_TopInfo_C_StartLeftScroll");
static_assert(offsetof(WBP_TopInfo_C_StartLeftScroll, CallFunc_SoundPlay_ReturnValue) == 0x000000, "Member 'WBP_TopInfo_C_StartLeftScroll::CallFunc_SoundPlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_StartLeftScroll, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'WBP_TopInfo_C_StartLeftScroll::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.StartRightScroll
// 0x0010 (0x0010 - 0x0000)
struct WBP_TopInfo_C_StartRightScroll final
{
public:
	struct FSoundHandle                           CallFunc_SoundPlay_ReturnValue;                    // 0x0000(0x0004)()
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_StartRightScroll) == 0x000008, "Wrong alignment on WBP_TopInfo_C_StartRightScroll");
static_assert(sizeof(WBP_TopInfo_C_StartRightScroll) == 0x000010, "Wrong size on WBP_TopInfo_C_StartRightScroll");
static_assert(offsetof(WBP_TopInfo_C_StartRightScroll, CallFunc_SoundPlay_ReturnValue) == 0x000000, "Member 'WBP_TopInfo_C_StartRightScroll::CallFunc_SoundPlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_StartRightScroll, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'WBP_TopInfo_C_StartRightScroll::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function WBP_TopInfo.WBP_TopInfo_C.UpdatePageDisplay
// 0x000E (0x000E - 0x0000)
struct WBP_TopInfo_C_UpdatePageDisplay final
{
public:
	bool                                          IsCenterCategory_L;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCenterCategory_R;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNewAfterNextPage_ReturnValue;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNewNextPage_ReturnValue;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNewCurrentPage_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNewBeforePrevPage_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNewPrevPage_ReturnValue;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETopInfoWidgetPageCategory                    CallFunc_GetAfterNextPage_ReturnValue;             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETopInfoWidgetPageCategory                    CallFunc_GetNextPage_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETopInfoWidgetPageCategory                    CallFunc_GetCurrentPage_ReturnValue;               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETopInfoWidgetPageCategory                    CallFunc_GetBeforePrevPage_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETopInfoWidgetPageCategory                    CallFunc_GetPrevPage_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopInfo_C_UpdatePageDisplay) == 0x000001, "Wrong alignment on WBP_TopInfo_C_UpdatePageDisplay");
static_assert(sizeof(WBP_TopInfo_C_UpdatePageDisplay) == 0x00000E, "Wrong size on WBP_TopInfo_C_UpdatePageDisplay");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, IsCenterCategory_L) == 0x000000, "Member 'WBP_TopInfo_C_UpdatePageDisplay::IsCenterCategory_L' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, IsCenterCategory_R) == 0x000001, "Member 'WBP_TopInfo_C_UpdatePageDisplay::IsCenterCategory_R' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, CallFunc_IsNewAfterNextPage_ReturnValue) == 0x000002, "Member 'WBP_TopInfo_C_UpdatePageDisplay::CallFunc_IsNewAfterNextPage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, CallFunc_IsNewNextPage_ReturnValue) == 0x000003, "Member 'WBP_TopInfo_C_UpdatePageDisplay::CallFunc_IsNewNextPage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, CallFunc_IsNewCurrentPage_ReturnValue) == 0x000004, "Member 'WBP_TopInfo_C_UpdatePageDisplay::CallFunc_IsNewCurrentPage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, CallFunc_IsNewBeforePrevPage_ReturnValue) == 0x000005, "Member 'WBP_TopInfo_C_UpdatePageDisplay::CallFunc_IsNewBeforePrevPage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, CallFunc_IsNewPrevPage_ReturnValue) == 0x000006, "Member 'WBP_TopInfo_C_UpdatePageDisplay::CallFunc_IsNewPrevPage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, CallFunc_GetAfterNextPage_ReturnValue) == 0x000007, "Member 'WBP_TopInfo_C_UpdatePageDisplay::CallFunc_GetAfterNextPage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, CallFunc_BooleanOR_ReturnValue) == 0x000008, "Member 'WBP_TopInfo_C_UpdatePageDisplay::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, CallFunc_GetNextPage_ReturnValue) == 0x000009, "Member 'WBP_TopInfo_C_UpdatePageDisplay::CallFunc_GetNextPage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, CallFunc_Not_PreBool_ReturnValue) == 0x00000A, "Member 'WBP_TopInfo_C_UpdatePageDisplay::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, CallFunc_GetCurrentPage_ReturnValue) == 0x00000B, "Member 'WBP_TopInfo_C_UpdatePageDisplay::CallFunc_GetCurrentPage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, CallFunc_GetBeforePrevPage_ReturnValue) == 0x00000C, "Member 'WBP_TopInfo_C_UpdatePageDisplay::CallFunc_GetBeforePrevPage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopInfo_C_UpdatePageDisplay, CallFunc_GetPrevPage_ReturnValue) == 0x00000D, "Member 'WBP_TopInfo_C_UpdatePageDisplay::CallFunc_GetPrevPage_ReturnValue' has a wrong offset!");

}

