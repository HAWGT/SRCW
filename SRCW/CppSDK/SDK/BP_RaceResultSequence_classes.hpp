#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RaceResultSequence

#include "Basic.hpp"

#include "UNION_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RaceResultSequence.BP_RaceResultSequence_C
// 0x0080 (0x0400 - 0x0380)
class ABP_RaceResultSequence_C final : public ARaceResultSequence
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_RaceResultGhostSave_C*             BPC_RaceResultGhostSave;                           // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceResultRivalTeamResult_C*       BPC_RaceResultRivalTeamResult;                     // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceResultParty_C*                 BPC_RaceResultParty;                               // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceResultGhostEnd_C*              BPC_RaceResultNetwork;                             // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceResultSave_C*                  BPC_RaceResultSave;                                // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceResultCeremony_C*              BPC_RaceResultCeremony;                            // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceResultRateRank_C*              BPC_RaceResultRateRank;                            // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceResultReward_C*                BPC_RaceResultReward;                              // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceResultStats_C*                 BPC_RaceResultStats;                               // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ARacePlayerController*                  RacePlayerController;                              // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ResultWidget;                                      // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnEnd;                                             // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_RaceStandings_C*                    StandingsManager;                                  // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class URaceSequenceStateResult*               OwnerSeq;                                          // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void BPStart();
	void ExecuteUbergraph_BP_RaceResultSequence(int32 EntryPoint);
	void GetGroupRaceResultWidget(class UWBP_GroupResult_C** Widget);
	void OnFinalize();
	void OnInitialize();
	void OnInitStateExit();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RaceResultSequence_C">();
	}
	static class ABP_RaceResultSequence_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RaceResultSequence_C>();
	}
};
static_assert(alignof(ABP_RaceResultSequence_C) == 0x000008, "Wrong alignment on ABP_RaceResultSequence_C");
static_assert(sizeof(ABP_RaceResultSequence_C) == 0x000400, "Wrong size on ABP_RaceResultSequence_C");
static_assert(offsetof(ABP_RaceResultSequence_C, UberGraphFrame) == 0x000380, "Member 'ABP_RaceResultSequence_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, BPC_RaceResultGhostSave) == 0x000388, "Member 'ABP_RaceResultSequence_C::BPC_RaceResultGhostSave' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, BPC_RaceResultRivalTeamResult) == 0x000390, "Member 'ABP_RaceResultSequence_C::BPC_RaceResultRivalTeamResult' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, BPC_RaceResultParty) == 0x000398, "Member 'ABP_RaceResultSequence_C::BPC_RaceResultParty' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, BPC_RaceResultNetwork) == 0x0003A0, "Member 'ABP_RaceResultSequence_C::BPC_RaceResultNetwork' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, BPC_RaceResultSave) == 0x0003A8, "Member 'ABP_RaceResultSequence_C::BPC_RaceResultSave' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, BPC_RaceResultCeremony) == 0x0003B0, "Member 'ABP_RaceResultSequence_C::BPC_RaceResultCeremony' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, BPC_RaceResultRateRank) == 0x0003B8, "Member 'ABP_RaceResultSequence_C::BPC_RaceResultRateRank' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, BPC_RaceResultReward) == 0x0003C0, "Member 'ABP_RaceResultSequence_C::BPC_RaceResultReward' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, BPC_RaceResultStats) == 0x0003C8, "Member 'ABP_RaceResultSequence_C::BPC_RaceResultStats' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, RacePlayerController) == 0x0003D0, "Member 'ABP_RaceResultSequence_C::RacePlayerController' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, ResultWidget) == 0x0003D8, "Member 'ABP_RaceResultSequence_C::ResultWidget' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, OnEnd) == 0x0003E0, "Member 'ABP_RaceResultSequence_C::OnEnd' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, StandingsManager) == 0x0003F0, "Member 'ABP_RaceResultSequence_C::StandingsManager' has a wrong offset!");
static_assert(offsetof(ABP_RaceResultSequence_C, OwnerSeq) == 0x0003F8, "Member 'ABP_RaceResultSequence_C::OwnerSeq' has a wrong offset!");

}

