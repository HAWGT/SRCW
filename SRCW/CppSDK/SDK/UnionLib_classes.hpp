#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnionLib

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "UnionLib_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class UnionLib.AppScreenLogBPF
// 0x0000 (0x0028 - 0x0028)
class UAppScreenLogBPF final : public UBlueprintFunctionLibrary
{
public:
	static void AppLogString(class UObject* WorldContextObject, const class FString& Message, EAppBlueprintLogVerbosity Verbosity);
	static void AppLogStringStrong(class UObject* WorldContextObject, const class FString& Message, EAppBlueprintLogVerbosity Verbosity);
	static void AppLogText(class UObject* WorldContextObject, const class FText& Message, EAppBlueprintLogVerbosity Verbosity);
	static void AppLogTextStrong(class UObject* WorldContextObject, const class FText& Message, EAppBlueprintLogVerbosity Verbosity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppScreenLogBPF">();
	}
	static class UAppScreenLogBPF* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppScreenLogBPF>();
	}
};
static_assert(alignof(UAppScreenLogBPF) == 0x000008, "Wrong alignment on UAppScreenLogBPF");
static_assert(sizeof(UAppScreenLogBPF) == 0x000028, "Wrong size on UAppScreenLogBPF");

// Class UnionLib.BPFL_Config
// 0x0000 (0x0028 - 0x0028)
class UBPFL_Config final : public UBlueprintFunctionLibrary
{
public:
	static bool GetBoolFromConfig(const class FString& Filename, const class FString& Section, const class FString& Key, bool* ConfigValue, bool CacheClear);
	static bool GetBoolFromConfigGameIni(const class FString& Section, const class FString& Key, bool* ConfigValue);
	static bool GetFloatFromConfig(const class FString& Filename, const class FString& Section, const class FString& Key, float* ConfigValue);
	static bool GetFloatFromConfigGameIni(const class FString& Section, const class FString& Key, float* ConfigValue);
	static bool GetIntFromConfig(const class FString& Filename, const class FString& Section, const class FString& Key, int32* ConfigValue, bool CacheClear);
	static bool GetIntFromConfigGameIni(const class FString& Section, const class FString& Key, int32* ConfigValue);
	static int32 GetStringArrayFromConfig(const class FString& Filename, const class FString& Section, const class FString& Key, TArray<class FString>* ConfigValue);
	static int32 GetStringArrayFromConfigGameIni(const class FString& Section, const class FString& Key, TArray<class FString>* ConfigValue);
	static bool GetStringFromConfig(const class FString& Filename, const class FString& Section, const class FString& Key, class FString* ConfigValue);
	static bool GetStringFromConfigGameIni(const class FString& Section, const class FString& Key, class FString* ConfigValue);
	static bool GetTextFromConfig(const class FString& Filename, const class FString& Section, const class FString& Key, class FText* ConfigValue, bool CacheClear);
	static bool GetTextFromConfigGameIni(const class FString& Section, const class FString& Key, class FText* ConfigValue);
	static void SetBoolToConfig(const class FString& Filename, const class FString& Section, const class FString& Key, const bool& ConfigValue);
	static void SetFloatToConfig(const class FString& Filename, const class FString& Section, const class FString& Key, const float& ConfigValue);
	static void SetIntToConfig(const class FString& Filename, const class FString& Section, const class FString& Key, const int32& ConfigValue);
	static void SetStringToConfig(const class FString& Filename, const class FString& Section, const class FString& Key, const class FString& ConfigValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BPFL_Config">();
	}
	static class UBPFL_Config* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_Config>();
	}
};
static_assert(alignof(UBPFL_Config) == 0x000008, "Wrong alignment on UBPFL_Config");
static_assert(sizeof(UBPFL_Config) == 0x000028, "Wrong size on UBPFL_Config");

// Class UnionLib.GameSingletonManageSubsystem
// 0x0070 (0x00A0 - 0x0030)
class UGameSingletonManageSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x60];                                      // 0x0030(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        ObjectSingletonList;                               // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSingletonManageSubsystem">();
	}
	static class UGameSingletonManageSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSingletonManageSubsystem>();
	}
};
static_assert(alignof(UGameSingletonManageSubsystem) == 0x000008, "Wrong alignment on UGameSingletonManageSubsystem");
static_assert(sizeof(UGameSingletonManageSubsystem) == 0x0000A0, "Wrong size on UGameSingletonManageSubsystem");
static_assert(offsetof(UGameSingletonManageSubsystem, ObjectSingletonList) == 0x000090, "Member 'UGameSingletonManageSubsystem::ObjectSingletonList' has a wrong offset!");

// Class UnionLib.HierarchicalStateMachine
// 0x00D8 (0x0368 - 0x0290)
class AHierarchicalStateMachine : public AActor
{
public:
	class FName                                   StateMachineName;                                  // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   ChildStateMachineComponent;                        // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A0[0xA8];                                     // 0x02A0(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	class AHierarchicalStateMachine*              ChildStateMachine;                                 // 0x0348(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_350[0x18];                                     // 0x0350(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 AddStateInfo(const struct FHierarchicalStateMachineStateInfo& InStateInfo);
	void OnFinalize();
	void OnInitialize();
	void OnUpdate(float InDeltaTime);
	int32 RegisterStateInfo(int32 InState, const struct FHierarchicalStateMachineStateInfo& InStateInfo);
	void RegisterStateInfoMap(const TMap<int32, struct FHierarchicalStateMachineStateInfo>& InStateInfoMap);
	void SetExitCode(int32 InExitCode);
	void SetNextState(int32 InNextState);
	bool SetNextStateUsingName(class FName InNextStateName);

	void BuildHierarchicalStateMachineNames(TArray<class FString>* OutStringArray) const;
	class AHierarchicalStateMachine* GetChildStateMachine() const;
	int32 GetCurrentState() const;
	int32 GetCurrentStateFrame() const;
	class FName GetCurrentStateName() const;
	class FString GetCurrentStateNameAsString() const;
	float GetCurrentStateTime() const;
	int32 GetExitCode() const;
	int32 GetNextState() const;
	int32 GetStateCount() const;
	class FString GetStateMachineNameAsString() const;
	class FName GetStateName(int32 InState) const;
	class FString GetStateNameAsString(int32 InState) const;
	bool IsFinalized() const;
	bool IsInitialized() const;
	bool IsRunning() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HierarchicalStateMachine">();
	}
	static class AHierarchicalStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHierarchicalStateMachine>();
	}
};
static_assert(alignof(AHierarchicalStateMachine) == 0x000008, "Wrong alignment on AHierarchicalStateMachine");
static_assert(sizeof(AHierarchicalStateMachine) == 0x000368, "Wrong size on AHierarchicalStateMachine");
static_assert(offsetof(AHierarchicalStateMachine, StateMachineName) == 0x000290, "Member 'AHierarchicalStateMachine::StateMachineName' has a wrong offset!");
static_assert(offsetof(AHierarchicalStateMachine, ChildStateMachineComponent) == 0x000298, "Member 'AHierarchicalStateMachine::ChildStateMachineComponent' has a wrong offset!");
static_assert(offsetof(AHierarchicalStateMachine, ChildStateMachine) == 0x000348, "Member 'AHierarchicalStateMachine::ChildStateMachine' has a wrong offset!");

// Class UnionLib.HierarchicalStateMachineHolder
// 0x0048 (0x02D8 - 0x0290)
class AHierarchicalStateMachineHolder : public AActor
{
public:
	bool                                          bAutoActivateStateMachine;                         // 0x0290(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   RootStateMachineClass;                             // 0x0298(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHierarchicalStateMachine*              RootStateMachine;                                  // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChildActorComponent*                   RootStateMachineComponent;                         // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateStateMachine();
	void OnFinalize();

	class AHierarchicalStateMachine* GetRootStateMachine() const;
	bool IsStateMachineActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HierarchicalStateMachineHolder">();
	}
	static class AHierarchicalStateMachineHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHierarchicalStateMachineHolder>();
	}
};
static_assert(alignof(AHierarchicalStateMachineHolder) == 0x000008, "Wrong alignment on AHierarchicalStateMachineHolder");
static_assert(sizeof(AHierarchicalStateMachineHolder) == 0x0002D8, "Wrong size on AHierarchicalStateMachineHolder");
static_assert(offsetof(AHierarchicalStateMachineHolder, bAutoActivateStateMachine) == 0x000290, "Member 'AHierarchicalStateMachineHolder::bAutoActivateStateMachine' has a wrong offset!");
static_assert(offsetof(AHierarchicalStateMachineHolder, RootStateMachineClass) == 0x000298, "Member 'AHierarchicalStateMachineHolder::RootStateMachineClass' has a wrong offset!");
static_assert(offsetof(AHierarchicalStateMachineHolder, RootStateMachine) == 0x0002C0, "Member 'AHierarchicalStateMachineHolder::RootStateMachine' has a wrong offset!");
static_assert(offsetof(AHierarchicalStateMachineHolder, RootStateMachineComponent) == 0x0002C8, "Member 'AHierarchicalStateMachineHolder::RootStateMachineComponent' has a wrong offset!");

// Class UnionLib.HierarchicalStateMachineStateComponent
// 0x0058 (0x00F8 - 0x00A0)
class UHierarchicalStateMachineStateComponent : public UActorComponent
{
public:
	bool                                          bAutoRegistration;                                 // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultState;                                      // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultStateName;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ChildStateMachineClass;                            // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateEvenWhenPaused;                             // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedInitFadeOut;                                  // 0x00D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHierarchicalStateMachine*              OwnerStateMachine;                                 // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x10];                                      // 0x00E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetNeedInitFadeOut();
	void OnExitState();
	void OnInitState();
	void OnUpdateState(float InDeltaTime);
	void RegisterState(int32 InOverrideState, class FName InOverrideStateName);
	void SetExitCode(int32 InExitCode);
	void SetNeedInitFadeOut(bool InNeed);
	void SetNextState(int32 InNextState);

	class AHierarchicalStateMachine* GetChildStateMachine() const;
	int32 GetCurrentStateFrame() const;
	float GetCurrentStateTime() const;
	int32 GetDefaultState() const;
	int32 GetNextState() const;
	class AHierarchicalStateMachine* GetOwnerStateMachine() const;
	int32 GetState() const;
	int32 GetStateCount() const;
	class FName GetStateName() const;
	class FString GetStateNameAsString() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HierarchicalStateMachineStateComponent">();
	}
	static class UHierarchicalStateMachineStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHierarchicalStateMachineStateComponent>();
	}
};
static_assert(alignof(UHierarchicalStateMachineStateComponent) == 0x000008, "Wrong alignment on UHierarchicalStateMachineStateComponent");
static_assert(sizeof(UHierarchicalStateMachineStateComponent) == 0x0000F8, "Wrong size on UHierarchicalStateMachineStateComponent");
static_assert(offsetof(UHierarchicalStateMachineStateComponent, bAutoRegistration) == 0x0000A0, "Member 'UHierarchicalStateMachineStateComponent::bAutoRegistration' has a wrong offset!");
static_assert(offsetof(UHierarchicalStateMachineStateComponent, DefaultState) == 0x0000A4, "Member 'UHierarchicalStateMachineStateComponent::DefaultState' has a wrong offset!");
static_assert(offsetof(UHierarchicalStateMachineStateComponent, DefaultStateName) == 0x0000A8, "Member 'UHierarchicalStateMachineStateComponent::DefaultStateName' has a wrong offset!");
static_assert(offsetof(UHierarchicalStateMachineStateComponent, ChildStateMachineClass) == 0x0000B0, "Member 'UHierarchicalStateMachineStateComponent::ChildStateMachineClass' has a wrong offset!");
static_assert(offsetof(UHierarchicalStateMachineStateComponent, bUpdateEvenWhenPaused) == 0x0000D8, "Member 'UHierarchicalStateMachineStateComponent::bUpdateEvenWhenPaused' has a wrong offset!");
static_assert(offsetof(UHierarchicalStateMachineStateComponent, bNeedInitFadeOut) == 0x0000D9, "Member 'UHierarchicalStateMachineStateComponent::bNeedInitFadeOut' has a wrong offset!");
static_assert(offsetof(UHierarchicalStateMachineStateComponent, OwnerStateMachine) == 0x0000E0, "Member 'UHierarchicalStateMachineStateComponent::OwnerStateMachine' has a wrong offset!");

// Class UnionLib.SimpleBinaryAsset
// 0x0010 (0x0038 - 0x0028)
class USimpleBinaryAsset final : public UObject
{
public:
	TArray<uint8>                                 RawData;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleBinaryAsset">();
	}
	static class USimpleBinaryAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleBinaryAsset>();
	}
};
static_assert(alignof(USimpleBinaryAsset) == 0x000008, "Wrong alignment on USimpleBinaryAsset");
static_assert(sizeof(USimpleBinaryAsset) == 0x000038, "Wrong size on USimpleBinaryAsset");
static_assert(offsetof(USimpleBinaryAsset, RawData) == 0x000028, "Member 'USimpleBinaryAsset::RawData' has a wrong offset!");

// Class UnionLib.UnionDebugDrawLineSubsystem
// 0x0010 (0x0040 - 0x0030)
class UUnionDebugDrawLineSubsystem final : public UEngineSubsystem
{
public:
	bool                                          bDebugVisibleFlag;                                 // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Draw(class UCanvas* InCanvas, class APlayerController* InPC);
	void SetDebugVisibleFlag(bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnionDebugDrawLineSubsystem">();
	}
	static class UUnionDebugDrawLineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnionDebugDrawLineSubsystem>();
	}
};
static_assert(alignof(UUnionDebugDrawLineSubsystem) == 0x000008, "Wrong alignment on UUnionDebugDrawLineSubsystem");
static_assert(sizeof(UUnionDebugDrawLineSubsystem) == 0x000040, "Wrong size on UUnionDebugDrawLineSubsystem");
static_assert(offsetof(UUnionDebugDrawLineSubsystem, bDebugVisibleFlag) == 0x000030, "Member 'UUnionDebugDrawLineSubsystem::bDebugVisibleFlag' has a wrong offset!");

}

