#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_RaceSequenceStateResultRival

#include "Basic.hpp"

#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "UnionSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "UnionUI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C
// 0x0070 (0x01B0 - 0x0140)
class UBPC_RaceSequenceStateResultRival_C final : public URaceSequenceStateResultRival
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0140(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_Movie_Subtitles_C*                 SubtitleUI;                                        // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_RaceCameraActor_C*                  RaceCameraActor;                                   // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACameraActor*                           Camera;                                            // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    PlayerActor;                                       // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   Player;                                            // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class URewardGetDisplay*                      RewardGetUI;                                       // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         RivalVoiceDuration;                                // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASceneInputKeyHandler*                  InputKeyHandler;                                   // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ERewardAchievementType                        RewardAchievementType;                             // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRewardGetDisplay;                                 // 0x0189(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisabledSplitscreen;                               // 0x018A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18B[0x5];                                      // 0x018B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_RivalSelect_C*                     RivalSelectHUD;                                    // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SkipDelaySeconds;                                  // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RivalSelectSkipSeconds;                            // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RivalSelectAutoCloseSeconds;                       // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyRivalLevel();
	void BindFullScreenMouseClick(const TDelegate<void()>& Event);
	void CreateRewardGetDisplay(ERewardAchievementType InRewardAchievementType);
	void CreateRivalTransition();
	void DestroySequenceActor();
	void ExecuteUbergraph_BPC_RaceSequenceStateResultRival(int32 EntryPoint);
	void GetPlaySequencerPattern(int32* Result);
	void GetRewardAchievementType(bool* bOutRewardExist, ERewardAchievementType* OutRewardAchievementType);
	bool IsPlayerWin();
	void OnEnabledSkip();
	void OnEndResult();
	void OnExitState();
	void OnFinishedFade_Event(EUnionUIFadeDirection FadeDirection);
	void OnFinishedTransition_Event();
	void OnFinishedTransitionEffect_Event();
	void OnFullScreenMouseClickEvent();
	void OnFullScreenMouseClickSkipEvent();
	void OnInitState();
	void OnRewardDisplayEnd_Event();
	void OnRewardGetDisplayFinished();
	void OnRivalSelectSkipKeyPressed(const struct FKey& PressedKey);
	void OnSaveComplete_Event(ESaveDataStatus Status);
	void OnSkipKeyPressed(const struct FKey& PressedKey);
	void OnStartAnimation();
	void OnStateEndFadeFinished();
	void OnStateEndFinRemoveWidgets();
	void OnUpdateState(float InDeltaTime);
	void RivalBattleResultFin();
	void SetDefaultScreen();
	void SetSubtitle(const class FText& In_Subtitle);
	void StartMovieScene();
	void StartStateEndFade();
	void ToEndMenu();
	void UnbindFullScreenMouseClick(const TDelegate<void()>& Event);

	void GetRivalMessageFromTable(EDriverId In_RivalDriverId, EPerformRivalOutcome In_RivalOutcom, bool bIn_FinalRound, class FText* Out_Text) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_RaceSequenceStateResultRival_C">();
	}
	static class UBPC_RaceSequenceStateResultRival_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_RaceSequenceStateResultRival_C>();
	}
};
static_assert(alignof(UBPC_RaceSequenceStateResultRival_C) == 0x000008, "Wrong alignment on UBPC_RaceSequenceStateResultRival_C");
static_assert(sizeof(UBPC_RaceSequenceStateResultRival_C) == 0x0001B0, "Wrong size on UBPC_RaceSequenceStateResultRival_C");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, UberGraphFrame) == 0x000140, "Member 'UBPC_RaceSequenceStateResultRival_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, SubtitleUI) == 0x000148, "Member 'UBPC_RaceSequenceStateResultRival_C::SubtitleUI' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, RaceCameraActor) == 0x000150, "Member 'UBPC_RaceSequenceStateResultRival_C::RaceCameraActor' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, Camera) == 0x000158, "Member 'UBPC_RaceSequenceStateResultRival_C::Camera' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, PlayerActor) == 0x000160, "Member 'UBPC_RaceSequenceStateResultRival_C::PlayerActor' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, Player) == 0x000168, "Member 'UBPC_RaceSequenceStateResultRival_C::Player' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, RewardGetUI) == 0x000170, "Member 'UBPC_RaceSequenceStateResultRival_C::RewardGetUI' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, RivalVoiceDuration) == 0x000178, "Member 'UBPC_RaceSequenceStateResultRival_C::RivalVoiceDuration' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, InputKeyHandler) == 0x000180, "Member 'UBPC_RaceSequenceStateResultRival_C::InputKeyHandler' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, RewardAchievementType) == 0x000188, "Member 'UBPC_RaceSequenceStateResultRival_C::RewardAchievementType' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, bRewardGetDisplay) == 0x000189, "Member 'UBPC_RaceSequenceStateResultRival_C::bRewardGetDisplay' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, DisabledSplitscreen) == 0x00018A, "Member 'UBPC_RaceSequenceStateResultRival_C::DisabledSplitscreen' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, RivalSelectHUD) == 0x000190, "Member 'UBPC_RaceSequenceStateResultRival_C::RivalSelectHUD' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, SkipDelaySeconds) == 0x000198, "Member 'UBPC_RaceSequenceStateResultRival_C::SkipDelaySeconds' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, RivalSelectSkipSeconds) == 0x0001A0, "Member 'UBPC_RaceSequenceStateResultRival_C::RivalSelectSkipSeconds' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateResultRival_C, RivalSelectAutoCloseSeconds) == 0x0001A8, "Member 'UBPC_RaceSequenceStateResultRival_C::RivalSelectAutoCloseSeconds' has a wrong offset!");

}

