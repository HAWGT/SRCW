#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GFur

#include "Basic.hpp"

#include "GFur_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class GFur.GFurComponent
// 0x0240 (0x0790 - 0x0550)
class UGFurComponent final : public UMeshComponent
{
public:
	class USkeletalMesh*                          SkeletalGrowMesh;                                  // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticGrowMesh;                                    // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFurSplines*                            FurSplines;                                        // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                  SkeletalGuideMeshes;                               // 0x0568(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    StaticGuideMeshes;                                 // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LayerCount;                                        // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinScreenSize;                                     // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFurLod>                        LODs;                                              // 0x0590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          LODFromParent;                                     // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A1[0x3];                                      // 0x05A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShellBias;                                         // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FurLength;                                         // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFurLength;                                      // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveFacesWithoutSplines;                         // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PhysicsEnabled;                                    // 0x05B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B2[0x2];                                      // 0x05B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceDistribution;                                 // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConstantForce;                                     // 0x05C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForce;                                          // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForceTorqueFactor;                              // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceHairBias;                                 // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairLengthForceUniformity;                         // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPhysicsOffsetLength;                            // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseStrength;                                     // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableMorphTargets;                               // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F1[0x3];                                      // 0x05F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StreamingDistanceMultiplier;                       // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F8[0x198];                                    // 0x05F8(0x0198)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RegenerateFur();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GFurComponent">();
	}
	static class UGFurComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGFurComponent>();
	}
};
static_assert(alignof(UGFurComponent) == 0x000010, "Wrong alignment on UGFurComponent");
static_assert(sizeof(UGFurComponent) == 0x000790, "Wrong size on UGFurComponent");
static_assert(offsetof(UGFurComponent, SkeletalGrowMesh) == 0x000550, "Member 'UGFurComponent::SkeletalGrowMesh' has a wrong offset!");
static_assert(offsetof(UGFurComponent, StaticGrowMesh) == 0x000558, "Member 'UGFurComponent::StaticGrowMesh' has a wrong offset!");
static_assert(offsetof(UGFurComponent, FurSplines) == 0x000560, "Member 'UGFurComponent::FurSplines' has a wrong offset!");
static_assert(offsetof(UGFurComponent, SkeletalGuideMeshes) == 0x000568, "Member 'UGFurComponent::SkeletalGuideMeshes' has a wrong offset!");
static_assert(offsetof(UGFurComponent, StaticGuideMeshes) == 0x000578, "Member 'UGFurComponent::StaticGuideMeshes' has a wrong offset!");
static_assert(offsetof(UGFurComponent, LayerCount) == 0x000588, "Member 'UGFurComponent::LayerCount' has a wrong offset!");
static_assert(offsetof(UGFurComponent, MinScreenSize) == 0x00058C, "Member 'UGFurComponent::MinScreenSize' has a wrong offset!");
static_assert(offsetof(UGFurComponent, LODs) == 0x000590, "Member 'UGFurComponent::LODs' has a wrong offset!");
static_assert(offsetof(UGFurComponent, LODFromParent) == 0x0005A0, "Member 'UGFurComponent::LODFromParent' has a wrong offset!");
static_assert(offsetof(UGFurComponent, ShellBias) == 0x0005A4, "Member 'UGFurComponent::ShellBias' has a wrong offset!");
static_assert(offsetof(UGFurComponent, FurLength) == 0x0005A8, "Member 'UGFurComponent::FurLength' has a wrong offset!");
static_assert(offsetof(UGFurComponent, MinFurLength) == 0x0005AC, "Member 'UGFurComponent::MinFurLength' has a wrong offset!");
static_assert(offsetof(UGFurComponent, RemoveFacesWithoutSplines) == 0x0005B0, "Member 'UGFurComponent::RemoveFacesWithoutSplines' has a wrong offset!");
static_assert(offsetof(UGFurComponent, PhysicsEnabled) == 0x0005B1, "Member 'UGFurComponent::PhysicsEnabled' has a wrong offset!");
static_assert(offsetof(UGFurComponent, ForceDistribution) == 0x0005B4, "Member 'UGFurComponent::ForceDistribution' has a wrong offset!");
static_assert(offsetof(UGFurComponent, Stiffness) == 0x0005B8, "Member 'UGFurComponent::Stiffness' has a wrong offset!");
static_assert(offsetof(UGFurComponent, Damping) == 0x0005BC, "Member 'UGFurComponent::Damping' has a wrong offset!");
static_assert(offsetof(UGFurComponent, ConstantForce) == 0x0005C0, "Member 'UGFurComponent::ConstantForce' has a wrong offset!");
static_assert(offsetof(UGFurComponent, MaxForce) == 0x0005D8, "Member 'UGFurComponent::MaxForce' has a wrong offset!");
static_assert(offsetof(UGFurComponent, MaxForceTorqueFactor) == 0x0005DC, "Member 'UGFurComponent::MaxForceTorqueFactor' has a wrong offset!");
static_assert(offsetof(UGFurComponent, ReferenceHairBias) == 0x0005E0, "Member 'UGFurComponent::ReferenceHairBias' has a wrong offset!");
static_assert(offsetof(UGFurComponent, HairLengthForceUniformity) == 0x0005E4, "Member 'UGFurComponent::HairLengthForceUniformity' has a wrong offset!");
static_assert(offsetof(UGFurComponent, MaxPhysicsOffsetLength) == 0x0005E8, "Member 'UGFurComponent::MaxPhysicsOffsetLength' has a wrong offset!");
static_assert(offsetof(UGFurComponent, NoiseStrength) == 0x0005EC, "Member 'UGFurComponent::NoiseStrength' has a wrong offset!");
static_assert(offsetof(UGFurComponent, DisableMorphTargets) == 0x0005F0, "Member 'UGFurComponent::DisableMorphTargets' has a wrong offset!");
static_assert(offsetof(UGFurComponent, StreamingDistanceMultiplier) == 0x0005F4, "Member 'UGFurComponent::StreamingDistanceMultiplier' has a wrong offset!");

// Class GFur.FurSplines
// 0x0058 (0x0080 - 0x0028)
class UFurSplines final : public UObject
{
public:
	TArray<struct FVector>                        Vertices;                                          // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Index_0;                                           // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Count;                                             // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ControlPointCount;                                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ImportFilename;                                    // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImportTransformation;                              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FurSplines">();
	}
	static class UFurSplines* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFurSplines>();
	}
};
static_assert(alignof(UFurSplines) == 0x000008, "Wrong alignment on UFurSplines");
static_assert(sizeof(UFurSplines) == 0x000080, "Wrong size on UFurSplines");
static_assert(offsetof(UFurSplines, Vertices) == 0x000028, "Member 'UFurSplines::Vertices' has a wrong offset!");
static_assert(offsetof(UFurSplines, Index_0) == 0x000038, "Member 'UFurSplines::Index_0' has a wrong offset!");
static_assert(offsetof(UFurSplines, Count) == 0x000048, "Member 'UFurSplines::Count' has a wrong offset!");
static_assert(offsetof(UFurSplines, ControlPointCount) == 0x000058, "Member 'UFurSplines::ControlPointCount' has a wrong offset!");
static_assert(offsetof(UFurSplines, ImportFilename) == 0x000060, "Member 'UFurSplines::ImportFilename' has a wrong offset!");
static_assert(offsetof(UFurSplines, Version) == 0x000070, "Member 'UFurSplines::Version' has a wrong offset!");
static_assert(offsetof(UFurSplines, ImportTransformation) == 0x000074, "Member 'UFurSplines::ImportTransformation' has a wrong offset!");
static_assert(offsetof(UFurSplines, Threshold) == 0x000078, "Member 'UFurSplines::Threshold' has a wrong offset!");

}

