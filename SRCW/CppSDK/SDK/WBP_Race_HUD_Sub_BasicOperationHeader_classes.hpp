#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Race_HUD_Sub_BasicOperationHeader

#include "Basic.hpp"

#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Race_HUD_Sub_BasicOperationHeader.WBP_Race_HUD_Sub_BasicOperationHeader_C
// 0x0028 (0x0308 - 0x02E0)
class UWBP_Race_HUD_Sub_BasicOperationHeader_C final : public UUserWidget
{
public:
	class UWidgetAnimation*                       Operated_InOut;                                    // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Default_Loop;                                      // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 base;                                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Check;                                             // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_Guide;                                         // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void Init_with_Text(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Race_HUD_Sub_BasicOperationHeader_C">();
	}
	static class UWBP_Race_HUD_Sub_BasicOperationHeader_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Race_HUD_Sub_BasicOperationHeader_C>();
	}
};
static_assert(alignof(UWBP_Race_HUD_Sub_BasicOperationHeader_C) == 0x000008, "Wrong alignment on UWBP_Race_HUD_Sub_BasicOperationHeader_C");
static_assert(sizeof(UWBP_Race_HUD_Sub_BasicOperationHeader_C) == 0x000308, "Wrong size on UWBP_Race_HUD_Sub_BasicOperationHeader_C");
static_assert(offsetof(UWBP_Race_HUD_Sub_BasicOperationHeader_C, Operated_InOut) == 0x0002E0, "Member 'UWBP_Race_HUD_Sub_BasicOperationHeader_C::Operated_InOut' has a wrong offset!");
static_assert(offsetof(UWBP_Race_HUD_Sub_BasicOperationHeader_C, Default_Loop) == 0x0002E8, "Member 'UWBP_Race_HUD_Sub_BasicOperationHeader_C::Default_Loop' has a wrong offset!");
static_assert(offsetof(UWBP_Race_HUD_Sub_BasicOperationHeader_C, base) == 0x0002F0, "Member 'UWBP_Race_HUD_Sub_BasicOperationHeader_C::base' has a wrong offset!");
static_assert(offsetof(UWBP_Race_HUD_Sub_BasicOperationHeader_C, Check) == 0x0002F8, "Member 'UWBP_Race_HUD_Sub_BasicOperationHeader_C::Check' has a wrong offset!");
static_assert(offsetof(UWBP_Race_HUD_Sub_BasicOperationHeader_C, TXT_Guide) == 0x000300, "Member 'UWBP_Race_HUD_Sub_BasicOperationHeader_C::TXT_Guide' has a wrong offset!");

}

