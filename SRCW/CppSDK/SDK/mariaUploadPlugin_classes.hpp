#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: mariaUploadPlugin

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "mariaUploadPlugin_structs.hpp"


namespace SDK
{

// Class mariaUploadPlugin.MariaEpicIdentitySequence
// 0x0020 (0x0050 - 0x0030)
class UMariaEpicIdentitySequence final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool Success)>  Completed;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMariaEpicIdentitySequence* LoginEOS(class UObject* WorldContextObject, class APlayerController* PlayerController, EMariaEpicLoginType LoginType, const class FString& ID, const class FString& Token);
	static class UMariaEpicIdentitySequence* LogoutEOS(class UObject* WorldContextObject, class APlayerController* PlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MariaEpicIdentitySequence">();
	}
	static class UMariaEpicIdentitySequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMariaEpicIdentitySequence>();
	}
};
static_assert(alignof(UMariaEpicIdentitySequence) == 0x000008, "Wrong alignment on UMariaEpicIdentitySequence");
static_assert(sizeof(UMariaEpicIdentitySequence) == 0x000050, "Wrong size on UMariaEpicIdentitySequence");
static_assert(offsetof(UMariaEpicIdentitySequence, Completed) == 0x000030, "Member 'UMariaEpicIdentitySequence::Completed' has a wrong offset!");

// Class mariaUploadPlugin.MariaInitializeAuthSequence
// 0x0050 (0x0080 - 0x0030)
class UMariaInitializeAuthSequence final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(EMariaInitializeAuthResult Result)> CanStartLogging;               // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(EMariaInitializeAuthResult Result)> Completed;                     // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x30];                                      // 0x0050(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMariaInitializeAuthSequence* RunInitializeAuthSeq(class UObject* WorldContextObject, int32 Phase, const TDelegate<void(const class FString& RegistrationURL)>& UrlCallback, const TDelegate<void(const class FString& AccountID)>& IdCallback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MariaInitializeAuthSequence">();
	}
	static class UMariaInitializeAuthSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMariaInitializeAuthSequence>();
	}
};
static_assert(alignof(UMariaInitializeAuthSequence) == 0x000008, "Wrong alignment on UMariaInitializeAuthSequence");
static_assert(sizeof(UMariaInitializeAuthSequence) == 0x000080, "Wrong size on UMariaInitializeAuthSequence");
static_assert(offsetof(UMariaInitializeAuthSequence, CanStartLogging) == 0x000030, "Member 'UMariaInitializeAuthSequence::CanStartLogging' has a wrong offset!");
static_assert(offsetof(UMariaInitializeAuthSequence, Completed) == 0x000040, "Member 'UMariaInitializeAuthSequence::Completed' has a wrong offset!");

// Class mariaUploadPlugin.MariaSteamEncryptedAppTicketSequence
// 0x0058 (0x0088 - 0x0030)
class UMariaSteamEncryptedAppTicketSequence final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool Success, const TArray<uint8>& Ticket)> Completed;             // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x48];                                      // 0x0040(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMariaSteamEncryptedAppTicketSequence* RequestEncryptedAppTicket(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MariaSteamEncryptedAppTicketSequence">();
	}
	static class UMariaSteamEncryptedAppTicketSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMariaSteamEncryptedAppTicketSequence>();
	}
};
static_assert(alignof(UMariaSteamEncryptedAppTicketSequence) == 0x000008, "Wrong alignment on UMariaSteamEncryptedAppTicketSequence");
static_assert(sizeof(UMariaSteamEncryptedAppTicketSequence) == 0x000088, "Wrong size on UMariaSteamEncryptedAppTicketSequence");
static_assert(offsetof(UMariaSteamEncryptedAppTicketSequence, Completed) == 0x000030, "Member 'UMariaSteamEncryptedAppTicketSequence::Completed' has a wrong offset!");

// Class mariaUploadPlugin.MariaSwitchNetworkRequestSequence
// 0x0010 (0x0040 - 0x0030)
class UMariaSwitchNetworkRequestSequence final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool Available)> Completed;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	static class UMariaSwitchNetworkRequestSequence* Run_nn_nifm_SubmitNetworkRequest(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MariaSwitchNetworkRequestSequence">();
	}
	static class UMariaSwitchNetworkRequestSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMariaSwitchNetworkRequestSequence>();
	}
};
static_assert(alignof(UMariaSwitchNetworkRequestSequence) == 0x000008, "Wrong alignment on UMariaSwitchNetworkRequestSequence");
static_assert(sizeof(UMariaSwitchNetworkRequestSequence) == 0x000040, "Wrong size on UMariaSwitchNetworkRequestSequence");
static_assert(offsetof(UMariaSwitchNetworkRequestSequence, Completed) == 0x000030, "Member 'UMariaSwitchNetworkRequestSequence::Completed' has a wrong offset!");

// Class mariaUploadPlugin.MariaTableRowLibrary
// 0x0000 (0x0028 - 0x0028)
class UMariaTableRowLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddFloat(struct FMariaTableRow& Row, float Value);
	static void AddInt(struct FMariaTableRow& Row, int32 Value);
	static void AddString(struct FMariaTableRow& Row, const class FString& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MariaTableRowLibrary">();
	}
	static class UMariaTableRowLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMariaTableRowLibrary>();
	}
};
static_assert(alignof(UMariaTableRowLibrary) == 0x000008, "Wrong alignment on UMariaTableRowLibrary");
static_assert(sizeof(UMariaTableRowLibrary) == 0x000028, "Wrong size on UMariaTableRowLibrary");

// Class mariaUploadPlugin.MariaUpload
// 0x0000 (0x0028 - 0x0028)
class UMariaUpload final : public UBlueprintFunctionLibrary
{
public:
	static void AddEventParameterArrayFloat(const class FString& Key, const TArray<float>& Value);
	static void AddEventParameterArrayInteger(const class FString& Key, const TArray<int32>& Value);
	static void AddEventParameterArrayStrings(const class FString& Key, const TArray<class FString>& Value);
	static void AddEventParameterFloat(const class FString& Key, float Value);
	static void AddEventParameterInteger(const class FString& Key, int32 Value);
	static void AddEventParameterMapFloat(const class FString& Key, const TMap<class FString, float>& Value);
	static void AddEventParameterMapInteger(const class FString& Key, const TMap<class FString, int32>& Value);
	static void AddEventParameterMapString(const class FString& Key, const TMap<class FString, class FString>& Value);
	static void AddEventParameterMapStrings(const class FString& Key, const TMap<class FString, class FString>& Value);
	static void AddEventParameterStrings(const class FString& Key, const class FString& Value);
	static void AddEventParameterTable(const class FString& Key, const TArray<struct FMariaTableRow>& Value);
	static void AddUserParameterArrayFloat(const class FString& Key, const TArray<float>& Value);
	static void AddUserParameterArrayInteger(const class FString& Key, const TArray<int32>& Value);
	static void AddUserParameterArrayStrings(const class FString& Key, const TArray<class FString>& Value);
	static void AddUserParameterFloat(const class FString& Key, float Value);
	static void AddUserParameterInteger(const class FString& Key, int32 Value);
	static void AddUserParameterMapFloat(const class FString& Key, const TMap<class FString, float>& Value);
	static void AddUserParameterMapInteger(const class FString& Key, const TMap<class FString, int32>& Value);
	static void AddUserParameterMapString(const class FString& Key, const TMap<class FString, class FString>& Value);
	static void AddUserParameterMapStrings(const class FString& Key, const TMap<class FString, class FString>& Value);
	static void AddUserParameterStrings(const class FString& Key, const class FString& Value);
	static void AddUserParameterTable(const class FString& Key, const TArray<struct FMariaTableRow>& Value);
	static bool CanStartLogging();
	static void ChangeInitializeAuthSeqPhaseTo0();
	static bool CheckSegaAccountLinkStatus();
	static class UTexture2DDynamic* CreateQRCodeTextureDynamic(const struct FMariaQRCode& QRCode, int32 Border);
	static class FString GenerateTemporaryAccount();
	static int32 GetAccessTokenElapsedSeconds();
	static int32 GetAccessTokenErrorCount();
	static int32 GetAccessTokenNgCount();
	static EMariaDevelopLogCategory GetLogCategoryThreshold();
	static int32 GetMessagesNumInQueue();
	static class FString GetNetworkAccount_Epic();
	static class FString GetNetworkAccountString_GDK();
	static class FString GetNetworkAccountString_PS();
	static class FString GetNetworkAccountString_Steam();
	static class FString GetNetworkAccountString_Switch();
	static class FString GetPlatformString();
	static int32 GetPostErrorCount();
	static int32 GetPostNgCount();
	static int32 GetRecoveryWaitModeCount();
	static class FString GetSegaAccountID();
	static class FString GetUserID();
	static bool Initialize();
	static bool InitializeNNLibraries();
	static bool InitializeUltThread();
	static bool IsInitializeAuthSeqNeeded();
	static bool IsInRecoveryWaitMode();
	static bool IsLoggingAvailable();
	static bool IsOnMSPC();
	static bool IsOnXbox();
	static bool IsRunningUploading();
	static bool IsSegaAccountLinkPending();
	static bool IsSegaAccountLinkStatusChecking();
	static void LoginEOSAsync_Epic(class UObject* WorldContextObject, class APlayerController* PlayerController, EMariaEpicLoginType LoginType, const class FString& ID, const class FString& Token, TDelegate<void(bool Success)> Completed);
	static void LogoutEOSAsync_Epic(class UObject* WorldContextObject, class APlayerController* PlayerController, TDelegate<void(bool Success)> Completed);
	static EMariaInitializeAuthResult LoopInitializeAuthSeq(const TDelegate<void(const class FString& RegistrationURL)>& UrlCallback, const TDelegate<void(const class FString& AccountID)>& IdCallback);
	static struct FMariaQRCode MakeQRCode(const class FString& Text, int32 ErrorCorrectionLevel);
	static class FString MakeQRCodeSvgString(const struct FMariaQRCode& QRCode, int32 Border);
	static void nn_nifm_CancelNetworkRequest();
	static bool nn_nifm_IsNetworkAvailable();
	static bool nn_nifm_IsNetworkRequestOnHold();
	static void nn_nifm_SubmitNetworkRequest();
	static void OpenConsole(const class UObject* WorldContextObject);
	static void PostInitializeAuthSeq();
	static bool PreInitializeAuthSeq(int32 Phase);
	static void PushHeartbeatManually();
	static void PushMessage(const class FString& EventName);
	static void RegenerateSessionID();
	static bool ResetSegaAccountID();
	static void SetAccessEndpointDevMode(EMariaDevMode DevMode);
	static void SetActive(bool Active);
	static void SetAppInformations(const class FString& AppID, const class FString& PlatformId, const class FString& Language, const class FString& Region);
	static void SetAuthenticateDevMode_GDK(EMariaDevMode DevMode);
	static void SetAuthenticateDevMode_Steam(EMariaDevMode DevMode);
	static void SetAuthenticateDevMode_Switch(EMariaDevMode DevMode);
	static void SetDevMode(EMariaDevMode LogAuthDevMode, EMariaDevMode SegaAccountDevMode);
	static void SetHaltSending(bool Halt);
	static void SetHeartbeatDelay(int32 Seconds);
	static void SetInFocus(bool InFocus);
	static void SetInitializeParamApplicationId_GDK(const class FString& MSAAppID);
	static void SetInitializeParamApplicationId_Switch(const class FString& ApplicationID);
	static void SetInitializeParamUserHandle(bool* Success, bool* Cancelled, bool ShowUserSelector);
	static void SetLogCallback(const TDelegate<void(EMariaDevelopLogCategory Category, const class FString& Message)>& LogCallback);
	static void SetLogCategoryThreshold(EMariaDevelopLogCategory LogCategory);
	static void SetManualHeartbeatMode();
	static void SetNetworkAccount_Epic(const class FString& EpicAccountID);
	static bool SetNetworkAccountFromPlayerController_Epic(class APlayerController* PlayerController);
	static bool SetNetworkAccountFromUniqueNetID_Epic(const struct FUniqueNetIdRepl& UniqueNetId);
	static void SetPendingUntilNetworkAvailable_Switch(bool Enable);
	static void SetSaveSlot(int32 Slot);
	static void SetSegaAccountDevMode(EMariaDevMode DevMode);
	static void SetSendQueueDelay(int32 Milliseconds);
	static void SetSteamEncryptedAppTicket(const TArray<uint8>& Ticket);
	static void SetSuspended(bool Suspended);
	static void SetupSteamEncryptedAppTicketAsync(class UObject* WorldContextObject, TDelegate<void(bool Success)> Completed);
	static void SetUserAllowGuests_GDK(bool Allow);
	static void SetUserID(const class FString& UserId);
	static void SetUserPickMode_GDK(EMariaXboxUserPickMode PickMode);
	static void ShutdownLogging();
	static bool StartLogging();
	static void TerminateNNLibraries();
	static void TerminateUltThread();
	static void UseAccountAuthInteraction_Switch(bool Enable);
	static void UseEnsureNSAAvailable(bool Enable);
	static void UseSegaAccountOnWindows(bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MariaUpload">();
	}
	static class UMariaUpload* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMariaUpload>();
	}
};
static_assert(alignof(UMariaUpload) == 0x000008, "Wrong alignment on UMariaUpload");
static_assert(sizeof(UMariaUpload) == 0x000028, "Wrong size on UMariaUpload");

}

