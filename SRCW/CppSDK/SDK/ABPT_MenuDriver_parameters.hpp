#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABPT_MenuDriver

#include "Basic.hpp"

#include "UNION_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UnionRun_structs.hpp"


namespace SDK::Params
{

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABPT_MenuDriver_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABPT_MenuDriver_C_AnimGraph) == 0x000008, "Wrong alignment on ABPT_MenuDriver_C_AnimGraph");
static_assert(sizeof(ABPT_MenuDriver_C_AnimGraph) == 0x000010, "Wrong size on ABPT_MenuDriver_C_AnimGraph");
static_assert(offsetof(ABPT_MenuDriver_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABPT_MenuDriver_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.ExecuteUbergraph_ABPT_MenuDriver
// 0x0298 (0x0298 - 0x0000)
struct ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetLinkedAnimLayerClass_OutAnimInstance;  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_1;      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_2;      // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_3;      // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_4;      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_5;      // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_6;      // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_7;      // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_8;      // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2; // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_3; // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_2;     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_3;     // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_4; // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_4;     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_5; // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_5;     // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_9;      // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_10;     // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_11;     // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_12;     // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_13;     // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_14;     // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_15;     // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_16;     // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_17;     // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_18;     // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_19;     // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0108(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_20;     // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_6; // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_6;     // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_7; // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_8; // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_7;     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_9; // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_8;     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_9;     // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_10; // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_10;    // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default_1;                           // 0x0140(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A[0x2];                                      // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_11; // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_11;    // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_10;       // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_153[0x5];                                      // 0x0153(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_21;     // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_22;     // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_23;     // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_24;     // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_25;     // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_26;     // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_27;     // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_28;     // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_29;     // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_30;     // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_31;     // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Select_Default_2;                           // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default_3;                           // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Hoverboarder_Form_bHoverboarderForm;   // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_32;     // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Hoverboarder_Form_bHoverboarderForm_1; // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_GetAnimationAssetById_ReturnValue_33;     // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_11;       // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F2[0x6];                                      // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue_1;             // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetParentActor_ReturnValue;               // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetParentActor_ReturnValue_1;             // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_MenuRacerLobby_C*                   K2Node_DynamicCast_AsBP_Menu_Racer_Lobby;          // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MenuRacerLobby_C*                   K2Node_DynamicCast_AsBP_Menu_Racer_Lobby_1;        // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_1;  // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_2;  // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_3;  // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_4;  // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_5;  // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_6;  // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_7;  // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_8;  // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_9;  // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_10; // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_11; // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver) == 0x000008, "Wrong alignment on ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver");
static_assert(sizeof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver) == 0x000298, "Wrong size on ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, EntryPoint) == 0x000000, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetLinkedAnimLayerClass_OutAnimInstance) == 0x000008, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetLinkedAnimLayerClass_OutAnimInstance' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue) == 0x000010, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_IsValidClass_ReturnValue) == 0x000018, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_1) == 0x000020, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_2) == 0x000030, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_3) == 0x000038, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_4) == 0x000040, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_5) == 0x000048, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_6) == 0x000050, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_7) == 0x000058, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, Temp_int_Variable) == 0x000060, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_8) == 0x000068, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x000070, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000074, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1) == 0x000078, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x00007C, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2) == 0x000080, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_3) == 0x000084, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_ReturnValue_2) == 0x000088, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_ReturnValue_3) == 0x000089, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_4) == 0x00008C, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_ReturnValue_4) == 0x000090, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000091, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000092, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000093, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_5) == 0x000094, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000098, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_ReturnValue_5) == 0x000099, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x00009A, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x00009B, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_9) == 0x0000A0, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_10) == 0x0000A8, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_11) == 0x0000B0, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, Temp_bool_Variable) == 0x0000B8, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_12) == 0x0000C0, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_13) == 0x0000C8, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_14) == 0x0000D0, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_15) == 0x0000D8, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_16) == 0x0000E0, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_17) == 0x0000E8, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_18) == 0x0000F0, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, Temp_int_Variable_1) == 0x0000F8, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, Temp_int_Variable_2) == 0x0000FC, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_19) == 0x000100, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, K2Node_Select_Default) == 0x000108, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_20) == 0x000110, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_6) == 0x000118, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_ReturnValue_6) == 0x00011C, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_7) == 0x000120, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_8) == 0x000124, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_ReturnValue_7) == 0x000128, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_9) == 0x00012C, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_ReturnValue_8) == 0x000130, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_ReturnValue_9) == 0x000131, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_10) == 0x000134, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, Temp_bool_Variable_1) == 0x000138, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_ReturnValue_10) == 0x000139, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, K2Node_Select_Default_1) == 0x000140, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x000148, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x000149, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_11) == 0x00014C, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x000150, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_ReturnValue_11) == 0x000151, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_EqualEqual_ByteByte_ReturnValue_10) == 0x000152, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_EqualEqual_ByteByte_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_21) == 0x000158, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_22) == 0x000160, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_23) == 0x000168, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_24) == 0x000170, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_25) == 0x000178, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_26) == 0x000180, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_27) == 0x000188, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_28) == 0x000190, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_29) == 0x000198, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_30) == 0x0001A0, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, Temp_int_Variable_3) == 0x0001A8, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, Temp_int_Variable_4) == 0x0001AC, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_31) == 0x0001B0, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, K2Node_Select_Default_2) == 0x0001B8, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, Temp_int_Variable_5) == 0x0001C0, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, K2Node_Select_Default_3) == 0x0001C8, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_Is_Hoverboarder_Form_bHoverboarderForm) == 0x0001D0, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_Is_Hoverboarder_Form_bHoverboarderForm' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_32) == 0x0001D8, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_Is_Hoverboarder_Form_bHoverboarderForm_1) == 0x0001E0, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_Is_Hoverboarder_Form_bHoverboarderForm_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetAnimationAssetById_ReturnValue_33) == 0x0001E8, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetAnimationAssetById_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_IsValid_ReturnValue) == 0x0001F0, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_EqualEqual_ByteByte_ReturnValue_11) == 0x0001F1, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_EqualEqual_ByteByte_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetOwningActor_ReturnValue) == 0x0001F8, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetOwningActor_ReturnValue_1) == 0x000200, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetOwningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetParentActor_ReturnValue) == 0x000208, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_GetParentActor_ReturnValue_1) == 0x000210, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_GetParentActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, K2Node_DynamicCast_AsBP_Menu_Racer_Lobby) == 0x000218, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::K2Node_DynamicCast_AsBP_Menu_Racer_Lobby' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, K2Node_DynamicCast_bSuccess) == 0x000220, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, K2Node_DynamicCast_AsBP_Menu_Racer_Lobby_1) == 0x000228, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::K2Node_DynamicCast_AsBP_Menu_Racer_Lobby_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, K2Node_DynamicCast_bSuccess_1) == 0x000230, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x000238, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_1) == 0x000240, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_2) == 0x000248, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_3) == 0x000250, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_4) == 0x000258, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_5) == 0x000260, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_6) == 0x000268, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_6' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_7) == 0x000270, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_7' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_8) == 0x000278, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_8' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_9) == 0x000280, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_9' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_10) == 0x000288, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_10' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_11) == 0x000290, "Member 'ABPT_MenuDriver_C_ExecuteUbergraph_ABPT_MenuDriver::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_11' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.Get Animation State Id
// 0x0001 (0x0001 - 0x0000)
struct ABPT_MenuDriver_C_Get_Animation_State_Id final
{
public:
	EMenuDriverAnimationStateId                   StateId_0;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPT_MenuDriver_C_Get_Animation_State_Id) == 0x000001, "Wrong alignment on ABPT_MenuDriver_C_Get_Animation_State_Id");
static_assert(sizeof(ABPT_MenuDriver_C_Get_Animation_State_Id) == 0x000001, "Wrong size on ABPT_MenuDriver_C_Get_Animation_State_Id");
static_assert(offsetof(ABPT_MenuDriver_C_Get_Animation_State_Id, StateId_0) == 0x000000, "Member 'ABPT_MenuDriver_C_Get_Animation_State_Id::StateId_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.GetLinkedAnimLayerClass
// 0x0008 (0x0008 - 0x0000)
struct ABPT_MenuDriver_C_GetLinkedAnimLayerClass final
{
public:
	class UClass*                                 OutAnimInstance;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPT_MenuDriver_C_GetLinkedAnimLayerClass) == 0x000008, "Wrong alignment on ABPT_MenuDriver_C_GetLinkedAnimLayerClass");
static_assert(sizeof(ABPT_MenuDriver_C_GetLinkedAnimLayerClass) == 0x000008, "Wrong size on ABPT_MenuDriver_C_GetLinkedAnimLayerClass");
static_assert(offsetof(ABPT_MenuDriver_C_GetLinkedAnimLayerClass, OutAnimInstance) == 0x000000, "Member 'ABPT_MenuDriver_C_GetLinkedAnimLayerClass::OutAnimInstance' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.GetUseBoneControl
// 0x0001 (0x0001 - 0x0000)
struct ABPT_MenuDriver_C_GetUseBoneControl final
{
public:
	bool                                          Output_Get;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPT_MenuDriver_C_GetUseBoneControl) == 0x000001, "Wrong alignment on ABPT_MenuDriver_C_GetUseBoneControl");
static_assert(sizeof(ABPT_MenuDriver_C_GetUseBoneControl) == 0x000001, "Wrong size on ABPT_MenuDriver_C_GetUseBoneControl");
static_assert(offsetof(ABPT_MenuDriver_C_GetUseBoneControl, Output_Get) == 0x000000, "Member 'ABPT_MenuDriver_C_GetUseBoneControl::Output_Get' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.HoverboardControlRogLayer
// 0x0020 (0x0020 - 0x0000)
struct ABPT_MenuDriver_C_HoverboardControlRogLayer final
{
public:
	struct FPoseLink                              HoverboardPose;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HoverboardControlRogLayer_0;                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABPT_MenuDriver_C_HoverboardControlRogLayer) == 0x000008, "Wrong alignment on ABPT_MenuDriver_C_HoverboardControlRogLayer");
static_assert(sizeof(ABPT_MenuDriver_C_HoverboardControlRogLayer) == 0x000020, "Wrong size on ABPT_MenuDriver_C_HoverboardControlRogLayer");
static_assert(offsetof(ABPT_MenuDriver_C_HoverboardControlRogLayer, HoverboardPose) == 0x000000, "Member 'ABPT_MenuDriver_C_HoverboardControlRogLayer::HoverboardPose' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_HoverboardControlRogLayer, HoverboardControlRogLayer_0) == 0x000010, "Member 'ABPT_MenuDriver_C_HoverboardControlRogLayer::HoverboardControlRogLayer_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.HoverboardItemHoldBlendLeft
// 0x0030 (0x0030 - 0x0000)
struct ABPT_MenuDriver_C_HoverboardItemHoldBlendLeft final
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LeftHoldPose;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HoverboardItemHoldBlendLeft_0;                     // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABPT_MenuDriver_C_HoverboardItemHoldBlendLeft) == 0x000008, "Wrong alignment on ABPT_MenuDriver_C_HoverboardItemHoldBlendLeft");
static_assert(sizeof(ABPT_MenuDriver_C_HoverboardItemHoldBlendLeft) == 0x000030, "Wrong size on ABPT_MenuDriver_C_HoverboardItemHoldBlendLeft");
static_assert(offsetof(ABPT_MenuDriver_C_HoverboardItemHoldBlendLeft, BasePose) == 0x000000, "Member 'ABPT_MenuDriver_C_HoverboardItemHoldBlendLeft::BasePose' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_HoverboardItemHoldBlendLeft, LeftHoldPose) == 0x000010, "Member 'ABPT_MenuDriver_C_HoverboardItemHoldBlendLeft::LeftHoldPose' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_HoverboardItemHoldBlendLeft, HoverboardItemHoldBlendLeft_0) == 0x000020, "Member 'ABPT_MenuDriver_C_HoverboardItemHoldBlendLeft::HoverboardItemHoldBlendLeft_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.HoverboardItemHoldBlendRight
// 0x0030 (0x0030 - 0x0000)
struct ABPT_MenuDriver_C_HoverboardItemHoldBlendRight final
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              RightHoldPose;                                     // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HoverboardItemHoldBlendRight_0;                    // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABPT_MenuDriver_C_HoverboardItemHoldBlendRight) == 0x000008, "Wrong alignment on ABPT_MenuDriver_C_HoverboardItemHoldBlendRight");
static_assert(sizeof(ABPT_MenuDriver_C_HoverboardItemHoldBlendRight) == 0x000030, "Wrong size on ABPT_MenuDriver_C_HoverboardItemHoldBlendRight");
static_assert(offsetof(ABPT_MenuDriver_C_HoverboardItemHoldBlendRight, BasePose) == 0x000000, "Member 'ABPT_MenuDriver_C_HoverboardItemHoldBlendRight::BasePose' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_HoverboardItemHoldBlendRight, RightHoldPose) == 0x000010, "Member 'ABPT_MenuDriver_C_HoverboardItemHoldBlendRight::RightHoldPose' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_HoverboardItemHoldBlendRight, HoverboardItemHoldBlendRight_0) == 0x000020, "Member 'ABPT_MenuDriver_C_HoverboardItemHoldBlendRight::HoverboardItemHoldBlendRight_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.Is Hoverboarder Form
// 0x000C (0x000C - 0x0000)
struct ABPT_MenuDriver_C_Is_Hoverboarder_Form final
{
public:
	bool                                          bHoverboarderForm;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetRidingType_Out_RidingType;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPT_MenuDriver_C_Is_Hoverboarder_Form) == 0x000004, "Wrong alignment on ABPT_MenuDriver_C_Is_Hoverboarder_Form");
static_assert(sizeof(ABPT_MenuDriver_C_Is_Hoverboarder_Form) == 0x00000C, "Wrong size on ABPT_MenuDriver_C_Is_Hoverboarder_Form");
static_assert(offsetof(ABPT_MenuDriver_C_Is_Hoverboarder_Form, bHoverboarderForm) == 0x000000, "Member 'ABPT_MenuDriver_C_Is_Hoverboarder_Form::bHoverboarderForm' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_Is_Hoverboarder_Form, CallFunc_GetRidingType_Out_RidingType) == 0x000004, "Member 'ABPT_MenuDriver_C_Is_Hoverboarder_Form::CallFunc_GetRidingType_Out_RidingType' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_Is_Hoverboarder_Form, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'ABPT_MenuDriver_C_Is_Hoverboarder_Form::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.KawaiiPhysicsLayer
// 0x0020 (0x0020 - 0x0000)
struct ABPT_MenuDriver_C_KawaiiPhysicsLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              KawaiiPhysicsLayer_0;                              // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABPT_MenuDriver_C_KawaiiPhysicsLayer) == 0x000008, "Wrong alignment on ABPT_MenuDriver_C_KawaiiPhysicsLayer");
static_assert(sizeof(ABPT_MenuDriver_C_KawaiiPhysicsLayer) == 0x000020, "Wrong size on ABPT_MenuDriver_C_KawaiiPhysicsLayer");
static_assert(offsetof(ABPT_MenuDriver_C_KawaiiPhysicsLayer, InPose) == 0x000000, "Member 'ABPT_MenuDriver_C_KawaiiPhysicsLayer::InPose' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_KawaiiPhysicsLayer, KawaiiPhysicsLayer_0) == 0x000010, "Member 'ABPT_MenuDriver_C_KawaiiPhysicsLayer::KawaiiPhysicsLayer_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.MachineItemHoldBlendLeft
// 0x0030 (0x0030 - 0x0000)
struct ABPT_MenuDriver_C_MachineItemHoldBlendLeft final
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LeftHoldPose;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              MachineItemHoldBlendLeft_0;                        // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABPT_MenuDriver_C_MachineItemHoldBlendLeft) == 0x000008, "Wrong alignment on ABPT_MenuDriver_C_MachineItemHoldBlendLeft");
static_assert(sizeof(ABPT_MenuDriver_C_MachineItemHoldBlendLeft) == 0x000030, "Wrong size on ABPT_MenuDriver_C_MachineItemHoldBlendLeft");
static_assert(offsetof(ABPT_MenuDriver_C_MachineItemHoldBlendLeft, BasePose) == 0x000000, "Member 'ABPT_MenuDriver_C_MachineItemHoldBlendLeft::BasePose' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_MachineItemHoldBlendLeft, LeftHoldPose) == 0x000010, "Member 'ABPT_MenuDriver_C_MachineItemHoldBlendLeft::LeftHoldPose' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_MachineItemHoldBlendLeft, MachineItemHoldBlendLeft_0) == 0x000020, "Member 'ABPT_MenuDriver_C_MachineItemHoldBlendLeft::MachineItemHoldBlendLeft_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.MachineItemHoldBlendRight
// 0x0030 (0x0030 - 0x0000)
struct ABPT_MenuDriver_C_MachineItemHoldBlendRight final
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LeftHoldPose;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              MachineItemHoldBlendRight_0;                       // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABPT_MenuDriver_C_MachineItemHoldBlendRight) == 0x000008, "Wrong alignment on ABPT_MenuDriver_C_MachineItemHoldBlendRight");
static_assert(sizeof(ABPT_MenuDriver_C_MachineItemHoldBlendRight) == 0x000030, "Wrong size on ABPT_MenuDriver_C_MachineItemHoldBlendRight");
static_assert(offsetof(ABPT_MenuDriver_C_MachineItemHoldBlendRight, BasePose) == 0x000000, "Member 'ABPT_MenuDriver_C_MachineItemHoldBlendRight::BasePose' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_MachineItemHoldBlendRight, LeftHoldPose) == 0x000010, "Member 'ABPT_MenuDriver_C_MachineItemHoldBlendRight::LeftHoldPose' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_MachineItemHoldBlendRight, MachineItemHoldBlendRight_0) == 0x000020, "Member 'ABPT_MenuDriver_C_MachineItemHoldBlendRight::MachineItemHoldBlendRight_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.MenuFacialOverride
// 0x0048 (0x0048 - 0x0000)
struct ABPT_MenuDriver_C_MenuFacialOverride final
{
public:
	struct FPoseLink                              MenuFinalPose;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          InPlayingMontage;                                  // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              MenuDefaltFace;                                    // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              MenuOverrideFace;                                  // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              MenuFacialOverride_0;                              // 0x0038(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABPT_MenuDriver_C_MenuFacialOverride) == 0x000008, "Wrong alignment on ABPT_MenuDriver_C_MenuFacialOverride");
static_assert(sizeof(ABPT_MenuDriver_C_MenuFacialOverride) == 0x000048, "Wrong size on ABPT_MenuDriver_C_MenuFacialOverride");
static_assert(offsetof(ABPT_MenuDriver_C_MenuFacialOverride, MenuFinalPose) == 0x000000, "Member 'ABPT_MenuDriver_C_MenuFacialOverride::MenuFinalPose' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_MenuFacialOverride, InPlayingMontage) == 0x000010, "Member 'ABPT_MenuDriver_C_MenuFacialOverride::InPlayingMontage' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_MenuFacialOverride, MenuDefaltFace) == 0x000018, "Member 'ABPT_MenuDriver_C_MenuFacialOverride::MenuDefaltFace' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_MenuFacialOverride, MenuOverrideFace) == 0x000028, "Member 'ABPT_MenuDriver_C_MenuFacialOverride::MenuOverrideFace' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_MenuFacialOverride, MenuFacialOverride_0) == 0x000038, "Member 'ABPT_MenuDriver_C_MenuFacialOverride::MenuFacialOverride_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.ScaleFaceLayer
// 0x0028 (0x0028 - 0x0000)
struct ABPT_MenuDriver_C_ScaleFaceLayer final
{
public:
	struct FPoseLink                              InFaceOverride;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          bPlayMontage;                                      // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBoneScaleFaceType                            InStateMachineFaceType;                            // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBoneScaleFaceType                            InMontageFaceType;                                 // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              ScaleFaceLayer_0;                                  // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABPT_MenuDriver_C_ScaleFaceLayer) == 0x000008, "Wrong alignment on ABPT_MenuDriver_C_ScaleFaceLayer");
static_assert(sizeof(ABPT_MenuDriver_C_ScaleFaceLayer) == 0x000028, "Wrong size on ABPT_MenuDriver_C_ScaleFaceLayer");
static_assert(offsetof(ABPT_MenuDriver_C_ScaleFaceLayer, InFaceOverride) == 0x000000, "Member 'ABPT_MenuDriver_C_ScaleFaceLayer::InFaceOverride' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ScaleFaceLayer, bPlayMontage) == 0x000010, "Member 'ABPT_MenuDriver_C_ScaleFaceLayer::bPlayMontage' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ScaleFaceLayer, InStateMachineFaceType) == 0x000011, "Member 'ABPT_MenuDriver_C_ScaleFaceLayer::InStateMachineFaceType' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ScaleFaceLayer, InMontageFaceType) == 0x000012, "Member 'ABPT_MenuDriver_C_ScaleFaceLayer::InMontageFaceType' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_ScaleFaceLayer, ScaleFaceLayer_0) == 0x000018, "Member 'ABPT_MenuDriver_C_ScaleFaceLayer::ScaleFaceLayer_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.Set Animation State Id
// 0x0001 (0x0001 - 0x0000)
struct ABPT_MenuDriver_C_Set_Animation_State_Id final
{
public:
	EMenuDriverAnimationStateId                   StateId_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPT_MenuDriver_C_Set_Animation_State_Id) == 0x000001, "Wrong alignment on ABPT_MenuDriver_C_Set_Animation_State_Id");
static_assert(sizeof(ABPT_MenuDriver_C_Set_Animation_State_Id) == 0x000001, "Wrong size on ABPT_MenuDriver_C_Set_Animation_State_Id");
static_assert(offsetof(ABPT_MenuDriver_C_Set_Animation_State_Id, StateId_0) == 0x000000, "Member 'ABPT_MenuDriver_C_Set_Animation_State_Id::StateId_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.Set Is Drive Idle Low Loop
// 0x0001 (0x0001 - 0x0000)
struct ABPT_MenuDriver_C_Set_Is_Drive_Idle_Low_Loop final
{
public:
	bool                                          IsDriveIdleLowLoop_0;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPT_MenuDriver_C_Set_Is_Drive_Idle_Low_Loop) == 0x000001, "Wrong alignment on ABPT_MenuDriver_C_Set_Is_Drive_Idle_Low_Loop");
static_assert(sizeof(ABPT_MenuDriver_C_Set_Is_Drive_Idle_Low_Loop) == 0x000001, "Wrong size on ABPT_MenuDriver_C_Set_Is_Drive_Idle_Low_Loop");
static_assert(offsetof(ABPT_MenuDriver_C_Set_Is_Drive_Idle_Low_Loop, IsDriveIdleLowLoop_0) == 0x000000, "Member 'ABPT_MenuDriver_C_Set_Is_Drive_Idle_Low_Loop::IsDriveIdleLowLoop_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.Set Playing Face Montage
// 0x0001 (0x0001 - 0x0000)
struct ABPT_MenuDriver_C_Set_Playing_Face_Montage final
{
public:
	bool                                          IsPlayingMontage;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPT_MenuDriver_C_Set_Playing_Face_Montage) == 0x000001, "Wrong alignment on ABPT_MenuDriver_C_Set_Playing_Face_Montage");
static_assert(sizeof(ABPT_MenuDriver_C_Set_Playing_Face_Montage) == 0x000001, "Wrong size on ABPT_MenuDriver_C_Set_Playing_Face_Montage");
static_assert(offsetof(ABPT_MenuDriver_C_Set_Playing_Face_Montage, IsPlayingMontage) == 0x000000, "Member 'ABPT_MenuDriver_C_Set_Playing_Face_Montage::IsPlayingMontage' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.SetAnimIndex
// 0x0004 (0x0004 - 0x0000)
struct ABPT_MenuDriver_C_SetAnimIndex final
{
public:
	int32                                         AnimIndex_0;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPT_MenuDriver_C_SetAnimIndex) == 0x000004, "Wrong alignment on ABPT_MenuDriver_C_SetAnimIndex");
static_assert(sizeof(ABPT_MenuDriver_C_SetAnimIndex) == 0x000004, "Wrong size on ABPT_MenuDriver_C_SetAnimIndex");
static_assert(offsetof(ABPT_MenuDriver_C_SetAnimIndex, AnimIndex_0) == 0x000000, "Member 'ABPT_MenuDriver_C_SetAnimIndex::AnimIndex_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.SetBoneRotation
// 0x0030 (0x0030 - 0x0000)
struct ABPT_MenuDriver_C_SetBoneRotation final
{
public:
	struct FRotator                               NeckRotation_0;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               SpineRotation_0;                                   // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABPT_MenuDriver_C_SetBoneRotation) == 0x000008, "Wrong alignment on ABPT_MenuDriver_C_SetBoneRotation");
static_assert(sizeof(ABPT_MenuDriver_C_SetBoneRotation) == 0x000030, "Wrong size on ABPT_MenuDriver_C_SetBoneRotation");
static_assert(offsetof(ABPT_MenuDriver_C_SetBoneRotation, NeckRotation_0) == 0x000000, "Member 'ABPT_MenuDriver_C_SetBoneRotation::NeckRotation_0' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_SetBoneRotation, SpineRotation_0) == 0x000018, "Member 'ABPT_MenuDriver_C_SetBoneRotation::SpineRotation_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.SetUseBoneControl
// 0x0001 (0x0001 - 0x0000)
struct ABPT_MenuDriver_C_SetUseBoneControl final
{
public:
	bool                                          UseBoneControl_0;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPT_MenuDriver_C_SetUseBoneControl) == 0x000001, "Wrong alignment on ABPT_MenuDriver_C_SetUseBoneControl");
static_assert(sizeof(ABPT_MenuDriver_C_SetUseBoneControl) == 0x000001, "Wrong size on ABPT_MenuDriver_C_SetUseBoneControl");
static_assert(offsetof(ABPT_MenuDriver_C_SetUseBoneControl, UseBoneControl_0) == 0x000000, "Member 'ABPT_MenuDriver_C_SetUseBoneControl::UseBoneControl_0' has a wrong offset!");

// Function ABPT_MenuDriver.ABPT_MenuDriver_C.GetRidingType
// 0x000C (0x000C - 0x0000)
struct ABPT_MenuDriver_C_GetRidingType final
{
public:
	int32                                         Out_RidingType;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVehicleDisplayMode                           CallFunc_GetRideableDisplayMode_ReturnValue;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECarStatusType                                CallFunc_GetRideableStatusType_ReturnValue;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVehicleType                                  CallFunc_GetRideableType_ReturnValue;              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPT_MenuDriver_C_GetRidingType) == 0x000004, "Wrong alignment on ABPT_MenuDriver_C_GetRidingType");
static_assert(sizeof(ABPT_MenuDriver_C_GetRidingType) == 0x00000C, "Wrong size on ABPT_MenuDriver_C_GetRidingType");
static_assert(offsetof(ABPT_MenuDriver_C_GetRidingType, Out_RidingType) == 0x000000, "Member 'ABPT_MenuDriver_C_GetRidingType::Out_RidingType' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_GetRidingType, CallFunc_GetRideableDisplayMode_ReturnValue) == 0x000004, "Member 'ABPT_MenuDriver_C_GetRidingType::CallFunc_GetRideableDisplayMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_GetRidingType, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000005, "Member 'ABPT_MenuDriver_C_GetRidingType::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_GetRidingType, CallFunc_GetRideableStatusType_ReturnValue) == 0x000006, "Member 'ABPT_MenuDriver_C_GetRidingType::CallFunc_GetRideableStatusType_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_GetRidingType, CallFunc_GetRideableType_ReturnValue) == 0x000007, "Member 'ABPT_MenuDriver_C_GetRidingType::CallFunc_GetRideableType_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_GetRidingType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'ABPT_MenuDriver_C_GetRidingType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_GetRidingType, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000009, "Member 'ABPT_MenuDriver_C_GetRidingType::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPT_MenuDriver_C_GetRidingType, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'ABPT_MenuDriver_C_GetRidingType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

