#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_RaceBefore_VoltageMaxInfo

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_RaceBefore_VoltageMaxInfo.WBP_RaceBefore_VoltageMaxInfo_C
// 0x0088 (0x0368 - 0x02E0)
class UWBP_RaceBefore_VoltageMaxInfo_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Info_Out;                                          // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Info_InLoop;                                       // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 base;                                              // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BG_Black;                                          // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DSP_Eff_02;                                        // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    DSP_TXT_AddPoint_03;                               // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DSP_x2Base_01;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DSP_x2Base_02;                                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Eff_01;                                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Panel;                                             // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RaceFlag;                                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_PointUpChance;                                 // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_TextDetail;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bIsTickLock;                                       // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OutAnimFinishedEvent;                              // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Construct();
	void ExecuteUbergraph_WBP_RaceBefore_VoltageMaxInfo(int32 EntryPoint);
	void OnOutAnimFinished();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_RaceBefore_VoltageMaxInfo_C">();
	}
	static class UWBP_RaceBefore_VoltageMaxInfo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_RaceBefore_VoltageMaxInfo_C>();
	}
};
static_assert(alignof(UWBP_RaceBefore_VoltageMaxInfo_C) == 0x000008, "Wrong alignment on UWBP_RaceBefore_VoltageMaxInfo_C");
static_assert(sizeof(UWBP_RaceBefore_VoltageMaxInfo_C) == 0x000368, "Wrong size on UWBP_RaceBefore_VoltageMaxInfo_C");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, Info_Out) == 0x0002E8, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::Info_Out' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, Info_InLoop) == 0x0002F0, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::Info_InLoop' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, base) == 0x0002F8, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::base' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, BG_Black) == 0x000300, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::BG_Black' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, DSP_Eff_02) == 0x000308, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::DSP_Eff_02' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, DSP_TXT_AddPoint_03) == 0x000310, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::DSP_TXT_AddPoint_03' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, DSP_x2Base_01) == 0x000318, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::DSP_x2Base_01' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, DSP_x2Base_02) == 0x000320, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::DSP_x2Base_02' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, Eff_01) == 0x000328, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::Eff_01' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, Panel) == 0x000330, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::Panel' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, RaceFlag) == 0x000338, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::RaceFlag' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, TXT_PointUpChance) == 0x000340, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::TXT_PointUpChance' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, TXT_TextDetail) == 0x000348, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::TXT_TextDetail' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, bIsTickLock) == 0x000350, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::bIsTickLock' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_VoltageMaxInfo_C, OutAnimFinishedEvent) == 0x000358, "Member 'UWBP_RaceBefore_VoltageMaxInfo_C::OutAnimFinishedEvent' has a wrong offset!");

}

