#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DriverAnimLayerInterface

#include "Basic.hpp"

#include "DriverAnimLayerInterface_classes.hpp"
#include "DriverAnimLayerInterface_parameters.hpp"


namespace SDK
{

// Function DriverAnimLayerInterface.DriverAnimLayerInterface_C.HoverboardControlRogLayer
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 HoverboardPose                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       HoverboardControlRogLayer_0                            (Parm, OutParm, NoDestructor)

void IDriverAnimLayerInterface_C::HoverboardControlRogLayer(const struct FPoseLink& HoverboardPose, struct FPoseLink* HoverboardControlRogLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DriverAnimLayerInterface_C", "HoverboardControlRogLayer");

	Params::DriverAnimLayerInterface_C_HoverboardControlRogLayer Parms{};

	Parms.HoverboardPose = std::move(HoverboardPose);

	AsUObject()->ProcessEvent(Func, &Parms);

	if (HoverboardControlRogLayer_0 != nullptr)
		*HoverboardControlRogLayer_0 = std::move(Parms.HoverboardControlRogLayer_0);
}


// Function DriverAnimLayerInterface.DriverAnimLayerInterface_C.HoverboardItemHoldBlendLeft
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 BasePose                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 LeftHoldPose                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       HoverboardItemHoldBlendLeft_0                          (Parm, OutParm, NoDestructor)

void IDriverAnimLayerInterface_C::HoverboardItemHoldBlendLeft(const struct FPoseLink& BasePose, const struct FPoseLink& LeftHoldPose, struct FPoseLink* HoverboardItemHoldBlendLeft_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DriverAnimLayerInterface_C", "HoverboardItemHoldBlendLeft");

	Params::DriverAnimLayerInterface_C_HoverboardItemHoldBlendLeft Parms{};

	Parms.BasePose = std::move(BasePose);
	Parms.LeftHoldPose = std::move(LeftHoldPose);

	AsUObject()->ProcessEvent(Func, &Parms);

	if (HoverboardItemHoldBlendLeft_0 != nullptr)
		*HoverboardItemHoldBlendLeft_0 = std::move(Parms.HoverboardItemHoldBlendLeft_0);
}


// Function DriverAnimLayerInterface.DriverAnimLayerInterface_C.HoverboardItemHoldBlendRight
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 BasePose                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 RightHoldPose                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       HoverboardItemHoldBlendRight_0                         (Parm, OutParm, NoDestructor)

void IDriverAnimLayerInterface_C::HoverboardItemHoldBlendRight(const struct FPoseLink& BasePose, const struct FPoseLink& RightHoldPose, struct FPoseLink* HoverboardItemHoldBlendRight_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DriverAnimLayerInterface_C", "HoverboardItemHoldBlendRight");

	Params::DriverAnimLayerInterface_C_HoverboardItemHoldBlendRight Parms{};

	Parms.BasePose = std::move(BasePose);
	Parms.RightHoldPose = std::move(RightHoldPose);

	AsUObject()->ProcessEvent(Func, &Parms);

	if (HoverboardItemHoldBlendRight_0 != nullptr)
		*HoverboardItemHoldBlendRight_0 = std::move(Parms.HoverboardItemHoldBlendRight_0);
}


// Function DriverAnimLayerInterface.DriverAnimLayerInterface_C.KawaiiPhysicsLayer
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 InPose                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       KawaiiPhysicsLayer_0                                   (Parm, OutParm, NoDestructor)

void IDriverAnimLayerInterface_C::KawaiiPhysicsLayer(const struct FPoseLink& InPose, struct FPoseLink* KawaiiPhysicsLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DriverAnimLayerInterface_C", "KawaiiPhysicsLayer");

	Params::DriverAnimLayerInterface_C_KawaiiPhysicsLayer Parms{};

	Parms.InPose = std::move(InPose);

	AsUObject()->ProcessEvent(Func, &Parms);

	if (KawaiiPhysicsLayer_0 != nullptr)
		*KawaiiPhysicsLayer_0 = std::move(Parms.KawaiiPhysicsLayer_0);
}


// Function DriverAnimLayerInterface.DriverAnimLayerInterface_C.MachineItemHoldBlendLeft
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 BasePose                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 LeftHoldPose                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       MachineItemHoldBlendLeft_0                             (Parm, OutParm, NoDestructor)

void IDriverAnimLayerInterface_C::MachineItemHoldBlendLeft(const struct FPoseLink& BasePose, const struct FPoseLink& LeftHoldPose, struct FPoseLink* MachineItemHoldBlendLeft_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DriverAnimLayerInterface_C", "MachineItemHoldBlendLeft");

	Params::DriverAnimLayerInterface_C_MachineItemHoldBlendLeft Parms{};

	Parms.BasePose = std::move(BasePose);
	Parms.LeftHoldPose = std::move(LeftHoldPose);

	AsUObject()->ProcessEvent(Func, &Parms);

	if (MachineItemHoldBlendLeft_0 != nullptr)
		*MachineItemHoldBlendLeft_0 = std::move(Parms.MachineItemHoldBlendLeft_0);
}


// Function DriverAnimLayerInterface.DriverAnimLayerInterface_C.MachineItemHoldBlendRight
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 BasePose                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 LeftHoldPose                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       MachineItemHoldBlendRight_0                            (Parm, OutParm, NoDestructor)

void IDriverAnimLayerInterface_C::MachineItemHoldBlendRight(const struct FPoseLink& BasePose, const struct FPoseLink& LeftHoldPose, struct FPoseLink* MachineItemHoldBlendRight_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DriverAnimLayerInterface_C", "MachineItemHoldBlendRight");

	Params::DriverAnimLayerInterface_C_MachineItemHoldBlendRight Parms{};

	Parms.BasePose = std::move(BasePose);
	Parms.LeftHoldPose = std::move(LeftHoldPose);

	AsUObject()->ProcessEvent(Func, &Parms);

	if (MachineItemHoldBlendRight_0 != nullptr)
		*MachineItemHoldBlendRight_0 = std::move(Parms.MachineItemHoldBlendRight_0);
}


// Function DriverAnimLayerInterface.DriverAnimLayerInterface_C.MenuFacialOverride
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 MenuFinalPose                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool                                    InPlayingMontage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FPoseLink&                 MenuDefaltFace                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 MenuOverrideFace                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       MenuFacialOverride_0                                   (Parm, OutParm, NoDestructor)

void IDriverAnimLayerInterface_C::MenuFacialOverride(const struct FPoseLink& MenuFinalPose, bool InPlayingMontage, const struct FPoseLink& MenuDefaltFace, const struct FPoseLink& MenuOverrideFace, struct FPoseLink* MenuFacialOverride_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DriverAnimLayerInterface_C", "MenuFacialOverride");

	Params::DriverAnimLayerInterface_C_MenuFacialOverride Parms{};

	Parms.MenuFinalPose = std::move(MenuFinalPose);
	Parms.InPlayingMontage = InPlayingMontage;
	Parms.MenuDefaltFace = std::move(MenuDefaltFace);
	Parms.MenuOverrideFace = std::move(MenuOverrideFace);

	AsUObject()->ProcessEvent(Func, &Parms);

	if (MenuFacialOverride_0 != nullptr)
		*MenuFacialOverride_0 = std::move(Parms.MenuFacialOverride_0);
}


// Function DriverAnimLayerInterface.DriverAnimLayerInterface_C.ScaleFaceLayer
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 InFaceOverride                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool                                    bPlayMontage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBoneScaleFaceType                      InStateMachineFaceType                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBoneScaleFaceType                      InMontageFaceType                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPoseLink*                       ScaleFaceLayer_0                                       (Parm, OutParm, NoDestructor)

void IDriverAnimLayerInterface_C::ScaleFaceLayer(const struct FPoseLink& InFaceOverride, bool bPlayMontage, EBoneScaleFaceType InStateMachineFaceType, EBoneScaleFaceType InMontageFaceType, struct FPoseLink* ScaleFaceLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DriverAnimLayerInterface_C", "ScaleFaceLayer");

	Params::DriverAnimLayerInterface_C_ScaleFaceLayer Parms{};

	Parms.InFaceOverride = std::move(InFaceOverride);
	Parms.bPlayMontage = bPlayMontage;
	Parms.InStateMachineFaceType = InStateMachineFaceType;
	Parms.InMontageFaceType = InMontageFaceType;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ScaleFaceLayer_0 != nullptr)
		*ScaleFaceLayer_0 = std::move(Parms.ScaleFaceLayer_0);
}

}

