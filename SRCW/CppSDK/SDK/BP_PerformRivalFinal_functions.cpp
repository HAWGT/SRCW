#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PerformRivalFinal

#include "Basic.hpp"

#include "BP_PerformRivalFinal_classes.hpp"
#include "BP_PerformRivalFinal_parameters.hpp"


namespace SDK
{

// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.ApplyRivalLevel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFinal_C::ApplyRivalLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "ApplyRivalLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.CreateScene
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASceneDriver*                     In_Player                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ASceneDriver*                     In_Rival                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   In_RivalIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerformRivalFinal_C::CreateScene(class ASceneDriver* In_Player, class ASceneDriver* In_Rival, int32 In_RivalIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "CreateScene");

	Params::BP_PerformRivalFinal_C_CreateScene Parms{};

	Parms.In_Player = In_Player;
	Parms.In_Rival = In_Rival;
	Parms.In_RivalIndex = In_RivalIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.ExecuteUbergraph_BP_PerformRivalFinal
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerformRivalFinal_C::ExecuteUbergraph_BP_PerformRivalFinal(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "ExecuteUbergraph_BP_PerformRivalFinal");

	Params::BP_PerformRivalFinal_C_ExecuteUbergraph_BP_PerformRivalFinal Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.GetLevelSequenceReference
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDriverId                               In_DriverId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    In_IsHover                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDriverId                               In_PlayerId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class ULevelSequence>*   Out_Asset                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_PerformRivalFinal_C::GetLevelSequenceReference(EDriverId In_DriverId, bool In_IsHover, EDriverId In_PlayerId, TSoftObjectPtr<class ULevelSequence>* Out_Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "GetLevelSequenceReference");

	Params::BP_PerformRivalFinal_C_GetLevelSequenceReference Parms{};

	Parms.In_DriverId = In_DriverId;
	Parms.In_IsHover = In_IsHover;
	Parms.In_PlayerId = In_PlayerId;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Asset != nullptr)
		*Out_Asset = Parms.Out_Asset;
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.IsVisibleSubtitle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ASceneDriver*                     InDriver                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   bVisible                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerformRivalFinal_C::IsVisibleSubtitle(class ASceneDriver* InDriver, bool* bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "IsVisibleSubtitle");

	Params::BP_PerformRivalFinal_C_IsVisibleSubtitle Parms{};

	Parms.InDriver = InDriver;

	UObject::ProcessEvent(Func, &Parms);

	if (bVisible != nullptr)
		*bVisible = Parms.bVisible;
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.OnFinished_RivalScene
// (BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFinal_C::OnFinished_RivalScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "OnFinished_RivalScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.OnFinished_RivalVoice
// (BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFinal_C::OnFinished_RivalVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "OnFinished_RivalVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.OnPlayRivalIntroduction
// (BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFinal_C::OnPlayRivalIntroduction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "OnPlayRivalIntroduction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.OnPlaySceneEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFinal_C::OnPlaySceneEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "OnPlaySceneEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.PlayScene
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           In_RivalRoot                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_PerformRivalFinal_C::PlayScene(class AActor* In_RivalRoot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "PlayScene");

	Params::BP_PerformRivalFinal_C_PlayScene Parms{};

	Parms.In_RivalRoot = In_RivalRoot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PerformRivalFinal_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerformRivalFinal_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "ReceiveEndPlay");

	Params::BP_PerformRivalFinal_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.SetSubtitle
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      In_Subtitle                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_PerformRivalFinal_C::SetSubtitle(const class FText& In_Subtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "SetSubtitle");

	Params::BP_PerformRivalFinal_C_SetSubtitle Parms{};

	Parms.In_Subtitle = std::move(In_Subtitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerformRivalFinal.BP_PerformRivalFinal_C.GetMessageFromTable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EDriverId                               In_RivalDriverId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPerformRivalOutcome                    In_RivalOutcome                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            Out_Text                                               (Parm, OutParm)

void ABP_PerformRivalFinal_C::GetMessageFromTable(EDriverId In_RivalDriverId, EPerformRivalOutcome In_RivalOutcome, class FText* Out_Text) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFinal_C", "GetMessageFromTable");

	Params::BP_PerformRivalFinal_C_GetMessageFromTable Parms{};

	Parms.In_RivalDriverId = In_RivalDriverId;
	Parms.In_RivalOutcome = In_RivalOutcome;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Text != nullptr)
		*Out_Text = std::move(Parms.Out_Text);
}

}

