#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_StatusInfo_CMN_Window

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"
#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_StatusInfo_CMN_Window.WBP_StatusInfo_CMN_Window_C
// 0x00D0 (0x0980 - 0x08B0)
class UWBP_StatusInfo_CMN_Window_C final : public UFestaInfoWidgetBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x08B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       StatusInfo_Out;                                    // 0x08B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       StatusInfo_Loop;                                   // 0x08C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       StatusInfo_In;                                     // 0x08C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BaseWindow;                                        // 0x08D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BG_Black;                                          // 0x08D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 FooterBase;                                        // 0x08E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HeaderBase;                                        // 0x08E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionUIButton*                         MouseInteraction_FooterAccept;                     // 0x08F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionUIButton*                         MouseInteraction_FooterBack;                       // 0x08F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_FooterAccept;                              // 0x0900(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USafeZone*                              SafeZone;                                          // 0x0908(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_Event_Period;                                  // 0x0910(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_Title_Detail;                                  // 0x0918(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_FooterMenu_Sub_CommonBtn_C*        WBP_FooterMenu_Sub_CommonBtn_01;                   // 0x0920(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_FooterMenu_Sub_CommonBtn_C*        WBP_FooterMenu_Sub_CommonBtn_02;                   // 0x0928(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_StatusInfo_Sub_Tab_C*              WBP_StatusInfo_Sub_Tab;                            // 0x0930(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_InfoWindow;                         // 0x0938(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              CloseEventDispatcher;                              // 0x0940(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsOpenRankingPlayerDetail;                         // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOpenRuleDetail;                                  // 0x0951(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOpenPointRewardDetail;                           // 0x0952(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_953[0x1];                                      // 0x0953(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpecialRuleCounter;                                // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MouseInputRewardTargetIndex;                       // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMouseInputRewardMove;                            // 0x095C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95D[0x3];                                      // 0x095D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           UpKeyTimerHandle;                                  // 0x0960(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DownKeyTimerHandle;                                // 0x0968(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         WhenFocusingLastOrFirstLineKeyTime;                // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalKeyTime;                                     // 0x0974(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActionExecuteReady;                               // 0x0978(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__WBP_StatusInfo_CMN_Window_MouseInteraction_FooterAccept_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__WBP_StatusInfo_CMN_Window_MouseInteraction_FooterBack_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();
	void Close();
	void ClosePointRewardDetail();
	void Display_Point_Reward_Detail();
	void DisplayRuleDetail();
	void DisplayRuleDetailDirectry();
	void ExecuteUbergraph_WBP_StatusInfo_CMN_Window(int32 EntryPoint);
	void GetDateString(const struct FDateTime& DateTime, class FText* DateText);
	bool IsDisplayRanking();
	void LeftKeyPressedLoop();
	void MouseClickBind();
	void MouseClicked();
	void OnAcceptKeyPressed();
	void OnAcceptKeyPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnAcceptKeyReleased();
	void OnAcceptKeyReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnBackKeyPressed();
	void OnBackKeyPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnBackKeyReleased();
	void OnBackKeyReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnClicked_PointReward(int32 ButtonIndex);
	void OnClicked_Rule(int32 RuleIndex);
	void OnDownKeyPressed();
	void OnDownKeyPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnDownKeyReleased();
	void OnDownKeyReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnFaceButtonLeftPressed();
	void OnFaceButtonLeftPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnFaceButtonLeftReleased();
	void OnFaceButtonLeftReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnFaceButtonTopPressed();
	void OnFaceButtonTopPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnFaceButtonTopReleased();
	void OnFaceButtonTopReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnFinished_InAnim();
	void OnFinished_OutAnim();
	void OnHovered_PointReward(int32 ButtonIndex, int32 ViewTopDataIndex, int32 SelectDataIndex);
	void OnHovered_Rule(int32 RuleIndex);
	void OnInitialized();
	void OnLeftKeyPressed();
	void OnLeftKeyPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnLeftKeyReleased();
	void OnLeftKeyReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnLeftShoulderPressed();
	void OnLeftShoulderPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnLeftShoulderReleased();
	void OnLeftShoulderReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnLeftStickAxis(const struct FVector2D& Value);
	void OnLeftStickAxisWithPlayerId(const struct FVector2D& Value, const int32& PlayerControllerIndex);
	void OnLeftStickButtonPressed();
	void OnLeftStickButtonPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnLeftStickButtonReleased();
	void OnLeftStickButtonReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnMouseClicked_PlayerDetail_BackFooter();
	void OnMouseClicked_PointReward();
	void OnMouseClicked_RaceRuleDetail();
	void OnMouseClicked_Rule(int32 RuleIndex);
	void OnMouseClickeed_PlayerDetail_AcceptFooter();
	void OnMouseHovered_PointReward(int32 ButtonIndex, int32 InputIndex, int32 SelectIndex);
	void OnMouseHovered_Rule(int32 RuleIndex);
	void OnMouseInput_ClosePlayerDetail();
	void OnMouseInput_CloseRaceRuleDetail();
	void OnMouseInput_MoveSelectReward();
	void OnMouseInput_OpenPFProfile();
	void OnMouseUnhovered_PointReward();
	void OnPFProfileError();
	void OnPFProfileErrorClose();
	void OnPointRewardDetailClosed();
	void OnPointRewardDetailOpened();
	void OnPressed_Tab(int32 TabIndex);
	void OnRankingDownKeyLoopInput();
	void OnRankingDownKeyWaitEnd();
	void OnRankingPlatformChange();
	void OnRankingPlayerDetailClosed();
	void OnRankingPlayerDetailOpened();
	void OnRankingUpKeyLoopInput();
	void OnRankingUpKeyWaitEnd();
	void OnRightKeyPressed();
	void OnRightKeyPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnRightKeyReleased();
	void OnRightKeyReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnRightShoulderPressed();
	void OnRightShoulderPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnRightShoulderReleased();
	void OnRightShoulderReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnRightStickAxis(const struct FVector2D& Value);
	void OnRightStickAxisWithPlayerId(const struct FVector2D& Value, const int32& PlayerControllerIndex);
	void OnRightStickButtonPressed();
	void OnRightStickButtonPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnRightStickButtonReleased();
	void OnRightStickButtonReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnRuleDetailClosed();
	void OnSpecialPressed();
	void OnSpecialPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnSpecialReleased();
	void OnSpecialReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnUnhovered_PointReward();
	void OnUpKeyPressed();
	void OnUpKeyPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnUpKeyReleased();
	void OnUpKeyReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void Open();
	void OpenPointRewardDetail_MouseInput();
	void ResetInputData();
	void RightKeyPressedLoop();
	void SelectNextRule();
	void SelectPrevRule();
	void SelectRuleDirectly(int32 RuleIndex);
	void SetFooterSetting(EEventInfoWidgetPageCategory NextPage);
	void SetPage(EEventInfoWidgetPageCategory NextPage, int32 TabIndex);
	void SetPlatformText();
	void SetupFinalResult(int32 Ranking, int32 Point, class UTexture2D* TextureBG);
	void SetupFriendRanking();
	void SetupOtherResult(const TArray<struct FFestaStreakRewardUIData>& InStreakRewardData, const TArray<struct FFestaRankingRewardUIData>& InRankingRewardData);
	void SetupPointResult(int32 Point, const TArray<struct FFestaPointRewardUIData>& InPointRewardData, class UTexture2D* TextureBG);
	void SetupRuleInfomation(EGroupRaceRule DefaultRule, const TArray<struct FFestaRuleInfomation>& RuleDataArray);
	void SetupRuleTableWidget(const TArray<struct FFestaRuleInfomation>& RuleArray, int32 Index_0, class UWBP_StatusInfo_Sub_RaceRuleTable_C* RaceRuleTableWidget);
	void SetupShedule(const struct FDateTime& StartTime, const struct FDateTime& endTime);
	void SetupTab();
	void SetupTitle();
	void SetupWorldRanking();
	void ShouldOpenGamerCard(const class FString& ServerPFCode, bool* ShouldOpen);
	void SilentFocusReady(bool bOnce);
	void UpdatePointRewardDetail();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_StatusInfo_CMN_Window_C">();
	}
	static class UWBP_StatusInfo_CMN_Window_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_StatusInfo_CMN_Window_C>();
	}
};
static_assert(alignof(UWBP_StatusInfo_CMN_Window_C) == 0x000008, "Wrong alignment on UWBP_StatusInfo_CMN_Window_C");
static_assert(sizeof(UWBP_StatusInfo_CMN_Window_C) == 0x000980, "Wrong size on UWBP_StatusInfo_CMN_Window_C");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, UberGraphFrame) == 0x0008B0, "Member 'UWBP_StatusInfo_CMN_Window_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, StatusInfo_Out) == 0x0008B8, "Member 'UWBP_StatusInfo_CMN_Window_C::StatusInfo_Out' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, StatusInfo_Loop) == 0x0008C0, "Member 'UWBP_StatusInfo_CMN_Window_C::StatusInfo_Loop' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, StatusInfo_In) == 0x0008C8, "Member 'UWBP_StatusInfo_CMN_Window_C::StatusInfo_In' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, BaseWindow) == 0x0008D0, "Member 'UWBP_StatusInfo_CMN_Window_C::BaseWindow' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, BG_Black) == 0x0008D8, "Member 'UWBP_StatusInfo_CMN_Window_C::BG_Black' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, FooterBase) == 0x0008E0, "Member 'UWBP_StatusInfo_CMN_Window_C::FooterBase' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, HeaderBase) == 0x0008E8, "Member 'UWBP_StatusInfo_CMN_Window_C::HeaderBase' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, MouseInteraction_FooterAccept) == 0x0008F0, "Member 'UWBP_StatusInfo_CMN_Window_C::MouseInteraction_FooterAccept' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, MouseInteraction_FooterBack) == 0x0008F8, "Member 'UWBP_StatusInfo_CMN_Window_C::MouseInteraction_FooterBack' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, Overlay_FooterAccept) == 0x000900, "Member 'UWBP_StatusInfo_CMN_Window_C::Overlay_FooterAccept' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, SafeZone) == 0x000908, "Member 'UWBP_StatusInfo_CMN_Window_C::SafeZone' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, TXT_Event_Period) == 0x000910, "Member 'UWBP_StatusInfo_CMN_Window_C::TXT_Event_Period' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, TXT_Title_Detail) == 0x000918, "Member 'UWBP_StatusInfo_CMN_Window_C::TXT_Title_Detail' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, WBP_FooterMenu_Sub_CommonBtn_01) == 0x000920, "Member 'UWBP_StatusInfo_CMN_Window_C::WBP_FooterMenu_Sub_CommonBtn_01' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, WBP_FooterMenu_Sub_CommonBtn_02) == 0x000928, "Member 'UWBP_StatusInfo_CMN_Window_C::WBP_FooterMenu_Sub_CommonBtn_02' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, WBP_StatusInfo_Sub_Tab) == 0x000930, "Member 'UWBP_StatusInfo_CMN_Window_C::WBP_StatusInfo_Sub_Tab' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, WidgetSwitcher_InfoWindow) == 0x000938, "Member 'UWBP_StatusInfo_CMN_Window_C::WidgetSwitcher_InfoWindow' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, CloseEventDispatcher) == 0x000940, "Member 'UWBP_StatusInfo_CMN_Window_C::CloseEventDispatcher' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, IsOpenRankingPlayerDetail) == 0x000950, "Member 'UWBP_StatusInfo_CMN_Window_C::IsOpenRankingPlayerDetail' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, IsOpenRuleDetail) == 0x000951, "Member 'UWBP_StatusInfo_CMN_Window_C::IsOpenRuleDetail' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, IsOpenPointRewardDetail) == 0x000952, "Member 'UWBP_StatusInfo_CMN_Window_C::IsOpenPointRewardDetail' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, SpecialRuleCounter) == 0x000954, "Member 'UWBP_StatusInfo_CMN_Window_C::SpecialRuleCounter' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, MouseInputRewardTargetIndex) == 0x000958, "Member 'UWBP_StatusInfo_CMN_Window_C::MouseInputRewardTargetIndex' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, IsMouseInputRewardMove) == 0x00095C, "Member 'UWBP_StatusInfo_CMN_Window_C::IsMouseInputRewardMove' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, UpKeyTimerHandle) == 0x000960, "Member 'UWBP_StatusInfo_CMN_Window_C::UpKeyTimerHandle' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, DownKeyTimerHandle) == 0x000968, "Member 'UWBP_StatusInfo_CMN_Window_C::DownKeyTimerHandle' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, WhenFocusingLastOrFirstLineKeyTime) == 0x000970, "Member 'UWBP_StatusInfo_CMN_Window_C::WhenFocusingLastOrFirstLineKeyTime' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, NormalKeyTime) == 0x000974, "Member 'UWBP_StatusInfo_CMN_Window_C::NormalKeyTime' has a wrong offset!");
static_assert(offsetof(UWBP_StatusInfo_CMN_Window_C, bActionExecuteReady) == 0x000978, "Member 'UWBP_StatusInfo_CMN_Window_C::bActionExecuteReady' has a wrong offset!");

}

