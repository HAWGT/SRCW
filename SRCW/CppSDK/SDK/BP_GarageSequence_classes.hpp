#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GarageSequence

#include "Basic.hpp"

#include "UNION_classes.hpp"
#include "UnionSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "ST_GarageData_structs.hpp"
#include "UnionLib_structs.hpp"
#include "UnionRun_structs.hpp"
#include "UnionUI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GarageSequence.BP_GarageSequence_C
// 0x01B0 (0x05A8 - 0x03F8)
class ABP_GarageSequence_C final : public AGarageMenuSequence
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_GarageMenuTopState_C*              BPC_GarageMenuTopState;                            // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_GarageMenuGalleryState_C*          BPC_GarageMenuGalleryState;                        // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_GarageMenuCustomizeGadgetState_C*  BPC_GarageMenuCustomizeGadgetState;                // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_GarageMenuCustomizeMachineState_C* BPC_GarageMenuCustomizeMachineState;               // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   TopMenuLevelName;                                  // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_GarageData                         GarageData;                                        // 0x0428(0x0058)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          bCanControlTurntable;                              // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TurntableRotationInputThreshold;                   // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxTurntableRotationSpeed;                         // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanControlParamWindow;                            // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugLevel;                                       // 0x0499(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49A[0x6];                                      // 0x049A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimeOutHandle;                                     // 0x04A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsMessageBarVisible;                              // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonMessageBar*                      MessageBar;                                        // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FUserMachineCustomizeData              PrevSelectedCustomizeData;                         // 0x04B8(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FUserMachineCustomizeData              CurrentSelectedCustomizeData;                      // 0x0530(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BindEvents();
	void CustomEvent(EUnionUIFadeDirection FadeDirection);
	void ExecuteUbergraph_BP_GarageSequence(int32 EntryPoint);
	void Exit();
	void ExitMatchingTimeOut();
	void FinalizeMachineCustomizeByTimeOut();
	void GetAppPlayerController(class AAppPlayerController** OutAppPlayerController);
	class UObject* GetFooter();
	void GetGarageData(struct FST_GarageData* OutGarageData);
	void GetPlayerController(class APlayerController** OutPlayerController);
	void GetPlayerIndex(int32* OutPlayerIndex);
	void GetRacer(class ABP_MenuRacerPreview_C** OutRacer);
	void GetTurntable(class ABP_Turntable_C** OutTurntable);
	void HideFooter();
	void InputReceiver_OnFaceButtonLeftPressed(class UObject* Object);
	void InputReceiver_OnRightStickAxisEvent(class UObject* Object, const struct FVector2D& Value);
	void MachineCustomizeSequence_MachineSelected(EMachineId InMachineID);
	void MachineCustomizeSequence_OnExit();
	void MachineCustomizeSequence_OnParamWindowControlStateChanged(bool bInIsControllable);
	void MachineCustomizeSequence_OnTurntableControlStateChanged(bool bInIsControllable);
	void MatchingTimeOut(float InTimeOutTime);
	void oldReset_Message_Bar();
	void oldSetup_Message_Bar();
	void OnClickedParameter();
	void OnFinalize();
	void OnInitialize();
	void OnTimeout();
	void ResetCamera();
	void ResetDummyWidget();
	void ResetFooter();
	void ResetInputReceiver();
	void ResetRootWidget();
	void ResetStickerMasterSystem();
	void ResetTurntable();
	void SetCanControlParamWindow(bool bInCanControl);
	void SetCanControlTurntable(bool bInCanControl);
	void SetCurrentMachineID(EMachineId InMachineID);
	void SetCurrentMachineIDs();
	void SetCurrentSelectedCustomizeData();
	void SetFocusToDummy();
	void SetGarageData(const struct FST_GarageData& InGarageData);
	void SetPrevSelectedCustomizeData();
	void Setup(bool bIsMessageBarVisible_0);
	void SetupCamera();
	void SetupDummyWidget();
	void SetupFooter();
	void SetupInputReceiver();
	void SetupRacer();
	void SetupRootWidget();
	void SetupStickerMasterSystem();
	void SetupTurntable();
	void SwitchParamWindow();
	void UnbindEvents();

	void GetCurrentMachineID(EMachineId* MachineId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GarageSequence_C">();
	}
	static class ABP_GarageSequence_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GarageSequence_C>();
	}
};
static_assert(alignof(ABP_GarageSequence_C) == 0x000008, "Wrong alignment on ABP_GarageSequence_C");
static_assert(sizeof(ABP_GarageSequence_C) == 0x0005A8, "Wrong size on ABP_GarageSequence_C");
static_assert(offsetof(ABP_GarageSequence_C, UberGraphFrame) == 0x0003F8, "Member 'ABP_GarageSequence_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, BPC_GarageMenuTopState) == 0x000400, "Member 'ABP_GarageSequence_C::BPC_GarageMenuTopState' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, BPC_GarageMenuGalleryState) == 0x000408, "Member 'ABP_GarageSequence_C::BPC_GarageMenuGalleryState' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, BPC_GarageMenuCustomizeGadgetState) == 0x000410, "Member 'ABP_GarageSequence_C::BPC_GarageMenuCustomizeGadgetState' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, BPC_GarageMenuCustomizeMachineState) == 0x000418, "Member 'ABP_GarageSequence_C::BPC_GarageMenuCustomizeMachineState' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, TopMenuLevelName) == 0x000420, "Member 'ABP_GarageSequence_C::TopMenuLevelName' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, GarageData) == 0x000428, "Member 'ABP_GarageSequence_C::GarageData' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, bCanControlTurntable) == 0x000480, "Member 'ABP_GarageSequence_C::bCanControlTurntable' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, TurntableRotationInputThreshold) == 0x000488, "Member 'ABP_GarageSequence_C::TurntableRotationInputThreshold' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, MaxTurntableRotationSpeed) == 0x000490, "Member 'ABP_GarageSequence_C::MaxTurntableRotationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, bCanControlParamWindow) == 0x000498, "Member 'ABP_GarageSequence_C::bCanControlParamWindow' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, bDebugLevel) == 0x000499, "Member 'ABP_GarageSequence_C::bDebugLevel' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, TimeOutHandle) == 0x0004A0, "Member 'ABP_GarageSequence_C::TimeOutHandle' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, bIsMessageBarVisible) == 0x0004A8, "Member 'ABP_GarageSequence_C::bIsMessageBarVisible' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, MessageBar) == 0x0004B0, "Member 'ABP_GarageSequence_C::MessageBar' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, PrevSelectedCustomizeData) == 0x0004B8, "Member 'ABP_GarageSequence_C::PrevSelectedCustomizeData' has a wrong offset!");
static_assert(offsetof(ABP_GarageSequence_C, CurrentSelectedCustomizeData) == 0x000530, "Member 'ABP_GarageSequence_C::CurrentSelectedCustomizeData' has a wrong offset!");

}

