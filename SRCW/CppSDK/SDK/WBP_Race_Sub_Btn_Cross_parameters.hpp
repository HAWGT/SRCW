#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Race_Sub_Btn_Cross

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.ExecuteUbergraph_WBP_Race_Sub_Btn_Cross
// 0x0068 (0x0068 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_8;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_7;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_6;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_5;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_4;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_3;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_2;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_1;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	float                                         K2Node_Event_InValue;                              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_InValue_9;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue_1;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross) == 0x000008, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross) == 0x000068, "Wrong size on WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, EntryPoint) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, K2Node_Event_InValue_8) == 0x000004, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::K2Node_Event_InValue_8' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, K2Node_Event_InValue_7) == 0x000008, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::K2Node_Event_InValue_7' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, K2Node_Event_InValue_6) == 0x00000C, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::K2Node_Event_InValue_6' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, K2Node_Event_InValue_5) == 0x000010, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::K2Node_Event_InValue_5' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, K2Node_Event_InValue_4) == 0x000014, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::K2Node_Event_InValue_4' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, K2Node_Event_InValue_3) == 0x000018, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::K2Node_Event_InValue_3' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, K2Node_Event_InValue_2) == 0x00001C, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::K2Node_Event_InValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, K2Node_Event_InValue_1) == 0x000020, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::K2Node_Event_InValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, K2Node_Event_IsDesignTime) == 0x000024, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, K2Node_MakeArray_Array) == 0x000028, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, K2Node_Event_InValue) == 0x000038, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::K2Node_Event_InValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00003C, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, CallFunc_PlayAnimation_ReturnValue) == 0x000040, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000048, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000049, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, K2Node_Event_InValue_9) == 0x00004C, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::K2Node_Event_InValue_9' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, CallFunc_IsAnimationPlaying_ReturnValue_1) == 0x000050, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::CallFunc_IsAnimationPlaying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000051, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, CallFunc_PlayAnimation_ReturnValue_1) == 0x000058, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000060, "Member 'WBP_Race_Sub_Btn_Cross_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Cross::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.OnAccelInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_OnAccelInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_OnAccelInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_OnAccelInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_OnAccelInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Cross_C_OnAccelInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_OnAccelInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_OnAccelInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.OnBrakeInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_OnBrakeInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_OnBrakeInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_OnBrakeInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_OnBrakeInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Cross_C_OnBrakeInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_OnBrakeInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_OnBrakeInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.OnPitchInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_OnPitchInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_OnPitchInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_OnPitchInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_OnPitchInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Cross_C_OnPitchInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_OnPitchInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_OnPitchInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.OnSlimeCancelXInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelXInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelXInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelXInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelXInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelXInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelXInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelXInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.OnSlimeCancelYInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelYInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelYInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelYInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelYInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelYInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelYInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_OnSlimeCancelYInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.OnSteerInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_OnSteerInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_OnSteerInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_OnSteerInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_OnSteerInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Cross_C_OnSteerInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_OnSteerInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_OnSteerInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.OnTrickX2Input
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_OnTrickX2Input final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_OnTrickX2Input) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_OnTrickX2Input");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_OnTrickX2Input) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Cross_C_OnTrickX2Input");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_OnTrickX2Input, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_OnTrickX2Input::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.OnTrickXInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_OnTrickXInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_OnTrickXInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_OnTrickXInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_OnTrickXInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Cross_C_OnTrickXInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_OnTrickXInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_OnTrickXInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.OnTrickY2Input
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_OnTrickY2Input final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_OnTrickY2Input) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_OnTrickY2Input");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_OnTrickY2Input) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Cross_C_OnTrickY2Input");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_OnTrickY2Input, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_OnTrickY2Input::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.OnTrickYInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_OnTrickYInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_OnTrickYInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_OnTrickYInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_OnTrickYInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Cross_C_OnTrickYInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_OnTrickYInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_OnTrickYInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_PreConstruct");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_PreConstruct) == 0x000001, "Wrong size on WBP_Race_Sub_Btn_Cross_C_PreConstruct");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.SetCrossButtonUseIndex
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_SetCrossButtonUseIndex final
{
public:
	int32                                         ButtonIndex_0;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_SetCrossButtonUseIndex) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_SetCrossButtonUseIndex");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_SetCrossButtonUseIndex) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Cross_C_SetCrossButtonUseIndex");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_SetCrossButtonUseIndex, ButtonIndex_0) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_SetCrossButtonUseIndex::ButtonIndex_0' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.SetKey
// 0x0020 (0x0020 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_SetKey final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_3;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_SetKey) == 0x000008, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_SetKey");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_SetKey) == 0x000020, "Wrong size on WBP_Race_Sub_Btn_Cross_C_SetKey");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_SetKey, InKey) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_SetKey::InKey' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_SetKey, Success) == 0x000018, "Member 'WBP_Race_Sub_Btn_Cross_C_SetKey::Success' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_SetKey, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000019, "Member 'WBP_Race_Sub_Btn_Cross_C_SetKey::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_SetKey, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x00001A, "Member 'WBP_Race_Sub_Btn_Cross_C_SetKey::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_SetKey, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x00001B, "Member 'WBP_Race_Sub_Btn_Cross_C_SetKey::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_SetKey, CallFunc_EqualEqual_KeyKey_ReturnValue_3) == 0x00001C, "Member 'WBP_Race_Sub_Btn_Cross_C_SetKey::CallFunc_EqualEqual_KeyKey_ReturnValue_3' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Cross.WBP_Race_Sub_Btn_Cross_C.UpdateCrossButtonUse
// 0x0028 (0x0028 - 0x0000)
struct WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse) == 0x000008, "Wrong alignment on WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse");
static_assert(sizeof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse) == 0x000028, "Wrong size on WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse, Temp_bool_Variable) == 0x000000, "Member 'WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse, Temp_byte_Variable) == 0x000001, "Member 'WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse, Temp_int_Array_Index_Variable) == 0x000004, "Member 'WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse, CallFunc_Array_Get_Item) == 0x000010, "Member 'WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse, CallFunc_Clamp_ReturnValue) == 0x000018, "Member 'WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000020, "Member 'WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse, CallFunc_Less_IntInt_ReturnValue) == 0x000021, "Member 'WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse, K2Node_Select_Default) == 0x000022, "Member 'WBP_Race_Sub_Btn_Cross_C_UpdateCrossButtonUse::K2Node_Select_Default' has a wrong offset!");

}

