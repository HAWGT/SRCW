#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PartyRace_RivalSwitch

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"


namespace SDK::Params
{

// Function WBP_PartyRace_RivalSwitch.WBP_PartyRace_RivalSwitch_C.BtnONOFF
// 0x0001 (0x0001 - 0x0000)
struct WBP_PartyRace_RivalSwitch_C_BtnONOFF final
{
public:
	bool                                          bIsOn;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PartyRace_RivalSwitch_C_BtnONOFF) == 0x000001, "Wrong alignment on WBP_PartyRace_RivalSwitch_C_BtnONOFF");
static_assert(sizeof(WBP_PartyRace_RivalSwitch_C_BtnONOFF) == 0x000001, "Wrong size on WBP_PartyRace_RivalSwitch_C_BtnONOFF");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_BtnONOFF, bIsOn) == 0x000000, "Member 'WBP_PartyRace_RivalSwitch_C_BtnONOFF::bIsOn' has a wrong offset!");

// Function WBP_PartyRace_RivalSwitch.WBP_PartyRace_RivalSwitch_C.ExecuteUbergraph_WBP_PartyRace_RivalSwitch
// 0x0018 (0x0018 - 0x0000)
struct WBP_PartyRace_RivalSwitch_C_ExecuteUbergraph_WBP_PartyRace_RivalSwitch final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PartyRace_RivalSwitch_C_ExecuteUbergraph_WBP_PartyRace_RivalSwitch) == 0x000004, "Wrong alignment on WBP_PartyRace_RivalSwitch_C_ExecuteUbergraph_WBP_PartyRace_RivalSwitch");
static_assert(sizeof(WBP_PartyRace_RivalSwitch_C_ExecuteUbergraph_WBP_PartyRace_RivalSwitch) == 0x000018, "Wrong size on WBP_PartyRace_RivalSwitch_C_ExecuteUbergraph_WBP_PartyRace_RivalSwitch");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_ExecuteUbergraph_WBP_PartyRace_RivalSwitch, EntryPoint) == 0x000000, "Member 'WBP_PartyRace_RivalSwitch_C_ExecuteUbergraph_WBP_PartyRace_RivalSwitch::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_ExecuteUbergraph_WBP_PartyRace_RivalSwitch, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_PartyRace_RivalSwitch_C_ExecuteUbergraph_WBP_PartyRace_RivalSwitch::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_ExecuteUbergraph_WBP_PartyRace_RivalSwitch, K2Node_Event_IsDesignTime) == 0x000014, "Member 'WBP_PartyRace_RivalSwitch_C_ExecuteUbergraph_WBP_PartyRace_RivalSwitch::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_PartyRace_RivalSwitch.WBP_PartyRace_RivalSwitch_C.In
// 0x0020 (0x0020 - 0x0000)
struct WBP_PartyRace_RivalSwitch_C_In final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPartyRaceRivalExists_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PartyRace_RivalSwitch_C_In) == 0x000008, "Wrong alignment on WBP_PartyRace_RivalSwitch_C_In");
static_assert(sizeof(WBP_PartyRace_RivalSwitch_C_In) == 0x000020, "Wrong size on WBP_PartyRace_RivalSwitch_C_In");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_In, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_PartyRace_RivalSwitch_C_In::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_In, CallFunc_PlayAnimation_ReturnValue_1) == 0x000008, "Member 'WBP_PartyRace_RivalSwitch_C_In::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_In, CallFunc_IsPartyRaceRivalExists_ReturnValue) == 0x000010, "Member 'WBP_PartyRace_RivalSwitch_C_In::CallFunc_IsPartyRaceRivalExists_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_In, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'WBP_PartyRace_RivalSwitch_C_In::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_In, CallFunc_PlayAnimation_ReturnValue_2) == 0x000018, "Member 'WBP_PartyRace_RivalSwitch_C_In::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");

// Function WBP_PartyRace_RivalSwitch.WBP_PartyRace_RivalSwitch_C.Out
// 0x0008 (0x0008 - 0x0000)
struct WBP_PartyRace_RivalSwitch_C_Out final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PartyRace_RivalSwitch_C_Out) == 0x000008, "Wrong alignment on WBP_PartyRace_RivalSwitch_C_Out");
static_assert(sizeof(WBP_PartyRace_RivalSwitch_C_Out) == 0x000008, "Wrong size on WBP_PartyRace_RivalSwitch_C_Out");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_Out, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_PartyRace_RivalSwitch_C_Out::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_PartyRace_RivalSwitch.WBP_PartyRace_RivalSwitch_C.Play Animation ONOFF
// 0x0020 (0x0020 - 0x0000)
struct WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF final
{
public:
	bool                                          bIsOn;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIs_Custom;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundHandle                           CallFunc_SoundPlay_ReturnValue;                    // 0x0004(0x0004)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundHandle                           CallFunc_SetPanSplit_ReturnValue;                  // 0x000C(0x0004)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF) == 0x000008, "Wrong alignment on WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF");
static_assert(sizeof(WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF) == 0x000020, "Wrong size on WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF, bIsOn) == 0x000000, "Member 'WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF::bIsOn' has a wrong offset!");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF, bIs_Custom) == 0x000001, "Member 'WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF::bIs_Custom' has a wrong offset!");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF, CallFunc_SoundPlay_ReturnValue) == 0x000004, "Member 'WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF::CallFunc_SoundPlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF, CallFunc_SetPanSplit_ReturnValue) == 0x00000C, "Member 'WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF::CallFunc_SetPanSplit_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF, CallFunc_PlayAnimation_ReturnValue_1) == 0x000018, "Member 'WBP_PartyRace_RivalSwitch_C_Play_Animation_ONOFF::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function WBP_PartyRace_RivalSwitch.WBP_PartyRace_RivalSwitch_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_PartyRace_RivalSwitch_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PartyRace_RivalSwitch_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_PartyRace_RivalSwitch_C_PreConstruct");
static_assert(sizeof(WBP_PartyRace_RivalSwitch_C_PreConstruct) == 0x000001, "Wrong size on WBP_PartyRace_RivalSwitch_C_PreConstruct");
static_assert(offsetof(WBP_PartyRace_RivalSwitch_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_PartyRace_RivalSwitch_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

