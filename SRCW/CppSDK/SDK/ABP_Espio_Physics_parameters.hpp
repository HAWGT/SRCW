#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Espio_Physics

#include "Basic.hpp"

#include "UNION_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ABP_Espio_Physics.ABP_Espio_Physics_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Espio_Physics_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Espio_Physics_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Espio_Physics_C_AnimGraph");
static_assert(sizeof(ABP_Espio_Physics_C_AnimGraph) == 0x000010, "Wrong size on ABP_Espio_Physics_C_AnimGraph");
static_assert(offsetof(ABP_Espio_Physics_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_Espio_Physics_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_Espio_Physics.ABP_Espio_Physics_C.ExecuteUbergraph_ABP_Espio_Physics
// 0x0004 (0x0004 - 0x0000)
struct ABP_Espio_Physics_C_ExecuteUbergraph_ABP_Espio_Physics final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Espio_Physics_C_ExecuteUbergraph_ABP_Espio_Physics) == 0x000004, "Wrong alignment on ABP_Espio_Physics_C_ExecuteUbergraph_ABP_Espio_Physics");
static_assert(sizeof(ABP_Espio_Physics_C_ExecuteUbergraph_ABP_Espio_Physics) == 0x000004, "Wrong size on ABP_Espio_Physics_C_ExecuteUbergraph_ABP_Espio_Physics");
static_assert(offsetof(ABP_Espio_Physics_C_ExecuteUbergraph_ABP_Espio_Physics, EntryPoint) == 0x000000, "Member 'ABP_Espio_Physics_C_ExecuteUbergraph_ABP_Espio_Physics::EntryPoint' has a wrong offset!");

// Function ABP_Espio_Physics.ABP_Espio_Physics_C.HoverboardControlRogLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_Espio_Physics_C_HoverboardControlRogLayer final
{
public:
	struct FPoseLink                              HoverboardPose;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HoverboardControlRogLayer_0;                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Espio_Physics_C_HoverboardControlRogLayer) == 0x000008, "Wrong alignment on ABP_Espio_Physics_C_HoverboardControlRogLayer");
static_assert(sizeof(ABP_Espio_Physics_C_HoverboardControlRogLayer) == 0x000020, "Wrong size on ABP_Espio_Physics_C_HoverboardControlRogLayer");
static_assert(offsetof(ABP_Espio_Physics_C_HoverboardControlRogLayer, HoverboardPose) == 0x000000, "Member 'ABP_Espio_Physics_C_HoverboardControlRogLayer::HoverboardPose' has a wrong offset!");
static_assert(offsetof(ABP_Espio_Physics_C_HoverboardControlRogLayer, HoverboardControlRogLayer_0) == 0x000010, "Member 'ABP_Espio_Physics_C_HoverboardControlRogLayer::HoverboardControlRogLayer_0' has a wrong offset!");

// Function ABP_Espio_Physics.ABP_Espio_Physics_C.KawaiiPhysicsLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_Espio_Physics_C_KawaiiPhysicsLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              KawaiiPhysicsLayer_0;                              // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Espio_Physics_C_KawaiiPhysicsLayer) == 0x000008, "Wrong alignment on ABP_Espio_Physics_C_KawaiiPhysicsLayer");
static_assert(sizeof(ABP_Espio_Physics_C_KawaiiPhysicsLayer) == 0x000020, "Wrong size on ABP_Espio_Physics_C_KawaiiPhysicsLayer");
static_assert(offsetof(ABP_Espio_Physics_C_KawaiiPhysicsLayer, InPose) == 0x000000, "Member 'ABP_Espio_Physics_C_KawaiiPhysicsLayer::InPose' has a wrong offset!");
static_assert(offsetof(ABP_Espio_Physics_C_KawaiiPhysicsLayer, KawaiiPhysicsLayer_0) == 0x000010, "Member 'ABP_Espio_Physics_C_KawaiiPhysicsLayer::KawaiiPhysicsLayer_0' has a wrong offset!");

// Function ABP_Espio_Physics.ABP_Espio_Physics_C.ScaleFaceLayer
// 0x0028 (0x0028 - 0x0000)
struct ABP_Espio_Physics_C_ScaleFaceLayer final
{
public:
	struct FPoseLink                              InFaceOverride;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          bPlayMontage;                                      // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBoneScaleFaceType                            InStateMachineFaceType;                            // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBoneScaleFaceType                            InMontageFaceType;                                 // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              ScaleFaceLayer_0;                                  // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Espio_Physics_C_ScaleFaceLayer) == 0x000008, "Wrong alignment on ABP_Espio_Physics_C_ScaleFaceLayer");
static_assert(sizeof(ABP_Espio_Physics_C_ScaleFaceLayer) == 0x000028, "Wrong size on ABP_Espio_Physics_C_ScaleFaceLayer");
static_assert(offsetof(ABP_Espio_Physics_C_ScaleFaceLayer, InFaceOverride) == 0x000000, "Member 'ABP_Espio_Physics_C_ScaleFaceLayer::InFaceOverride' has a wrong offset!");
static_assert(offsetof(ABP_Espio_Physics_C_ScaleFaceLayer, bPlayMontage) == 0x000010, "Member 'ABP_Espio_Physics_C_ScaleFaceLayer::bPlayMontage' has a wrong offset!");
static_assert(offsetof(ABP_Espio_Physics_C_ScaleFaceLayer, InStateMachineFaceType) == 0x000011, "Member 'ABP_Espio_Physics_C_ScaleFaceLayer::InStateMachineFaceType' has a wrong offset!");
static_assert(offsetof(ABP_Espio_Physics_C_ScaleFaceLayer, InMontageFaceType) == 0x000012, "Member 'ABP_Espio_Physics_C_ScaleFaceLayer::InMontageFaceType' has a wrong offset!");
static_assert(offsetof(ABP_Espio_Physics_C_ScaleFaceLayer, ScaleFaceLayer_0) == 0x000018, "Member 'ABP_Espio_Physics_C_ScaleFaceLayer::ScaleFaceLayer_0' has a wrong offset!");

}

