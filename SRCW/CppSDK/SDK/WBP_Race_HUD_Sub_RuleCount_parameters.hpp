#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Race_HUD_Sub_RuleCount

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"


namespace SDK::Params
{

// Function WBP_Race_HUD_Sub_RuleCount.WBP_Race_HUD_Sub_RuleCount_C.ExecuteUbergraph_WBP_Race_HUD_Sub_RuleCount
// 0x000C (0x000C - 0x0000)
struct WBP_Race_HUD_Sub_RuleCount_C_ExecuteUbergraph_WBP_Race_HUD_Sub_RuleCount final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_RacerIndex;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NewCuont;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_RuleCount_C_ExecuteUbergraph_WBP_Race_HUD_Sub_RuleCount) == 0x000004, "Wrong alignment on WBP_Race_HUD_Sub_RuleCount_C_ExecuteUbergraph_WBP_Race_HUD_Sub_RuleCount");
static_assert(sizeof(WBP_Race_HUD_Sub_RuleCount_C_ExecuteUbergraph_WBP_Race_HUD_Sub_RuleCount) == 0x00000C, "Wrong size on WBP_Race_HUD_Sub_RuleCount_C_ExecuteUbergraph_WBP_Race_HUD_Sub_RuleCount");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_ExecuteUbergraph_WBP_Race_HUD_Sub_RuleCount, EntryPoint) == 0x000000, "Member 'WBP_Race_HUD_Sub_RuleCount_C_ExecuteUbergraph_WBP_Race_HUD_Sub_RuleCount::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_ExecuteUbergraph_WBP_Race_HUD_Sub_RuleCount, K2Node_Event_RacerIndex) == 0x000004, "Member 'WBP_Race_HUD_Sub_RuleCount_C_ExecuteUbergraph_WBP_Race_HUD_Sub_RuleCount::K2Node_Event_RacerIndex' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_ExecuteUbergraph_WBP_Race_HUD_Sub_RuleCount, K2Node_Event_NewCuont) == 0x000008, "Member 'WBP_Race_HUD_Sub_RuleCount_C_ExecuteUbergraph_WBP_Race_HUD_Sub_RuleCount::K2Node_Event_NewCuont' has a wrong offset!");

// Function WBP_Race_HUD_Sub_RuleCount.WBP_Race_HUD_Sub_RuleCount_C.SetNewCount
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_HUD_Sub_RuleCount_C_SetNewCount final
{
public:
	int32                                         NewCuont;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_RuleCount_C_SetNewCount) == 0x000004, "Wrong alignment on WBP_Race_HUD_Sub_RuleCount_C_SetNewCount");
static_assert(sizeof(WBP_Race_HUD_Sub_RuleCount_C_SetNewCount) == 0x000004, "Wrong size on WBP_Race_HUD_Sub_RuleCount_C_SetNewCount");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_SetNewCount, NewCuont) == 0x000000, "Member 'WBP_Race_HUD_Sub_RuleCount_C_SetNewCount::NewCuont' has a wrong offset!");

// Function WBP_Race_HUD_Sub_RuleCount.WBP_Race_HUD_Sub_RuleCount_C.SetNum
// 0x0030 (0x0030 - 0x0000)
struct WBP_Race_HUD_Sub_RuleCount_C_SetNum final
{
public:
	int32                                         NewNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NumText;                                           // 0x0008(0x0010)(Edit, BlueprintVisible)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0020(0x0010)()
};
static_assert(alignof(WBP_Race_HUD_Sub_RuleCount_C_SetNum) == 0x000008, "Wrong alignment on WBP_Race_HUD_Sub_RuleCount_C_SetNum");
static_assert(sizeof(WBP_Race_HUD_Sub_RuleCount_C_SetNum) == 0x000030, "Wrong size on WBP_Race_HUD_Sub_RuleCount_C_SetNum");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_SetNum, NewNum) == 0x000000, "Member 'WBP_Race_HUD_Sub_RuleCount_C_SetNum::NewNum' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_SetNum, NumText) == 0x000008, "Member 'WBP_Race_HUD_Sub_RuleCount_C_SetNum::NumText' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_SetNum, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000018, "Member 'WBP_Race_HUD_Sub_RuleCount_C_SetNum::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_SetNum, CallFunc_Conv_IntToText_ReturnValue) == 0x000020, "Member 'WBP_Race_HUD_Sub_RuleCount_C_SetNum::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WBP_Race_HUD_Sub_RuleCount.WBP_Race_HUD_Sub_RuleCount_C.SetupRule
// 0x0090 (0x0090 - 0x0000)
struct WBP_Race_HUD_Sub_RuleCount_C_SetupRule final
{
public:
	class FText                                   SelectText;                                        // 0x0000(0x0010)(Edit, BlueprintVisible)
	class FText                                   TextTouch;                                         // 0x0010(0x0010)(Edit, BlueprintVisible)
	struct FMenuGroupRaceBonusData                CallFunc_GetGroupRaceBonusData_ReturnValue;        // 0x0020(0x0070)(ConstParm)
};
static_assert(alignof(WBP_Race_HUD_Sub_RuleCount_C_SetupRule) == 0x000008, "Wrong alignment on WBP_Race_HUD_Sub_RuleCount_C_SetupRule");
static_assert(sizeof(WBP_Race_HUD_Sub_RuleCount_C_SetupRule) == 0x000090, "Wrong size on WBP_Race_HUD_Sub_RuleCount_C_SetupRule");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_SetupRule, SelectText) == 0x000000, "Member 'WBP_Race_HUD_Sub_RuleCount_C_SetupRule::SelectText' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_SetupRule, TextTouch) == 0x000010, "Member 'WBP_Race_HUD_Sub_RuleCount_C_SetupRule::TextTouch' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_SetupRule, CallFunc_GetGroupRaceBonusData_ReturnValue) == 0x000020, "Member 'WBP_Race_HUD_Sub_RuleCount_C_SetupRule::CallFunc_GetGroupRaceBonusData_ReturnValue' has a wrong offset!");

// Function WBP_Race_HUD_Sub_RuleCount.WBP_Race_HUD_Sub_RuleCount_C.UpdateRuleCount
// 0x000C (0x000C - 0x0000)
struct WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCount final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_ReturnValue;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCount) == 0x000004, "Wrong alignment on WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCount");
static_assert(sizeof(WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCount) == 0x00000C, "Wrong size on WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCount");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCount, RacerIndex) == 0x000000, "Member 'WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCount::RacerIndex' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCount, CallFunc_GetCount_ReturnValue) == 0x000004, "Member 'WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCount::CallFunc_GetCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCount, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000008, "Member 'WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCount::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_Race_HUD_Sub_RuleCount.WBP_Race_HUD_Sub_RuleCount_C.UpdateRuleCountImpl
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCountImpl final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCountImpl) == 0x000004, "Wrong alignment on WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCountImpl");
static_assert(sizeof(WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCountImpl) == 0x000004, "Wrong size on WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCountImpl");
static_assert(offsetof(WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCountImpl, RacerIndex) == 0x000000, "Member 'WBP_Race_HUD_Sub_RuleCount_C_UpdateRuleCountImpl::RacerIndex' has a wrong offset!");

}

