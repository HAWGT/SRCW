#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Rouge_Physics

#include "Basic.hpp"

#include "ABP_Rouge_Physics_classes.hpp"
#include "ABP_Rouge_Physics_parameters.hpp"


namespace SDK
{

// Function ABP_Rouge_Physics.ABP_Rouge_Physics_C.AnimGraph
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink*                       AnimGraph_0                                            (Parm, OutParm, NoDestructor)

void UABP_Rouge_Physics_C::AnimGraph(struct FPoseLink* AnimGraph_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Rouge_Physics_C", "AnimGraph");

	Params::ABP_Rouge_Physics_C_AnimGraph Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimGraph_0 != nullptr)
		*AnimGraph_0 = std::move(Parms.AnimGraph_0);
}


// Function ABP_Rouge_Physics.ABP_Rouge_Physics_C.ExecuteUbergraph_ABP_Rouge_Physics
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UABP_Rouge_Physics_C::ExecuteUbergraph_ABP_Rouge_Physics(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Rouge_Physics_C", "ExecuteUbergraph_ABP_Rouge_Physics");

	Params::ABP_Rouge_Physics_C_ExecuteUbergraph_ABP_Rouge_Physics Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ABP_Rouge_Physics.ABP_Rouge_Physics_C.HoverboardControlRogLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 HoverboardPose                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       HoverboardControlRogLayer_0                            (Parm, OutParm, NoDestructor)

void UABP_Rouge_Physics_C::HoverboardControlRogLayer(const struct FPoseLink& HoverboardPose, struct FPoseLink* HoverboardControlRogLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Rouge_Physics_C", "HoverboardControlRogLayer");

	Params::ABP_Rouge_Physics_C_HoverboardControlRogLayer Parms{};

	Parms.HoverboardPose = std::move(HoverboardPose);

	UObject::ProcessEvent(Func, &Parms);

	if (HoverboardControlRogLayer_0 != nullptr)
		*HoverboardControlRogLayer_0 = std::move(Parms.HoverboardControlRogLayer_0);
}


// Function ABP_Rouge_Physics.ABP_Rouge_Physics_C.HoverboardItemHoldBlendLeft
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 BasePose                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 LeftHoldPose                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       HoverboardItemHoldBlendLeft_0                          (Parm, OutParm, NoDestructor)

void UABP_Rouge_Physics_C::HoverboardItemHoldBlendLeft(const struct FPoseLink& BasePose, const struct FPoseLink& LeftHoldPose, struct FPoseLink* HoverboardItemHoldBlendLeft_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Rouge_Physics_C", "HoverboardItemHoldBlendLeft");

	Params::ABP_Rouge_Physics_C_HoverboardItemHoldBlendLeft Parms{};

	Parms.BasePose = std::move(BasePose);
	Parms.LeftHoldPose = std::move(LeftHoldPose);

	UObject::ProcessEvent(Func, &Parms);

	if (HoverboardItemHoldBlendLeft_0 != nullptr)
		*HoverboardItemHoldBlendLeft_0 = std::move(Parms.HoverboardItemHoldBlendLeft_0);
}


// Function ABP_Rouge_Physics.ABP_Rouge_Physics_C.HoverboardItemHoldBlendRight
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 BasePose                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 RightHoldPose                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       HoverboardItemHoldBlendRight_0                         (Parm, OutParm, NoDestructor)

void UABP_Rouge_Physics_C::HoverboardItemHoldBlendRight(const struct FPoseLink& BasePose, const struct FPoseLink& RightHoldPose, struct FPoseLink* HoverboardItemHoldBlendRight_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Rouge_Physics_C", "HoverboardItemHoldBlendRight");

	Params::ABP_Rouge_Physics_C_HoverboardItemHoldBlendRight Parms{};

	Parms.BasePose = std::move(BasePose);
	Parms.RightHoldPose = std::move(RightHoldPose);

	UObject::ProcessEvent(Func, &Parms);

	if (HoverboardItemHoldBlendRight_0 != nullptr)
		*HoverboardItemHoldBlendRight_0 = std::move(Parms.HoverboardItemHoldBlendRight_0);
}


// Function ABP_Rouge_Physics.ABP_Rouge_Physics_C.KawaiiPhysicsLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 InPose                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       KawaiiPhysicsLayer_0                                   (Parm, OutParm, NoDestructor)

void UABP_Rouge_Physics_C::KawaiiPhysicsLayer(const struct FPoseLink& InPose, struct FPoseLink* KawaiiPhysicsLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Rouge_Physics_C", "KawaiiPhysicsLayer");

	Params::ABP_Rouge_Physics_C_KawaiiPhysicsLayer Parms{};

	Parms.InPose = std::move(InPose);

	UObject::ProcessEvent(Func, &Parms);

	if (KawaiiPhysicsLayer_0 != nullptr)
		*KawaiiPhysicsLayer_0 = std::move(Parms.KawaiiPhysicsLayer_0);
}


// Function ABP_Rouge_Physics.ABP_Rouge_Physics_C.MachineItemHoldBlendLeft
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 BasePose                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 LeftHoldPose                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       MachineItemHoldBlendLeft_0                             (Parm, OutParm, NoDestructor)

void UABP_Rouge_Physics_C::MachineItemHoldBlendLeft(const struct FPoseLink& BasePose, const struct FPoseLink& LeftHoldPose, struct FPoseLink* MachineItemHoldBlendLeft_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Rouge_Physics_C", "MachineItemHoldBlendLeft");

	Params::ABP_Rouge_Physics_C_MachineItemHoldBlendLeft Parms{};

	Parms.BasePose = std::move(BasePose);
	Parms.LeftHoldPose = std::move(LeftHoldPose);

	UObject::ProcessEvent(Func, &Parms);

	if (MachineItemHoldBlendLeft_0 != nullptr)
		*MachineItemHoldBlendLeft_0 = std::move(Parms.MachineItemHoldBlendLeft_0);
}


// Function ABP_Rouge_Physics.ABP_Rouge_Physics_C.MachineItemHoldBlendRight
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 BasePose                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 LeftHoldPose                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       MachineItemHoldBlendRight_0                            (Parm, OutParm, NoDestructor)

void UABP_Rouge_Physics_C::MachineItemHoldBlendRight(const struct FPoseLink& BasePose, const struct FPoseLink& LeftHoldPose, struct FPoseLink* MachineItemHoldBlendRight_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Rouge_Physics_C", "MachineItemHoldBlendRight");

	Params::ABP_Rouge_Physics_C_MachineItemHoldBlendRight Parms{};

	Parms.BasePose = std::move(BasePose);
	Parms.LeftHoldPose = std::move(LeftHoldPose);

	UObject::ProcessEvent(Func, &Parms);

	if (MachineItemHoldBlendRight_0 != nullptr)
		*MachineItemHoldBlendRight_0 = std::move(Parms.MachineItemHoldBlendRight_0);
}


// Function ABP_Rouge_Physics.ABP_Rouge_Physics_C.ScaleFaceLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 InFaceOverride                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool                                    bPlayMontage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBoneScaleFaceType                      InStateMachineFaceType                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBoneScaleFaceType                      InMontageFaceType                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPoseLink*                       ScaleFaceLayer_0                                       (Parm, OutParm, NoDestructor)

void UABP_Rouge_Physics_C::ScaleFaceLayer(const struct FPoseLink& InFaceOverride, bool bPlayMontage, EBoneScaleFaceType InStateMachineFaceType, EBoneScaleFaceType InMontageFaceType, struct FPoseLink* ScaleFaceLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Rouge_Physics_C", "ScaleFaceLayer");

	Params::ABP_Rouge_Physics_C_ScaleFaceLayer Parms{};

	Parms.InFaceOverride = std::move(InFaceOverride);
	Parms.bPlayMontage = bPlayMontage;
	Parms.InStateMachineFaceType = InStateMachineFaceType;
	Parms.InMontageFaceType = InMontageFaceType;

	UObject::ProcessEvent(Func, &Parms);

	if (ScaleFaceLayer_0 != nullptr)
		*ScaleFaceLayer_0 = std::move(Parms.ScaleFaceLayer_0);
}

}

