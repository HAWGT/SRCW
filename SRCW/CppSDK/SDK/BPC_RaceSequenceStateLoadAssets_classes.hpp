#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_RaceSequenceStateLoadAssets

#include "Basic.hpp"

#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "UnionSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UnionRun_structs.hpp"
#include "UnionUI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_RaceSequenceStateLoadAssets.BPC_RaceSequenceStateLoadAssets_C
// 0x0360 (0x0578 - 0x0218)
class UBPC_RaceSequenceStateLoadAssets_C final : public URaceSequenceStateLoadAssets
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0218(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UUnionBtCollisionBinaryAsset*           TempCollisionAsset;                                // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUnionNavigationBinaryDataAsset*        TempNavigationAsset;                               // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUnionRunPathBinaryDataAsset*           TempRunPathAsset;                                  // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EStageId                                      TempStageId;                                       // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TempLocationOffset;                                // 0x0240(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempDomainIndex;                                   // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTime;                                         // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              endTime;                                           // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUnionComPathBinaryDataAsset*           TempComPathAsset;                                  // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPrimaryAssetId>                LoadCourseAssetIdList;                             // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EStageId, struct FPrimaryAssetId>        StageDataAssetMap;                                 // 0x0288(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TempLightChannel;                                  // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TemporaryIndex;                                    // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             TempCourseMapTexture;                              // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FUnionRaceStageDynamicData             TempStageDynamicData;                              // 0x02E8(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FAppRaceStageSetting>           StageSettings;                                     // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	ETravelRingScreenType                         TempTravelRingScreenType;                          // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EIrregularEventId                             TempIrregularEventId;                              // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TempEditorFinallap;                                // 0x036A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TempEditorMainCourse;                              // 0x036B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStageCourseMapInfo>            Course_Map_UIInfo;                                 // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          TempFinalLap;                                      // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTexture2D*>                     TempCourseMapTexture_0;                            // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TmpCoutseMapIndex;                                 // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStageCourseMapInfo                    NewVar;                                            // 0x03A0(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EStageCourseMapInfo, struct FStageCourseMapParam> Course_Map_UIParam;                       // 0x03E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EStageCourseMainSubMapInfo, struct FStageCourseMapParam> SubCourse_Map_UIParam;             // 0x0438(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 UnloadStageName;                                   // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class FString, class FString>            ConvertUnLoadName;                                 // 0x0498(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UUnionBtCollisionBinaryAsset*           CollisionData;                                     // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUnionRunPathBinaryDataAsset*           RunPathData;                                       // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUnionComPathBinaryDataAsset*           ComPathData;                                       // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUnionNavigationBinaryDataAsset*        NavigationData;                                    // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   RowName;                                           // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           RowNames;                                          // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstance*>              TempEntranceCubemap;                               // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstance*>              TempExitCubemap;                                   // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AnotherDimeTrialCount;                             // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempCourseEditorIndex;                             // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StageCourseMainSubIndex;                           // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    TempEntranceMesh;                                  // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMesh*>                    TempExitMesh;                                      // 0x0560(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NewVar_0;                                          // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DevelopmentTimerLap(const class FString& Tag);
	void SelectMaterialInstance(TSoftObjectPtr<class UMaterialInstance> A, TSoftObjectPtr<class UMaterialInstance> B, bool Select, TSoftObjectPtr<class UMaterialInstance>* Ret);
	void SelectTextureCube(TSoftObjectPtr<class UTextureCube> A, TSoftObjectPtr<class UTextureCube> B, bool Select, TSoftObjectPtr<class UTextureCube>* Ret);
	void RegisterObjectLevel(class UPrimaryStageDataAsset* StageData);
	void EndLoadTimeMeasurement();
	void BeginLoadTimeMeasurement();
	void PreCreateRaceSingle(EStageId StageId, class UUnionBtCollisionBinaryAsset* CollisionAsset, class UUnionNavigationBinaryDataAsset* NavigationAsset, class UUnionRunPathBinaryDataAsset* RuPathAsset, class UUnionComPathBinaryDataAsset* ComPathAsset);
	void OnLoaded_1881E30949760AF8F517E1A8E8E12334(class UObject* Loaded);
	void OnLoaded_85DA89AA4A74182281DE208A65D832FE(class UObject* Loaded);
	void OnLoaded_DAE0F2D042E1EE8E98127380E631900B(class UObject* Loaded);
	void OnLoaded_F240FC9447C9A18C546668ADCD4F307B(class UObject* Loaded);
	void OnLoaded_35CC1E574E5588E39448ADBB4E57CA00(class UObject* Loaded);
	void OnLoaded_F53382BD4C684157B17F42A5912B4B19(class UObject* Loaded);
	void OnLoaded_1881E30949760AF8F517E1A80588BBD2(class UObject* Loaded);
	void OnLoaded_85DA89AA4A74182281DE208A88B1AA18(class UObject* Loaded);
	void OnLoaded_DAE0F2D042E1EE8E981273800B5808ED(class UObject* Loaded);
	void OnLoaded_F240FC9447C9A18C546668AD2026A89D(class UObject* Loaded);
	void Completed_0236B9464600658108D0BDBEFF5198A5(const TArray<class UObject*>& Loaded);
	void OnLoaded_74D1CC7A4F84EBED1C5CFC8D43B48DB7(class UObject* Loaded);
	void OnLoaded_FFB6617641135AD0D32A768FC1989049(class UObject* Loaded);
	void OnLoaded_7FB8D15543DD9CE9EC69B19710B777B9(class UObject* Loaded);
	void OnLoaded_26872E9640F7F23EF04A41B77864513E(class UObject* Loaded);
	void OnLoaded_44A7D1534DFE4EE4FB91AD8375BFD3E2(class UObject* Loaded);
	void OnLoaded_31E9E3EE486E6EF4E8ECDC82813540EA(class UObject* Loaded);
	void OnLoaded_AC84F9DA4173DFEB8B103D821EDCE00B(class UObject* Loaded);
	void OnLoaded_7996DEF049A092A6E49671B674D70BB1(class UObject* Loaded);
	void OnLoaded_E29ACA1D498FE0A77FA03FBA82F46999(class UObject* Loaded);
	void OnLoaded_53F9E91A46FA061383A2709D7D14B927(class UObject* Loaded);
	void OnLoaded_0226E8684E9F4CF1912DD2B08BCDD432(class UObject* Loaded);
	void OnLoaded_44C233E04C497E898A6EE68EA5506F5A(class UObject* Loaded);
	void OnLoaded_2099005542700D2022F146817F7CD551(class UObject* Loaded);
	void OnLoaded_1881E30949760AF8F517E1A8502FCB2D(class UObject* Loaded);
	void OnLoaded_85DA89AA4A74182281DE208ADD16DAE7(class UObject* Loaded);
	void OnLoaded_697F5A3248F5E8F3196B0098EA6A45BF(class UObject* Loaded);
	void OnLoaded_470FF1454207867BDDE76AB7420F01A4(class UObject* Loaded);
	void OnLoaded_9FF53A5440DBF220AB61D1A2BE554E6B(class UObject* Loaded);
	void OnLoaded_D6D8FBBE4351F56F8B516DAE7F6C1B0F(class UObject* Loaded);
	void OnLoaded_DAE0F2D042E1EE8E981273805EFF7812(class UObject* Loaded);
	void OnLoaded_F240FC9447C9A18C546668AD9F028A2B(class UObject* Loaded);
	void OnLoaded_DAE0F2D042E1EE8E98127380B47C2A5B(class UObject* Loaded);
	void OnLoaded_85DA89AA4A74182281DE208A379588AE(class UObject* Loaded);
	void OnLoaded_1881E30949760AF8F517E1A8BAAC9964(class UObject* Loaded);
	void Completed_C44C0BCB4761CE1EEC04BEB933867411(const TArray<class UObject*>& Loaded);
	void OnLoaded_F240FC9447C9A18C546668AD7581D862(class UObject* Loaded);
	void OnInitState();
	void OnLoadedStageAsset(int32 StageIndex);
	void OnExitState();
	void ExecuteUbergraph_BPC_RaceSequenceStateLoadAssets(int32 EntryPoint);

	void GetGroupRuleData(EGroupRaceRule GroupRaceRule, struct FGroupRaceRuleData* GroupRaceRuleData) const;
	void Get_Group_Rule_Data_Impl(EGroupRaceRule GroupRaceRule, struct FGroupRaceRuleData* GroupRaceRuleData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_RaceSequenceStateLoadAssets_C">();
	}
	static class UBPC_RaceSequenceStateLoadAssets_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_RaceSequenceStateLoadAssets_C>();
	}
};
static_assert(alignof(UBPC_RaceSequenceStateLoadAssets_C) == 0x000008, "Wrong alignment on UBPC_RaceSequenceStateLoadAssets_C");
static_assert(sizeof(UBPC_RaceSequenceStateLoadAssets_C) == 0x000578, "Wrong size on UBPC_RaceSequenceStateLoadAssets_C");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, UberGraphFrame) == 0x000218, "Member 'UBPC_RaceSequenceStateLoadAssets_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempCollisionAsset) == 0x000220, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempCollisionAsset' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempNavigationAsset) == 0x000228, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempNavigationAsset' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempRunPathAsset) == 0x000230, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempRunPathAsset' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempStageId) == 0x000238, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempStageId' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempLocationOffset) == 0x000240, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempLocationOffset' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempDomainIndex) == 0x000258, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempDomainIndex' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, StartTime) == 0x000260, "Member 'UBPC_RaceSequenceStateLoadAssets_C::StartTime' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, endTime) == 0x000268, "Member 'UBPC_RaceSequenceStateLoadAssets_C::endTime' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempComPathAsset) == 0x000270, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempComPathAsset' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, LoadCourseAssetIdList) == 0x000278, "Member 'UBPC_RaceSequenceStateLoadAssets_C::LoadCourseAssetIdList' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, StageDataAssetMap) == 0x000288, "Member 'UBPC_RaceSequenceStateLoadAssets_C::StageDataAssetMap' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempLightChannel) == 0x0002D8, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempLightChannel' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TemporaryIndex) == 0x0002DC, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TemporaryIndex' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempCourseMapTexture) == 0x0002E0, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempCourseMapTexture' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempStageDynamicData) == 0x0002E8, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempStageDynamicData' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, StageSettings) == 0x000358, "Member 'UBPC_RaceSequenceStateLoadAssets_C::StageSettings' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempTravelRingScreenType) == 0x000368, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempTravelRingScreenType' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempIrregularEventId) == 0x000369, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempIrregularEventId' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempEditorFinallap) == 0x00036A, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempEditorFinallap' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempEditorMainCourse) == 0x00036B, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempEditorMainCourse' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, Course_Map_UIInfo) == 0x000370, "Member 'UBPC_RaceSequenceStateLoadAssets_C::Course_Map_UIInfo' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempFinalLap) == 0x000380, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempFinalLap' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempCourseMapTexture_0) == 0x000388, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempCourseMapTexture_0' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TmpCoutseMapIndex) == 0x000398, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TmpCoutseMapIndex' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, NewVar) == 0x0003A0, "Member 'UBPC_RaceSequenceStateLoadAssets_C::NewVar' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, Course_Map_UIParam) == 0x0003E8, "Member 'UBPC_RaceSequenceStateLoadAssets_C::Course_Map_UIParam' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, SubCourse_Map_UIParam) == 0x000438, "Member 'UBPC_RaceSequenceStateLoadAssets_C::SubCourse_Map_UIParam' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, UnloadStageName) == 0x000488, "Member 'UBPC_RaceSequenceStateLoadAssets_C::UnloadStageName' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, ConvertUnLoadName) == 0x000498, "Member 'UBPC_RaceSequenceStateLoadAssets_C::ConvertUnLoadName' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, CollisionData) == 0x0004E8, "Member 'UBPC_RaceSequenceStateLoadAssets_C::CollisionData' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, RunPathData) == 0x0004F0, "Member 'UBPC_RaceSequenceStateLoadAssets_C::RunPathData' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, ComPathData) == 0x0004F8, "Member 'UBPC_RaceSequenceStateLoadAssets_C::ComPathData' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, NavigationData) == 0x000500, "Member 'UBPC_RaceSequenceStateLoadAssets_C::NavigationData' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, RowName) == 0x000508, "Member 'UBPC_RaceSequenceStateLoadAssets_C::RowName' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, RowNames) == 0x000510, "Member 'UBPC_RaceSequenceStateLoadAssets_C::RowNames' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempEntranceCubemap) == 0x000520, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempEntranceCubemap' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempExitCubemap) == 0x000530, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempExitCubemap' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, AnotherDimeTrialCount) == 0x000540, "Member 'UBPC_RaceSequenceStateLoadAssets_C::AnotherDimeTrialCount' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempCourseEditorIndex) == 0x000544, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempCourseEditorIndex' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, StageCourseMainSubIndex) == 0x000548, "Member 'UBPC_RaceSequenceStateLoadAssets_C::StageCourseMainSubIndex' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempEntranceMesh) == 0x000550, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempEntranceMesh' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, TempExitMesh) == 0x000560, "Member 'UBPC_RaceSequenceStateLoadAssets_C::TempExitMesh' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateLoadAssets_C, NewVar_0) == 0x000570, "Member 'UBPC_RaceSequenceStateLoadAssets_C::NewVar_0' has a wrong offset!");

}

