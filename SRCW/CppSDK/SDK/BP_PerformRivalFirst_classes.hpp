#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PerformRivalFirst

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"
#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PerformRivalFirst.BP_PerformRivalFirst_C
// 0x0128 (0x03C8 - 0x02A0)
class ABP_PerformRivalFirst_C final : public APerformRivalFirst
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ALevelSequenceActor*                    PlayerLevelSequenceActor;                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    RivalLevelSequenceActor;                           // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   PlayerLevelSequencePlayer;                         // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   RivalLevelSequencePlayer;                          // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    ScreenSlideLevelSequenceActor;                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              PlaySceneEvent;                                    // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ULevelSequencePlayer*                   ScreenSlideLevelSequencePlayer;                    // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_RaceBefore_RivalRacer_Cutin_C*     CutInUI;                                           // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ASceneDriver*                           PlayerDriver;                                      // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASceneDriver*                           RivalDriver;                                       // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnFinishedPlay;                                    // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ASceneCapture2D*                        SceneCapture2D;                                    // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_RaceBefore_RivalRacer_C*           IntroductionUI;                                    // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          StartSE;                                           // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_Movie_Subtitles_C*                 SubtitleUI;                                        // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USceneDriverAnimInstance*               SceneDriverAnimInstance;                           // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangedMaterial;                                   // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACineCameraActor*                       RivalCineCameraActor;                              // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTextureRenderTarget2D>  RT_Rival;                                          // 0x0348(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsLoadStart;                                       // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RivalRacerIndex;                                   // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DriverDataTable;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObject*                                PlayerVoiceTable;                                  // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObject*                                RivalVoiceTable;                                   // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   PlayerStringTableId;                               // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RivalStringTableId;                                // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPlayerSceneFinished;                            // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsRivalSceneFinished;                             // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPlayerVoiceFinished;                            // 0x03A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsRivalVoiceFinished;                             // 0x03A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        VoiceDelayAfterPlayback;                           // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             LipSyncMotions;                                    // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bSoloMode;                                         // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URaceSequenceStatePerformRival*         OwnerSequence;                                     // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void Apply_Rival_Level();
	void CreateScene(class ASceneDriver* In_Player, class ASceneDriver* In_Rival, int32 In_RivalIndex, bool bIn_SoloMode);
	void ExecuteUbergraph_BP_PerformRivalFirst(int32 EntryPoint);
	void GetPlayerLevelSequenceReference(EDriverId In_PlayerDriverId, EDriverId In_RivalDriverId, bool In_IsHover, TSoftObjectPtr<class ULevelSequence>* Out_Asset);
	void GetRivalLevelSequenceReference(EDriverId In_PlayerDriverId, EDriverId In_RivalDriverId, bool In_IsHover, TSoftObjectPtr<class ULevelSequence>* Out_Asset);
	void GetStageId(EStageId* Out_StageId);
	void IsVisibleSubtitle(class ASceneDriver* InDriver, bool* bVisible);
	void OnFinished_PlayerScene();
	void OnFinished_PlayerVoice();
	void OnFinished_RivalScene();
	void OnFinished_RivalVoice();
	void OnFinished_ScreenSlide();
	void OnPlayRivalIntroduction();
	void OnPlaySceneEvent();
	void PlayScene(class AActor* In_PlayerRoot, class AActor* In_RivalRoot);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SetSubtitle(const class FText& In_Subtitle);

	void GetPlayerMessageFromTable(EDriverId In_PlayerDriverId, EDriverId In_RivalDriverId, class FText* Out_Text) const;
	void GetRivalMessageFromTable(EDriverId In_PlayerDriverId, EDriverId In_RivalDriverId, bool In_SoloMode, class FText* Out_Text) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PerformRivalFirst_C">();
	}
	static class ABP_PerformRivalFirst_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PerformRivalFirst_C>();
	}
};
static_assert(alignof(ABP_PerformRivalFirst_C) == 0x000008, "Wrong alignment on ABP_PerformRivalFirst_C");
static_assert(sizeof(ABP_PerformRivalFirst_C) == 0x0003C8, "Wrong size on ABP_PerformRivalFirst_C");
static_assert(offsetof(ABP_PerformRivalFirst_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_PerformRivalFirst_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, PlayerLevelSequenceActor) == 0x0002A8, "Member 'ABP_PerformRivalFirst_C::PlayerLevelSequenceActor' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, RivalLevelSequenceActor) == 0x0002B0, "Member 'ABP_PerformRivalFirst_C::RivalLevelSequenceActor' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, PlayerLevelSequencePlayer) == 0x0002B8, "Member 'ABP_PerformRivalFirst_C::PlayerLevelSequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, RivalLevelSequencePlayer) == 0x0002C0, "Member 'ABP_PerformRivalFirst_C::RivalLevelSequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, ScreenSlideLevelSequenceActor) == 0x0002C8, "Member 'ABP_PerformRivalFirst_C::ScreenSlideLevelSequenceActor' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, PlaySceneEvent) == 0x0002D0, "Member 'ABP_PerformRivalFirst_C::PlaySceneEvent' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, ScreenSlideLevelSequencePlayer) == 0x0002E0, "Member 'ABP_PerformRivalFirst_C::ScreenSlideLevelSequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, CutInUI) == 0x0002E8, "Member 'ABP_PerformRivalFirst_C::CutInUI' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, PlayerDriver) == 0x0002F0, "Member 'ABP_PerformRivalFirst_C::PlayerDriver' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, RivalDriver) == 0x0002F8, "Member 'ABP_PerformRivalFirst_C::RivalDriver' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, OnFinishedPlay) == 0x000300, "Member 'ABP_PerformRivalFirst_C::OnFinishedPlay' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, SceneCapture2D) == 0x000310, "Member 'ABP_PerformRivalFirst_C::SceneCapture2D' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, IntroductionUI) == 0x000318, "Member 'ABP_PerformRivalFirst_C::IntroductionUI' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, StartSE) == 0x000320, "Member 'ABP_PerformRivalFirst_C::StartSE' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, SubtitleUI) == 0x000328, "Member 'ABP_PerformRivalFirst_C::SubtitleUI' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, SceneDriverAnimInstance) == 0x000330, "Member 'ABP_PerformRivalFirst_C::SceneDriverAnimInstance' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, ChangedMaterial) == 0x000338, "Member 'ABP_PerformRivalFirst_C::ChangedMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, RivalCineCameraActor) == 0x000340, "Member 'ABP_PerformRivalFirst_C::RivalCineCameraActor' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, RT_Rival) == 0x000348, "Member 'ABP_PerformRivalFirst_C::RT_Rival' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, IsLoadStart) == 0x000370, "Member 'ABP_PerformRivalFirst_C::IsLoadStart' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, RivalRacerIndex) == 0x000374, "Member 'ABP_PerformRivalFirst_C::RivalRacerIndex' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, DriverDataTable) == 0x000378, "Member 'ABP_PerformRivalFirst_C::DriverDataTable' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, PlayerVoiceTable) == 0x000380, "Member 'ABP_PerformRivalFirst_C::PlayerVoiceTable' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, RivalVoiceTable) == 0x000388, "Member 'ABP_PerformRivalFirst_C::RivalVoiceTable' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, PlayerStringTableId) == 0x000390, "Member 'ABP_PerformRivalFirst_C::PlayerStringTableId' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, RivalStringTableId) == 0x000398, "Member 'ABP_PerformRivalFirst_C::RivalStringTableId' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, bIsPlayerSceneFinished) == 0x0003A0, "Member 'ABP_PerformRivalFirst_C::bIsPlayerSceneFinished' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, bIsRivalSceneFinished) == 0x0003A1, "Member 'ABP_PerformRivalFirst_C::bIsRivalSceneFinished' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, bIsPlayerVoiceFinished) == 0x0003A2, "Member 'ABP_PerformRivalFirst_C::bIsPlayerVoiceFinished' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, bIsRivalVoiceFinished) == 0x0003A3, "Member 'ABP_PerformRivalFirst_C::bIsRivalVoiceFinished' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, VoiceDelayAfterPlayback) == 0x0003A8, "Member 'ABP_PerformRivalFirst_C::VoiceDelayAfterPlayback' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, LipSyncMotions) == 0x0003B0, "Member 'ABP_PerformRivalFirst_C::LipSyncMotions' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, bSoloMode) == 0x0003B8, "Member 'ABP_PerformRivalFirst_C::bSoloMode' has a wrong offset!");
static_assert(offsetof(ABP_PerformRivalFirst_C, OwnerSequence) == 0x0003C0, "Member 'ABP_PerformRivalFirst_C::OwnerSequence' has a wrong offset!");

}

