#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_RaceSequenceStateResultRival

#include "Basic.hpp"

#include "BPC_RaceSequenceStateResultRival_classes.hpp"
#include "BPC_RaceSequenceStateResultRival_parameters.hpp"


namespace SDK
{

// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.ApplyRivalLevel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::ApplyRivalLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "ApplyRivalLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.BindFullScreenMouseClick
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TDelegate<void()>&                Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBPC_RaceSequenceStateResultRival_C::BindFullScreenMouseClick(const TDelegate<void()>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "BindFullScreenMouseClick");

	Params::BPC_RaceSequenceStateResultRival_C_BindFullScreenMouseClick Parms{};

	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.CreateRewardGetDisplay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ERewardAchievementType                  InRewardAchievementType                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_RaceSequenceStateResultRival_C::CreateRewardGetDisplay(ERewardAchievementType InRewardAchievementType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "CreateRewardGetDisplay");

	Params::BPC_RaceSequenceStateResultRival_C_CreateRewardGetDisplay Parms{};

	Parms.InRewardAchievementType = InRewardAchievementType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.CreateRivalTransition
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::CreateRivalTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "CreateRivalTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.DestroySequenceActor
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::DestroySequenceActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "DestroySequenceActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.ExecuteUbergraph_BPC_RaceSequenceStateResultRival
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_RaceSequenceStateResultRival_C::ExecuteUbergraph_BPC_RaceSequenceStateResultRival(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "ExecuteUbergraph_BPC_RaceSequenceStateResultRival");

	Params::BPC_RaceSequenceStateResultRival_C_ExecuteUbergraph_BPC_RaceSequenceStateResultRival Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.GetPlaySequencerPattern
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_RaceSequenceStateResultRival_C::GetPlaySequencerPattern(int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "GetPlaySequencerPattern");

	Params::BPC_RaceSequenceStateResultRival_C_GetPlaySequencerPattern Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.GetRewardAchievementType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bOutRewardExist                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERewardAchievementType*                 OutRewardAchievementType                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_RaceSequenceStateResultRival_C::GetRewardAchievementType(bool* bOutRewardExist, ERewardAchievementType* OutRewardAchievementType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "GetRewardAchievementType");

	Params::BPC_RaceSequenceStateResultRival_C_GetRewardAchievementType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bOutRewardExist != nullptr)
		*bOutRewardExist = Parms.bOutRewardExist;

	if (OutRewardAchievementType != nullptr)
		*OutRewardAchievementType = Parms.OutRewardAchievementType;
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.IsPlayerWin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBPC_RaceSequenceStateResultRival_C::IsPlayerWin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "IsPlayerWin");

	Params::BPC_RaceSequenceStateResultRival_C_IsPlayerWin Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnEnabledSkip
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnEnabledSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnEnabledSkip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnEndResult
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnEndResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnEndResult");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnExitState
// (Event, Public, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnExitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnExitState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnFinishedFade_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EUnionUIFadeDirection                   FadeDirection                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_RaceSequenceStateResultRival_C::OnFinishedFade_Event(EUnionUIFadeDirection FadeDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnFinishedFade_Event");

	Params::BPC_RaceSequenceStateResultRival_C_OnFinishedFade_Event Parms{};

	Parms.FadeDirection = FadeDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnFinishedTransition_Event
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnFinishedTransition_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnFinishedTransition_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnFinishedTransitionEffect_Event
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnFinishedTransitionEffect_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnFinishedTransitionEffect_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnFullScreenMouseClickEvent
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnFullScreenMouseClickEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnFullScreenMouseClickEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnFullScreenMouseClickSkipEvent
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnFullScreenMouseClickSkipEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnFullScreenMouseClickSkipEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnInitState
// (Event, Public, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnInitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnInitState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnRewardDisplayEnd_Event
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnRewardDisplayEnd_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnRewardDisplayEnd_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnRewardGetDisplayFinished
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnRewardGetDisplayFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnRewardGetDisplayFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnRivalSelectSkipKeyPressed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKey&                      PressedKey                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBPC_RaceSequenceStateResultRival_C::OnRivalSelectSkipKeyPressed(const struct FKey& PressedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnRivalSelectSkipKeyPressed");

	Params::BPC_RaceSequenceStateResultRival_C_OnRivalSelectSkipKeyPressed Parms{};

	Parms.PressedKey = std::move(PressedKey);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnSaveComplete_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ESaveDataStatus                         Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_RaceSequenceStateResultRival_C::OnSaveComplete_Event(ESaveDataStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnSaveComplete_Event");

	Params::BPC_RaceSequenceStateResultRival_C_OnSaveComplete_Event Parms{};

	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnSkipKeyPressed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKey&                      PressedKey                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBPC_RaceSequenceStateResultRival_C::OnSkipKeyPressed(const struct FKey& PressedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnSkipKeyPressed");

	Params::BPC_RaceSequenceStateResultRival_C_OnSkipKeyPressed Parms{};

	Parms.PressedKey = std::move(PressedKey);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnStartAnimation
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnStartAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnStartAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnStateEndFadeFinished
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnStateEndFadeFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnStateEndFadeFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnStateEndFinRemoveWidgets
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::OnStateEndFinRemoveWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnStateEndFinRemoveWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.OnUpdateState
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_RaceSequenceStateResultRival_C::OnUpdateState(float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "OnUpdateState");

	Params::BPC_RaceSequenceStateResultRival_C_OnUpdateState Parms{};

	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.RivalBattleResultFin
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::RivalBattleResultFin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "RivalBattleResultFin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.SetDefaultScreen
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::SetDefaultScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "SetDefaultScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.SetSubtitle
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      In_Subtitle                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UBPC_RaceSequenceStateResultRival_C::SetSubtitle(const class FText& In_Subtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "SetSubtitle");

	Params::BPC_RaceSequenceStateResultRival_C_SetSubtitle Parms{};

	Parms.In_Subtitle = std::move(In_Subtitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.StartMovieScene
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::StartMovieScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "StartMovieScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.StartStateEndFade
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::StartStateEndFade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "StartStateEndFade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.ToEndMenu
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStateResultRival_C::ToEndMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "ToEndMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.UnbindFullScreenMouseClick
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TDelegate<void()>&                Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBPC_RaceSequenceStateResultRival_C::UnbindFullScreenMouseClick(const TDelegate<void()>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "UnbindFullScreenMouseClick");

	Params::BPC_RaceSequenceStateResultRival_C_UnbindFullScreenMouseClick Parms{};

	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_RaceSequenceStateResultRival.BPC_RaceSequenceStateResultRival_C.GetRivalMessageFromTable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EDriverId                               In_RivalDriverId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPerformRivalOutcome                    In_RivalOutcom                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIn_FinalRound                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            Out_Text                                               (Parm, OutParm)

void UBPC_RaceSequenceStateResultRival_C::GetRivalMessageFromTable(EDriverId In_RivalDriverId, EPerformRivalOutcome In_RivalOutcom, bool bIn_FinalRound, class FText* Out_Text) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStateResultRival_C", "GetRivalMessageFromTable");

	Params::BPC_RaceSequenceStateResultRival_C_GetRivalMessageFromTable Parms{};

	Parms.In_RivalDriverId = In_RivalDriverId;
	Parms.In_RivalOutcom = In_RivalOutcom;
	Parms.bIn_FinalRound = bIn_FinalRound;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Text != nullptr)
		*Out_Text = std::move(Parms.Out_Text);
}

}

