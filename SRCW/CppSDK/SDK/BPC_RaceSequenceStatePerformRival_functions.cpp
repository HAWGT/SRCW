#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_RaceSequenceStatePerformRival

#include "Basic.hpp"

#include "BPC_RaceSequenceStatePerformRival_classes.hpp"
#include "BPC_RaceSequenceStatePerformRival_parameters.hpp"


namespace SDK
{

// Function BPC_RaceSequenceStatePerformRival.BPC_RaceSequenceStatePerformRival_C.OnInitState
// (Event, Public, BlueprintEvent)

void UBPC_RaceSequenceStatePerformRival_C::OnInitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStatePerformRival_C", "OnInitState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStatePerformRival.BPC_RaceSequenceStatePerformRival_C.OnUpdateState
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_RaceSequenceStatePerformRival_C::OnUpdateState(float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStatePerformRival_C", "OnUpdateState");

	Params::BPC_RaceSequenceStatePerformRival_C_OnUpdateState Parms{};

	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_RaceSequenceStatePerformRival.BPC_RaceSequenceStatePerformRival_C.OnExitState
// (Event, Public, BlueprintEvent)

void UBPC_RaceSequenceStatePerformRival_C::OnExitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStatePerformRival_C", "OnExitState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStatePerformRival.BPC_RaceSequenceStatePerformRival_C.OnFinishedPlay
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStatePerformRival_C::OnFinishedPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStatePerformRival_C", "OnFinishedPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStatePerformRival.BPC_RaceSequenceStatePerformRival_C.OnClosedSequnce
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStatePerformRival_C::OnClosedSequnce()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStatePerformRival_C", "OnClosedSequnce");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStatePerformRival.BPC_RaceSequenceStatePerformRival_C.OnSkipped
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKey&                      PressedKey                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBPC_RaceSequenceStatePerformRival_C::OnSkipped(const struct FKey& PressedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStatePerformRival_C", "OnSkipped");

	Params::BPC_RaceSequenceStatePerformRival_C_OnSkipped Parms{};

	Parms.PressedKey = std::move(PressedKey);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_RaceSequenceStatePerformRival.BPC_RaceSequenceStatePerformRival_C.OnFullScreenMouseClick
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStatePerformRival_C::OnFullScreenMouseClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStatePerformRival_C", "OnFullScreenMouseClick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStatePerformRival.BPC_RaceSequenceStatePerformRival_C.OnEnabledSkip
// (BlueprintCallable, BlueprintEvent)

void UBPC_RaceSequenceStatePerformRival_C::OnEnabledSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStatePerformRival_C", "OnEnabledSkip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_RaceSequenceStatePerformRival.BPC_RaceSequenceStatePerformRival_C.ExecuteUbergraph_BPC_RaceSequenceStatePerformRival
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_RaceSequenceStatePerformRival_C::ExecuteUbergraph_BPC_RaceSequenceStatePerformRival(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_RaceSequenceStatePerformRival_C", "ExecuteUbergraph_BPC_RaceSequenceStatePerformRival");

	Params::BPC_RaceSequenceStatePerformRival_C_ExecuteUbergraph_BPC_RaceSequenceStatePerformRival Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

