#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_RaceSequenceStateSendRaceStart

#include "Basic.hpp"

#include "UNION_classes.hpp"
#include "Engine_structs.hpp"
#include "UnionSystem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_RaceSequenceStateSendRaceStart.BPC_RaceSequenceStateSendRaceStart_C
// 0x0050 (0x0170 - 0x0120)
class UBPC_RaceSequenceStateSendRaceStart_C final : public URaceSequenceStateSendRaceStart
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0120(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         RequestHandle;                                     // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Entry_User_Ids;                                    // 0x0130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 Entry_Race_Id;                                     // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsLobbyHost;                                       // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BonusChanceType;                                   // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BonusChanceParam;                                  // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRaceHost;                                        // 0x015C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESequenceMainType                             MainSequenceType;                                  // 0x015D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESequenceSubType                              SubSequenceType;                                   // 0x015E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15F[0x1];                                      // 0x015F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Entry_Online_User_Ids;                             // 0x0160(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BindRecvLobbyAttributeEvent();
	void CalllNextState();
	void CheckGuestRaceId();
	void CheckResCode(int32 InResCode, bool OutError, const class FString& LogOutputInfo, bool* bEnableChangeNextState, EResponseCodeAbstract* ResCodeAbstract, int32* OutResCode);
	void ConvertStickerData(const struct FUserStickerData& UserStickerData, struct FCommon_MachineStickerData* Common_MachineStickerData);
	void ExecuteUbergraph_BPC_RaceSequenceStateSendRaceStart(int32 EntryPoint);
	void FinishedSendStartSaveFestaStart_Event(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void FinishedSendStartSaveLegendCompeStart(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void FinishedSendStartSaveRankMatchStart_Event(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void GetBonusChanceData(bool* IsValid, int32* BonusChanceType_0, int32* BonusChanceParam_0);
	void GetLobbyContextParam();
	void GetStartSaveRequestParam(int32* characterId, int32* courseId, struct FCommon_MachineData* MachineData, struct FCommon_GadgetData* GadgetData, struct FCommon_DegreeData* DegreeData);
	void OccurServerError(EResponseCodeAbstract ResponseCode, int32 Code);
	void OnExitState();
	void OnInitState();
	void OnRecvEntryRaceId(const class FString& InEntryRaceId);
	void OnSendStartSaveFestaStartCallback(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnSendStartSaveLegendCompeStartCallback(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnSendStartSaveRankMatchStartCallback(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void StartPlatformGameMatch();
	void SyncEntryRaceId();
	void SyncEntryRaceIdForFesta();
	void TryFestaNextState();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_RaceSequenceStateSendRaceStart_C">();
	}
	static class UBPC_RaceSequenceStateSendRaceStart_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_RaceSequenceStateSendRaceStart_C>();
	}
};
static_assert(alignof(UBPC_RaceSequenceStateSendRaceStart_C) == 0x000008, "Wrong alignment on UBPC_RaceSequenceStateSendRaceStart_C");
static_assert(sizeof(UBPC_RaceSequenceStateSendRaceStart_C) == 0x000170, "Wrong size on UBPC_RaceSequenceStateSendRaceStart_C");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceStart_C, UberGraphFrame) == 0x000120, "Member 'UBPC_RaceSequenceStateSendRaceStart_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceStart_C, RequestHandle) == 0x000128, "Member 'UBPC_RaceSequenceStateSendRaceStart_C::RequestHandle' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceStart_C, Entry_User_Ids) == 0x000130, "Member 'UBPC_RaceSequenceStateSendRaceStart_C::Entry_User_Ids' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceStart_C, Entry_Race_Id) == 0x000140, "Member 'UBPC_RaceSequenceStateSendRaceStart_C::Entry_Race_Id' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceStart_C, IsLobbyHost) == 0x000150, "Member 'UBPC_RaceSequenceStateSendRaceStart_C::IsLobbyHost' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceStart_C, BonusChanceType) == 0x000154, "Member 'UBPC_RaceSequenceStateSendRaceStart_C::BonusChanceType' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceStart_C, BonusChanceParam) == 0x000158, "Member 'UBPC_RaceSequenceStateSendRaceStart_C::BonusChanceParam' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceStart_C, IsRaceHost) == 0x00015C, "Member 'UBPC_RaceSequenceStateSendRaceStart_C::IsRaceHost' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceStart_C, MainSequenceType) == 0x00015D, "Member 'UBPC_RaceSequenceStateSendRaceStart_C::MainSequenceType' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceStart_C, SubSequenceType) == 0x00015E, "Member 'UBPC_RaceSequenceStateSendRaceStart_C::SubSequenceType' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceStart_C, Entry_Online_User_Ids) == 0x000160, "Member 'UBPC_RaceSequenceStateSendRaceStart_C::Entry_Online_User_Ids' has a wrong offset!");

}

