#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharaMachineSequence

#include "Basic.hpp"

#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "Engine_structs.hpp"
#include "UnionSystem_structs.hpp"
#include "UnionLib_structs.hpp"
#include "UnionRun_structs.hpp"
#include "UnionUI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharaMachineSequence.BP_CharaMachineSequence_C
// 0x0088 (0x0438 - 0x03B0)
class ABP_CharaMachineSequence_C final : public ACharaMachineSelectSequence
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_MachineState_C*                    BPC_MachineState;                                  // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_CharaSelectState_C*                BPC_CharaSelectState;                              // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnExitEvent;                                       // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EMenuSequenceSubState                         Start_State;                                       // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnMachineSelectToCharaSelectEvent;                 // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnCharaSelectToClassSelectEvent;                   // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<int32>                                 SelectedPlayerCharacterIndex;                      // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        ParamWindowMinParam;                               // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ParamWindowMaxParam;                               // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ParamWindowCorrectionVal;                          // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDriverId                                     InitDriverID;                                      // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsMessageBarVisible;                              // 0x0429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42A[0x6];                                      // 0x042A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonMessageBar*                      MessageBar;                                        // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void BindMachineState();
	void BindOnExit();
	void BndEvt__BP_CharaMachineSequence_BPC_CharaSelectState_K2Node_ComponentBoundEvent_2_OnBackStateDelegate__DelegateSignature(EMenuSequenceSubState State);
	void BndEvt__BP_CharaMachineSequence_BPC_MachineState_K2Node_ComponentBoundEvent_3_OnBackStateDelegate__DelegateSignature(EMenuSequenceSubState State);
	void CustomEvent(EUnionUIFadeDirection FadeDirection);
	void ExecuteUbergraph_BP_CharaMachineSequence(int32 EntryPoint);
	void FinalizeMessageBar();
	void HideLoadingDisplayWidget(class UUnionUILoadingDisplay* InLoadingDisplayWidget);
	void InitializeSelectedPlayerCharacterIndex();
	void MachineState_OnMachinePartsFocus(int32 PlayerIndex, EMachineId FrontPartsId, EMachineId RearPartsId, EMachineId TirePartsId);
	void MachineState_OnMachinePartsSelect(int32 PlayerIndex, EMachineId FrontPartsId, EMachineId RearPartsId, EMachineId TirePartsId);
	void MachineState_OnMachineSelectModeChanged(int32 PlayerIndex, UNION::EMachineSelectMode Mode);
	void MachineTypeDecide_Event(int32 PlayerControllerIndex, ECarStatusType machineType, EMachineId MachineId);
	void MachineTypeScrollStart_Event(int32 PlayerControllerIndex, ECarStatusType machineType, EMachineId MachineId);
	void OnDecideCharaIcon(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void OnExitEvent_Event();
	void OnFinalize();
	void OnFocusCharaIcon(int32 InPlayerControllerIndex, int32 InCharaIndex);
	void OnInitialize();
	void OnSetRacerDriver(class AMenuRacerBase* InRacer, EDriverId InDriverId);
	void OnSetRacerMachineCustomData(class AMenuRacerBase* InRacer, const struct FUserMachineCustomizeData& InData);
	void OnSetRacerRotation(class AMenuRacerBase* InRacer, float InValue);
	void OnSetRacerTransform(class AMenuRacerBase* InRacer, const struct FTransform& InTransform, bool IsNoLerp);
	void PlayRacerAnimation(int32 InPlayerIndex);
	void SetMessageBarVisible(bool bIsMessageBarVisible_0);
	void SetNextMenuSequenceSubState(EMenuSequenceSubState InState);
	void SetSelectedDriverIds();
	void SetStartState(EMenuSequenceSubState Start_State_0);
	void Setup();
	void SetupMessageBar();
	void SetupParamWindowMachineSelect(int32 InPlayerIndex, UNION::EMachineSelectMode InMode);
	class UUnionUILoadingDisplay* ShowLoadingDisplayWidget();
	void StartFade();
	void StartMoveCameraTransform(bool bCharaSelect, bool NoLerp);
	void UnbindMachineState();
	void UpdateParamWindow(int32 InPlayerIndex);
	void UpdateParamWindowByCharaId(int32 InPlayerIndex, EDriverId InDriverId);
	void UpdateParamWindowByMachineId(int32 InPlayerIndex, EMachineId InMachineID);
	void UpdateParamWindowByMachinePartsIds(int32 InPlayerIndex, EMachineId InFrontPartsId, EMachineId InRearPartsId, EMachineId InTirePartsId);

	struct FTransform GetMachineTransformOffset(EMachineId InMachineID) const;
	void GetMessageBarVisible(bool* IsVisible) const;
	void GetParamData(EDriverId InDriverId, EMachineId InFrontPartsId, EMachineId InRearPartsId, EMachineId InTirePartsId, const TArray<EGadgetId>& InGadgetIds, struct FRacerParamData* OutParamData) const;
	class ULevelStreaming* GetSubLevel() const;
	struct FTransform GetSubLevelTransform(int32 InPlayerIndex, bool IsCharaSelect) const;
	bool IsLevelLoaded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharaMachineSequence_C">();
	}
	static class ABP_CharaMachineSequence_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CharaMachineSequence_C>();
	}
};
static_assert(alignof(ABP_CharaMachineSequence_C) == 0x000008, "Wrong alignment on ABP_CharaMachineSequence_C");
static_assert(sizeof(ABP_CharaMachineSequence_C) == 0x000438, "Wrong size on ABP_CharaMachineSequence_C");
static_assert(offsetof(ABP_CharaMachineSequence_C, UberGraphFrame) == 0x0003B0, "Member 'ABP_CharaMachineSequence_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, BPC_MachineState) == 0x0003B8, "Member 'ABP_CharaMachineSequence_C::BPC_MachineState' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, BPC_CharaSelectState) == 0x0003C0, "Member 'ABP_CharaMachineSequence_C::BPC_CharaSelectState' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, OnExitEvent) == 0x0003C8, "Member 'ABP_CharaMachineSequence_C::OnExitEvent' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, Start_State) == 0x0003D8, "Member 'ABP_CharaMachineSequence_C::Start_State' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, OnMachineSelectToCharaSelectEvent) == 0x0003E0, "Member 'ABP_CharaMachineSequence_C::OnMachineSelectToCharaSelectEvent' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, OnCharaSelectToClassSelectEvent) == 0x0003F0, "Member 'ABP_CharaMachineSequence_C::OnCharaSelectToClassSelectEvent' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, SelectedPlayerCharacterIndex) == 0x000400, "Member 'ABP_CharaMachineSequence_C::SelectedPlayerCharacterIndex' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, ParamWindowMinParam) == 0x000410, "Member 'ABP_CharaMachineSequence_C::ParamWindowMinParam' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, ParamWindowMaxParam) == 0x000418, "Member 'ABP_CharaMachineSequence_C::ParamWindowMaxParam' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, ParamWindowCorrectionVal) == 0x000420, "Member 'ABP_CharaMachineSequence_C::ParamWindowCorrectionVal' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, InitDriverID) == 0x000428, "Member 'ABP_CharaMachineSequence_C::InitDriverID' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, bIsMessageBarVisible) == 0x000429, "Member 'ABP_CharaMachineSequence_C::bIsMessageBarVisible' has a wrong offset!");
static_assert(offsetof(ABP_CharaMachineSequence_C, MessageBar) == 0x000430, "Member 'ABP_CharaMachineSequence_C::MessageBar' has a wrong offset!");

}

