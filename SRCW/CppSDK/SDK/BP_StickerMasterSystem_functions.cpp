#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StickerMasterSystem

#include "Basic.hpp"

#include "BP_StickerMasterSystem_classes.hpp"
#include "BP_StickerMasterSystem_parameters.hpp"


namespace SDK
{

// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.BindInputReceiver
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::BindInputReceiver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "BindInputReceiver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.CancelEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::CancelEvent(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "CancelEvent");

	Params::BP_StickerMasterSystem_C_CancelEvent Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.CheckSimultaneous
// (BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::CheckSimultaneous()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "CheckSimultaneous");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ClampStickerLeft
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::ClampStickerLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ClampStickerLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ClampStickerRight
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::ClampStickerRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ClampStickerRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.CollectMaterials
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::CollectMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "CollectMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.Collision Adjust
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::Collision_Adjust()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "Collision Adjust");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ColorPicker_OnCancel
// (BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::ColorPicker_OnCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ColorPicker_OnCancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ColorPicker_OnColorItemFocused
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FST_ColorDetailWindowColorItemData&InItemData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::ColorPicker_OnColorItemFocused(const struct FST_ColorDetailWindowColorItemData& InItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ColorPicker_OnColorItemFocused");

	Params::BP_StickerMasterSystem_C_ColorPicker_OnColorItemFocused Parms{};

	Parms.InItemData = std::move(InItemData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ColorPicker_OnColorItemSelected
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FST_ColorDetailWindowColorItemData&InItemData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::ColorPicker_OnColorItemSelected(const struct FST_ColorDetailWindowColorItemData& InItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ColorPicker_OnColorItemSelected");

	Params::BP_StickerMasterSystem_C_ColorPicker_OnColorItemSelected Parms{};

	Parms.InItemData = std::move(InItemData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ColorPicker_OnSurfaceItemFocused
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FST_PullDownMenuItemData&  InItemData                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::ColorPicker_OnSurfaceItemFocused(const struct FST_PullDownMenuItemData& InItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ColorPicker_OnSurfaceItemFocused");

	Params::BP_StickerMasterSystem_C_ColorPicker_OnSurfaceItemFocused Parms{};

	Parms.InItemData = std::move(InItemData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ColorPicker_OnSurfaceItemSelected
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FST_PullDownMenuItemData&  InItemData                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::ColorPicker_OnSurfaceItemSelected(const struct FST_PullDownMenuItemData& InItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ColorPicker_OnSurfaceItemSelected");

	Params::BP_StickerMasterSystem_C_ColorPicker_OnSurfaceItemSelected Parms{};

	Parms.InItemData = std::move(InItemData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ColorWindowEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::ColorWindowEvent(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ColorWindowEvent");

	Params::BP_StickerMasterSystem_C_ColorWindowEvent Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.DecisionEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::DecisionEvent(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "DecisionEvent");

	Params::BP_StickerMasterSystem_C_DecisionEvent Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.DeregistInputRecevier
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::DeregistInputRecevier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "DeregistInputRecevier");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ExecuteUbergraph_BP_StickerMasterSystem
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::ExecuteUbergraph_BP_StickerMasterSystem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ExecuteUbergraph_BP_StickerMasterSystem");

	Params::BP_StickerMasterSystem_C_ExecuteUbergraph_BP_StickerMasterSystem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.Finalize
// (BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::Finalize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "Finalize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.FlipUVEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::FlipUVEvent(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "FlipUVEvent");

	Params::BP_StickerMasterSystem_C_FlipUVEvent Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.GetCustomizeData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FUserMachineCustomizeData*       OutCustomizeData                                       (Parm, OutParm)

void ABP_StickerMasterSystem_C::GetCustomizeData(struct FUserMachineCustomizeData* OutCustomizeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "GetCustomizeData");

	Params::BP_StickerMasterSystem_C_GetCustomizeData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutCustomizeData != nullptr)
		*OutCustomizeData = std::move(Parms.OutCustomizeData);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.GetUVWH
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 OutU                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 OutV                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 OutW                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 OutH                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::GetUVWH(double* OutU, double* OutV, double* OutW, double* OutH)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "GetUVWH");

	Params::BP_StickerMasterSystem_C_GetUVWH Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutU != nullptr)
		*OutU = Parms.OutU;

	if (OutV != nullptr)
		*OutV = Parms.OutV;

	if (OutW != nullptr)
		*OutW = Parms.OutW;

	if (OutH != nullptr)
		*OutH = Parms.OutH;
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.InitCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_GarageCamera_C*               GarageCamera_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::InitCamera(class ABP_GarageCamera_C* GarageCamera_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "InitCamera");

	Params::BP_StickerMasterSystem_C_InitCamera Parms{};

	Parms.GarageCamera_0 = GarageCamera_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.InitFrames
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::InitFrames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "InitFrames");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.InitFrontParts
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::InitFrontParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "InitFrontParts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.Initialize
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_MachineCustomizeSequence_C*   MCSequence_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRear                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::Initialize(class ABP_MachineCustomizeSequence_C* MCSequence_0, bool IsRear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "Initialize");

	Params::BP_StickerMasterSystem_C_Initialize Parms{};

	Parms.MCSequence_0 = MCSequence_0;
	Parms.IsRear = IsRear;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.InitializeStickers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEditRear_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::InitializeStickers(bool IsEditRear_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "InitializeStickers");

	Params::BP_StickerMasterSystem_C_InitializeStickers Parms{};

	Parms.IsEditRear_0 = IsEditRear_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.InitMachine
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::InitMachine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "InitMachine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.InitRearParts
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::InitRearParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "InitRearParts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.InitRenderTargetMid
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::InitRenderTargetMid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "InitRenderTargetMid");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.InitRenderTargetPlane
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::InitRenderTargetPlane()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "InitRenderTargetPlane");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.InitStickers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::InitStickers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "InitStickers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.InitUvPreview
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::InitUvPreview()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "InitUvPreview");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.InitWidget
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "InitWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.JudgeStickerMaxScaleHorizontal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsMaxScale                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::JudgeStickerMaxScaleHorizontal(double Scale, bool* IsMaxScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "JudgeStickerMaxScaleHorizontal");

	Params::BP_StickerMasterSystem_C_JudgeStickerMaxScaleHorizontal Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	if (IsMaxScale != nullptr)
		*IsMaxScale = Parms.IsMaxScale;
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.JudgeStickerMaxScaleVertical
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsMaxScale                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::JudgeStickerMaxScaleVertical(double Scale, bool* IsMaxScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "JudgeStickerMaxScaleVertical");

	Params::BP_StickerMasterSystem_C_JudgeStickerMaxScaleVertical Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	if (IsMaxScale != nullptr)
		*IsMaxScale = Parms.IsMaxScale;
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.JudgeStickerMinScaleHorizontal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsMinScale                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::JudgeStickerMinScaleHorizontal(double Scale, bool* IsMinScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "JudgeStickerMinScaleHorizontal");

	Params::BP_StickerMasterSystem_C_JudgeStickerMinScaleHorizontal Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	if (IsMinScale != nullptr)
		*IsMinScale = Parms.IsMinScale;
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.JudgeStickerMinScaleVertical
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsMinScale                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::JudgeStickerMinScaleVertical(double Scale, bool* IsMinScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "JudgeStickerMinScaleVertical");

	Params::BP_StickerMasterSystem_C_JudgeStickerMinScaleVertical Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	if (IsMinScale != nullptr)
		*IsMinScale = Parms.IsMinScale;
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.LeftButtonPressed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::LeftButtonPressed(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "LeftButtonPressed");

	Params::BP_StickerMasterSystem_C_LeftButtonPressed Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.LeftButtonReleased
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::LeftButtonReleased(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "LeftButtonReleased");

	Params::BP_StickerMasterSystem_C_LeftButtonReleased Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.LoadStickerParts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::LoadStickerParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "LoadStickerParts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.OnLeftShoulderPressed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::OnLeftShoulderPressed(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "OnLeftShoulderPressed");

	Params::BP_StickerMasterSystem_C_OnLeftShoulderPressed Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.OnLeftShoulderReleased
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::OnLeftShoulderReleased(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "OnLeftShoulderReleased");

	Params::BP_StickerMasterSystem_C_OnLeftShoulderReleased Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.OnRightShoulderPressed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::OnRightShoulderPressed(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "OnRightShoulderPressed");

	Params::BP_StickerMasterSystem_C_OnRightShoulderPressed Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.OnRightShoulderReleased
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::OnRightShoulderReleased(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "OnRightShoulderReleased");

	Params::BP_StickerMasterSystem_C_OnRightShoulderReleased Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_StickerMasterSystem_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ReceiveEndPlay");

	Params::BP_StickerMasterSystem_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ReceiveTick");

	Params::BP_StickerMasterSystem_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.RegistInputReceiver
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::RegistInputReceiver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "RegistInputReceiver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.Reset Input Flag
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::Reset_Input_Flag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "Reset Input Flag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ResetControlledSticker
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::ResetControlledSticker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ResetControlledSticker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ResetInput
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::ResetInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ResetInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.ResetStickerSystem
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::ResetStickerSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "ResetStickerSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.RotateSticker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::RotateSticker(double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "RotateSticker");

	Params::BP_StickerMasterSystem_C_RotateSticker Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.SaveStickerParts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::SaveStickerParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "SaveStickerParts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.SetHoverDataList
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_MenuRacerPreview_C*           Racer                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::SetHoverDataList(class ABP_MenuRacerPreview_C* Racer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "SetHoverDataList");

	Params::BP_StickerMasterSystem_C_SetHoverDataList Parms{};

	Parms.Racer = Racer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.SetMachineDataList
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_MenuRacerPreview_C*           Racer                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::SetMachineDataList(class ABP_MenuRacerPreview_C* Racer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "SetMachineDataList");

	Params::BP_StickerMasterSystem_C_SetMachineDataList Parms{};

	Parms.Racer = Racer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.SetupColorPicker
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::SetupColorPicker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "SetupColorPicker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.SetupInput
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::SetupInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "SetupInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.SetupStickerSystem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::SetupStickerSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "SetupStickerSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.SetupSwitchStickerSlot
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::SetupSwitchStickerSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "SetupSwitchStickerSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.SpecialEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::SpecialEvent(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "SpecialEvent");

	Params::BP_StickerMasterSystem_C_SpecialEvent Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.StickerMoveEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::StickerMoveEvent(class UObject* Object, const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "StickerMoveEvent");

	Params::BP_StickerMasterSystem_C_StickerMoveEvent Parms{};

	Parms.Object = Object;
	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.StopSE
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::StopSE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "StopSE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.TopButtonPressed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::TopButtonPressed(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "TopButtonPressed");

	Params::BP_StickerMasterSystem_C_TopButtonPressed Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.TopButtonReleased
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::TopButtonReleased(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "TopButtonReleased");

	Params::BP_StickerMasterSystem_C_TopButtonReleased Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.TranslateScaleSticker
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDeltaSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::TranslateScaleSticker(double InDeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "TranslateScaleSticker");

	Params::BP_StickerMasterSystem_C_TranslateScaleSticker Parms{};

	Parms.InDeltaSeconds = InDeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.TurnStickerFrameVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AUnionStickerBase*                Sticker                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_StickerMasterSystem_C::TurnStickerFrameVisible(class AUnionStickerBase* Sticker, bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "TurnStickerFrameVisible");

	Params::BP_StickerMasterSystem_C_TurnStickerFrameVisible Parms{};

	Parms.Sticker = Sticker;
	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.UnbindInputReceiver
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::UnbindInputReceiver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "UnbindInputReceiver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.UpdateCalculateStickerScale
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::UpdateCalculateStickerScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "UpdateCalculateStickerScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.UpdateRenderTarget
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::UpdateRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "UpdateRenderTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StickerMasterSystem.BP_StickerMasterSystem_C.UpdateWarningVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_StickerMasterSystem_C::UpdateWarningVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StickerMasterSystem_C", "UpdateWarningVisibility");

	UObject::ProcessEvent(Func, nullptr);
}

}

