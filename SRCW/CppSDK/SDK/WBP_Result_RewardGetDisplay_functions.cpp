#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Result_RewardGetDisplay

#include "Basic.hpp"

#include "WBP_Result_RewardGetDisplay_classes.hpp"
#include "WBP_Result_RewardGetDisplay_parameters.hpp"


namespace SDK
{

// Function WBP_Result_RewardGetDisplay.WBP_Result_RewardGetDisplay_C.CreateRewardGetWindow
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInSetFocus                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Result_RewardGetDisplay_C::CreateRewardGetWindow(bool bInSetFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Result_RewardGetDisplay_C", "CreateRewardGetWindow");

	Params::WBP_Result_RewardGetDisplay_C_CreateRewardGetWindow Parms{};

	Parms.bInSetFocus = bInSetFocus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Result_RewardGetDisplay.WBP_Result_RewardGetDisplay_C.ExecuteUbergraph_WBP_Result_RewardGetDisplay
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Result_RewardGetDisplay_C::ExecuteUbergraph_WBP_Result_RewardGetDisplay(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Result_RewardGetDisplay_C", "ExecuteUbergraph_WBP_Result_RewardGetDisplay");

	Params::WBP_Result_RewardGetDisplay_C_ExecuteUbergraph_WBP_Result_RewardGetDisplay Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Result_RewardGetDisplay.WBP_Result_RewardGetDisplay_C.SetMachinePartsNewFlag
// (BlueprintCallable, BlueprintEvent)

void UWBP_Result_RewardGetDisplay_C::SetMachinePartsNewFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Result_RewardGetDisplay_C", "SetMachinePartsNewFlag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Result_RewardGetDisplay.WBP_Result_RewardGetDisplay_C.SetModeTitleText
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      InRankUpTitleText                                      (BlueprintVisible, BlueprintReadOnly, Parm)
// const class FText&                      InRewardGetTitleText                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// const class FText&                      InCompleteTitleText                                    (BlueprintVisible, BlueprintReadOnly, Parm)

void UWBP_Result_RewardGetDisplay_C::SetModeTitleText(const class FText& InRankUpTitleText, const class FText& InRewardGetTitleText, const class FText& InCompleteTitleText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Result_RewardGetDisplay_C", "SetModeTitleText");

	Params::WBP_Result_RewardGetDisplay_C_SetModeTitleText Parms{};

	Parms.InRankUpTitleText = std::move(InRankUpTitleText);
	Parms.InRewardGetTitleText = std::move(InRewardGetTitleText);
	Parms.InCompleteTitleText = std::move(InCompleteTitleText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Result_RewardGetDisplay.WBP_Result_RewardGetDisplay_C.SetupResultRankRewardGetWindow
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInSetFocus                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Result_RewardGetDisplay_C::SetupResultRankRewardGetWindow(bool bInSetFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Result_RewardGetDisplay_C", "SetupResultRankRewardGetWindow");

	Params::WBP_Result_RewardGetDisplay_C_SetupResultRankRewardGetWindow Parms{};

	Parms.bInSetFocus = bInSetFocus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Result_RewardGetDisplay.WBP_Result_RewardGetDisplay_C.SetWindowParamForResult
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URewardGetWindow*                 InRewardGetWindow                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// uint8                                   InRateRank                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TArray<struct FRewardGetWindowParam>&InRewardGetWindowParam                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const bool                              bInWindowTimeClose                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InWindowZOrder                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Result_RewardGetDisplay_C::SetWindowParamForResult(class URewardGetWindow* InRewardGetWindow, uint8 InRateRank, const TArray<struct FRewardGetWindowParam>& InRewardGetWindowParam, const bool bInWindowTimeClose, int32 InWindowZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Result_RewardGetDisplay_C", "SetWindowParamForResult");

	Params::WBP_Result_RewardGetDisplay_C_SetWindowParamForResult Parms{};

	Parms.InRewardGetWindow = InRewardGetWindow;
	Parms.InRateRank = InRateRank;
	Parms.InRewardGetWindowParam = std::move(InRewardGetWindowParam);
	Parms.bInWindowTimeClose = bInWindowTimeClose;
	Parms.InWindowZOrder = InWindowZOrder;

	UObject::ProcessEvent(Func, &Parms);
}

}

