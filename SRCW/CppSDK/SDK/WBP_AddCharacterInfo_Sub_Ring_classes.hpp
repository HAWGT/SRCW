#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AddCharacterInfo_Sub_Ring

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_AddCharacterInfo_Sub_Ring.WBP_AddCharacterInfo_Sub_Ring_C
// 0x0068 (0x0348 - 0x02E0)
class UWBP_AddCharacterInfo_Sub_Ring_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AddCharacter_In;                                   // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 DMY_CharaCut;                                      // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Eff;                                               // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Eff_1;                                             // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Eff_01;                                            // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Eff_02;                                            // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Ring_Cover;                                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RingBase;                                          // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RingEff;                                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RingEff_Add;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RingEff_Add_Out;                                   // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RingEff_Light;                                     // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void EditTexture(class UTexture2D* Texture);
	void ExecuteUbergraph_WBP_AddCharacterInfo_Sub_Ring(int32 EntryPoint);
	void SetTexture(const class UTexture2D*& InTexture);
	void Start_in_Animation();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_AddCharacterInfo_Sub_Ring_C">();
	}
	static class UWBP_AddCharacterInfo_Sub_Ring_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_AddCharacterInfo_Sub_Ring_C>();
	}
};
static_assert(alignof(UWBP_AddCharacterInfo_Sub_Ring_C) == 0x000008, "Wrong alignment on UWBP_AddCharacterInfo_Sub_Ring_C");
static_assert(sizeof(UWBP_AddCharacterInfo_Sub_Ring_C) == 0x000348, "Wrong size on UWBP_AddCharacterInfo_Sub_Ring_C");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, AddCharacter_In) == 0x0002E8, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::AddCharacter_In' has a wrong offset!");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, DMY_CharaCut) == 0x0002F0, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::DMY_CharaCut' has a wrong offset!");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, Eff) == 0x0002F8, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::Eff' has a wrong offset!");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, Eff_1) == 0x000300, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::Eff_1' has a wrong offset!");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, Eff_01) == 0x000308, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::Eff_01' has a wrong offset!");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, Eff_02) == 0x000310, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::Eff_02' has a wrong offset!");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, Ring_Cover) == 0x000318, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::Ring_Cover' has a wrong offset!");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, RingBase) == 0x000320, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::RingBase' has a wrong offset!");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, RingEff) == 0x000328, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::RingEff' has a wrong offset!");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, RingEff_Add) == 0x000330, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::RingEff_Add' has a wrong offset!");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, RingEff_Add_Out) == 0x000338, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::RingEff_Add_Out' has a wrong offset!");
static_assert(offsetof(UWBP_AddCharacterInfo_Sub_Ring_C, RingEff_Light) == 0x000340, "Member 'UWBP_AddCharacterInfo_Sub_Ring_C::RingEff_Light' has a wrong offset!");

}

