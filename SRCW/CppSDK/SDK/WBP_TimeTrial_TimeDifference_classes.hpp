#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_TimeTrial_TimeDifference

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_TimeTrial_TimeDifference.WBP_TimeTrial_TimeDifference_C
// 0x0030 (0x0310 - 0x02E0)
class UWBP_TimeTrial_TimeDifference_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Style_Tie;                                         // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Style_Down;                                        // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Style_Up;                                          // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                Border_Color;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_Time;                                          // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_TimeTrial_TimeDifference(int32 EntryPoint);
	void SetDifferenceTime(const class FText& TimeText, bool bIsUpTime);
	void SetSameTime();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_TimeTrial_TimeDifference_C">();
	}
	static class UWBP_TimeTrial_TimeDifference_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_TimeTrial_TimeDifference_C>();
	}
};
static_assert(alignof(UWBP_TimeTrial_TimeDifference_C) == 0x000008, "Wrong alignment on UWBP_TimeTrial_TimeDifference_C");
static_assert(sizeof(UWBP_TimeTrial_TimeDifference_C) == 0x000310, "Wrong size on UWBP_TimeTrial_TimeDifference_C");
static_assert(offsetof(UWBP_TimeTrial_TimeDifference_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_TimeTrial_TimeDifference_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_TimeDifference_C, Style_Tie) == 0x0002E8, "Member 'UWBP_TimeTrial_TimeDifference_C::Style_Tie' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_TimeDifference_C, Style_Down) == 0x0002F0, "Member 'UWBP_TimeTrial_TimeDifference_C::Style_Down' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_TimeDifference_C, Style_Up) == 0x0002F8, "Member 'UWBP_TimeTrial_TimeDifference_C::Style_Up' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_TimeDifference_C, Border_Color) == 0x000300, "Member 'UWBP_TimeTrial_TimeDifference_C::Border_Color' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_TimeDifference_C, TXT_Time) == 0x000308, "Member 'UWBP_TimeTrial_TimeDifference_C::TXT_Time' has a wrong offset!");

}

