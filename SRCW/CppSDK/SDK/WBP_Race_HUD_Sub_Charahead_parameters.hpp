#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Race_HUD_Sub_Charahead

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UnionSystem_structs.hpp"


namespace SDK::Params
{

// Function WBP_Race_HUD_Sub_Charahead.WBP_Race_HUD_Sub_Charahead_C.ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead
// 0x0110 (0x0110 - 0x0000)
struct WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetClampUserNameLength_ReturnValue;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0010)()
	class FText                                   Temp_text_Variable_1;                              // 0x0030(0x0010)()
	class FText                                   Temp_text_Variable_2;                              // 0x0040(0x0010)()
	class FText                                   Temp_text_Variable_3;                              // 0x0050(0x0010)()
	class FText                                   K2Node_Event_InName;                               // 0x0060(0x0010)(ConstParm)
	class FText                                   CallFunc_TruncateTextWithEllipsis_ReturnValue;     // 0x0070(0x0010)()
	bool                                          K2Node_Event_IsGroup;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_GroupIndex;                           // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsForce;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsRival_1;                            // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsPowerRival;                         // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECrossplayPlatform                            K2Node_Event_CrossplayType_1;                      // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Rank;                                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsLocalPlayer;                        // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_PlayerIndex;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x0098(0x0010)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A8(0x0010)()
	bool                                          K2Node_Event_IsCOM;                                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsRival;                              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECrossplayPlatform                            K2Node_Event_CrossplayType;                        // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB[0x1];                                       // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCrossplayPlatformIconIndex_ReturnValue; // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerNameInterface>  CallFunc_SetGroupIndexIF_self_CastInput;           // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERaceSettingGrouping                          CallFunc_GetRaceSettingGrouping_ReturnValue;       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERaceType                                     CallFunc_GetSelectedRaceType_ReturnValue;          // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EE[0x2];                                       // 0x00EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGhostPfId_ReturnValue;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x00F7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCrossplayPlatformIconIndex_ReturnValue_1; // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead) == 0x000008, "Wrong alignment on WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead");
static_assert(sizeof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead) == 0x000110, "Wrong size on WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, EntryPoint) == 0x000000, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_GetClampUserNameLength_ReturnValue) == 0x000004, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_GetClampUserNameLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_MakeArray_Array) == 0x000008, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, Temp_int_Variable) == 0x000018, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, Temp_text_Variable) == 0x000020, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, Temp_text_Variable_1) == 0x000030, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, Temp_text_Variable_2) == 0x000040, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, Temp_text_Variable_3) == 0x000050, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_InName) == 0x000060, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_InName' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_TruncateTextWithEllipsis_ReturnValue) == 0x000070, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_TruncateTextWithEllipsis_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_IsGroup) == 0x000080, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_IsGroup' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_GroupIndex) == 0x000084, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_GroupIndex' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_IsForce) == 0x000088, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_IsForce' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_IsRival_1) == 0x000089, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_IsRival_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_IsPowerRival) == 0x00008A, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_IsPowerRival' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_CrossplayType_1) == 0x00008B, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_CrossplayType_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_Rank) == 0x00008C, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_Rank' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_IsLocalPlayer) == 0x000090, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_IsLocalPlayer' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_PlayerIndex) == 0x000094, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_PlayerIndex' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Select_Default) == 0x000098, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_Format_ReturnValue) == 0x0000A8, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_IsCOM) == 0x0000B8, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_IsCOM' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_IsRival) == 0x0000B9, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_IsRival' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, K2Node_Event_CrossplayType) == 0x0000BA, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::K2Node_Event_CrossplayType' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_GetCrossplayPlatformIconIndex_ReturnValue) == 0x0000BC, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_GetCrossplayPlatformIconIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000C0, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000C8, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x0000D0, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_SetGroupIndexIF_self_CastInput) == 0x0000D8, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_SetGroupIndexIF_self_CastInput' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_GetRaceSettingGrouping_ReturnValue) == 0x0000E8, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_GetRaceSettingGrouping_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000E9, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_GetSelectedRaceType_ReturnValue) == 0x0000EA, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_GetSelectedRaceType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_Not_PreBool_ReturnValue) == 0x0000EB, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000EC, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0000ED, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_GetGhostPfId_ReturnValue) == 0x0000F0, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_GetGhostPfId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_BooleanOR_ReturnValue) == 0x0000F4, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_Conv_IntToByte_ReturnValue) == 0x0000F5, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000F6, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_GetValidValue_ReturnValue) == 0x0000F7, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_GetCrossplayPlatformIconIndex_ReturnValue_1) == 0x0000F8, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_GetCrossplayPlatformIconIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000100, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000108, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x00010C, "Member 'WBP_Race_HUD_Sub_Charahead_C_ExecuteUbergraph_WBP_Race_HUD_Sub_Charahead::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");

// Function WBP_Race_HUD_Sub_Charahead.WBP_Race_HUD_Sub_Charahead_C.SetCOMIF
// 0x0001 (0x0001 - 0x0000)
struct WBP_Race_HUD_Sub_Charahead_C_SetCOMIF final
{
public:
	bool                                          IsCom;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_Charahead_C_SetCOMIF) == 0x000001, "Wrong alignment on WBP_Race_HUD_Sub_Charahead_C_SetCOMIF");
static_assert(sizeof(WBP_Race_HUD_Sub_Charahead_C_SetCOMIF) == 0x000001, "Wrong size on WBP_Race_HUD_Sub_Charahead_C_SetCOMIF");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetCOMIF, IsCom) == 0x000000, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetCOMIF::IsCom' has a wrong offset!");

// Function WBP_Race_HUD_Sub_Charahead.WBP_Race_HUD_Sub_Charahead_C.SetCrossPlayIcon
// 0x0001 (0x0001 - 0x0000)
struct WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIcon final
{
public:
	ECrossplayPlatform                            CrossplayType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIcon) == 0x000001, "Wrong alignment on WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIcon");
static_assert(sizeof(WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIcon) == 0x000001, "Wrong size on WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIcon");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIcon, CrossplayType) == 0x000000, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIcon::CrossplayType' has a wrong offset!");

// Function WBP_Race_HUD_Sub_Charahead.WBP_Race_HUD_Sub_Charahead_C.SetCrossPlayIconIF
// 0x0001 (0x0001 - 0x0000)
struct WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIconIF final
{
public:
	ECrossplayPlatform                            CrossplayType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIconIF) == 0x000001, "Wrong alignment on WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIconIF");
static_assert(sizeof(WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIconIF) == 0x000001, "Wrong size on WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIconIF");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIconIF, CrossplayType) == 0x000000, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetCrossPlayIconIF::CrossplayType' has a wrong offset!");

// Function WBP_Race_HUD_Sub_Charahead.WBP_Race_HUD_Sub_Charahead_C.SetGroupIndexIF
// 0x000C (0x000C - 0x0000)
struct WBP_Race_HUD_Sub_Charahead_C_SetGroupIndexIF final
{
public:
	bool                                          IsGroup;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GroupIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForce;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_Charahead_C_SetGroupIndexIF) == 0x000004, "Wrong alignment on WBP_Race_HUD_Sub_Charahead_C_SetGroupIndexIF");
static_assert(sizeof(WBP_Race_HUD_Sub_Charahead_C_SetGroupIndexIF) == 0x00000C, "Wrong size on WBP_Race_HUD_Sub_Charahead_C_SetGroupIndexIF");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetGroupIndexIF, IsGroup) == 0x000000, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetGroupIndexIF::IsGroup' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetGroupIndexIF, GroupIndex) == 0x000004, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetGroupIndexIF::GroupIndex' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetGroupIndexIF, IsForce) == 0x000008, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetGroupIndexIF::IsForce' has a wrong offset!");

// Function WBP_Race_HUD_Sub_Charahead.WBP_Race_HUD_Sub_Charahead_C.SetNameIF
// 0x0010 (0x0010 - 0x0000)
struct WBP_Race_HUD_Sub_Charahead_C_SetNameIF final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_Race_HUD_Sub_Charahead_C_SetNameIF) == 0x000008, "Wrong alignment on WBP_Race_HUD_Sub_Charahead_C_SetNameIF");
static_assert(sizeof(WBP_Race_HUD_Sub_Charahead_C_SetNameIF) == 0x000010, "Wrong size on WBP_Race_HUD_Sub_Charahead_C_SetNameIF");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetNameIF, InName) == 0x000000, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetNameIF::InName' has a wrong offset!");

// Function WBP_Race_HUD_Sub_Charahead.WBP_Race_HUD_Sub_Charahead_C.SetOnlineIF
// 0x0001 (0x0001 - 0x0000)
struct WBP_Race_HUD_Sub_Charahead_C_SetOnlineIF final
{
public:
	bool                                          IsRival_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_Charahead_C_SetOnlineIF) == 0x000001, "Wrong alignment on WBP_Race_HUD_Sub_Charahead_C_SetOnlineIF");
static_assert(sizeof(WBP_Race_HUD_Sub_Charahead_C_SetOnlineIF) == 0x000001, "Wrong size on WBP_Race_HUD_Sub_Charahead_C_SetOnlineIF");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetOnlineIF, IsRival_0) == 0x000000, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetOnlineIF::IsRival_0' has a wrong offset!");

// Function WBP_Race_HUD_Sub_Charahead.WBP_Race_HUD_Sub_Charahead_C.SetPlayerIndexIF
// 0x0008 (0x0008 - 0x0000)
struct WBP_Race_HUD_Sub_Charahead_C_SetPlayerIndexIF final
{
public:
	bool                                          IsLocalPlayer;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_Charahead_C_SetPlayerIndexIF) == 0x000004, "Wrong alignment on WBP_Race_HUD_Sub_Charahead_C_SetPlayerIndexIF");
static_assert(sizeof(WBP_Race_HUD_Sub_Charahead_C_SetPlayerIndexIF) == 0x000008, "Wrong size on WBP_Race_HUD_Sub_Charahead_C_SetPlayerIndexIF");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetPlayerIndexIF, IsLocalPlayer) == 0x000000, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetPlayerIndexIF::IsLocalPlayer' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetPlayerIndexIF, PlayerIndex) == 0x000004, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetPlayerIndexIF::PlayerIndex' has a wrong offset!");

// Function WBP_Race_HUD_Sub_Charahead.WBP_Race_HUD_Sub_Charahead_C.SetRankIF
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_HUD_Sub_Charahead_C_SetRankIF final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_Charahead_C_SetRankIF) == 0x000004, "Wrong alignment on WBP_Race_HUD_Sub_Charahead_C_SetRankIF");
static_assert(sizeof(WBP_Race_HUD_Sub_Charahead_C_SetRankIF) == 0x000004, "Wrong size on WBP_Race_HUD_Sub_Charahead_C_SetRankIF");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetRankIF, Rank) == 0x000000, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetRankIF::Rank' has a wrong offset!");

// Function WBP_Race_HUD_Sub_Charahead.WBP_Race_HUD_Sub_Charahead_C.SetRivalIF
// 0x0002 (0x0002 - 0x0000)
struct WBP_Race_HUD_Sub_Charahead_C_SetRivalIF final
{
public:
	bool                                          IsRival_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPowerRival;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_HUD_Sub_Charahead_C_SetRivalIF) == 0x000001, "Wrong alignment on WBP_Race_HUD_Sub_Charahead_C_SetRivalIF");
static_assert(sizeof(WBP_Race_HUD_Sub_Charahead_C_SetRivalIF) == 0x000002, "Wrong size on WBP_Race_HUD_Sub_Charahead_C_SetRivalIF");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetRivalIF, IsRival_0) == 0x000000, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetRivalIF::IsRival_0' has a wrong offset!");
static_assert(offsetof(WBP_Race_HUD_Sub_Charahead_C_SetRivalIF, IsPowerRival) == 0x000001, "Member 'WBP_Race_HUD_Sub_Charahead_C_SetRivalIF::IsPowerRival' has a wrong offset!");

}

