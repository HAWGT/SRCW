#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MenuRacerPreview

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "UnionSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "UnionRun_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MenuRacerPreview.BP_MenuRacerPreview_C
// 0x05D8 (0x0920 - 0x0348)
class ABP_MenuRacerPreview_C final : public AMenuRacerBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMachineAuraEffectComponent*            MachineAuraEffect;                                 // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_CharaMachineSelectMove_7D321F024A8D71C42CAA159629A5EB74; // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_7D321F024A8D71C42CAA159629A5EB74; // 0x0364(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        RotationSpeed;                                     // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotationVelocity;                                  // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TransformForTopMenu;                               // 0x0380(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EViewSplitId, struct FTransform>         TransformMapForCharaMachineSelect;                 // 0x03E0(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<struct FTransform>                     OLD_TransformForLobby;                             // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	ECarStatusType                                VehicleType;                                       // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChildActorComponent*                   DriverComponent;                                   // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   MachineComponet;                                   // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   HoverboardComponet;                                // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   OldDriverComponent;                                // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   OldMachineComponet;                                // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   OldHoverboardComponet;                             // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_MenuDriverPawn_C*                   DriverActor;                                       // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_MenuRacerMachine_C*                 MachineActor;                                      // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_MenuRacerHoverboard_C*              HoverboardActor;                                   // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MenuRacerTimerHandle;                              // 0x0490(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_498[0x8];                                      // 0x0498(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x04A0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             GoalTransForm;                                     // 0x0500(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsCockpitAnimEnabled;                             // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_561[0x7];                                      // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rotation;                                          // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLightingChannel0;                                 // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLightingChannel1;                                 // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLightingChannel2;                                 // 0x0572(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_573[0x5];                                      // 0x0573(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStickerBakerHandle*                    FrontStickerBakerHandle;                           // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStickerBakerHandle*                    RearStickerBakerHandle;                            // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDriverData                            CurrentDriverData;                                 // 0x0588(0x0390)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bAutoInitialSetup;                                 // 0x0918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForCapture;                                      // 0x0919(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddRotation(double InDeltaRotation);
	void Attach_Driver_to_Machine();
	void AttachDriverToHoverboard();
	void CharaMachineMoveAbort();
	void CharaMachineMoveLerp();
	void CharaMachineMoveStart(const struct FTransform& GoalTransForm_0, bool NoLerp);
	void CorrectCustomizeData(const struct FUserMachineCustomizeData& InCustomizeData, ECarStatusType InVehicleType);
	void CreateDriver();
	void CreateHoverboard();
	void CreateMachine();
	void DecideChara(int32 InPlayerIndex, int32 InSelectedPlayerCount);
	void DestoryOldComponents();
	void DisableBoundsAndLod_Hoverboard();
	void DisableBoundsAndLod_Machine();
	void ExecuteUbergraph_BP_MenuRacerPreview(int32 EntryPoint);
	void GetChildActors(TArray<class AActor*>* OutChildActors);
	void GetChildActors_Internal(class UChildActorComponent* InDriverComponent, class UChildActorComponent* InMachineComponet, class UChildActorComponent* InHoverboardComponet, TArray<class AActor*>* OutChildActors);
	void GetDriverData(EDriverId DriverId_0, struct FDriverData* DriverData, bool* bFind);
	void InitTransformForTopMenu();
	void InitTransformMapForCharaMachineSelect();
	void OnCreateAuraEffect(EMachineAuraId InAuraID, ECarStatusType InType);
	void PlayDriverAnimation(int32 StateId, int32 Index_0);
	void PlayLeaveAnimation();
	void Polling_Set_Sticker(class UStickerBakerHandle* StickerBakerHandle, bool* IsCompleteSetSticker);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void ResetLeaveAnimTimer(bool bIsStop);
	void ResetMachineRelativeRotation();
	void Set_All(EDriverId InDriverId, const struct FUserMachineCustomizeData& InCustomizeData, bool bInForcedSetting, bool bIsInitialize);
	void Set_Cockpit_Anim_Enabled(bool bInEnabled);
	void SetCustomizeData(const struct FUserMachineCustomizeData& InCustomizeData, bool bInForcedSetting);
	void SetCustomizeData_Hoverboard(bool bIsFrontMeshChanged, bool bIsRearMeshChanged, bool bIsFrontStickerChanged, bool bIsRearStickerChanged);
	void SetCustomizeData_Machine(bool bIsFrontMeshChanged, bool bIsRearMeshChanged, bool bIsFrontStickerChanged, bool bIsRearStickerChanged);
	void SetDriver(EDriverId InDriverId, bool bInForcedSetting);
	void SetDriverInterface(EDriverId InDriverId, bool bInForcedSetting);
	void SetDriverTransform_Hoverboard();
	void SetLightingChannels(bool bInLightingChannel0, bool bInLightingChannel1, bool bInLightingChannel2);
	void SetParts(EMachineId InFrontPartsId, EMachineId InRearPartsId, EMachineId InTirePartsId, bool bInForcedSetting);
	void SetupForCharaSelect(int32 InPlayerIndex, int32 InSelectedPlayerCount);
	void SetupForTopMenu();
	void SetupTranformForCharaMachine(int32 PlayerIndex, int32 SelectedPlayerCount);
	void SetupTranformForLobby(int32 PlayerIndex);
	void SetupTranformForTopMenu(int32 PlayerIndex);
	void StartEffect();
	void StartRotation(int32 InPlayerIndex);
	void StopEffect();
	void StopRotation();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void UpdateRotation();

	void Get_Customize_Data(struct FUserMachineCustomizeData* OutCustomizeData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MenuRacerPreview_C">();
	}
	static class ABP_MenuRacerPreview_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MenuRacerPreview_C>();
	}
};
static_assert(alignof(ABP_MenuRacerPreview_C) == 0x000010, "Wrong alignment on ABP_MenuRacerPreview_C");
static_assert(sizeof(ABP_MenuRacerPreview_C) == 0x000920, "Wrong size on ABP_MenuRacerPreview_C");
static_assert(offsetof(ABP_MenuRacerPreview_C, UberGraphFrame) == 0x000348, "Member 'ABP_MenuRacerPreview_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, MachineAuraEffect) == 0x000350, "Member 'ABP_MenuRacerPreview_C::MachineAuraEffect' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, DefaultSceneRoot) == 0x000358, "Member 'ABP_MenuRacerPreview_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, Timeline_CharaMachineSelectMove_7D321F024A8D71C42CAA159629A5EB74) == 0x000360, "Member 'ABP_MenuRacerPreview_C::Timeline_CharaMachineSelectMove_7D321F024A8D71C42CAA159629A5EB74' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, Timeline__Direction_7D321F024A8D71C42CAA159629A5EB74) == 0x000364, "Member 'ABP_MenuRacerPreview_C::Timeline__Direction_7D321F024A8D71C42CAA159629A5EB74' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, Timeline) == 0x000368, "Member 'ABP_MenuRacerPreview_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, RotationSpeed) == 0x000370, "Member 'ABP_MenuRacerPreview_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, RotationVelocity) == 0x000378, "Member 'ABP_MenuRacerPreview_C::RotationVelocity' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, TransformForTopMenu) == 0x000380, "Member 'ABP_MenuRacerPreview_C::TransformForTopMenu' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, TransformMapForCharaMachineSelect) == 0x0003E0, "Member 'ABP_MenuRacerPreview_C::TransformMapForCharaMachineSelect' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, OLD_TransformForLobby) == 0x000430, "Member 'ABP_MenuRacerPreview_C::OLD_TransformForLobby' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, VehicleType) == 0x000440, "Member 'ABP_MenuRacerPreview_C::VehicleType' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, DriverComponent) == 0x000448, "Member 'ABP_MenuRacerPreview_C::DriverComponent' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, MachineComponet) == 0x000450, "Member 'ABP_MenuRacerPreview_C::MachineComponet' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, HoverboardComponet) == 0x000458, "Member 'ABP_MenuRacerPreview_C::HoverboardComponet' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, OldDriverComponent) == 0x000460, "Member 'ABP_MenuRacerPreview_C::OldDriverComponent' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, OldMachineComponet) == 0x000468, "Member 'ABP_MenuRacerPreview_C::OldMachineComponet' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, OldHoverboardComponet) == 0x000470, "Member 'ABP_MenuRacerPreview_C::OldHoverboardComponet' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, DriverActor) == 0x000478, "Member 'ABP_MenuRacerPreview_C::DriverActor' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, MachineActor) == 0x000480, "Member 'ABP_MenuRacerPreview_C::MachineActor' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, HoverboardActor) == 0x000488, "Member 'ABP_MenuRacerPreview_C::HoverboardActor' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, MenuRacerTimerHandle) == 0x000490, "Member 'ABP_MenuRacerPreview_C::MenuRacerTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, StartTransform) == 0x0004A0, "Member 'ABP_MenuRacerPreview_C::StartTransform' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, GoalTransForm) == 0x000500, "Member 'ABP_MenuRacerPreview_C::GoalTransForm' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, bIsCockpitAnimEnabled) == 0x000560, "Member 'ABP_MenuRacerPreview_C::bIsCockpitAnimEnabled' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, Rotation) == 0x000568, "Member 'ABP_MenuRacerPreview_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, bLightingChannel0) == 0x000570, "Member 'ABP_MenuRacerPreview_C::bLightingChannel0' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, bLightingChannel1) == 0x000571, "Member 'ABP_MenuRacerPreview_C::bLightingChannel1' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, bLightingChannel2) == 0x000572, "Member 'ABP_MenuRacerPreview_C::bLightingChannel2' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, FrontStickerBakerHandle) == 0x000578, "Member 'ABP_MenuRacerPreview_C::FrontStickerBakerHandle' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, RearStickerBakerHandle) == 0x000580, "Member 'ABP_MenuRacerPreview_C::RearStickerBakerHandle' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, CurrentDriverData) == 0x000588, "Member 'ABP_MenuRacerPreview_C::CurrentDriverData' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, bAutoInitialSetup) == 0x000918, "Member 'ABP_MenuRacerPreview_C::bAutoInitialSetup' has a wrong offset!");
static_assert(offsetof(ABP_MenuRacerPreview_C, IsForCapture) == 0x000919, "Member 'ABP_MenuRacerPreview_C::IsForCapture' has a wrong offset!");

}

