#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RaceGadgetPlateSequence

#include "Basic.hpp"

#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "Engine_structs.hpp"
#include "UnionRun_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RaceGadgetPlateSequence.BP_RaceGadgetPlateSequence_C
// 0x0068 (0x03D0 - 0x0368)
class ABP_RaceGadgetPlateSequence_C final : public ARaceGadgetPlateSequence
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0368(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_EndMenu_GudgetLv_Window_C*         GadgetPlateLvWidget;                               // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnGadgetPlateLvEnd;                                // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bRankUp;                                           // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_ItemGet_Window_C*                  RankUpWidget;                                      // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoSave;                                         // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x3];                                      // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrevRaceCountIndex;                                // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NowRaceCountIndex;                                 // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEvenRaceCount;                                    // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentRaceCountLevel;                             // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentRaceCount;                                  // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextRaceCount;                                     // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGadgetPlateId                                LvUpWidPlateIdCurrent;                             // 0x03B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B5[0x3];                                      // 0x03B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LvUpWidAddRaceCount;                               // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GaugeOverValue;                                    // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LvUpWidBaseRaceCount;                              // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LvUpWidMaxRaceCount;                               // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGadgetPlateId                                LvUpWidPlateIdNext;                                // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayRunkUpEvent;                                  // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CustomEvent_GadgetPlateLevelCountClose();
	void CustomEvent_GadgetPlateRunkUp();
	void CustomEvent_RewardWidget_Close();
	void ExecuteUbergraph_BP_RaceGadgetPlateSequence(int32 EntryPoint);
	void IsGadgetSlotMax(int32 TotalCount, bool* newParam);
	void IsGadgetSlotMax_PlateId(EGadgetPlateId InGadgetPlateId, bool* Result);
	void OnFinalize();
	void OnInitialize();
	void Retry_GadgetLvUpWindow();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RaceGadgetPlateSequence_C">();
	}
	static class ABP_RaceGadgetPlateSequence_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RaceGadgetPlateSequence_C>();
	}
};
static_assert(alignof(ABP_RaceGadgetPlateSequence_C) == 0x000008, "Wrong alignment on ABP_RaceGadgetPlateSequence_C");
static_assert(sizeof(ABP_RaceGadgetPlateSequence_C) == 0x0003D0, "Wrong size on ABP_RaceGadgetPlateSequence_C");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, UberGraphFrame) == 0x000368, "Member 'ABP_RaceGadgetPlateSequence_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, GadgetPlateLvWidget) == 0x000370, "Member 'ABP_RaceGadgetPlateSequence_C::GadgetPlateLvWidget' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, OnGadgetPlateLvEnd) == 0x000378, "Member 'ABP_RaceGadgetPlateSequence_C::OnGadgetPlateLvEnd' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, bRankUp) == 0x000388, "Member 'ABP_RaceGadgetPlateSequence_C::bRankUp' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, RankUpWidget) == 0x000390, "Member 'ABP_RaceGadgetPlateSequence_C::RankUpWidget' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, bAutoSave) == 0x000398, "Member 'ABP_RaceGadgetPlateSequence_C::bAutoSave' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, PrevRaceCountIndex) == 0x00039C, "Member 'ABP_RaceGadgetPlateSequence_C::PrevRaceCountIndex' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, NowRaceCountIndex) == 0x0003A0, "Member 'ABP_RaceGadgetPlateSequence_C::NowRaceCountIndex' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, bEvenRaceCount) == 0x0003A4, "Member 'ABP_RaceGadgetPlateSequence_C::bEvenRaceCount' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, CurrentRaceCountLevel) == 0x0003A8, "Member 'ABP_RaceGadgetPlateSequence_C::CurrentRaceCountLevel' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, CurrentRaceCount) == 0x0003AC, "Member 'ABP_RaceGadgetPlateSequence_C::CurrentRaceCount' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, NextRaceCount) == 0x0003B0, "Member 'ABP_RaceGadgetPlateSequence_C::NextRaceCount' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, LvUpWidPlateIdCurrent) == 0x0003B4, "Member 'ABP_RaceGadgetPlateSequence_C::LvUpWidPlateIdCurrent' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, LvUpWidAddRaceCount) == 0x0003B8, "Member 'ABP_RaceGadgetPlateSequence_C::LvUpWidAddRaceCount' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, GaugeOverValue) == 0x0003BC, "Member 'ABP_RaceGadgetPlateSequence_C::GaugeOverValue' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, LvUpWidBaseRaceCount) == 0x0003C0, "Member 'ABP_RaceGadgetPlateSequence_C::LvUpWidBaseRaceCount' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, LvUpWidMaxRaceCount) == 0x0003C4, "Member 'ABP_RaceGadgetPlateSequence_C::LvUpWidMaxRaceCount' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, LvUpWidPlateIdNext) == 0x0003C8, "Member 'ABP_RaceGadgetPlateSequence_C::LvUpWidPlateIdNext' has a wrong offset!");
static_assert(offsetof(ABP_RaceGadgetPlateSequence_C, bPlayRunkUpEvent) == 0x0003C9, "Member 'ABP_RaceGadgetPlateSequence_C::bPlayRunkUpEvent' has a wrong offset!");

}

