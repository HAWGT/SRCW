#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CharaSelect_Sub_RivalWinIcon

#include "Basic.hpp"

#include "UNION_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_CharaSelect_Sub_RivalWinIcon.WBP_CharaSelect_Sub_RivalWinIcon_C
// 0x0060 (0x0360 - 0x0300)
class UWBP_CharaSelect_Sub_RivalWinIcon_C final : public UCharaSelectRivalWinIcon
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Icon_Max_Loop;                                     // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Icon_Max_In;                                       // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Icon_Easy_Loop;                                    // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Icon_Easy_In;                                      // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Eff_01;                                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Eff_02;                                            // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Eff_S_01;                                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Eff_S_02;                                          // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 EffBase;                                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Easy;                                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Max;                                          // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_WBP_CharaSelect_Sub_RivalWinIcon(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_CharaSelect_Sub_RivalWinIcon_C">();
	}
	static class UWBP_CharaSelect_Sub_RivalWinIcon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_CharaSelect_Sub_RivalWinIcon_C>();
	}
};
static_assert(alignof(UWBP_CharaSelect_Sub_RivalWinIcon_C) == 0x000008, "Wrong alignment on UWBP_CharaSelect_Sub_RivalWinIcon_C");
static_assert(sizeof(UWBP_CharaSelect_Sub_RivalWinIcon_C) == 0x000360, "Wrong size on UWBP_CharaSelect_Sub_RivalWinIcon_C");
static_assert(offsetof(UWBP_CharaSelect_Sub_RivalWinIcon_C, UberGraphFrame) == 0x000300, "Member 'UWBP_CharaSelect_Sub_RivalWinIcon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_CharaSelect_Sub_RivalWinIcon_C, Icon_Max_Loop) == 0x000308, "Member 'UWBP_CharaSelect_Sub_RivalWinIcon_C::Icon_Max_Loop' has a wrong offset!");
static_assert(offsetof(UWBP_CharaSelect_Sub_RivalWinIcon_C, Icon_Max_In) == 0x000310, "Member 'UWBP_CharaSelect_Sub_RivalWinIcon_C::Icon_Max_In' has a wrong offset!");
static_assert(offsetof(UWBP_CharaSelect_Sub_RivalWinIcon_C, Icon_Easy_Loop) == 0x000318, "Member 'UWBP_CharaSelect_Sub_RivalWinIcon_C::Icon_Easy_Loop' has a wrong offset!");
static_assert(offsetof(UWBP_CharaSelect_Sub_RivalWinIcon_C, Icon_Easy_In) == 0x000320, "Member 'UWBP_CharaSelect_Sub_RivalWinIcon_C::Icon_Easy_In' has a wrong offset!");
static_assert(offsetof(UWBP_CharaSelect_Sub_RivalWinIcon_C, Eff_01) == 0x000328, "Member 'UWBP_CharaSelect_Sub_RivalWinIcon_C::Eff_01' has a wrong offset!");
static_assert(offsetof(UWBP_CharaSelect_Sub_RivalWinIcon_C, Eff_02) == 0x000330, "Member 'UWBP_CharaSelect_Sub_RivalWinIcon_C::Eff_02' has a wrong offset!");
static_assert(offsetof(UWBP_CharaSelect_Sub_RivalWinIcon_C, Eff_S_01) == 0x000338, "Member 'UWBP_CharaSelect_Sub_RivalWinIcon_C::Eff_S_01' has a wrong offset!");
static_assert(offsetof(UWBP_CharaSelect_Sub_RivalWinIcon_C, Eff_S_02) == 0x000340, "Member 'UWBP_CharaSelect_Sub_RivalWinIcon_C::Eff_S_02' has a wrong offset!");
static_assert(offsetof(UWBP_CharaSelect_Sub_RivalWinIcon_C, EffBase) == 0x000348, "Member 'UWBP_CharaSelect_Sub_RivalWinIcon_C::EffBase' has a wrong offset!");
static_assert(offsetof(UWBP_CharaSelect_Sub_RivalWinIcon_C, Icon_Easy) == 0x000350, "Member 'UWBP_CharaSelect_Sub_RivalWinIcon_C::Icon_Easy' has a wrong offset!");
static_assert(offsetof(UWBP_CharaSelect_Sub_RivalWinIcon_C, Icon_Max) == 0x000358, "Member 'UWBP_CharaSelect_Sub_RivalWinIcon_C::Icon_Max' has a wrong offset!");

}

