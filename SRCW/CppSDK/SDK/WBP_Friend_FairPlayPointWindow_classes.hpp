#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Friend_FairPlayPointWindow

#include "Basic.hpp"

#include "UNION_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Friend_FairPlayPointWindow.WBP_Friend_FairPlayPointWindow_C
// 0x0050 (0x0398 - 0x0348)
class UWBP_Friend_FairPlayPointWindow_C final : public UFairPlayPointWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UOutOfContentButton*                    OutOfContentButton;                                // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PenaltyBase;                                       // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PlateBase;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SmallWindowBase;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_Explanation;                                   // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_Info_Default;                                  // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_Penalty;                                       // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Friend_Sub_FairPlayGauge_C*        WBP_Friend_Sub_FairPlayGauge;                      // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_FairPlayPointInfo;                  // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_Friend_FairPlayPointWindow(int32 EntryPoint);
	void OnBackKeyPressed();
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void Setup(int32 InFairPlayPoint, bool bInBan, const class FString& InPenaltyEndTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Friend_FairPlayPointWindow_C">();
	}
	static class UWBP_Friend_FairPlayPointWindow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Friend_FairPlayPointWindow_C>();
	}
};
static_assert(alignof(UWBP_Friend_FairPlayPointWindow_C) == 0x000008, "Wrong alignment on UWBP_Friend_FairPlayPointWindow_C");
static_assert(sizeof(UWBP_Friend_FairPlayPointWindow_C) == 0x000398, "Wrong size on UWBP_Friend_FairPlayPointWindow_C");
static_assert(offsetof(UWBP_Friend_FairPlayPointWindow_C, UberGraphFrame) == 0x000348, "Member 'UWBP_Friend_FairPlayPointWindow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_FairPlayPointWindow_C, OutOfContentButton) == 0x000350, "Member 'UWBP_Friend_FairPlayPointWindow_C::OutOfContentButton' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_FairPlayPointWindow_C, PenaltyBase) == 0x000358, "Member 'UWBP_Friend_FairPlayPointWindow_C::PenaltyBase' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_FairPlayPointWindow_C, PlateBase) == 0x000360, "Member 'UWBP_Friend_FairPlayPointWindow_C::PlateBase' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_FairPlayPointWindow_C, SmallWindowBase) == 0x000368, "Member 'UWBP_Friend_FairPlayPointWindow_C::SmallWindowBase' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_FairPlayPointWindow_C, TXT_Explanation) == 0x000370, "Member 'UWBP_Friend_FairPlayPointWindow_C::TXT_Explanation' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_FairPlayPointWindow_C, TXT_Info_Default) == 0x000378, "Member 'UWBP_Friend_FairPlayPointWindow_C::TXT_Info_Default' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_FairPlayPointWindow_C, TXT_Penalty) == 0x000380, "Member 'UWBP_Friend_FairPlayPointWindow_C::TXT_Penalty' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_FairPlayPointWindow_C, WBP_Friend_Sub_FairPlayGauge) == 0x000388, "Member 'UWBP_Friend_FairPlayPointWindow_C::WBP_Friend_Sub_FairPlayGauge' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_FairPlayPointWindow_C, WidgetSwitcher_FairPlayPointInfo) == 0x000390, "Member 'UWBP_Friend_FairPlayPointWindow_C::WidgetSwitcher_FairPlayPointInfo' has a wrong offset!");

}

