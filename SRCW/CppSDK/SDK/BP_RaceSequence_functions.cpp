#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RaceSequence

#include "Basic.hpp"

#include "BP_RaceSequence_classes.hpp"
#include "BP_RaceSequence_parameters.hpp"


namespace SDK
{

// Function BP_RaceSequence.BP_RaceSequence_C.AfterReadyStatusObject
// (Event, Public, BlueprintEvent)

void ABP_RaceSequence_C::AfterReadyStatusObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "AfterReadyStatusObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.ApplyOnlineCharaMachineSetting
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::ApplyOnlineCharaMachineSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "ApplyOnlineCharaMachineSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.ApplyParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUnionRacers*                     Racers_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   RacerIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::ApplyParam(class UUnionRacers* Racers_0, int32 RacerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "ApplyParam");

	Params::BP_RaceSequence_C_ApplyParam Parms{};

	Parms.Racers_0 = Racers_0;
	Parms.RacerIndex = RacerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.ApplyParamIF
// (Event, Public, BlueprintEvent)

void ABP_RaceSequence_C::ApplyParamIF()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "ApplyParamIF");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.BGMInit
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::BGMInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "BGMInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.BindRaceBGMEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAppRaceEventManager*             AppRaceEventManager                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::BindRaceBGMEvent(class UAppRaceEventManager* AppRaceEventManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "BindRaceBGMEvent");

	Params::BP_RaceSequence_C_BindRaceBGMEvent Parms{};

	Parms.AppRaceEventManager = AppRaceEventManager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.BindSilenceSoundEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAppRaceEventManager*             AppRaceEventManager                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::BindSilenceSoundEvent(class UAppRaceEventManager* AppRaceEventManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "BindSilenceSoundEvent");

	Params::BP_RaceSequence_C_BindSilenceSoundEvent Parms{};

	Parms.AppRaceEventManager = AppRaceEventManager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.ChangeDomainPre1st
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RacerIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::ChangeDomainPre1st(int32 RacerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "ChangeDomainPre1st");

	Params::BP_RaceSequence_C_ChangeDomainPre1st Parms{};

	Parms.RacerIndex = RacerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.ChangeSubEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const EMainSubCourseIndex&              NextMainSubState                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RacerId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::ChangeSubEvent(const EMainSubCourseIndex& NextMainSubState, int32 RacerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "ChangeSubEvent");

	Params::BP_RaceSequence_C_ChangeSubEvent Parms{};

	Parms.NextMainSubState = NextMainSubState;
	Parms.RacerId = RacerId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.ChangeSubMapTexture
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainSubCourseIndex                     NextMainSubState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStageCourseMainSubMapInfo*             MainSubState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::ChangeSubMapTexture(EMainSubCourseIndex NextMainSubState, EStageCourseMainSubMapInfo* MainSubState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "ChangeSubMapTexture");

	Params::BP_RaceSequence_C_ChangeSubMapTexture Parms{};

	Parms.NextMainSubState = NextMainSubState;

	UObject::ProcessEvent(Func, &Parms);

	if (MainSubState != nullptr)
		*MainSubState = Parms.MainSubState;
}


// Function BP_RaceSequence.BP_RaceSequence_C.Chara Machine COMROM
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::Chara_Machine_COMROM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "Chara Machine COMROM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.CheckDebugGenericVar
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::CheckDebugGenericVar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "CheckDebugGenericVar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.ConvertIndexToDriverId
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDriverId*                              ID                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::ConvertIndexToDriverId(int32 Index_0, EDriverId* ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "ConvertIndexToDriverId");

	Params::BP_RaceSequence_C_ConvertIndexToDriverId Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (ID != nullptr)
		*ID = Parms.ID;
}


// Function BP_RaceSequence.BP_RaceSequence_C.ConvertIndexToPre1stBehaviorId
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  ID                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::ConvertIndexToPre1stBehaviorId(int32 Index_0, int32* ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "ConvertIndexToPre1stBehaviorId");

	Params::BP_RaceSequence_C_ConvertIndexToPre1stBehaviorId Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (ID != nullptr)
		*ID = Parms.ID;
}


// Function BP_RaceSequence.BP_RaceSequence_C.DebugOverride
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::DebugOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "DebugOverride");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.ExecuteUbergraph_BP_RaceSequence
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::ExecuteUbergraph_BP_RaceSequence(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "ExecuteUbergraph_BP_RaceSequence");

	Params::BP_RaceSequence_C_ExecuteUbergraph_BP_RaceSequence Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.FinishExitFade
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EUnionUIFadeDirection                   FadeDirection                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::FinishExitFade(EUnionUIFadeDirection FadeDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "FinishExitFade");

	Params::BP_RaceSequence_C_FinishExitFade Parms{};

	Parms.FadeDirection = FadeDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.GetBGMNameFromLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsIntro                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString*                          BGMName_0                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::GetBGMNameFromLevel(bool IsIntro, class FString* BGMName_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "GetBGMNameFromLevel");

	Params::BP_RaceSequence_C_GetBGMNameFromLevel Parms{};

	Parms.IsIntro = IsIntro;

	UObject::ProcessEvent(Func, &Parms);

	if (BGMName_0 != nullptr)
		*BGMName_0 = std::move(Parms.BGMName_0);
}


// Function BP_RaceSequence.BP_RaceSequence_C.GetFooter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWBP_FooterMenu_C**               FooterMenu_0                                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::GetFooter(class UWBP_FooterMenu_C** FooterMenu_0, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "GetFooter");

	Params::BP_RaceSequence_C_GetFooter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FooterMenu_0 != nullptr)
		*FooterMenu_0 = Parms.FooterMenu_0;

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BP_RaceSequence.BP_RaceSequence_C.GetMovieSkipDelaySeconds
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 Seconds                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::GetMovieSkipDelaySeconds(double* Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "GetMovieSkipDelaySeconds");

	Params::BP_RaceSequence_C_GetMovieSkipDelaySeconds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Seconds != nullptr)
		*Seconds = Parms.Seconds;
}


// Function BP_RaceSequence.BP_RaceSequence_C.GetRaceBGMLabel
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsIntro                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString*                          Label                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::GetRaceBGMLabel(bool IsIntro, class FString* Label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "GetRaceBGMLabel");

	Params::BP_RaceSequence_C_GetRaceBGMLabel Parms{};

	Parms.IsIntro = IsIntro;

	UObject::ProcessEvent(Func, &Parms);

	if (Label != nullptr)
		*Label = std::move(Parms.Label);
}


// Function BP_RaceSequence.BP_RaceSequence_C.GetRaceEndMenuContentId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECommonRaceMenuContentId*               RaceEndMenuContentId_0                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::GetRaceEndMenuContentId(ECommonRaceMenuContentId* RaceEndMenuContentId_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "GetRaceEndMenuContentId");

	Params::BP_RaceSequence_C_GetRaceEndMenuContentId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RaceEndMenuContentId_0 != nullptr)
		*RaceEndMenuContentId_0 = Parms.RaceEndMenuContentId_0;
}


// Function BP_RaceSequence.BP_RaceSequence_C.HideBlackBoard
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::HideBlackBoard(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "HideBlackBoard");

	Params::BP_RaceSequence_C_HideBlackBoard Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.HideLoadingWidget
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::HideLoadingWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "HideLoadingWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.HideRaceStandings
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::HideRaceStandings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "HideRaceStandings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.IsOnCourseEditor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Retval                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::IsOnCourseEditor(bool* Retval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "IsOnCourseEditor");

	Params::BP_RaceSequence_C_IsOnCourseEditor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Retval != nullptr)
		*Retval = Parms.Retval;
}


// Function BP_RaceSequence.BP_RaceSequence_C.KE_MonsterTruck
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RacerIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::KE_MonsterTruck(int32 RacerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "KE_MonsterTruck");

	Params::BP_RaceSequence_C_KE_MonsterTruck Parms{};

	Parms.RacerIndex = RacerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.KE_YellowDrill
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RacerIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::KE_YellowDrill(int32 RacerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "KE_YellowDrill");

	Params::BP_RaceSequence_C_KE_YellowDrill Parms{};

	Parms.RacerIndex = RacerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.OnFinalize
// (Event, Protected, BlueprintEvent)

void ABP_RaceSequence_C::OnFinalize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "OnFinalize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.OnInitialize
// (Event, Protected, BlueprintEvent)

void ABP_RaceSequence_C::OnInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "OnInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.OnInitStateExit
// (Event, Protected, BlueprintEvent)

void ABP_RaceSequence_C::OnInitStateExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "OnInitStateExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.OnInitStateIdle
// (Event, Protected, BlueprintEvent)

void ABP_RaceSequence_C::OnInitStateIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "OnInitStateIdle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.OnLoaded_15D3E10346BF46B1108571972800063D
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_RaceSequence_C::OnLoaded_15D3E10346BF46B1108571972800063D(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "OnLoaded_15D3E10346BF46B1108571972800063D");

	Params::BP_RaceSequence_C_OnLoaded_15D3E10346BF46B1108571972800063D Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.OnLoaded_3C57416242996D342FC890B6D0586604
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::OnLoaded_3C57416242996D342FC890B6D0586604(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "OnLoaded_3C57416242996D342FC890B6D0586604");

	Params::BP_RaceSequence_C_OnLoaded_3C57416242996D342FC890B6D0586604 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.OnLoaded_9588B33D4EB8ABB3F49B76B997068961
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_RaceSequence_C::OnLoaded_9588B33D4EB8ABB3F49B76B997068961(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "OnLoaded_9588B33D4EB8ABB3F49B76B997068961");

	Params::BP_RaceSequence_C_OnLoaded_9588B33D4EB8ABB3F49B76B997068961 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.OnLoaded_F85D0A1C4A57623E131AA8A4E3643AF2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_RaceSequence_C::OnLoaded_F85D0A1C4A57623E131AA8A4E3643AF2(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "OnLoaded_F85D0A1C4A57623E131AA8A4E3643AF2");

	Params::BP_RaceSequence_C_OnLoaded_F85D0A1C4A57623E131AA8A4E3643AF2 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.OnReadyBeforeCount
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::OnReadyBeforeCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "OnReadyBeforeCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.Play BGM
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::Play_BGM(class USoundAtomCue* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "Play BGM");

	Params::BP_RaceSequence_C_Play_BGM Parms{};

	Parms.Sound = Sound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceBGMFinished
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::RaceBGMFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceBGMFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceBGMonCourseEditor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FinalLap                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RaceBGMonCourseEditor(bool FinalLap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceBGMonCourseEditor");

	Params::BP_RaceSequence_C_RaceBGMonCourseEditor Parms{};

	Parms.FinalLap = FinalLap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceDecideTravelRingGate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bRandomCourse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RaceDecideTravelRingGate(const class FString& Value, bool bRandomCourse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceDecideTravelRingGate");

	Params::BP_RaceSequence_C_RaceDecideTravelRingGate Parms{};

	Parms.Value = std::move(Value);
	Parms.bRandomCourse = bRandomCourse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceFinalLapLast
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::RaceFinalLapLast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceFinalLapLast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceGoalWithParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAppRaceEventGoalData&           GoalParam                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void ABP_RaceSequence_C::RaceGoalWithParam(struct FAppRaceEventGoalData& GoalParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceGoalWithParam");

	Params::BP_RaceSequence_C_RaceGoalWithParam Parms{};

	Parms.GoalParam = std::move(GoalParam);

	UObject::ProcessEvent(Func, &Parms);

	GoalParam = std::move(Parms.GoalParam);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RacePassedToFinalLapForce
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    Value2                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RacePassedToFinalLapForce(const class FString& Value, const class FString& Value2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RacePassedToFinalLapForce");

	Params::BP_RaceSequence_C_RacePassedToFinalLapForce Parms{};

	Parms.Value = std::move(Value);
	Parms.Value2 = std::move(Value2);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RacePassedToFirstLap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    Value2                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RacePassedToFirstLap(const class FString& Value, const class FString& Value2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RacePassedToFirstLap");

	Params::BP_RaceSequence_C_RacePassedToFirstLap Parms{};

	Parms.Value = std::move(Value);
	Parms.Value2 = std::move(Value2);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RacePassedToFirstLapWhenAnotherTimeTrial
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::RacePassedToFirstLapWhenAnotherTimeTrial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RacePassedToFirstLapWhenAnotherTimeTrial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RacePassedToPreFirstLapWhenAnotherTimeTrial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RacePassedToPreFirstLapWhenAnotherTimeTrial(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RacePassedToPreFirstLapWhenAnotherTimeTrial");

	Params::BP_RaceSequence_C_RacePassedToPreFirstLapWhenAnotherTimeTrial Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RacePassedToSecondLap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bRandomCourse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RacePassedToSecondLap(bool bRandomCourse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RacePassedToSecondLap");

	Params::BP_RaceSequence_C_RacePassedToSecondLap Parms{};

	Parms.bRandomCourse = bRandomCourse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RacePassedToSecondLapForce
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    Value2                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RacePassedToSecondLapForce(const class FString& Value, const class FString& Value2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RacePassedToSecondLapForce");

	Params::BP_RaceSequence_C_RacePassedToSecondLapForce Parms{};

	Parms.Value = std::move(Value);
	Parms.Value2 = std::move(Value2);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceReturnFromDomainSubInFinalLap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::RaceReturnFromDomainSubInFinalLap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceReturnFromDomainSubInFinalLap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceReturnFromDomainSubInFirstLap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::RaceReturnFromDomainSubInFirstLap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceReturnFromDomainSubInFirstLap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceReturnFromDomainSubInSecondLap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::RaceReturnFromDomainSubInSecondLap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceReturnFromDomainSubInSecondLap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RacerInit
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RacerIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLocalPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERacerControlType                       ControlType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*&                           Vehicle                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UUnionRacers*&                    Racers_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UUnionRacerStatusObject**         OutputPin                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RacerInit(int32 RacerIndex, int32 PlayerIndex, bool bLocalPlayer, ERacerControlType ControlType, class APawn*& Vehicle, class UUnionRacers*& Racers_0, class UUnionRacerStatusObject** OutputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RacerInit");

	Params::BP_RaceSequence_C_RacerInit Parms{};

	Parms.RacerIndex = RacerIndex;
	Parms.PlayerIndex = PlayerIndex;
	Parms.bLocalPlayer = bLocalPlayer;
	Parms.ControlType = ControlType;
	Parms.Vehicle = Vehicle;
	Parms.Racers_0 = Racers_0;

	UObject::ProcessEvent(Func, &Parms);

	Vehicle = Parms.Vehicle;
	Racers_0 = Parms.Racers_0;

	if (OutputPin != nullptr)
		*OutputPin = Parms.OutputPin;
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceSelectTravelRingGate
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::RaceSelectTravelRingGate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceSelectTravelRingGate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceSetAisacRingGateDistanceFirstLapToSecondLap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RaceSetAisacRingGateDistanceFirstLapToSecondLap(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceSetAisacRingGateDistanceFirstLapToSecondLap");

	Params::BP_RaceSequence_C_RaceSetAisacRingGateDistanceFirstLapToSecondLap Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceSetAisacRingGateDistanceSecondLapToFinalLap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RaceSetAisacRingGateDistanceSecondLapToFinalLap(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceSetAisacRingGateDistanceSecondLapToFinalLap");

	Params::BP_RaceSequence_C_RaceSetAisacRingGateDistanceSecondLapToFinalLap Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceSetBGMNameFirstLap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RaceSetBGMNameFirstLap(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceSetBGMNameFirstLap");

	Params::BP_RaceSequence_C_RaceSetBGMNameFirstLap Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceTransitionToDomainSubInFinalLap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::RaceTransitionToDomainSubInFinalLap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceTransitionToDomainSubInFinalLap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceTransitionToDomainSubInFirstLap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::RaceTransitionToDomainSubInFirstLap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceTransitionToDomainSubInFirstLap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RaceTransitionToDomainSubInSecondLap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::RaceTransitionToDomainSubInSecondLap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RaceTransitionToDomainSubInSecondLap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_RaceSequence_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "ReceiveEndPlay");

	Params::BP_RaceSequence_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RecePassedToFinalLap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RecePassedToFinalLap(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RecePassedToFinalLap");

	Params::BP_RaceSequence_C_RecePassedToFinalLap Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RecePassedToFinalLapWhenTimeTrial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::RecePassedToFinalLapWhenTimeTrial(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RecePassedToFinalLapWhenTimeTrial");

	Params::BP_RaceSequence_C_RecePassedToFinalLapWhenTimeTrial Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RefreshHUD
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::RefreshHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RefreshHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.RemoveFooter
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::RemoveFooter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "RemoveFooter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.Select Course Setting Impl
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>*          Texture                                                (ConstParm, Parm, OutParm, UObjectWrapper, HasGetValueTypeHash)
// double*                                 OrthoRate                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::Select_Course_Setting_Impl(TSoftObjectPtr<class UObject>* Texture, double* OrthoRate, double* Angle, struct FVector* Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "Select Course Setting Impl");

	Params::BP_RaceSequence_C_Select_Course_Setting_Impl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Texture != nullptr)
		*Texture = Parms.Texture;

	if (OrthoRate != nullptr)
		*OrthoRate = Parms.OrthoRate;

	if (Angle != nullptr)
		*Angle = Parms.Angle;

	if (Offset != nullptr)
		*Offset = std::move(Parms.Offset);
}


// Function BP_RaceSequence.BP_RaceSequence_C.SelectCourseSetting
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>*          Texture                                                (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash)
// float*                                  OrthoRate                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::SelectCourseSetting(TSoftObjectPtr<class UObject>* Texture, float* OrthoRate, float* Angle, struct FVector* Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "SelectCourseSetting");

	Params::BP_RaceSequence_C_SelectCourseSetting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Texture != nullptr)
		*Texture = Parms.Texture;

	if (OrthoRate != nullptr)
		*OrthoRate = Parms.OrthoRate;

	if (Angle != nullptr)
		*Angle = Parms.Angle;

	if (Offset != nullptr)
		*Offset = std::move(Parms.Offset);
}


// Function BP_RaceSequence.BP_RaceSequence_C.Set BGMName
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMainCourse                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    InBGMName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          OutBGMName                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::Set_BGMName(bool bMainCourse, const class FString& InBGMName, class FString* OutBGMName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "Set BGMName");

	Params::BP_RaceSequence_C_Set_BGMName Parms{};

	Parms.bMainCourse = bMainCourse;
	Parms.InBGMName = std::move(InBGMName);

	UObject::ProcessEvent(Func, &Parms);

	if (OutBGMName != nullptr)
		*OutBGMName = std::move(Parms.OutBGMName);
}


// Function BP_RaceSequence.BP_RaceSequence_C.SetCourseMapSetting
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DomainIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRaceCourseMapInfo&        MapInfo                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_RaceSequence_C::SetCourseMapSetting(int32 DomainIndex, const struct FRaceCourseMapInfo& MapInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "SetCourseMapSetting");

	Params::BP_RaceSequence_C_SetCourseMapSetting Parms{};

	Parms.DomainIndex = DomainIndex;
	Parms.MapInfo = std::move(MapInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.SetCourseSubMapSetting
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DomainIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRaceCourseSubMapInfo&     MapInfo                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_RaceSequence_C::SetCourseSubMapSetting(int32 DomainIndex, const struct FRaceCourseSubMapInfo& MapInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "SetCourseSubMapSetting");

	Params::BP_RaceSequence_C_SetCourseSubMapSetting Parms{};

	Parms.DomainIndex = DomainIndex;
	Parms.MapInfo = std::move(MapInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.SetEnableRaceSilenceSound
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::SetEnableRaceSilenceSound(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "SetEnableRaceSilenceSound");

	Params::BP_RaceSequence_C_SetEnableRaceSilenceSound Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.SetEnableResultSilenceSound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::SetEnableResultSilenceSound(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "SetEnableResultSilenceSound");

	Params::BP_RaceSequence_C_SetEnableResultSilenceSound Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.SetEnableSilenceSound
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::SetEnableSilenceSound(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "SetEnableSilenceSound");

	Params::BP_RaceSequence_C_SetEnableSilenceSound Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.SetLoadingPhase
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUnionLoadingGaugeState                 LoadingGaurgeState                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::SetLoadingPhase(EUnionLoadingGaugeState LoadingGaurgeState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "SetLoadingPhase");

	Params::BP_RaceSequence_C_SetLoadingPhase Parms{};

	Parms.LoadingGaurgeState = LoadingGaurgeState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.SetRaceBGMVolume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Volume                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::SetRaceBGMVolume(double Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "SetRaceBGMVolume");

	Params::BP_RaceSequence_C_SetRaceBGMVolume Parms{};

	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.SetRaceEndMenuContentId
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECommonRaceMenuContentId                CommonRaceMenuContentId                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::SetRaceEndMenuContentId(ECommonRaceMenuContentId CommonRaceMenuContentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "SetRaceEndMenuContentId");

	Params::BP_RaceSequence_C_SetRaceEndMenuContentId Parms{};

	Parms.CommonRaceMenuContentId = CommonRaceMenuContentId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.Show Race Standings
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::Show_Race_Standings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "Show Race Standings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.Show Race Standings_Impl
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::Show_Race_Standings_Impl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "Show Race Standings_Impl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.ShowLoadingWidget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::ShowLoadingWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "ShowLoadingWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.SpawnMachine
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InRacerIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InPlayerIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bCar                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn**                           AsPawn                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::SpawnMachine(int32 InRacerIndex, int32 InPlayerIndex, bool* bCar, class APawn** AsPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "SpawnMachine");

	Params::BP_RaceSequence_C_SpawnMachine Parms{};

	Parms.InRacerIndex = InRacerIndex;
	Parms.InPlayerIndex = InPlayerIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (bCar != nullptr)
		*bCar = Parms.bCar;

	if (AsPawn != nullptr)
		*AsPawn = Parms.AsPawn;
}


// Function BP_RaceSequence.BP_RaceSequence_C.StatusObjectEventInt
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32&                            EventId                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const int32&                            Value                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceSequence_C::StatusObjectEventInt(const int32& EventId, const int32& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "StatusObjectEventInt");

	Params::BP_RaceSequence_C_StatusObjectEventInt Parms{};

	Parms.EventId = EventId;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceSequence.BP_RaceSequence_C.StopBGM
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::StopBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "StopBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceSequence.BP_RaceSequence_C.StopRaceBGM
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceSequence_C::StopRaceBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceSequence_C", "StopRaceBGM");

	UObject::ProcessEvent(Func, nullptr);
}

}

