#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RaceSequence

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"
#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "Engine_structs.hpp"
#include "UnionRun_structs.hpp"
#include "UnionUI_structs.hpp"
#include "UnionLib_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RaceSequence.BP_RaceSequence_C
// 0x02A8 (0x06E8 - 0x0440)
class ABP_RaceSequence_C final : public ARaceSequence
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0440(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_RaceSequenceStateSave_C*           BPC_RaceSequenceStateSave;                         // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateDriverGetting_C*  BPC_RaceSequenceStateDriverGetting;                // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateTermination_C*    BPC_RaceSequenceStateTermination;                  // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_AppNet_C*                          BPC_AppNet;                                        // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateReadyParam_C*     BPC_RaceSequenceStateReadyParam;                   // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStatePauseMenu_C*      BPC_RaceSequenceStatePauseMenu;                    // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateRivalTeamEliminateResult_C* BPC_RaceSequenceStateRivalTeamEliminateResult; // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateSetupAssets_C*    BPC_RaceSequenceStateSetupAssets;                  // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateGadgetPlate_C*    BPC_RaceSequenceStateGadgetPlate;                  // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateSendRaceEnd_C*    BPC_RaceSequenceStateSendRaceEnd;                  // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateSendRaceStart_C*  BPC_RaceSequenceStateSendRaceStart;                // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_JudgeEndingState_C*                BPC_JudgeEndingState;                              // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateEnding_C*         BPC_RaceSequenceStateEnding;                       // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateResultRival_C*    BPC_RaceSequenceStateResultRival;                  // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateCeremony_C*       BPC_RaceSequenceStateCeremony;                     // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateSpawnRacer_C*     BPC_RaceSequenceStateSpawnRacer;                   // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateFeaturedRacer_C*  BPC_RaceSequenceStateFeaturedRacer;                // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStatePerformRival_C*   BPC_RaceSequenceStatePerformRival;                 // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateEntryRival_C*     BPC_RaceSequenceStateEntryRival;                   // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateEntryRacer_C*     BPC_RaceSequenceStateEntryRacer;                   // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateIntroduceCourse_C* BPC_RaceSequenceStateIntroduceCourse;             // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateEndMenu_C*        BPC_RaceSequenceStateEndMenu;                      // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateResult_C*         BPC_RaceSequenceStateResult;                       // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateGoal_C*           BPC_RaceSequenceStateGoal;                         // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateDrive_C*          BPC_RaceSequenceStateDrive;                        // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateReady_C*          BPC_RaceSeuqneceStateReady;                        // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateCreateRace_C*     BPC_RaceSequenceStateCreateRace;                   // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_RaceSequenceStateLoadAssets_C*     BPC_RaceSequenceStateLoadAssets;                   // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWBP_System_Loading_BG_C*               LoadingWidget;                                     // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FSoundHandle                           BgmHandle;                                         // 0x0530(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         PlayerCount;                                       // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NowDomainIndex;                                    // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NowLapCount;                                       // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RacerCount;                                        // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLocalPlayerFirstGoal;                             // 0x0544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViewSplitMode                                SplitMode;                                         // 0x0545(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_546[0x2];                                      // 0x0546(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BGMName;                                           // 0x0548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSoundHandle                           SilenceSoundHandle;                                // 0x0558(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         NowDomainNumber;                                   // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonRaceMenuContentId                      RaceEndMenuContentId;                              // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnded;                                            // 0x0561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_562[0x6];                                      // 0x0562(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            BGMNameMap;                                        // 0x0568(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 BGMNameWork;                                       // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class ARaceStandings*                         LoadingRaceStandings;                              // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 OverrideDriverIds;                                 // 0x05D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bOverrideDriverId;                                 // 0x05E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E1[0x7];                                      // 0x05E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FRaceCourseMapInfo>        DomainIndex_MapTexture;                            // 0x05E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRaceCourseSubMapInfo                  RaceCourseSubMapInfo;                              // 0x0638(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftClassPtr<class UClass>                   LoadingRaceStandingsClassRef;                      // 0x0688(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 As_Race_Standings;                                 // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSoundHandle                           RaceSilenceSoundHandle;                            // 0x06B8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_6BC[0x4];                                      // 0x06BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        CharaIcons;                                        // 0x06C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Tmp;                                               // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D4[0x4];                                      // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 LoadRaceEndMenuSequence;                           // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_System_BlackBoard_C*               BlackBoard;                                        // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void AfterReadyStatusObject();
	void ApplyOnlineCharaMachineSetting();
	void ApplyParam(class UUnionRacers* Racers_0, int32 RacerIndex);
	void ApplyParamIF();
	void BGMInit();
	void BindRaceBGMEvent(class UAppRaceEventManager* AppRaceEventManager);
	void BindSilenceSoundEvent(class UAppRaceEventManager* AppRaceEventManager);
	void ChangeDomainPre1st(int32 RacerIndex);
	void ChangeSubEvent(const EMainSubCourseIndex& NextMainSubState, int32 RacerId);
	void ChangeSubMapTexture(EMainSubCourseIndex NextMainSubState, EStageCourseMainSubMapInfo* MainSubState);
	void Chara_Machine_COMROM();
	void CheckDebugGenericVar();
	void ConvertIndexToDriverId(int32 Index_0, EDriverId* ID);
	void ConvertIndexToPre1stBehaviorId(int32 Index_0, int32* ID);
	void DebugOverride();
	void ExecuteUbergraph_BP_RaceSequence(int32 EntryPoint);
	void FinishExitFade(EUnionUIFadeDirection FadeDirection);
	void GetBGMNameFromLevel(bool IsIntro, class FString* BGMName_0);
	void GetFooter(class UWBP_FooterMenu_C** FooterMenu_0, bool* IsValid);
	void GetMovieSkipDelaySeconds(double* Seconds);
	void GetRaceBGMLabel(bool IsIntro, class FString* Label);
	void GetRaceEndMenuContentId(ECommonRaceMenuContentId* RaceEndMenuContentId_0);
	void HideBlackBoard(double Delay);
	void HideLoadingWidget();
	void HideRaceStandings();
	void IsOnCourseEditor(bool* Retval);
	void KE_MonsterTruck(int32 RacerIndex);
	void KE_YellowDrill(int32 RacerIndex);
	void OnFinalize();
	void OnInitialize();
	void OnInitStateExit();
	void OnInitStateIdle();
	void OnLoaded_15D3E10346BF46B1108571972800063D(TSubclassOf<class UObject> Loaded);
	void OnLoaded_3C57416242996D342FC890B6D0586604(class UObject* Loaded);
	void OnLoaded_9588B33D4EB8ABB3F49B76B997068961(TSubclassOf<class UObject> Loaded);
	void OnLoaded_F85D0A1C4A57623E131AA8A4E3643AF2(TSubclassOf<class UObject> Loaded);
	void OnReadyBeforeCount();
	void Play_BGM(class USoundAtomCue* Sound);
	void RaceBGMFinished();
	void RaceBGMonCourseEditor(bool FinalLap);
	void RaceDecideTravelRingGate(const class FString& Value, bool bRandomCourse);
	void RaceFinalLapLast();
	void RaceGoalWithParam(struct FAppRaceEventGoalData& GoalParam);
	void RacePassedToFinalLapForce(const class FString& Value, const class FString& Value2);
	void RacePassedToFirstLap(const class FString& Value, const class FString& Value2);
	void RacePassedToFirstLapWhenAnotherTimeTrial();
	void RacePassedToPreFirstLapWhenAnotherTimeTrial(const class FString& Value);
	void RacePassedToSecondLap(bool bRandomCourse);
	void RacePassedToSecondLapForce(const class FString& Value, const class FString& Value2);
	void RaceReturnFromDomainSubInFinalLap();
	void RaceReturnFromDomainSubInFirstLap();
	void RaceReturnFromDomainSubInSecondLap();
	void RacerInit(int32 RacerIndex, int32 PlayerIndex, bool bLocalPlayer, ERacerControlType ControlType, class APawn*& Vehicle, class UUnionRacers*& Racers_0, class UUnionRacerStatusObject** OutputPin);
	void RaceSelectTravelRingGate();
	void RaceSetAisacRingGateDistanceFirstLapToSecondLap(float Value);
	void RaceSetAisacRingGateDistanceSecondLapToFinalLap(float Value);
	void RaceSetBGMNameFirstLap(const class FString& Value);
	void RaceTransitionToDomainSubInFinalLap();
	void RaceTransitionToDomainSubInFirstLap();
	void RaceTransitionToDomainSubInSecondLap();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RecePassedToFinalLap(const class FString& Value);
	void RecePassedToFinalLapWhenTimeTrial(const class FString& Value);
	void RefreshHUD();
	void RemoveFooter();
	void Select_Course_Setting_Impl(TSoftObjectPtr<class UObject>* Texture, double* OrthoRate, double* Angle, struct FVector* Offset);
	void SelectCourseSetting(TSoftObjectPtr<class UObject>* Texture, float* OrthoRate, float* Angle, struct FVector* Offset);
	void Set_BGMName(bool bMainCourse, const class FString& InBGMName, class FString* OutBGMName);
	void SetCourseMapSetting(int32 DomainIndex, const struct FRaceCourseMapInfo& MapInfo);
	void SetCourseSubMapSetting(int32 DomainIndex, const struct FRaceCourseSubMapInfo& MapInfo);
	void SetEnableRaceSilenceSound(bool Enable);
	void SetEnableResultSilenceSound(bool Enable);
	void SetEnableSilenceSound(bool bEnable);
	void SetLoadingPhase(EUnionLoadingGaugeState LoadingGaurgeState);
	void SetRaceBGMVolume(double Volume);
	void SetRaceEndMenuContentId(ECommonRaceMenuContentId CommonRaceMenuContentId);
	void Show_Race_Standings();
	void Show_Race_Standings_Impl();
	void ShowLoadingWidget();
	void SpawnMachine(int32 InRacerIndex, int32 InPlayerIndex, bool* bCar, class APawn** AsPawn);
	void StatusObjectEventInt(const int32& EventId, const int32& Value);
	void StopBGM();
	void StopRaceBGM();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RaceSequence_C">();
	}
	static class ABP_RaceSequence_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RaceSequence_C>();
	}
};
static_assert(alignof(ABP_RaceSequence_C) == 0x000008, "Wrong alignment on ABP_RaceSequence_C");
static_assert(sizeof(ABP_RaceSequence_C) == 0x0006E8, "Wrong size on ABP_RaceSequence_C");
static_assert(offsetof(ABP_RaceSequence_C, UberGraphFrame) == 0x000440, "Member 'ABP_RaceSequence_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateSave) == 0x000448, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateSave' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateDriverGetting) == 0x000450, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateDriverGetting' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateTermination) == 0x000458, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateTermination' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_AppNet) == 0x000460, "Member 'ABP_RaceSequence_C::BPC_AppNet' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateReadyParam) == 0x000468, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateReadyParam' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStatePauseMenu) == 0x000470, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStatePauseMenu' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateRivalTeamEliminateResult) == 0x000478, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateRivalTeamEliminateResult' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateSetupAssets) == 0x000480, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateSetupAssets' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateGadgetPlate) == 0x000488, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateGadgetPlate' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateSendRaceEnd) == 0x000490, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateSendRaceEnd' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateSendRaceStart) == 0x000498, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateSendRaceStart' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_JudgeEndingState) == 0x0004A0, "Member 'ABP_RaceSequence_C::BPC_JudgeEndingState' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateEnding) == 0x0004A8, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateEnding' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateResultRival) == 0x0004B0, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateResultRival' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateCeremony) == 0x0004B8, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateCeremony' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateSpawnRacer) == 0x0004C0, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateSpawnRacer' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateFeaturedRacer) == 0x0004C8, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateFeaturedRacer' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStatePerformRival) == 0x0004D0, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStatePerformRival' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateEntryRival) == 0x0004D8, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateEntryRival' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateEntryRacer) == 0x0004E0, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateEntryRacer' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateIntroduceCourse) == 0x0004E8, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateIntroduceCourse' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateEndMenu) == 0x0004F0, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateEndMenu' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateResult) == 0x0004F8, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateResult' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateGoal) == 0x000500, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateGoal' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateDrive) == 0x000508, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateDrive' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSeuqneceStateReady) == 0x000510, "Member 'ABP_RaceSequence_C::BPC_RaceSeuqneceStateReady' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateCreateRace) == 0x000518, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateCreateRace' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BPC_RaceSequenceStateLoadAssets) == 0x000520, "Member 'ABP_RaceSequence_C::BPC_RaceSequenceStateLoadAssets' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, LoadingWidget) == 0x000528, "Member 'ABP_RaceSequence_C::LoadingWidget' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BgmHandle) == 0x000530, "Member 'ABP_RaceSequence_C::BgmHandle' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, PlayerCount) == 0x000534, "Member 'ABP_RaceSequence_C::PlayerCount' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, NowDomainIndex) == 0x000538, "Member 'ABP_RaceSequence_C::NowDomainIndex' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, NowLapCount) == 0x00053C, "Member 'ABP_RaceSequence_C::NowLapCount' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, RacerCount) == 0x000540, "Member 'ABP_RaceSequence_C::RacerCount' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, bLocalPlayerFirstGoal) == 0x000544, "Member 'ABP_RaceSequence_C::bLocalPlayerFirstGoal' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, SplitMode) == 0x000545, "Member 'ABP_RaceSequence_C::SplitMode' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BGMName) == 0x000548, "Member 'ABP_RaceSequence_C::BGMName' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, SilenceSoundHandle) == 0x000558, "Member 'ABP_RaceSequence_C::SilenceSoundHandle' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, NowDomainNumber) == 0x00055C, "Member 'ABP_RaceSequence_C::NowDomainNumber' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, RaceEndMenuContentId) == 0x000560, "Member 'ABP_RaceSequence_C::RaceEndMenuContentId' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, bEnded) == 0x000561, "Member 'ABP_RaceSequence_C::bEnded' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BGMNameMap) == 0x000568, "Member 'ABP_RaceSequence_C::BGMNameMap' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BGMNameWork) == 0x0005B8, "Member 'ABP_RaceSequence_C::BGMNameWork' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, LoadingRaceStandings) == 0x0005C8, "Member 'ABP_RaceSequence_C::LoadingRaceStandings' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, OverrideDriverIds) == 0x0005D0, "Member 'ABP_RaceSequence_C::OverrideDriverIds' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, bOverrideDriverId) == 0x0005E0, "Member 'ABP_RaceSequence_C::bOverrideDriverId' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, DomainIndex_MapTexture) == 0x0005E8, "Member 'ABP_RaceSequence_C::DomainIndex_MapTexture' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, RaceCourseSubMapInfo) == 0x000638, "Member 'ABP_RaceSequence_C::RaceCourseSubMapInfo' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, LoadingRaceStandingsClassRef) == 0x000688, "Member 'ABP_RaceSequence_C::LoadingRaceStandingsClassRef' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, As_Race_Standings) == 0x0006B0, "Member 'ABP_RaceSequence_C::As_Race_Standings' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, RaceSilenceSoundHandle) == 0x0006B8, "Member 'ABP_RaceSequence_C::RaceSilenceSoundHandle' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, CharaIcons) == 0x0006C0, "Member 'ABP_RaceSequence_C::CharaIcons' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, Tmp) == 0x0006D0, "Member 'ABP_RaceSequence_C::Tmp' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, LoadRaceEndMenuSequence) == 0x0006D8, "Member 'ABP_RaceSequence_C::LoadRaceEndMenuSequence' has a wrong offset!");
static_assert(offsetof(ABP_RaceSequence_C, BlackBoard) == 0x0006E0, "Member 'ABP_RaceSequence_C::BlackBoard' has a wrong offset!");

}

