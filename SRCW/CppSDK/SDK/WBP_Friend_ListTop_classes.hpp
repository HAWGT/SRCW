#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Friend_ListTop

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"
#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Friend_ListTop.WBP_Friend_ListTop_C
// 0x0050 (0x03E8 - 0x0398)
class UWBP_Friend_ListTop_C final : public UFriendListWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ListTop_Out;                                       // 0x03A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ListTop_Loop;                                      // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ListTop_In;                                        // 0x03B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWBP_CMN_PlayerDetail_C*                DSP_WBP_CMN_PlayerDetail;                          // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Friend_FairPlayPointWindow_C*      DSP_WBP_Friend_FairPlayPointWindow;                // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Friend_PlayerIconWindow_C*         DSP_WBP_Friend_PlayerIconWindow;                   // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USafeZone*                              SafeZone_FriendListTop;                            // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Friend_CMN_Window_C*               WBP_Friend_CMN_Window;                             // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bIsLobbySequence;                                  // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BindAnimationEvent();
	void CMNWindowBindEvent();
	void Construct();
	void EndDisplay(bool PlayCloseSound);
	void ExecuteUbergraph_WBP_Friend_ListTop(int32 EntryPoint);
	void Finished_75AF7530440141E0A3C7CE8C96CAF316();
	void Get_Platform_Type(ECrossplayPlatform InCrossplayPlatform, EAppSupportedPlatform* OutPlatformType);
	void GetBlockType(bool InIsBlock, bool InIsPFBlock, EBlockPlayerState* OutBlockType);
	void GetRacerData(const struct FFriendListPlayerInfo& InFriendListPlayerInfo, EBlockPlayerState* OutBlockType, struct FLobbyPlayerData* OutRacerData);
	void GetRank(int32 InRateId, ERateRank* OutRateRank);
	void GetUseCharacterCounts(TArray<struct FCommon_HistoryData_CharacterUsage>& InCharacterUsage, TArray<struct FUsageCountChara>* OutUsageCountChara);
	void GetUseMachineTypeCounts(TArray<struct FCommon_HistoryData_MachineTypeUsage>& InMachineTypeUsages, TArray<int32>* OutUsedMachineCount);
	void OnAnimationInFinished();
	void OnAnimationOutFinished();
	void OnFairPlayPointDisplayStart(int32 InFairPlayPoint, bool bInBan, const class FString& InPenaltyEndTime);
	void OnFairPlayPointWidgetDisplayEnd();
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void OnJoinLobbyByLobbyIdSearch(const struct FLobbyId& TargetLobbyId);
	void OnLobbyIdSearchComplete(bool bInSuccessful, const TArray<struct FLobbyId>& InLobbyId, const class FString& InOwnerUserId, ELobbyType InLobbyType);
	void OnLobbyInvitationComplete(bool bSuccess, const struct FLobbyOperationResult& Result);
	void OnMainWidgetDisplayEnd(bool PlayCloseSound);
	void OnMainWidgetLobbyIdGet();
	void OnMainWidgetLobbyIdSearch(const class FString& TargetShortLobbyId);
	void OnMainWidgetLobbyInvitationAccept(class ULobbyJoinInfo* TargetLobbyJoinInfo);
	void OnMainWidgetLobbyInvitationDecide(const class FString& TargetUserId);
	void OnPlayerIconListCancel(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnPlayerIconListDecisionDown(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnPlayerIconSelectStart(int32 InIconId, int32 InBgColorId, bool bInIconSelect);
	void OnRacerInfoDisplayStart(const struct FFriendListPlayerInfo& InListPlayerInfo);
	void RacerInfoEnd(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void SetDebugListDisplay(bool bInEnable);
	void SetFairPlayPointWidgetVisible(bool bInVisible);
	void SetPlayerIconListVisible(bool bInVisible);
	void SetRacerInfoWidgetVisible(bool bInVisible);
	void Setup(int32 InLocalUserNumber, EFriendListCategory InInitialCategory, int32 InZOrder, bool bInLobbySequence, bool bInLobbyInvitationSendEnable, bool bInLobbyInvitationAcceptEnable, bool bInLobbyInvitationRejectEnable);
	void SetupFairPlayPointWidget(int32 InFairPlayPoint, bool bInBan, const class FString& InPenaltyEndTime);
	void SetupPlayerIconList(int32 InIconId, int32 InBgColorId, bool bInPlayerIconSelect);
	void SetupRacerInfoWidget(const struct FFriendListPlayerInfo& InListPlayerInfo);
	void StartDisplay();
	void UpdateLobbyIdDisplay(const class FString& InShortLobbyId, bool bInSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Friend_ListTop_C">();
	}
	static class UWBP_Friend_ListTop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Friend_ListTop_C>();
	}
};
static_assert(alignof(UWBP_Friend_ListTop_C) == 0x000008, "Wrong alignment on UWBP_Friend_ListTop_C");
static_assert(sizeof(UWBP_Friend_ListTop_C) == 0x0003E8, "Wrong size on UWBP_Friend_ListTop_C");
static_assert(offsetof(UWBP_Friend_ListTop_C, UberGraphFrame) == 0x000398, "Member 'UWBP_Friend_ListTop_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_ListTop_C, ListTop_Out) == 0x0003A0, "Member 'UWBP_Friend_ListTop_C::ListTop_Out' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_ListTop_C, ListTop_Loop) == 0x0003A8, "Member 'UWBP_Friend_ListTop_C::ListTop_Loop' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_ListTop_C, ListTop_In) == 0x0003B0, "Member 'UWBP_Friend_ListTop_C::ListTop_In' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_ListTop_C, DSP_WBP_CMN_PlayerDetail) == 0x0003B8, "Member 'UWBP_Friend_ListTop_C::DSP_WBP_CMN_PlayerDetail' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_ListTop_C, DSP_WBP_Friend_FairPlayPointWindow) == 0x0003C0, "Member 'UWBP_Friend_ListTop_C::DSP_WBP_Friend_FairPlayPointWindow' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_ListTop_C, DSP_WBP_Friend_PlayerIconWindow) == 0x0003C8, "Member 'UWBP_Friend_ListTop_C::DSP_WBP_Friend_PlayerIconWindow' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_ListTop_C, SafeZone_FriendListTop) == 0x0003D0, "Member 'UWBP_Friend_ListTop_C::SafeZone_FriendListTop' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_ListTop_C, WBP_Friend_CMN_Window) == 0x0003D8, "Member 'UWBP_Friend_ListTop_C::WBP_Friend_CMN_Window' has a wrong offset!");
static_assert(offsetof(UWBP_Friend_ListTop_C, bIsLobbySequence) == 0x0003E0, "Member 'UWBP_Friend_ListTop_C::bIsLobbySequence' has a wrong offset!");

}

