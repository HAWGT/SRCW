#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_TimeTrial_Reward

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UnionSystem_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_TimeTrial_Reward.WBP_TimeTrial_Reward_C
// 0x0050 (0x0330 - 0x02E0)
class UWBP_TimeTrial_Reward_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       InLoop;                                            // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWBP_Result_Sub_DonpaTicket_Details_C*  DSP_WBP_Result_Sub_DonpaTicket_Details_01;         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Result_Sub_DonpaTicket_Details_C*  DSP_WBP_Result_WBP_Result_Sub_DonpaTicket_Details_02; // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Result_Sub_DonpaTicket_Details_C*  DSP_WBP_Result_WBP_Result_Sub_DonpaTicket_Details_03; // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_RacerAward_1;                                  // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAnmSkip;                                         // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRewardDispFinish;                                 // 0x0315(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_316[0x2];                                      // 0x0316(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ticketNum;                                         // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimeTrialClearRankId                         ClearRank;                                         // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERewardRedStarRingType>                RewardRedStarRingTypes;                            // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void CloseReward();
	void Construct();
	void ExecuteUbergraph_WBP_TimeTrial_Reward(int32 EntryPoint);
	void Finished_389B05C8488384C035B81F9D586D8186();
	void Finished_42EAE7E74DA59534DA7707BC49D68732();
	void Finished_AA894A354B37BA861733F197727695A6();
	void Finished_CC39BDB44CC1ABDB85271FAB5BA5550F();
	void GetTicketNum(int32* Num);
	void IsResultReward(bool* bIsResultReward);
	void IsRewardDispComplete(bool* bIsComplete);
	void IsVisibleRSR(bool* visisble);
	void PlayOtherResultReward(const TArray<struct FHonorCommendationData>& HonorList, int32 Param_Index_0);
	void PlayOtherSE(class USoundAtomCue* SoundID, int32 PlayerIndex);
	void PlayPlayerSE(class USoundAtomCue* SoundID);
	void PlayResultRacerAward();
	void PreConstruct(bool IsDesignTime);
	void SetRank(ETimeTrialClearRankId InRank);
	void SetRewardInfo(const TArray<struct FRewardRedStarRingData>& RSRList);
	void SkipAnimation(int32 Param_Index_0);
	void カスタムイベント();
	void カスタムイベント_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_TimeTrial_Reward_C">();
	}
	static class UWBP_TimeTrial_Reward_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_TimeTrial_Reward_C>();
	}
};
static_assert(alignof(UWBP_TimeTrial_Reward_C) == 0x000008, "Wrong alignment on UWBP_TimeTrial_Reward_C");
static_assert(sizeof(UWBP_TimeTrial_Reward_C) == 0x000330, "Wrong size on UWBP_TimeTrial_Reward_C");
static_assert(offsetof(UWBP_TimeTrial_Reward_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_TimeTrial_Reward_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_Reward_C, InLoop) == 0x0002E8, "Member 'UWBP_TimeTrial_Reward_C::InLoop' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_Reward_C, DSP_WBP_Result_Sub_DonpaTicket_Details_01) == 0x0002F0, "Member 'UWBP_TimeTrial_Reward_C::DSP_WBP_Result_Sub_DonpaTicket_Details_01' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_Reward_C, DSP_WBP_Result_WBP_Result_Sub_DonpaTicket_Details_02) == 0x0002F8, "Member 'UWBP_TimeTrial_Reward_C::DSP_WBP_Result_WBP_Result_Sub_DonpaTicket_Details_02' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_Reward_C, DSP_WBP_Result_WBP_Result_Sub_DonpaTicket_Details_03) == 0x000300, "Member 'UWBP_TimeTrial_Reward_C::DSP_WBP_Result_WBP_Result_Sub_DonpaTicket_Details_03' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_Reward_C, TXT_RacerAward_1) == 0x000308, "Member 'UWBP_TimeTrial_Reward_C::TXT_RacerAward_1' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_Reward_C, Index_0) == 0x000310, "Member 'UWBP_TimeTrial_Reward_C::Index_0' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_Reward_C, IsAnmSkip) == 0x000314, "Member 'UWBP_TimeTrial_Reward_C::IsAnmSkip' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_Reward_C, bRewardDispFinish) == 0x000315, "Member 'UWBP_TimeTrial_Reward_C::bRewardDispFinish' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_Reward_C, ticketNum) == 0x000318, "Member 'UWBP_TimeTrial_Reward_C::ticketNum' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_Reward_C, ClearRank) == 0x00031C, "Member 'UWBP_TimeTrial_Reward_C::ClearRank' has a wrong offset!");
static_assert(offsetof(UWBP_TimeTrial_Reward_C, RewardRedStarRingTypes) == 0x000320, "Member 'UWBP_TimeTrial_Reward_C::RewardRedStarRingTypes' has a wrong offset!");

}

