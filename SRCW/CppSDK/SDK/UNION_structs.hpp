#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UNION

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UnionSystem_structs.hpp"
#include "UnionRun_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UnionUI_structs.hpp"


namespace SDK
{

// Enum UNION.DialogueDodonpaAnimationStateID
// NumValues: 0x0026
enum class EDialogueDodonpaAnimationStateID : uint8
{
	OutIdle                                  = 0,
	Idle                                     = 1,
	Event1In                                 = 2,
	Event1Act2                               = 3,
	Event1Act3                               = 4,
	Event1Act4                               = 5,
	Event1Act5                               = 6,
	Event1Act6                               = 7,
	Event1Out                                = 8,
	Event2In                                 = 9,
	Event2Act2                               = 10,
	Event2Act3                               = 11,
	Event2Act4                               = 12,
	Event2Act5                               = 13,
	Event2Out                                = 14,
	Event3In                                 = 15,
	Event3Act2                               = 16,
	Event3Act3                               = 17,
	Event3Act4                               = 18,
	Event3Act5                               = 19,
	Event3Out                                = 20,
	Event4In                                 = 21,
	Event4Act2                               = 22,
	Event4Act3                               = 23,
	Event4Act4                               = 24,
	Event4Act5                               = 25,
	Event4Act6                               = 26,
	Event4Out                                = 27,
	Event5In                                 = 28,
	Event5Act2                               = 29,
	Event5Act3                               = 30,
	Event5Act4                               = 31,
	Event5Act5                               = 32,
	Event5Act6                               = 33,
	Event5Act7                               = 34,
	Event5Out                                = 35,
	Num                                      = 36,
	DialogueDodonpaAnimationStateID_MAX      = 37,
};

// Enum UNION.EGadgetCustomize2SequenceState
// NumValues: 0x0003
enum class EGadgetCustomize2SequenceState : uint8
{
	Init                                     = 0,
	Select                                   = 1,
	EGadgetCustomize2SequenceState_MAX       = 2,
};

// Enum UNION.EGadgetPlateId
// NumValues: 0x000A
enum class EGadgetPlateId : uint8
{
	Rank0                                    = 0,
	Rank1                                    = 1,
	Rank2                                    = 2,
	Rank3                                    = 3,
	Rank4                                    = 4,
	Rank5                                    = 5,
	Rank6                                    = 6,
	Rank7                                    = 7,
	RentalPlate                              = 8,
	Max                                      = 9,
};

// Enum UNION.ELobbyCourseSelectState
// NumValues: 0x0008
enum class ELobbyCourseSelectState : uint8
{
	Idle                                     = 0,
	CourseSelect_Host                        = 30,
	CourseSelect_Guest                       = 31,
	CourseSelect_Vote                        = 32,
	CourseSelect_Wait                        = 33,
	CourseSelect_Random                      = 34,
	Exit                                     = 35,
	ELobbyCourseSelectState_MAX              = 36,
};

// Enum UNION.ELobbySequenceState
// NumValues: 0x003F
enum class ELobbySequenceState : uint8
{
	Idle                                     = 0,
	SelectCourse                             = 28,
	SelectCourseOnline                       = 29,
	RuleSetting                              = 9,
	GroupSetting                             = 13,
	FriendList                               = 44,
	SelectCharaMachine                       = 2,
	PlayerProfile                            = 45,
	TodayRecord                              = 7,
	Garage                                   = 35,
	CustomizeGadget                          = 38,
	Option                                   = 40,
	Etcetera                                 = 40,
	GameSettings                             = 41,
	LobbyPlayerList                          = 60,
	NotificationWindow                       = 61,
	EmoteWheel                               = 62,
	NoticePopup                              = 66,
	DodonpaEvent                             = 6,
	LobbySearch                              = 72,
	LobbySearchComplete                      = 73,
	WaitP2PConnection                        = 74,
	FixPlayerData                            = 75,
	ReturnedFromRaceToLobby                  = 76,
	CheckLobbyHost                           = 77,
	WaitingReceiveLobbyInitData              = 78,
	ChangeP2PRaceCycle                       = 79,
	WaitingInTheLobby                        = 80,
	WaitingInTheLobbyTimerEnd                = 81,
	LobbyRuleSetting                         = 82,
	TransitionToFriendLobbyAlone             = 83,
	SelectGameMode                           = 84,
	WaitingJoinMembersAloneHost              = 85,
	WaitingJoinMembers                       = 86,
	CloseLobbyInvitationWindow               = 87,
	TryToEnterLobby                          = 88,
	WaitForHostLobbyId                       = 89,
	CheckMembers                             = 90,
	CheckMembersWaiting                      = 91,
	CheckMembersWaitTallying                 = 92,
	SquadPopupWindow                         = 93,
	SelectCourseResult                       = 94,
	LobbyFinished                            = 95,
	FestaTeamDirecting                       = 96,
	FestaRuleInfo                            = 97,
	FestaRentalGadgetInfo                    = 98,
	FestaFixedRuleInfoWindow                 = 99,
	ShowTipsWindow                           = 100,
	ErrorWindow                              = 101,
	SelectCourseWait                         = 102,
	CheckJoinLobby                           = 103,
	WaitingComeBackLobby                     = 104,
	SubLevelCheck                            = 105,
	EntryCheck                               = 106,
	LobbyInit                                = 107,
	BackToPrevSequence                       = 108,
	QuitLobbyWindow                          = 109,
	QuitLobbyEndWindow                       = 110,
	SubFairPoint                             = 111,
	SquadInRaceCheck                         = 112,
	WaitSquadP2PConnectComplete              = 113,
	Exit                                     = 114,
	ELobbySequenceState_MAX                  = 115,
};

// Enum UNION.EMatchingLobbyType
// NumValues: 0x0008
enum class EMatchingLobbyType : uint8
{
	None                                     = 0,
	Rank                                     = 1,
	Friend                                   = 2,
	Frined_NSW                               = 3,
	Festa                                    = 4,
	Legend                                   = 5,
	Squad                                    = 6,
	EMatchingLobbyType_MAX                   = 7,
};

// Enum UNION.ELobbyTimerType
// NumValues: 0x000D
enum class ELobbyTimerType : uint8
{
	None                                     = 0,
	WaitingMembers                           = 1,
	LobbySearch                              = 2,
	LobbySearchComplete                      = 3,
	WaitingInTheLobby                        = 4,
	WaitingInTheLobbyTimerEnd                = 5,
	GroupSetting                             = 6,
	SelectCourse                             = 7,
	TimerFinished                            = 8,
	SquadLobby                               = 9,
	WaitingHostDecideRule                    = 10,
	Num                                      = 11,
	ELobbyTimerType_MAX                      = 12,
};

// Enum UNION.EMenuSequenceSubState
// NumValues: 0x0049
enum class EMenuSequenceSubState : uint8
{
	None                                     = 0,
	SelectClass                              = 1,
	SelectCharaMachine                       = 2,
	SelectCharacter                          = 3,
	SelectMachine                            = 4,
	EventScene                               = 5,
	TopMenuDodonpaEvent                      = 6,
	TodayRecord                              = 7,
	SelectRival                              = 8,
	RuleSetting                              = 9,
	SelectPartyRacePreset                    = 10,
	SettingPartyRace                         = 11,
	SettingItemSwitch                        = 12,
	SelectGroupPartyRace                     = 13,
	RivalTeamSelect                          = 14,
	SelectOnlineMatch                        = 15,
	Ranking                                  = 16,
	SelectGhost                              = 17,
	Login                                    = 18,
	Matching                                 = 19,
	GhostConfirmation                        = 20,
	GhostUpload                              = 21,
	Ready                                    = 22,
	ReplayLoad                               = 23,
	Room                                     = 24,
	SelectRoom                               = 25,
	MakeNewRoom                              = 26,
	InputRoomNumber                          = 27,
	SelectCourse                             = 28,
	SelectCourseOnline                       = 29,
	SelectCourseHost                         = 30,
	SelectCourseGuest                        = 31,
	SelectCourseVote                         = 32,
	SelectCourseWait                         = 33,
	SelectCourseRandom                       = 34,
	Garage                                   = 35,
	GarageTop                                = 36,
	CustomizeMachine                         = 37,
	CustomizeGadget                          = 38,
	Gallery                                  = 39,
	Etcetera                                 = 40,
	GameSettings                             = 41,
	Option                                   = 42,
	PlayerInfo                               = 43,
	FriendList                               = 44,
	PlayerProfile                            = 45,
	JukeBox                                  = 46,
	Hint                                     = 47,
	DLC                                      = 48,
	Credit                                   = 49,
	FriendShip                               = 50,
	Challenge                                = 51,
	SetHonor                                 = 52,
	PlayerRecord                             = 53,
	Squad                                    = 54,
	RankMatch                                = 55,
	Festa                                    = 56,
	FriendMatch                              = 57,
	LegendCompe                              = 58,
	OnlineLobby                              = 59,
	LobbyPlayerList                          = 60,
	NotificationWindow                       = 61,
	EmoteWheel                               = 62,
	PreNotice                                = 63,
	NoticeEventEnd                           = 64,
	GetDLCFreeContent                        = 65,
	NoticePopup                              = 66,
	EventInfomation                          = 67,
	AwardsCeremony                           = 68,
	EndingCongrats                           = 69,
	EndingStaffroll                          = 70,
	EndingReward                             = 71,
	Max                                      = 72,
};

// Enum UNION.EAppNetErrorCode
// NumValues: 0x0005
enum class EAppNetErrorCode : uint8
{
	None                                     = 0,
	Unknown                                  = 1,
	LobbyError                               = 2,
	MatchmakingError                         = 3,
	EAppNetErrorCode_MAX                     = 4,
};

// Enum UNION.ECommonLobbyMemberState
// NumValues: 0x0003
enum class ECommonLobbyMemberState : uint8
{
	InLobby                                  = 0,
	InRace                                   = 1,
	ECommonLobbyMemberState_MAX              = 2,
};

// Enum UNION.ELoginPointState
// NumValues: 0x0005
enum class ELoginPointState : uint8
{
	NoneState                                = 0,
	TitleState                               = 1,
	OnlineButtonPressState                   = 2,
	TimeTrialState                           = 3,
	ELoginPointState_MAX                     = 4,
};

// Enum UNION.EMenuSequenceMainState
// NumValues: 0x000E
enum class EMenuSequenceMainState : uint8
{
	Idle                                     = 0,
	Initialize                               = 1,
	Title                                    = 2,
	SaveAndLoadPlayLog                       = 3,
	LoadAssets                               = 4,
	TopMenu                                  = 5,
	GrandPrix                                = 6,
	Party                                    = 7,
	TimeTrial                                = 8,
	Online                                   = 9,
	Wireless                                 = 10,
	Ending                                   = 11,
	Exit                                     = 12,
	EMenuSequenceMainState_MAX               = 13,
};

// Enum UNION.EOnlineSequenceState
// NumValues: 0x000E
enum class EOnlineSequenceState : uint8
{
	Idle                                     = 0,
	Squad                                    = 54,
	RankMatch                                = 55,
	Festa                                    = 56,
	FriendMatch                              = 57,
	LegendCompe                              = 58,
	OnlineLobby                              = 59,
	DodonpaEvent                             = 6,
	PreNotice                                = 63,
	OnlineTop                                = 72,
	Login                                    = 73,
	CheckPFInvitation                        = 74,
	Exit                                     = 75,
	EOnlineSequenceState_MAX                 = 76,
};

// Enum UNION.EOptionTab
// NumValues: 0x0008
enum class EOptionTab : uint8
{
	Race                                     = 0,
	Control                                  = 1,
	Language                                 = 2,
	Graphics                                 = 3,
	Audio                                    = 4,
	Online                                   = 5,
	Num                                      = 6,
	EOptionTab_MAX                           = 7,
};

// Enum UNION.ETopMenuSequenceState
// NumValues: 0x0018
enum class ETopMenuSequenceState : uint8
{
	Idle                                     = 0,
	EventScene                               = 5,
	TopMenuDodonpaEvent                      = 6,
	PreNotice                                = 63,
	NoticeEventEnd                           = 64,
	GetDLCFreeContent                        = 65,
	NoticePopup                              = 66,
	EventInfomation                          = 67,
	SelectCharaMachine                       = 2,
	CustomizeGadget                          = 38,
	Garage                                   = 35,
	FriendList                               = 44,
	Etcetera                                 = 40,
	LobbyPlayerList                          = 60,
	PlayerProfile                            = 45,
	TopMenuTop                               = 72,
	TipsWindow                               = 73,
	Store                                    = 74,
	SelectPlayMode                           = 75,
	SelectPlayerNum                          = 76,
	SelectGameMode                           = 77,
	NetworkErrorWindow                       = 78,
	Exit                                     = 79,
	ETopMenuSequenceState_MAX                = 80,
};

// Enum UNION.ETopMenuGameMode
// NumValues: 0x0009
enum class ETopMenuGameMode : uint8
{
	None                                     = 0,
	GrandPrix                                = 1,
	Party                                    = 2,
	TimeTrial                                = 3,
	RankMatch                                = 4,
	FriendMatch                              = 5,
	Festa                                    = 6,
	Legend                                   = 7,
	Max                                      = 8,
};

// Enum UNION.ETopMenuPlayMode
// NumValues: 0x0005
enum class ETopMenuPlayMode : uint8
{
	None                                     = 0,
	Offline                                  = 1,
	Online                                   = 2,
	Wireless                                 = 3,
	Max                                      = 4,
};

// Enum UNION.EMachineOverlayMaterialType
// NumValues: 0x0004
enum class EMachineOverlayMaterialType : uint8
{
	None                                     = 0,
	JadeGhost                                = 1,
	Shield                                   = 2,
	EMachineOverlayMaterialType_MAX          = 3,
};

// Enum UNION.ECharaMachineParamWindowBlinkMode
// NumValues: 0x0005
enum class ECharaMachineParamWindowBlinkMode : uint8
{
	None                                     = 0,
	Chara                                    = 1,
	Machine                                  = 2,
	Gadget                                   = 3,
	ECharaMachineParamWindowBlinkMode_MAX    = 4,
};

// Enum UNION.ECharaSelectControlState
// NumValues: 0x0004
enum class ECharaSelectControlState : uint8
{
	CharacterSelect                          = 0,
	SkinSelect                               = 1,
	Selected                                 = 2,
	ECharaSelectControlState_MAX             = 3,
};

// Enum UNION.EMachineSelectControlState
// NumValues: 0x0006
enum class EMachineSelectControlState : uint8
{
	CharacterSelect                          = 0,
	MachineTypeSelect                        = 1,
	MachinePartsSelect                       = 2,
	MachineColorSelect                       = 3,
	Selected                                 = 4,
	EMachineSelectControlState_MAX           = 5,
};

// Enum UNION.EMachinePartsType
// NumValues: 0x0004
enum class EMachinePartsType : uint8
{
	Front                                    = 0,
	Rear                                     = 1,
	Tire                                     = 2,
	EMachinePartsType_MAX                    = 3,
};

// Enum UNION.EMachineSelectMode
// NumValues: 0x0004
enum class UNION::EMachineSelectMode : uint8
{
	MachineTypeSelect                        = 0,
	MachinePartsSelect                       = 1,
	MachineColorSelect                       = 2,
	EMachineSelectMode_MAX                   = 3,
};

// Enum UNION.EDialogResult
// NumValues: 0x0005
enum class EDialogResult : uint8
{
	None                                     = 0,
	Yes                                      = 1,
	No                                       = 2,
	OK                                       = 3,
	EDialogResult_MAX                        = 4,
};

// Enum UNION.ERivalSelectIconType
// NumValues: 0x0003
enum class ERivalSelectIconType : uint8
{
	Normal                                   = 0,
	High                                     = 1,
	ERivalSelectIconType_MAX                 = 2,
};

// Enum UNION.ECustomRaceSettingLineType
// NumValues: 0x0003
enum class ECustomRaceSettingLineType : uint8
{
	OnlyOne                                  = 0,
	ToggleEach                               = 1,
	ECustomRaceSettingLineType_MAX           = 2,
};

// Enum UNION.ELobbyType
// NumValues: 0x0008
enum class ELobbyType : uint8
{
	Invalid                                  = 0,
	RankMatch                                = 1,
	Festa                                    = 2,
	FriendMatch                              = 3,
	LegendCompe                              = 4,
	Wireless                                 = 5,
	Squad                                    = 6,
	ELobbyType_MAX                           = 7,
};

// Enum UNION.ELobbySequenceAvailabilityType
// NumValues: 0x0004
enum class ELobbySequenceAvailabilityType : uint8
{
	NormalLobbySequence                      = 0,
	NotAvailableToJoinSequence               = 1,
	NotAvailableToReceiveSequence            = 2,
	ELobbySequenceAvailabilityType_MAX       = 3,
};

// Enum UNION.EFriendListType
// NumValues: 0x000F
enum class EFriendListType : uint8
{
	PFFriendPlayed                           = 0,
	PFFriendNotPlayed                        = 1,
	FriendNowPlaying                         = 2,
	FriendNotPlaying                         = 3,
	SendRequest                              = 4,
	ReceiveRequest                           = 5,
	RecentPlayer                             = 6,
	LobbyInvitation                          = 7,
	StatusSetting                            = 8,
	PrivacySetting                           = 9,
	Block                                    = 10,
	PFFriend                                 = 11,
	Num                                      = 12,
	None                                     = 255,
	EFriendListType_MAX                      = 256,
};

// Enum UNION.EFriendListConfirmWindowButtonType
// NumValues: 0x0007
enum class EFriendListConfirmWindowButtonType : uint8
{
	Button1                                  = 0,
	Button2                                  = 1,
	Button3                                  = 2,
	Button3Small                             = 3,
	Button4                                  = 4,
	Num                                      = 5,
	EFriendListConfirmWindowButtonType_MAX   = 6,
};

// Enum UNION.EFriendListCategory
// NumValues: 0x0009
enum class EFriendListCategory : uint8
{
	PFFriendList                             = 0,
	FriendList                               = 1,
	AddFriend                                = 2,
	InvitationList                           = 3,
	OnlineSetting                            = 4,
	Num                                      = 5,
	BlockList                                = 6,
	None                                     = 255,
	EFriendListCategory_MAX                  = 256,
};

// Enum UNION.EFriendListErrorType
// NumValues: 0x001C
enum class EFriendListErrorType : uint8
{
	NotFoundPlayer                           = 0,
	BlockPlayer                              = 1,
	NotFoundLobby                            = 2,
	RequestAlready                           = 3,
	ListMax                                  = 4,
	SetNotAccept                             = 5,
	ListMaxTarget                            = 6,
	AcceptAlready                            = 7,
	RequestCancel                            = 8,
	LobbyMemberMax                           = 9,
	JoinLobbyAlready                         = 10,
	InviteAlready                            = 11,
	SetNotInvite                             = 12,
	SetNotCrossPlay                          = 13,
	NotExistLobby                            = 14,
	CurrentJoinLobby                         = 15,
	SetNotCrossPlayHost                      = 16,
	JoinLobbyFailed                          = 17,
	BlockListMax                             = 18,
	NetworkError                             = 19,
	NetworkErrorReturnTopMenu                = 20,
	FriendAlready                            = 21,
	BlockAlready                             = 22,
	TargetApplyCountMax                      = 23,
	MyselfApplyCountMaxError                 = 24,
	InMaintenance                            = 25,
	Num                                      = 26,
	EFriendListErrorType_MAX                 = 27,
};

// Enum UNION.EFriendListCommandType
// NumValues: 0x0018
enum class EFriendListCommandType : uint8
{
	Request                                  = 0,
	RequestFromSearch                        = 1,
	RequestCancel                            = 2,
	Accept                                   = 3,
	Reject                                   = 4,
	Remove                                   = 5,
	Search                                   = 6,
	Block                                    = 7,
	BlockCancel                              = 8,
	LobbyInvitation                          = 9,
	LobbyInvitationFromSearch                = 10,
	RacerInfo                                = 11,
	PFProfile                                = 12,
	LobbyInvitationAccept                    = 13,
	LobbyIdSearch                            = 14,
	RejectLobbyInvitation                    = 15,
	PlayerIconList                           = 16,
	ItemSetting                              = 17,
	BlockList                                = 18,
	FairPlayPoint                            = 19,
	Cancel                                   = 20,
	Num                                      = 21,
	None                                     = 255,
	EFriendListCommandType_MAX               = 256,
};

// Enum UNION.EFriendListOnlineSettingType
// NumValues: 0x000C
enum class EFriendListOnlineSettingType : uint8
{
	PlayerIcon                               = 0,
	PlayStatus                               = 1,
	FairPlayPoint                            = 2,
	BlockList                                = 3,
	CrossPlay                                = 4,
	PermitFriendApply                        = 5,
	PermitPlayerIdSearch                     = 6,
	AcceptLobbyInvitation                    = 7,
	AcceptLobbyInvitationRace                = 8,
	Num                                      = 9,
	None                                     = 255,
	EFriendListOnlineSettingType_MAX         = 256,
};

// Enum UNION.EPFProfileShowResult
// NumValues: 0x0006
enum class EPFProfileShowResult : uint8
{
	None                                     = 0,
	Success                                  = 1,
	ErrorWindow                              = 2,
	Failed                                   = 3,
	Num                                      = 4,
	EPFProfileShowResult_MAX                 = 5,
};

// Enum UNION.EGadgetState
// NumValues: 0x0004
enum class EGadgetState : uint8
{
	Attachable                               = 0,
	Unpurchased                              = 1,
	Locked                                   = 2,
	EGadgetState_MAX                         = 3,
};

// Enum UNION.EGarageCameraMovementMode
// NumValues: 0x0003
enum class EGarageCameraMovementMode : uint8
{
	Transform                                = 0,
	Arm                                      = 1,
	EGarageCameraMovementMode_MAX            = 2,
};

// Enum UNION.EGarageCameraMovementArmDataId
// NumValues: 0x0004
enum class EGarageCameraMovementArmDataId : uint8
{
	Init                                     = 0,
	StickerEdit                              = 1,
	StickerColor                             = 2,
	EGarageCameraMovementArmDataId_MAX       = 3,
};

// Enum UNION.EGarageCameraMovementTransformDataId
// NumValues: 0x000E
enum class EGarageCameraMovementTransformDataId : uint8
{
	Init                                     = 0,
	SpeedTypeBody                            = 1,
	SpeedTypeTire                            = 2,
	AcceleTypeBody                           = 3,
	AcceleTypeTire                           = 4,
	HandleTypeBody                           = 5,
	HandleTypeTire                           = 6,
	PowerTypeBody                            = 7,
	PowerTypeTire                            = 8,
	DashTypeBody                             = 9,
	DashTypeTire                             = 10,
	FrontStickerSelect                       = 11,
	RearStickerSelect                        = 12,
	EGarageCameraMovementTransformDataId_MAX = 13,
};

// Enum UNION.EGhostSelectModeId
// NumValues: 0x0005
enum class EGhostSelectModeId : uint8
{
	NotMyBest                                = 0,
	MyBestChallenge                          = 1,
	OnlineGhostChallenge                     = 2,
	Num                                      = 3,
	EGhostSelectModeId_MAX                   = 4,
};

// Enum UNION.EGroupSelectComponentPlaceState
// NumValues: 0x0004
enum class EGroupSelectComponentPlaceState : uint8
{
	Left                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	EGroupSelectComponentPlaceState_MAX      = 3,
};

// Enum UNION.EHintTabID
// NumValues: 0x0006
enum class EHintTabID : uint8
{
	HitTubTutorial                           = 0,
	HintTubTips                              = 1,
	HintTabItem                              = 2,
	HintTabInformation                       = 3,
	Num                                      = 4,
	EHintTabID_MAX                           = 5,
};

// Enum UNION.ELobbyInvitationSequenceType
// NumValues: 0x0006
enum class ELobbyInvitationSequenceType : uint8
{
	Normal                                   = 0,
	NotAvailableSequence                     = 1,
	PlatformNotAvailable                     = 2,
	StreamingInstallNotAvailable             = 3,
	OnlineSequenceotAvailable                = 4,
	ELobbyInvitationSequenceType_MAX         = 5,
};

// Enum UNION.ELobbyInvitationNoticeAttentionType
// NumValues: 0x0005
enum class ELobbyInvitationNoticeAttentionType : uint8
{
	None                                     = 0,
	InGame                                   = 1,
	JoinedLobby                              = 2,
	Num                                      = 3,
	ELobbyInvitationNoticeAttentionType_MAX  = 4,
};

// Enum UNION.EMachineCustomizeTabID
// NumValues: 0x000C
enum class EMachineCustomizeTabID : uint8
{
	PartsSelect                              = 0,
	ColorSelectPreset                        = 1,
	StickerSlotSelect                        = 2,
	HornSelect                               = 3,
	AuraSelect                               = 4,
	PFFriendList                             = 5,
	FriendList                               = 6,
	AddFriend                                = 7,
	InvitationList                           = 8,
	OnlineSetting                            = 9,
	Num                                      = 10,
	EMachineCustomizeTabID_MAX               = 11,
};

// Enum UNION.EMachinePartsSelectWindowMode
// NumValues: 0x0003
enum class EMachinePartsSelectWindowMode : uint8
{
	Garage                                   = 0,
	CharaMachineSelect                       = 1,
	EMachinePartsSelectWindowMode_MAX        = 2,
};

// Enum UNION.EPrivateMatchPlayType
// NumValues: 0x0004
enum class EPrivateMatchPlayType : uint8
{
	None                                     = 0,
	RivalChallenge                           = 1,
	FreePlay                                 = 2,
	EPrivateMatchPlayType_MAX                = 3,
};

// Enum UNION.EPlayerInfoSubWindowBtnType
// NumValues: 0x0006
enum class EPlayerInfoSubWindowBtnType : uint8
{
	Profile                                  = 0,
	Kick                                     = 1,
	Friend                                   = 2,
	Block                                    = 3,
	Report                                   = 4,
	EPlayerInfoSubWindowBtnType_MAX          = 5,
};

// Enum UNION.EPreRaceSeqErrorCode
// NumValues: 0x001B
enum class EPreRaceSeqErrorCode : uint8
{
	None                                     = 0,
	Timeout                                  = 1,
	PeerCountZero                            = 2,
	InvalidLobby                             = 3,
	ComSyncHostResendLimit                   = 4,
	ComSyncHostReceiveMessageTimeout         = 5,
	ComSyncClientResendLimit                 = 6,
	ComSyncClientSyncedComDataFailed         = 7,
	ComSyncClientEndMessageFailed            = 8,
	ComSyncClientComDataNotEnugh             = 9,
	HostMigrateReceiveBestHostFailed         = 10,
	HostMigrateHostReceiveFinishFailed       = 11,
	HostMigrateHostBestHostResendLimit       = 12,
	HostMigrateHostFinishResendLimit         = 13,
	HostMigrateClientBestHostResendLimit     = 14,
	HostMigrateClientFinishResendLimit       = 15,
	MeasurementHostScoreResedLimit           = 16,
	MeasurementHostSyncResedLimit            = 17,
	MeasurementHostScoreMapFailed            = 18,
	MeasurementHostClientFinishFailed        = 19,
	MeasurementClientScoreResedLimit         = 20,
	MeasurementClientSyncResedLimit          = 21,
	MeasurementClientFinishResendLimit       = 22,
	MeasurementClientScoreMapFailed          = 23,
	MeasurementClientFinishSyncFailed        = 24,
	Unknown                                  = 255,
	EPreRaceSeqErrorCode_MAX                 = 256,
};

// Enum UNION.EPartyRaceSelectPresetState
// NumValues: 0x0006
enum class EPartyRaceSelectPresetState : uint8
{
	SelectPreset                             = 0,
	SelectPresetWithRulePreview              = 1,
	ConfirmWindow                            = 2,
	SettingItemSwitch                        = 3,
	SettingDetailRule                        = 4,
	EPartyRaceSelectPresetState_MAX          = 5,
};

// Enum UNION.EMachineSelectState
// NumValues: 0x0005
enum class EMachineSelectState : uint8
{
	Hidden                                   = 0,
	InAnim                                   = 1,
	Idle                                     = 2,
	OutAnim                                  = 3,
	EMachineSelectState_MAX                  = 4,
};

// Enum UNION.EFriendMatchLobbyJoinResult
// NumValues: 0x000B
enum class EFriendMatchLobbyJoinResult : uint8
{
	Success                                  = 0,
	Failure                                  = 1,
	InRace                                   = 2,
	WaitingToJoin                            = 3,
	TooManyPlayers                           = 4,
	Kicked                                   = 5,
	Blocked                                  = 6,
	Joining                                  = 7,
	NotFound                                 = 8,
	RomVersion                               = 9,
	EFriendMatchLobbyJoinResult_MAX          = 10,
};

// Enum UNION.EAdvertiseState
// NumValues: 0x000B
enum class EAdvertiseState : uint8
{
	CESAWarning                              = 0,
	VariousWarning                           = 1,
	SEGALogo                                 = 2,
	SONICLogo                                = 3,
	RightsLogo                               = 4,
	RightsLogo2                              = 5,
	CompanyName                              = 6,
	Rating                                   = 7,
	Strap                                    = 8,
	End                                      = 9,
	EAdvertiseState_MAX                      = 10,
};

// Enum UNION.ETravelRingLotteryGameMode
// NumValues: 0x0005
enum class ETravelRingLotteryGameMode : uint8
{
	Default                                  = 0,
	Online                                   = 1,
	AllOpen                                  = 2,
	Limited                                  = 3,
	ETravelRingLotteryGameMode_MAX           = 4,
};

// Enum UNION.ETravelRingLotteryMethod
// NumValues: 0x0005
enum class ETravelRingLotteryMethod : uint8
{
	LotteryBoth                              = 0,
	ManualBoth                               = 1,
	LotteryLeft                              = 2,
	LotteryRight                             = 3,
	ETravelRingLotteryMethod_MAX             = 4,
};

// Enum UNION.ETravelRingScreenLotteryPattern
// NumValues: 0x0005
enum class ETravelRingScreenLotteryPattern : uint8
{
	Open_Open                                = 0,
	Close_Open                               = 1,
	Open_Close                               = 2,
	Close_Close                              = 3,
	ETravelRingScreenLotteryPattern_MAX      = 4,
};

// Enum UNION.EIrregularEventLotteryPattern
// NumValues: 0x0005
enum class EIrregularEventLotteryPattern : uint8
{
	None_None                                = 0,
	None_Happen                              = 1,
	Happen_None                              = 2,
	Happen_Happen                            = 3,
	EIrregularEventLotteryPattern_MAX        = 4,
};

// Enum UNION.ELobbyNoticeErrorType
// NumValues: 0x0005
enum class ELobbyNoticeErrorType : uint8
{
	None                                     = 0,
	SameLobby                                = 1,
	SearchFail                               = 2,
	ReturnToTitle                            = 3,
	ELobbyNoticeErrorType_MAX                = 4,
};

// Enum UNION.ETopCountState
// NumValues: 0x0005
enum class ETopCountState : uint8
{
	Normal                                   = 0,
	MatchPoint                               = 1,
	Winner                                   = 2,
	Num                                      = 3,
	ETopCountState_MAX                       = 4,
};

// Enum UNION.EBootSequenceState
// NumValues: 0x0008
enum class EBootSequenceState : uint8
{
	Idle                                     = 0,
	SignInPlatform                           = 1,
	InitializePlatform                       = 2,
	CheckGDKCrossPlay                        = 3,
	CheckPSParentalControl                   = 4,
	CheckContent                             = 5,
	Exit                                     = 6,
	EBootSequenceState_MAX                   = 7,
};

// Enum UNION.EBugreportToolLogType
// NumValues: 0x0004
enum class EBugreportToolLogType : uint8
{
	Log                                      = 0,
	Warning                                  = 1,
	Error                                    = 2,
	EBugreportToolLogType_MAX                = 3,
};

// Enum UNION.EChallengeAndHonorTitleSequenceState
// NumValues: 0x0004
enum class EChallengeAndHonorTitleSequenceState : uint8
{
	InitState                                = 0,
	ChallengeState                           = 51,
	HonorTitleState                          = 52,
	EChallengeAndHonorTitleSequenceState_MAX = 53,
};

// Enum UNION.EChallengeGaugeBGAction
// NumValues: 0x0004
enum class EChallengeGaugeBGAction : uint8
{
	In                                       = 0,
	Loop                                     = 1,
	Out                                      = 2,
	EChallengeGaugeBGAction_MAX              = 3,
};

// Enum UNION.EChallengeGaugeChaoAction
// NumValues: 0x000B
enum class EChallengeGaugeChaoAction : uint8
{
	Invalid                                  = 0,
	In                                       = 1,
	Out                                      = 2,
	Move                                     = 3,
	Wait                                     = 4,
	Rest                                     = 5,
	Get_S                                    = 6,
	Get_L                                    = 7,
	ChangeIn                                 = 8,
	ChangeOut                                = 9,
	EChallengeGaugeChaoAction_MAX            = 10,
};

// Enum UNION.EChallengeGaugeCompleteAction
// NumValues: 0x0004
enum class EChallengeGaugeCompleteAction : uint8
{
	In                                       = 0,
	Loop                                     = 1,
	Out                                      = 2,
	EChallengeGaugeCompleteAction_MAX        = 3,
};

// Enum UNION.EChallengeGuagePointStyle
// NumValues: 0x0004
enum class EChallengeGuagePointStyle : uint8
{
	Normal                                   = 0,
	CheckPoint                               = 1,
	Goal                                     = 2,
	EChallengeGuagePointStyle_MAX            = 3,
};

// Enum UNION.EChallengeGaugePointAction
// NumValues: 0x0007
enum class EChallengeGaugePointAction : uint8
{
	Invalid                                  = 0,
	In                                       = 1,
	Loop                                     = 2,
	Get                                      = 3,
	Obtained                                 = 4,
	Out                                      = 5,
	EChallengeGaugePointAction_MAX           = 6,
};

// Enum UNION.ECharaMachineSelectState
// NumValues: 0x0006
enum class ECharaMachineSelectState : uint8
{
	Hidden                                   = 0,
	InAnim                                   = 1,
	CharaSelect                              = 2,
	MachineSelect                            = 3,
	OutAnim                                  = 4,
	ECharaMachineSelectState_MAX             = 5,
};

// Enum UNION.ECharaMachineSelectSequenceState
// NumValues: 0x0006
enum class ECharaMachineSelectSequenceState : uint8
{
	Idle                                     = 0,
	CharaSelect                              = 1,
	MachineSelect                            = 2,
	TodayRecord                              = 3,
	Exit                                     = 4,
	ECharaMachineSelectSequenceState_MAX     = 5,
};

// Enum UNION.ECharaMachineSelectParamVisibility
// NumValues: 0x0003
enum class ECharaMachineSelectParamVisibility : uint8
{
	ParamHidden                              = 0,
	ParamVisible                             = 1,
	ECharaMachineSelectParamVisibility_MAX   = 2,
};

// Enum UNION.ECharaMachinePopUpWindowState
// NumValues: 0x0004
enum class ECharaMachinePopUpWindowState : uint8
{
	None                                     = 0,
	OptionWindow                             = 1,
	ParameterWindow                          = 2,
	ECharaMachinePopUpWindowState_MAX        = 3,
};

// Enum UNION.ECharaMachineSelectSettingDataType
// NumValues: 0x0010
enum class ECharaMachineSelectSettingDataType : uint8
{
	Selected1P_Speed                         = 0,
	Selected1P_Accele                        = 1,
	Selected1P_Handle                        = 2,
	Selected1P_Power                         = 3,
	Selected1P_Dash                          = 4,
	Selected2P_Speed                         = 5,
	Selected2P_Accele                        = 6,
	Selected2P_Handle                        = 7,
	Selected2P_Power                         = 8,
	Selected2P_Dash                          = 9,
	Selected4P_Speed                         = 10,
	Selected4P_Accele                        = 11,
	Selected4P_Handle                        = 12,
	Selected4P_Power                         = 13,
	Selected4P_Dash                          = 14,
	ECharaMachineSelectSettingDataType_MAX   = 15,
};

// Enum UNION.ECharaIconMode
// NumValues: 0x0004
enum class ECharaIconMode : uint8
{
	CharacterSelect                          = 0,
	SkinSelect                               = 1,
	RivalSelect                              = 2,
	ECharaIconMode_MAX                       = 3,
};

// Enum UNION.ECharaIconType
// NumValues: 0x0004
enum class ECharaIconType : uint8
{
	Chara                                    = 0,
	Random                                   = 1,
	Question                                 = 2,
	ECharaIconType_MAX                       = 3,
};

// Enum UNION.ELobbyMatchmakingStatus
// NumValues: 0x0008
enum class ELobbyMatchmakingStatus : uint8
{
	Invalid                                  = 0,
	Idle                                     = 1,
	Start                                    = 2,
	Matched                                  = 3,
	Cancel                                   = 4,
	Fail                                     = 5,
	Reset                                    = 6,
	ELobbyMatchmakingStatus_MAX              = 7,
};

// Enum UNION.EFooterMainTextType
// NumValues: 0x0009
enum class EFooterMainTextType : uint8
{
	OK                                       = 0,
	Next                                     = 1,
	Back                                     = 2,
	Cancel                                   = 3,
	Skip                                     = 4,
	LongCancel                               = 5,
	Confirm                                  = 6,
	LongSkip                                 = 7,
	EFooterMainTextType_MAX                  = 8,
};

// Enum UNION.EFooterSubTextType
// NumValues: 0x0023
enum class EFooterSubTextType : uint8
{
	None                                     = 0,
	SelectCharaMachine                       = 1,
	SelectPlayer                             = 2,
	SelectCourse                             = 3,
	Parameter                                = 4,
	Random                                   = 5,
	Option                                   = 6,
	SelectClass                              = 7,
	SelectRival                              = 8,
	Edit                                     = 9,
	RuleCheck                                = 10,
	CallMyRule                               = 11,
	ResetDefault                             = 12,
	ChangeGroup                              = 13,
	RankVisible                              = 14,
	ChangeOnOff                              = 15,
	AllOn                                    = 16,
	AllOFF                                   = 17,
	ChangeMirror                             = 18,
	SelectMode                               = 19,
	GadgetCustomize                          = 20,
	TitleSetting                             = 21,
	StickerKeyHelp                           = 22,
	DetachGadget                             = 23,
	StickerClear                             = 24,
	BlockPlayer                              = 25,
	Horn                                     = 26,
	Challenge                                = 27,
	JukeboxSetBGMDefault                     = 28,
	OptionReset                              = 29,
	UserReport                               = 30,
	XboxGamerCard                            = 31,
	PFFriendChangePage                       = 32,
	TimeTrialMyBest                          = 33,
	EFooterSubTextType_MAX                   = 34,
};

// Enum UNION.ECommonRaceMenuContentId
// NumValues: 0x001F
enum class ECommonRaceMenuContentId : uint8
{
	Common_ToNextRound                       = 0,
	Common_ToAwardCeremony                   = 1,
	Common_ViewReplay                        = 2,
	Common_ToGarage                          = 3,
	Common_ToGadget                          = 4,
	Common_ReturnTopMenu                     = 5,
	Common_QuitRace                          = 6,
	Common_ReturnSquadLobby                  = 7,
	Common_ExitLobby                         = 8,
	GrandPrix_RetryGrandPrix                 = 9,
	GrandPrix_RetryRound                     = 10,
	GrandPrix_ReturnGrandPrixSelect          = 11,
	PartyRace_ReturnCourseSelect             = 12,
	PartyRace_ReturnPartySelect              = 13,
	PartyRace_Continue                       = 14,
	TimeTrial_RetryRace                      = 15,
	TimeTrial_ReplayGhost                    = 16,
	TimeTrial_ReturnCourseSelect             = 17,
	RankMatch_ContinueRace                   = 18,
	Festa_ContinueRace                       = 19,
	FriendMatch_ContinueRace                 = 20,
	PrivateMatch_Host_QuitRace               = 21,
	PrivateMatch_Guest_QuitRace              = 22,
	Pause_Option                             = 23,
	Pause_ResumeRace                         = 24,
	Pause_ReturnRuleSetting                  = 25,
	Pause_ReturnGrandPrixSelect              = 26,
	Pause_ResumeGhostView                    = 27,
	Pause_ReturnTopMenu                      = 28,
	Num                                      = 29,
	ECommonRaceMenuContentId_MAX             = 30,
};

// Enum UNION.ECommonRaceMenuIconId
// NumValues: 0x000C
enum class ECommonRaceMenuIconId : uint8
{
	None                                     = 0,
	Next                                     = 1,
	Replay                                   = 2,
	GrandPrixSelect                          = 3,
	Return                                   = 4,
	Retry                                    = 5,
	CourseSelect                             = 6,
	Garage                                   = 7,
	AwardCeremony                            = 8,
	GadgetCustomize                          = 9,
	Num                                      = 10,
	ECommonRaceMenuIconId_MAX                = 11,
};

// Enum UNION.ERivalLevelPlayType
// NumValues: 0x0007
enum class ERivalLevelPlayType : uint8
{
	None                                     = 0,
	Blank                                    = 1,
	Normal                                   = 2,
	High                                     = 3,
	SuperHigh                                = 4,
	BlankLoop                                = 5,
	ERivalLevelPlayType_MAX                  = 6,
};

// Enum UNION.ECommonRivalRewardState
// NumValues: 0x0005
enum class ECommonRivalRewardState : uint8
{
	Invalid                                  = 0,
	Locked                                   = 1,
	Active                                   = 2,
	Get                                      = 3,
	ECommonRivalRewardState_MAX              = 4,
};

// Enum UNION.EScrollPointBoxItemIconIndex
// NumValues: 0x0008
enum class EScrollPointBoxItemIconIndex : uint8
{
	Blue                                     = 0,
	Red                                      = 1,
	Green                                    = 2,
	Orange                                   = 3,
	Default                                  = 4,
	New                                      = 5,
	Selected                                 = 6,
	EScrollPointBoxItemIconIndex_MAX         = 7,
};

// Enum UNION.ECourseSelectCategoryIconVisualType
// NumValues: 0x0003
enum class ECourseSelectCategoryIconVisualType : uint8
{
	GrandPrix                                = 0,
	TimeTrial                                = 1,
	ECourseSelectCategoryIconVisualType_MAX  = 2,
};

// Enum UNION.ECustomRuleSettingState
// NumValues: 0x0004
enum class ECustomRuleSettingState : uint8
{
	UnReady                                  = 0,
	Ready                                    = 1,
	Unknown                                  = 2,
	ECustomRuleSettingState_MAX              = 3,
};

// Enum UNION.EDebugStartMenuSequenceState
// NumValues: 0x0006
enum class EDebugStartMenuSequenceState : uint8
{
	Idle                                     = 0,
	ConfigDataLoad                           = 1,
	SaveDataLoad                             = 2,
	Setting                                  = 3,
	Exit                                     = 4,
	EDebugStartMenuSequenceState_MAX         = 5,
};

// Enum UNION.DialogueAnimationAssetID
// NumValues: 0x0009
enum class EDialogueAnimationAssetID : uint8
{
	OutIdle                                  = 0,
	Idle                                     = 1,
	TalkStart                                = 2,
	TalkLoop                                 = 3,
	PriseLoop                                = 4,
	Go                                       = 5,
	Bye                                      = 6,
	Num                                      = 7,
	DialogueAnimationAssetID_MAX             = 8,
};

// Enum UNION.DialogueDisplayAnimationAssetID
// NumValues: 0x0007
enum class EDialogueDisplayAnimationAssetID : uint8
{
	OutIdle                                  = 0,
	In                                       = 1,
	Idle                                     = 2,
	Out                                      = 3,
	OutLoop                                  = 4,
	Num                                      = 5,
	DialogueDisplayAnimationAssetID_MAX      = 6,
};

// Enum UNION.DialogueDisplayAnimationStateID
// NumValues: 0x0005
enum class EDialogueDisplayAnimationStateID : uint8
{
	OutIdle                                  = 0,
	In                                       = 1,
	Out                                      = 2,
	Num                                      = 3,
	DialogueDisplayAnimationStateID_MAX      = 4,
};

// Enum UNION.EDialogueEventCommand
// NumValues: 0x0016
enum class EDialogueEventCommand : uint8
{
	SetCharacter                             = 0,
	ClearCharacter                           = 1,
	StartMotion                              = 2,
	StartMotion_EndWait                      = 3,
	StopMotion                               = 4,
	StartDrawText                            = 5,
	SetEventBG                               = 6,
	ClearEventBG                             = 7,
	StartMenuMode                            = 8,
	SetImage                                 = 9,
	ClearImage                               = 10,
	SetRewardGetDisplay                      = 11,
	SetDisplay                               = 12,
	PlayDisplayAnim                          = 13,
	PlayDisplayAnimByName                    = 14,
	PlayDisplayAnim_EndWait                  = 15,
	PlayDisplayAnimByName_EndWait            = 16,
	SoundPlay                                = 17,
	SetupFestaEventData                      = 18,
	InTextWindow                             = 19,
	OutTextWindow                            = 20,
	EDialogueEventCommand_MAX                = 21,
};

// Enum UNION.EEventCondition
// NumValues: 0x000B
enum class EEventCondition : uint8
{
	FirstInGrandPrix                         = 0,
	ReleaseFever                             = 1,
	FirstInGadgetCustom                      = 2,
	FirstInRacePark                          = 3,
	FirstInFesta                             = 4,
	ClearRacePark                            = 5,
	ClearGrandPrix                           = 6,
	FirstInLegendCompe                       = 7,
	Num                                      = 8,
	Invalid                                  = 8,
	EEventCondition_MAX                      = 9,
};

// Enum UNION.EDriverBlendSpaceAssetId
// NumValues: 0x000B
enum class EDriverBlendSpaceAssetId : uint8
{
	SteerIdle                                = 0,
	SteerIdleDrift                           = 1,
	Shunt                                    = 2,
	BoatSteerIdleDrift                       = 3,
	HoverSteerIdle                           = 4,
	HoverSteerIdleDrift                      = 5,
	HoverDriftRight                          = 6,
	HoverDriftLeft                           = 7,
	HoverShunt                               = 8,
	Num                                      = 9,
	EDriverBlendSpaceAssetId_MAX             = 10,
};

// Enum UNION.EDriverAnimationAssetId
// NumValues: 0x00A3
enum class EDriverAnimationAssetId : uint8
{
	Invalid                                  = 0,
	StartIdle01Loop                          = 1,
	StartIdle02Loop                          = 2,
	StartWheelspinLoop                       = 3,
	StartDashLow                             = 4,
	StartDashHigh                            = 5,
	StartWheelspinFail                       = 6,
	DriveIdleLowLoop                         = 7,
	DriveIdleHighLoop                        = 8,
	DriveTurnLeftLoop                        = 9,
	DriveTurnRightLoop                       = 10,
	DriveDriftLeftLoop                       = 11,
	DriveDriftRightLoop                      = 12,
	DriveReverseStart                        = 13,
	DriveReverseLoop                         = 14,
	DriveReverseEnd                          = 15,
	ItemHoldLoop                             = 16,
	ItemUseFront                             = 17,
	ItemUseBack                              = 18,
	ItemHit                                  = 19,
	WispHoldLoop                             = 20,
	WispUse                                  = 21,
	OvertakeTauntLeft                        = 22,
	OvertakeTauntRight                       = 23,
	OvertakeFrustrateLeft                    = 24,
	OvertakeFrustrateRight                   = 25,
	JumpBounce                               = 26,
	JumpLanding                              = 27,
	TrickFlipFront                           = 28,
	TrickFlipBack                            = 29,
	TrickFlipLeft                            = 30,
	TrickFlipRight                           = 31,
	TrickSpinLeft                            = 32,
	TrickSpinRight                           = 33,
	TrickCorkscrewLeft                       = 34,
	TrickCorkscrewRight                      = 35,
	ShuntFrontLow                            = 36,
	ShuntBackLow                             = 37,
	ShuntLeftLow                             = 38,
	ShuntRightLow                            = 39,
	ShuntFrontHigh                           = 40,
	ShuntBackHigh                            = 41,
	ShuntLeftHigh                            = 42,
	ShuntRightHigh                           = 43,
	DamageCrush                              = 44,
	DamageSpinleftLoop                       = 45,
	DamageSpinleftOut                        = 46,
	DamageSpinrightLoop                      = 47,
	DamageSpinrightOut                       = 48,
	MonstercarTransform                      = 49,
	MonstercarReturn                         = 50,
	GoalWin01Loop                            = 51,
	GoalWin02Loop                            = 52,
	GoalWin03Loop                            = 53,
	GoalLose01Loop                           = 54,
	AnotherSelectLeft                        = 55,
	AnotherSelectRight                       = 56,
	EmoteNice01                              = 57,
	EmoteGreeting01                          = 58,
	EmoteDisappointed01                      = 59,
	EmoteTaunt01                             = 60,
	EmoteSpecial01                           = 61,
	EmoteSpecial02                           = 62,
	EmoteHonk01                              = 63,
	RivalTauntStart                          = 64,
	RivalTauntLoop                           = 65,
	RivalAnnoyedStart                        = 66,
	RivalAnnoyedLoop                         = 67,
	RivalConfidenceStart                     = 68,
	RivalConfidenceLoop                      = 69,
	RivalUniqueStart                         = 70,
	RivalUniqueLoop                          = 71,
	RivalWin                                 = 72,
	RivalLose                                = 73,
	RivalStartIdle01Loop                     = 74,
	CharaSelect                              = 75,
	CeremonyWin01                            = 76,
	CeremonyWin02                            = 77,
	CeremonyWin03                            = 78,
	DriveDriftReactionLeft                   = 79,
	DriveDriftReactionRight                  = 80,
	HoverStartIdle01Loop                     = 81,
	HoverStartIdle02Loop                     = 82,
	HoverStartChargeLoop                     = 83,
	HoverStartDashLow                        = 84,
	HoverStartDashHigh                       = 85,
	HoverStartChargeFail                     = 86,
	HoverRideIdleLowLoop                     = 87,
	HoverRideIdleHighLoop                    = 88,
	HoverRideGripLeftLoop                    = 89,
	HoverRideGripRightLoop                   = 90,
	HoverRideDriftLeftLoop                   = 91,
	HoverRideDriftRightLoop                  = 92,
	HoverRideReverseStart                    = 93,
	HoverRideReverseLoop                     = 94,
	HoverRideReverseEnd                      = 95,
	HoverItemHoldLoop                        = 96,
	HoverItemUseFront                        = 97,
	HoverItemUseBack                         = 98,
	HoverItemHit                             = 99,
	HoverWispHoldLoop                        = 100,
	HoverWispUse                             = 101,
	HoverOvertakeTaunt                       = 102,
	HoverOvertakeFrustrate                   = 103,
	HoverJumpLanding                         = 104,
	HoverTrickFlipFront                      = 105,
	HoverTrickFlipBack                       = 106,
	HoverTrickFlipLeft                       = 107,
	HoverTrickFlipRight                      = 108,
	HoverTrickSpinLeft                       = 109,
	HoverTrickSpinRight                      = 110,
	HoverTrickCorkscrewLeft                  = 111,
	HoverTrickCorkscrewRight                 = 112,
	HoverShuntFrontLow                       = 113,
	HoverShuntBackLow                        = 114,
	HoverShuntLeftLow                        = 115,
	HoverShuntRightLow                       = 116,
	HoverShuntFrontHigh                      = 117,
	HoverShuntBackHigh                       = 118,
	HoverShuntLeftHigh                       = 119,
	HoverShuntRightHigh                      = 120,
	HoverDamageCrush                         = 121,
	HoverDamageSpinleftLoop                  = 122,
	HoverDamageSpinleftOut                   = 123,
	HoverDamageSpinrightLoop                 = 124,
	HoverDamageSpinrightOut                  = 125,
	HoverSelectRight                         = 126,
	HoverSelectLeft                          = 127,
	HoverGoalWin01Loop                       = 128,
	HoverGoalWin02Loop                       = 129,
	HoverGoalWin03Loop                       = 130,
	HoverGoalLose01Loop                      = 131,
	HoverEmoteNice01                         = 132,
	HoverEmoteGreeting01                     = 133,
	HoverEmoteDisappointed01                 = 134,
	HoverEmoteTaunt01                        = 135,
	HoverEmoteSpecial01                      = 136,
	HoverEmoteSpecial02                      = 137,
	HoverEmoteJump01                         = 138,
	HoverRivalTauntStart                     = 139,
	HoverRivalTauntLoop                      = 140,
	HoverRivalAnnoyedStart                   = 141,
	HoverRivalAnnoyedLoop                    = 142,
	HoverRivalConfidenceStart                = 143,
	HoverRivalConfidenceLoop                 = 144,
	HoverRivalUniqueStart                    = 145,
	HoverRivalUniqueLoop                     = 146,
	HoverRivalWin                            = 147,
	HoverRivalLose                           = 148,
	HoverRivalStartIdle01Loop                = 149,
	HoverEnemySquashed                       = 150,
	HoverCharaSelect                         = 151,
	HoverJumpChargeStart                     = 152,
	HoverJumpChargeLoop                      = 153,
	HoverDriveDriftReactionLeft              = 154,
	HoverDriveDriftReactionRight             = 155,
	LipFirstRaceLose                         = 156,
	LipFirstRaceWin                          = 157,
	LipFinalRaceLose                         = 158,
	LipFinalRaceWin                          = 159,
	LipFinalRaceDraw                         = 160,
	Num                                      = 161,
	EDriverAnimationAssetId_MAX              = 162,
};

// Enum UNION.EMenuDriverAnimationStateId
// NumValues: 0x0008
enum class EMenuDriverAnimationStateId : uint8
{
	Idle                                     = 0,
	Emote                                    = 1,
	Horn                                     = 2,
	SendLike                                 = 3,
	CharaSelect                              = 4,
	JumpLanding                              = 5,
	Num                                      = 6,
	EMenuDriverAnimationStateId_MAX          = 7,
};

// Enum UNION.EDriverMontageFlags
// NumValues: 0x0004
enum class EDriverMontageFlags : uint8
{
	None                                     = 0,
	Play                                     = 1,
	Stop                                     = 2,
	EDriverMontageFlags_MAX                  = 3,
};

// Enum UNION.ERacerAnimationFlag
// NumValues: 0x0040
enum class ERacerAnimationFlag : uint8
{
	Drift                                    = 0,
	DriftStart                               = 1,
	DashHigh                                 = 2,
	DashLow                                  = 3,
	DashFailure                              = 4,
	Crash                                    = 5,
	TauntLeft                                = 6,
	TauntRight                               = 7,
	FrustrateLeft                            = 8,
	FrustrateRight                           = 9,
	HitItem                                  = 10,
	Wheelspin                                = 11,
	JumpBounce                               = 12,
	JumpLanding                              = 13,
	TrickSpinLeft                            = 14,
	TrickSpinRight                           = 15,
	TrickFlipLeft                            = 16,
	TrickFlipRight                           = 17,
	TrickFlipFront                           = 18,
	TrickFlipBack                            = 19,
	HasItemLeft                              = 20,
	HasItemRight                             = 21,
	HasWispLeft                              = 22,
	HasWispRight                             = 23,
	UseItem                                  = 24,
	UseItemInFront                           = 25,
	UseItemInBack                            = 26,
	UseWisp                                  = 27,
	LookBackward                             = 28,
	SpinLeft                                 = 29,
	SpinRight                                = 30,
	AnotherSelectLeft                        = 31,
	AnotherSelectRight                       = 32,
	StopAllAnim                              = 33,
	TrickCorkscrewLeft                       = 34,
	TrickCorkscrewRight                      = 35,
	MonstercarTransform                      = 36,
	MonstercarReturn                         = 37,
	GoalWin01                                = 38,
	GoalWin02                                = 39,
	GoalWin03                                = 40,
	ShuntLeftLow                             = 41,
	ShuntRightLow                            = 42,
	ShuntLeftHigh                            = 43,
	ShuntRightHigh                           = 44,
	EnemySquashed                            = 45,
	ShuntFrontLow                            = 46,
	ShuntBackLow                             = 47,
	ShuntFrontHigh                           = 48,
	ShuntBackHigh                            = 49,
	BodyCut                                  = 50,
	Anchor                                   = 51,
	GoalLose01                               = 52,
	RivalWin                                 = 53,
	RivalLose                                = 54,
	JumpChargeStart                          = 55,
	JumpChargeLoop                           = 56,
	JumpChargeCrouch                         = 57,
	DriftNoStart                             = 58,
	DriftNoStartLeft                         = 59,
	DriftNoStartRight                        = 60,
	CountdownFinished                        = 61,
	Num                                      = 62,
	ERacerAnimationFlag_MAX                  = 63,
};

// Enum UNION.EDriverAnimationFlag
// NumValues: 0x0040
enum class EDriverAnimationFlag : uint8
{
	Drift                                    = 0,
	DriftStart                               = 1,
	DashHigh                                 = 2,
	DashLow                                  = 3,
	DashFailure                              = 4,
	Crash                                    = 5,
	TauntLeft                                = 6,
	TauntRight                               = 7,
	FrustrateLeft                            = 8,
	FrustrateRight                           = 9,
	HitItem                                  = 10,
	Wheelspin                                = 11,
	JumpBounce                               = 12,
	JumpLanding                              = 13,
	TrickSpinLeft                            = 14,
	TrickSpinRight                           = 15,
	TrickFlipLeft                            = 16,
	TrickFlipRight                           = 17,
	TrickFlipFront                           = 18,
	TrickFlipBack                            = 19,
	HasItemLeft                              = 20,
	HasItemRight                             = 21,
	HasWispLeft                              = 22,
	HasWispRight                             = 23,
	UseItem                                  = 24,
	UseItemInFront                           = 25,
	UseItemInBack                            = 26,
	UseWisp                                  = 27,
	LookBackward                             = 28,
	SpinLeft                                 = 29,
	SpinRight                                = 30,
	AnotherSelectLeft                        = 31,
	AnotherSelectRight                       = 32,
	StopAllAnim                              = 33,
	TrickCorkscrewLeft                       = 34,
	TrickCorkscrewRight                      = 35,
	MonstercarTransform                      = 36,
	MonstercarReturn                         = 37,
	GoalWin01                                = 38,
	GoalWin02                                = 39,
	GoalWin03                                = 40,
	ShuntLeftLow                             = 41,
	ShuntRightLow                            = 42,
	ShuntLeftHigh                            = 43,
	ShuntRightHigh                           = 44,
	EnemySquashed                            = 45,
	ShuntFrontLow                            = 46,
	ShuntBackLow                             = 47,
	ShuntFrontHigh                           = 48,
	ShuntBackHigh                            = 49,
	BodyCut                                  = 50,
	Anchor                                   = 51,
	GoalLose01                               = 52,
	RivalWin                                 = 53,
	RivalLose                                = 54,
	JumpChargeStart                          = 55,
	JumpChargeLoop                           = 56,
	JumpChargeCrouch                         = 57,
	DriftNoStart                             = 58,
	DriftNoStartLeft                         = 59,
	DriftNoStartRight                        = 60,
	CountdownFinished                        = 61,
	Num                                      = 62,
	EDriverAnimationFlag_MAX                 = 63,
};

// Enum UNION.ERacerAnimationParam
// NumValues: 0x000B
enum class ERacerAnimationParam : uint8
{
	Acceleration                             = 0,
	Steer                                    = 1,
	ShuntPower                               = 2,
	ShuntDirX                                = 3,
	ShuntDirY                                = 4,
	MontagePlayRate                          = 5,
	SpeedRate                                = 6,
	AdditionSteer                            = 7,
	SpeedKPH                                 = 8,
	Num                                      = 9,
	ERacerAnimationParam_MAX                 = 10,
};

// Enum UNION.EDriverAnimationParam
// NumValues: 0x000B
enum class EDriverAnimationParam : uint8
{
	Acceleration                             = 0,
	Steer                                    = 1,
	ShuntPower                               = 2,
	ShuntDirX                                = 3,
	ShuntDirY                                = 4,
	MontagePlayRate                          = 5,
	SpeedRate                                = 6,
	AdditionSteer                            = 7,
	SpeedKPH                                 = 8,
	Num                                      = 9,
	EDriverAnimationParam_MAX                = 10,
};

// Enum UNION.EDriverAnimMontageId
// NumValues: 0x0032
enum class EDriverAnimMontageId : uint8
{
	Crash                                    = 0,
	DashHigh                                 = 1,
	DashLow                                  = 2,
	DashFailure                              = 3,
	TrickSpinLeft                            = 4,
	TrickSpinRight                           = 5,
	TrickFlipLeft                            = 6,
	TrickFlipRight                           = 7,
	TrickFlipFront                           = 8,
	TrickFlipBack                            = 9,
	UseItemFront                             = 10,
	UseItemBack                              = 11,
	UseWisp                                  = 12,
	HitItem                                  = 13,
	AnotherSelectLeft                        = 14,
	AnotherSelectRight                       = 15,
	TauntLeft                                = 16,
	TauntRight                               = 17,
	FrustrateLeft                            = 18,
	FrustrateRight                           = 19,
	TrickCorkscrewLeft                       = 20,
	TrickCorkscrewRight                      = 21,
	MonstercarTransform                      = 22,
	MonstercarReturn                         = 23,
	GoalWin01                                = 24,
	GoalWin02                                = 25,
	GoalWin03                                = 26,
	ShuntLeftLow                             = 27,
	ShuntRightLow                            = 28,
	ShuntLeftHigh                            = 29,
	ShuntRightHigh                           = 30,
	EnemySquashed                            = 31,
	ShuntFrontLow                            = 32,
	ShuntBackLow                             = 33,
	ShuntFrontHigh                           = 34,
	ShuntBackHigh                            = 35,
	BodyCut                                  = 36,
	Anchor                                   = 37,
	GoalLose01                               = 38,
	RivalWin                                 = 39,
	RivalLose                                = 40,
	JumpChargeStart                          = 41,
	JumpChargeLoop                           = 42,
	JumpChargeCrouch                         = 43,
	DriftNoStart                             = 44,
	DriftNoStartLeft                         = 45,
	DriftNoStartRight                        = 46,
	CountdownFinished                        = 47,
	Num                                      = 48,
	EDriverAnimMontageId_MAX                 = 49,
};

// Enum UNION.EDriverOneshotAnimationId
// NumValues: 0x000E
enum class EDriverOneshotAnimationId : uint8
{
	Crash                                    = 0,
	DashHigh                                 = 1,
	DashLow                                  = 2,
	DashFailure                              = 3,
	TrickSpinLeft                            = 4,
	TrickSpinRight                           = 5,
	TrickFlipLeft                            = 6,
	TrickFlipRight                           = 7,
	TrickFlipFront                           = 8,
	TrickFlipBack                            = 9,
	HitItem                                  = 10,
	WheelspinLoop                            = 11,
	Num                                      = 12,
	EDriverOneshotAnimationId_MAX            = 13,
};

// Enum UNION.EDriverDirection
// NumValues: 0x0006
enum class EDriverDirection : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	Num                                      = 4,
	EDriverDirection_MAX                     = 5,
};

// Enum UNION.EJumpActionId
// NumValues: 0x0004
enum class EJumpActionId : uint8
{
	Bounce                                   = 0,
	Landing                                  = 1,
	Num                                      = 2,
	EJumpActionId_MAX                        = 3,
};

// Enum UNION.EBoneScaleFaceType
// NumValues: 0x0009
enum class EBoneScaleFaceType : uint8
{
	Normal                                   = 0,
	Fight                                    = 1,
	Laugh                                    = 2,
	Anger                                    = 3,
	Sad                                      = 4,
	Surprise                                 = 5,
	Damage                                   = 6,
	Num                                      = 7,
	EBoneScaleFaceType_MAX                   = 8,
};

// Enum UNION.ESharedMotionOverwriteFaceType
// NumValues: 0x0005
enum class ESharedMotionOverwriteFaceType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Damage                                   = 2,
	Num                                      = 3,
	ESharedMotionOverwriteFaceType_MAX       = 4,
};

// Enum UNION.EDriverAnimationGroup
// NumValues: 0x0005
enum class EDriverAnimationGroup : uint8
{
	Invalid                                  = 0,
	Default                                  = 1,
	Exclusive                                = 2,
	All                                      = 255,
	EDriverAnimationGroup_MAX                = 256,
};

// Enum UNION.EDriverMaterialType
// NumValues: 0x0003
enum class EDriverMaterialType : uint8
{
	Default                                  = 0,
	AlphaDithering                           = 1,
	EDriverMaterialType_MAX                  = 2,
};

// Enum UNION.EDriverStatusEffects
// NumValues: 0x0004
enum class EDriverStatusEffects : uint8
{
	Slimed                                   = 0,
	Painted                                  = 1,
	Num                                      = 2,
	EDriverStatusEffects_MAX                 = 3,
};

// Enum UNION.EDriverAnimationState
// NumValues: 0x000C
enum class EDriverAnimationState : uint8
{
	Squash                                   = 0,
	Idle                                     = 1,
	BackIdle                                 = 2,
	Steer                                    = 3,
	Drift                                    = 4,
	Item                                     = 5,
	Shunt                                    = 6,
	RoadReaction                             = 7,
	AnimMontage                              = 8,
	Spin                                     = 9,
	Num                                      = 10,
	EDriverAnimationState_MAX                = 11,
};

// Enum UNION.EDriverVoiceId
// NumValues: 0x0029
enum class EDriverVoiceId : uint8
{
	DashLv1                                  = 0,
	DashLv2                                  = 1,
	DashLv3                                  = 2,
	Spin                                     = 3,
	ContactRivalWin                          = 4,
	ContactRivalLose                         = 5,
	ContactWall                              = 6,
	StartDashLv1                             = 7,
	StartDashLv2                             = 8,
	StartDashLv3                             = 9,
	StartDashFailed                          = 10,
	Slipstream                               = 11,
	StuntFinished                            = 12,
	PackageRingGet                           = 13,
	ItemUseThrowing                          = 14,
	ItemDamage                               = 15,
	CourseObjectCollision                    = 16,
	TravelgateFix                            = 17,
	ItemUseInstallation                      = 18,
	ItemHit                                  = 19,
	CarOvertake                              = 20,
	UseMonstertruck                          = 21,
	UseSummon                                = 22,
	DamageMonstertruck                       = 23,
	DamageBodycut                            = 24,
	CourseOutFall                            = 25,
	CourseOutSlow                            = 26,
	Stunt01                                  = 27,
	Stunt02                                  = 28,
	LobbyStanp001                            = 29,
	LobbyStanp002                            = 30,
	LobbyStanp003                            = 31,
	LobbyStanp004                            = 32,
	LobbyStanp005                            = 33,
	LobbyStanp006                            = 34,
	LobbyStanp007                            = 35,
	LobbyStanp008                            = 36,
	MenuOperationLeave                       = 37,
	CharacterSelectFIX                       = 38,
	Num                                      = 39,
	EDriverVoiceId_MAX                       = 40,
};

// Enum UNION.EDroneState
// NumValues: 0x0007
enum class EDroneState : uint8
{
	StateHidden                              = 0,
	StateIn                                  = 1,
	StateOut                                 = 2,
	StateIdle                                = 3,
	StateIdleCaution                         = 4,
	StateInvalid                             = 5,
	EDroneState_MAX                          = 6,
};

// Enum UNION.EEtceteraSequenceMainState
// NumValues: 0x000E
enum class EEtceteraSequenceMainState : uint8
{
	Idle                                     = 0,
	EtceteraTop                              = 1,
	SelectMainMenu                           = 2,
	FullGameStore                            = 3,
	Option                                   = 42,
	Challenge                                = 51,
	SetHonor                                 = 52,
	Friendship                               = 53,
	Hint                                     = 54,
	Jukebox                                  = 55,
	DLC                                      = 56,
	Credit                                   = 57,
	Exit                                     = 58,
	EEtceteraSequenceMainState_MAX           = 59,
};

// Enum UNION.EEventInfoPeriodType
// NumValues: 0x000A
enum class EEventInfoPeriodType : uint8
{
	FestaPreNotice                           = 0,
	FestaOpen                                = 1,
	FestaRankingCalc                         = 2,
	FestaFinalResult                         = 3,
	LegendCompeOpen                          = 4,
	LegendCompeRankingCalc                   = 5,
	LegendCompeFinalResult                   = 6,
	Num                                      = 7,
	None                                     = 8,
	EEventInfoPeriodType_MAX                 = 9,
};

// Enum UNION.EEventInfomationType
// NumValues: 0x0006
enum class EEventInfomationType : uint8
{
	Festa                                    = 0,
	LegendCompe                              = 1,
	WorldMatch                               = 2,
	Num                                      = 3,
	None                                     = 4,
	EEventInfomationType_MAX                 = 5,
};

// Enum UNION.EEventInfoWidgetPageCategory
// NumValues: 0x0009
enum class EEventInfoWidgetPageCategory : uint8
{
	PointReward                              = 0,
	FinalResult                              = 1,
	WorldRanking                             = 2,
	FriendRanking                            = 3,
	OtherResult                              = 4,
	RaceRule                                 = 5,
	Num                                      = 6,
	None                                     = 7,
	EEventInfoWidgetPageCategory_MAX         = 8,
};

// Enum UNION.EFixed2ndLapStageId
// NumValues: 0x0003
enum class EFixed2ndLapStageId : uint8
{
	None                                     = 0,
	GrandPrixFirstPlay                       = 1,
	EFixed2ndLapStageId_MAX                  = 2,
};

// Enum UNION.ELobbySequencePriorityType
// NumValues: 0x0006
enum class ELobbySequencePriorityType : uint8
{
	NormalPriority                           = 0,
	SequencePriority                         = 1,
	DonpaScenePriority                       = 2,
	EtceteraScenePriority                    = 3,
	NoticeScenePriority                      = 4,
	ELobbySequencePriorityType_MAX           = 5,
};

// Enum UNION.EFriendListPopupWindowText
// NumValues: 0x000C
enum class EFriendListPopupWindowText : uint8
{
	WaitTitle                                = 0,
	WaitMessage                              = 1,
	InvitationWarningTitle                   = 2,
	InvitationWarningMessage                 = 3,
	OfflineAnnounceTitle                     = 4,
	OfflineAnnounceMessage                   = 5,
	CheckGotoOnlineTitle                     = 6,
	CheckGotoOnlineMessage                   = 7,
	CheckGotoOnlineButtonYesText             = 8,
	CheckGotoOnlineButtonNoText              = 9,
	Num                                      = 10,
	EFriendListPopupWindowText_MAX           = 11,
};

// Enum UNION.EGadgetCustomize2SequenceSubState
// NumValues: 0x0003
enum class EGadgetCustomize2SequenceSubState : uint8
{
	PresetEdit                               = 0,
	GadgetSelect                             = 1,
	EGadgetCustomize2SequenceSubState_MAX    = 2,
};

// Enum UNION.EGadgetCustomizeSelectMode
// NumValues: 0x0003
enum class EGadgetCustomizeSelectMode : uint8
{
	Preset                                   = 0,
	PresetAndGadget                          = 1,
	EGadgetCustomizeSelectMode_MAX           = 2,
};

// Enum UNION.EGadgetCustomizeSequenceState
// NumValues: 0x0009
enum class EGadgetCustomizeSequenceState : uint8
{
	Init                                     = 0,
	PartsSelect                              = 1,
	SlotSelect                               = 2,
	AttachMethodSelect                       = 3,
	GadgetSelect                             = 4,
	ChangeConfirm                            = 5,
	AttachComplete                           = 6,
	ChangeResult                             = 7,
	EGadgetCustomizeSequenceState_MAX        = 8,
};

// Enum UNION.EGarageChildSequenceId
// NumValues: 0x0003
enum class EGarageChildSequenceId : uint8
{
	MachineCustomize                         = 0,
	GadgetCustomize                          = 1,
	EGarageChildSequenceId_MAX               = 2,
};

// Enum UNION.EHintTopCategory
// NumValues: 0x0006
enum class EHintTopCategory : uint8
{
	EH_Tutorial                              = 0,
	EH_Tips                                  = 1,
	EH_Item                                  = 2,
	EH_Infomation                            = 3,
	Num                                      = 4,
	EHintTopCategory_MAX                     = 5,
};

// Enum UNION.PFControllerTypeUseHint
// NumValues: 0x0005
enum class EPFControllerTypeUseHint : uint8
{
	None                                     = 0,
	PSController                             = 1,
	XboxController                           = 2,
	SwitchController                         = 3,
	PFControllerTypeUseHint_MAX              = 4,
};

// Enum UNION.EHoldItemVisibility
// NumValues: 0x0005
enum class EHoldItemVisibility : uint8
{
	Visible                                  = 0,
	Hidden                                   = 1,
	ForceHidden                              = 2,
	Num                                      = 3,
	EHoldItemVisibility_MAX                  = 4,
};

// Enum UNION.EHoldItemPoolQuality
// NumValues: 0x0005
enum class EHoldItemPoolQuality : uint8
{
	High                                     = 0,
	Low                                      = 1,
	Default                                  = 2,
	Num                                      = 3,
	EHoldItemPoolQuality_MAX                 = 4,
};

// Enum UNION.EHoldItemCurveVectorAsset
// NumValues: 0x000B
enum class EHoldItemCurveVectorAsset : uint8
{
	InTranslation                            = 0,
	InRotation                               = 1,
	InScale                                  = 2,
	IdleTranslation                          = 3,
	IdleRotation                             = 4,
	IdleScale                                = 5,
	OutTranslation                           = 6,
	OutRotation                              = 7,
	OutScale                                 = 8,
	Num                                      = 9,
	EHoldItemCurveVectorAsset_MAX            = 10,
};

// Enum UNION.EHoldItemCurveType
// NumValues: 0x0005
enum class EHoldItemCurveType : uint8
{
	Translation                              = 0,
	Rotation                                 = 1,
	Scale                                    = 2,
	Num                                      = 3,
	EHoldItemCurveType_MAX                   = 4,
};

// Enum UNION.EHoldItemSTMSequence
// NumValues: 0x0006
enum class EHoldItemSTMSequence : uint8
{
	Invalid                                  = 0,
	In                                       = 1,
	Idle                                     = 2,
	Out                                      = 3,
	Num                                      = 4,
	EHoldItemSTMSequence_MAX                 = 5,
};

// Enum UNION.EHoverMachineEffectType
// NumValues: 0x0050
enum class EHoverMachineEffectType : uint8
{
	NS_Car_Muffler_Start_ChargeLoop          = 0,
	NS_Car_Muffler_BoostBurstLoop            = 1,
	NS_Car_Muffler_ChargeLoop                = 2,
	NS_Car_Muffler_BoostFailue               = 3,
	NS_Car_Muffler_ChargeBurst               = 4,
	NS_FX_Hover_AccelLoop01                  = 5,
	NS_FX_Hover_Vapour01                     = 6,
	NS_FX_Hover_Marker01                     = 7,
	NS_Car_Bottom_LightBurst                 = 8,
	NS_FX_Hover_Bottom_LightBurst            = 9,
	NS_FX_Hover_Bottom_Airflow01             = 10,
	NS_FX_Hover_Bottom_SparkBurst            = 11,
	NS_FX_Car_DashRipple01                   = 12,
	NS_FX_Car_DashRipple02                   = 13,
	NS_FX_Car_DashRipple03                   = 14,
	NS_FX_Car_DashRipple04                   = 15,
	NS_FX_Car_DashRipple05                   = 16,
	NS_FX_Plane_SonicBoom01                  = 17,
	NS_FX_Plane_SonicBoom02                  = 18,
	NS_FX_Plane_SonicBoom03                  = 19,
	NS_FX_Plane_SonicBoom04                  = 20,
	NS_FX_Plane_SonicBoom05                  = 21,
	NS_FX_Plane_Bottom_LightBurst            = 22,
	NS_FX_Plane_AfterBurnerLoop01            = 23,
	NS_FX_Plane_Flight_Vapour01              = 24,
	NS_FX_Plane_AccelLoop01                  = 25,
	NS_FX_Car_EngineStop01                   = 26,
	NS_FX_Hover_EngineStop01                 = 27,
	NS_FX_Car_GetRing01                      = 28,
	NS_FX_Car_SlipStream01                   = 29,
	NS_FX_Boat_RunWave01_Water               = 30,
	NS_FX_Boat_Landing01_Water               = 31,
	NS_FX_Cmn_Wall_Hit01                     = 32,
	NS_FX_Cource_AirFlow01                   = 33,
	NS_FX_Item_PackageRings_Get01            = 34,
	NS_FX_Item_PackageRings_Get02            = 35,
	NS_FX_Item_HomingPunch_Hit01             = 36,
	NS_FX_Item_WispWhite_Wind01              = 37,
	NS_FX_Item_WispWhite_Side01              = 38,
	NS_FX_Item_WispWhite_Center01            = 39,
	NS_FX_Car_Trick_Success01                = 40,
	NS_FX_Car_Trick_Success02                = 41,
	NS_FX_Car_Trick_Failure_InputLeft        = 42,
	NS_FX_Car_Trick_Failure_InputRight       = 43,
	NS_FX_Car_Trick_Failure_InputUp          = 44,
	NS_FX_Car_Trick_Failure_InputDown        = 45,
	NS_FX_MonsterTruck_ChangeStart01         = 46,
	NS_FX_MonsterTruck_ChangeEnd01           = 47,
	NS_FX_MonsterTruck_CarToBoat_Front_L_01  = 48,
	NS_FX_MonsterTruck_CarToPlane_Front_L_01 = 49,
	NS_FX_MonsterTruck_BoatToCar_Front_L_01  = 50,
	NS_FX_MonsterTruck_BoatToPlane_Front_L_01 = 51,
	NS_FX_MonsterTruck_PlaneToCar_Front_L_01 = 52,
	NS_FX_MonsterTruck_PlaneToBoat_Front_L_01 = 53,
	NS_FX_MonsterTruck_CarToBoat_Front_R_01  = 54,
	NS_FX_MonsterTruck_CarToPlane_Front_R_01 = 55,
	NS_FX_MonsterTruck_BoatToCar_Front_R_01  = 56,
	NS_FX_MonsterTruck_BoatToPlane_Front_R_01 = 57,
	NS_FX_MonsterTruck_PlaneToCar_Front_R_01 = 58,
	NS_FX_MonsterTruck_PlaneToBoat_Front_R_01 = 59,
	NS_FX_MonsterTruck_CarToBoat_Rear_L_01   = 60,
	NS_FX_MonsterTruck_CarToPlane_Rear_L_01  = 61,
	NS_FX_MonsterTruck_BoatToCar_Rear_L_01   = 62,
	NS_FX_MonsterTruck_BoatToPlane_Rear_L_01 = 63,
	NS_FX_MonsterTruck_PlaneToCar_Rear_L_01  = 64,
	NS_FX_MonsterTruck_PlaneToBoat_Rear_L_01 = 65,
	NS_FX_MonsterTruck_CarToBoat_Rear_R_01   = 66,
	NS_FX_MonsterTruck_CarToPlane_Rear_R_01  = 67,
	NS_FX_MonsterTruck_BoatToCar_Rear_R_01   = 68,
	NS_FX_MonsterTruck_BoatToPlane_Rear_R_01 = 69,
	NS_FX_MonsterTruck_PlaneToCar_Rear_R_01  = 70,
	NS_FX_MonsterTruck_PlaneToBoat_Rear_R_01 = 71,
	NS_FX_Car_Mini_ChangeStart01             = 72,
	NS_FX_Car_Mini_ChangeEnd01               = 73,
	NS_FX_Item_Cmn_Hit01                     = 74,
	NS_FX_Item_Cmn_Hit02                     = 75,
	NS_FX_Cmn_Car_Hit01                      = 76,
	NS_FX_Cmn_Obj_Hit01                      = 77,
	Num                                      = 78,
	EHoverMachineEffectType_MAX              = 79,
};

// Enum UNION.EItemDarkChaoPerfomanceType
// NumValues: 0x0004
enum class EItemDarkChaoPerfomanceType : uint8
{
	DarkchaoSteal                            = 0,
	HeroChaoGift                             = 1,
	DarkChaoGift                             = 2,
	EItemDarkChaoPerfomanceType_MAX          = 3,
};

// Enum UNION.EMachineFormOffsetTarget
// NumValues: 0x0004
enum class EMachineFormOffsetTarget : uint32
{
	Root                                     = 0,
	RingRoot                                 = 1,
	ChildActor                               = 2,
	EMachineFormOffsetTarget_MAX             = 3,
};

// Enum UNION.ELobbySequenceP2PConnectionLocalState
// NumValues: 0x0006
enum class ELobbySequenceP2PConnectionLocalState : uint8
{
	Idle                                     = 0,
	WaitMatching                             = 1,
	WaitUpdateLobbySettings                  = 2,
	Exit                                     = 3,
	Error                                    = 4,
	ELobbySequenceP2PConnectionLocalState_MAX = 5,
};

// Enum UNION.EMachineAnimationMontageAssetId
// NumValues: 0x0020
enum class EMachineAnimationMontageAssetId : uint8
{
	None                                     = 0,
	TrickFlipLeft                            = 1,
	TrickFlipLeftSeatLock                    = 2,
	TrickFlipRight                           = 3,
	TrickFlipRightSeatLock                   = 4,
	TrickFlipFront                           = 5,
	TrickFlipFrontSeatLock                   = 6,
	TrickFlipBack                            = 7,
	TrickFlipBackSeatLock                    = 8,
	TrickSpinLeft                            = 9,
	TrickSpinLeftSeatLock                    = 10,
	TrickSpinRight                           = 11,
	TrickSpinRightSeatLock                   = 12,
	TrickCorkscrewLeft                       = 13,
	TrickCorkscrewLeftSeatLock               = 14,
	TrickCorkscrewRight                      = 15,
	TrickCorkscrewRightSeatLock              = 16,
	ScrewDashLeft                            = 17,
	ScrewDashRight                           = 18,
	SpinLeft                                 = 19,
	SpinRight                                = 20,
	Squash                                   = 21,
	AnchorStart                              = 22,
	AnchorEnd                                = 23,
	AnotherSelectLeft                        = 24,
	AnotherSelectRight                       = 25,
	PlaneSpinLeft                            = 26,
	PlaneSpinRight                           = 27,
	MagnetDamageLeft                         = 28,
	MagnetDamageRight                        = 29,
	Num                                      = 30,
	EMachineAnimationMontageAssetId_MAX      = 31,
};

// Enum UNION.EMachineAnimState
// NumValues: 0x0004
enum class EMachineAnimState : uint8
{
	Normal                                   = 0,
	BodyCut                                  = 1,
	Anchor                                   = 2,
	EMachineAnimState_MAX                    = 3,
};

// Enum UNION.EMachineCustomizeTabWindowPageID
// NumValues: 0x000B
enum class EMachineCustomizeTabWindowPageID : uint8
{
	MachineCustomizePartsSelect              = 0,
	ColorSelectPreset                        = 1,
	ColorSelectArea                          = 2,
	ColorSelectDetail                        = 3,
	SlotSelectPage                           = 4,
	StickerSlotSelect                        = 5,
	StickerSelect                            = 6,
	StickerApply                             = 7,
	HornSelect                               = 8,
	AuraSelect                               = 9,
	EMachineCustomizeTabWindowPageID_MAX     = 10,
};

// Enum UNION.EMachineCustomizeSequenceState
// NumValues: 0x000D
enum class EMachineCustomizeSequenceState : uint8
{
	Init                                     = 0,
	Save                                     = 1,
	MachineSelect                            = 2,
	PartsSelect                              = 3,
	ColorPresetSelect                        = 4,
	ColorAreaSelect                          = 5,
	ColorDetail                              = 6,
	StickerSlotSelect                        = 7,
	StickerSelect                            = 8,
	StickerApply                             = 9,
	HornSelect                               = 10,
	AuraSelect                               = 11,
	EMachineCustomizeSequenceState_MAX       = 12,
};

// Enum UNION.EGadgetPlateFromState
// NumValues: 0x0005
enum class EGadgetPlateFromState : uint8
{
	NONE                                     = 0,
	Result                                   = 1,
	Pause                                    = 2,
	EndMenu                                  = 3,
	EGadgetPlateFromState_MAX                = 4,
};

// Enum UNION.EStickerState
// NumValues: 0x0004
enum class EStickerState : uint8
{
	Selectable                               = 0,
	Unpurchased                              = 1,
	Locked                                   = 2,
	EStickerState_MAX                        = 3,
};

// Enum UNION.EMachineColorAreaUIId
// NumValues: 0x000B
enum class EMachineColorAreaUIId : uint8
{
	BodyMain                                 = 0,
	BodySub                                  = 1,
	BodyAccent                               = 2,
	TireMain                                 = 3,
	TireSub                                  = 4,
	TireAccent                               = 5,
	CockpitMain                              = 6,
	CockpitSub                               = 7,
	CockpitAccent                            = 8,
	Glow                                     = 9,
	EMachineColorAreaUIId_MAX                = 10,
};

// Enum UNION.EMachineFRLR
// NumValues: 0x0006
enum class EMachineFRLR : uint8
{
	FL                                       = 0,
	FR                                       = 1,
	RL                                       = 2,
	RR                                       = 3,
	Num                                      = 4,
	EMachineFRLR_MAX                         = 5,
};

// Enum UNION.EMachineFR
// NumValues: 0x0004
enum class EMachineFR : uint8
{
	FRONT                                    = 0,
	REAR                                     = 1,
	Num                                      = 2,
	EMachineFR_MAX                           = 3,
};

// Enum UNION.EMachineLR
// NumValues: 0x0004
enum class EMachineLR : uint8
{
	LEFT                                     = 0,
	RIGHT                                    = 1,
	Num                                      = 2,
	EMachineLR_MAX                           = 3,
};

// Enum UNION.EMachineEffectType
// NumValues: 0x005E
enum class EMachineEffectType : uint8
{
	NS_Car_Muffler_Start_ChargeLoop          = 0,
	NS_Car_Muffler_BoostBurstLoop            = 1,
	NS_Car_Muffler_ChargeLoop                = 2,
	NS_Car_Muffler_BoostFailue               = 3,
	NS_Car_Muffler_ChargeBurst               = 4,
	NS_Car_Bottom_LightBurst                 = 5,
	NS_Car_Bottom_SparkBurst                 = 6,
	NS_FX_Car_DashRipple                     = 7,
	NS_FX_Plane_DashRipple                   = 8,
	NS_FX_Plane_SonicBoom                    = 9,
	NS_FX_Plane_Bottom_LightBurst            = 10,
	NS_FX_Plane_AfterBurnerLoop01            = 11,
	NS_FX_Plane_AccelLoop01                  = 12,
	NS_FX_Car_EngineStop01                   = 13,
	NS_FX_Car_GetRing01                      = 14,
	NS_FX_Car_SlipStream01                   = 15,
	NS_FX_Boat_RunWave01_Water               = 16,
	NS_FX_Boat_Landing01_Water               = 17,
	NS_FX_Cmn_Wall_Hit01                     = 18,
	NS_FX_Cource_AirFlow01                   = 19,
	NS_FX_Trans_CarToBoat                    = 20,
	NS_FX_Trans_CarToPlane                   = 21,
	NS_FX_Trans_BoatToCar                    = 22,
	NS_FX_Trans_BoatToPlane                  = 23,
	NS_FX_Trans_PlaneToCar                   = 24,
	NS_FX_Trans_PlaneToBoat                  = 25,
	NS_FX_Trans_CarToBoat_Rear_L_01          = 26,
	NS_FX_Trans_CarToBoat_Rear_R_01          = 27,
	NS_FX_Trans_CarToPlane_Rear_L_01         = 28,
	NS_FX_Trans_CarToPlane_Rear_R_01         = 29,
	NS_FX_Trans_BoatToCar_Rear_L_01          = 30,
	NS_FX_Trans_BoatToCar_Rear_R_01          = 31,
	NS_FX_Trans_BoatToPlane_Rear_L_01        = 32,
	NS_FX_Trans_BoatToPlane_Rear_R_01        = 33,
	NS_FX_Trans_PlaneToCar_Rear_L_01         = 34,
	NS_FX_Trans_PlaneToCar_Rear_R_01         = 35,
	NS_FX_Trans_PlaneToBoat_Rear_L_01        = 36,
	NS_FX_Trans_PlaneToBoat_Rear_R_01        = 37,
	NS_FX_Item_PackageRings_Get01            = 38,
	NS_FX_Item_PackageRings_Get02            = 39,
	NS_FX_Item_HomingPunch_Hit01             = 40,
	NS_FX_Item_RocketPunch_Hit01             = 41,
	NS_FX_Item_WispWhite_Wind01              = 42,
	NS_FX_Item_WispWhite_Boost01             = 43,
	NS_FX_Item_WispViolet_Aura01             = 44,
	NS_FX_Item_WispViolet_End01              = 45,
	NS_FX_Car_TravelRing_Spark01             = 46,
	NS_FX_Car_Trick_Success01                = 47,
	NS_FX_Car_Trick_Success02                = 48,
	NS_FX_Car_Trick_Glitter_Loop01           = 49,
	NS_FX_Car_Trick_Failure_InputLeft        = 50,
	NS_FX_Car_Trick_Failure_InputRight       = 51,
	NS_FX_Car_Trick_Failure_InputUp          = 52,
	NS_FX_Car_Trick_Failure_InputDown        = 53,
	NS_FX_MonsterTruck_ChangeStart01         = 54,
	NS_FX_MonsterTruck_ChangeEnd01           = 55,
	NS_FX_Car_Mini_ChangeStart01             = 56,
	NS_FX_Car_Mini_ChangeEnd01               = 57,
	NS_FX_Item_Cmn_Hit01                     = 58,
	NS_FX_Item_Cmn_Hit02                     = 59,
	NS_FX_Cmn_Car_Hit01                      = 60,
	NS_FX_Trans_ToBoat_Top01                 = 61,
	NS_FX_Trans_ToCar_Top01                  = 62,
	NS_FX_Trans_ToPlane_Top01                = 63,
	NS_FX_Cmn_Obj_Hit01                      = 64,
	NS_FX_Hover_AccelLoop01                  = 65,
	NS_FX_Hover_Vapour01                     = 66,
	NS_FX_Hover_Marker01                     = 67,
	NS_Car_Tire_SparkLoop                    = 68,
	NS_Car_Tire_SparkBurst                   = 69,
	NS_FX_Item_Bodycut_Hit01                 = 70,
	NS_FX_Item_Bodycut_Recovery01            = 71,
	NS_FX_Item_BodyCut_CutSurface01          = 72,
	NS_FX_Car_GetRing_Boost01                = 73,
	NS_FX_Item_WarpRing_Attack01             = 74,
	NS_FX_Item_Shield_Start01                = 75,
	NS_FX_Item_Shield_End01                  = 76,
	NS_FX_Car_Enter_BoatArea                 = 77,
	NS_FX_Car_RunOff_Disable                 = 78,
	NS_FX_Hover_AquaUnit                     = 79,
	NS_FX_Hover_FlightUnit                   = 80,
	NS_FX_Car_ChargeDown01                   = 81,
	NS_FX_Cmn_RingBoost_Charge               = 82,
	NS_FX_Cmn_RingBoost                      = 83,
	NS_FX_Gadget_PartnerDash_01              = 84,
	NS_FX_Gadget_CrashDash_01                = 85,
	NS_FX_Car_GetRedStarRing01               = 86,
	NS_FX_Surface_Slide                      = 87,
	NS_FX_Plane_BarrelRoll                   = 88,
	NS_FX_GroupEnergyBoost_Boost             = 89,
	NS_FX_GroupEnergyBoost_Wind              = 90,
	NS_FX_GroupEnergyBoost_Charge            = 91,
	Num                                      = 92,
	EMachineEffectType_MAX                   = 93,
};

// Enum UNION.EMachineEffectVisibleType
// NumValues: 0x0004
enum class EMachineEffectVisibleType : uint8
{
	LocalPlayerOnly                          = 0,
	SelfOnly                                 = 1,
	Always                                   = 2,
	EMachineEffectVisibleType_MAX            = 3,
};

// Enum UNION.EMachineTrickType
// NumValues: 0x000A
enum class EMachineTrickType : uint8
{
	None                                     = 0,
	FlipLeft                                 = 1,
	FlipRight                                = 2,
	FlipFront                                = 4,
	FlipBack                                 = 8,
	SpinLeft                                 = 16,
	SpinRight                                = 32,
	CorkscrewLeft                            = 64,
	CorkscrewRight                           = 128,
	EMachineTrickType_MAX                    = 129,
};

// Enum UNION.EUnionRunEffectType
// NumValues: 0x0007
enum class EUnionRunEffectType : uint8
{
	Hide                                     = 0,
	Idle                                     = 1,
	Run                                      = 2,
	DriftLeft                                = 3,
	DriftRight                               = 4,
	Back                                     = 5,
	EUnionRunEffectType_MAX                  = 6,
};

// Enum UNION.EUnionExtraSurfaceEffectType
// NumValues: 0x0003
enum class EUnionExtraSurfaceEffectType : uint8
{
	None                                     = 0,
	TravelRingFollowingBoost                 = 1,
	EUnionExtraSurfaceEffectType_MAX         = 2,
};

// Enum UNION.EMachinePartsSize
// NumValues: 0x0004
enum class EMachinePartsSize : uint8
{
	S                                        = 0,
	L                                        = 1,
	Num                                      = 2,
	EMachinePartsSize_MAX                    = 3,
};

// Enum UNION.ETireMarkSize
// NumValues: 0x0006
enum class ETireMarkSize : uint8
{
	S                                        = 0,
	M                                        = 1,
	L                                        = 2,
	LL                                       = 3,
	Num                                      = 4,
	ETireMarkSize_MAX                        = 5,
};

// Enum UNION.ETireMarkStatusType
// NumValues: 0x0006
enum class ETireMarkStatusType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Slime                                    = 2,
	GimmickPaint                             = 3,
	Num                                      = 4,
	ETireMarkStatusType_MAX                  = 5,
};

// Enum UNION.EMachineCockpitMaterialArea
// NumValues: 0x0008
enum class EMachineCockpitMaterialArea : uint8
{
	Cockpit                                  = 0,
	CockpitVisible                           = 1,
	CockpitBoatFrontUnit                     = 2,
	CockpitBoatRearUnit                      = 3,
	CockpitFlightFrontUnit                   = 4,
	CockpitFlightRearUnit                    = 5,
	Num                                      = 6,
	EMachineCockpitMaterialArea_MAX          = 7,
};

// Enum UNION.EMachineBodyMaterialArea
// NumValues: 0x000F
enum class EMachineBodyMaterialArea : uint8
{
	BodyFront                                = 0,
	BodyFrontSub                             = 1,
	BodyFrontCockpit                         = 2,
	BodyFrontNoColorChange                   = 3,
	BodyRear                                 = 4,
	BodyRearSub                              = 5,
	BodyRearCockpit                          = 6,
	BodyRearNoColorChange                    = 7,
	BodySide                                 = 8,
	BodySideSub                              = 9,
	BodySideVisible                          = 10,
	BodySideNoColorChange                    = 11,
	BodySideNoColorChangeVisible             = 12,
	Num                                      = 13,
	EMachineBodyMaterialArea_MAX             = 14,
};

// Enum UNION.ECockpitMode
// NumValues: 0x0005
enum class ECockpitMode : uint8
{
	None                                     = 0,
	Race                                     = 1,
	Menu                                     = 2,
	Lobby                                    = 3,
	ECockpitMode_MAX                         = 4,
};

// Enum UNION.EMachineColorArea
// NumValues: 0x0004
enum class EMachineColorArea : uint8
{
	Area1                                    = 0,
	Area2                                    = 1,
	Area3                                    = 2,
	EMachineColorArea_MAX                    = 3,
};

// Enum UNION.EMachineColorPresetType
// NumValues: 0x0005
enum class EMachineColorPresetType : uint8
{
	Character                                = 0,
	Machine                                  = 1,
	DLCCharacter                             = 2,
	GroupRacePreset                          = 3,
	EMachineColorPresetType_MAX              = 4,
};

// Enum UNION.EMachineMeshEffectType
// NumValues: 0x000A
enum class EMachineMeshEffectType : uint8
{
	NS_Car_Muffler_ChargeLoop                = 0,
	NS_Car_Muffler_ChargeBurst               = 1,
	NS_Car_Muffler_BoostBurstLoop            = 2,
	NS_Car_Muffler_BoostBurstLoop_1s         = 3,
	NS_FX_Car_GetRing01                      = 4,
	NS_FX_Car_GetRing01_SpeedUp              = 5,
	NS_FX_Car_GetRing_Boost01                = 6,
	NS_FX_Car_GetRing_Boost01_RingMax        = 7,
	Num                                      = 8,
	EMachineMeshEffectType_MAX               = 9,
};

// Enum UNION.SaveLoadResult
// NumValues: 0x0003
enum class ESaveLoadResult : uint8
{
	Success                                  = 0,
	Failure                                  = 1,
	SaveLoadResult_MAX                       = 2,
};

// Enum UNION.EOptionWindowAnimState
// NumValues: 0x0005
enum class EOptionWindowAnimState : uint8
{
	None                                     = 0,
	Open                                     = 1,
	Loop                                     = 2,
	Close                                    = 3,
	EOptionWindowAnimState_MAX               = 4,
};

// Enum UNION.EMatchingSequenceState
// NumValues: 0x0004
enum class EMatchingSequenceState : uint8
{
	Idle                                     = 0,
	Matching                                 = 19,
	Exit                                     = 72,
	EMatchingSequenceState_MAX               = 73,
};

// Enum UNION.EMatchingLocalState
// NumValues: 0x001A
enum class EMatchingLocalState : uint8
{
	JoinOrCreateLobby                        = 0,
	WaitMatching                             = 1,
	WaitUpdateLobbySettings                  = 2,
	WaitAsyncP2PConnectionComplete           = 3,
	HostAsyncP2PComplete                     = 4,
	NotificationClientAsyncP2PEnd            = 5,
	WaitHostConnection                       = 6,
	WaitHostConnectionSequential             = 7,
	WaitClientConnectionConcurrent           = 8,
	RequestClientP2P                         = 9,
	WaitClientConnection                     = 10,
	StartClientP2P                           = 11,
	StartClientP2PSequential                 = 12,
	WaitClientP2P                            = 13,
	WaitClientP2PSequential                  = 14,
	CompleteClientP2PSequential              = 15,
	WaitAllConnection                        = 16,
	StartOnlineRace                          = 17,
	PreRace                                  = 18,
	PreRaceFinished                          = 19,
	EndPreRace                               = 20,
	Exit                                     = 21,
	Error                                    = 22,
	ResendError                              = 23,
	ClientP2PStartError                      = 24,
	EMatchingLocalState_MAX                  = 25,
};

// Enum UNION.EMenuRacerType
// NumValues: 0x0003
enum class EMenuRacerType : uint8
{
	Preview                                  = 0,
	Lobby                                    = 1,
	EMenuRacerType_MAX                       = 2,
};

// Enum UNION.EMenuSequenceBGM
// NumValues: 0x0016
enum class EMenuSequenceBGM : uint8
{
	None                                     = 0,
	BGM_TITLE_01                             = 1,
	BGM_TITLE_02                             = 2,
	BGM_TOP_MENU                             = 3,
	BGM_PARTYRACE_01                         = 4,
	BGM_PARTYRACE_02                         = 5,
	BGM_LOBBY_01                             = 6,
	BGM_LOBBY_02                             = 7,
	BGM_GARAGE_01                            = 8,
	BGM_GRANDPRIX_01                         = 9,
	BGM_GRANDPRIX_02                         = 10,
	BGM_GRANDPRIX_03                         = 11,
	BGM_GRANDPRIX_04                         = 12,
	BGM_StagePreview                         = 13,
	BGM_TIMETRIAL_01                         = 14,
	BGM_LOBBY_FESTA                          = 15,
	BGM_LEGENDCOMPE_01                       = 16,
	BGM_LOBBY_FRIEND                         = 17,
	BGM_ENDING_01                            = 18,
	BGM_ENDING_02                            = 19,
	BGM_FRIENDSHIP_01                        = 20,
	EMenuSequenceBGM_MAX                     = 21,
};

// Enum UNION.EMonsterTruckMaterialType
// NumValues: 0x0004
enum class EMonsterTruckMaterialType : uint8
{
	Default                                  = 0,
	Unlit                                    = 1,
	Num                                      = 2,
	EMonsterTruckMaterialType_MAX            = 3,
};

// Enum UNION.EPlayerInfoSubWindowErrorType
// NumValues: 0x000B
enum class EPlayerInfoSubWindowErrorType : uint8
{
	Unknown                                  = 0,
	NotExistsLobbyPlayer                     = 1,
	NotAddBlockedPlayerOverLimit             = 2,
	NotAddBlockedPlayer                      = 3,
	FriendAlready                            = 4,
	FriendRequestAlready                     = 5,
	FriendListMaxTarget                      = 6,
	FriendListMax                            = 7,
	FriendAcceptAlready                      = 8,
	Num                                      = 9,
	EPlayerInfoSubWindowErrorType_MAX        = 10,
};

// Enum UNION.EOnlineGameMode
// NumValues: 0x0006
enum class EOnlineGameMode : uint8
{
	None                                     = 0,
	RankMatch                                = 1,
	FriendMatch                              = 2,
	Festa                                    = 3,
	Legend                                   = 4,
	Max                                      = 5,
};

// Enum UNION.ECellIndicatorColor
// NumValues: 0x0007
enum class ECellIndicatorColor : uint8
{
	Deactive                                 = 0,
	Active                                   = 1,
	Player1                                  = 2,
	Player2                                  = 3,
	Player3                                  = 4,
	Player4                                  = 5,
	ECellIndicatorColor_MAX                  = 6,
};

// Enum UNION.EOptionSequenceMainState
// NumValues: 0x0010
enum class EOptionSequenceMainState : uint8
{
	Invalid                                  = 0,
	GameSettings                             = 42,
	Challenge                                = 51,
	SetHonor                                 = 52,
	BEGIN_OFFSET                             = 72,
	Idle                                     = 73,
	OptionTop                                = 74,
	SelectMainOption                         = 75,
	Friendship                               = 76,
	Hint                                     = 77,
	Jukebox                                  = 78,
	DLC                                      = 79,
	Credit                                   = 80,
	Credit2                                  = 81,
	Exit                                     = 82,
	EOptionSequenceMainState_MAX             = 83,
};

// Enum UNION.EGameSettingsSequenceState
// NumValues: 0x0006
enum class EGameSettingsSequenceState : uint8
{
	GameSettingsTop                          = 0,
	GameGeneralSettings                      = 1,
	GraphicsSettings                         = 2,
	InputAssignSettings                      = 3,
	Exit                                     = 4,
	EGameSettingsSequenceState_MAX           = 5,
};

// Enum UNION.EOptionTabButtonType
// NumValues: 0x0008
enum class EOptionTabButtonType : uint8
{
	Race                                     = 0,
	Control                                  = 1,
	Language                                 = 2,
	Graphics                                 = 3,
	Audio                                    = 4,
	Arrow                                    = 5,
	Online                                   = 6,
	EOptionTabButtonType_MAX                 = 7,
};

// Enum UNION.EOptionCellType
// NumValues: 0x0005
enum class EOptionCellType : uint8
{
	Indicator                                = 0,
	Button                                   = 1,
	Gauge                                    = 2,
	SubCategory                              = 3,
	EOptionCellType_MAX                      = 4,
};

// Enum UNION.EKeyConfigSettingState
// NumValues: 0x0004
enum class EKeyConfigSettingState : uint8
{
	Select                                   = 0,
	KeySetting                               = 1,
	Disable                                  = 2,
	EKeyConfigSettingState_MAX               = 3,
};

// Enum UNION.EOptionTabButtonState
// NumValues: 0x0004
enum class EOptionTabButtonState : uint8
{
	Active                                   = 0,
	Select                                   = 1,
	NonActive                                = 2,
	EOptionTabButtonState_MAX                = 3,
};

// Enum UNION.EOptionTopWindow
// NumValues: 0x0004
enum class EOptionTopWindow : uint8
{
	Main                                     = 0,
	Brightness                               = 1,
	KeyConfig                                = 2,
	EOptionTopWindow_MAX                     = 3,
};

// Enum UNION.EPartyRaceCourseSwitchState
// NumValues: 0x0005
enum class EPartyRaceCourseSwitchState : uint8
{
	ON                                       = 0,
	OFF                                      = 1,
	Unreleased                               = 2,
	Num                                      = 3,
	EPartyRaceCourseSwitchState_MAX          = 4,
};

// Enum UNION.EPartyRaceCourseSwitchTag
// NumValues: 0x0004
enum class EPartyRaceCourseSwitchTag : uint8
{
	AnotherWorld                             = 0,
	MainCourse                               = 1,
	Num                                      = 2,
	EPartyRaceCourseSwitchTag_MAX            = 3,
};

// Enum UNION.EPartyRaceCourseSwitchBtnType
// NumValues: 0x0006
enum class EPartyRaceCourseSwitchBtnType : uint8
{
	MainIcon                                 = 0,
	AllOn                                    = 1,
	AllOff                                   = 2,
	Ok                                       = 3,
	Num                                      = 4,
	EPartyRaceCourseSwitchBtnType_MAX        = 5,
};

// Enum UNION.EPartyRaceCourseSwitchWindowButton
// NumValues: 0x0004
enum class EPartyRaceCourseSwitchWindowButton : uint8
{
	RANDOM                                   = 0,
	ALL_ON                                   = 1,
	ALL_OFF                                  = 2,
	EPartyRaceCourseSwitchWindowButton_MAX   = 3,
};

// Enum UNION.EPartyRaceItemSwitchState
// NumValues: 0x0009
enum class EPartyRaceItemSwitchState : uint8
{
	BOTH_ON                                  = 0,
	BOTH_OFF                                 = 1,
	ONLY_GROUPE_0                            = 2,
	ONLY_GROUPE_1                            = 3,
	ONLY_GROUPE_2                            = 4,
	EX_GROUPE_0_1                            = 5,
	EX_GROUPE_0_2                            = 6,
	EX_GROUPE_1_2                            = 7,
	EPartyRaceItemSwitchState_MAX            = 8,
};

// Enum UNION.EPartyRaceItemSwitchWindowButton
// NumValues: 0x0004
enum class EPartyRaceItemSwitchWindowButton : uint8
{
	RANDOM                                   = 0,
	ALL_ON                                   = 1,
	ALL_OFF                                  = 2,
	EPartyRaceItemSwitchWindowButton_MAX     = 3,
};

// Enum UNION.EPartyRaceTutorial
// NumValues: 0x0002
enum class EPartyRaceTutorial : uint8
{
	First                                    = 0,
	EPartyRaceTutorial_MAX                   = 1,
};

// Enum UNION.EPartyRaceConfirmButton
// NumValues: 0x0005
enum class EPartyRaceConfirmButton : uint8
{
	ItemSwitch                               = 0,
	RaceSetting                              = 1,
	CourseSwitch                             = 2,
	OKButton                                 = 3,
	EPartyRaceConfirmButton_MAX              = 4,
};

// Enum UNION.EPerformRivalInteractionType
// NumValues: 0x0007
enum class EPerformRivalInteractionType : uint8
{
	Taunt                                    = 0,
	Annoyed                                  = 1,
	Confidence                               = 2,
	Unique                                   = 3,
	Num                                      = 4,
	None                                     = 255,
	EPerformRivalInteractionType_MAX         = 256,
};

// Enum UNION.EPerformRivalMode
// NumValues: 0x0004
enum class EPerformRivalMode : uint8
{
	PerformFirst                             = 0,
	PerformFinal                             = 1,
	PerformFirstSolo                         = 2,
	EPerformRivalMode_MAX                    = 3,
};

// Enum UNION.EPreRaceSequenceState
// NumValues: 0x000A
enum class EPreRaceSequenceState : uint8
{
	Idle                                     = 0,
	CheckLobbyMember                         = 1,
	COMDataSync                              = 2,
	Measurement                              = 3,
	HostMigration                            = 4,
	Exit                                     = 5,
	WaitP2PConnection                        = 6,
	ErrorWindow                              = 7,
	NetworkCleanup                           = 8,
	EPreRaceSequenceState_MAX                = 9,
};

// Enum UNION.EPreRaceSeqCOMSyncLocalState
// NumValues: 0x0006
enum class EPreRaceSeqCOMSyncLocalState : uint8
{
	Idle                                     = 0,
	Init                                     = 1,
	StartCOMDataSync                         = 2,
	WaitCOMDataSync                          = 3,
	Exit                                     = 4,
	EPreRaceSeqCOMSyncLocalState_MAX         = 5,
};

// Enum UNION.EStageCourseMapInfo
// NumValues: 0x0004
enum class EStageCourseMapInfo : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	FinalLap                                 = 2,
	EStageCourseMapInfo_MAX                  = 3,
};

// Enum UNION.EStageCourseMainSubMapInfo
// NumValues: 0x0007
enum class EStageCourseMainSubMapInfo : uint8
{
	Normal0                                  = 0,
	Normal1                                  = 1,
	Normal2                                  = 2,
	Final0                                   = 3,
	Final1                                   = 4,
	Final2                                   = 5,
	EStageCourseMainSubMapInfo_MAX           = 6,
};

// Enum UNION.EPrivateMatchRuleSettingState
// NumValues: 0x0007
enum class EPrivateMatchRuleSettingState : uint8
{
	Idle                                     = 0,
	SelectPartyRacePreset                    = 10,
	SelectClass                              = 1,
	SettingPartyRace                         = 11,
	RivalTeamSelect                          = 14,
	Exit                                     = 15,
	EPrivateMatchRuleSettingState_MAX        = 16,
};

// Enum UNION.EPrivateMatchGroupSettingState
// NumValues: 0x0005
enum class EPrivateMatchGroupSettingState : uint8
{
	Idle                                     = 0,
	SelectGroupPartyRace                     = 13,
	SettingComplete                          = 14,
	Exit                                     = 15,
	EPrivateMatchGroupSettingState_MAX       = 16,
};

// Enum UNION.EProcessLobbyWaitingCallbackState
// NumValues: 0x0005
enum class EProcessLobbyWaitingCallbackState : uint8
{
	NotWaiting                               = 0,
	WaitingForCallback                       = 1,
	CallbackSuccess                          = 2,
	CallbackFail                             = 3,
	EProcessLobbyWaitingCallbackState_MAX    = 4,
};

// Enum UNION.ERaceCameraMode
// NumValues: 0x0006
enum class ERaceCameraMode : uint8
{
	NOT_USED                                 = 0,
	RESULT_CAMERA                            = 1,
	RIVAL_CAMERA                             = 2,
	REPLAY_CAMERA                            = 3,
	NUM                                      = 4,
	ERaceCameraMode_MAX                      = 5,
};

// Enum UNION.EResultCameraState
// NumValues: 0x0006
enum class EResultCameraState : uint8
{
	START_UP                                 = 0,
	PRODUCTION_PLAY                          = 1,
	PRODUCTION_SWITCH                        = 2,
	PAUSE                                    = 3,
	NUM                                      = 4,
	EResultCameraState_MAX                   = 5,
};

// Enum UNION.ERivalCameraState
// NumValues: 0x0005
enum class ERivalCameraState : uint8
{
	START_UP                                 = 0,
	PRODUCTION_PLAY                          = 1,
	PAUSE                                    = 2,
	NUM                                      = 3,
	ERivalCameraState_MAX                    = 4,
};

// Enum UNION.EReplayCameraState
// NumValues: 0x0006
enum class EReplayCameraState : uint8
{
	START_UP                                 = 0,
	PLAY_RACE_CAMERA                         = 1,
	PLAY_FREE_CAMERA                         = 2,
	PAUSE                                    = 3,
	NUM                                      = 4,
	EReplayCameraState_MAX                   = 5,
};

// Enum UNION.ERaceCeremonySequenceState
// NumValues: 0x0005
enum class ERaceCeremonySequenceState : uint8
{
	Idle                                     = 0,
	Ceremony                                 = 1,
	AfterCeremonyEvent                       = 2,
	Exit                                     = 3,
	ERaceCeremonySequenceState_MAX           = 4,
};

// Enum UNION.ERaceCeremonySequenceExitCode
// NumValues: 0x0003
enum class ERaceCeremonySequenceExitCode : uint8
{
	End                                      = 0,
	ToEnding                                 = 1,
	ERaceCeremonySequenceExitCode_MAX        = 2,
};

// Enum UNION.ERaceEndingSequenceState
// NumValues: 0x0005
enum class ERaceEndingSequenceState : uint8
{
	Idle                                     = 0,
	Ending                                   = 1,
	AfterEndingEvent                         = 2,
	Exit                                     = 3,
	ERaceEndingSequenceState_MAX             = 4,
};

// Enum UNION.ERaceEndMenuItem
// NumValues: 0x0006
enum class ERaceEndMenuItem : uint8
{
	Retry                                    = 0,
	End                                      = 1,
	Replay                                   = 2,
	Ceremony                                 = 3,
	Garage                                   = 4,
	ERaceEndMenuItem_MAX                     = 5,
};

// Enum UNION.ERaceEndMenuSequenceState
// NumValues: 0x0009
enum class ERaceEndMenuSequenceState : uint8
{
	Idle                                     = 0,
	CheckLobbyInvite                         = 1,
	Select                                   = 2,
	UserReport                               = 3,
	Waiting                                  = 4,
	ShowPopup                                = 5,
	QuitPublicLobby                          = 6,
	Exit                                     = 7,
	ERaceEndMenuSequenceState_MAX            = 8,
};

// Enum UNION.ERaceEndMenuSequenceExitCode
// NumValues: 0x0008
enum class ERaceEndMenuSequenceExitCode : uint8
{
	Restart                                  = 0,
	TopMenu                                  = 1,
	Replay                                   = 2,
	Ceremony                                 = 3,
	RivalResult                              = 4,
	Garage                                   = 5,
	GadgetPlate                              = 6,
	ERaceEndMenuSequenceExitCode_MAX         = 7,
};

// Enum UNION.ERaceEndMenuUserReportPopupType
// NumValues: 0x0004
enum class ERaceEndMenuUserReportPopupType : uint8
{
	Invalid                                  = 0,
	Completed                                = 1,
	Restricted                               = 2,
	ERaceEndMenuUserReportPopupType_MAX      = 3,
};

// Enum UNION.ERaceEndMenuUserReportTypeId
// NumValues: 0x000A
enum class ERaceEndMenuUserReportTypeId : uint8
{
	Invalid                                  = 0,
	InappropriatePlayerMame                  = 1,
	IntentionalDisconnection                 = 2,
	AFK                                      = 3,
	MaliciousUseOfBugs                       = 4,
	AbnormalSpeedOrRank                      = 5,
	AbnormalItemUse                          = 6,
	OtherCheatsOrMods                        = 7,
	Num                                      = 8,
	ERaceEndMenuUserReportTypeId_MAX         = 9,
};

// Enum UNION.ERaceErrorHandlingState
// NumValues: 0x0007
enum class ERaceErrorHandlingState : uint8
{
	Idle                                     = 0,
	AddFairPoint                             = 1,
	QuitLobby                                = 2,
	Handling                                 = 3,
	EOSLogout                                = 4,
	Exit                                     = 5,
	ERaceErrorHandlingState_MAX              = 6,
};

// Enum UNION.ERaceGadgetPlateSequenceState
// NumValues: 0x0003
enum class ERaceGadgetPlateSequenceState : uint8
{
	Idle                                     = 0,
	Exit                                     = 1,
	ERaceGadgetPlateSequenceState_MAX        = 2,
};

// Enum UNION.ERacePauseMenuItem
// NumValues: 0x000D
enum class ERacePauseMenuItem : uint8
{
	Continue                                 = 0,
	Restart                                  = 1,
	HandleAssist                             = 2,
	AcceleratorAssist                        = 3,
	AerialTrickAssist                        = 4,
	KeyAssignment                            = 5,
	MapVisibleAssist                         = 6,
	RaceHintAssist                           = 7,
	ControllerGyroAssist                     = 8,
	AutoItemAssist                           = 9,
	GadgetInfo                               = 10,
	End                                      = 11,
	ERacePauseMenuItem_MAX                   = 12,
};

// Enum UNION.ERacePauseMenuSequenceState
// NumValues: 0x0004
enum class ERacePauseMenuSequenceState : uint8
{
	Idle                                     = 0,
	Select                                   = 1,
	Exit                                     = 2,
	ERacePauseMenuSequenceState_MAX          = 3,
};

// Enum UNION.ERacePauseMenuSequenceExitCode
// NumValues: 0x0004
enum class ERacePauseMenuSequenceExitCode : uint8
{
	Continue                                 = 0,
	Restart                                  = 1,
	TopMenu                                  = 2,
	ERacePauseMenuSequenceExitCode_MAX       = 3,
};

// Enum UNION.ERacerMaterialAnimation
// NumValues: 0x0007
enum class ERacerMaterialAnimation : uint8
{
	EnterSlimed                              = 0,
	ExitSlimed                               = 1,
	CancelSlimed                             = 2,
	EnterPaint                               = 3,
	ExitPaint                                = 4,
	CancelPaint                              = 5,
	ERacerMaterialAnimation_MAX              = 6,
};

// Enum UNION.ERaceResultSequenceState
// NumValues: 0x000C
enum class ERaceResultSequenceState : uint8
{
	Idle                                     = 0,
	RaceStats                                = 1,
	Reward                                   = 2,
	RateRank                                 = 3,
	Party                                    = 4,
	Ceremony                                 = 5,
	GhostSave                                = 6,
	Save                                     = 7,
	GhostEnd                                 = 8,
	Exit                                     = 9,
	RivalTeamResult                          = 10,
	ERaceResultSequenceState_MAX             = 11,
};

// Enum UNION.ERaceResultStats
// NumValues: 0x0014
enum class ERaceResultStats : uint8
{
	Idle                                     = 0,
	RaceFinished                             = 1,
	StartRanking                             = 2,
	AddRankingPoint                          = 3,
	StartBonus                               = 4,
	AddBonusPoint                            = 5,
	HiddenRankingPanelForTotal               = 6,
	StartTotalRankingResult                  = 7,
	RewardAdditionIdle                       = 8,
	RewardAdditionIn                         = 9,
	RewardAdditionWait                       = 10,
	RewardAdditionOut                        = 11,
	CompleteRewardIdle                       = 12,
	CompleteRewardIn                         = 13,
	CompleteRewardWait                       = 14,
	CompleteRewardOut                        = 15,
	Loading                                  = 16,
	ExitIdle                                 = 17,
	Exit                                     = 18,
	ERaceResultStats_MAX                     = 19,
};

// Enum UNION.ESequenceStateRateRank
// NumValues: 0x0009
enum class ESequenceStateRateRank : uint8
{
	None                                     = 0,
	Open                                     = 1,
	WaitBonusDisp                            = 2,
	WaitGaugeUp                              = 3,
	WaitRankUp                               = 4,
	WaitRankBonusGet                         = 5,
	Close                                    = 6,
	Num                                      = 7,
	ESequenceStateRateRank_MAX               = 8,
};

// Enum UNION.ERaceSequenceState
// NumValues: 0x0023
enum class ERaceSequenceState : uint8
{
	Idle                                     = 0,
	ReadyParam                               = 1,
	SpawnRacer                               = 2,
	SendRaceStart                            = 3,
	LoadAssets                               = 4,
	SetupAssets                              = 5,
	CreateRace                               = 6,
	IntroduceCourse                          = 7,
	EntryRacer                               = 8,
	EntryRival                               = 9,
	PerformRival                             = 10,
	FeaturedRacer                            = 11,
	ResultRival                              = 12,
	Ready                                    = 13,
	Drive                                    = 14,
	PauseMenu                                = 15,
	Goal                                     = 16,
	SendRaceEnd                              = 17,
	Result                                   = 18,
	Ceremony                                 = 19,
	EventAfterCeremony                       = 20,
	JudgeEnding                              = 21,
	Ending                                   = 22,
	EventAfterEnding                         = 23,
	EndMenuAfterCeremony                     = 24,
	EndCreditRoll                            = 25,
	EndBefore                                = 26,
	EndMenu                                  = 27,
	GadgetPlateAddRaceCount                  = 28,
	RivalTeamEliminateResult                 = 29,
	Termination                              = 30,
	DriverGetting                            = 31,
	Save                                     = 32,
	Exit                                     = 33,
	ERaceSequenceState_MAX                   = 34,
};

// Enum UNION.ERaceSequenceExitCode
// NumValues: 0x0005
enum class ERaceSequenceExitCode : uint8
{
	TopMenu                                  = 0,
	Restart                                  = 1,
	Replay                                   = 2,
	Error                                    = 3,
	ERaceSequenceExitCode_MAX                = 4,
};

// Enum UNION.EReadySequenceState
// NumValues: 0x0003
enum class EReadySequenceState : uint8
{
	Init                                     = 0,
	ReadyInputWait                           = 1,
	EReadySequenceState_MAX                  = 2,
};

// Enum UNION.ESceneDriverAnimationMode
// NumValues: 0x0003
enum class ESceneDriverAnimationMode : uint8
{
	AnimationBlueprint                       = 0,
	AnimationSingleNode                      = 1,
	ESceneDriverAnimationMode_MAX            = 2,
};

// Enum UNION.ESceneDriverAnimationFlag
// NumValues: 0x0007
enum class ESceneDriverAnimationFlag : uint8
{
	RivalAction                              = 0,
	RivalActionTaunt                         = 1,
	RivalActionAnnoyed                       = 2,
	RivalActionConfidence                    = 3,
	RivalActionUnique                        = 4,
	Num                                      = 5,
	ESceneDriverAnimationFlag_MAX            = 6,
};

// Enum UNION.ESceneDriverAnimationId
// NumValues: 0x0019
enum class ESceneDriverAnimationId : uint8
{
	IdleLoop                                 = 0,
	RivalIdleLoop                            = 1,
	RivalTauntStart                          = 2,
	RivalTauntLoop                           = 3,
	RivalAnnoyedStart                        = 4,
	RivalAnnoyedLoop                         = 5,
	RivalConfidenceStart                     = 6,
	RivalConfidenceLoop                      = 7,
	RivalUniqueStart                         = 8,
	RivalUniqueLoop                          = 9,
	CeremonyWin01                            = 10,
	CeremonyWin02                            = 11,
	CeremonyWin03                            = 12,
	HoverIdleLoop                            = 13,
	HoverRivalIdleLoop                       = 14,
	HoverRivalTauntStart                     = 15,
	HoverRivalTauntLoop                      = 16,
	HoverRivalAnnoyedStart                   = 17,
	HoverRivalAnnoyedLoop                    = 18,
	HoverRivalConfidenceStart                = 19,
	HoverRivalConfidenceLoop                 = 20,
	HoverRivalUniqueStart                    = 21,
	HoverRivalUniqueLoop                     = 22,
	Num                                      = 23,
	ESceneDriverAnimationId_MAX              = 24,
};

// Enum UNION.ESceneDriverLipSyncId
// NumValues: 0x0005
enum class ESceneDriverLipSyncId : uint8
{
	Rival_FirstRacePlayer                    = 0,
	Rival_FirstRaceRival                     = 1,
	Rival_FinalRace                          = 2,
	Num                                      = 3,
	ESceneDriverLipSyncId_MAX                = 4,
};

// Enum UNION.EAnimationVoiceLipSyncId
// NumValues: 0x0005
enum class EAnimationVoiceLipSyncId : uint8
{
	Rival_FirstRacePlayer                    = 0,
	Rival_FirstRaceRival                     = 1,
	Rival_FinalRace                          = 2,
	Num                                      = 3,
	EAnimationVoiceLipSyncId_MAX             = 4,
};

// Enum UNION.ERivalLipSyncType
// NumValues: 0x0006
enum class ERivalLipSyncType : uint8
{
	Rival_FirstRacePlayer                    = 0,
	Rival_FirstRaceRival                     = 1,
	Rival_FinalRaceRival_Win                 = 2,
	Rival_FinalRaceRival_Lose                = 3,
	Rival_RaceAll                            = 4,
	Rival_MAX                                = 5,
};

// Enum UNION.ESceneDriverVoiceId
// NumValues: 0x0009
enum class ESceneDriverVoiceId : uint8
{
	RivalFirstRacePlayer                     = 0,
	RivalFirstRaceRival                      = 1,
	RivalResultFirstRaceWin                  = 2,
	RivalResultFirstRaceLose                 = 3,
	RivalFinalRace                           = 4,
	RivalResultFinalRaceWin                  = 5,
	RivalResultFinalRaceLose                 = 6,
	Num                                      = 7,
	ESceneDriverVoiceId_MAX                  = 8,
};

// Enum UNION.ESimpleNpcMonsterTruckMaterialType
// NumValues: 0x0004
enum class ESimpleNpcMonsterTruckMaterialType : uint8
{
	Default                                  = 0,
	Unlit                                    = 1,
	Num                                      = 2,
	ESimpleNpcMonsterTruckMaterialType_MAX   = 3,
};

// Enum UNION.EUnionSplitScreenType
// NumValues: 0x000C
enum class EUnionSplitScreenType : uint8
{
	None                                     = 0,
	TwoPlayer_Horizontal                     = 1,
	TwoPlayer_Vertical                       = 2,
	ThreePlayer_FavorTop                     = 3,
	ThreePlayer_FavorBottom                  = 4,
	ThreePlayer_Vertical                     = 5,
	ThreePlayer_Horizontal                   = 6,
	FourPlayer_Grid                          = 7,
	FourPlayer_Vertical                      = 8,
	FourPlayer_Horizontal                    = 9,
	SplitTypeCount                           = 10,
	EUnionSplitScreenType_MAX                = 11,
};

// Enum UNION.ESquadLobbyMatchContinuation
// NumValues: 0x0004
enum class ESquadLobbyMatchContinuation : uint8
{
	NotAnswered                              = 0,
	Continue                                 = 1,
	Quit                                     = 2,
	ESquadLobbyMatchContinuation_MAX         = 3,
};

// Enum UNION.ESquadLobbyState
// NumValues: 0x0004
enum class ESquadLobbyState : uint8
{
	None                                     = 0,
	InSquadLobby                             = 1,
	InPublicLobby                            = 2,
	ESquadLobbyState_MAX                     = 3,
};

// Enum UNION.ESquadMemberContextReadyCheckType
// NumValues: 0x0004
enum class ESquadMemberContextReadyCheckType : uint8
{
	NotReady                                 = 0,
	Ready                                    = 1,
	TrueReady                                = 2,
	ESquadMemberContextReadyCheckType_MAX    = 3,
};

// Enum UNION.ESquadSequenceState
// NumValues: 0x0006
enum class ESquadSequenceState : uint8
{
	Idle                                     = 0,
	SquadTop                                 = 1,
	FriendList                               = 2,
	PlayerProfile                            = 3,
	Exit                                     = 4,
	ESquadSequenceState_MAX                  = 5,
};

// Enum UNION.EStaffrollVariationId
// NumValues: 0x0004
enum class EStaffrollVariationId : uint8
{
	Invalid                                  = 0,
	Standard                                 = 1,
	Memory                                   = 2,
	EStaffrollVariationId_MAX                = 3,
};

// Enum UNION.EStaffrollTextPartId
// NumValues: 0x000D
enum class EStaffrollTextPartId : uint8
{
	Invalid                                  = 0,
	Primary1                                 = 1,
	Primary2                                 = 2,
	Secondary                                = 3,
	SecondaryWith1                           = 4,
	SecondaryWith2                           = 5,
	TertiaryOnly                             = 6,
	Tertiary                                 = 7,
	Logo                                     = 8,
	Space                                    = 9,
	SegaLogo                                 = 10,
	Num                                      = 11,
	EStaffrollTextPartId_MAX                 = 12,
};

// Enum UNION.EStaffrollTextWidgetId
// NumValues: 0x0008
enum class EStaffrollTextWidgetId : uint8
{
	Invalid                                  = 0,
	PrimaryItem                              = 1,
	SecondaryItem                            = 2,
	TertiaryItemWithSecondary                = 3,
	TertiaryItem                             = 4,
	Logo                                     = 5,
	Num                                      = 6,
	EStaffrollTextWidgetId_MAX               = 7,
};

// Enum UNION.EStageContentsType
// NumValues: 0x0004
enum class EStageContentsType : uint8
{
	LaunchStage                              = 0,
	CollaborationExtndStage                  = 1,
	NonCollaborationExtndStage               = 2,
	EStageContentsType_MAX                   = 3,
};

// Enum UNION.EExtraStickerPattern
// NumValues: 0x0004
enum class EExtraStickerPattern : uint8
{
	Square                                   = 0,
	Rect1                                    = 1,
	Rect2                                    = 2,
	EExtraStickerPattern_MAX                 = 3,
};

// Enum UNION.EStickerChallenge
// NumValues: 0x0003
enum class EStickerChallenge : uint8
{
	None                                     = 0,
	Challenge_42                             = 1,
	EStickerChallenge_MAX                    = 2,
};

// Enum UNION.ETitleVisualId
// NumValues: 0x0003
enum class ETitleVisualId : uint8
{
	Standard                                 = 0,
	SecondKey                                = 1,
	ETitleVisualId_MAX                       = 2,
};

// Enum UNION.ETitleSequenceState
// NumValues: 0x0013
enum class ETitleSequenceState : uint8
{
	CheckPlatformPrivilege                   = 0,
	CreateAndLoadSaveData                    = 1,
	Warning                                  = 2,
	Agreement                                = 3,
	Logos                                    = 4,
	Strap                                    = 5,
	AutoSaveInformation                      = 6,
	ConvertSaveDataForUpgradePS5             = 7,
	ConvertSaveDataForDemo                   = 8,
	CheckDefaultSaveDataForRom               = 9,
	DetachUnavailableContent                 = 10,
	FinishedAdvertiseLogoFlow                = 11,
	Movie                                    = 12,
	TitleTop                                 = 13,
	Store                                    = 14,
	License                                  = 15,
	LogIn                                    = 16,
	Exit                                     = 17,
	ETitleSequenceState_MAX                  = 18,
};

// Enum UNION.ETopInfoWidgetPageCategory
// NumValues: 0x000A
enum class ETopInfoWidgetPageCategory : uint8
{
	FestaInfo                                = 0,
	EmarjencyInfo                            = 1,
	CollaboInfo                              = 2,
	DLCInfo                                  = 3,
	LegendInfo                               = 4,
	BounsInfo                                = 5,
	WorldMatch                               = 6,
	Num                                      = 7,
	None                                     = 8,
	ETopInfoWidgetPageCategory_MAX           = 9,
};

// Enum UNION.ETopMenuPlayNum
// NumValues: 0x0008
enum class ETopMenuPlayNum : uint8
{
	None                                     = 0,
	Local1P                                  = 1,
	Local2P                                  = 2,
	Local3P                                  = 3,
	Local4P                                  = 4,
	OnlineSolo                               = 5,
	OnlineMulti                              = 6,
	Max                                      = 7,
};

// Enum UNION.ETurntableDataId
// NumValues: 0x0006
enum class ETurntableDataId : uint8
{
	Init                                     = 0,
	StickerFrontView                         = 1,
	StickerRearView                          = 2,
	FrontStickerEditView                     = 3,
	RearStickerEditView                      = 4,
	ETurntableDataId_MAX                     = 5,
};

// Enum UNION.EPreloadAssetType
// NumValues: 0x0006
enum class EPreloadAssetType : uint8
{
	Vehicle                                  = 0,
	MachineEffect                            = 1,
	Item                                     = 2,
	HUD                                      = 3,
	Num                                      = 4,
	EPreloadAssetType_MAX                    = 5,
};

// Enum UNION.ERacerAnimSyncId
// NumValues: 0x0003
enum class ERacerAnimSyncId : uint8
{
	BoatIdle                                 = 0,
	Num                                      = 1,
	ERacerAnimSyncId_MAX                     = 2,
};

// Enum UNION.EUnionRacerEvent
// NumValues: 0x002D
enum class EUnionRacerEvent : uint8
{
	None                                     = 0,
	OnAcceleChange                           = 1,
	OnDrifting                               = 2,
	OnDriftCharge                            = 3,
	OnDash                                   = 4,
	OnStartDash                              = 5,
	OnLanding                                = 6,
	OnSlipStream                             = 7,
	OnStant                                  = 8,
	OnRivalTouch                             = 9,
	OnSteeringLR                             = 10,
	OnBoostEnd                               = 11,
	OnBoostPad                               = 12,
	OnHitTrackWall                           = 13,
	OnHitTrackWallTemp                       = 14,
	OnSpin                                   = 15,
	OnTransformVehicleType                   = 16,
	OnItemHold                               = 17,
	OnUseItem                                = 18,
	OnGoal                                   = 19,
	OnTimeout                                = 20,
	OnAddRing                                = 21,
	OnDashFire                               = 22,
	OnChangeRank                             = 23,
	OnBack                                   = 24,
	OnChangeDashLevel                        = 25,
	OnSelectDomain                           = 26,
	OnSlipStreamMaxSpeed                     = 27,
	OnDamaged                                = 28,
	OnAttackSuccess                          = 29,
	OnTrick                                  = 30,
	OnTrickSuccess                           = 31,
	OnTrickCancel                            = 32,
	OnMetamorphose                           = 33,
	OnCourseOutRecovery                      = 34,
	OnSlowDown                               = 35,
	OnSignSummon                             = 36,
	OnSlimeStart                             = 37,
	OnSlimeEnd                               = 38,
	OnSlimeCancel                            = 39,
	OnPaintStart                             = 40,
	OnPaintEnd                               = 41,
	OnPaintCancel                            = 42,
	OnDriftNoStart                           = 43,
	EUnionRacerEvent_MAX                     = 44,
};

// Enum UNION.EVehicleActorType
// NumValues: 0x0004
enum class EVehicleActorType : uint8
{
	Machine                                  = 0,
	Hoverboard                               = 1,
	MonsterTruck                             = 2,
	EVehicleActorType_MAX                    = 3,
};

// Enum UNION.ESkinWindowAnimState
// NumValues: 0x0005
enum class ESkinWindowAnimState : uint8
{
	None                                     = 0,
	Open                                     = 1,
	Loop                                     = 2,
	Close                                    = 3,
	ESkinWindowAnimState_MAX                 = 4,
};

// Enum UNION.EWirelessSequenceState
// NumValues: 0x0018
enum class EWirelessSequenceState : uint8
{
	Idle                                     = 0,
	Matching                                 = 19,
	WirelessTop                              = 72,
	SearchLobby                              = 73,
	CreateLobby                              = 74,
	ReadyCheck                               = 75,
	ToOffline                                = 76,
	ToOnline                                 = 77,
	PreSearch                                = 78,
	CreateLobby_Setting                      = 79,
	CreateLobby_Start                        = 80,
	CreateLobby_InProgress                   = 81,
	CreateLobby_Complete                     = 82,
	SearchLobby_Start                        = 83,
	SearchLobby_InProgress                   = 84,
	SearchLobby_Complete                     = 85,
	EntryLobby_Setup                         = 86,
	EntryLobby_Start                         = 87,
	EntryLobby_InProgress                    = 88,
	EntryLobby_Complete                      = 89,
	BackToPrevSequence                       = 90,
	ErrorWindow                              = 91,
	Exit                                     = 92,
	EWirelessSequenceState_MAX               = 93,
};

// Enum UNION.EWirelessSequenceErrorId
// NumValues: 0x0006
enum class EWirelessSequenceErrorId : uint8
{
	NonError                                 = 0,
	CommonError                              = 1,
	EntryFailedError                         = 2,
	NoLobby                                  = 3,
	SearchTimeout                            = 4,
	Max                                      = 5,
};

// Enum UNION.ELobbySearchSceneType
// NumValues: 0x0005
enum class ELobbySearchSceneType : uint8
{
	Init                                     = 0,
	SearchProgress                           = 1,
	SearchComplete_Success                   = 2,
	SearchComplete_NotFound                  = 3,
	ELobbySearchSceneType_MAX                = 4,
};

// ScriptStruct UNION.StickerBakerData
// 0x0010 (0x0010 - 0x0000)
struct FStickerBakerData final
{
public:
	TArray<struct FLinearColor>                   Colors;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStickerBakerData) == 0x000008, "Wrong alignment on FStickerBakerData");
static_assert(sizeof(FStickerBakerData) == 0x000010, "Wrong size on FStickerBakerData");
static_assert(offsetof(FStickerBakerData, Colors) == 0x000000, "Member 'FStickerBakerData::Colors' has a wrong offset!");

// ScriptStruct UNION.UsageCountChara
// 0x0008 (0x0008 - 0x0000)
struct FUsageCountChara final
{
public:
	EDriverId                                     DriverId;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         usageCount;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUsageCountChara) == 0x000004, "Wrong alignment on FUsageCountChara");
static_assert(sizeof(FUsageCountChara) == 0x000008, "Wrong size on FUsageCountChara");
static_assert(offsetof(FUsageCountChara, DriverId) == 0x000000, "Member 'FUsageCountChara::DriverId' has a wrong offset!");
static_assert(offsetof(FUsageCountChara, usageCount) == 0x000004, "Member 'FUsageCountChara::usageCount' has a wrong offset!");

// ScriptStruct UNION.LobbyRacerInfoData
// 0x0028 (0x0028 - 0x0000)
struct FLobbyRacerInfoData final
{
public:
	EAppSupportedPlatform                         UserPlatform;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERateRank                                     Rank;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UserTitleData;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUsageCountChara>               UsedCountChara;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 UsedMachineTypeCount;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyRacerInfoData) == 0x000008, "Wrong alignment on FLobbyRacerInfoData");
static_assert(sizeof(FLobbyRacerInfoData) == 0x000028, "Wrong size on FLobbyRacerInfoData");
static_assert(offsetof(FLobbyRacerInfoData, UserPlatform) == 0x000000, "Member 'FLobbyRacerInfoData::UserPlatform' has a wrong offset!");
static_assert(offsetof(FLobbyRacerInfoData, Rank) == 0x000001, "Member 'FLobbyRacerInfoData::Rank' has a wrong offset!");
static_assert(offsetof(FLobbyRacerInfoData, UserTitleData) == 0x000004, "Member 'FLobbyRacerInfoData::UserTitleData' has a wrong offset!");
static_assert(offsetof(FLobbyRacerInfoData, UsedCountChara) == 0x000008, "Member 'FLobbyRacerInfoData::UsedCountChara' has a wrong offset!");
static_assert(offsetof(FLobbyRacerInfoData, UsedMachineTypeCount) == 0x000018, "Member 'FLobbyRacerInfoData::UsedMachineTypeCount' has a wrong offset!");

// ScriptStruct UNION.TrackInfo
// 0x0030 (0x0030 - 0x0000)
struct FTrackInfo final
{
public:
	class FText                                   TitleName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ArtistName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             JacketTexture;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJukeboxOnly;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAvailableLap                                 AvailableLap;                                      // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackInfo) == 0x000008, "Wrong alignment on FTrackInfo");
static_assert(sizeof(FTrackInfo) == 0x000030, "Wrong size on FTrackInfo");
static_assert(offsetof(FTrackInfo, TitleName) == 0x000000, "Member 'FTrackInfo::TitleName' has a wrong offset!");
static_assert(offsetof(FTrackInfo, ArtistName) == 0x000010, "Member 'FTrackInfo::ArtistName' has a wrong offset!");
static_assert(offsetof(FTrackInfo, JacketTexture) == 0x000020, "Member 'FTrackInfo::JacketTexture' has a wrong offset!");
static_assert(offsetof(FTrackInfo, IsJukeboxOnly) == 0x000028, "Member 'FTrackInfo::IsJukeboxOnly' has a wrong offset!");
static_assert(offsetof(FTrackInfo, AvailableLap) == 0x000029, "Member 'FTrackInfo::AvailableLap' has a wrong offset!");

// ScriptStruct UNION.TrackStruct
// 0x0090 (0x0090 - 0x0000)
struct FTrackStruct final
{
public:
	int32                                         TrackID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTrackInfo                             TrackInfo;                                         // 0x0008(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              JacketTextureSoftPtr;                              // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          SoundCue;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           SoundCueSoftPtr;                                   // 0x0068(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackStruct) == 0x000008, "Wrong alignment on FTrackStruct");
static_assert(sizeof(FTrackStruct) == 0x000090, "Wrong size on FTrackStruct");
static_assert(offsetof(FTrackStruct, TrackID) == 0x000000, "Member 'FTrackStruct::TrackID' has a wrong offset!");
static_assert(offsetof(FTrackStruct, TrackInfo) == 0x000008, "Member 'FTrackStruct::TrackInfo' has a wrong offset!");
static_assert(offsetof(FTrackStruct, JacketTextureSoftPtr) == 0x000038, "Member 'FTrackStruct::JacketTextureSoftPtr' has a wrong offset!");
static_assert(offsetof(FTrackStruct, SoundCue) == 0x000060, "Member 'FTrackStruct::SoundCue' has a wrong offset!");
static_assert(offsetof(FTrackStruct, SoundCueSoftPtr) == 0x000068, "Member 'FTrackStruct::SoundCueSoftPtr' has a wrong offset!");

// ScriptStruct UNION.FriendListContentsWidgetData
// 0x0048 (0x0048 - 0x0000)
struct FFriendListContentsWidgetData final
{
public:
	TArray<EFriendListType>                       ListType;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EFriendListCategory                           ParentCategory;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           TitleText;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           EmptyListText;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   ErrorListText;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendListContentsWidgetData) == 0x000008, "Wrong alignment on FFriendListContentsWidgetData");
static_assert(sizeof(FFriendListContentsWidgetData) == 0x000048, "Wrong size on FFriendListContentsWidgetData");
static_assert(offsetof(FFriendListContentsWidgetData, ListType) == 0x000000, "Member 'FFriendListContentsWidgetData::ListType' has a wrong offset!");
static_assert(offsetof(FFriendListContentsWidgetData, ParentCategory) == 0x000010, "Member 'FFriendListContentsWidgetData::ParentCategory' has a wrong offset!");
static_assert(offsetof(FFriendListContentsWidgetData, TitleText) == 0x000018, "Member 'FFriendListContentsWidgetData::TitleText' has a wrong offset!");
static_assert(offsetof(FFriendListContentsWidgetData, EmptyListText) == 0x000028, "Member 'FFriendListContentsWidgetData::EmptyListText' has a wrong offset!");
static_assert(offsetof(FFriendListContentsWidgetData, ErrorListText) == 0x000038, "Member 'FFriendListContentsWidgetData::ErrorListText' has a wrong offset!");

// ScriptStruct UNION.AlbumInfo
// 0x0020 (0x0020 - 0x0000)
struct FAlbumInfo final
{
public:
	class FText                                   AlbumName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             JacketTexture;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJukeboxOnly;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAlbumInfo) == 0x000008, "Wrong alignment on FAlbumInfo");
static_assert(sizeof(FAlbumInfo) == 0x000020, "Wrong size on FAlbumInfo");
static_assert(offsetof(FAlbumInfo, AlbumName) == 0x000000, "Member 'FAlbumInfo::AlbumName' has a wrong offset!");
static_assert(offsetof(FAlbumInfo, JacketTexture) == 0x000010, "Member 'FAlbumInfo::JacketTexture' has a wrong offset!");
static_assert(offsetof(FAlbumInfo, IsJukeboxOnly) == 0x000018, "Member 'FAlbumInfo::IsJukeboxOnly' has a wrong offset!");

// ScriptStruct UNION.FestaRuleInfomationBase
// 0x0002 (0x0002 - 0x0000)
struct FFestaRuleInfomationBase
{
public:
	EGroupRaceRule                                ruleId;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpecial;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaRuleInfomationBase) == 0x000001, "Wrong alignment on FFestaRuleInfomationBase");
static_assert(sizeof(FFestaRuleInfomationBase) == 0x000002, "Wrong size on FFestaRuleInfomationBase");
static_assert(offsetof(FFestaRuleInfomationBase, ruleId) == 0x000000, "Member 'FFestaRuleInfomationBase::ruleId' has a wrong offset!");
static_assert(offsetof(FFestaRuleInfomationBase, IsSpecial) == 0x000001, "Member 'FFestaRuleInfomationBase::IsSpecial' has a wrong offset!");

// ScriptStruct UNION.OptimizedMeshEffectData
// 0x00E8 (0x00F0 - 0x0008)
struct FOptimizedMeshEffectData final : public FTableRowBase
{
public:
	EMachineMeshEffectType                        EffectType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeTime;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartScale;                                        // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndScale;                                          // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                            ScaleCurveTable;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaFadeTime;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotationRandom;                                    // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLerpFlipBook;                                     // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimationScale;                                   // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomRotation;                                   // 0x00CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlphaFade;                                        // 0x00CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            StaticMesh;                                        // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMufflerEffect;                                    // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimizedMeshEffectData) == 0x000010, "Wrong alignment on FOptimizedMeshEffectData");
static_assert(sizeof(FOptimizedMeshEffectData) == 0x0000F0, "Wrong size on FOptimizedMeshEffectData");
static_assert(offsetof(FOptimizedMeshEffectData, EffectType) == 0x000008, "Member 'FOptimizedMeshEffectData::EffectType' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, LifeTime) == 0x00000C, "Member 'FOptimizedMeshEffectData::LifeTime' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, Transform) == 0x000010, "Member 'FOptimizedMeshEffectData::Transform' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, StartScale) == 0x000070, "Member 'FOptimizedMeshEffectData::StartScale' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, EndScale) == 0x000088, "Member 'FOptimizedMeshEffectData::EndScale' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, ScaleCurveTable) == 0x0000A0, "Member 'FOptimizedMeshEffectData::ScaleCurveTable' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, AlphaFadeTime) == 0x0000A8, "Member 'FOptimizedMeshEffectData::AlphaFadeTime' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, RotationRandom) == 0x0000B0, "Member 'FOptimizedMeshEffectData::RotationRandom' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, bLerpFlipBook) == 0x0000C8, "Member 'FOptimizedMeshEffectData::bLerpFlipBook' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, bAnimationScale) == 0x0000C9, "Member 'FOptimizedMeshEffectData::bAnimationScale' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, bRandomRotation) == 0x0000CA, "Member 'FOptimizedMeshEffectData::bRandomRotation' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, bAlphaFade) == 0x0000CB, "Member 'FOptimizedMeshEffectData::bAlphaFade' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, StaticMesh) == 0x0000D0, "Member 'FOptimizedMeshEffectData::StaticMesh' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, AttachPointName) == 0x0000D8, "Member 'FOptimizedMeshEffectData::AttachPointName' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectData, bMufflerEffect) == 0x0000E0, "Member 'FOptimizedMeshEffectData::bMufflerEffect' has a wrong offset!");

// ScriptStruct UNION.RewardAchievementData
// 0x0080 (0x0080 - 0x0000)
struct FRewardAchievementData final
{
public:
	ERewardType                                   rewardType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRivalReward;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Num;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EDriverId>                             DriverId;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EMachineId>                            MachineId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EGadgetId>                             gadgetId;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 stickerId;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardAchievementData) == 0x000008, "Wrong alignment on FRewardAchievementData");
static_assert(sizeof(FRewardAchievementData) == 0x000080, "Wrong size on FRewardAchievementData");
static_assert(offsetof(FRewardAchievementData, rewardType) == 0x000000, "Member 'FRewardAchievementData::rewardType' has a wrong offset!");
static_assert(offsetof(FRewardAchievementData, bRivalReward) == 0x000001, "Member 'FRewardAchievementData::bRivalReward' has a wrong offset!");
static_assert(offsetof(FRewardAchievementData, Num) == 0x000008, "Member 'FRewardAchievementData::Num' has a wrong offset!");
static_assert(offsetof(FRewardAchievementData, DriverId) == 0x000018, "Member 'FRewardAchievementData::DriverId' has a wrong offset!");
static_assert(offsetof(FRewardAchievementData, MachineId) == 0x000028, "Member 'FRewardAchievementData::MachineId' has a wrong offset!");
static_assert(offsetof(FRewardAchievementData, gadgetId) == 0x000038, "Member 'FRewardAchievementData::gadgetId' has a wrong offset!");
static_assert(offsetof(FRewardAchievementData, stickerId) == 0x000048, "Member 'FRewardAchievementData::stickerId' has a wrong offset!");
static_assert(offsetof(FRewardAchievementData, IconTexture) == 0x000058, "Member 'FRewardAchievementData::IconTexture' has a wrong offset!");

// ScriptStruct UNION.MachineIconDisplayData
// 0x0008 (0x0010 - 0x0008)
struct FMachineIconDisplayData final : public FTableRowBase
{
public:
	float                                         IconSize;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachineIconDisplayData) == 0x000008, "Wrong alignment on FMachineIconDisplayData");
static_assert(sizeof(FMachineIconDisplayData) == 0x000010, "Wrong size on FMachineIconDisplayData");
static_assert(offsetof(FMachineIconDisplayData, IconSize) == 0x000008, "Member 'FMachineIconDisplayData::IconSize' has a wrong offset!");

// ScriptStruct UNION.AlbumStruct
// 0x0060 (0x0060 - 0x0000)
struct FAlbumStruct final
{
public:
	int32                                         AlbumID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlbumInfo                             AlbumInfo;                                         // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              JacketTextureSoftPtr;                              // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TrackIndexList;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlbumStruct) == 0x000008, "Wrong alignment on FAlbumStruct");
static_assert(sizeof(FAlbumStruct) == 0x000060, "Wrong size on FAlbumStruct");
static_assert(offsetof(FAlbumStruct, AlbumID) == 0x000000, "Member 'FAlbumStruct::AlbumID' has a wrong offset!");
static_assert(offsetof(FAlbumStruct, AlbumInfo) == 0x000008, "Member 'FAlbumStruct::AlbumInfo' has a wrong offset!");
static_assert(offsetof(FAlbumStruct, JacketTextureSoftPtr) == 0x000028, "Member 'FAlbumStruct::JacketTextureSoftPtr' has a wrong offset!");
static_assert(offsetof(FAlbumStruct, TrackIndexList) == 0x000050, "Member 'FAlbumStruct::TrackIndexList' has a wrong offset!");

// ScriptStruct UNION.MachineCustomParamData
// 0x0018 (0x0020 - 0x0008)
struct FMachineCustomParamData final : public FTableRowBase
{
public:
	EMachineId                                    MachineId;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accel;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dash;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Handling;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineCustomParamData) == 0x000008, "Wrong alignment on FMachineCustomParamData");
static_assert(sizeof(FMachineCustomParamData) == 0x000020, "Wrong size on FMachineCustomParamData");
static_assert(offsetof(FMachineCustomParamData, MachineId) == 0x000008, "Member 'FMachineCustomParamData::MachineId' has a wrong offset!");
static_assert(offsetof(FMachineCustomParamData, Speed) == 0x00000C, "Member 'FMachineCustomParamData::Speed' has a wrong offset!");
static_assert(offsetof(FMachineCustomParamData, Accel) == 0x000010, "Member 'FMachineCustomParamData::Accel' has a wrong offset!");
static_assert(offsetof(FMachineCustomParamData, Dash) == 0x000014, "Member 'FMachineCustomParamData::Dash' has a wrong offset!");
static_assert(offsetof(FMachineCustomParamData, Handling) == 0x000018, "Member 'FMachineCustomParamData::Handling' has a wrong offset!");
static_assert(offsetof(FMachineCustomParamData, Power) == 0x00001C, "Member 'FMachineCustomParamData::Power' has a wrong offset!");

// ScriptStruct UNION.CustomLapBGMIndex
// 0x000C (0x000C - 0x0000)
struct FCustomLapBGMIndex final
{
public:
	ESelectedState                                State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrackIndex;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlbumIndex;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomLapBGMIndex) == 0x000004, "Wrong alignment on FCustomLapBGMIndex");
static_assert(sizeof(FCustomLapBGMIndex) == 0x00000C, "Wrong size on FCustomLapBGMIndex");
static_assert(offsetof(FCustomLapBGMIndex, State) == 0x000000, "Member 'FCustomLapBGMIndex::State' has a wrong offset!");
static_assert(offsetof(FCustomLapBGMIndex, TrackIndex) == 0x000004, "Member 'FCustomLapBGMIndex::TrackIndex' has a wrong offset!");
static_assert(offsetof(FCustomLapBGMIndex, AlbumIndex) == 0x000008, "Member 'FCustomLapBGMIndex::AlbumIndex' has a wrong offset!");

// ScriptStruct UNION.KeyConfigCellGuideParam
// 0x0010 (0x0010 - 0x0000)
struct FKeyConfigCellGuideParam final
{
public:
	class FText                                   GuideText;                                         // 0x0000(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyConfigCellGuideParam) == 0x000008, "Wrong alignment on FKeyConfigCellGuideParam");
static_assert(sizeof(FKeyConfigCellGuideParam) == 0x000010, "Wrong size on FKeyConfigCellGuideParam");
static_assert(offsetof(FKeyConfigCellGuideParam, GuideText) == 0x000000, "Member 'FKeyConfigCellGuideParam::GuideText' has a wrong offset!");

// ScriptStruct UNION.GadgetPlateUIData
// 0x0028 (0x0028 - 0x0000)
struct FGadgetPlateUIData final
{
public:
	EGadgetPlateId                                ID;                                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUserGadgetPresetData                  PresetData;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<bool>                                  bIsSlotNew;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetPlateUIData) == 0x000008, "Wrong alignment on FGadgetPlateUIData");
static_assert(sizeof(FGadgetPlateUIData) == 0x000028, "Wrong size on FGadgetPlateUIData");
static_assert(offsetof(FGadgetPlateUIData, ID) == 0x000000, "Member 'FGadgetPlateUIData::ID' has a wrong offset!");
static_assert(offsetof(FGadgetPlateUIData, PresetData) == 0x000008, "Member 'FGadgetPlateUIData::PresetData' has a wrong offset!");
static_assert(offsetof(FGadgetPlateUIData, bIsSlotNew) == 0x000018, "Member 'FGadgetPlateUIData::bIsSlotNew' has a wrong offset!");

// ScriptStruct UNION.MenuRacerData
// 0x00A8 (0x00A8 - 0x0000)
struct FMenuRacerData final
{
public:
	EDriverId                                     DriverId;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUserMachineCustomizeData              UserMachineCustomizeData;                          // 0x0008(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGadgetPlateUIData                     UserGadgetData;                                    // 0x0080(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMenuRacerData) == 0x000008, "Wrong alignment on FMenuRacerData");
static_assert(sizeof(FMenuRacerData) == 0x0000A8, "Wrong size on FMenuRacerData");
static_assert(offsetof(FMenuRacerData, DriverId) == 0x000000, "Member 'FMenuRacerData::DriverId' has a wrong offset!");
static_assert(offsetof(FMenuRacerData, UserMachineCustomizeData) == 0x000008, "Member 'FMenuRacerData::UserMachineCustomizeData' has a wrong offset!");
static_assert(offsetof(FMenuRacerData, UserGadgetData) == 0x000080, "Member 'FMenuRacerData::UserGadgetData' has a wrong offset!");

// ScriptStruct UNION.LobbyPlayerData
// 0x00F8 (0x00F8 - 0x0000)
struct FLobbyPlayerData final
{
public:
	int32                                         PlayerLobbyIndex;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 playerName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMenuRacerData                         MenuRacerData;                                     // 0x0018(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLobbyRacerInfoData                    LobbyRacerInfoData;                                // 0x00C0(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         DecideCourseRingIndex;                             // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeCount;                                         // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHost;                                            // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChampion;                                       // 0x00F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRival;                                          // 0x00F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyPlayerData) == 0x000008, "Wrong alignment on FLobbyPlayerData");
static_assert(sizeof(FLobbyPlayerData) == 0x0000F8, "Wrong size on FLobbyPlayerData");
static_assert(offsetof(FLobbyPlayerData, PlayerLobbyIndex) == 0x000000, "Member 'FLobbyPlayerData::PlayerLobbyIndex' has a wrong offset!");
static_assert(offsetof(FLobbyPlayerData, playerName) == 0x000008, "Member 'FLobbyPlayerData::playerName' has a wrong offset!");
static_assert(offsetof(FLobbyPlayerData, MenuRacerData) == 0x000018, "Member 'FLobbyPlayerData::MenuRacerData' has a wrong offset!");
static_assert(offsetof(FLobbyPlayerData, LobbyRacerInfoData) == 0x0000C0, "Member 'FLobbyPlayerData::LobbyRacerInfoData' has a wrong offset!");
static_assert(offsetof(FLobbyPlayerData, DecideCourseRingIndex) == 0x0000E8, "Member 'FLobbyPlayerData::DecideCourseRingIndex' has a wrong offset!");
static_assert(offsetof(FLobbyPlayerData, LikeCount) == 0x0000EC, "Member 'FLobbyPlayerData::LikeCount' has a wrong offset!");
static_assert(offsetof(FLobbyPlayerData, IsHost) == 0x0000F0, "Member 'FLobbyPlayerData::IsHost' has a wrong offset!");
static_assert(offsetof(FLobbyPlayerData, IsValid) == 0x0000F1, "Member 'FLobbyPlayerData::IsValid' has a wrong offset!");
static_assert(offsetof(FLobbyPlayerData, bIsChampion) == 0x0000F2, "Member 'FLobbyPlayerData::bIsChampion' has a wrong offset!");
static_assert(offsetof(FLobbyPlayerData, bIsRival) == 0x0000F3, "Member 'FLobbyPlayerData::bIsRival' has a wrong offset!");

// ScriptStruct UNION.LobbyCourseSelectData
// 0x0038 (0x0038 - 0x0000)
struct FLobbyCourseSelectData final
{
public:
	class ALobbyTravelRingManager*                LobbyTravelRingManager;                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULobbyCourseSelectSceneBase*            CourseSelectUIScene;                               // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLobbyPlayerData>               LobbyPlayerData;                                   // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OwnPlayerIndex;                                    // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonLobbyContext*                    PrimaryLobbyContext;                               // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingCourseSelecting                   RaceRaceSettingCourseSelecting;                    // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwnPlayerIsHost;                                   // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyCourseSelectData) == 0x000008, "Wrong alignment on FLobbyCourseSelectData");
static_assert(sizeof(FLobbyCourseSelectData) == 0x000038, "Wrong size on FLobbyCourseSelectData");
static_assert(offsetof(FLobbyCourseSelectData, LobbyTravelRingManager) == 0x000000, "Member 'FLobbyCourseSelectData::LobbyTravelRingManager' has a wrong offset!");
static_assert(offsetof(FLobbyCourseSelectData, CourseSelectUIScene) == 0x000008, "Member 'FLobbyCourseSelectData::CourseSelectUIScene' has a wrong offset!");
static_assert(offsetof(FLobbyCourseSelectData, LobbyPlayerData) == 0x000010, "Member 'FLobbyCourseSelectData::LobbyPlayerData' has a wrong offset!");
static_assert(offsetof(FLobbyCourseSelectData, OwnPlayerIndex) == 0x000020, "Member 'FLobbyCourseSelectData::OwnPlayerIndex' has a wrong offset!");
static_assert(offsetof(FLobbyCourseSelectData, PrimaryLobbyContext) == 0x000028, "Member 'FLobbyCourseSelectData::PrimaryLobbyContext' has a wrong offset!");
static_assert(offsetof(FLobbyCourseSelectData, RaceRaceSettingCourseSelecting) == 0x000030, "Member 'FLobbyCourseSelectData::RaceRaceSettingCourseSelecting' has a wrong offset!");
static_assert(offsetof(FLobbyCourseSelectData, OwnPlayerIsHost) == 0x000031, "Member 'FLobbyCourseSelectData::OwnPlayerIsHost' has a wrong offset!");

// ScriptStruct UNION.PartyRaceMissionData
// 0x0028 (0x0030 - 0x0008)
struct FPartyRaceMissionData final : public FTableRowBase
{
public:
	class FText                                   DisplayText;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         MissionRank;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyRaceMissionLotteryGroup                 MissionLotteryGroup;                               // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyRaceMissionType                         MissionType;                                       // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MissionParam;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardType                                   rewardType;                                        // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         rewardId;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumReward;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyRaceMissionData) == 0x000008, "Wrong alignment on FPartyRaceMissionData");
static_assert(sizeof(FPartyRaceMissionData) == 0x000030, "Wrong size on FPartyRaceMissionData");
static_assert(offsetof(FPartyRaceMissionData, DisplayText) == 0x000008, "Member 'FPartyRaceMissionData::DisplayText' has a wrong offset!");
static_assert(offsetof(FPartyRaceMissionData, MissionRank) == 0x000018, "Member 'FPartyRaceMissionData::MissionRank' has a wrong offset!");
static_assert(offsetof(FPartyRaceMissionData, MissionLotteryGroup) == 0x00001C, "Member 'FPartyRaceMissionData::MissionLotteryGroup' has a wrong offset!");
static_assert(offsetof(FPartyRaceMissionData, MissionType) == 0x00001D, "Member 'FPartyRaceMissionData::MissionType' has a wrong offset!");
static_assert(offsetof(FPartyRaceMissionData, MissionParam) == 0x000020, "Member 'FPartyRaceMissionData::MissionParam' has a wrong offset!");
static_assert(offsetof(FPartyRaceMissionData, rewardType) == 0x000024, "Member 'FPartyRaceMissionData::rewardType' has a wrong offset!");
static_assert(offsetof(FPartyRaceMissionData, rewardId) == 0x000028, "Member 'FPartyRaceMissionData::rewardId' has a wrong offset!");
static_assert(offsetof(FPartyRaceMissionData, NumReward) == 0x00002C, "Member 'FPartyRaceMissionData::NumReward' has a wrong offset!");

// ScriptStruct UNION.AppRaceTeamResultData
// 0x000C (0x000C - 0x0000)
struct FAppRaceTeamResultData final
{
public:
	int32                                         TeamPoint;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamRank;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamBonusPoint;                                    // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppRaceTeamResultData) == 0x000004, "Wrong alignment on FAppRaceTeamResultData");
static_assert(sizeof(FAppRaceTeamResultData) == 0x00000C, "Wrong size on FAppRaceTeamResultData");
static_assert(offsetof(FAppRaceTeamResultData, TeamPoint) == 0x000000, "Member 'FAppRaceTeamResultData::TeamPoint' has a wrong offset!");
static_assert(offsetof(FAppRaceTeamResultData, TeamRank) == 0x000004, "Member 'FAppRaceTeamResultData::TeamRank' has a wrong offset!");
static_assert(offsetof(FAppRaceTeamResultData, TeamBonusPoint) == 0x000008, "Member 'FAppRaceTeamResultData::TeamBonusPoint' has a wrong offset!");

// ScriptStruct UNION.FestaRuleInfomation
// 0x0056 (0x0058 - 0x0002)
struct FFestaRuleInfomation final : public FFestaRuleInfomationBase
{
public:
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RuleName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DetailTeamGage;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DetailVictoryPointBonus;                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FUserGadgetPresetData                  FixedGadgetPreset;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTexture2D*                             RuleIconTexture;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             RuleBGTexture;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaRuleInfomation) == 0x000008, "Wrong alignment on FFestaRuleInfomation");
static_assert(sizeof(FFestaRuleInfomation) == 0x000058, "Wrong size on FFestaRuleInfomation");
static_assert(offsetof(FFestaRuleInfomation, RuleName) == 0x000008, "Member 'FFestaRuleInfomation::RuleName' has a wrong offset!");
static_assert(offsetof(FFestaRuleInfomation, DetailTeamGage) == 0x000018, "Member 'FFestaRuleInfomation::DetailTeamGage' has a wrong offset!");
static_assert(offsetof(FFestaRuleInfomation, DetailVictoryPointBonus) == 0x000028, "Member 'FFestaRuleInfomation::DetailVictoryPointBonus' has a wrong offset!");
static_assert(offsetof(FFestaRuleInfomation, FixedGadgetPreset) == 0x000038, "Member 'FFestaRuleInfomation::FixedGadgetPreset' has a wrong offset!");
static_assert(offsetof(FFestaRuleInfomation, RuleIconTexture) == 0x000048, "Member 'FFestaRuleInfomation::RuleIconTexture' has a wrong offset!");
static_assert(offsetof(FFestaRuleInfomation, RuleBGTexture) == 0x000050, "Member 'FFestaRuleInfomation::RuleBGTexture' has a wrong offset!");

// ScriptStruct UNION.OptionCellRaceTableRow
// 0x0028 (0x0030 - 0x0008)
struct FOptionCellRaceTableRow final : public FTableRowBase
{
public:
	EOptionRaceCell                               OptionKind;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionValidPlatform                          Platform;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionCellType                               CellType;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CellTitle;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CellGuide;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionCellRaceTableRow) == 0x000008, "Wrong alignment on FOptionCellRaceTableRow");
static_assert(sizeof(FOptionCellRaceTableRow) == 0x000030, "Wrong size on FOptionCellRaceTableRow");
static_assert(offsetof(FOptionCellRaceTableRow, OptionKind) == 0x000008, "Member 'FOptionCellRaceTableRow::OptionKind' has a wrong offset!");
static_assert(offsetof(FOptionCellRaceTableRow, Platform) == 0x000009, "Member 'FOptionCellRaceTableRow::Platform' has a wrong offset!");
static_assert(offsetof(FOptionCellRaceTableRow, CellType) == 0x00000A, "Member 'FOptionCellRaceTableRow::CellType' has a wrong offset!");
static_assert(offsetof(FOptionCellRaceTableRow, CellTitle) == 0x000010, "Member 'FOptionCellRaceTableRow::CellTitle' has a wrong offset!");
static_assert(offsetof(FOptionCellRaceTableRow, CellGuide) == 0x000020, "Member 'FOptionCellRaceTableRow::CellGuide' has a wrong offset!");

// ScriptStruct UNION.FestaResultRewardData
// 0x0020 (0x0020 - 0x0000)
struct FFestaResultRewardData final
{
public:
	class FText                                   RewardName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTeamRank;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFestaResultRewardData) == 0x000008, "Wrong alignment on FFestaResultRewardData");
static_assert(sizeof(FFestaResultRewardData) == 0x000020, "Wrong size on FFestaResultRewardData");
static_assert(offsetof(FFestaResultRewardData, RewardName) == 0x000000, "Member 'FFestaResultRewardData::RewardName' has a wrong offset!");
static_assert(offsetof(FFestaResultRewardData, Point) == 0x000010, "Member 'FFestaResultRewardData::Point' has a wrong offset!");
static_assert(offsetof(FFestaResultRewardData, Rank) == 0x000014, "Member 'FFestaResultRewardData::Rank' has a wrong offset!");
static_assert(offsetof(FFestaResultRewardData, bIsTeamRank) == 0x000018, "Member 'FFestaResultRewardData::bIsTeamRank' has a wrong offset!");

// ScriptStruct UNION.FestaResultRewardInfo
// 0x0038 (0x0038 - 0x0000)
struct FFestaResultRewardInfo final
{
public:
	TArray<struct FFestaResultRewardData>         rewardList;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NowPoint;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddPoint;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MulBonus;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BonusText;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         ticketNum;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerTeamRank;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaResultRewardInfo) == 0x000008, "Wrong alignment on FFestaResultRewardInfo");
static_assert(sizeof(FFestaResultRewardInfo) == 0x000038, "Wrong size on FFestaResultRewardInfo");
static_assert(offsetof(FFestaResultRewardInfo, rewardList) == 0x000000, "Member 'FFestaResultRewardInfo::rewardList' has a wrong offset!");
static_assert(offsetof(FFestaResultRewardInfo, NowPoint) == 0x000010, "Member 'FFestaResultRewardInfo::NowPoint' has a wrong offset!");
static_assert(offsetof(FFestaResultRewardInfo, AddPoint) == 0x000014, "Member 'FFestaResultRewardInfo::AddPoint' has a wrong offset!");
static_assert(offsetof(FFestaResultRewardInfo, MulBonus) == 0x000018, "Member 'FFestaResultRewardInfo::MulBonus' has a wrong offset!");
static_assert(offsetof(FFestaResultRewardInfo, BonusText) == 0x000020, "Member 'FFestaResultRewardInfo::BonusText' has a wrong offset!");
static_assert(offsetof(FFestaResultRewardInfo, ticketNum) == 0x000030, "Member 'FFestaResultRewardInfo::ticketNum' has a wrong offset!");
static_assert(offsetof(FFestaResultRewardInfo, PlayerTeamRank) == 0x000034, "Member 'FFestaResultRewardInfo::PlayerTeamRank' has a wrong offset!");

// ScriptStruct UNION.AppOnlineRaceSetting
// 0x0078 (0x0078 - 0x0000)
struct FAppOnlineRaceSetting final
{
public:
	int32                                         OnlineRacerIndex;                                  // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnlineMatchCount;                                  // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AverageOnlineRank;                                 // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadPlayerCount;                                  // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJoinRaceSquad;                                   // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRivalRaceFriendMatch;                            // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFriendMatchHost;                                 // 0x0022(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            InitialRacerIndexTable;                            // 0x0028(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppOnlineRaceSetting) == 0x000008, "Wrong alignment on FAppOnlineRaceSetting");
static_assert(sizeof(FAppOnlineRaceSetting) == 0x000078, "Wrong size on FAppOnlineRaceSetting");
static_assert(offsetof(FAppOnlineRaceSetting, OnlineRacerIndex) == 0x000000, "Member 'FAppOnlineRaceSetting::OnlineRacerIndex' has a wrong offset!");
static_assert(offsetof(FAppOnlineRaceSetting, OnlineMatchCount) == 0x000004, "Member 'FAppOnlineRaceSetting::OnlineMatchCount' has a wrong offset!");
static_assert(offsetof(FAppOnlineRaceSetting, AverageOnlineRank) == 0x000018, "Member 'FAppOnlineRaceSetting::AverageOnlineRank' has a wrong offset!");
static_assert(offsetof(FAppOnlineRaceSetting, SquadPlayerCount) == 0x00001C, "Member 'FAppOnlineRaceSetting::SquadPlayerCount' has a wrong offset!");
static_assert(offsetof(FAppOnlineRaceSetting, IsJoinRaceSquad) == 0x000020, "Member 'FAppOnlineRaceSetting::IsJoinRaceSquad' has a wrong offset!");
static_assert(offsetof(FAppOnlineRaceSetting, IsRivalRaceFriendMatch) == 0x000021, "Member 'FAppOnlineRaceSetting::IsRivalRaceFriendMatch' has a wrong offset!");
static_assert(offsetof(FAppOnlineRaceSetting, IsFriendMatchHost) == 0x000022, "Member 'FAppOnlineRaceSetting::IsFriendMatchHost' has a wrong offset!");
static_assert(offsetof(FAppOnlineRaceSetting, InitialRacerIndexTable) == 0x000028, "Member 'FAppOnlineRaceSetting::InitialRacerIndexTable' has a wrong offset!");

// ScriptStruct UNION.MachineStickerSlotItemData
// 0x0010 (0x0010 - 0x0000)
struct FMachineStickerSlotItemData final
{
public:
	class UTexture2D*                             StickerDesignTexture;                              // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachineStickerSlotItemData) == 0x000008, "Wrong alignment on FMachineStickerSlotItemData");
static_assert(sizeof(FMachineStickerSlotItemData) == 0x000010, "Wrong size on FMachineStickerSlotItemData");
static_assert(offsetof(FMachineStickerSlotItemData, StickerDesignTexture) == 0x000000, "Member 'FMachineStickerSlotItemData::StickerDesignTexture' has a wrong offset!");
static_assert(offsetof(FMachineStickerSlotItemData, bIsSelected) == 0x000008, "Member 'FMachineStickerSlotItemData::bIsSelected' has a wrong offset!");
static_assert(offsetof(FMachineStickerSlotItemData, bIsNew) == 0x000009, "Member 'FMachineStickerSlotItemData::bIsNew' has a wrong offset!");

// ScriptStruct UNION.AppStageDevelopProgress
// 0x0020 (0x0028 - 0x0008)
struct FAppStageDevelopProgress final : public FTableRowBase
{
public:
	EStageId                                      StageId;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsComplete;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableOnline;                                    // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TargetRomText;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         CompleteRate;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppStageDevelopProgress) == 0x000008, "Wrong alignment on FAppStageDevelopProgress");
static_assert(sizeof(FAppStageDevelopProgress) == 0x000028, "Wrong size on FAppStageDevelopProgress");
static_assert(offsetof(FAppStageDevelopProgress, StageId) == 0x000008, "Member 'FAppStageDevelopProgress::StageId' has a wrong offset!");
static_assert(offsetof(FAppStageDevelopProgress, IsComplete) == 0x000009, "Member 'FAppStageDevelopProgress::IsComplete' has a wrong offset!");
static_assert(offsetof(FAppStageDevelopProgress, IsEnableOnline) == 0x00000A, "Member 'FAppStageDevelopProgress::IsEnableOnline' has a wrong offset!");
static_assert(offsetof(FAppStageDevelopProgress, TargetRomText) == 0x000010, "Member 'FAppStageDevelopProgress::TargetRomText' has a wrong offset!");
static_assert(offsetof(FAppStageDevelopProgress, CompleteRate) == 0x000020, "Member 'FAppStageDevelopProgress::CompleteRate' has a wrong offset!");

// ScriptStruct UNION.AnotherStageLotteryResult
// 0x0004 (0x0004 - 0x0000)
struct FAnotherStageLotteryResult final
{
public:
	EStageId                                      StageId;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETravelRingScreenType                         TravelRingScreenType;                              // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIrregularEventId                             IrregularEventId;                                  // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDomainIndex                                  DomainIndex;                                       // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnotherStageLotteryResult) == 0x000001, "Wrong alignment on FAnotherStageLotteryResult");
static_assert(sizeof(FAnotherStageLotteryResult) == 0x000004, "Wrong size on FAnotherStageLotteryResult");
static_assert(offsetof(FAnotherStageLotteryResult, StageId) == 0x000000, "Member 'FAnotherStageLotteryResult::StageId' has a wrong offset!");
static_assert(offsetof(FAnotherStageLotteryResult, TravelRingScreenType) == 0x000001, "Member 'FAnotherStageLotteryResult::TravelRingScreenType' has a wrong offset!");
static_assert(offsetof(FAnotherStageLotteryResult, IrregularEventId) == 0x000002, "Member 'FAnotherStageLotteryResult::IrregularEventId' has a wrong offset!");
static_assert(offsetof(FAnotherStageLotteryResult, DomainIndex) == 0x000003, "Member 'FAnotherStageLotteryResult::DomainIndex' has a wrong offset!");

// ScriptStruct UNION.RestoredRule
// 0x0020 (0x0020 - 0x0000)
struct FRestoredRule final
{
public:
	EGroupRaceRule                                ruleId;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecialRule;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartUTCTime;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndUTCTime;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRestoredRule) == 0x000008, "Wrong alignment on FRestoredRule");
static_assert(sizeof(FRestoredRule) == 0x000020, "Wrong size on FRestoredRule");
static_assert(offsetof(FRestoredRule, ruleId) == 0x000000, "Member 'FRestoredRule::ruleId' has a wrong offset!");
static_assert(offsetof(FRestoredRule, bSpecialRule) == 0x000001, "Member 'FRestoredRule::bSpecialRule' has a wrong offset!");
static_assert(offsetof(FRestoredRule, StartUTCTime) == 0x000008, "Member 'FRestoredRule::StartUTCTime' has a wrong offset!");
static_assert(offsetof(FRestoredRule, EndUTCTime) == 0x000010, "Member 'FRestoredRule::EndUTCTime' has a wrong offset!");

// ScriptStruct UNION.CourseSwitchSettingSingle
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FCourseSwitchSettingSingle final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCourseSwitchSettingSingle) == 0x000004, "Wrong alignment on FCourseSwitchSettingSingle");
static_assert(sizeof(FCourseSwitchSettingSingle) == 0x00000C, "Wrong size on FCourseSwitchSettingSingle");

// ScriptStruct UNION.MachineCockpitData
// 0x0078 (0x0078 - 0x0000)
struct FMachineCockpitData final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECockpitMode, TSoftClassPtr<class UClass>> AnimInstance;                                    // 0x0028(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineCockpitData) == 0x000008, "Wrong alignment on FMachineCockpitData");
static_assert(sizeof(FMachineCockpitData) == 0x000078, "Wrong size on FMachineCockpitData");
static_assert(offsetof(FMachineCockpitData, Mesh) == 0x000000, "Member 'FMachineCockpitData::Mesh' has a wrong offset!");
static_assert(offsetof(FMachineCockpitData, AnimInstance) == 0x000028, "Member 'FMachineCockpitData::AnimInstance' has a wrong offset!");

// ScriptStruct UNION.PendingDestroyRacer
// 0x0020 (0x0020 - 0x0000)
struct FPendingDestroyRacer final
{
public:
	class ULobbyContextBase*                      LobbyContext;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPendingDestroyRacer) == 0x000008, "Wrong alignment on FPendingDestroyRacer");
static_assert(sizeof(FPendingDestroyRacer) == 0x000020, "Wrong size on FPendingDestroyRacer");
static_assert(offsetof(FPendingDestroyRacer, LobbyContext) == 0x000000, "Member 'FPendingDestroyRacer::LobbyContext' has a wrong offset!");

// ScriptStruct UNION.PendingRefreshPlayerParamData
// 0x0038 (0x0038 - 0x0000)
struct FPendingRefreshPlayerParamData final
{
public:
	class ULobbyContextBase*                      LobbyContext;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x30];                                       // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPendingRefreshPlayerParamData) == 0x000008, "Wrong alignment on FPendingRefreshPlayerParamData");
static_assert(sizeof(FPendingRefreshPlayerParamData) == 0x000038, "Wrong size on FPendingRefreshPlayerParamData");
static_assert(offsetof(FPendingRefreshPlayerParamData, LobbyContext) == 0x000000, "Member 'FPendingRefreshPlayerParamData::LobbyContext' has a wrong offset!");

// ScriptStruct UNION.UnionStickerSystemData
// 0x0020 (0x0020 - 0x0000)
struct FUnionStickerSystemData final
{
public:
	class UMenuInputRecieveObject*                InputReceiver;                                     // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGarageCamera*                          Camera;                                            // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATurntable*                             Turntable;                                         // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMenuRacerBase*                         Racer;                                             // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionStickerSystemData) == 0x000008, "Wrong alignment on FUnionStickerSystemData");
static_assert(sizeof(FUnionStickerSystemData) == 0x000020, "Wrong size on FUnionStickerSystemData");
static_assert(offsetof(FUnionStickerSystemData, InputReceiver) == 0x000000, "Member 'FUnionStickerSystemData::InputReceiver' has a wrong offset!");
static_assert(offsetof(FUnionStickerSystemData, Camera) == 0x000008, "Member 'FUnionStickerSystemData::Camera' has a wrong offset!");
static_assert(offsetof(FUnionStickerSystemData, Turntable) == 0x000010, "Member 'FUnionStickerSystemData::Turntable' has a wrong offset!");
static_assert(offsetof(FUnionStickerSystemData, Racer) == 0x000018, "Member 'FUnionStickerSystemData::Racer' has a wrong offset!");

// ScriptStruct UNION.MachinePartsDialogParameter
// 0x0050 (0x0050 - 0x0000)
struct FMachinePartsDialogParameter final
{
public:
	class FText                                   TitlePrice;                                        // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FText                                   TitleUnlock;                                       // 0x0010(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ButtonYes;                                         // 0x0020(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ButtonNo;                                          // 0x0030(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ButtonOK;                                          // 0x0040(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachinePartsDialogParameter) == 0x000008, "Wrong alignment on FMachinePartsDialogParameter");
static_assert(sizeof(FMachinePartsDialogParameter) == 0x000050, "Wrong size on FMachinePartsDialogParameter");
static_assert(offsetof(FMachinePartsDialogParameter, TitlePrice) == 0x000000, "Member 'FMachinePartsDialogParameter::TitlePrice' has a wrong offset!");
static_assert(offsetof(FMachinePartsDialogParameter, TitleUnlock) == 0x000010, "Member 'FMachinePartsDialogParameter::TitleUnlock' has a wrong offset!");
static_assert(offsetof(FMachinePartsDialogParameter, ButtonYes) == 0x000020, "Member 'FMachinePartsDialogParameter::ButtonYes' has a wrong offset!");
static_assert(offsetof(FMachinePartsDialogParameter, ButtonNo) == 0x000030, "Member 'FMachinePartsDialogParameter::ButtonNo' has a wrong offset!");
static_assert(offsetof(FMachinePartsDialogParameter, ButtonOK) == 0x000040, "Member 'FMachinePartsDialogParameter::ButtonOK' has a wrong offset!");

// ScriptStruct UNION.LobbyInvitationNoticeInfo
// 0x0090 (0x0090 - 0x0000)
struct FLobbyInvitationNoticeInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLobbyId                               LobbyId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 userName;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Date;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconId;                                            // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconBgColor;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaying;                                          // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyInvitationNoticeInfo) == 0x000008, "Wrong alignment on FLobbyInvitationNoticeInfo");
static_assert(sizeof(FLobbyInvitationNoticeInfo) == 0x000090, "Wrong size on FLobbyInvitationNoticeInfo");
static_assert(offsetof(FLobbyInvitationNoticeInfo, UserId) == 0x000000, "Member 'FLobbyInvitationNoticeInfo::UserId' has a wrong offset!");
static_assert(offsetof(FLobbyInvitationNoticeInfo, ProductUserId) == 0x000010, "Member 'FLobbyInvitationNoticeInfo::ProductUserId' has a wrong offset!");
static_assert(offsetof(FLobbyInvitationNoticeInfo, LobbyId) == 0x000020, "Member 'FLobbyInvitationNoticeInfo::LobbyId' has a wrong offset!");
static_assert(offsetof(FLobbyInvitationNoticeInfo, userName) == 0x000030, "Member 'FLobbyInvitationNoticeInfo::userName' has a wrong offset!");
static_assert(offsetof(FLobbyInvitationNoticeInfo, Date) == 0x000040, "Member 'FLobbyInvitationNoticeInfo::Date' has a wrong offset!");
static_assert(offsetof(FLobbyInvitationNoticeInfo, Platform) == 0x000050, "Member 'FLobbyInvitationNoticeInfo::Platform' has a wrong offset!");
static_assert(offsetof(FLobbyInvitationNoticeInfo, IconId) == 0x000060, "Member 'FLobbyInvitationNoticeInfo::IconId' has a wrong offset!");
static_assert(offsetof(FLobbyInvitationNoticeInfo, IconBgColor) == 0x000068, "Member 'FLobbyInvitationNoticeInfo::IconBgColor' has a wrong offset!");
static_assert(offsetof(FLobbyInvitationNoticeInfo, bPlaying) == 0x000078, "Member 'FLobbyInvitationNoticeInfo::bPlaying' has a wrong offset!");
static_assert(offsetof(FLobbyInvitationNoticeInfo, PlatformUserId) == 0x000080, "Member 'FLobbyInvitationNoticeInfo::PlatformUserId' has a wrong offset!");

// ScriptStruct UNION.FriendListConfirmWidgetData
// 0x0050 (0x0050 - 0x0000)
struct FFriendListConfirmWidgetData final
{
public:
	EFriendListConfirmWindowButtonType            ButtonType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitialButtonIndex;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CancelButtonIndex;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MessageText;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   AttentionText;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           ButtonText;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendListConfirmWidgetData) == 0x000008, "Wrong alignment on FFriendListConfirmWidgetData");
static_assert(sizeof(FFriendListConfirmWidgetData) == 0x000050, "Wrong size on FFriendListConfirmWidgetData");
static_assert(offsetof(FFriendListConfirmWidgetData, ButtonType) == 0x000000, "Member 'FFriendListConfirmWidgetData::ButtonType' has a wrong offset!");
static_assert(offsetof(FFriendListConfirmWidgetData, InitialButtonIndex) == 0x000004, "Member 'FFriendListConfirmWidgetData::InitialButtonIndex' has a wrong offset!");
static_assert(offsetof(FFriendListConfirmWidgetData, CancelButtonIndex) == 0x000008, "Member 'FFriendListConfirmWidgetData::CancelButtonIndex' has a wrong offset!");
static_assert(offsetof(FFriendListConfirmWidgetData, TitleText) == 0x000010, "Member 'FFriendListConfirmWidgetData::TitleText' has a wrong offset!");
static_assert(offsetof(FFriendListConfirmWidgetData, MessageText) == 0x000020, "Member 'FFriendListConfirmWidgetData::MessageText' has a wrong offset!");
static_assert(offsetof(FFriendListConfirmWidgetData, AttentionText) == 0x000030, "Member 'FFriendListConfirmWidgetData::AttentionText' has a wrong offset!");
static_assert(offsetof(FFriendListConfirmWidgetData, ButtonText) == 0x000040, "Member 'FFriendListConfirmWidgetData::ButtonText' has a wrong offset!");

// ScriptStruct UNION.RacerParamData
// 0x0050 (0x0050 - 0x0000)
struct FRacerParamData final
{
public:
	float                                         DriverSpeed;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriverAccel;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriverDash;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriverHandling;                                    // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriverPower;                                       // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MachineSpeed;                                      // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MachineAccel;                                      // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MachineDash;                                       // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MachineHandling;                                   // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MachinePower;                                      // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GadgetSpeed;                                       // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GadgetAccel;                                       // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GadgetDash;                                        // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GadgetHandling;                                    // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GadgetPower;                                       // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalSpeed;                                        // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalAccel;                                        // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDash;                                         // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalHandling;                                     // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPower;                                        // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerParamData) == 0x000004, "Wrong alignment on FRacerParamData");
static_assert(sizeof(FRacerParamData) == 0x000050, "Wrong size on FRacerParamData");
static_assert(offsetof(FRacerParamData, DriverSpeed) == 0x000000, "Member 'FRacerParamData::DriverSpeed' has a wrong offset!");
static_assert(offsetof(FRacerParamData, DriverAccel) == 0x000004, "Member 'FRacerParamData::DriverAccel' has a wrong offset!");
static_assert(offsetof(FRacerParamData, DriverDash) == 0x000008, "Member 'FRacerParamData::DriverDash' has a wrong offset!");
static_assert(offsetof(FRacerParamData, DriverHandling) == 0x00000C, "Member 'FRacerParamData::DriverHandling' has a wrong offset!");
static_assert(offsetof(FRacerParamData, DriverPower) == 0x000010, "Member 'FRacerParamData::DriverPower' has a wrong offset!");
static_assert(offsetof(FRacerParamData, MachineSpeed) == 0x000014, "Member 'FRacerParamData::MachineSpeed' has a wrong offset!");
static_assert(offsetof(FRacerParamData, MachineAccel) == 0x000018, "Member 'FRacerParamData::MachineAccel' has a wrong offset!");
static_assert(offsetof(FRacerParamData, MachineDash) == 0x00001C, "Member 'FRacerParamData::MachineDash' has a wrong offset!");
static_assert(offsetof(FRacerParamData, MachineHandling) == 0x000020, "Member 'FRacerParamData::MachineHandling' has a wrong offset!");
static_assert(offsetof(FRacerParamData, MachinePower) == 0x000024, "Member 'FRacerParamData::MachinePower' has a wrong offset!");
static_assert(offsetof(FRacerParamData, GadgetSpeed) == 0x000028, "Member 'FRacerParamData::GadgetSpeed' has a wrong offset!");
static_assert(offsetof(FRacerParamData, GadgetAccel) == 0x00002C, "Member 'FRacerParamData::GadgetAccel' has a wrong offset!");
static_assert(offsetof(FRacerParamData, GadgetDash) == 0x000030, "Member 'FRacerParamData::GadgetDash' has a wrong offset!");
static_assert(offsetof(FRacerParamData, GadgetHandling) == 0x000034, "Member 'FRacerParamData::GadgetHandling' has a wrong offset!");
static_assert(offsetof(FRacerParamData, GadgetPower) == 0x000038, "Member 'FRacerParamData::GadgetPower' has a wrong offset!");
static_assert(offsetof(FRacerParamData, TotalSpeed) == 0x00003C, "Member 'FRacerParamData::TotalSpeed' has a wrong offset!");
static_assert(offsetof(FRacerParamData, TotalAccel) == 0x000040, "Member 'FRacerParamData::TotalAccel' has a wrong offset!");
static_assert(offsetof(FRacerParamData, TotalDash) == 0x000044, "Member 'FRacerParamData::TotalDash' has a wrong offset!");
static_assert(offsetof(FRacerParamData, TotalHandling) == 0x000048, "Member 'FRacerParamData::TotalHandling' has a wrong offset!");
static_assert(offsetof(FRacerParamData, TotalPower) == 0x00004C, "Member 'FRacerParamData::TotalPower' has a wrong offset!");

// ScriptStruct UNION.MachineMaterialData
// 0x00A8 (0x00A8 - 0x0000)
struct FMachineMaterialData final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      CacheScalarParameter;                              // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        CacheVectorParameter;                              // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineMaterialData) == 0x000008, "Wrong alignment on FMachineMaterialData");
static_assert(sizeof(FMachineMaterialData) == 0x0000A8, "Wrong size on FMachineMaterialData");
static_assert(offsetof(FMachineMaterialData, Mid) == 0x000000, "Member 'FMachineMaterialData::Mid' has a wrong offset!");
static_assert(offsetof(FMachineMaterialData, CacheScalarParameter) == 0x000008, "Member 'FMachineMaterialData::CacheScalarParameter' has a wrong offset!");
static_assert(offsetof(FMachineMaterialData, CacheVectorParameter) == 0x000058, "Member 'FMachineMaterialData::CacheVectorParameter' has a wrong offset!");

// ScriptStruct UNION.AppOutRaceSetting
// 0x0040 (0x0040 - 0x0000)
struct FAppOutRaceSetting final
{
public:
	bool                                          bUsingDonpaTicketRestart;                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGadgetPlateRankUp;                                // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERewardType>                           InGameGettingRewards;                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EPartyRacePreset                              RaceParkPresetId;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EStageId>                              AnotherStageIds;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EStageId>                              AlreadyRunStageIds;                                // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppOutRaceSetting) == 0x000008, "Wrong alignment on FAppOutRaceSetting");
static_assert(sizeof(FAppOutRaceSetting) == 0x000040, "Wrong size on FAppOutRaceSetting");
static_assert(offsetof(FAppOutRaceSetting, bUsingDonpaTicketRestart) == 0x000000, "Member 'FAppOutRaceSetting::bUsingDonpaTicketRestart' has a wrong offset!");
static_assert(offsetof(FAppOutRaceSetting, bGadgetPlateRankUp) == 0x000001, "Member 'FAppOutRaceSetting::bGadgetPlateRankUp' has a wrong offset!");
static_assert(offsetof(FAppOutRaceSetting, InGameGettingRewards) == 0x000008, "Member 'FAppOutRaceSetting::InGameGettingRewards' has a wrong offset!");
static_assert(offsetof(FAppOutRaceSetting, RaceParkPresetId) == 0x000018, "Member 'FAppOutRaceSetting::RaceParkPresetId' has a wrong offset!");
static_assert(offsetof(FAppOutRaceSetting, AnotherStageIds) == 0x000020, "Member 'FAppOutRaceSetting::AnotherStageIds' has a wrong offset!");
static_assert(offsetof(FAppOutRaceSetting, AlreadyRunStageIds) == 0x000030, "Member 'FAppOutRaceSetting::AlreadyRunStageIds' has a wrong offset!");

// ScriptStruct UNION.BakeRequestData
// 0x0020 (0x0020 - 0x0000)
struct FBakeRequestData final
{
public:
	class UStickerBakerHandle*                    Handle;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUserStickerData>               StickerArray;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBakeRequestData) == 0x000008, "Wrong alignment on FBakeRequestData");
static_assert(sizeof(FBakeRequestData) == 0x000020, "Wrong size on FBakeRequestData");
static_assert(offsetof(FBakeRequestData, Handle) == 0x000000, "Member 'FBakeRequestData::Handle' has a wrong offset!");
static_assert(offsetof(FBakeRequestData, StickerArray) == 0x000008, "Member 'FBakeRequestData::StickerArray' has a wrong offset!");

// ScriptStruct UNION.MachineColorSelectData
// 0x0014 (0x0014 - 0x0000)
struct FMachineColorSelectData final
{
public:
	int32                                         MachineColorId;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineColorSelectData) == 0x000004, "Wrong alignment on FMachineColorSelectData");
static_assert(sizeof(FMachineColorSelectData) == 0x000014, "Wrong size on FMachineColorSelectData");
static_assert(offsetof(FMachineColorSelectData, MachineColorId) == 0x000000, "Member 'FMachineColorSelectData::MachineColorId' has a wrong offset!");
static_assert(offsetof(FMachineColorSelectData, Color) == 0x000004, "Member 'FMachineColorSelectData::Color' has a wrong offset!");

// ScriptStruct UNION.DriverData
// 0x00C8 (0x0390 - 0x02C8)
struct FDriverData final : public FDriverDataCore
{
public:
	TSoftObjectPtr<class ULevelSequence>          SceneCeremony;                                     // 0x02C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ULevelSequence>>  SceneRivalCar;                                     // 0x02F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ULevelSequence>>  SceneRivalHover;                                   // 0x0300(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture2D>>      UnlockCutsceneTextureList;                         // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              UnlockCutsceneLastTexture;                         // 0x0320(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   UnlockCutsceneTopText;                             // 0x0348(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   UnlockCutsceneBottomText;                          // 0x0358(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   UnlockCutsceneNameText;                            // 0x0368(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   NameForItemGettingWindow;                          // 0x0378(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         ContentUnlockSortID;                               // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDriverData) == 0x000008, "Wrong alignment on FDriverData");
static_assert(sizeof(FDriverData) == 0x000390, "Wrong size on FDriverData");
static_assert(offsetof(FDriverData, SceneCeremony) == 0x0002C8, "Member 'FDriverData::SceneCeremony' has a wrong offset!");
static_assert(offsetof(FDriverData, SceneRivalCar) == 0x0002F0, "Member 'FDriverData::SceneRivalCar' has a wrong offset!");
static_assert(offsetof(FDriverData, SceneRivalHover) == 0x000300, "Member 'FDriverData::SceneRivalHover' has a wrong offset!");
static_assert(offsetof(FDriverData, UnlockCutsceneTextureList) == 0x000310, "Member 'FDriverData::UnlockCutsceneTextureList' has a wrong offset!");
static_assert(offsetof(FDriverData, UnlockCutsceneLastTexture) == 0x000320, "Member 'FDriverData::UnlockCutsceneLastTexture' has a wrong offset!");
static_assert(offsetof(FDriverData, UnlockCutsceneTopText) == 0x000348, "Member 'FDriverData::UnlockCutsceneTopText' has a wrong offset!");
static_assert(offsetof(FDriverData, UnlockCutsceneBottomText) == 0x000358, "Member 'FDriverData::UnlockCutsceneBottomText' has a wrong offset!");
static_assert(offsetof(FDriverData, UnlockCutsceneNameText) == 0x000368, "Member 'FDriverData::UnlockCutsceneNameText' has a wrong offset!");
static_assert(offsetof(FDriverData, NameForItemGettingWindow) == 0x000378, "Member 'FDriverData::NameForItemGettingWindow' has a wrong offset!");
static_assert(offsetof(FDriverData, ContentUnlockSortID) == 0x000388, "Member 'FDriverData::ContentUnlockSortID' has a wrong offset!");

// ScriptStruct UNION.MachineEffectData
// 0x0060 (0x0060 - 0x0000)
struct FMachineEffectData final
{
public:
	class UNiagaraSystem*                         Asset;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableGroup;                                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableAfterGoal;                                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUpdateTransform;                                 // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AttachmentRule;                                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineEffectVisibleType                     VisibleType;                                       // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetLocation;                                    // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotator;                                     // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineEffectData) == 0x000008, "Wrong alignment on FMachineEffectData");
static_assert(sizeof(FMachineEffectData) == 0x000060, "Wrong size on FMachineEffectData");
static_assert(offsetof(FMachineEffectData, Asset) == 0x000000, "Member 'FMachineEffectData::Asset' has a wrong offset!");
static_assert(offsetof(FMachineEffectData, AttachSocketName) == 0x000008, "Member 'FMachineEffectData::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FMachineEffectData, IsLoop) == 0x000010, "Member 'FMachineEffectData::IsLoop' has a wrong offset!");
static_assert(offsetof(FMachineEffectData, IsEnableGroup) == 0x000011, "Member 'FMachineEffectData::IsEnableGroup' has a wrong offset!");
static_assert(offsetof(FMachineEffectData, IsEnableAfterGoal) == 0x000012, "Member 'FMachineEffectData::IsEnableAfterGoal' has a wrong offset!");
static_assert(offsetof(FMachineEffectData, IsUpdateTransform) == 0x000013, "Member 'FMachineEffectData::IsUpdateTransform' has a wrong offset!");
static_assert(offsetof(FMachineEffectData, AttachmentRule) == 0x000014, "Member 'FMachineEffectData::AttachmentRule' has a wrong offset!");
static_assert(offsetof(FMachineEffectData, VisibleType) == 0x000015, "Member 'FMachineEffectData::VisibleType' has a wrong offset!");
static_assert(offsetof(FMachineEffectData, OffsetLocation) == 0x000018, "Member 'FMachineEffectData::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FMachineEffectData, OffsetRotator) == 0x000030, "Member 'FMachineEffectData::OffsetRotator' has a wrong offset!");
static_assert(offsetof(FMachineEffectData, Scale) == 0x000048, "Member 'FMachineEffectData::Scale' has a wrong offset!");

// ScriptStruct UNION.WirelessLobbyContextCreateSettings
// 0x0018 (0x0018 - 0x0000)
struct FWirelessLobbyContextCreateSettings final
{
public:
	int64                                         MatchmakeKey;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HostPlayerIconId;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HostPlayerIconBgColorId;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWirelessLobbyContextCreateSettings) == 0x000008, "Wrong alignment on FWirelessLobbyContextCreateSettings");
static_assert(sizeof(FWirelessLobbyContextCreateSettings) == 0x000018, "Wrong size on FWirelessLobbyContextCreateSettings");
static_assert(offsetof(FWirelessLobbyContextCreateSettings, MatchmakeKey) == 0x000000, "Member 'FWirelessLobbyContextCreateSettings::MatchmakeKey' has a wrong offset!");
static_assert(offsetof(FWirelessLobbyContextCreateSettings, HostPlayerIconId) == 0x000008, "Member 'FWirelessLobbyContextCreateSettings::HostPlayerIconId' has a wrong offset!");
static_assert(offsetof(FWirelessLobbyContextCreateSettings, HostPlayerIconBgColorId) == 0x00000C, "Member 'FWirelessLobbyContextCreateSettings::HostPlayerIconBgColorId' has a wrong offset!");
static_assert(offsetof(FWirelessLobbyContextCreateSettings, MaxPlayers) == 0x000010, "Member 'FWirelessLobbyContextCreateSettings::MaxPlayers' has a wrong offset!");

// ScriptStruct UNION.AppRaceStageSetting
// 0x0004 (0x0004 - 0x0000)
struct FAppRaceStageSetting final
{
public:
	EDomainIndex                                  DomainIndex;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStageId                                      StageId;                                           // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETravelRingScreenType                         TravelRingScreenType;                              // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIrregularEventId                             IrregularEventId;                                  // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppRaceStageSetting) == 0x000001, "Wrong alignment on FAppRaceStageSetting");
static_assert(sizeof(FAppRaceStageSetting) == 0x000004, "Wrong size on FAppRaceStageSetting");
static_assert(offsetof(FAppRaceStageSetting, DomainIndex) == 0x000000, "Member 'FAppRaceStageSetting::DomainIndex' has a wrong offset!");
static_assert(offsetof(FAppRaceStageSetting, StageId) == 0x000001, "Member 'FAppRaceStageSetting::StageId' has a wrong offset!");
static_assert(offsetof(FAppRaceStageSetting, TravelRingScreenType) == 0x000002, "Member 'FAppRaceStageSetting::TravelRingScreenType' has a wrong offset!");
static_assert(offsetof(FAppRaceStageSetting, IrregularEventId) == 0x000003, "Member 'FAppRaceStageSetting::IrregularEventId' has a wrong offset!");

// ScriptStruct UNION.FriendListSubMenuWidgetData
// 0x0010 (0x0010 - 0x0000)
struct FFriendListSubMenuWidgetData final
{
public:
	TArray<EFriendListCommandType>                CommandType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendListSubMenuWidgetData) == 0x000008, "Wrong alignment on FFriendListSubMenuWidgetData");
static_assert(sizeof(FFriendListSubMenuWidgetData) == 0x000010, "Wrong size on FFriendListSubMenuWidgetData");
static_assert(offsetof(FFriendListSubMenuWidgetData, CommandType) == 0x000000, "Member 'FFriendListSubMenuWidgetData::CommandType' has a wrong offset!");

// ScriptStruct UNION.FriendListPlayerInfo
// 0x00E8 (0x00E8 - 0x0000)
struct FFriendListPlayerInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 displayCode;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLobbyId                               LobbyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 userName;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Date;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrossplayPlatform                            PlatformType;                                      // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELobbyType                                    LobbyType;                                         // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IconId;                                            // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaying;                                          // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBlock;                                          // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPFBlock;                                        // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrossPlay;                                        // 0x006B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceptFriendApply;                                // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceptLobbyInvitation;                            // 0x006D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendListType                               ListType;                                          // 0x006E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              PlayerIconTexture;                                 // 0x0070(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PlayerIconBgColor;                                 // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommon_HistoryData                    HistoryData;                                       // 0x00B8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCommon_RatingData                     RatingData;                                        // 0x00D8(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_DegreeData                     DegreeData;                                        // 0x00DC(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendListPlayerInfo) == 0x000008, "Wrong alignment on FFriendListPlayerInfo");
static_assert(sizeof(FFriendListPlayerInfo) == 0x0000E8, "Wrong size on FFriendListPlayerInfo");
static_assert(offsetof(FFriendListPlayerInfo, UserId) == 0x000000, "Member 'FFriendListPlayerInfo::UserId' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, ProductUserId) == 0x000010, "Member 'FFriendListPlayerInfo::ProductUserId' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, displayCode) == 0x000020, "Member 'FFriendListPlayerInfo::displayCode' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, LobbyId) == 0x000030, "Member 'FFriendListPlayerInfo::LobbyId' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, userName) == 0x000040, "Member 'FFriendListPlayerInfo::userName' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, Date) == 0x000050, "Member 'FFriendListPlayerInfo::Date' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, PlatformType) == 0x000060, "Member 'FFriendListPlayerInfo::PlatformType' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, LobbyType) == 0x000061, "Member 'FFriendListPlayerInfo::LobbyType' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, IconId) == 0x000064, "Member 'FFriendListPlayerInfo::IconId' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, bPlaying) == 0x000068, "Member 'FFriendListPlayerInfo::bPlaying' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, bIsBlock) == 0x000069, "Member 'FFriendListPlayerInfo::bIsBlock' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, bIsPFBlock) == 0x00006A, "Member 'FFriendListPlayerInfo::bIsPFBlock' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, bCrossPlay) == 0x00006B, "Member 'FFriendListPlayerInfo::bCrossPlay' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, bAcceptFriendApply) == 0x00006C, "Member 'FFriendListPlayerInfo::bAcceptFriendApply' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, bAcceptLobbyInvitation) == 0x00006D, "Member 'FFriendListPlayerInfo::bAcceptLobbyInvitation' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, ListType) == 0x00006E, "Member 'FFriendListPlayerInfo::ListType' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, PlayerIconTexture) == 0x000070, "Member 'FFriendListPlayerInfo::PlayerIconTexture' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, PlayerIconBgColor) == 0x000098, "Member 'FFriendListPlayerInfo::PlayerIconBgColor' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, PlatformUserId) == 0x0000A8, "Member 'FFriendListPlayerInfo::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, HistoryData) == 0x0000B8, "Member 'FFriendListPlayerInfo::HistoryData' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, RatingData) == 0x0000D8, "Member 'FFriendListPlayerInfo::RatingData' has a wrong offset!");
static_assert(offsetof(FFriendListPlayerInfo, DegreeData) == 0x0000DC, "Member 'FFriendListPlayerInfo::DegreeData' has a wrong offset!");

// ScriptStruct UNION.FriendListOnlineSettingData
// 0x0030 (0x0030 - 0x0000)
struct FFriendListOnlineSettingData final
{
public:
	EFriendListOnlineSettingType                  SettingType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendListType                               ListType;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendListCommandType                        CommandType;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ExplanationText;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bDefaultSetting;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetting;                                          // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendListOnlineSettingData) == 0x000008, "Wrong alignment on FFriendListOnlineSettingData");
static_assert(sizeof(FFriendListOnlineSettingData) == 0x000030, "Wrong size on FFriendListOnlineSettingData");
static_assert(offsetof(FFriendListOnlineSettingData, SettingType) == 0x000000, "Member 'FFriendListOnlineSettingData::SettingType' has a wrong offset!");
static_assert(offsetof(FFriendListOnlineSettingData, ListType) == 0x000001, "Member 'FFriendListOnlineSettingData::ListType' has a wrong offset!");
static_assert(offsetof(FFriendListOnlineSettingData, CommandType) == 0x000002, "Member 'FFriendListOnlineSettingData::CommandType' has a wrong offset!");
static_assert(offsetof(FFriendListOnlineSettingData, TitleText) == 0x000008, "Member 'FFriendListOnlineSettingData::TitleText' has a wrong offset!");
static_assert(offsetof(FFriendListOnlineSettingData, ExplanationText) == 0x000018, "Member 'FFriendListOnlineSettingData::ExplanationText' has a wrong offset!");
static_assert(offsetof(FFriendListOnlineSettingData, bDefaultSetting) == 0x000028, "Member 'FFriendListOnlineSettingData::bDefaultSetting' has a wrong offset!");
static_assert(offsetof(FFriendListOnlineSettingData, bSetting) == 0x000029, "Member 'FFriendListOnlineSettingData::bSetting' has a wrong offset!");

// ScriptStruct UNION.FriendListResultWidgetData
// 0x0030 (0x0030 - 0x0000)
struct FFriendListResultWidgetData final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MessageText;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   AttentionText;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendListResultWidgetData) == 0x000008, "Wrong alignment on FFriendListResultWidgetData");
static_assert(sizeof(FFriendListResultWidgetData) == 0x000030, "Wrong size on FFriendListResultWidgetData");
static_assert(offsetof(FFriendListResultWidgetData, TitleText) == 0x000000, "Member 'FFriendListResultWidgetData::TitleText' has a wrong offset!");
static_assert(offsetof(FFriendListResultWidgetData, MessageText) == 0x000010, "Member 'FFriendListResultWidgetData::MessageText' has a wrong offset!");
static_assert(offsetof(FFriendListResultWidgetData, AttentionText) == 0x000020, "Member 'FFriendListResultWidgetData::AttentionText' has a wrong offset!");

// ScriptStruct UNION.OptionCellAudioTableRow
// 0x0030 (0x0038 - 0x0008)
struct FOptionCellAudioTableRow final : public FTableRowBase
{
public:
	EOptionAudioCell                              OptionKind;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionValidPlatform                          Platform;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionCellType                               CellType;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CellTitle;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CellGuide;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         GaugeMax;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptionCellAudioTableRow) == 0x000008, "Wrong alignment on FOptionCellAudioTableRow");
static_assert(sizeof(FOptionCellAudioTableRow) == 0x000038, "Wrong size on FOptionCellAudioTableRow");
static_assert(offsetof(FOptionCellAudioTableRow, OptionKind) == 0x000008, "Member 'FOptionCellAudioTableRow::OptionKind' has a wrong offset!");
static_assert(offsetof(FOptionCellAudioTableRow, Platform) == 0x000009, "Member 'FOptionCellAudioTableRow::Platform' has a wrong offset!");
static_assert(offsetof(FOptionCellAudioTableRow, CellType) == 0x00000A, "Member 'FOptionCellAudioTableRow::CellType' has a wrong offset!");
static_assert(offsetof(FOptionCellAudioTableRow, CellTitle) == 0x000010, "Member 'FOptionCellAudioTableRow::CellTitle' has a wrong offset!");
static_assert(offsetof(FOptionCellAudioTableRow, CellGuide) == 0x000020, "Member 'FOptionCellAudioTableRow::CellGuide' has a wrong offset!");
static_assert(offsetof(FOptionCellAudioTableRow, GaugeMax) == 0x000030, "Member 'FOptionCellAudioTableRow::GaugeMax' has a wrong offset!");

// ScriptStruct UNION.GadgetUIData2
// 0x0010 (0x0010 - 0x0000)
struct FGadgetUIData2 final
{
public:
	EGadgetId                                     gadgetId;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGadgetState                                  State;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPurchase;                                      // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexInSelectWindow;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationXInSelectWindow;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationYInSelectWindow;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetUIData2) == 0x000004, "Wrong alignment on FGadgetUIData2");
static_assert(sizeof(FGadgetUIData2) == 0x000010, "Wrong size on FGadgetUIData2");
static_assert(offsetof(FGadgetUIData2, gadgetId) == 0x000000, "Member 'FGadgetUIData2::gadgetId' has a wrong offset!");
static_assert(offsetof(FGadgetUIData2, State) == 0x000001, "Member 'FGadgetUIData2::State' has a wrong offset!");
static_assert(offsetof(FGadgetUIData2, bIsNew) == 0x000002, "Member 'FGadgetUIData2::bIsNew' has a wrong offset!");
static_assert(offsetof(FGadgetUIData2, bCanPurchase) == 0x000003, "Member 'FGadgetUIData2::bCanPurchase' has a wrong offset!");
static_assert(offsetof(FGadgetUIData2, IndexInSelectWindow) == 0x000004, "Member 'FGadgetUIData2::IndexInSelectWindow' has a wrong offset!");
static_assert(offsetof(FGadgetUIData2, LocationXInSelectWindow) == 0x000008, "Member 'FGadgetUIData2::LocationXInSelectWindow' has a wrong offset!");
static_assert(offsetof(FGadgetUIData2, LocationYInSelectWindow) == 0x00000C, "Member 'FGadgetUIData2::LocationYInSelectWindow' has a wrong offset!");

// ScriptStruct UNION.GadgetSelectWindowData
// 0x0018 (0x0018 - 0x0000)
struct FGadgetSelectWindowData final
{
public:
	int32                                         PlayerNum;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGadgetUIData2>                 GadgetUIDataList;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetSelectWindowData) == 0x000008, "Wrong alignment on FGadgetSelectWindowData");
static_assert(sizeof(FGadgetSelectWindowData) == 0x000018, "Wrong size on FGadgetSelectWindowData");
static_assert(offsetof(FGadgetSelectWindowData, PlayerNum) == 0x000000, "Member 'FGadgetSelectWindowData::PlayerNum' has a wrong offset!");
static_assert(offsetof(FGadgetSelectWindowData, GadgetUIDataList) == 0x000008, "Member 'FGadgetSelectWindowData::GadgetUIDataList' has a wrong offset!");

// ScriptStruct UNION.AnotherStageLotteryParameter
// 0x0028 (0x0028 - 0x0000)
struct FAnotherStageLotteryParameter final
{
public:
	EStageId                                      CurrentMainStageId;                                // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EStageId>                              PreviousLotteryMainStageIds;                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EStageId>                              PreviousLotteryAnotherStageIds;                    // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnotherStageLotteryParameter) == 0x000008, "Wrong alignment on FAnotherStageLotteryParameter");
static_assert(sizeof(FAnotherStageLotteryParameter) == 0x000028, "Wrong size on FAnotherStageLotteryParameter");
static_assert(offsetof(FAnotherStageLotteryParameter, CurrentMainStageId) == 0x000000, "Member 'FAnotherStageLotteryParameter::CurrentMainStageId' has a wrong offset!");
static_assert(offsetof(FAnotherStageLotteryParameter, PreviousLotteryMainStageIds) == 0x000008, "Member 'FAnotherStageLotteryParameter::PreviousLotteryMainStageIds' has a wrong offset!");
static_assert(offsetof(FAnotherStageLotteryParameter, PreviousLotteryAnotherStageIds) == 0x000018, "Member 'FAnotherStageLotteryParameter::PreviousLotteryAnotherStageIds' has a wrong offset!");

// ScriptStruct UNION.GadgetCustomWindowCategoryData
// 0x0010 (0x0010 - 0x0000)
struct FGadgetCustomWindowCategoryData final
{
public:
	TArray<EGadgetId>                             Gadgets;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetCustomWindowCategoryData) == 0x000008, "Wrong alignment on FGadgetCustomWindowCategoryData");
static_assert(sizeof(FGadgetCustomWindowCategoryData) == 0x000010, "Wrong size on FGadgetCustomWindowCategoryData");
static_assert(offsetof(FGadgetCustomWindowCategoryData, Gadgets) == 0x000000, "Member 'FGadgetCustomWindowCategoryData::Gadgets' has a wrong offset!");

// ScriptStruct UNION.GarageCameraMovementArmData
// 0x0060 (0x0068 - 0x0008)
struct FGarageCameraMovementArmData final : public FTableRowBase
{
public:
	double                                        Radius;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        HorizontalAngle;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        VerticalAngle;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pivot;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPoint;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGarageCameraMovementArmData) == 0x000008, "Wrong alignment on FGarageCameraMovementArmData");
static_assert(sizeof(FGarageCameraMovementArmData) == 0x000068, "Wrong size on FGarageCameraMovementArmData");
static_assert(offsetof(FGarageCameraMovementArmData, Radius) == 0x000008, "Member 'FGarageCameraMovementArmData::Radius' has a wrong offset!");
static_assert(offsetof(FGarageCameraMovementArmData, HorizontalAngle) == 0x000010, "Member 'FGarageCameraMovementArmData::HorizontalAngle' has a wrong offset!");
static_assert(offsetof(FGarageCameraMovementArmData, VerticalAngle) == 0x000018, "Member 'FGarageCameraMovementArmData::VerticalAngle' has a wrong offset!");
static_assert(offsetof(FGarageCameraMovementArmData, Pivot) == 0x000020, "Member 'FGarageCameraMovementArmData::Pivot' has a wrong offset!");
static_assert(offsetof(FGarageCameraMovementArmData, TargetPoint) == 0x000038, "Member 'FGarageCameraMovementArmData::TargetPoint' has a wrong offset!");
static_assert(offsetof(FGarageCameraMovementArmData, RotationOffset) == 0x000050, "Member 'FGarageCameraMovementArmData::RotationOffset' has a wrong offset!");

// ScriptStruct UNION.GarageCameraMovementTransformData
// 0x0068 (0x0070 - 0x0008)
struct FGarageCameraMovementTransformData final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGarageCameraMovementTransformData) == 0x000010, "Wrong alignment on FGarageCameraMovementTransformData");
static_assert(sizeof(FGarageCameraMovementTransformData) == 0x000070, "Wrong size on FGarageCameraMovementTransformData");
static_assert(offsetof(FGarageCameraMovementTransformData, Transform) == 0x000010, "Member 'FGarageCameraMovementTransformData::Transform' has a wrong offset!");

// ScriptStruct UNION.HintDataTableRow
// 0x0068 (0x0070 - 0x0008)
struct FHintDataTableRow final : public FTableRowBase
{
public:
	EHintId                                       HintId;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHintCategory                                 HintCategory;                                      // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TipsIndex;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           ExplanationText;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture2D>>      ImageTexture;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           ImageWidget;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<float>                                 ImageWidgetAnimationInterval;                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EHintId>                               ReadSetHintId;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHintDataTableRow) == 0x000008, "Wrong alignment on FHintDataTableRow");
static_assert(sizeof(FHintDataTableRow) == 0x000070, "Wrong size on FHintDataTableRow");
static_assert(offsetof(FHintDataTableRow, HintId) == 0x000008, "Member 'FHintDataTableRow::HintId' has a wrong offset!");
static_assert(offsetof(FHintDataTableRow, IsEnabled) == 0x000009, "Member 'FHintDataTableRow::IsEnabled' has a wrong offset!");
static_assert(offsetof(FHintDataTableRow, HintCategory) == 0x00000A, "Member 'FHintDataTableRow::HintCategory' has a wrong offset!");
static_assert(offsetof(FHintDataTableRow, TipsIndex) == 0x00000C, "Member 'FHintDataTableRow::TipsIndex' has a wrong offset!");
static_assert(offsetof(FHintDataTableRow, TitleText) == 0x000010, "Member 'FHintDataTableRow::TitleText' has a wrong offset!");
static_assert(offsetof(FHintDataTableRow, ExplanationText) == 0x000020, "Member 'FHintDataTableRow::ExplanationText' has a wrong offset!");
static_assert(offsetof(FHintDataTableRow, ImageTexture) == 0x000030, "Member 'FHintDataTableRow::ImageTexture' has a wrong offset!");
static_assert(offsetof(FHintDataTableRow, ImageWidget) == 0x000040, "Member 'FHintDataTableRow::ImageWidget' has a wrong offset!");
static_assert(offsetof(FHintDataTableRow, ImageWidgetAnimationInterval) == 0x000050, "Member 'FHintDataTableRow::ImageWidgetAnimationInterval' has a wrong offset!");
static_assert(offsetof(FHintDataTableRow, ReadSetHintId) == 0x000060, "Member 'FHintDataTableRow::ReadSetHintId' has a wrong offset!");

// ScriptStruct UNION.PlayerProfileHideActorStruct
// 0x0018 (0x0018 - 0x0000)
struct FPlayerProfileHideActorStruct final
{
public:
	TArray<int32>                                 LobbyIndexList;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsHideCubot;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerProfileHideActorStruct) == 0x000008, "Wrong alignment on FPlayerProfileHideActorStruct");
static_assert(sizeof(FPlayerProfileHideActorStruct) == 0x000018, "Wrong size on FPlayerProfileHideActorStruct");
static_assert(offsetof(FPlayerProfileHideActorStruct, LobbyIndexList) == 0x000000, "Member 'FPlayerProfileHideActorStruct::LobbyIndexList' has a wrong offset!");
static_assert(offsetof(FPlayerProfileHideActorStruct, bIsHideCubot) == 0x000010, "Member 'FPlayerProfileHideActorStruct::bIsHideCubot' has a wrong offset!");

// ScriptStruct UNION.MachineSurfaceEffectAssetData
// 0x00F0 (0x00F0 - 0x0000)
struct FMachineSurfaceEffectAssetData final
{
public:
	TSoftObjectPtr<class UNiagaraSystem>          AssetLOD0;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          AssetLOD1;                                         // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          AssetLOD2;                                         // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetTransform;                                   // 0x0080(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionParam;                                       // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachineSurfaceEffectAssetData) == 0x000010, "Wrong alignment on FMachineSurfaceEffectAssetData");
static_assert(sizeof(FMachineSurfaceEffectAssetData) == 0x0000F0, "Wrong size on FMachineSurfaceEffectAssetData");
static_assert(offsetof(FMachineSurfaceEffectAssetData, AssetLOD0) == 0x000000, "Member 'FMachineSurfaceEffectAssetData::AssetLOD0' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceEffectAssetData, AssetLOD1) == 0x000028, "Member 'FMachineSurfaceEffectAssetData::AssetLOD1' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceEffectAssetData, AssetLOD2) == 0x000050, "Member 'FMachineSurfaceEffectAssetData::AssetLOD2' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceEffectAssetData, OffsetTransform) == 0x000080, "Member 'FMachineSurfaceEffectAssetData::OffsetTransform' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceEffectAssetData, OptionParam) == 0x0000E0, "Member 'FMachineSurfaceEffectAssetData::OptionParam' has a wrong offset!");

// ScriptStruct UNION.MachineCustomizeTabParameter
// 0x0020 (0x0020 - 0x0000)
struct FMachineCustomizeTabParameter final
{
public:
	int32                                         IconIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMachineCustomizeTabID                        TabID;                                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachineCustomizeTabParameter) == 0x000008, "Wrong alignment on FMachineCustomizeTabParameter");
static_assert(sizeof(FMachineCustomizeTabParameter) == 0x000020, "Wrong size on FMachineCustomizeTabParameter");
static_assert(offsetof(FMachineCustomizeTabParameter, IconIndex) == 0x000000, "Member 'FMachineCustomizeTabParameter::IconIndex' has a wrong offset!");
static_assert(offsetof(FMachineCustomizeTabParameter, Text) == 0x000008, "Member 'FMachineCustomizeTabParameter::Text' has a wrong offset!");
static_assert(offsetof(FMachineCustomizeTabParameter, TabID) == 0x000018, "Member 'FMachineCustomizeTabParameter::TabID' has a wrong offset!");

// ScriptStruct UNION.AppCourseSwitchPattern
// 0x0010 (0x0018 - 0x0008)
struct FAppCourseSwitchPattern final : public FTableRowBase
{
public:
	class FText                                   PatternName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppCourseSwitchPattern) == 0x000008, "Wrong alignment on FAppCourseSwitchPattern");
static_assert(sizeof(FAppCourseSwitchPattern) == 0x000018, "Wrong size on FAppCourseSwitchPattern");
static_assert(offsetof(FAppCourseSwitchPattern, PatternName) == 0x000008, "Member 'FAppCourseSwitchPattern::PatternName' has a wrong offset!");

// ScriptStruct UNION.AppRacePlayerResultData
// 0x00B8 (0x00B8 - 0x0000)
struct FAppRacePlayerResultData final
{
public:
	int32                                         PlayerControllerIndex;                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RacerIndex;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RacerName;                                         // 0x0008(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Record;                                            // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUnionRaceTime                         TotalTimesPrev;                                    // 0x0020(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnionRaceTime                         RacerTotalTimes;                                   // 0x0030(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RacerRank;                                         // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RacerRankPrev;                                     // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RacerRankByRounds;                                 // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TotalRankIndex;                                    // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRankIndexPrev;                                // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRank;                                         // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRankPrev;                                     // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EarnPoint;                                         // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPoint;                                        // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPointPrev;                                    // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRingGateSelectRacer;                             // 0x0074(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRivalRacer;                                      // 0x0075(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCom;                                             // 0x0076(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OnlineRate;                                        // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlatformIconIndex;                                 // 0x007C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       UserId;                                            // 0x0088(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppRacePlayerResultData) == 0x000008, "Wrong alignment on FAppRacePlayerResultData");
static_assert(sizeof(FAppRacePlayerResultData) == 0x0000B8, "Wrong size on FAppRacePlayerResultData");
static_assert(offsetof(FAppRacePlayerResultData, PlayerControllerIndex) == 0x000000, "Member 'FAppRacePlayerResultData::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, RacerIndex) == 0x000004, "Member 'FAppRacePlayerResultData::RacerIndex' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, RacerName) == 0x000008, "Member 'FAppRacePlayerResultData::RacerName' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, DriverId) == 0x000018, "Member 'FAppRacePlayerResultData::DriverId' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, Record) == 0x00001C, "Member 'FAppRacePlayerResultData::Record' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, TotalTimesPrev) == 0x000020, "Member 'FAppRacePlayerResultData::TotalTimesPrev' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, RacerTotalTimes) == 0x000030, "Member 'FAppRacePlayerResultData::RacerTotalTimes' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, RacerRank) == 0x000040, "Member 'FAppRacePlayerResultData::RacerRank' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, RacerRankPrev) == 0x000044, "Member 'FAppRacePlayerResultData::RacerRankPrev' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, RacerRankByRounds) == 0x000048, "Member 'FAppRacePlayerResultData::RacerRankByRounds' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, TotalRankIndex) == 0x000058, "Member 'FAppRacePlayerResultData::TotalRankIndex' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, TotalRankIndexPrev) == 0x00005C, "Member 'FAppRacePlayerResultData::TotalRankIndexPrev' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, TotalRank) == 0x000060, "Member 'FAppRacePlayerResultData::TotalRank' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, TotalRankPrev) == 0x000064, "Member 'FAppRacePlayerResultData::TotalRankPrev' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, EarnPoint) == 0x000068, "Member 'FAppRacePlayerResultData::EarnPoint' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, TotalPoint) == 0x00006C, "Member 'FAppRacePlayerResultData::TotalPoint' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, TotalPointPrev) == 0x000070, "Member 'FAppRacePlayerResultData::TotalPointPrev' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, IsRingGateSelectRacer) == 0x000074, "Member 'FAppRacePlayerResultData::IsRingGateSelectRacer' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, IsRivalRacer) == 0x000075, "Member 'FAppRacePlayerResultData::IsRivalRacer' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, IsCom) == 0x000076, "Member 'FAppRacePlayerResultData::IsCom' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, OnlineRate) == 0x000078, "Member 'FAppRacePlayerResultData::OnlineRate' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, PlatformIconIndex) == 0x00007C, "Member 'FAppRacePlayerResultData::PlatformIconIndex' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, GroupIndex) == 0x000080, "Member 'FAppRacePlayerResultData::GroupIndex' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerResultData, UserId) == 0x000088, "Member 'FAppRacePlayerResultData::UserId' has a wrong offset!");

// ScriptStruct UNION.StickerUIData
// 0x0088 (0x0088 - 0x0000)
struct FStickerUIData final
{
public:
	class FName                                   stickerId;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ThumbnailTexture;                                  // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsEnabledColorChange;                              // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabledFreeScale;                                // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExtraSticker;                                   // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExtraStickerPattern                          ExtraPattern;                                      // 0x006B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStickerState                                 State;                                             // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x006D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPurchase;                                      // 0x006E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Price;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHiddenUntilUnlock;                              // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnlockText;                                        // 0x0078(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStickerUIData) == 0x000008, "Wrong alignment on FStickerUIData");
static_assert(sizeof(FStickerUIData) == 0x000088, "Wrong size on FStickerUIData");
static_assert(offsetof(FStickerUIData, stickerId) == 0x000000, "Member 'FStickerUIData::stickerId' has a wrong offset!");
static_assert(offsetof(FStickerUIData, IconTexture) == 0x000008, "Member 'FStickerUIData::IconTexture' has a wrong offset!");
static_assert(offsetof(FStickerUIData, ThumbnailTexture) == 0x000030, "Member 'FStickerUIData::ThumbnailTexture' has a wrong offset!");
static_assert(offsetof(FStickerUIData, Name) == 0x000058, "Member 'FStickerUIData::Name' has a wrong offset!");
static_assert(offsetof(FStickerUIData, IsEnabledColorChange) == 0x000068, "Member 'FStickerUIData::IsEnabledColorChange' has a wrong offset!");
static_assert(offsetof(FStickerUIData, IsEnabledFreeScale) == 0x000069, "Member 'FStickerUIData::IsEnabledFreeScale' has a wrong offset!");
static_assert(offsetof(FStickerUIData, bIsExtraSticker) == 0x00006A, "Member 'FStickerUIData::bIsExtraSticker' has a wrong offset!");
static_assert(offsetof(FStickerUIData, ExtraPattern) == 0x00006B, "Member 'FStickerUIData::ExtraPattern' has a wrong offset!");
static_assert(offsetof(FStickerUIData, State) == 0x00006C, "Member 'FStickerUIData::State' has a wrong offset!");
static_assert(offsetof(FStickerUIData, bIsNew) == 0x00006D, "Member 'FStickerUIData::bIsNew' has a wrong offset!");
static_assert(offsetof(FStickerUIData, bCanPurchase) == 0x00006E, "Member 'FStickerUIData::bCanPurchase' has a wrong offset!");
static_assert(offsetof(FStickerUIData, Price) == 0x000070, "Member 'FStickerUIData::Price' has a wrong offset!");
static_assert(offsetof(FStickerUIData, bIsHiddenUntilUnlock) == 0x000074, "Member 'FStickerUIData::bIsHiddenUntilUnlock' has a wrong offset!");
static_assert(offsetof(FStickerUIData, UnlockText) == 0x000078, "Member 'FStickerUIData::UnlockText' has a wrong offset!");

// ScriptStruct UNION.MachinePartsUIData
// 0x0058 (0x0058 - 0x0000)
struct FMachinePartsUIData final
{
public:
	EMachineId                                    MachineId;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ShopUnlockText;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 GadgetIconIndices;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELockType                                     LockType;                                          // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Price;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDLC;                                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDLCType                                      DLCType;                                           // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReleaseSeason;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachinePartsUIData) == 0x000008, "Wrong alignment on FMachinePartsUIData");
static_assert(sizeof(FMachinePartsUIData) == 0x000058, "Wrong size on FMachinePartsUIData");
static_assert(offsetof(FMachinePartsUIData, MachineId) == 0x000000, "Member 'FMachinePartsUIData::MachineId' has a wrong offset!");
static_assert(offsetof(FMachinePartsUIData, Name) == 0x000008, "Member 'FMachinePartsUIData::Name' has a wrong offset!");
static_assert(offsetof(FMachinePartsUIData, ShopUnlockText) == 0x000018, "Member 'FMachinePartsUIData::ShopUnlockText' has a wrong offset!");
static_assert(offsetof(FMachinePartsUIData, IconTexture) == 0x000028, "Member 'FMachinePartsUIData::IconTexture' has a wrong offset!");
static_assert(offsetof(FMachinePartsUIData, GadgetIconIndices) == 0x000030, "Member 'FMachinePartsUIData::GadgetIconIndices' has a wrong offset!");
static_assert(offsetof(FMachinePartsUIData, bIsNew) == 0x000040, "Member 'FMachinePartsUIData::bIsNew' has a wrong offset!");
static_assert(offsetof(FMachinePartsUIData, LockType) == 0x000041, "Member 'FMachinePartsUIData::LockType' has a wrong offset!");
static_assert(offsetof(FMachinePartsUIData, Price) == 0x000044, "Member 'FMachinePartsUIData::Price' has a wrong offset!");
static_assert(offsetof(FMachinePartsUIData, IsDLC) == 0x000048, "Member 'FMachinePartsUIData::IsDLC' has a wrong offset!");
static_assert(offsetof(FMachinePartsUIData, DLCType) == 0x000049, "Member 'FMachinePartsUIData::DLCType' has a wrong offset!");
static_assert(offsetof(FMachinePartsUIData, ReleaseSeason) == 0x00004C, "Member 'FMachinePartsUIData::ReleaseSeason' has a wrong offset!");
static_assert(offsetof(FMachinePartsUIData, SortID) == 0x000050, "Member 'FMachinePartsUIData::SortID' has a wrong offset!");

// ScriptStruct UNION.MachineMaterialDataArray
// 0x0010 (0x0010 - 0x0000)
struct FMachineMaterialDataArray final
{
public:
	TArray<struct FMachineMaterialData>           Values;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineMaterialDataArray) == 0x000008, "Wrong alignment on FMachineMaterialDataArray");
static_assert(sizeof(FMachineMaterialDataArray) == 0x000010, "Wrong size on FMachineMaterialDataArray");
static_assert(offsetof(FMachineMaterialDataArray, Values) == 0x000000, "Member 'FMachineMaterialDataArray::Values' has a wrong offset!");

// ScriptStruct UNION.FriendLobbyMemberTodayRecord
// 0x0098 (0x0098 - 0x0000)
struct FFriendLobbyMemberTodayRecord final
{
public:
	int32                                         TotalPlayCount;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRaceCount;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VictoryCount;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstPlaceCount;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MeanRank;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectTravelRingCount;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseShortCutRingCount;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartDashCount;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OvertakingBeforeGoalCount;                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OvertakenBeforeGoalCount;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DriftDashCount;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirTrickCount;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargeLv3Count;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DashPanelCount;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RingCount;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LostRingCount;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsedItemCount;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackItemCount;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitTakenCount;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialItemBoxCount;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MostAttackRacer;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 MostHitTakenRacer;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SquashCount;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeSquashedCount;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KingBooBooAttackCount;                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KingBooBooHitTakenCount;                           // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpinCount;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CourseOutCount;                                    // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClashCount;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         DrivingTime;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendLobbyMemberTodayRecord) == 0x000008, "Wrong alignment on FFriendLobbyMemberTodayRecord");
static_assert(sizeof(FFriendLobbyMemberTodayRecord) == 0x000098, "Wrong size on FFriendLobbyMemberTodayRecord");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, TotalPlayCount) == 0x000000, "Member 'FFriendLobbyMemberTodayRecord::TotalPlayCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, TotalRaceCount) == 0x000004, "Member 'FFriendLobbyMemberTodayRecord::TotalRaceCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, VictoryCount) == 0x000008, "Member 'FFriendLobbyMemberTodayRecord::VictoryCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, FirstPlaceCount) == 0x00000C, "Member 'FFriendLobbyMemberTodayRecord::FirstPlaceCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, MeanRank) == 0x000010, "Member 'FFriendLobbyMemberTodayRecord::MeanRank' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, SelectTravelRingCount) == 0x000014, "Member 'FFriendLobbyMemberTodayRecord::SelectTravelRingCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, UseShortCutRingCount) == 0x000018, "Member 'FFriendLobbyMemberTodayRecord::UseShortCutRingCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, StartDashCount) == 0x00001C, "Member 'FFriendLobbyMemberTodayRecord::StartDashCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, OvertakingBeforeGoalCount) == 0x000020, "Member 'FFriendLobbyMemberTodayRecord::OvertakingBeforeGoalCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, OvertakenBeforeGoalCount) == 0x000024, "Member 'FFriendLobbyMemberTodayRecord::OvertakenBeforeGoalCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, DriftDashCount) == 0x000028, "Member 'FFriendLobbyMemberTodayRecord::DriftDashCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, AirTrickCount) == 0x00002C, "Member 'FFriendLobbyMemberTodayRecord::AirTrickCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, ChargeLv3Count) == 0x000030, "Member 'FFriendLobbyMemberTodayRecord::ChargeLv3Count' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, DashPanelCount) == 0x000034, "Member 'FFriendLobbyMemberTodayRecord::DashPanelCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, RingCount) == 0x000038, "Member 'FFriendLobbyMemberTodayRecord::RingCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, LostRingCount) == 0x00003C, "Member 'FFriendLobbyMemberTodayRecord::LostRingCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, UsedItemCount) == 0x000040, "Member 'FFriendLobbyMemberTodayRecord::UsedItemCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, AttackItemCount) == 0x000044, "Member 'FFriendLobbyMemberTodayRecord::AttackItemCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, HitTakenCount) == 0x000048, "Member 'FFriendLobbyMemberTodayRecord::HitTakenCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, SpecialItemBoxCount) == 0x00004C, "Member 'FFriendLobbyMemberTodayRecord::SpecialItemBoxCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, MostAttackRacer) == 0x000050, "Member 'FFriendLobbyMemberTodayRecord::MostAttackRacer' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, MostHitTakenRacer) == 0x000060, "Member 'FFriendLobbyMemberTodayRecord::MostHitTakenRacer' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, SquashCount) == 0x000070, "Member 'FFriendLobbyMemberTodayRecord::SquashCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, BeSquashedCount) == 0x000074, "Member 'FFriendLobbyMemberTodayRecord::BeSquashedCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, KingBooBooAttackCount) == 0x000078, "Member 'FFriendLobbyMemberTodayRecord::KingBooBooAttackCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, KingBooBooHitTakenCount) == 0x00007C, "Member 'FFriendLobbyMemberTodayRecord::KingBooBooHitTakenCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, SpinCount) == 0x000080, "Member 'FFriendLobbyMemberTodayRecord::SpinCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, CourseOutCount) == 0x000084, "Member 'FFriendLobbyMemberTodayRecord::CourseOutCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, ClashCount) == 0x000088, "Member 'FFriendLobbyMemberTodayRecord::ClashCount' has a wrong offset!");
static_assert(offsetof(FFriendLobbyMemberTodayRecord, DrivingTime) == 0x000090, "Member 'FFriendLobbyMemberTodayRecord::DrivingTime' has a wrong offset!");

// ScriptStruct UNION.StageCourseMapParam
// 0x0028 (0x0028 - 0x0000)
struct FStageCourseMapParam final
{
public:
	class UTexture2D*                             CourseMapUITexture;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrthoRate;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStageCourseMapParam) == 0x000008, "Wrong alignment on FStageCourseMapParam");
static_assert(sizeof(FStageCourseMapParam) == 0x000028, "Wrong size on FStageCourseMapParam");
static_assert(offsetof(FStageCourseMapParam, CourseMapUITexture) == 0x000000, "Member 'FStageCourseMapParam::CourseMapUITexture' has a wrong offset!");
static_assert(offsetof(FStageCourseMapParam, OrthoRate) == 0x000008, "Member 'FStageCourseMapParam::OrthoRate' has a wrong offset!");
static_assert(offsetof(FStageCourseMapParam, Angle) == 0x00000C, "Member 'FStageCourseMapParam::Angle' has a wrong offset!");
static_assert(offsetof(FStageCourseMapParam, Offset) == 0x000010, "Member 'FStageCourseMapParam::Offset' has a wrong offset!");

// ScriptStruct UNION.RaceCourseMapInfo
// 0x0050 (0x0050 - 0x0000)
struct FRaceCourseMapInfo final
{
public:
	TMap<EStageCourseMapInfo, struct FStageCourseMapParam> CourseMapUIParam;                         // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceCourseMapInfo) == 0x000008, "Wrong alignment on FRaceCourseMapInfo");
static_assert(sizeof(FRaceCourseMapInfo) == 0x000050, "Wrong size on FRaceCourseMapInfo");
static_assert(offsetof(FRaceCourseMapInfo, CourseMapUIParam) == 0x000000, "Member 'FRaceCourseMapInfo::CourseMapUIParam' has a wrong offset!");

// ScriptStruct UNION.DialogueTextData
// 0x0010 (0x0018 - 0x0008)
struct FDialogueTextData final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueTextData) == 0x000008, "Wrong alignment on FDialogueTextData");
static_assert(sizeof(FDialogueTextData) == 0x000018, "Wrong size on FDialogueTextData");
static_assert(offsetof(FDialogueTextData, Text) == 0x000008, "Member 'FDialogueTextData::Text' has a wrong offset!");

// ScriptStruct UNION.CellGuideParam
// 0x0010 (0x0010 - 0x0000)
struct FCellGuideParam final
{
public:
	class FText                                   GuideText;                                         // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCellGuideParam) == 0x000008, "Wrong alignment on FCellGuideParam");
static_assert(sizeof(FCellGuideParam) == 0x000010, "Wrong size on FCellGuideParam");
static_assert(offsetof(FCellGuideParam, GuideText) == 0x000000, "Member 'FCellGuideParam::GuideText' has a wrong offset!");

// ScriptStruct UNION.OptimizedMeshEffectParams
// 0x00D0 (0x00D0 - 0x0000)
struct FOptimizedMeshEffectParams final
{
public:
	float                                         LifeTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartScale;                                        // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndScale;                                          // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                            ScaleCurveTable;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaFadeTime;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotationRandom;                                    // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLerpFlipBook;                                     // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimationScale;                                   // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomRotation;                                   // 0x00CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlphaFade;                                        // 0x00CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimizedMeshEffectParams) == 0x000010, "Wrong alignment on FOptimizedMeshEffectParams");
static_assert(sizeof(FOptimizedMeshEffectParams) == 0x0000D0, "Wrong size on FOptimizedMeshEffectParams");
static_assert(offsetof(FOptimizedMeshEffectParams, LifeTime) == 0x000000, "Member 'FOptimizedMeshEffectParams::LifeTime' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectParams, Transform) == 0x000010, "Member 'FOptimizedMeshEffectParams::Transform' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectParams, StartScale) == 0x000070, "Member 'FOptimizedMeshEffectParams::StartScale' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectParams, EndScale) == 0x000088, "Member 'FOptimizedMeshEffectParams::EndScale' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectParams, ScaleCurveTable) == 0x0000A0, "Member 'FOptimizedMeshEffectParams::ScaleCurveTable' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectParams, AlphaFadeTime) == 0x0000A8, "Member 'FOptimizedMeshEffectParams::AlphaFadeTime' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectParams, RotationRandom) == 0x0000B0, "Member 'FOptimizedMeshEffectParams::RotationRandom' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectParams, bLerpFlipBook) == 0x0000C8, "Member 'FOptimizedMeshEffectParams::bLerpFlipBook' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectParams, bAnimationScale) == 0x0000C9, "Member 'FOptimizedMeshEffectParams::bAnimationScale' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectParams, bRandomRotation) == 0x0000CA, "Member 'FOptimizedMeshEffectParams::bRandomRotation' has a wrong offset!");
static_assert(offsetof(FOptimizedMeshEffectParams, bAlphaFade) == 0x0000CB, "Member 'FOptimizedMeshEffectParams::bAlphaFade' has a wrong offset!");

// ScriptStruct UNION.AppRacePlayerConfigData
// 0x0008 (0x0008 - 0x0000)
struct FAppRacePlayerConfigData final
{
public:
	bool                                          bHandleAssist;                                     // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceleratorAssist;                                // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTSRKeyAssign;                                     // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAirTrickAssist;                                   // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapVisibleAssist;                                 // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRaceHintAssist;                                   // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControllerGyroAssist;                             // 0x0006(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoItemAssist;                                   // 0x0007(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppRacePlayerConfigData) == 0x000001, "Wrong alignment on FAppRacePlayerConfigData");
static_assert(sizeof(FAppRacePlayerConfigData) == 0x000008, "Wrong size on FAppRacePlayerConfigData");
static_assert(offsetof(FAppRacePlayerConfigData, bHandleAssist) == 0x000000, "Member 'FAppRacePlayerConfigData::bHandleAssist' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerConfigData, bAcceleratorAssist) == 0x000001, "Member 'FAppRacePlayerConfigData::bAcceleratorAssist' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerConfigData, bTSRKeyAssign) == 0x000002, "Member 'FAppRacePlayerConfigData::bTSRKeyAssign' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerConfigData, bAirTrickAssist) == 0x000003, "Member 'FAppRacePlayerConfigData::bAirTrickAssist' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerConfigData, bMapVisibleAssist) == 0x000004, "Member 'FAppRacePlayerConfigData::bMapVisibleAssist' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerConfigData, bRaceHintAssist) == 0x000005, "Member 'FAppRacePlayerConfigData::bRaceHintAssist' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerConfigData, bControllerGyroAssist) == 0x000006, "Member 'FAppRacePlayerConfigData::bControllerGyroAssist' has a wrong offset!");
static_assert(offsetof(FAppRacePlayerConfigData, bAutoItemAssist) == 0x000007, "Member 'FAppRacePlayerConfigData::bAutoItemAssist' has a wrong offset!");

// ScriptStruct UNION.OptionKeyConfigCellTableRow
// 0x0028 (0x0030 - 0x0008)
struct FOptionKeyConfigCellTableRow final : public FTableRowBase
{
public:
	EKeyConfigRace                                ConfigKeyType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionValidPlatform                          Platform;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CellTitle;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CellGuide;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionKeyConfigCellTableRow) == 0x000008, "Wrong alignment on FOptionKeyConfigCellTableRow");
static_assert(sizeof(FOptionKeyConfigCellTableRow) == 0x000030, "Wrong size on FOptionKeyConfigCellTableRow");
static_assert(offsetof(FOptionKeyConfigCellTableRow, ConfigKeyType) == 0x000008, "Member 'FOptionKeyConfigCellTableRow::ConfigKeyType' has a wrong offset!");
static_assert(offsetof(FOptionKeyConfigCellTableRow, Platform) == 0x000009, "Member 'FOptionKeyConfigCellTableRow::Platform' has a wrong offset!");
static_assert(offsetof(FOptionKeyConfigCellTableRow, CellTitle) == 0x000010, "Member 'FOptionKeyConfigCellTableRow::CellTitle' has a wrong offset!");
static_assert(offsetof(FOptionKeyConfigCellTableRow, CellGuide) == 0x000020, "Member 'FOptionKeyConfigCellTableRow::CellGuide' has a wrong offset!");

// ScriptStruct UNION.EventInfoScheduleData
// 0x0028 (0x0028 - 0x0000)
struct FEventInfoScheduleData final
{
public:
	struct FDateTime                              NoticeStartTime;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartTime;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              endTime;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpenScheduleString;                                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventInfoScheduleData) == 0x000008, "Wrong alignment on FEventInfoScheduleData");
static_assert(sizeof(FEventInfoScheduleData) == 0x000028, "Wrong size on FEventInfoScheduleData");
static_assert(offsetof(FEventInfoScheduleData, NoticeStartTime) == 0x000000, "Member 'FEventInfoScheduleData::NoticeStartTime' has a wrong offset!");
static_assert(offsetof(FEventInfoScheduleData, StartTime) == 0x000008, "Member 'FEventInfoScheduleData::StartTime' has a wrong offset!");
static_assert(offsetof(FEventInfoScheduleData, endTime) == 0x000010, "Member 'FEventInfoScheduleData::endTime' has a wrong offset!");
static_assert(offsetof(FEventInfoScheduleData, OpenScheduleString) == 0x000018, "Member 'FEventInfoScheduleData::OpenScheduleString' has a wrong offset!");

// ScriptStruct UNION.WirelessLobbyContextSearchSettings
// 0x0008 (0x0008 - 0x0000)
struct FWirelessLobbyContextSearchSettings final
{
public:
	int64                                         MatchmakeKey;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWirelessLobbyContextSearchSettings) == 0x000008, "Wrong alignment on FWirelessLobbyContextSearchSettings");
static_assert(sizeof(FWirelessLobbyContextSearchSettings) == 0x000008, "Wrong size on FWirelessLobbyContextSearchSettings");
static_assert(offsetof(FWirelessLobbyContextSearchSettings, MatchmakeKey) == 0x000000, "Member 'FWirelessLobbyContextSearchSettings::MatchmakeKey' has a wrong offset!");

// ScriptStruct UNION.KeyConfigCategoryKeyData
// 0x0068 (0x0068 - 0x0000)
struct FKeyConfigCategoryKeyData final
{
public:
	class FName                                   KeyMapName;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   KeyBord_Primary;                                   // 0x0008(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   KeyBord_Secondary;                                 // 0x0020(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Gamepad;                                           // 0x0038(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   GamePad_Secondary;                                 // 0x0050(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyConfigCategoryKeyData) == 0x000008, "Wrong alignment on FKeyConfigCategoryKeyData");
static_assert(sizeof(FKeyConfigCategoryKeyData) == 0x000068, "Wrong size on FKeyConfigCategoryKeyData");
static_assert(offsetof(FKeyConfigCategoryKeyData, KeyMapName) == 0x000000, "Member 'FKeyConfigCategoryKeyData::KeyMapName' has a wrong offset!");
static_assert(offsetof(FKeyConfigCategoryKeyData, KeyBord_Primary) == 0x000008, "Member 'FKeyConfigCategoryKeyData::KeyBord_Primary' has a wrong offset!");
static_assert(offsetof(FKeyConfigCategoryKeyData, KeyBord_Secondary) == 0x000020, "Member 'FKeyConfigCategoryKeyData::KeyBord_Secondary' has a wrong offset!");
static_assert(offsetof(FKeyConfigCategoryKeyData, Gamepad) == 0x000038, "Member 'FKeyConfigCategoryKeyData::Gamepad' has a wrong offset!");
static_assert(offsetof(FKeyConfigCategoryKeyData, GamePad_Secondary) == 0x000050, "Member 'FKeyConfigCategoryKeyData::GamePad_Secondary' has a wrong offset!");

// ScriptStruct UNION.RewardDialogParameter
// 0x0088 (0x0088 - 0x0000)
struct FRewardDialogParameter final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardType                                   rewardType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TextCateogryName;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TextTitleMain;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TextTitleSub;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TextButtonYes;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TextButtonNo;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TextButtonOK;                                      // 0x0070(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBuyType;                                        // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisibleTicket;                                  // 0x0085(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRewardDialogParameter) == 0x000008, "Wrong alignment on FRewardDialogParameter");
static_assert(sizeof(FRewardDialogParameter) == 0x000088, "Wrong size on FRewardDialogParameter");
static_assert(offsetof(FRewardDialogParameter, Texture) == 0x000000, "Member 'FRewardDialogParameter::Texture' has a wrong offset!");
static_assert(offsetof(FRewardDialogParameter, rewardType) == 0x000008, "Member 'FRewardDialogParameter::rewardType' has a wrong offset!");
static_assert(offsetof(FRewardDialogParameter, TextName) == 0x000010, "Member 'FRewardDialogParameter::TextName' has a wrong offset!");
static_assert(offsetof(FRewardDialogParameter, TextCateogryName) == 0x000020, "Member 'FRewardDialogParameter::TextCateogryName' has a wrong offset!");
static_assert(offsetof(FRewardDialogParameter, TextTitleMain) == 0x000030, "Member 'FRewardDialogParameter::TextTitleMain' has a wrong offset!");
static_assert(offsetof(FRewardDialogParameter, TextTitleSub) == 0x000040, "Member 'FRewardDialogParameter::TextTitleSub' has a wrong offset!");
static_assert(offsetof(FRewardDialogParameter, TextButtonYes) == 0x000050, "Member 'FRewardDialogParameter::TextButtonYes' has a wrong offset!");
static_assert(offsetof(FRewardDialogParameter, TextButtonNo) == 0x000060, "Member 'FRewardDialogParameter::TextButtonNo' has a wrong offset!");
static_assert(offsetof(FRewardDialogParameter, TextButtonOK) == 0x000070, "Member 'FRewardDialogParameter::TextButtonOK' has a wrong offset!");
static_assert(offsetof(FRewardDialogParameter, Price) == 0x000080, "Member 'FRewardDialogParameter::Price' has a wrong offset!");
static_assert(offsetof(FRewardDialogParameter, bIsBuyType) == 0x000084, "Member 'FRewardDialogParameter::bIsBuyType' has a wrong offset!");
static_assert(offsetof(FRewardDialogParameter, bIsVisibleTicket) == 0x000085, "Member 'FRewardDialogParameter::bIsVisibleTicket' has a wrong offset!");

// ScriptStruct UNION.RewardGetWindowParam
// 0x0004 (0x0010 - 0x000C)
struct FRewardGetWindowParam final : public FRewardBaseData
{
public:
	bool                                          bRivalReward;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRewardGetWindowParam) == 0x000004, "Wrong alignment on FRewardGetWindowParam");
static_assert(sizeof(FRewardGetWindowParam) == 0x000010, "Wrong size on FRewardGetWindowParam");
static_assert(offsetof(FRewardGetWindowParam, bRivalReward) == 0x00000C, "Member 'FRewardGetWindowParam::bRivalReward' has a wrong offset!");

// ScriptStruct UNION.AppItemSwitchPattern
// 0x0020 (0x0028 - 0x0008)
struct FAppItemSwitchPattern final : public FTableRowBase
{
public:
	class FText                                   PatternName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<EItemId>                               EnableItem;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppItemSwitchPattern) == 0x000008, "Wrong alignment on FAppItemSwitchPattern");
static_assert(sizeof(FAppItemSwitchPattern) == 0x000028, "Wrong size on FAppItemSwitchPattern");
static_assert(offsetof(FAppItemSwitchPattern, PatternName) == 0x000008, "Member 'FAppItemSwitchPattern::PatternName' has a wrong offset!");
static_assert(offsetof(FAppItemSwitchPattern, EnableItem) == 0x000018, "Member 'FAppItemSwitchPattern::EnableItem' has a wrong offset!");

// ScriptStruct UNION.CourseSwitchSetting
// 0x0010 (0x0018 - 0x0008)
struct FCourseSwitchSetting final : public FTableRowBase
{
public:
	TArray<struct FCourseSwitchSettingSingle>     CourseSwitchSettingArr;                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCourseSwitchSetting) == 0x000008, "Wrong alignment on FCourseSwitchSetting");
static_assert(sizeof(FCourseSwitchSetting) == 0x000018, "Wrong size on FCourseSwitchSetting");
static_assert(offsetof(FCourseSwitchSetting, CourseSwitchSettingArr) == 0x000008, "Member 'FCourseSwitchSetting::CourseSwitchSettingArr' has a wrong offset!");

// ScriptStruct UNION.ExtraStickerData
// 0x0030 (0x0030 - 0x0000)
struct FExtraStickerData final
{
public:
	EExtraStickerPattern                          Pattern;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Location;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Scale;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExtraStickerData) == 0x000008, "Wrong alignment on FExtraStickerData");
static_assert(sizeof(FExtraStickerData) == 0x000030, "Wrong size on FExtraStickerData");
static_assert(offsetof(FExtraStickerData, Pattern) == 0x000000, "Member 'FExtraStickerData::Pattern' has a wrong offset!");
static_assert(offsetof(FExtraStickerData, Location) == 0x000008, "Member 'FExtraStickerData::Location' has a wrong offset!");
static_assert(offsetof(FExtraStickerData, Rotation) == 0x000018, "Member 'FExtraStickerData::Rotation' has a wrong offset!");
static_assert(offsetof(FExtraStickerData, Scale) == 0x000020, "Member 'FExtraStickerData::Scale' has a wrong offset!");

// ScriptStruct UNION.AnotherStageLotterySettingRow_FirstRom
// 0x0150 (0x0158 - 0x0008)
struct FAnotherStageLotterySettingRow_FirstRom final : public FTableRowBase
{
public:
	TMap<EStageId, int32>                         AnotherStageWeightMap;                             // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bExclusiveTravelRingAppearancePattern;             // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETravelRingScreenLotteryPattern, int32>  TravelRingScreenPatternWeightMap;                  // 0x0060(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EIrregularEventLotteryPattern, int32>    IrregularEventPatternWeightMap;                    // 0x00B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bExclusiveIrregularEventId;                        // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EIrregularEventId, int32>                IrregularEventWeightMap;                           // 0x0108(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnotherStageLotterySettingRow_FirstRom) == 0x000008, "Wrong alignment on FAnotherStageLotterySettingRow_FirstRom");
static_assert(sizeof(FAnotherStageLotterySettingRow_FirstRom) == 0x000158, "Wrong size on FAnotherStageLotterySettingRow_FirstRom");
static_assert(offsetof(FAnotherStageLotterySettingRow_FirstRom, AnotherStageWeightMap) == 0x000008, "Member 'FAnotherStageLotterySettingRow_FirstRom::AnotherStageWeightMap' has a wrong offset!");
static_assert(offsetof(FAnotherStageLotterySettingRow_FirstRom, bExclusiveTravelRingAppearancePattern) == 0x000058, "Member 'FAnotherStageLotterySettingRow_FirstRom::bExclusiveTravelRingAppearancePattern' has a wrong offset!");
static_assert(offsetof(FAnotherStageLotterySettingRow_FirstRom, TravelRingScreenPatternWeightMap) == 0x000060, "Member 'FAnotherStageLotterySettingRow_FirstRom::TravelRingScreenPatternWeightMap' has a wrong offset!");
static_assert(offsetof(FAnotherStageLotterySettingRow_FirstRom, IrregularEventPatternWeightMap) == 0x0000B0, "Member 'FAnotherStageLotterySettingRow_FirstRom::IrregularEventPatternWeightMap' has a wrong offset!");
static_assert(offsetof(FAnotherStageLotterySettingRow_FirstRom, bExclusiveIrregularEventId) == 0x000100, "Member 'FAnotherStageLotterySettingRow_FirstRom::bExclusiveIrregularEventId' has a wrong offset!");
static_assert(offsetof(FAnotherStageLotterySettingRow_FirstRom, IrregularEventWeightMap) == 0x000108, "Member 'FAnotherStageLotterySettingRow_FirstRom::IrregularEventWeightMap' has a wrong offset!");

// ScriptStruct UNION.AppRaceRacerConfigData
// 0x0180 (0x0180 - 0x0000)
struct FAppRaceRacerConfigData final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverType                                   DriverType;                                        // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleModelDefine                    MachineCustomize;                                  // 0x0008(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUserMachineCustomizeData              MachineCustomizeData;                              // 0x0070(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MachineBehaviorID;                                 // 0x00E8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rom1stMachineId;                                   // 0x00EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MachineId;                                         // 0x00F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RacerName;                                         // 0x00F8(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	ECrossplayPlatform                            PlatformType;                                      // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HonorTitleId;                                      // 0x010C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComLv;                                             // 0x0110(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComControlType;                                    // 0x0114(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EGadgetId>                             gadget;                                            // 0x0120(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGadgetPlateUIData                     GadgetPlateData;                                   // 0x0130(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0158(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0160(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppRaceRacerConfigData) == 0x000008, "Wrong alignment on FAppRaceRacerConfigData");
static_assert(sizeof(FAppRaceRacerConfigData) == 0x000180, "Wrong size on FAppRaceRacerConfigData");
static_assert(offsetof(FAppRaceRacerConfigData, GroupIndex) == 0x000000, "Member 'FAppRaceRacerConfigData::GroupIndex' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, DriverId) == 0x000004, "Member 'FAppRaceRacerConfigData::DriverId' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, DriverType) == 0x000005, "Member 'FAppRaceRacerConfigData::DriverType' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, MachineCustomize) == 0x000008, "Member 'FAppRaceRacerConfigData::MachineCustomize' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, MachineCustomizeData) == 0x000070, "Member 'FAppRaceRacerConfigData::MachineCustomizeData' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, MachineBehaviorID) == 0x0000E8, "Member 'FAppRaceRacerConfigData::MachineBehaviorID' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, Rom1stMachineId) == 0x0000EC, "Member 'FAppRaceRacerConfigData::Rom1stMachineId' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, MachineId) == 0x0000F0, "Member 'FAppRaceRacerConfigData::MachineId' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, RacerName) == 0x0000F8, "Member 'FAppRaceRacerConfigData::RacerName' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, PlatformType) == 0x000108, "Member 'FAppRaceRacerConfigData::PlatformType' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, HonorTitleId) == 0x00010C, "Member 'FAppRaceRacerConfigData::HonorTitleId' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, ComLv) == 0x000110, "Member 'FAppRaceRacerConfigData::ComLv' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, ComControlType) == 0x000114, "Member 'FAppRaceRacerConfigData::ComControlType' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, gadget) == 0x000120, "Member 'FAppRaceRacerConfigData::gadget' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, GadgetPlateData) == 0x000130, "Member 'FAppRaceRacerConfigData::GadgetPlateData' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, Rate) == 0x000158, "Member 'FAppRaceRacerConfigData::Rate' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, UserId) == 0x000160, "Member 'FAppRaceRacerConfigData::UserId' has a wrong offset!");
static_assert(offsetof(FAppRaceRacerConfigData, PlatformUserId) == 0x000170, "Member 'FAppRaceRacerConfigData::PlatformUserId' has a wrong offset!");

// ScriptStruct UNION.AppRivalRaceSetting
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FAppRivalRaceSetting final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppRivalRaceSetting) == 0x000008, "Wrong alignment on FAppRivalRaceSetting");
static_assert(sizeof(FAppRivalRaceSetting) == 0x000060, "Wrong size on FAppRivalRaceSetting");

// ScriptStruct UNION.OnlineSettingPlayerIconDataTableRow
// 0x0038 (0x0040 - 0x0008)
struct FOnlineSettingPlayerIconDataTableRow final : public FTableRowBase
{
public:
	int32                                         IconId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectIndex;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ImageTexture;                                      // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnlineSettingPlayerIconDataTableRow) == 0x000008, "Wrong alignment on FOnlineSettingPlayerIconDataTableRow");
static_assert(sizeof(FOnlineSettingPlayerIconDataTableRow) == 0x000040, "Wrong size on FOnlineSettingPlayerIconDataTableRow");
static_assert(offsetof(FOnlineSettingPlayerIconDataTableRow, IconId) == 0x000008, "Member 'FOnlineSettingPlayerIconDataTableRow::IconId' has a wrong offset!");
static_assert(offsetof(FOnlineSettingPlayerIconDataTableRow, IsEnabled) == 0x00000C, "Member 'FOnlineSettingPlayerIconDataTableRow::IsEnabled' has a wrong offset!");
static_assert(offsetof(FOnlineSettingPlayerIconDataTableRow, SelectIndex) == 0x000010, "Member 'FOnlineSettingPlayerIconDataTableRow::SelectIndex' has a wrong offset!");
static_assert(offsetof(FOnlineSettingPlayerIconDataTableRow, ImageTexture) == 0x000018, "Member 'FOnlineSettingPlayerIconDataTableRow::ImageTexture' has a wrong offset!");

// ScriptStruct UNION.AppRaceConfigData
// 0x0490 (0x0490 - 0x0000)
struct FAppRaceConfigData final
{
public:
	class FString                                 entryRaceId;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalPlayerCount;                                  // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RacerCount;                                        // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameModeId                                   GameModeID;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceType                                     RaceType;                                          // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpeedClassId                                 ClassId;                                           // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceMirrorSetting                            MirrorSetting;                                     // 0x001B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAppRacePlayerConfigData>       PlayerConfigs;                                     // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAppRaceRacerConfigData>        RacerConfigs;                                      // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAppRivalRaceSetting                   RivalConfigs;                                      // 0x0040(0x0060)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         OnlineEntryUserIds;                                // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OnlineRating;                                      // 0x00B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnlineRatingPrev;                                  // 0x00B4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnlineRaceResultRank;                              // 0x00B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnlineRaceResultWinCount;                          // 0x00BC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrandPrixId                                  GrandPrixId;                                       // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x17];                                      // 0x00C1(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAppOutRaceSetting                     OutRaceSetting;                                    // 0x00D8(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAppOnlineRaceSetting                  OnlineRaceSetting;                                 // 0x0118(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAppRaceStageSetting>           StageSettings;                                     // 0x0190(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCustomRaceSetting                     CustomRaceSetting;                                 // 0x01A0(0x0120)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUnionRaceDebugParam                   RaceDebugParam;                                    // 0x02C0(0x00A0)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTimeTrialSetting                      TimeTrialSetting;                                  // 0x0360(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bTravelCourseManualSetEnabled;                     // 0x0390(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EItemId>                               DefaultDisableItemArr;                             // 0x0398(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EItemId>                               CurrentDisableItemArr;                             // 0x03A8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bTravelCourseScreenManualSetEnabled;               // 0x03B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B9[0xD7];                                     // 0x03B9(0x00D7)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppRaceConfigData) == 0x000010, "Wrong alignment on FAppRaceConfigData");
static_assert(sizeof(FAppRaceConfigData) == 0x000490, "Wrong size on FAppRaceConfigData");
static_assert(offsetof(FAppRaceConfigData, entryRaceId) == 0x000000, "Member 'FAppRaceConfigData::entryRaceId' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, LocalPlayerCount) == 0x000010, "Member 'FAppRaceConfigData::LocalPlayerCount' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, RacerCount) == 0x000014, "Member 'FAppRaceConfigData::RacerCount' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, GameModeID) == 0x000018, "Member 'FAppRaceConfigData::GameModeID' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, RaceType) == 0x000019, "Member 'FAppRaceConfigData::RaceType' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, ClassId) == 0x00001A, "Member 'FAppRaceConfigData::ClassId' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, MirrorSetting) == 0x00001B, "Member 'FAppRaceConfigData::MirrorSetting' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, PlayerConfigs) == 0x000020, "Member 'FAppRaceConfigData::PlayerConfigs' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, RacerConfigs) == 0x000030, "Member 'FAppRaceConfigData::RacerConfigs' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, RivalConfigs) == 0x000040, "Member 'FAppRaceConfigData::RivalConfigs' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, OnlineEntryUserIds) == 0x0000A0, "Member 'FAppRaceConfigData::OnlineEntryUserIds' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, OnlineRating) == 0x0000B0, "Member 'FAppRaceConfigData::OnlineRating' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, OnlineRatingPrev) == 0x0000B4, "Member 'FAppRaceConfigData::OnlineRatingPrev' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, OnlineRaceResultRank) == 0x0000B8, "Member 'FAppRaceConfigData::OnlineRaceResultRank' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, OnlineRaceResultWinCount) == 0x0000BC, "Member 'FAppRaceConfigData::OnlineRaceResultWinCount' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, GrandPrixId) == 0x0000C0, "Member 'FAppRaceConfigData::GrandPrixId' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, OutRaceSetting) == 0x0000D8, "Member 'FAppRaceConfigData::OutRaceSetting' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, OnlineRaceSetting) == 0x000118, "Member 'FAppRaceConfigData::OnlineRaceSetting' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, StageSettings) == 0x000190, "Member 'FAppRaceConfigData::StageSettings' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, CustomRaceSetting) == 0x0001A0, "Member 'FAppRaceConfigData::CustomRaceSetting' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, RaceDebugParam) == 0x0002C0, "Member 'FAppRaceConfigData::RaceDebugParam' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, TimeTrialSetting) == 0x000360, "Member 'FAppRaceConfigData::TimeTrialSetting' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, bTravelCourseManualSetEnabled) == 0x000390, "Member 'FAppRaceConfigData::bTravelCourseManualSetEnabled' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, DefaultDisableItemArr) == 0x000398, "Member 'FAppRaceConfigData::DefaultDisableItemArr' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, CurrentDisableItemArr) == 0x0003A8, "Member 'FAppRaceConfigData::CurrentDisableItemArr' has a wrong offset!");
static_assert(offsetof(FAppRaceConfigData, bTravelCourseScreenManualSetEnabled) == 0x0003B8, "Member 'FAppRaceConfigData::bTravelCourseScreenManualSetEnabled' has a wrong offset!");

// ScriptStruct UNION.AppRaceCountManageData
// 0x0008 (0x0008 - 0x0000)
struct FAppRaceCountManageData final
{
public:
	int32                                         CurrentRaceCount;                                  // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRaceCount;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppRaceCountManageData) == 0x000004, "Wrong alignment on FAppRaceCountManageData");
static_assert(sizeof(FAppRaceCountManageData) == 0x000008, "Wrong size on FAppRaceCountManageData");
static_assert(offsetof(FAppRaceCountManageData, CurrentRaceCount) == 0x000000, "Member 'FAppRaceCountManageData::CurrentRaceCount' has a wrong offset!");
static_assert(offsetof(FAppRaceCountManageData, MaxRaceCount) == 0x000004, "Member 'FAppRaceCountManageData::MaxRaceCount' has a wrong offset!");

// ScriptStruct UNION.AccessibleObjectData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FAccessibleObjectData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccessibleObjectData) == 0x000004, "Wrong alignment on FAccessibleObjectData");
static_assert(sizeof(FAccessibleObjectData) == 0x000010, "Wrong size on FAccessibleObjectData");

// ScriptStruct UNION.AppRacePermanentData
// 0x0010 (0x0010 - 0x0000)
struct FAppRacePermanentData final
{
public:
	TArray<int32>                                 RatePointList;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppRacePermanentData) == 0x000008, "Wrong alignment on FAppRacePermanentData");
static_assert(sizeof(FAppRacePermanentData) == 0x000010, "Wrong size on FAppRacePermanentData");
static_assert(offsetof(FAppRacePermanentData, RatePointList) == 0x000000, "Member 'FAppRacePermanentData::RatePointList' has a wrong offset!");

// ScriptStruct UNION.AppRaceResultData
// 0x0050 (0x0050 - 0x0000)
struct FAppRaceResultData final
{
public:
	TArray<struct FAppRacePlayerResultData>       PlayerResults;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAppRaceTeamResultData>         TeamResults;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RankEarnPointDefault;                              // 0x0028(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUniqueNetIdRepl>               FriendMatchUserId;                                 // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppRaceResultData) == 0x000008, "Wrong alignment on FAppRaceResultData");
static_assert(sizeof(FAppRaceResultData) == 0x000050, "Wrong size on FAppRaceResultData");
static_assert(offsetof(FAppRaceResultData, PlayerResults) == 0x000000, "Member 'FAppRaceResultData::PlayerResults' has a wrong offset!");
static_assert(offsetof(FAppRaceResultData, TeamResults) == 0x000010, "Member 'FAppRaceResultData::TeamResults' has a wrong offset!");
static_assert(offsetof(FAppRaceResultData, RankEarnPointDefault) == 0x000028, "Member 'FAppRaceResultData::RankEarnPointDefault' has a wrong offset!");
static_assert(offsetof(FAppRaceResultData, FriendMatchUserId) == 0x000038, "Member 'FAppRaceResultData::FriendMatchUserId' has a wrong offset!");

// ScriptStruct UNION.AppMenuData
// 0x0168 (0x0168 - 0x0000)
struct FAppMenuData final
{
public:
	bool                                          bFromRace;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackToTitle;                                      // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x1];                                        // 0x0002(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bBackToTopMenu;                                    // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x1];                                        // 0x0004(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ECommonRaceMenuContentId                      LastSelectedRaceMenu;                              // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETopMenuPlayMode                              SelectedTopMenuPlayMode;                           // 0x0006(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupRaceRule                                LastPlayFestaRuleId;                               // 0x0007(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EHintId>                               RequestHintId;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNewMachineParts;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuSpeedClassId                             MenuSpeedClassId;                                  // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     LastChoiceRivalDriverId;                           // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERivalType                                    LastChoiceRivalType;                               // 0x001B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LastChoiceRivalLevel;                              // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BaseRivalLevel;                                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EDriverId>                             RivalDriverNormalIds;                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EDriverId>                             RivalDriverPowerIds;                               // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         NeedsDonpaTicketForRaceRetry;                      // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubMenuOnlineMode;                              // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x8];                                       // 0x0042(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsConfirmedNoticeStreamingInstall;                // 0x004A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0xFF];                                      // 0x004B(0x00FF)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTryGetCompensation;                               // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B[0x1D];                                     // 0x014B(0x001D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppMenuData) == 0x000008, "Wrong alignment on FAppMenuData");
static_assert(sizeof(FAppMenuData) == 0x000168, "Wrong size on FAppMenuData");
static_assert(offsetof(FAppMenuData, bFromRace) == 0x000000, "Member 'FAppMenuData::bFromRace' has a wrong offset!");
static_assert(offsetof(FAppMenuData, bBackToTitle) == 0x000001, "Member 'FAppMenuData::bBackToTitle' has a wrong offset!");
static_assert(offsetof(FAppMenuData, bBackToTopMenu) == 0x000003, "Member 'FAppMenuData::bBackToTopMenu' has a wrong offset!");
static_assert(offsetof(FAppMenuData, LastSelectedRaceMenu) == 0x000005, "Member 'FAppMenuData::LastSelectedRaceMenu' has a wrong offset!");
static_assert(offsetof(FAppMenuData, SelectedTopMenuPlayMode) == 0x000006, "Member 'FAppMenuData::SelectedTopMenuPlayMode' has a wrong offset!");
static_assert(offsetof(FAppMenuData, LastPlayFestaRuleId) == 0x000007, "Member 'FAppMenuData::LastPlayFestaRuleId' has a wrong offset!");
static_assert(offsetof(FAppMenuData, RequestHintId) == 0x000008, "Member 'FAppMenuData::RequestHintId' has a wrong offset!");
static_assert(offsetof(FAppMenuData, bNewMachineParts) == 0x000018, "Member 'FAppMenuData::bNewMachineParts' has a wrong offset!");
static_assert(offsetof(FAppMenuData, MenuSpeedClassId) == 0x000019, "Member 'FAppMenuData::MenuSpeedClassId' has a wrong offset!");
static_assert(offsetof(FAppMenuData, LastChoiceRivalDriverId) == 0x00001A, "Member 'FAppMenuData::LastChoiceRivalDriverId' has a wrong offset!");
static_assert(offsetof(FAppMenuData, LastChoiceRivalType) == 0x00001B, "Member 'FAppMenuData::LastChoiceRivalType' has a wrong offset!");
static_assert(offsetof(FAppMenuData, LastChoiceRivalLevel) == 0x00001C, "Member 'FAppMenuData::LastChoiceRivalLevel' has a wrong offset!");
static_assert(offsetof(FAppMenuData, BaseRivalLevel) == 0x00001D, "Member 'FAppMenuData::BaseRivalLevel' has a wrong offset!");
static_assert(offsetof(FAppMenuData, RivalDriverNormalIds) == 0x000020, "Member 'FAppMenuData::RivalDriverNormalIds' has a wrong offset!");
static_assert(offsetof(FAppMenuData, RivalDriverPowerIds) == 0x000030, "Member 'FAppMenuData::RivalDriverPowerIds' has a wrong offset!");
static_assert(offsetof(FAppMenuData, NeedsDonpaTicketForRaceRetry) == 0x000040, "Member 'FAppMenuData::NeedsDonpaTicketForRaceRetry' has a wrong offset!");
static_assert(offsetof(FAppMenuData, bIsSubMenuOnlineMode) == 0x000041, "Member 'FAppMenuData::bIsSubMenuOnlineMode' has a wrong offset!");
static_assert(offsetof(FAppMenuData, bIsConfirmedNoticeStreamingInstall) == 0x00004A, "Member 'FAppMenuData::bIsConfirmedNoticeStreamingInstall' has a wrong offset!");
static_assert(offsetof(FAppMenuData, bTryGetCompensation) == 0x00014A, "Member 'FAppMenuData::bTryGetCompensation' has a wrong offset!");

// ScriptStruct UNION.AppCharaOpenData
// 0x0002 (0x0002 - 0x0000)
struct FAppCharaOpenData final
{
public:
	bool                                          bIsCharaFullOpen;                                  // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCharaHoverFullOpen;                             // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppCharaOpenData) == 0x000001, "Wrong alignment on FAppCharaOpenData");
static_assert(sizeof(FAppCharaOpenData) == 0x000002, "Wrong size on FAppCharaOpenData");
static_assert(offsetof(FAppCharaOpenData, bIsCharaFullOpen) == 0x000000, "Member 'FAppCharaOpenData::bIsCharaFullOpen' has a wrong offset!");
static_assert(offsetof(FAppCharaOpenData, bIsCharaHoverFullOpen) == 0x000001, "Member 'FAppCharaOpenData::bIsCharaHoverFullOpen' has a wrong offset!");

// ScriptStruct UNION.StageDynamicData
// 0x0100 (0x0100 - 0x0000)
struct FStageDynamicData final
{
public:
	TArray<TSoftObjectPtr<class UWorld>>          ObjectLevels;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UUnionBtCollisionBinaryAsset> RoadCollisionAsset;                           // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UUnionNavigationBinaryDataAsset> NavigationAsset;                           // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UUnionRunPathBinaryDataAsset> RunPathAsset;                                 // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UUnionComPathBinaryDataAsset> ComPathAsset;                                 // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOverwriteDirectionalLightParameter;            // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverwriteDirectionalLightIntensity;                // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OverwriteDirectionalLightColor;                    // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverwriteDirectionalLightIntensityDisablingDynamicShadow; // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OverwriteDirectionalLightColorDisablingDynamicShadow; // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UWorld>                  TimeTrialLevel;                                    // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          ReplayLevels;                                      // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStageDynamicData) == 0x000008, "Wrong alignment on FStageDynamicData");
static_assert(sizeof(FStageDynamicData) == 0x000100, "Wrong size on FStageDynamicData");
static_assert(offsetof(FStageDynamicData, ObjectLevels) == 0x000000, "Member 'FStageDynamicData::ObjectLevels' has a wrong offset!");
static_assert(offsetof(FStageDynamicData, RoadCollisionAsset) == 0x000010, "Member 'FStageDynamicData::RoadCollisionAsset' has a wrong offset!");
static_assert(offsetof(FStageDynamicData, NavigationAsset) == 0x000038, "Member 'FStageDynamicData::NavigationAsset' has a wrong offset!");
static_assert(offsetof(FStageDynamicData, RunPathAsset) == 0x000060, "Member 'FStageDynamicData::RunPathAsset' has a wrong offset!");
static_assert(offsetof(FStageDynamicData, ComPathAsset) == 0x000088, "Member 'FStageDynamicData::ComPathAsset' has a wrong offset!");
static_assert(offsetof(FStageDynamicData, bUseOverwriteDirectionalLightParameter) == 0x0000B0, "Member 'FStageDynamicData::bUseOverwriteDirectionalLightParameter' has a wrong offset!");
static_assert(offsetof(FStageDynamicData, OverwriteDirectionalLightIntensity) == 0x0000B4, "Member 'FStageDynamicData::OverwriteDirectionalLightIntensity' has a wrong offset!");
static_assert(offsetof(FStageDynamicData, OverwriteDirectionalLightColor) == 0x0000B8, "Member 'FStageDynamicData::OverwriteDirectionalLightColor' has a wrong offset!");
static_assert(offsetof(FStageDynamicData, OverwriteDirectionalLightIntensityDisablingDynamicShadow) == 0x0000BC, "Member 'FStageDynamicData::OverwriteDirectionalLightIntensityDisablingDynamicShadow' has a wrong offset!");
static_assert(offsetof(FStageDynamicData, OverwriteDirectionalLightColorDisablingDynamicShadow) == 0x0000C0, "Member 'FStageDynamicData::OverwriteDirectionalLightColorDisablingDynamicShadow' has a wrong offset!");
static_assert(offsetof(FStageDynamicData, TimeTrialLevel) == 0x0000C8, "Member 'FStageDynamicData::TimeTrialLevel' has a wrong offset!");
static_assert(offsetof(FStageDynamicData, ReplayLevels) == 0x0000F0, "Member 'FStageDynamicData::ReplayLevels' has a wrong offset!");

// ScriptStruct UNION.AppPartyRaceData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FAppPartyRaceData final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppPartyRaceData) == 0x000008, "Wrong alignment on FAppPartyRaceData");
static_assert(sizeof(FAppPartyRaceData) == 0x000030, "Wrong size on FAppPartyRaceData");

// ScriptStruct UNION.AppFestaData
// 0x00D0 (0x00D0 - 0x0000)
struct FAppFestaData final
{
public:
	struct FTimespan                              LocalTimeSpan;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBonusChanceData;                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommon_FestaBonusChanceData           BonusChanceData;                                   // 0x000C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_FestaData                      UserResultPointInfo;                               // 0x0014(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCommon_FestaPointData                 UserResultPointDetail;                             // 0x001C(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EGroupRaceRule                                DefaultRuleId;                                     // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RuleLoopCount;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRestoredRule>                  OneSetRuleArray;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EGroupRaceRule                                FixedRuleId;                                       // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixedSpecialRule;                                 // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MyTeamFriendCount;                                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDonpaTicketNum;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardType                                   StreakRewardType;                                  // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StreakRewardId;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x64];                                      // 0x006C(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppFestaData) == 0x000008, "Wrong alignment on FAppFestaData");
static_assert(sizeof(FAppFestaData) == 0x0000D0, "Wrong size on FAppFestaData");
static_assert(offsetof(FAppFestaData, LocalTimeSpan) == 0x000000, "Member 'FAppFestaData::LocalTimeSpan' has a wrong offset!");
static_assert(offsetof(FAppFestaData, bEnableBonusChanceData) == 0x000008, "Member 'FAppFestaData::bEnableBonusChanceData' has a wrong offset!");
static_assert(offsetof(FAppFestaData, BonusChanceData) == 0x00000C, "Member 'FAppFestaData::BonusChanceData' has a wrong offset!");
static_assert(offsetof(FAppFestaData, UserResultPointInfo) == 0x000014, "Member 'FAppFestaData::UserResultPointInfo' has a wrong offset!");
static_assert(offsetof(FAppFestaData, UserResultPointDetail) == 0x00001C, "Member 'FAppFestaData::UserResultPointDetail' has a wrong offset!");
static_assert(offsetof(FAppFestaData, DefaultRuleId) == 0x00003C, "Member 'FAppFestaData::DefaultRuleId' has a wrong offset!");
static_assert(offsetof(FAppFestaData, RuleLoopCount) == 0x000040, "Member 'FAppFestaData::RuleLoopCount' has a wrong offset!");
static_assert(offsetof(FAppFestaData, OneSetRuleArray) == 0x000048, "Member 'FAppFestaData::OneSetRuleArray' has a wrong offset!");
static_assert(offsetof(FAppFestaData, FixedRuleId) == 0x000058, "Member 'FAppFestaData::FixedRuleId' has a wrong offset!");
static_assert(offsetof(FAppFestaData, bFixedSpecialRule) == 0x000059, "Member 'FAppFestaData::bFixedSpecialRule' has a wrong offset!");
static_assert(offsetof(FAppFestaData, MyTeamFriendCount) == 0x00005C, "Member 'FAppFestaData::MyTeamFriendCount' has a wrong offset!");
static_assert(offsetof(FAppFestaData, AddDonpaTicketNum) == 0x000060, "Member 'FAppFestaData::AddDonpaTicketNum' has a wrong offset!");
static_assert(offsetof(FAppFestaData, StreakRewardType) == 0x000064, "Member 'FAppFestaData::StreakRewardType' has a wrong offset!");
static_assert(offsetof(FAppFestaData, StreakRewardId) == 0x000068, "Member 'FAppFestaData::StreakRewardId' has a wrong offset!");

// ScriptStruct UNION.AppGadgetCustomizeData
// 0x0028 (0x0028 - 0x0000)
struct FAppGadgetCustomizeData final
{
public:
	TArray<int32>                                 LastSelectedGadgetID;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseRentalGadgetPlate;                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFestaSpecialRuleContinuous;                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x16];                                      // 0x0012(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppGadgetCustomizeData) == 0x000008, "Wrong alignment on FAppGadgetCustomizeData");
static_assert(sizeof(FAppGadgetCustomizeData) == 0x000028, "Wrong size on FAppGadgetCustomizeData");
static_assert(offsetof(FAppGadgetCustomizeData, LastSelectedGadgetID) == 0x000000, "Member 'FAppGadgetCustomizeData::LastSelectedGadgetID' has a wrong offset!");
static_assert(offsetof(FAppGadgetCustomizeData, bUseRentalGadgetPlate) == 0x000010, "Member 'FAppGadgetCustomizeData::bUseRentalGadgetPlate' has a wrong offset!");
static_assert(offsetof(FAppGadgetCustomizeData, bFestaSpecialRuleContinuous) == 0x000011, "Member 'FAppGadgetCustomizeData::bFestaSpecialRuleContinuous' has a wrong offset!");

// ScriptStruct UNION.WirelessSearchSessionInfo
// 0x0028 (0x0028 - 0x0000)
struct FWirelessSearchSessionInfo final
{
public:
	int32                                         CurrentStationNum;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPlayerNum;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerNumMax;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOpened;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HostPlayerName;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HostPlayerIconId;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HostPlayerIconBgColorId;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWirelessSearchSessionInfo) == 0x000008, "Wrong alignment on FWirelessSearchSessionInfo");
static_assert(sizeof(FWirelessSearchSessionInfo) == 0x000028, "Wrong size on FWirelessSearchSessionInfo");
static_assert(offsetof(FWirelessSearchSessionInfo, CurrentStationNum) == 0x000000, "Member 'FWirelessSearchSessionInfo::CurrentStationNum' has a wrong offset!");
static_assert(offsetof(FWirelessSearchSessionInfo, CurrentPlayerNum) == 0x000004, "Member 'FWirelessSearchSessionInfo::CurrentPlayerNum' has a wrong offset!");
static_assert(offsetof(FWirelessSearchSessionInfo, PlayerNumMax) == 0x000008, "Member 'FWirelessSearchSessionInfo::PlayerNumMax' has a wrong offset!");
static_assert(offsetof(FWirelessSearchSessionInfo, bIsOpened) == 0x00000C, "Member 'FWirelessSearchSessionInfo::bIsOpened' has a wrong offset!");
static_assert(offsetof(FWirelessSearchSessionInfo, HostPlayerName) == 0x000010, "Member 'FWirelessSearchSessionInfo::HostPlayerName' has a wrong offset!");
static_assert(offsetof(FWirelessSearchSessionInfo, HostPlayerIconId) == 0x000020, "Member 'FWirelessSearchSessionInfo::HostPlayerIconId' has a wrong offset!");
static_assert(offsetof(FWirelessSearchSessionInfo, HostPlayerIconBgColorId) == 0x000024, "Member 'FWirelessSearchSessionInfo::HostPlayerIconBgColorId' has a wrong offset!");

// ScriptStruct UNION.ResultCacheLobbyMemberData
// 0x0020 (0x0020 - 0x0000)
struct FResultCacheLobbyMemberData final
{
public:
	int32                                         OnlineIndex;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NickName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppSupportedPlatform                         PlatformType;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RankRate;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultCacheLobbyMemberData) == 0x000008, "Wrong alignment on FResultCacheLobbyMemberData");
static_assert(sizeof(FResultCacheLobbyMemberData) == 0x000020, "Wrong size on FResultCacheLobbyMemberData");
static_assert(offsetof(FResultCacheLobbyMemberData, OnlineIndex) == 0x000000, "Member 'FResultCacheLobbyMemberData::OnlineIndex' has a wrong offset!");
static_assert(offsetof(FResultCacheLobbyMemberData, DriverId) == 0x000004, "Member 'FResultCacheLobbyMemberData::DriverId' has a wrong offset!");
static_assert(offsetof(FResultCacheLobbyMemberData, NickName) == 0x000008, "Member 'FResultCacheLobbyMemberData::NickName' has a wrong offset!");
static_assert(offsetof(FResultCacheLobbyMemberData, PlatformType) == 0x000018, "Member 'FResultCacheLobbyMemberData::PlatformType' has a wrong offset!");
static_assert(offsetof(FResultCacheLobbyMemberData, RankRate) == 0x00001C, "Member 'FResultCacheLobbyMemberData::RankRate' has a wrong offset!");

// ScriptStruct UNION.PlayerLevelInfo
// 0x0014 (0x0014 - 0x0000)
struct FPlayerLevelInfo final
{
public:
	int32                                         PlayerLevel;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RedStarRing;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredRedStarRingForLevelUp;                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddRedStarRing;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLevelUp;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerLevelInfo) == 0x000004, "Wrong alignment on FPlayerLevelInfo");
static_assert(sizeof(FPlayerLevelInfo) == 0x000014, "Wrong size on FPlayerLevelInfo");
static_assert(offsetof(FPlayerLevelInfo, PlayerLevel) == 0x000000, "Member 'FPlayerLevelInfo::PlayerLevel' has a wrong offset!");
static_assert(offsetof(FPlayerLevelInfo, RedStarRing) == 0x000004, "Member 'FPlayerLevelInfo::RedStarRing' has a wrong offset!");
static_assert(offsetof(FPlayerLevelInfo, RequiredRedStarRingForLevelUp) == 0x000008, "Member 'FPlayerLevelInfo::RequiredRedStarRingForLevelUp' has a wrong offset!");
static_assert(offsetof(FPlayerLevelInfo, AddRedStarRing) == 0x00000C, "Member 'FPlayerLevelInfo::AddRedStarRing' has a wrong offset!");
static_assert(offsetof(FPlayerLevelInfo, IsLevelUp) == 0x000010, "Member 'FPlayerLevelInfo::IsLevelUp' has a wrong offset!");

// ScriptStruct UNION.RaceLifeTimeData
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FRaceLifeTimeData final
{
public:
	bool                                          bUnloadedStageLevels;                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xB];                                        // 0x0001(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRaceLifeTimeData) == 0x000004, "Wrong alignment on FRaceLifeTimeData");
static_assert(sizeof(FRaceLifeTimeData) == 0x00000C, "Wrong size on FRaceLifeTimeData");
static_assert(offsetof(FRaceLifeTimeData, bUnloadedStageLevels) == 0x000000, "Member 'FRaceLifeTimeData::bUnloadedStageLevels' has a wrong offset!");

// ScriptStruct UNION.SquadGroup
// 0x0040 (0x0040 - 0x0000)
struct FSquadGroup final
{
public:
	class FString                                 HostId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         GuestIds;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 HostName;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         GuestNames;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSquadGroup) == 0x000008, "Wrong alignment on FSquadGroup");
static_assert(sizeof(FSquadGroup) == 0x000040, "Wrong size on FSquadGroup");
static_assert(offsetof(FSquadGroup, HostId) == 0x000000, "Member 'FSquadGroup::HostId' has a wrong offset!");
static_assert(offsetof(FSquadGroup, GuestIds) == 0x000010, "Member 'FSquadGroup::GuestIds' has a wrong offset!");
static_assert(offsetof(FSquadGroup, HostName) == 0x000020, "Member 'FSquadGroup::HostName' has a wrong offset!");
static_assert(offsetof(FSquadGroup, GuestNames) == 0x000030, "Member 'FSquadGroup::GuestNames' has a wrong offset!");

// ScriptStruct UNION.CameraStateParam
// 0x0010 (0x0010 - 0x0000)
struct FCameraStateParam final
{
public:
	float                                         CompTime;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTimeComp;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTimeRate;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraStateParam) == 0x000004, "Wrong alignment on FCameraStateParam");
static_assert(sizeof(FCameraStateParam) == 0x000010, "Wrong size on FCameraStateParam");
static_assert(offsetof(FCameraStateParam, CompTime) == 0x000000, "Member 'FCameraStateParam::CompTime' has a wrong offset!");
static_assert(offsetof(FCameraStateParam, ElapsedTime) == 0x000004, "Member 'FCameraStateParam::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FCameraStateParam, ElapsedTimeComp) == 0x000008, "Member 'FCameraStateParam::ElapsedTimeComp' has a wrong offset!");
static_assert(offsetof(FCameraStateParam, ElapsedTimeRate) == 0x00000C, "Member 'FCameraStateParam::ElapsedTimeRate' has a wrong offset!");

// ScriptStruct UNION.RivalCameraParam
// 0x0020 (0x0020 - 0x0000)
struct FRivalCameraParam final
{
public:
	struct FCameraStateParam                      ViewStartUp;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraStateParam                      ViewPlay;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRivalCameraParam) == 0x000004, "Wrong alignment on FRivalCameraParam");
static_assert(sizeof(FRivalCameraParam) == 0x000020, "Wrong size on FRivalCameraParam");
static_assert(offsetof(FRivalCameraParam, ViewStartUp) == 0x000000, "Member 'FRivalCameraParam::ViewStartUp' has a wrong offset!");
static_assert(offsetof(FRivalCameraParam, ViewPlay) == 0x000010, "Member 'FRivalCameraParam::ViewPlay' has a wrong offset!");

// ScriptStruct UNION.CameraTransformMovementData
// 0x0080 (0x0080 - 0x0000)
struct FCameraTransformMovementData final
{
public:
	class FString                                 Desc;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomOffsetMultiplier;                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraTransformMovementData) == 0x000010, "Wrong alignment on FCameraTransformMovementData");
static_assert(sizeof(FCameraTransformMovementData) == 0x000080, "Wrong size on FCameraTransformMovementData");
static_assert(offsetof(FCameraTransformMovementData, Desc) == 0x000000, "Member 'FCameraTransformMovementData::Desc' has a wrong offset!");
static_assert(offsetof(FCameraTransformMovementData, Transform) == 0x000010, "Member 'FCameraTransformMovementData::Transform' has a wrong offset!");
static_assert(offsetof(FCameraTransformMovementData, ZoomOffsetMultiplier) == 0x000070, "Member 'FCameraTransformMovementData::ZoomOffsetMultiplier' has a wrong offset!");

// ScriptStruct UNION.CharaMachineSelectSettingData
// 0x0018 (0x0020 - 0x0008)
struct FCharaMachineSelectSettingData final : public FTableRowBase
{
public:
	float                                         CharaSelectSizeSHeightOffset;                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaSelectSizeLHeightOffset;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaSelectSizeXLHeightOffset;                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MachineSelectSizeSHeightOffset;                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MachineSelectSizeLHeightOffset;                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MachineSelectSizeXLHeightOffset;                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharaMachineSelectSettingData) == 0x000008, "Wrong alignment on FCharaMachineSelectSettingData");
static_assert(sizeof(FCharaMachineSelectSettingData) == 0x000020, "Wrong size on FCharaMachineSelectSettingData");
static_assert(offsetof(FCharaMachineSelectSettingData, CharaSelectSizeSHeightOffset) == 0x000008, "Member 'FCharaMachineSelectSettingData::CharaSelectSizeSHeightOffset' has a wrong offset!");
static_assert(offsetof(FCharaMachineSelectSettingData, CharaSelectSizeLHeightOffset) == 0x00000C, "Member 'FCharaMachineSelectSettingData::CharaSelectSizeLHeightOffset' has a wrong offset!");
static_assert(offsetof(FCharaMachineSelectSettingData, CharaSelectSizeXLHeightOffset) == 0x000010, "Member 'FCharaMachineSelectSettingData::CharaSelectSizeXLHeightOffset' has a wrong offset!");
static_assert(offsetof(FCharaMachineSelectSettingData, MachineSelectSizeSHeightOffset) == 0x000014, "Member 'FCharaMachineSelectSettingData::MachineSelectSizeSHeightOffset' has a wrong offset!");
static_assert(offsetof(FCharaMachineSelectSettingData, MachineSelectSizeLHeightOffset) == 0x000018, "Member 'FCharaMachineSelectSettingData::MachineSelectSizeLHeightOffset' has a wrong offset!");
static_assert(offsetof(FCharaMachineSelectSettingData, MachineSelectSizeXLHeightOffset) == 0x00001C, "Member 'FCharaMachineSelectSettingData::MachineSelectSizeXLHeightOffset' has a wrong offset!");

// ScriptStruct UNION.StageCourseMapInfo
// 0x0048 (0x0048 - 0x0000)
struct FStageCourseMapInfo final
{
public:
	TSoftObjectPtr<class UTexture2D>              CourseMapTexture;                                  // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrthoRate;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStageCourseMapInfo) == 0x000008, "Wrong alignment on FStageCourseMapInfo");
static_assert(sizeof(FStageCourseMapInfo) == 0x000048, "Wrong size on FStageCourseMapInfo");
static_assert(offsetof(FStageCourseMapInfo, CourseMapTexture) == 0x000000, "Member 'FStageCourseMapInfo::CourseMapTexture' has a wrong offset!");
static_assert(offsetof(FStageCourseMapInfo, OrthoRate) == 0x000028, "Member 'FStageCourseMapInfo::OrthoRate' has a wrong offset!");
static_assert(offsetof(FStageCourseMapInfo, Angle) == 0x00002C, "Member 'FStageCourseMapInfo::Angle' has a wrong offset!");
static_assert(offsetof(FStageCourseMapInfo, Offset) == 0x000030, "Member 'FStageCourseMapInfo::Offset' has a wrong offset!");

// ScriptStruct UNION.CharaSelectResource
// 0x0018 (0x0018 - 0x0000)
struct FCharaSelectResource final
{
public:
	class UObject*                                SkeletalMesh;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SteeringWheelMesh;                                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    AnimClass;                                         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharaSelectResource) == 0x000008, "Wrong alignment on FCharaSelectResource");
static_assert(sizeof(FCharaSelectResource) == 0x000018, "Wrong size on FCharaSelectResource");
static_assert(offsetof(FCharaSelectResource, SkeletalMesh) == 0x000000, "Member 'FCharaSelectResource::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FCharaSelectResource, SteeringWheelMesh) == 0x000008, "Member 'FCharaSelectResource::SteeringWheelMesh' has a wrong offset!");
static_assert(offsetof(FCharaSelectResource, AnimClass) == 0x000010, "Member 'FCharaSelectResource::AnimClass' has a wrong offset!");

// ScriptStruct UNION.CommonMenuTextData
// 0x0020 (0x0028 - 0x0008)
struct FCommonMenuTextData final : public FTableRowBase
{
public:
	class FText                                   ButtonText;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   InfoText;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonMenuTextData) == 0x000008, "Wrong alignment on FCommonMenuTextData");
static_assert(sizeof(FCommonMenuTextData) == 0x000028, "Wrong size on FCommonMenuTextData");
static_assert(offsetof(FCommonMenuTextData, ButtonText) == 0x000008, "Member 'FCommonMenuTextData::ButtonText' has a wrong offset!");
static_assert(offsetof(FCommonMenuTextData, InfoText) == 0x000018, "Member 'FCommonMenuTextData::InfoText' has a wrong offset!");

// ScriptStruct UNION.PerformInteractionStruct
// 0x0058 (0x0060 - 0x0008)
struct FPerformInteractionStruct final : public FTableRowBase
{
public:
	EDriverId                                     MotionDriver;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EDriverId, EPerformRivalInteractionType> ActionMap;                                         // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerformInteractionStruct) == 0x000008, "Wrong alignment on FPerformInteractionStruct");
static_assert(sizeof(FPerformInteractionStruct) == 0x000060, "Wrong size on FPerformInteractionStruct");
static_assert(offsetof(FPerformInteractionStruct, MotionDriver) == 0x000008, "Member 'FPerformInteractionStruct::MotionDriver' has a wrong offset!");
static_assert(offsetof(FPerformInteractionStruct, ActionMap) == 0x000010, "Member 'FPerformInteractionStruct::ActionMap' has a wrong offset!");

// ScriptStruct UNION.CommonMenuFooterTextData
// 0x0018 (0x0020 - 0x0008)
struct FCommonMenuFooterTextData final : public FTableRowBase
{
public:
	class FText                                   FooterText;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EUIButtonIconType                             IconType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IconIndex;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonMenuFooterTextData) == 0x000008, "Wrong alignment on FCommonMenuFooterTextData");
static_assert(sizeof(FCommonMenuFooterTextData) == 0x000020, "Wrong size on FCommonMenuFooterTextData");
static_assert(offsetof(FCommonMenuFooterTextData, FooterText) == 0x000008, "Member 'FCommonMenuFooterTextData::FooterText' has a wrong offset!");
static_assert(offsetof(FCommonMenuFooterTextData, IconType) == 0x000018, "Member 'FCommonMenuFooterTextData::IconType' has a wrong offset!");
static_assert(offsetof(FCommonMenuFooterTextData, IconIndex) == 0x00001C, "Member 'FCommonMenuFooterTextData::IconIndex' has a wrong offset!");

// ScriptStruct UNION.FooterMenuWidgetArray
// 0x0010 (0x0010 - 0x0000)
struct FFooterMenuWidgetArray final
{
public:
	TArray<class UWidget*>                        Widgets;                                           // 0x0000(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFooterMenuWidgetArray) == 0x000008, "Wrong alignment on FFooterMenuWidgetArray");
static_assert(sizeof(FFooterMenuWidgetArray) == 0x000010, "Wrong size on FFooterMenuWidgetArray");
static_assert(offsetof(FFooterMenuWidgetArray, Widgets) == 0x000000, "Member 'FFooterMenuWidgetArray::Widgets' has a wrong offset!");

// ScriptStruct UNION.CommonRaceMenuContentRow
// 0x0030 (0x0038 - 0x0008)
struct FCommonRaceMenuContentRow final : public FTableRowBase
{
public:
	ECommonRaceMenuContentId                      contentId;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonRaceMenuIconId                         IconId;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ContentText;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bDoesNeedToPopupWarning;                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PopupWarningMessage;                               // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonRaceMenuContentRow) == 0x000008, "Wrong alignment on FCommonRaceMenuContentRow");
static_assert(sizeof(FCommonRaceMenuContentRow) == 0x000038, "Wrong size on FCommonRaceMenuContentRow");
static_assert(offsetof(FCommonRaceMenuContentRow, contentId) == 0x000008, "Member 'FCommonRaceMenuContentRow::contentId' has a wrong offset!");
static_assert(offsetof(FCommonRaceMenuContentRow, IconId) == 0x000009, "Member 'FCommonRaceMenuContentRow::IconId' has a wrong offset!");
static_assert(offsetof(FCommonRaceMenuContentRow, ContentText) == 0x000010, "Member 'FCommonRaceMenuContentRow::ContentText' has a wrong offset!");
static_assert(offsetof(FCommonRaceMenuContentRow, bDoesNeedToPopupWarning) == 0x000020, "Member 'FCommonRaceMenuContentRow::bDoesNeedToPopupWarning' has a wrong offset!");
static_assert(offsetof(FCommonRaceMenuContentRow, PopupWarningMessage) == 0x000028, "Member 'FCommonRaceMenuContentRow::PopupWarningMessage' has a wrong offset!");

// ScriptStruct UNION.DebugAppMenuData
// 0x0003 (0x0003 - 0x0000)
struct FDebugAppMenuData final
{
public:
	bool                                          bIsSafe2ndLapCourse;                               // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOfflineResultForcePressed;                      // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUserCourse;                                  // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugAppMenuData) == 0x000001, "Wrong alignment on FDebugAppMenuData");
static_assert(sizeof(FDebugAppMenuData) == 0x000003, "Wrong size on FDebugAppMenuData");
static_assert(offsetof(FDebugAppMenuData, bIsSafe2ndLapCourse) == 0x000000, "Member 'FDebugAppMenuData::bIsSafe2ndLapCourse' has a wrong offset!");
static_assert(offsetof(FDebugAppMenuData, bIsOfflineResultForcePressed) == 0x000001, "Member 'FDebugAppMenuData::bIsOfflineResultForcePressed' has a wrong offset!");
static_assert(offsetof(FDebugAppMenuData, bForceUserCourse) == 0x000002, "Member 'FDebugAppMenuData::bForceUserCourse' has a wrong offset!");

// ScriptStruct UNION.RateRankPoint
// 0x0038 (0x0040 - 0x0008)
struct FRateRankPoint final : public FTableRowBase
{
public:
	ERateRank                                     Rank;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         r1;                                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         r2;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         r3;                                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         r4;                                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         r5;                                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         r6;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         r7;                                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         r8;                                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         r9;                                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         r10;                                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         r11;                                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         r12;                                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRateRankPoint) == 0x000008, "Wrong alignment on FRateRankPoint");
static_assert(sizeof(FRateRankPoint) == 0x000040, "Wrong size on FRateRankPoint");
static_assert(offsetof(FRateRankPoint, Rank) == 0x000008, "Member 'FRateRankPoint::Rank' has a wrong offset!");
static_assert(offsetof(FRateRankPoint, r1) == 0x00000C, "Member 'FRateRankPoint::r1' has a wrong offset!");
static_assert(offsetof(FRateRankPoint, r2) == 0x000010, "Member 'FRateRankPoint::r2' has a wrong offset!");
static_assert(offsetof(FRateRankPoint, r3) == 0x000014, "Member 'FRateRankPoint::r3' has a wrong offset!");
static_assert(offsetof(FRateRankPoint, r4) == 0x000018, "Member 'FRateRankPoint::r4' has a wrong offset!");
static_assert(offsetof(FRateRankPoint, r5) == 0x00001C, "Member 'FRateRankPoint::r5' has a wrong offset!");
static_assert(offsetof(FRateRankPoint, r6) == 0x000020, "Member 'FRateRankPoint::r6' has a wrong offset!");
static_assert(offsetof(FRateRankPoint, r7) == 0x000024, "Member 'FRateRankPoint::r7' has a wrong offset!");
static_assert(offsetof(FRateRankPoint, r8) == 0x000028, "Member 'FRateRankPoint::r8' has a wrong offset!");
static_assert(offsetof(FRateRankPoint, r9) == 0x00002C, "Member 'FRateRankPoint::r9' has a wrong offset!");
static_assert(offsetof(FRateRankPoint, r10) == 0x000030, "Member 'FRateRankPoint::r10' has a wrong offset!");
static_assert(offsetof(FRateRankPoint, r11) == 0x000034, "Member 'FRateRankPoint::r11' has a wrong offset!");
static_assert(offsetof(FRateRankPoint, r12) == 0x000038, "Member 'FRateRankPoint::r12' has a wrong offset!");

// ScriptStruct UNION.DefaultGadgetPresetData
// 0x0010 (0x0018 - 0x0008)
struct FDefaultGadgetPresetData final : public FTableRowBase
{
public:
	struct FUserGadgetPresetData                  PresetData;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDefaultGadgetPresetData) == 0x000008, "Wrong alignment on FDefaultGadgetPresetData");
static_assert(sizeof(FDefaultGadgetPresetData) == 0x000018, "Wrong size on FDefaultGadgetPresetData");
static_assert(offsetof(FDefaultGadgetPresetData, PresetData) == 0x000008, "Member 'FDefaultGadgetPresetData::PresetData' has a wrong offset!");

// ScriptStruct UNION.DefaultMachineCustomizeData
// 0x0078 (0x0080 - 0x0008)
struct FDefaultMachineCustomizeData final : public FTableRowBase
{
public:
	struct FUserMachineCustomizeData              Data;                                              // 0x0008(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDefaultMachineCustomizeData) == 0x000008, "Wrong alignment on FDefaultMachineCustomizeData");
static_assert(sizeof(FDefaultMachineCustomizeData) == 0x000080, "Wrong size on FDefaultMachineCustomizeData");
static_assert(offsetof(FDefaultMachineCustomizeData, Data) == 0x000008, "Member 'FDefaultMachineCustomizeData::Data' has a wrong offset!");

// ScriptStruct UNION.RaceEndMenuUserReportPlayerData
// 0x0030 (0x0030 - 0x0000)
struct FRaceEndMenuUserReportPlayerData final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocalPlayer;                                     // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCom;                                             // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRival;                                           // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrossplayPlatform                            Platform;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RacerIndex;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceEndMenuUserReportPlayerData) == 0x000008, "Wrong alignment on FRaceEndMenuUserReportPlayerData");
static_assert(sizeof(FRaceEndMenuUserReportPlayerData) == 0x000030, "Wrong size on FRaceEndMenuUserReportPlayerData");
static_assert(offsetof(FRaceEndMenuUserReportPlayerData, Name) == 0x000000, "Member 'FRaceEndMenuUserReportPlayerData::Name' has a wrong offset!");
static_assert(offsetof(FRaceEndMenuUserReportPlayerData, Rank) == 0x000010, "Member 'FRaceEndMenuUserReportPlayerData::Rank' has a wrong offset!");
static_assert(offsetof(FRaceEndMenuUserReportPlayerData, DriverId) == 0x000014, "Member 'FRaceEndMenuUserReportPlayerData::DriverId' has a wrong offset!");
static_assert(offsetof(FRaceEndMenuUserReportPlayerData, IsLocalPlayer) == 0x000015, "Member 'FRaceEndMenuUserReportPlayerData::IsLocalPlayer' has a wrong offset!");
static_assert(offsetof(FRaceEndMenuUserReportPlayerData, IsCom) == 0x000016, "Member 'FRaceEndMenuUserReportPlayerData::IsCom' has a wrong offset!");
static_assert(offsetof(FRaceEndMenuUserReportPlayerData, IsRival) == 0x000017, "Member 'FRaceEndMenuUserReportPlayerData::IsRival' has a wrong offset!");
static_assert(offsetof(FRaceEndMenuUserReportPlayerData, Platform) == 0x000018, "Member 'FRaceEndMenuUserReportPlayerData::Platform' has a wrong offset!");
static_assert(offsetof(FRaceEndMenuUserReportPlayerData, RacerIndex) == 0x00001C, "Member 'FRaceEndMenuUserReportPlayerData::RacerIndex' has a wrong offset!");
static_assert(offsetof(FRaceEndMenuUserReportPlayerData, UserId) == 0x000020, "Member 'FRaceEndMenuUserReportPlayerData::UserId' has a wrong offset!");

// ScriptStruct UNION.DialogueSequence
// 0x0018 (0x0020 - 0x0008)
struct FDialogueSequence final : public FTableRowBase
{
public:
	EDialogueEventCommand                         Command;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Arg1;                                              // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Arg2;                                              // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueSequence) == 0x000008, "Wrong alignment on FDialogueSequence");
static_assert(sizeof(FDialogueSequence) == 0x000020, "Wrong size on FDialogueSequence");
static_assert(offsetof(FDialogueSequence, Command) == 0x000008, "Member 'FDialogueSequence::Command' has a wrong offset!");
static_assert(offsetof(FDialogueSequence, Arg1) == 0x00000C, "Member 'FDialogueSequence::Arg1' has a wrong offset!");
static_assert(offsetof(FDialogueSequence, Arg2) == 0x000014, "Member 'FDialogueSequence::Arg2' has a wrong offset!");

// ScriptStruct UNION.DialogueSoundData
// 0x0008 (0x0010 - 0x0008)
struct FDialogueSoundData final : public FTableRowBase
{
public:
	class USoundAtomCue*                          SoundCue;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueSoundData) == 0x000008, "Wrong alignment on FDialogueSoundData");
static_assert(sizeof(FDialogueSoundData) == 0x000010, "Wrong size on FDialogueSoundData");
static_assert(offsetof(FDialogueSoundData, SoundCue) == 0x000008, "Member 'FDialogueSoundData::SoundCue' has a wrong offset!");

// ScriptStruct UNION.DialogueEventData
// 0x0050 (0x0058 - 0x0008)
struct FDialogueEventData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UDataTable>              EventDataTable;                                    // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              TextDataTable;                                     // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueEventData) == 0x000008, "Wrong alignment on FDialogueEventData");
static_assert(sizeof(FDialogueEventData) == 0x000058, "Wrong size on FDialogueEventData");
static_assert(offsetof(FDialogueEventData, EventDataTable) == 0x000008, "Member 'FDialogueEventData::EventDataTable' has a wrong offset!");
static_assert(offsetof(FDialogueEventData, TextDataTable) == 0x000030, "Member 'FDialogueEventData::TextDataTable' has a wrong offset!");

// ScriptStruct UNION.MenuRankingLineData
// 0x0038 (0x0038 - 0x0000)
struct FMenuRankingLineData final
{
public:
	int32                                         rankValue;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     CharaId;                                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrossplayPlatform                            CrossplayType;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RacerName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         HonerTitleId;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankPointValue;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointValue;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeValue;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMenuRankingLineData) == 0x000008, "Wrong alignment on FMenuRankingLineData");
static_assert(sizeof(FMenuRankingLineData) == 0x000038, "Wrong size on FMenuRankingLineData");
static_assert(offsetof(FMenuRankingLineData, rankValue) == 0x000000, "Member 'FMenuRankingLineData::rankValue' has a wrong offset!");
static_assert(offsetof(FMenuRankingLineData, CharaId) == 0x000004, "Member 'FMenuRankingLineData::CharaId' has a wrong offset!");
static_assert(offsetof(FMenuRankingLineData, CrossplayType) == 0x000005, "Member 'FMenuRankingLineData::CrossplayType' has a wrong offset!");
static_assert(offsetof(FMenuRankingLineData, RacerName) == 0x000008, "Member 'FMenuRankingLineData::RacerName' has a wrong offset!");
static_assert(offsetof(FMenuRankingLineData, HonerTitleId) == 0x000018, "Member 'FMenuRankingLineData::HonerTitleId' has a wrong offset!");
static_assert(offsetof(FMenuRankingLineData, RankPointValue) == 0x00001C, "Member 'FMenuRankingLineData::RankPointValue' has a wrong offset!");
static_assert(offsetof(FMenuRankingLineData, pointValue) == 0x000020, "Member 'FMenuRankingLineData::pointValue' has a wrong offset!");
static_assert(offsetof(FMenuRankingLineData, TimeValue) == 0x000024, "Member 'FMenuRankingLineData::TimeValue' has a wrong offset!");

// ScriptStruct UNION.DriverCrownDataTableStruct
// 0x0058 (0x0060 - 0x0008)
struct FDriverCrownDataTableStruct final : public FTableRowBase
{
public:
	EDriverId                                     DriverId;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocketName;                                  // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttachOffset;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrownScale;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          CrownEffect;                                       // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDriverCrownDataTableStruct) == 0x000008, "Wrong alignment on FDriverCrownDataTableStruct");
static_assert(sizeof(FDriverCrownDataTableStruct) == 0x000060, "Wrong size on FDriverCrownDataTableStruct");
static_assert(offsetof(FDriverCrownDataTableStruct, DriverId) == 0x000008, "Member 'FDriverCrownDataTableStruct::DriverId' has a wrong offset!");
static_assert(offsetof(FDriverCrownDataTableStruct, AttachSocketName) == 0x00000C, "Member 'FDriverCrownDataTableStruct::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FDriverCrownDataTableStruct, AttachOffset) == 0x000018, "Member 'FDriverCrownDataTableStruct::AttachOffset' has a wrong offset!");
static_assert(offsetof(FDriverCrownDataTableStruct, CrownScale) == 0x000030, "Member 'FDriverCrownDataTableStruct::CrownScale' has a wrong offset!");
static_assert(offsetof(FDriverCrownDataTableStruct, CrownEffect) == 0x000038, "Member 'FDriverCrownDataTableStruct::CrownEffect' has a wrong offset!");

// ScriptStruct UNION.DriverCustomParamData
// 0x0018 (0x0020 - 0x0008)
struct FDriverCustomParamData final : public FTableRowBase
{
public:
	EDriverId                                     DriverId;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accel;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dash;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Handling;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDriverCustomParamData) == 0x000008, "Wrong alignment on FDriverCustomParamData");
static_assert(sizeof(FDriverCustomParamData) == 0x000020, "Wrong size on FDriverCustomParamData");
static_assert(offsetof(FDriverCustomParamData, DriverId) == 0x000008, "Member 'FDriverCustomParamData::DriverId' has a wrong offset!");
static_assert(offsetof(FDriverCustomParamData, Speed) == 0x00000C, "Member 'FDriverCustomParamData::Speed' has a wrong offset!");
static_assert(offsetof(FDriverCustomParamData, Accel) == 0x000010, "Member 'FDriverCustomParamData::Accel' has a wrong offset!");
static_assert(offsetof(FDriverCustomParamData, Dash) == 0x000014, "Member 'FDriverCustomParamData::Dash' has a wrong offset!");
static_assert(offsetof(FDriverCustomParamData, Handling) == 0x000018, "Member 'FDriverCustomParamData::Handling' has a wrong offset!");
static_assert(offsetof(FDriverCustomParamData, Power) == 0x00001C, "Member 'FDriverCustomParamData::Power' has a wrong offset!");

// ScriptStruct UNION.RaceCameraParam
// 0x0080 (0x0080 - 0x0000)
struct FRaceCameraParam final
{
public:
	bool                                          bEditDisplayName;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EditorDisplayName;                                 // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompTime;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               BeginRotation;                                     // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetArmLength;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetOffset;                                      // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SocketOffset;                                      // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddRotation;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceCameraParam) == 0x000008, "Wrong alignment on FRaceCameraParam");
static_assert(sizeof(FRaceCameraParam) == 0x000080, "Wrong size on FRaceCameraParam");
static_assert(offsetof(FRaceCameraParam, bEditDisplayName) == 0x000000, "Member 'FRaceCameraParam::bEditDisplayName' has a wrong offset!");
static_assert(offsetof(FRaceCameraParam, EditorDisplayName) == 0x000004, "Member 'FRaceCameraParam::EditorDisplayName' has a wrong offset!");
static_assert(offsetof(FRaceCameraParam, CompTime) == 0x00000C, "Member 'FRaceCameraParam::CompTime' has a wrong offset!");
static_assert(offsetof(FRaceCameraParam, BeginRotation) == 0x000028, "Member 'FRaceCameraParam::BeginRotation' has a wrong offset!");
static_assert(offsetof(FRaceCameraParam, TargetArmLength) == 0x000040, "Member 'FRaceCameraParam::TargetArmLength' has a wrong offset!");
static_assert(offsetof(FRaceCameraParam, TargetOffset) == 0x000048, "Member 'FRaceCameraParam::TargetOffset' has a wrong offset!");
static_assert(offsetof(FRaceCameraParam, SocketOffset) == 0x000060, "Member 'FRaceCameraParam::SocketOffset' has a wrong offset!");
static_assert(offsetof(FRaceCameraParam, AddRotation) == 0x000078, "Member 'FRaceCameraParam::AddRotation' has a wrong offset!");
static_assert(offsetof(FRaceCameraParam, FOV) == 0x00007C, "Member 'FRaceCameraParam::FOV' has a wrong offset!");

// ScriptStruct UNION.RaceCameraMapElement
// 0x0010 (0x0010 - 0x0000)
struct FRaceCameraMapElement final
{
public:
	TArray<struct FRaceCameraParam>               ViewSplitParam;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceCameraMapElement) == 0x000008, "Wrong alignment on FRaceCameraMapElement");
static_assert(sizeof(FRaceCameraMapElement) == 0x000010, "Wrong size on FRaceCameraMapElement");
static_assert(offsetof(FRaceCameraMapElement, ViewSplitParam) == 0x000000, "Member 'FRaceCameraMapElement::ViewSplitParam' has a wrong offset!");

// ScriptStruct UNION.RaceCameraCustomMapElement
// 0x0050 (0x0050 - 0x0000)
struct FRaceCameraCustomMapElement final
{
public:
	TMap<EResultCameraProductionType, struct FRaceCameraMapElement> ProductionMap;                   // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceCameraCustomMapElement) == 0x000008, "Wrong alignment on FRaceCameraCustomMapElement");
static_assert(sizeof(FRaceCameraCustomMapElement) == 0x000050, "Wrong size on FRaceCameraCustomMapElement");
static_assert(offsetof(FRaceCameraCustomMapElement, ProductionMap) == 0x000000, "Member 'FRaceCameraCustomMapElement::ProductionMap' has a wrong offset!");

// ScriptStruct UNION.RaceCameraCustomParam
// 0x0050 (0x0050 - 0x0000)
struct FRaceCameraCustomParam final
{
public:
	TMap<ECarStatusType, struct FRaceCameraCustomMapElement> CarStatusParam;                         // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceCameraCustomParam) == 0x000008, "Wrong alignment on FRaceCameraCustomParam");
static_assert(sizeof(FRaceCameraCustomParam) == 0x000050, "Wrong size on FRaceCameraCustomParam");
static_assert(offsetof(FRaceCameraCustomParam, CarStatusParam) == 0x000000, "Member 'FRaceCameraCustomParam::CarStatusParam' has a wrong offset!");

// ScriptStruct UNION.DroneRelativeTrasformInfo
// 0x0020 (0x0020 - 0x0000)
struct FDroneRelativeTrasformInfo final
{
public:
	struct FVector                                RelativePosition;                                  // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOutDistance;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOutAngle;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDroneRelativeTrasformInfo) == 0x000008, "Wrong alignment on FDroneRelativeTrasformInfo");
static_assert(sizeof(FDroneRelativeTrasformInfo) == 0x000020, "Wrong size on FDroneRelativeTrasformInfo");
static_assert(offsetof(FDroneRelativeTrasformInfo, RelativePosition) == 0x000000, "Member 'FDroneRelativeTrasformInfo::RelativePosition' has a wrong offset!");
static_assert(offsetof(FDroneRelativeTrasformInfo, InOutDistance) == 0x000018, "Member 'FDroneRelativeTrasformInfo::InOutDistance' has a wrong offset!");
static_assert(offsetof(FDroneRelativeTrasformInfo, InOutAngle) == 0x00001C, "Member 'FDroneRelativeTrasformInfo::InOutAngle' has a wrong offset!");

// ScriptStruct UNION.GaugePointResult
// 0x000C (0x000C - 0x0000)
struct FGaugePointResult final
{
public:
	float                                         Now;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainAdd;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighLow;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGaugePointResult) == 0x000004, "Wrong alignment on FGaugePointResult");
static_assert(sizeof(FGaugePointResult) == 0x00000C, "Wrong size on FGaugePointResult");
static_assert(offsetof(FGaugePointResult, Now) == 0x000000, "Member 'FGaugePointResult::Now' has a wrong offset!");
static_assert(offsetof(FGaugePointResult, RemainAdd) == 0x000004, "Member 'FGaugePointResult::RemainAdd' has a wrong offset!");
static_assert(offsetof(FGaugePointResult, HighLow) == 0x000008, "Member 'FGaugePointResult::HighLow' has a wrong offset!");

// ScriptStruct UNION.EventInfoTitleText
// 0x0060 (0x0060 - 0x0000)
struct FEventInfoTitleText final
{
public:
	class FText                                   RuleTitle;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   PointRewardTitle;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   WorldRankingTitle;                                 // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FriendRankingTitle;                                // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   OtherTitle;                                        // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FinalResultTitle;                                  // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventInfoTitleText) == 0x000008, "Wrong alignment on FEventInfoTitleText");
static_assert(sizeof(FEventInfoTitleText) == 0x000060, "Wrong size on FEventInfoTitleText");
static_assert(offsetof(FEventInfoTitleText, RuleTitle) == 0x000000, "Member 'FEventInfoTitleText::RuleTitle' has a wrong offset!");
static_assert(offsetof(FEventInfoTitleText, PointRewardTitle) == 0x000010, "Member 'FEventInfoTitleText::PointRewardTitle' has a wrong offset!");
static_assert(offsetof(FEventInfoTitleText, WorldRankingTitle) == 0x000020, "Member 'FEventInfoTitleText::WorldRankingTitle' has a wrong offset!");
static_assert(offsetof(FEventInfoTitleText, FriendRankingTitle) == 0x000030, "Member 'FEventInfoTitleText::FriendRankingTitle' has a wrong offset!");
static_assert(offsetof(FEventInfoTitleText, OtherTitle) == 0x000040, "Member 'FEventInfoTitleText::OtherTitle' has a wrong offset!");
static_assert(offsetof(FEventInfoTitleText, FinalResultTitle) == 0x000050, "Member 'FEventInfoTitleText::FinalResultTitle' has a wrong offset!");

// ScriptStruct UNION.EventInfoPointRewardData
// 0x0018 (0x0018 - 0x0000)
struct FEventInfoPointRewardData final
{
public:
	TArray<struct FFestaPointRewardUIData>        RewardData;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             BGTexture;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventInfoPointRewardData) == 0x000008, "Wrong alignment on FEventInfoPointRewardData");
static_assert(sizeof(FEventInfoPointRewardData) == 0x000018, "Wrong size on FEventInfoPointRewardData");
static_assert(offsetof(FEventInfoPointRewardData, RewardData) == 0x000000, "Member 'FEventInfoPointRewardData::RewardData' has a wrong offset!");
static_assert(offsetof(FEventInfoPointRewardData, BGTexture) == 0x000010, "Member 'FEventInfoPointRewardData::BGTexture' has a wrong offset!");

// ScriptStruct UNION.PartyResultTeamInfo
// 0x0048 (0x0048 - 0x0000)
struct FPartyResultTeamInfo final
{
public:
	TArray<float>                                 NowTimeList;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 NextTimeList;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 NowPointList;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 NextPointList;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Time1st;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyResultTeamInfo) == 0x000008, "Wrong alignment on FPartyResultTeamInfo");
static_assert(sizeof(FPartyResultTeamInfo) == 0x000048, "Wrong size on FPartyResultTeamInfo");
static_assert(offsetof(FPartyResultTeamInfo, NowTimeList) == 0x000000, "Member 'FPartyResultTeamInfo::NowTimeList' has a wrong offset!");
static_assert(offsetof(FPartyResultTeamInfo, NextTimeList) == 0x000010, "Member 'FPartyResultTeamInfo::NextTimeList' has a wrong offset!");
static_assert(offsetof(FPartyResultTeamInfo, NowPointList) == 0x000020, "Member 'FPartyResultTeamInfo::NowPointList' has a wrong offset!");
static_assert(offsetof(FPartyResultTeamInfo, NextPointList) == 0x000030, "Member 'FPartyResultTeamInfo::NextPointList' has a wrong offset!");
static_assert(offsetof(FPartyResultTeamInfo, Time1st) == 0x000040, "Member 'FPartyResultTeamInfo::Time1st' has a wrong offset!");

// ScriptStruct UNION.EventInfoFinalResultData
// 0x0010 (0x0010 - 0x0000)
struct FEventInfoFinalResultData final
{
public:
	int32                                         Ranking;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BGTexture;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventInfoFinalResultData) == 0x000008, "Wrong alignment on FEventInfoFinalResultData");
static_assert(sizeof(FEventInfoFinalResultData) == 0x000010, "Wrong size on FEventInfoFinalResultData");
static_assert(offsetof(FEventInfoFinalResultData, Ranking) == 0x000000, "Member 'FEventInfoFinalResultData::Ranking' has a wrong offset!");
static_assert(offsetof(FEventInfoFinalResultData, Point) == 0x000004, "Member 'FEventInfoFinalResultData::Point' has a wrong offset!");
static_assert(offsetof(FEventInfoFinalResultData, BGTexture) == 0x000008, "Member 'FEventInfoFinalResultData::BGTexture' has a wrong offset!");

// ScriptStruct UNION.Fixed2ndLapStageId
// 0x0030 (0x0038 - 0x0008)
struct FFixed2ndLapStageId final : public FTableRowBase
{
public:
	TArray<EStageId>                              FirstRound;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EStageId>                              SecondRound;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EStageId>                              ThirdRound;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFixed2ndLapStageId) == 0x000008, "Wrong alignment on FFixed2ndLapStageId");
static_assert(sizeof(FFixed2ndLapStageId) == 0x000038, "Wrong size on FFixed2ndLapStageId");
static_assert(offsetof(FFixed2ndLapStageId, FirstRound) == 0x000008, "Member 'FFixed2ndLapStageId::FirstRound' has a wrong offset!");
static_assert(offsetof(FFixed2ndLapStageId, SecondRound) == 0x000018, "Member 'FFixed2ndLapStageId::SecondRound' has a wrong offset!");
static_assert(offsetof(FFixed2ndLapStageId, ThirdRound) == 0x000028, "Member 'FFixed2ndLapStageId::ThirdRound' has a wrong offset!");

// ScriptStruct UNION.MachineColorData
// 0x001C (0x001C - 0x0000)
struct FMachineColorData final
{
public:
	int32                                         ColorArea1;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceArea1;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColorArea2;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceArea2;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColorArea3;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceArea3;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GlowArea;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineColorData) == 0x000004, "Wrong alignment on FMachineColorData");
static_assert(sizeof(FMachineColorData) == 0x00001C, "Wrong size on FMachineColorData");
static_assert(offsetof(FMachineColorData, ColorArea1) == 0x000000, "Member 'FMachineColorData::ColorArea1' has a wrong offset!");
static_assert(offsetof(FMachineColorData, SurfaceArea1) == 0x000004, "Member 'FMachineColorData::SurfaceArea1' has a wrong offset!");
static_assert(offsetof(FMachineColorData, ColorArea2) == 0x000008, "Member 'FMachineColorData::ColorArea2' has a wrong offset!");
static_assert(offsetof(FMachineColorData, SurfaceArea2) == 0x00000C, "Member 'FMachineColorData::SurfaceArea2' has a wrong offset!");
static_assert(offsetof(FMachineColorData, ColorArea3) == 0x000010, "Member 'FMachineColorData::ColorArea3' has a wrong offset!");
static_assert(offsetof(FMachineColorData, SurfaceArea3) == 0x000014, "Member 'FMachineColorData::SurfaceArea3' has a wrong offset!");
static_assert(offsetof(FMachineColorData, GlowArea) == 0x000018, "Member 'FMachineColorData::GlowArea' has a wrong offset!");

// ScriptStruct UNION.GadgetCustomCategoryColor
// 0x0048 (0x0050 - 0x0008)
struct FGadgetCustomCategoryColor final : public FTableRowBase
{
public:
	class FText                                   CategoryName;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           CategoryColor;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HeaderColor;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TypeBoxColor;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewIconPriority;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetCustomCategoryColor) == 0x000008, "Wrong alignment on FGadgetCustomCategoryColor");
static_assert(sizeof(FGadgetCustomCategoryColor) == 0x000050, "Wrong size on FGadgetCustomCategoryColor");
static_assert(offsetof(FGadgetCustomCategoryColor, CategoryName) == 0x000008, "Member 'FGadgetCustomCategoryColor::CategoryName' has a wrong offset!");
static_assert(offsetof(FGadgetCustomCategoryColor, CategoryColor) == 0x000018, "Member 'FGadgetCustomCategoryColor::CategoryColor' has a wrong offset!");
static_assert(offsetof(FGadgetCustomCategoryColor, HeaderColor) == 0x000028, "Member 'FGadgetCustomCategoryColor::HeaderColor' has a wrong offset!");
static_assert(offsetof(FGadgetCustomCategoryColor, TypeBoxColor) == 0x000038, "Member 'FGadgetCustomCategoryColor::TypeBoxColor' has a wrong offset!");
static_assert(offsetof(FGadgetCustomCategoryColor, SortID) == 0x000048, "Member 'FGadgetCustomCategoryColor::SortID' has a wrong offset!");
static_assert(offsetof(FGadgetCustomCategoryColor, NewIconPriority) == 0x00004C, "Member 'FGadgetCustomCategoryColor::NewIconPriority' has a wrong offset!");

// ScriptStruct UNION.GadgetCustomizeWindowData
// 0x0004 (0x0004 - 0x0000)
struct FGadgetCustomizeWindowData final
{
public:
	int32                                         PlayerNum;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetCustomizeWindowData) == 0x000004, "Wrong alignment on FGadgetCustomizeWindowData");
static_assert(sizeof(FGadgetCustomizeWindowData) == 0x000004, "Wrong size on FGadgetCustomizeWindowData");
static_assert(offsetof(FGadgetCustomizeWindowData, PlayerNum) == 0x000000, "Member 'FGadgetCustomizeWindowData::PlayerNum' has a wrong offset!");

// ScriptStruct UNION.StaffrollTextData
// 0x0040 (0x0048 - 0x0008)
struct FStaffrollTextData final : public FTableRowBase
{
public:
	EStaffrollTextPartId                          PartId;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaffrollTextData) == 0x000008, "Wrong alignment on FStaffrollTextData");
static_assert(sizeof(FStaffrollTextData) == 0x000048, "Wrong size on FStaffrollTextData");
static_assert(offsetof(FStaffrollTextData, PartId) == 0x000008, "Member 'FStaffrollTextData::PartId' has a wrong offset!");
static_assert(offsetof(FStaffrollTextData, Text) == 0x000010, "Member 'FStaffrollTextData::Text' has a wrong offset!");
static_assert(offsetof(FStaffrollTextData, Texture) == 0x000020, "Member 'FStaffrollTextData::Texture' has a wrong offset!");

// ScriptStruct UNION.GadgetData
// 0x00B8 (0x00C0 - 0x0008)
struct FGadgetData final : public FTableRowBase
{
public:
	bool                                          bIsEnabled;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGadgetId                                     ID;                                                // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGadgetCategory                               Category;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Explanation;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconIndex;                                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ThumbnailTexture;                                  // 0x0060(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefault;                                        // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Price;                                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnlockText;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EGadgetPlateId                                plateId;                                           // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTimeTrialEnabled;                               // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GadgetCustomSortId;                                // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvisibleGadgetCustom;                            // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGadgetData) == 0x000008, "Wrong alignment on FGadgetData");
static_assert(sizeof(FGadgetData) == 0x0000C0, "Wrong size on FGadgetData");
static_assert(offsetof(FGadgetData, bIsEnabled) == 0x000008, "Member 'FGadgetData::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FGadgetData, ID) == 0x000009, "Member 'FGadgetData::ID' has a wrong offset!");
static_assert(offsetof(FGadgetData, Category) == 0x00000A, "Member 'FGadgetData::Category' has a wrong offset!");
static_assert(offsetof(FGadgetData, Name) == 0x000010, "Member 'FGadgetData::Name' has a wrong offset!");
static_assert(offsetof(FGadgetData, Explanation) == 0x000020, "Member 'FGadgetData::Explanation' has a wrong offset!");
static_assert(offsetof(FGadgetData, IconTexture) == 0x000030, "Member 'FGadgetData::IconTexture' has a wrong offset!");
static_assert(offsetof(FGadgetData, IconIndex) == 0x000058, "Member 'FGadgetData::IconIndex' has a wrong offset!");
static_assert(offsetof(FGadgetData, ThumbnailTexture) == 0x000060, "Member 'FGadgetData::ThumbnailTexture' has a wrong offset!");
static_assert(offsetof(FGadgetData, Weight) == 0x000088, "Member 'FGadgetData::Weight' has a wrong offset!");
static_assert(offsetof(FGadgetData, SizeX) == 0x00008C, "Member 'FGadgetData::SizeX' has a wrong offset!");
static_assert(offsetof(FGadgetData, SizeY) == 0x000090, "Member 'FGadgetData::SizeY' has a wrong offset!");
static_assert(offsetof(FGadgetData, bIsDefault) == 0x000094, "Member 'FGadgetData::bIsDefault' has a wrong offset!");
static_assert(offsetof(FGadgetData, Price) == 0x000098, "Member 'FGadgetData::Price' has a wrong offset!");
static_assert(offsetof(FGadgetData, UnlockText) == 0x0000A0, "Member 'FGadgetData::UnlockText' has a wrong offset!");
static_assert(offsetof(FGadgetData, plateId) == 0x0000B0, "Member 'FGadgetData::plateId' has a wrong offset!");
static_assert(offsetof(FGadgetData, bIsTimeTrialEnabled) == 0x0000B1, "Member 'FGadgetData::bIsTimeTrialEnabled' has a wrong offset!");
static_assert(offsetof(FGadgetData, GadgetCustomSortId) == 0x0000B4, "Member 'FGadgetData::GadgetCustomSortId' has a wrong offset!");
static_assert(offsetof(FGadgetData, bInvisibleGadgetCustom) == 0x0000B8, "Member 'FGadgetData::bInvisibleGadgetCustom' has a wrong offset!");

// ScriptStruct UNION.GadgetRaceCountData
// 0x0050 (0x0058 - 0x0008)
struct FGadgetRaceCountData final : public FTableRowBase
{
public:
	int32                                         raceCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EGadgetId>                             IDs;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetRaceCountData) == 0x000008, "Wrong alignment on FGadgetRaceCountData");
static_assert(sizeof(FGadgetRaceCountData) == 0x000058, "Wrong size on FGadgetRaceCountData");
static_assert(offsetof(FGadgetRaceCountData, raceCount) == 0x000008, "Member 'FGadgetRaceCountData::raceCount' has a wrong offset!");
static_assert(offsetof(FGadgetRaceCountData, IDs) == 0x000010, "Member 'FGadgetRaceCountData::IDs' has a wrong offset!");
static_assert(offsetof(FGadgetRaceCountData, Name) == 0x000020, "Member 'FGadgetRaceCountData::Name' has a wrong offset!");
static_assert(offsetof(FGadgetRaceCountData, IconTexture) == 0x000030, "Member 'FGadgetRaceCountData::IconTexture' has a wrong offset!");

// ScriptStruct UNION.DriftEffectParameter
// 0x0014 (0x0014 - 0x0000)
struct FDriftEffectParameter final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDriftEffectParameter) == 0x000004, "Wrong alignment on FDriftEffectParameter");
static_assert(sizeof(FDriftEffectParameter) == 0x000014, "Wrong size on FDriftEffectParameter");
static_assert(offsetof(FDriftEffectParameter, Color) == 0x000000, "Member 'FDriftEffectParameter::Color' has a wrong offset!");
static_assert(offsetof(FDriftEffectParameter, Intensity) == 0x000010, "Member 'FDriftEffectParameter::Intensity' has a wrong offset!");

// ScriptStruct UNION.DriftEffectProperty
// 0x0018 (0x0018 - 0x0000)
struct FDriftEffectProperty final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDriftEffectParameter>          Params;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDriftEffectProperty) == 0x000008, "Wrong alignment on FDriftEffectProperty");
static_assert(sizeof(FDriftEffectProperty) == 0x000018, "Wrong size on FDriftEffectProperty");
static_assert(offsetof(FDriftEffectProperty, IsEnable) == 0x000000, "Member 'FDriftEffectProperty::IsEnable' has a wrong offset!");
static_assert(offsetof(FDriftEffectProperty, Params) == 0x000008, "Member 'FDriftEffectProperty::Params' has a wrong offset!");

// ScriptStruct UNION.GadgetDetailWindowData
// 0x0038 (0x0038 - 0x0000)
struct FGadgetDetailWindowData final
{
public:
	TSoftObjectPtr<class UTexture2D>              ThumbnailTexture;                                  // 0x0000(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Explanation;                                       // 0x0028(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetDetailWindowData) == 0x000008, "Wrong alignment on FGadgetDetailWindowData");
static_assert(sizeof(FGadgetDetailWindowData) == 0x000038, "Wrong size on FGadgetDetailWindowData");
static_assert(offsetof(FGadgetDetailWindowData, ThumbnailTexture) == 0x000000, "Member 'FGadgetDetailWindowData::ThumbnailTexture' has a wrong offset!");
static_assert(offsetof(FGadgetDetailWindowData, Explanation) == 0x000028, "Member 'FGadgetDetailWindowData::Explanation' has a wrong offset!");

// ScriptStruct UNION.GadgetLayoutData
// 0x0008 (0x0010 - 0x0008)
struct FGadgetLayoutData final : public FTableRowBase
{
public:
	EGadgetId                                     gadgetId;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGadgetLayoutData) == 0x000008, "Wrong alignment on FGadgetLayoutData");
static_assert(sizeof(FGadgetLayoutData) == 0x000010, "Wrong size on FGadgetLayoutData");
static_assert(offsetof(FGadgetLayoutData, gadgetId) == 0x000008, "Member 'FGadgetLayoutData::gadgetId' has a wrong offset!");

// ScriptStruct UNION.MachineSurfaceParam
// 0x0048 (0x0050 - 0x0008)
struct FMachineSurfaceParam final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsUnique;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Metalic;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roughness;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BindOpacity;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CameleonColor;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChameleonIntencity;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClearCoatIntensity;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClearCoatMinRoughness;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PearlIntensity;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlakeIntensity;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlakeTiling;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineSurfaceParam) == 0x000008, "Wrong alignment on FMachineSurfaceParam");
static_assert(sizeof(FMachineSurfaceParam) == 0x000050, "Wrong size on FMachineSurfaceParam");
static_assert(offsetof(FMachineSurfaceParam, Name) == 0x000008, "Member 'FMachineSurfaceParam::Name' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceParam, IsUnique) == 0x000018, "Member 'FMachineSurfaceParam::IsUnique' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceParam, Metalic) == 0x00001C, "Member 'FMachineSurfaceParam::Metalic' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceParam, Roughness) == 0x000020, "Member 'FMachineSurfaceParam::Roughness' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceParam, BindOpacity) == 0x000024, "Member 'FMachineSurfaceParam::BindOpacity' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceParam, CameleonColor) == 0x000028, "Member 'FMachineSurfaceParam::CameleonColor' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceParam, ChameleonIntencity) == 0x000038, "Member 'FMachineSurfaceParam::ChameleonIntencity' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceParam, ClearCoatIntensity) == 0x00003C, "Member 'FMachineSurfaceParam::ClearCoatIntensity' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceParam, ClearCoatMinRoughness) == 0x000040, "Member 'FMachineSurfaceParam::ClearCoatMinRoughness' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceParam, PearlIntensity) == 0x000044, "Member 'FMachineSurfaceParam::PearlIntensity' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceParam, FlakeIntensity) == 0x000048, "Member 'FMachineSurfaceParam::FlakeIntensity' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceParam, FlakeTiling) == 0x00004C, "Member 'FMachineSurfaceParam::FlakeTiling' has a wrong offset!");

// ScriptStruct UNION.GadgetPlateData
// 0x0028 (0x0030 - 0x0008)
struct FGadgetPlateData final : public FTableRowBase
{
public:
	EGadgetPlateId                                ID;                                                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SlotNum;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaceNum;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseIndex;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGadgetPlateData) == 0x000008, "Wrong alignment on FGadgetPlateData");
static_assert(sizeof(FGadgetPlateData) == 0x000030, "Wrong size on FGadgetPlateData");
static_assert(offsetof(FGadgetPlateData, ID) == 0x000008, "Member 'FGadgetPlateData::ID' has a wrong offset!");
static_assert(offsetof(FGadgetPlateData, Name) == 0x000010, "Member 'FGadgetPlateData::Name' has a wrong offset!");
static_assert(offsetof(FGadgetPlateData, SlotNum) == 0x000020, "Member 'FGadgetPlateData::SlotNum' has a wrong offset!");
static_assert(offsetof(FGadgetPlateData, RaceNum) == 0x000024, "Member 'FGadgetPlateData::RaceNum' has a wrong offset!");
static_assert(offsetof(FGadgetPlateData, BaseIndex) == 0x000028, "Member 'FGadgetPlateData::BaseIndex' has a wrong offset!");

// ScriptStruct UNION.GadgetSelectWindowPlayerData
// 0x0020 (0x0020 - 0x0000)
struct FGadgetSelectWindowPlayerData final
{
public:
	TArray<EGadgetId>                             AttachedGadgetIds;                                 // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EGadgetId>                             AttachableGadgetIds;                               // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetSelectWindowPlayerData) == 0x000008, "Wrong alignment on FGadgetSelectWindowPlayerData");
static_assert(sizeof(FGadgetSelectWindowPlayerData) == 0x000020, "Wrong size on FGadgetSelectWindowPlayerData");
static_assert(offsetof(FGadgetSelectWindowPlayerData, AttachedGadgetIds) == 0x000000, "Member 'FGadgetSelectWindowPlayerData::AttachedGadgetIds' has a wrong offset!");
static_assert(offsetof(FGadgetSelectWindowPlayerData, AttachableGadgetIds) == 0x000010, "Member 'FGadgetSelectWindowPlayerData::AttachableGadgetIds' has a wrong offset!");

// ScriptStruct UNION.StageCameraSettings
// 0x0020 (0x0028 - 0x0008)
struct FStageCameraSettings final : public FTableRowBase
{
public:
	EStageId                                      StageId;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BloomIntensity;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureBias;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraShutterSpeed;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAperture;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoExposureMethod                           AutoExposureMethod;                                // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStageCameraSettings) == 0x000008, "Wrong alignment on FStageCameraSettings");
static_assert(sizeof(FStageCameraSettings) == 0x000028, "Wrong size on FStageCameraSettings");
static_assert(offsetof(FStageCameraSettings, StageId) == 0x000008, "Member 'FStageCameraSettings::StageId' has a wrong offset!");
static_assert(offsetof(FStageCameraSettings, BloomIntensity) == 0x00000C, "Member 'FStageCameraSettings::BloomIntensity' has a wrong offset!");
static_assert(offsetof(FStageCameraSettings, BloomThreshold) == 0x000010, "Member 'FStageCameraSettings::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FStageCameraSettings, AutoExposureBias) == 0x000014, "Member 'FStageCameraSettings::AutoExposureBias' has a wrong offset!");
static_assert(offsetof(FStageCameraSettings, CameraShutterSpeed) == 0x000018, "Member 'FStageCameraSettings::CameraShutterSpeed' has a wrong offset!");
static_assert(offsetof(FStageCameraSettings, CurrentAperture) == 0x00001C, "Member 'FStageCameraSettings::CurrentAperture' has a wrong offset!");
static_assert(offsetof(FStageCameraSettings, AutoExposureMethod) == 0x000020, "Member 'FStageCameraSettings::AutoExposureMethod' has a wrong offset!");

// ScriptStruct UNION.GrandPrixVictoryRewardTable
// 0x0008 (0x0010 - 0x0008)
struct FGrandPrixVictoryRewardTable final : public FTableRowBase
{
public:
	int32                                         VictoryCount;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardAchievementType                        RewardAchievementType;                             // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGrandPrixVictoryRewardTable) == 0x000008, "Wrong alignment on FGrandPrixVictoryRewardTable");
static_assert(sizeof(FGrandPrixVictoryRewardTable) == 0x000010, "Wrong size on FGrandPrixVictoryRewardTable");
static_assert(offsetof(FGrandPrixVictoryRewardTable, VictoryCount) == 0x000008, "Member 'FGrandPrixVictoryRewardTable::VictoryCount' has a wrong offset!");
static_assert(offsetof(FGrandPrixVictoryRewardTable, RewardAchievementType) == 0x00000C, "Member 'FGrandPrixVictoryRewardTable::RewardAchievementType' has a wrong offset!");

// ScriptStruct UNION.HintTabTextTableRow
// 0x0010 (0x0018 - 0x0008)
struct FHintTabTextTableRow final : public FTableRowBase
{
public:
	class FText                                   TabTitleText;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHintTabTextTableRow) == 0x000008, "Wrong alignment on FHintTabTextTableRow");
static_assert(sizeof(FHintTabTextTableRow) == 0x000018, "Wrong size on FHintTabTextTableRow");
static_assert(offsetof(FHintTabTextTableRow, TabTitleText) == 0x000008, "Member 'FHintTabTextTableRow::TabTitleText' has a wrong offset!");

// ScriptStruct UNION.UnionRaceResource
// 0x00B0 (0x00B0 - 0x0000)
struct FUnionRaceResource final
{
public:
	class UDataTable*                             TravelRingMainCourseData;                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TravelRingAnotherCourseData;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TravelRingDataTable;                               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      TravelRingMaterials[0x8];                          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureCube*                           TravelRingCubemaps[0x8];                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>              ShortcutRingMaterials;                             // 0x0098(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           TravelRingMaterialParameterCollection;             // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceResource) == 0x000008, "Wrong alignment on FUnionRaceResource");
static_assert(sizeof(FUnionRaceResource) == 0x0000B0, "Wrong size on FUnionRaceResource");
static_assert(offsetof(FUnionRaceResource, TravelRingMainCourseData) == 0x000000, "Member 'FUnionRaceResource::TravelRingMainCourseData' has a wrong offset!");
static_assert(offsetof(FUnionRaceResource, TravelRingAnotherCourseData) == 0x000008, "Member 'FUnionRaceResource::TravelRingAnotherCourseData' has a wrong offset!");
static_assert(offsetof(FUnionRaceResource, TravelRingDataTable) == 0x000010, "Member 'FUnionRaceResource::TravelRingDataTable' has a wrong offset!");
static_assert(offsetof(FUnionRaceResource, TravelRingMaterials) == 0x000018, "Member 'FUnionRaceResource::TravelRingMaterials' has a wrong offset!");
static_assert(offsetof(FUnionRaceResource, TravelRingCubemaps) == 0x000058, "Member 'FUnionRaceResource::TravelRingCubemaps' has a wrong offset!");
static_assert(offsetof(FUnionRaceResource, ShortcutRingMaterials) == 0x000098, "Member 'FUnionRaceResource::ShortcutRingMaterials' has a wrong offset!");
static_assert(offsetof(FUnionRaceResource, TravelRingMaterialParameterCollection) == 0x0000A8, "Member 'FUnionRaceResource::TravelRingMaterialParameterCollection' has a wrong offset!");

// ScriptStruct UNION.HintTutorialDataTableRow
// 0x0028 (0x0030 - 0x0008)
struct FHintTutorialDataTableRow final : public FTableRowBase
{
public:
	class FText                                   TutorialTitleText;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   TutorialMovieName;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ExplanatoryText;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHintTutorialDataTableRow) == 0x000008, "Wrong alignment on FHintTutorialDataTableRow");
static_assert(sizeof(FHintTutorialDataTableRow) == 0x000030, "Wrong size on FHintTutorialDataTableRow");
static_assert(offsetof(FHintTutorialDataTableRow, TutorialTitleText) == 0x000008, "Member 'FHintTutorialDataTableRow::TutorialTitleText' has a wrong offset!");
static_assert(offsetof(FHintTutorialDataTableRow, TutorialMovieName) == 0x000018, "Member 'FHintTutorialDataTableRow::TutorialMovieName' has a wrong offset!");
static_assert(offsetof(FHintTutorialDataTableRow, ExplanatoryText) == 0x000020, "Member 'FHintTutorialDataTableRow::ExplanatoryText' has a wrong offset!");

// ScriptStruct UNION.HoldItemCreateParam
// 0x0010 (0x0010 - 0x0000)
struct FHoldItemCreateParam final
{
public:
	EItemId                                       ItemId;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PackageRingNum;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemThrowDirection                           ThrowDirection;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowThrowDirection;                               // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupColorId                                 GroupColorID;                                      // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGadgetLuckyItem;                                  // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHoldItemCreateParam) == 0x000004, "Wrong alignment on FHoldItemCreateParam");
static_assert(sizeof(FHoldItemCreateParam) == 0x000010, "Wrong size on FHoldItemCreateParam");
static_assert(offsetof(FHoldItemCreateParam, ItemId) == 0x000000, "Member 'FHoldItemCreateParam::ItemId' has a wrong offset!");
static_assert(offsetof(FHoldItemCreateParam, PackageRingNum) == 0x000004, "Member 'FHoldItemCreateParam::PackageRingNum' has a wrong offset!");
static_assert(offsetof(FHoldItemCreateParam, ItemCount) == 0x000008, "Member 'FHoldItemCreateParam::ItemCount' has a wrong offset!");
static_assert(offsetof(FHoldItemCreateParam, ThrowDirection) == 0x00000C, "Member 'FHoldItemCreateParam::ThrowDirection' has a wrong offset!");
static_assert(offsetof(FHoldItemCreateParam, bShowThrowDirection) == 0x00000D, "Member 'FHoldItemCreateParam::bShowThrowDirection' has a wrong offset!");
static_assert(offsetof(FHoldItemCreateParam, GroupColorID) == 0x00000E, "Member 'FHoldItemCreateParam::GroupColorID' has a wrong offset!");
static_assert(offsetof(FHoldItemCreateParam, bGadgetLuckyItem) == 0x00000F, "Member 'FHoldItemCreateParam::bGadgetLuckyItem' has a wrong offset!");

// ScriptStruct UNION.StageStorePromotionDataTableRow
// 0x0018 (0x0020 - 0x0008)
struct FStageStorePromotionDataTableRow final : public FTableRowBase
{
public:
	EStageId                                      StageId;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Released;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReleaseDateText;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStageStorePromotionDataTableRow) == 0x000008, "Wrong alignment on FStageStorePromotionDataTableRow");
static_assert(sizeof(FStageStorePromotionDataTableRow) == 0x000020, "Wrong size on FStageStorePromotionDataTableRow");
static_assert(offsetof(FStageStorePromotionDataTableRow, StageId) == 0x000008, "Member 'FStageStorePromotionDataTableRow::StageId' has a wrong offset!");
static_assert(offsetof(FStageStorePromotionDataTableRow, Released) == 0x000009, "Member 'FStageStorePromotionDataTableRow::Released' has a wrong offset!");
static_assert(offsetof(FStageStorePromotionDataTableRow, ReleaseDateText) == 0x000010, "Member 'FStageStorePromotionDataTableRow::ReleaseDateText' has a wrong offset!");

// ScriptStruct UNION.HoldItemData
// 0x00A8 (0x00B0 - 0x0008)
struct FHoldItemData final : public FTableRowBase
{
public:
	EItemId                                       ID;                                                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetTransform;                                   // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnTime;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftHand;                                         // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MovementRange;                                     // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementSpeed;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHoldItemData) == 0x000010, "Wrong alignment on FHoldItemData");
static_assert(sizeof(FHoldItemData) == 0x0000B0, "Wrong size on FHoldItemData");
static_assert(offsetof(FHoldItemData, ID) == 0x000008, "Member 'FHoldItemData::ID' has a wrong offset!");
static_assert(offsetof(FHoldItemData, SocketName) == 0x00000C, "Member 'FHoldItemData::SocketName' has a wrong offset!");
static_assert(offsetof(FHoldItemData, OffsetTransform) == 0x000020, "Member 'FHoldItemData::OffsetTransform' has a wrong offset!");
static_assert(offsetof(FHoldItemData, SpawnTime) == 0x000080, "Member 'FHoldItemData::SpawnTime' has a wrong offset!");
static_assert(offsetof(FHoldItemData, bLeftHand) == 0x000084, "Member 'FHoldItemData::bLeftHand' has a wrong offset!");
static_assert(offsetof(FHoldItemData, MovementRange) == 0x000088, "Member 'FHoldItemData::MovementRange' has a wrong offset!");
static_assert(offsetof(FHoldItemData, MovementSpeed) == 0x0000A0, "Member 'FHoldItemData::MovementSpeed' has a wrong offset!");

// ScriptStruct UNION.HoldItemPoolInfo
// 0x00C8 (0x00C8 - 0x0000)
struct alignas(0x08) FHoldItemPoolInfo final
{
public:
	uint8                                         Pad_0[0xC8];                                       // 0x0000(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHoldItemPoolInfo) == 0x000008, "Wrong alignment on FHoldItemPoolInfo");
static_assert(sizeof(FHoldItemPoolInfo) == 0x0000C8, "Wrong size on FHoldItemPoolInfo");

// ScriptStruct UNION.RewardGetWindowParamWithTitle
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FRewardGetWindowParamWithTitle final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRewardGetWindowParamWithTitle) == 0x000008, "Wrong alignment on FRewardGetWindowParamWithTitle");
static_assert(sizeof(FRewardGetWindowParamWithTitle) == 0x000018, "Wrong size on FRewardGetWindowParamWithTitle");

// ScriptStruct UNION.HonorTitleTabStruc
// 0x0010 (0x0010 - 0x0000)
struct FHonorTitleTabStruc final
{
public:
	TArray<class UHonorTitleSettingBtn*>          Buttons;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHonorTitleTabStruc) == 0x000008, "Wrong alignment on FHonorTitleTabStruc");
static_assert(sizeof(FHonorTitleTabStruc) == 0x000010, "Wrong size on FHonorTitleTabStruc");
static_assert(offsetof(FHonorTitleTabStruc, Buttons) == 0x000000, "Member 'FHonorTitleTabStruc::Buttons' has a wrong offset!");

// ScriptStruct UNION.HoverMachineEffectAssetData
// 0x0120 (0x0128 - 0x0008)
struct FHoverMachineEffectAssetData final : public FTableRowBase
{
public:
	EHoverMachineEffectType                       EffectType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          AssetLOD0;                                         // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          AssetLOD1;                                         // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          AssetLOD2;                                         // 0x0060(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineEffectVisibleType                     VisibleType;                                       // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetLocation;                                    // 0x0098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotator;                                     // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MonsterTruckOffsetLocation;                        // 0x00E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MonsterTruckOffsetRotator;                         // 0x00F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                MonsterTruckScale;                                 // 0x0110(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHoverMachineEffectAssetData) == 0x000008, "Wrong alignment on FHoverMachineEffectAssetData");
static_assert(sizeof(FHoverMachineEffectAssetData) == 0x000128, "Wrong size on FHoverMachineEffectAssetData");
static_assert(offsetof(FHoverMachineEffectAssetData, EffectType) == 0x000008, "Member 'FHoverMachineEffectAssetData::EffectType' has a wrong offset!");
static_assert(offsetof(FHoverMachineEffectAssetData, AssetLOD0) == 0x000010, "Member 'FHoverMachineEffectAssetData::AssetLOD0' has a wrong offset!");
static_assert(offsetof(FHoverMachineEffectAssetData, AssetLOD1) == 0x000038, "Member 'FHoverMachineEffectAssetData::AssetLOD1' has a wrong offset!");
static_assert(offsetof(FHoverMachineEffectAssetData, AssetLOD2) == 0x000060, "Member 'FHoverMachineEffectAssetData::AssetLOD2' has a wrong offset!");
static_assert(offsetof(FHoverMachineEffectAssetData, AttachSocketName) == 0x000088, "Member 'FHoverMachineEffectAssetData::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FHoverMachineEffectAssetData, IsLoop) == 0x000090, "Member 'FHoverMachineEffectAssetData::IsLoop' has a wrong offset!");
static_assert(offsetof(FHoverMachineEffectAssetData, VisibleType) == 0x000091, "Member 'FHoverMachineEffectAssetData::VisibleType' has a wrong offset!");
static_assert(offsetof(FHoverMachineEffectAssetData, OffsetLocation) == 0x000098, "Member 'FHoverMachineEffectAssetData::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FHoverMachineEffectAssetData, OffsetRotator) == 0x0000B0, "Member 'FHoverMachineEffectAssetData::OffsetRotator' has a wrong offset!");
static_assert(offsetof(FHoverMachineEffectAssetData, Scale) == 0x0000C8, "Member 'FHoverMachineEffectAssetData::Scale' has a wrong offset!");
static_assert(offsetof(FHoverMachineEffectAssetData, MonsterTruckOffsetLocation) == 0x0000E0, "Member 'FHoverMachineEffectAssetData::MonsterTruckOffsetLocation' has a wrong offset!");
static_assert(offsetof(FHoverMachineEffectAssetData, MonsterTruckOffsetRotator) == 0x0000F8, "Member 'FHoverMachineEffectAssetData::MonsterTruckOffsetRotator' has a wrong offset!");
static_assert(offsetof(FHoverMachineEffectAssetData, MonsterTruckScale) == 0x000110, "Member 'FHoverMachineEffectAssetData::MonsterTruckScale' has a wrong offset!");

// ScriptStruct UNION.UnionMaterialBakeSetup
// 0x0030 (0x0030 - 0x0000)
struct FUnionMaterialBakeSetup final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      BaseMaterialInstance;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      BaseMaterialInstancePP;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      BaseMaterialInstance2;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      BaseMaterialInstancePP2;                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CompressBC1;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CompressBC7;                                       // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CompressSticker;                                   // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionMaterialBakeSetup) == 0x000008, "Wrong alignment on FUnionMaterialBakeSetup");
static_assert(sizeof(FUnionMaterialBakeSetup) == 0x000030, "Wrong size on FUnionMaterialBakeSetup");
static_assert(offsetof(FUnionMaterialBakeSetup, Actor) == 0x000000, "Member 'FUnionMaterialBakeSetup::Actor' has a wrong offset!");
static_assert(offsetof(FUnionMaterialBakeSetup, BaseMaterialInstance) == 0x000008, "Member 'FUnionMaterialBakeSetup::BaseMaterialInstance' has a wrong offset!");
static_assert(offsetof(FUnionMaterialBakeSetup, BaseMaterialInstancePP) == 0x000010, "Member 'FUnionMaterialBakeSetup::BaseMaterialInstancePP' has a wrong offset!");
static_assert(offsetof(FUnionMaterialBakeSetup, BaseMaterialInstance2) == 0x000018, "Member 'FUnionMaterialBakeSetup::BaseMaterialInstance2' has a wrong offset!");
static_assert(offsetof(FUnionMaterialBakeSetup, BaseMaterialInstancePP2) == 0x000020, "Member 'FUnionMaterialBakeSetup::BaseMaterialInstancePP2' has a wrong offset!");
static_assert(offsetof(FUnionMaterialBakeSetup, CompressBC1) == 0x000028, "Member 'FUnionMaterialBakeSetup::CompressBC1' has a wrong offset!");
static_assert(offsetof(FUnionMaterialBakeSetup, CompressBC7) == 0x000029, "Member 'FUnionMaterialBakeSetup::CompressBC7' has a wrong offset!");
static_assert(offsetof(FUnionMaterialBakeSetup, CompressSticker) == 0x00002A, "Member 'FUnionMaterialBakeSetup::CompressSticker' has a wrong offset!");

// ScriptStruct UNION.ItemDataAssetTableRow
// 0x0090 (0x0098 - 0x0008)
struct FItemDataAssetTableRow final : public FTableRowBase
{
public:
	EItemId                                       ItemId;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ItemDataAsset;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ItemIcon;                                          // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ExplainMessage;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ExplainImage;                                      // 0x0068(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AvailableInCustomItemSwitch;                       // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemDataAssetTableRow) == 0x000008, "Wrong alignment on FItemDataAssetTableRow");
static_assert(sizeof(FItemDataAssetTableRow) == 0x000098, "Wrong size on FItemDataAssetTableRow");
static_assert(offsetof(FItemDataAssetTableRow, ItemId) == 0x000008, "Member 'FItemDataAssetTableRow::ItemId' has a wrong offset!");
static_assert(offsetof(FItemDataAssetTableRow, ItemName) == 0x000010, "Member 'FItemDataAssetTableRow::ItemName' has a wrong offset!");
static_assert(offsetof(FItemDataAssetTableRow, ItemDataAsset) == 0x000020, "Member 'FItemDataAssetTableRow::ItemDataAsset' has a wrong offset!");
static_assert(offsetof(FItemDataAssetTableRow, ItemIcon) == 0x000030, "Member 'FItemDataAssetTableRow::ItemIcon' has a wrong offset!");
static_assert(offsetof(FItemDataAssetTableRow, ExplainMessage) == 0x000058, "Member 'FItemDataAssetTableRow::ExplainMessage' has a wrong offset!");
static_assert(offsetof(FItemDataAssetTableRow, ExplainImage) == 0x000068, "Member 'FItemDataAssetTableRow::ExplainImage' has a wrong offset!");
static_assert(offsetof(FItemDataAssetTableRow, AvailableInCustomItemSwitch) == 0x000090, "Member 'FItemDataAssetTableRow::AvailableInCustomItemSwitch' has a wrong offset!");

// ScriptStruct UNION.LapTimerResult
// 0x0018 (0x0018 - 0x0000)
struct FLapTimerResult final
{
public:
	float                                         Second;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Tag;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLapTimerResult) == 0x000008, "Wrong alignment on FLapTimerResult");
static_assert(sizeof(FLapTimerResult) == 0x000018, "Wrong size on FLapTimerResult");
static_assert(offsetof(FLapTimerResult, Second) == 0x000000, "Member 'FLapTimerResult::Second' has a wrong offset!");
static_assert(offsetof(FLapTimerResult, Tag) == 0x000008, "Member 'FLapTimerResult::Tag' has a wrong offset!");

// ScriptStruct UNION.LobbySequenceParam
// 0x0048 (0x0048 - 0x0000)
struct FLobbySequenceParam final
{
public:
	float                                         NetworkTimeoutSeconds;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkAddMemberInitCompleteTimeoutSeconds;        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NetworkSendStampLimit;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NetworkSendHornLimit;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkSendStampTimerSeconds;                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkSendHornTimerSeconds;                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkSendCustomDataTimerSeconds;                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkP2PSetupResendInterval;                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NetworkP2PSetupResendMax;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkClientP2PStartTimeout;                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkP2PSequenceTimeout;                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkP2PCanSendPackeTimeout;                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectCourseWaitSeconds;                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectCourseTimeout;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkPreRaceWaitP2PConnectioniTimeout;           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThresholdDisconnectPeersTime;                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JoinSquadTimeout;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectCourseResultTimeout;                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbySequenceParam) == 0x000004, "Wrong alignment on FLobbySequenceParam");
static_assert(sizeof(FLobbySequenceParam) == 0x000048, "Wrong size on FLobbySequenceParam");
static_assert(offsetof(FLobbySequenceParam, NetworkTimeoutSeconds) == 0x000000, "Member 'FLobbySequenceParam::NetworkTimeoutSeconds' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, NetworkAddMemberInitCompleteTimeoutSeconds) == 0x000004, "Member 'FLobbySequenceParam::NetworkAddMemberInitCompleteTimeoutSeconds' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, NetworkSendStampLimit) == 0x000008, "Member 'FLobbySequenceParam::NetworkSendStampLimit' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, NetworkSendHornLimit) == 0x00000C, "Member 'FLobbySequenceParam::NetworkSendHornLimit' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, NetworkSendStampTimerSeconds) == 0x000010, "Member 'FLobbySequenceParam::NetworkSendStampTimerSeconds' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, NetworkSendHornTimerSeconds) == 0x000014, "Member 'FLobbySequenceParam::NetworkSendHornTimerSeconds' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, NetworkSendCustomDataTimerSeconds) == 0x000018, "Member 'FLobbySequenceParam::NetworkSendCustomDataTimerSeconds' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, NetworkP2PSetupResendInterval) == 0x00001C, "Member 'FLobbySequenceParam::NetworkP2PSetupResendInterval' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, NetworkP2PSetupResendMax) == 0x000020, "Member 'FLobbySequenceParam::NetworkP2PSetupResendMax' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, NetworkClientP2PStartTimeout) == 0x000024, "Member 'FLobbySequenceParam::NetworkClientP2PStartTimeout' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, NetworkP2PSequenceTimeout) == 0x000028, "Member 'FLobbySequenceParam::NetworkP2PSequenceTimeout' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, NetworkP2PCanSendPackeTimeout) == 0x00002C, "Member 'FLobbySequenceParam::NetworkP2PCanSendPackeTimeout' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, SelectCourseWaitSeconds) == 0x000030, "Member 'FLobbySequenceParam::SelectCourseWaitSeconds' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, SelectCourseTimeout) == 0x000034, "Member 'FLobbySequenceParam::SelectCourseTimeout' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, NetworkPreRaceWaitP2PConnectioniTimeout) == 0x000038, "Member 'FLobbySequenceParam::NetworkPreRaceWaitP2PConnectioniTimeout' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, ThresholdDisconnectPeersTime) == 0x00003C, "Member 'FLobbySequenceParam::ThresholdDisconnectPeersTime' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, JoinSquadTimeout) == 0x000040, "Member 'FLobbySequenceParam::JoinSquadTimeout' has a wrong offset!");
static_assert(offsetof(FLobbySequenceParam, SelectCourseResultTimeout) == 0x000044, "Member 'FLobbySequenceParam::SelectCourseResultTimeout' has a wrong offset!");

// ScriptStruct UNION.MachineAirTrickData
// 0x0008 (0x0008 - 0x0000)
struct FMachineAirTrickData final
{
public:
	bool                                          IsSeatLockFlipLeft;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeatLockFlipRight;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeatLockFlipFront;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeatLockFlipBack;                                // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeatLockSpinLeft;                                // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeatLockSpinRight;                               // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeatLockCorkscrewLeft;                           // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeatLockCorkscrewRight;                          // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineAirTrickData) == 0x000001, "Wrong alignment on FMachineAirTrickData");
static_assert(sizeof(FMachineAirTrickData) == 0x000008, "Wrong size on FMachineAirTrickData");
static_assert(offsetof(FMachineAirTrickData, IsSeatLockFlipLeft) == 0x000000, "Member 'FMachineAirTrickData::IsSeatLockFlipLeft' has a wrong offset!");
static_assert(offsetof(FMachineAirTrickData, IsSeatLockFlipRight) == 0x000001, "Member 'FMachineAirTrickData::IsSeatLockFlipRight' has a wrong offset!");
static_assert(offsetof(FMachineAirTrickData, IsSeatLockFlipFront) == 0x000002, "Member 'FMachineAirTrickData::IsSeatLockFlipFront' has a wrong offset!");
static_assert(offsetof(FMachineAirTrickData, IsSeatLockFlipBack) == 0x000003, "Member 'FMachineAirTrickData::IsSeatLockFlipBack' has a wrong offset!");
static_assert(offsetof(FMachineAirTrickData, IsSeatLockSpinLeft) == 0x000004, "Member 'FMachineAirTrickData::IsSeatLockSpinLeft' has a wrong offset!");
static_assert(offsetof(FMachineAirTrickData, IsSeatLockSpinRight) == 0x000005, "Member 'FMachineAirTrickData::IsSeatLockSpinRight' has a wrong offset!");
static_assert(offsetof(FMachineAirTrickData, IsSeatLockCorkscrewLeft) == 0x000006, "Member 'FMachineAirTrickData::IsSeatLockCorkscrewLeft' has a wrong offset!");
static_assert(offsetof(FMachineAirTrickData, IsSeatLockCorkscrewRight) == 0x000007, "Member 'FMachineAirTrickData::IsSeatLockCorkscrewRight' has a wrong offset!");

// ScriptStruct UNION.UnionShortcutRingCubemaps
// 0x00C8 (0x00C8 - 0x0000)
struct FUnionShortcutRingCubemaps final
{
public:
	TSoftObjectPtr<class UMaterialInstance>       ShortcutEnter;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ShortcutEnter_noRT;                                // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       ShortcutExit;                                      // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             OverrideShortcutRingEntranceMesh;                  // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             OverrideShortcutRingExitMesh;                      // 0x00A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionShortcutRingCubemaps) == 0x000008, "Wrong alignment on FUnionShortcutRingCubemaps");
static_assert(sizeof(FUnionShortcutRingCubemaps) == 0x0000C8, "Wrong size on FUnionShortcutRingCubemaps");
static_assert(offsetof(FUnionShortcutRingCubemaps, ShortcutEnter) == 0x000000, "Member 'FUnionShortcutRingCubemaps::ShortcutEnter' has a wrong offset!");
static_assert(offsetof(FUnionShortcutRingCubemaps, ShortcutEnter_noRT) == 0x000028, "Member 'FUnionShortcutRingCubemaps::ShortcutEnter_noRT' has a wrong offset!");
static_assert(offsetof(FUnionShortcutRingCubemaps, ShortcutExit) == 0x000050, "Member 'FUnionShortcutRingCubemaps::ShortcutExit' has a wrong offset!");
static_assert(offsetof(FUnionShortcutRingCubemaps, OverrideShortcutRingEntranceMesh) == 0x000078, "Member 'FUnionShortcutRingCubemaps::OverrideShortcutRingEntranceMesh' has a wrong offset!");
static_assert(offsetof(FUnionShortcutRingCubemaps, OverrideShortcutRingExitMesh) == 0x0000A0, "Member 'FUnionShortcutRingCubemaps::OverrideShortcutRingExitMesh' has a wrong offset!");

// ScriptStruct UNION.MachineCustomizeCustomListData
// 0x0028 (0x0028 - 0x0000)
struct FMachineCustomizeCustomListData final
{
public:
	bool                                          bIsAura;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ELockType                                     LockType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Price;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleNew;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortID;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineCustomizeCustomListData) == 0x000008, "Wrong alignment on FMachineCustomizeCustomListData");
static_assert(sizeof(FMachineCustomizeCustomListData) == 0x000028, "Wrong size on FMachineCustomizeCustomListData");
static_assert(offsetof(FMachineCustomizeCustomListData, bIsAura) == 0x000000, "Member 'FMachineCustomizeCustomListData::bIsAura' has a wrong offset!");
static_assert(offsetof(FMachineCustomizeCustomListData, ID) == 0x000004, "Member 'FMachineCustomizeCustomListData::ID' has a wrong offset!");
static_assert(offsetof(FMachineCustomizeCustomListData, Name) == 0x000008, "Member 'FMachineCustomizeCustomListData::Name' has a wrong offset!");
static_assert(offsetof(FMachineCustomizeCustomListData, LockType) == 0x000018, "Member 'FMachineCustomizeCustomListData::LockType' has a wrong offset!");
static_assert(offsetof(FMachineCustomizeCustomListData, Price) == 0x00001C, "Member 'FMachineCustomizeCustomListData::Price' has a wrong offset!");
static_assert(offsetof(FMachineCustomizeCustomListData, bVisibleNew) == 0x000020, "Member 'FMachineCustomizeCustomListData::bVisibleNew' has a wrong offset!");
static_assert(offsetof(FMachineCustomizeCustomListData, SortID) == 0x000024, "Member 'FMachineCustomizeCustomListData::SortID' has a wrong offset!");

// ScriptStruct UNION.MachineColorPresetUIData
// 0x0058 (0x0058 - 0x0000)
struct FMachineColorPresetUIData final
{
public:
	EMachineColorPresetId                         ID;                                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineColorPresetType                       PresetType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BodyColor;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TireColor;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CockpitColor;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHiddenUntilUnlock;                              // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachineColorPresetUIData) == 0x000008, "Wrong alignment on FMachineColorPresetUIData");
static_assert(sizeof(FMachineColorPresetUIData) == 0x000058, "Wrong size on FMachineColorPresetUIData");
static_assert(offsetof(FMachineColorPresetUIData, ID) == 0x000000, "Member 'FMachineColorPresetUIData::ID' has a wrong offset!");
static_assert(offsetof(FMachineColorPresetUIData, PresetType) == 0x000001, "Member 'FMachineColorPresetUIData::PresetType' has a wrong offset!");
static_assert(offsetof(FMachineColorPresetUIData, Name) == 0x000008, "Member 'FMachineColorPresetUIData::Name' has a wrong offset!");
static_assert(offsetof(FMachineColorPresetUIData, IconTexture) == 0x000018, "Member 'FMachineColorPresetUIData::IconTexture' has a wrong offset!");
static_assert(offsetof(FMachineColorPresetUIData, BodyColor) == 0x000020, "Member 'FMachineColorPresetUIData::BodyColor' has a wrong offset!");
static_assert(offsetof(FMachineColorPresetUIData, TireColor) == 0x000030, "Member 'FMachineColorPresetUIData::TireColor' has a wrong offset!");
static_assert(offsetof(FMachineColorPresetUIData, CockpitColor) == 0x000040, "Member 'FMachineColorPresetUIData::CockpitColor' has a wrong offset!");
static_assert(offsetof(FMachineColorPresetUIData, bIsHiddenUntilUnlock) == 0x000050, "Member 'FMachineColorPresetUIData::bIsHiddenUntilUnlock' has a wrong offset!");
static_assert(offsetof(FMachineColorPresetUIData, bIsNew) == 0x000051, "Member 'FMachineColorPresetUIData::bIsNew' has a wrong offset!");

// ScriptStruct UNION.MachineGlowSelectData
// 0x0014 (0x0014 - 0x0000)
struct FMachineGlowSelectData final
{
public:
	int32                                         MachineGlowId;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineGlowSelectData) == 0x000004, "Wrong alignment on FMachineGlowSelectData");
static_assert(sizeof(FMachineGlowSelectData) == 0x000014, "Wrong size on FMachineGlowSelectData");
static_assert(offsetof(FMachineGlowSelectData, MachineGlowId) == 0x000000, "Member 'FMachineGlowSelectData::MachineGlowId' has a wrong offset!");
static_assert(offsetof(FMachineGlowSelectData, Color) == 0x000004, "Member 'FMachineGlowSelectData::Color' has a wrong offset!");

// ScriptStruct UNION.MachineSurfaceSelectData
// 0x0018 (0x0018 - 0x0000)
struct FMachineSurfaceSelectData final
{
public:
	int32                                         MachineSurfaceId;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineSurfaceSelectData) == 0x000008, "Wrong alignment on FMachineSurfaceSelectData");
static_assert(sizeof(FMachineSurfaceSelectData) == 0x000018, "Wrong size on FMachineSurfaceSelectData");
static_assert(offsetof(FMachineSurfaceSelectData, MachineSurfaceId) == 0x000000, "Member 'FMachineSurfaceSelectData::MachineSurfaceId' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceSelectData, Name) == 0x000008, "Member 'FMachineSurfaceSelectData::Name' has a wrong offset!");

// ScriptStruct UNION.GadgetUIData
// 0x0038 (0x0038 - 0x0000)
struct FGadgetUIData final
{
public:
	EGadgetId                                     ID;                                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Explanation;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconIndex;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetUIData) == 0x000008, "Wrong alignment on FGadgetUIData");
static_assert(sizeof(FGadgetUIData) == 0x000038, "Wrong size on FGadgetUIData");
static_assert(offsetof(FGadgetUIData, ID) == 0x000000, "Member 'FGadgetUIData::ID' has a wrong offset!");
static_assert(offsetof(FGadgetUIData, Name) == 0x000008, "Member 'FGadgetUIData::Name' has a wrong offset!");
static_assert(offsetof(FGadgetUIData, Explanation) == 0x000018, "Member 'FGadgetUIData::Explanation' has a wrong offset!");
static_assert(offsetof(FGadgetUIData, IconTexture) == 0x000028, "Member 'FGadgetUIData::IconTexture' has a wrong offset!");
static_assert(offsetof(FGadgetUIData, IconIndex) == 0x000030, "Member 'FGadgetUIData::IconIndex' has a wrong offset!");
static_assert(offsetof(FGadgetUIData, Num) == 0x000034, "Member 'FGadgetUIData::Num' has a wrong offset!");

// ScriptStruct UNION.StickerData
// 0x00A8 (0x00B0 - 0x0008)
struct FStickerData final : public FTableRowBase
{
public:
	int32                                         Version;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentUnlockSortID;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ThumbnailTexture;                                  // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsEnabledColorChange;                             // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabledFreeScale;                               // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDLC;                                            // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExtra;                                          // 0x007B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExtraStickerPattern                          ExtraPattern;                                      // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x007D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefault;                                        // 0x007E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHiddenUntilUnlock;                              // 0x007F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnlockText;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 GmDetail;                                          // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStickerChallenge                             ChallengeType;                                     // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStickerData) == 0x000008, "Wrong alignment on FStickerData");
static_assert(sizeof(FStickerData) == 0x0000B0, "Wrong size on FStickerData");
static_assert(offsetof(FStickerData, Version) == 0x000008, "Member 'FStickerData::Version' has a wrong offset!");
static_assert(offsetof(FStickerData, SortID) == 0x00000C, "Member 'FStickerData::SortID' has a wrong offset!");
static_assert(offsetof(FStickerData, ContentUnlockSortID) == 0x000010, "Member 'FStickerData::ContentUnlockSortID' has a wrong offset!");
static_assert(offsetof(FStickerData, IconTexture) == 0x000018, "Member 'FStickerData::IconTexture' has a wrong offset!");
static_assert(offsetof(FStickerData, ThumbnailTexture) == 0x000040, "Member 'FStickerData::ThumbnailTexture' has a wrong offset!");
static_assert(offsetof(FStickerData, Name) == 0x000068, "Member 'FStickerData::Name' has a wrong offset!");
static_assert(offsetof(FStickerData, bIsEnabledColorChange) == 0x000078, "Member 'FStickerData::bIsEnabledColorChange' has a wrong offset!");
static_assert(offsetof(FStickerData, bIsEnabledFreeScale) == 0x000079, "Member 'FStickerData::bIsEnabledFreeScale' has a wrong offset!");
static_assert(offsetof(FStickerData, bIsDLC) == 0x00007A, "Member 'FStickerData::bIsDLC' has a wrong offset!");
static_assert(offsetof(FStickerData, bIsExtra) == 0x00007B, "Member 'FStickerData::bIsExtra' has a wrong offset!");
static_assert(offsetof(FStickerData, ExtraPattern) == 0x00007C, "Member 'FStickerData::ExtraPattern' has a wrong offset!");
static_assert(offsetof(FStickerData, bIsEnabled) == 0x00007D, "Member 'FStickerData::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FStickerData, bIsDefault) == 0x00007E, "Member 'FStickerData::bIsDefault' has a wrong offset!");
static_assert(offsetof(FStickerData, bIsHiddenUntilUnlock) == 0x00007F, "Member 'FStickerData::bIsHiddenUntilUnlock' has a wrong offset!");
static_assert(offsetof(FStickerData, Price) == 0x000080, "Member 'FStickerData::Price' has a wrong offset!");
static_assert(offsetof(FStickerData, UnlockText) == 0x000088, "Member 'FStickerData::UnlockText' has a wrong offset!");
static_assert(offsetof(FStickerData, GmDetail) == 0x000098, "Member 'FStickerData::GmDetail' has a wrong offset!");
static_assert(offsetof(FStickerData, ChallengeType) == 0x0000A8, "Member 'FStickerData::ChallengeType' has a wrong offset!");

// ScriptStruct UNION.StickerSortData
// 0x00B8 (0x00B8 - 0x0000)
struct FStickerSortData final
{
public:
	class FName                                   stickerId;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStickerData                           StickerData;                                       // 0x0008(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStickerSortData) == 0x000008, "Wrong alignment on FStickerSortData");
static_assert(sizeof(FStickerSortData) == 0x0000B8, "Wrong size on FStickerSortData");
static_assert(offsetof(FStickerSortData, stickerId) == 0x000000, "Member 'FStickerSortData::stickerId' has a wrong offset!");
static_assert(offsetof(FStickerSortData, StickerData) == 0x000008, "Member 'FStickerSortData::StickerData' has a wrong offset!");

// ScriptStruct UNION.MachineColorAreaTextUIData
// 0x0070 (0x0070 - 0x0000)
struct FMachineColorAreaTextUIData final
{
public:
	class FText                                   Body;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Tire;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Cockpit;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Glow;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Main;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Sub;                                               // 0x0050(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Accent;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineColorAreaTextUIData) == 0x000008, "Wrong alignment on FMachineColorAreaTextUIData");
static_assert(sizeof(FMachineColorAreaTextUIData) == 0x000070, "Wrong size on FMachineColorAreaTextUIData");
static_assert(offsetof(FMachineColorAreaTextUIData, Body) == 0x000000, "Member 'FMachineColorAreaTextUIData::Body' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaTextUIData, Tire) == 0x000010, "Member 'FMachineColorAreaTextUIData::Tire' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaTextUIData, Cockpit) == 0x000020, "Member 'FMachineColorAreaTextUIData::Cockpit' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaTextUIData, Glow) == 0x000030, "Member 'FMachineColorAreaTextUIData::Glow' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaTextUIData, Main) == 0x000040, "Member 'FMachineColorAreaTextUIData::Main' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaTextUIData, Sub) == 0x000050, "Member 'FMachineColorAreaTextUIData::Sub' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaTextUIData, Accent) == 0x000060, "Member 'FMachineColorAreaTextUIData::Accent' has a wrong offset!");

// ScriptStruct UNION.UnionTravelRIngRingMaterialList
// 0x01B8 (0x01B8 - 0x0000)
struct FUnionTravelRIngRingMaterialList final
{
public:
	TSoftObjectPtr<class UMaterialInstance>       RingLeft;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       RingLeft_noRT;                                     // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       RingRight;                                         // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       RingRight_noRT;                                    // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       EnterHalf;                                         // 0x00A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       EnterHalf_noRT;                                    // 0x00C8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       EnterFull;                                         // 0x00F0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       EnterFull_noRT;                                    // 0x0118(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       NoEvent;                                           // 0x0140(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       NoEvent_noRT;                                      // 0x0168(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Exit;                                              // 0x0190(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionTravelRIngRingMaterialList) == 0x000008, "Wrong alignment on FUnionTravelRIngRingMaterialList");
static_assert(sizeof(FUnionTravelRIngRingMaterialList) == 0x0001B8, "Wrong size on FUnionTravelRIngRingMaterialList");
static_assert(offsetof(FUnionTravelRIngRingMaterialList, RingLeft) == 0x000000, "Member 'FUnionTravelRIngRingMaterialList::RingLeft' has a wrong offset!");
static_assert(offsetof(FUnionTravelRIngRingMaterialList, RingLeft_noRT) == 0x000028, "Member 'FUnionTravelRIngRingMaterialList::RingLeft_noRT' has a wrong offset!");
static_assert(offsetof(FUnionTravelRIngRingMaterialList, RingRight) == 0x000050, "Member 'FUnionTravelRIngRingMaterialList::RingRight' has a wrong offset!");
static_assert(offsetof(FUnionTravelRIngRingMaterialList, RingRight_noRT) == 0x000078, "Member 'FUnionTravelRIngRingMaterialList::RingRight_noRT' has a wrong offset!");
static_assert(offsetof(FUnionTravelRIngRingMaterialList, EnterHalf) == 0x0000A0, "Member 'FUnionTravelRIngRingMaterialList::EnterHalf' has a wrong offset!");
static_assert(offsetof(FUnionTravelRIngRingMaterialList, EnterHalf_noRT) == 0x0000C8, "Member 'FUnionTravelRIngRingMaterialList::EnterHalf_noRT' has a wrong offset!");
static_assert(offsetof(FUnionTravelRIngRingMaterialList, EnterFull) == 0x0000F0, "Member 'FUnionTravelRIngRingMaterialList::EnterFull' has a wrong offset!");
static_assert(offsetof(FUnionTravelRIngRingMaterialList, EnterFull_noRT) == 0x000118, "Member 'FUnionTravelRIngRingMaterialList::EnterFull_noRT' has a wrong offset!");
static_assert(offsetof(FUnionTravelRIngRingMaterialList, NoEvent) == 0x000140, "Member 'FUnionTravelRIngRingMaterialList::NoEvent' has a wrong offset!");
static_assert(offsetof(FUnionTravelRIngRingMaterialList, NoEvent_noRT) == 0x000168, "Member 'FUnionTravelRIngRingMaterialList::NoEvent_noRT' has a wrong offset!");
static_assert(offsetof(FUnionTravelRIngRingMaterialList, Exit) == 0x000190, "Member 'FUnionTravelRIngRingMaterialList::Exit' has a wrong offset!");

// ScriptStruct UNION.UnionTravelRingDataRow
// 0x05D0 (0x05D8 - 0x0008)
struct FUnionTravelRingDataRow final : public FTableRowBase
{
public:
	EUnionTravelRingStageId                       ID;                                                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInstance>       FloorLeft;                                         // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       FloorRight;                                        // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            OverrideMesh;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFinalLap;                                      // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseAsAnother;                                   // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnionTravelRIngRingMaterialList       Normal;                                            // 0x0070(0x01B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUnionTravelRIngRingMaterialList       FinalLap;                                          // 0x0228(0x01B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       RingLeft;                                          // 0x03E0(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       RingLeft_noRT;                                     // 0x0408(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       RingRight;                                         // 0x0430(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       RingRight_noRT;                                    // 0x0458(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       EnterHalf;                                         // 0x0480(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       EnterHalf_noRT;                                    // 0x04A8(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       EnterFull;                                         // 0x04D0(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       EnterFull_noRT;                                    // 0x04F8(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       NoEvent;                                           // 0x0520(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       NoEvent_noRT;                                      // 0x0548(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Exit;                                              // 0x0570(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUnionShortcutRingCubemaps>     ShortcutRIngCubemapList;                           // 0x0598(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUnionShortcutRingCubemaps>     ShortcutRingCubemapListFL;                         // 0x05A8(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color0;                                            // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color1;                                            // 0x05C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionTravelRingDataRow) == 0x000008, "Wrong alignment on FUnionTravelRingDataRow");
static_assert(sizeof(FUnionTravelRingDataRow) == 0x0005D8, "Wrong size on FUnionTravelRingDataRow");
static_assert(offsetof(FUnionTravelRingDataRow, ID) == 0x000008, "Member 'FUnionTravelRingDataRow::ID' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, FloorLeft) == 0x000010, "Member 'FUnionTravelRingDataRow::FloorLeft' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, FloorRight) == 0x000038, "Member 'FUnionTravelRingDataRow::FloorRight' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, OverrideMesh) == 0x000060, "Member 'FUnionTravelRingDataRow::OverrideMesh' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, bUseFinalLap) == 0x000068, "Member 'FUnionTravelRingDataRow::bUseFinalLap' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, bCloseAsAnother) == 0x000069, "Member 'FUnionTravelRingDataRow::bCloseAsAnother' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, Normal) == 0x000070, "Member 'FUnionTravelRingDataRow::Normal' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, FinalLap) == 0x000228, "Member 'FUnionTravelRingDataRow::FinalLap' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, RingLeft) == 0x0003E0, "Member 'FUnionTravelRingDataRow::RingLeft' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, RingLeft_noRT) == 0x000408, "Member 'FUnionTravelRingDataRow::RingLeft_noRT' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, RingRight) == 0x000430, "Member 'FUnionTravelRingDataRow::RingRight' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, RingRight_noRT) == 0x000458, "Member 'FUnionTravelRingDataRow::RingRight_noRT' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, EnterHalf) == 0x000480, "Member 'FUnionTravelRingDataRow::EnterHalf' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, EnterHalf_noRT) == 0x0004A8, "Member 'FUnionTravelRingDataRow::EnterHalf_noRT' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, EnterFull) == 0x0004D0, "Member 'FUnionTravelRingDataRow::EnterFull' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, EnterFull_noRT) == 0x0004F8, "Member 'FUnionTravelRingDataRow::EnterFull_noRT' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, NoEvent) == 0x000520, "Member 'FUnionTravelRingDataRow::NoEvent' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, NoEvent_noRT) == 0x000548, "Member 'FUnionTravelRingDataRow::NoEvent_noRT' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, Exit) == 0x000570, "Member 'FUnionTravelRingDataRow::Exit' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, ShortcutRIngCubemapList) == 0x000598, "Member 'FUnionTravelRingDataRow::ShortcutRIngCubemapList' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, ShortcutRingCubemapListFL) == 0x0005A8, "Member 'FUnionTravelRingDataRow::ShortcutRingCubemapListFL' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, Color0) == 0x0005B8, "Member 'FUnionTravelRingDataRow::Color0' has a wrong offset!");
static_assert(offsetof(FUnionTravelRingDataRow, Color1) == 0x0005C8, "Member 'FUnionTravelRingDataRow::Color1' has a wrong offset!");

// ScriptStruct UNION.StickerUVData
// 0x0038 (0x0038 - 0x0000)
struct FStickerUVData final
{
public:
	TSoftObjectPtr<class UTexture2D>              UVTexture;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStickerUVData) == 0x000008, "Wrong alignment on FStickerUVData");
static_assert(sizeof(FStickerUVData) == 0x000038, "Wrong size on FStickerUVData");
static_assert(offsetof(FStickerUVData, UVTexture) == 0x000000, "Member 'FStickerUVData::UVTexture' has a wrong offset!");
static_assert(offsetof(FStickerUVData, Name) == 0x000028, "Member 'FStickerUVData::Name' has a wrong offset!");

// ScriptStruct UNION.MachineColorAreaUIData
// 0x0040 (0x0040 - 0x0000)
struct FMachineColorAreaUIData final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SurfaceName;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMachineColorAreaUIId                         ID;                                                // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachineColorAreaUIData) == 0x000008, "Wrong alignment on FMachineColorAreaUIData");
static_assert(sizeof(FMachineColorAreaUIData) == 0x000040, "Wrong size on FMachineColorAreaUIData");
static_assert(offsetof(FMachineColorAreaUIData, bIsEnabled) == 0x000000, "Member 'FMachineColorAreaUIData::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaUIData, Name) == 0x000008, "Member 'FMachineColorAreaUIData::Name' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaUIData, Color) == 0x000018, "Member 'FMachineColorAreaUIData::Color' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaUIData, SurfaceName) == 0x000028, "Member 'FMachineColorAreaUIData::SurfaceName' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaUIData, ID) == 0x000038, "Member 'FMachineColorAreaUIData::ID' has a wrong offset!");

// ScriptStruct UNION.MachineColorAreaUIDataGroup
// 0x00D8 (0x00D8 - 0x0000)
struct FMachineColorAreaUIDataGroup final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         IconIndex;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMachineColorAreaUIData                Main;                                              // 0x0018(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineColorAreaUIData                Sub;                                               // 0x0058(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineColorAreaUIData                Accent;                                            // 0x0098(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineColorAreaUIDataGroup) == 0x000008, "Wrong alignment on FMachineColorAreaUIDataGroup");
static_assert(sizeof(FMachineColorAreaUIDataGroup) == 0x0000D8, "Wrong size on FMachineColorAreaUIDataGroup");
static_assert(offsetof(FMachineColorAreaUIDataGroup, Name) == 0x000000, "Member 'FMachineColorAreaUIDataGroup::Name' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaUIDataGroup, IconIndex) == 0x000010, "Member 'FMachineColorAreaUIDataGroup::IconIndex' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaUIDataGroup, Main) == 0x000018, "Member 'FMachineColorAreaUIDataGroup::Main' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaUIDataGroup, Sub) == 0x000058, "Member 'FMachineColorAreaUIDataGroup::Sub' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaUIDataGroup, Accent) == 0x000098, "Member 'FMachineColorAreaUIDataGroup::Accent' has a wrong offset!");

// ScriptStruct UNION.MachineColorAreaSettingUIData
// 0x02C8 (0x02C8 - 0x0000)
struct FMachineColorAreaSettingUIData final
{
public:
	struct FMachineColorAreaUIDataGroup           Body;                                              // 0x0000(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineColorAreaUIDataGroup           Tire;                                              // 0x00D8(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineColorAreaUIDataGroup           Cockpit;                                           // 0x01B0(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineColorAreaUIData                Glow;                                              // 0x0288(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineColorAreaSettingUIData) == 0x000008, "Wrong alignment on FMachineColorAreaSettingUIData");
static_assert(sizeof(FMachineColorAreaSettingUIData) == 0x0002C8, "Wrong size on FMachineColorAreaSettingUIData");
static_assert(offsetof(FMachineColorAreaSettingUIData, Body) == 0x000000, "Member 'FMachineColorAreaSettingUIData::Body' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaSettingUIData, Tire) == 0x0000D8, "Member 'FMachineColorAreaSettingUIData::Tire' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaSettingUIData, Cockpit) == 0x0001B0, "Member 'FMachineColorAreaSettingUIData::Cockpit' has a wrong offset!");
static_assert(offsetof(FMachineColorAreaSettingUIData, Glow) == 0x000288, "Member 'FMachineColorAreaSettingUIData::Glow' has a wrong offset!");

// ScriptStruct UNION.MonsterTruckCockpitData
// 0x0050 (0x0050 - 0x0000)
struct FMonsterTruckCockpitData final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimInstance;                                      // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonsterTruckCockpitData) == 0x000008, "Wrong alignment on FMonsterTruckCockpitData");
static_assert(sizeof(FMonsterTruckCockpitData) == 0x000050, "Wrong size on FMonsterTruckCockpitData");
static_assert(offsetof(FMonsterTruckCockpitData, Mesh) == 0x000000, "Member 'FMonsterTruckCockpitData::Mesh' has a wrong offset!");
static_assert(offsetof(FMonsterTruckCockpitData, AnimInstance) == 0x000028, "Member 'FMonsterTruckCockpitData::AnimInstance' has a wrong offset!");

// ScriptStruct UNION.MachineCockpitAssetData
// 0x0058 (0x0060 - 0x0008)
struct FMachineCockpitAssetData final : public FTableRowBase
{
public:
	ECarStatusType                                CarStatusType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EDriverSize, struct FMachineCockpitData> CockpitData;                                       // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineCockpitAssetData) == 0x000008, "Wrong alignment on FMachineCockpitAssetData");
static_assert(sizeof(FMachineCockpitAssetData) == 0x000060, "Wrong size on FMachineCockpitAssetData");
static_assert(offsetof(FMachineCockpitAssetData, CarStatusType) == 0x000008, "Member 'FMachineCockpitAssetData::CarStatusType' has a wrong offset!");
static_assert(offsetof(FMachineCockpitAssetData, CockpitData) == 0x000010, "Member 'FMachineCockpitAssetData::CockpitData' has a wrong offset!");

// ScriptStruct UNION.MonsterTruckCockpitAssetData
// 0x0050 (0x0058 - 0x0008)
struct FMonsterTruckCockpitAssetData final : public FTableRowBase
{
public:
	struct FMonsterTruckCockpitData               CockpitData;                                       // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonsterTruckCockpitAssetData) == 0x000008, "Wrong alignment on FMonsterTruckCockpitAssetData");
static_assert(sizeof(FMonsterTruckCockpitAssetData) == 0x000058, "Wrong size on FMonsterTruckCockpitAssetData");
static_assert(offsetof(FMonsterTruckCockpitAssetData, CockpitData) == 0x000008, "Member 'FMonsterTruckCockpitAssetData::CockpitData' has a wrong offset!");

// ScriptStruct UNION.MachineOffsetAssetData
// 0x0008 (0x0010 - 0x0008)
struct FMachineOffsetAssetData final : public FTableRowBase
{
public:
	ECarStatusType                                CarStatusType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverSize                                   DriverSize;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HudOffsetY;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineOffsetAssetData) == 0x000008, "Wrong alignment on FMachineOffsetAssetData");
static_assert(sizeof(FMachineOffsetAssetData) == 0x000010, "Wrong size on FMachineOffsetAssetData");
static_assert(offsetof(FMachineOffsetAssetData, CarStatusType) == 0x000008, "Member 'FMachineOffsetAssetData::CarStatusType' has a wrong offset!");
static_assert(offsetof(FMachineOffsetAssetData, DriverSize) == 0x000009, "Member 'FMachineOffsetAssetData::DriverSize' has a wrong offset!");
static_assert(offsetof(FMachineOffsetAssetData, HudOffsetY) == 0x00000C, "Member 'FMachineOffsetAssetData::HudOffsetY' has a wrong offset!");

// ScriptStruct UNION.MachineEffectAssetData
// 0x00D8 (0x00E0 - 0x0008)
struct FMachineEffectAssetData final : public FTableRowBase
{
public:
	EMachineEffectType                            EffectType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          AssetLOD0;                                         // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          AssetLOD1;                                         // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          AssetLOD2;                                         // 0x0060(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableGroup;                                     // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableAfterGoal;                                 // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUpdateTransform;                                 // 0x0093(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AttachmentRule;                                    // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineEffectVisibleType                     VisibleType;                                       // 0x0095(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetLocation;                                    // 0x0098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotator;                                     // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineEffectAssetData) == 0x000008, "Wrong alignment on FMachineEffectAssetData");
static_assert(sizeof(FMachineEffectAssetData) == 0x0000E0, "Wrong size on FMachineEffectAssetData");
static_assert(offsetof(FMachineEffectAssetData, EffectType) == 0x000008, "Member 'FMachineEffectAssetData::EffectType' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, AssetLOD0) == 0x000010, "Member 'FMachineEffectAssetData::AssetLOD0' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, AssetLOD1) == 0x000038, "Member 'FMachineEffectAssetData::AssetLOD1' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, AssetLOD2) == 0x000060, "Member 'FMachineEffectAssetData::AssetLOD2' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, AttachSocketName) == 0x000088, "Member 'FMachineEffectAssetData::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, IsLoop) == 0x000090, "Member 'FMachineEffectAssetData::IsLoop' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, IsEnableGroup) == 0x000091, "Member 'FMachineEffectAssetData::IsEnableGroup' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, IsEnableAfterGoal) == 0x000092, "Member 'FMachineEffectAssetData::IsEnableAfterGoal' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, IsUpdateTransform) == 0x000093, "Member 'FMachineEffectAssetData::IsUpdateTransform' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, AttachmentRule) == 0x000094, "Member 'FMachineEffectAssetData::AttachmentRule' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, VisibleType) == 0x000095, "Member 'FMachineEffectAssetData::VisibleType' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, OffsetLocation) == 0x000098, "Member 'FMachineEffectAssetData::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, OffsetRotator) == 0x0000B0, "Member 'FMachineEffectAssetData::OffsetRotator' has a wrong offset!");
static_assert(offsetof(FMachineEffectAssetData, Scale) == 0x0000C8, "Member 'FMachineEffectAssetData::Scale' has a wrong offset!");

// ScriptStruct UNION.MachineSurfaceEffectData
// 0x00A0 (0x00A8 - 0x0008)
struct FMachineSurfaceEffectData final : public FTableRowBase
{
public:
	TMap<EUnionSurfaceType, struct FMachineSurfaceEffectAssetData> SurfaceAssets;                    // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EUnionExtraSurfaceEffectType, struct FMachineSurfaceEffectAssetData> ExtraAssets;           // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineSurfaceEffectData) == 0x000008, "Wrong alignment on FMachineSurfaceEffectData");
static_assert(sizeof(FMachineSurfaceEffectData) == 0x0000A8, "Wrong size on FMachineSurfaceEffectData");
static_assert(offsetof(FMachineSurfaceEffectData, SurfaceAssets) == 0x000008, "Member 'FMachineSurfaceEffectData::SurfaceAssets' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceEffectData, ExtraAssets) == 0x000058, "Member 'FMachineSurfaceEffectData::ExtraAssets' has a wrong offset!");

// ScriptStruct UNION.MachineSurfaceData
// 0x0080 (0x0080 - 0x0000)
struct FMachineSurfaceData final
{
public:
	class UNiagaraSystem*                         Asset;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetTransform;                                   // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionParam;                                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachineSurfaceData) == 0x000010, "Wrong alignment on FMachineSurfaceData");
static_assert(sizeof(FMachineSurfaceData) == 0x000080, "Wrong size on FMachineSurfaceData");
static_assert(offsetof(FMachineSurfaceData, Asset) == 0x000000, "Member 'FMachineSurfaceData::Asset' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceData, OffsetTransform) == 0x000010, "Member 'FMachineSurfaceData::OffsetTransform' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceData, OptionParam) == 0x000070, "Member 'FMachineSurfaceData::OptionParam' has a wrong offset!");

// ScriptStruct UNION.TireMaterialData
// 0x0010 (0x0010 - 0x0000)
struct FTireMaterialData final
{
public:
	class UMaterialInterface*                     MaterialInterface;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTireMaterialData) == 0x000008, "Wrong alignment on FTireMaterialData");
static_assert(sizeof(FTireMaterialData) == 0x000010, "Wrong size on FTireMaterialData");
static_assert(offsetof(FTireMaterialData, MaterialInterface) == 0x000000, "Member 'FTireMaterialData::MaterialInterface' has a wrong offset!");
static_assert(offsetof(FTireMaterialData, Name) == 0x000008, "Member 'FTireMaterialData::Name' has a wrong offset!");

// ScriptStruct UNION.TireMarkAssetData
// 0x00D0 (0x00D8 - 0x0008)
struct FTireMarkAssetData final : public FTableRowBase
{
public:
	TArray<struct FVector2D>                      OffsetUVArray;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EUnionSurfaceType, struct FTireMaterialData> MaterialMap;                                   // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ETireMarkStatusType, struct FTireMaterialData> MaterialStatusMap;                           // 0x0068(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<float>                                 WideScaleArray;                                    // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WideScaleLevelArray;                               // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTireMarkAssetData) == 0x000008, "Wrong alignment on FTireMarkAssetData");
static_assert(sizeof(FTireMarkAssetData) == 0x0000D8, "Wrong size on FTireMarkAssetData");
static_assert(offsetof(FTireMarkAssetData, OffsetUVArray) == 0x000008, "Member 'FTireMarkAssetData::OffsetUVArray' has a wrong offset!");
static_assert(offsetof(FTireMarkAssetData, MaterialMap) == 0x000018, "Member 'FTireMarkAssetData::MaterialMap' has a wrong offset!");
static_assert(offsetof(FTireMarkAssetData, MaterialStatusMap) == 0x000068, "Member 'FTireMarkAssetData::MaterialStatusMap' has a wrong offset!");
static_assert(offsetof(FTireMarkAssetData, WideScaleArray) == 0x0000B8, "Member 'FTireMarkAssetData::WideScaleArray' has a wrong offset!");
static_assert(offsetof(FTireMarkAssetData, WideScaleLevelArray) == 0x0000C8, "Member 'FTireMarkAssetData::WideScaleLevelArray' has a wrong offset!");

// ScriptStruct UNION.CarShadowAssetData
// 0x03E8 (0x03F0 - 0x0008)
struct FCarShadowAssetData final : public FTableRowBase
{
public:
	TMap<ECarStatusType, class UTexture2D*>       ShadowDecalTexture;                                // 0x0008(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<ECarStatusType, class UStaticMesh*>      ShadowDecalMesh;                                   // 0x0058(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<ECarStatusType, class UMaterialInstance*> ShadowMaterialInstance;                           // 0x00A8(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	class UTexture2D*                             ShadowDecalTextureMT;                              // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            ShadowDecalMeshMT;                                 // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      ShadowMaterialInstanceMT;                          // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECarStatusType, struct FVector>          ShadowDecalScale;                                  // 0x0110(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ECarStatusType, struct FVector>          ShadowDecalOffset;                                 // 0x0160(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ECarStatusType, float>                   ShadowDecalAlpha;                                  // 0x01B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ECarStatusType, float>                   ShadowDecalFadeOut;                                // 0x0200(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ECarStatusType, struct FVector>          ShadowDecalBodyCutCScale;                          // 0x0250(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ECarStatusType, struct FVector>          ShadowDecalBodyCutOffset;                          // 0x02A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                ShadowDecalMonsterTrackScale;                      // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShadowDecalMonsterTrackOffset;                     // 0x0308(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShadowDecalDrillScale;                             // 0x0320(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShadowDecalDrillOffset;                            // 0x0338(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EStageId, float>                         ShadowDecalStageAlpha;                             // 0x0350(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EStageId, float>                         ShadowDecalStageAlphaNX4;                          // 0x03A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCarShadowAssetData) == 0x000008, "Wrong alignment on FCarShadowAssetData");
static_assert(sizeof(FCarShadowAssetData) == 0x0003F0, "Wrong size on FCarShadowAssetData");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalTexture) == 0x000008, "Member 'FCarShadowAssetData::ShadowDecalTexture' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalMesh) == 0x000058, "Member 'FCarShadowAssetData::ShadowDecalMesh' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowMaterialInstance) == 0x0000A8, "Member 'FCarShadowAssetData::ShadowMaterialInstance' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalTextureMT) == 0x0000F8, "Member 'FCarShadowAssetData::ShadowDecalTextureMT' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalMeshMT) == 0x000100, "Member 'FCarShadowAssetData::ShadowDecalMeshMT' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowMaterialInstanceMT) == 0x000108, "Member 'FCarShadowAssetData::ShadowMaterialInstanceMT' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalScale) == 0x000110, "Member 'FCarShadowAssetData::ShadowDecalScale' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalOffset) == 0x000160, "Member 'FCarShadowAssetData::ShadowDecalOffset' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalAlpha) == 0x0001B0, "Member 'FCarShadowAssetData::ShadowDecalAlpha' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalFadeOut) == 0x000200, "Member 'FCarShadowAssetData::ShadowDecalFadeOut' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalBodyCutCScale) == 0x000250, "Member 'FCarShadowAssetData::ShadowDecalBodyCutCScale' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalBodyCutOffset) == 0x0002A0, "Member 'FCarShadowAssetData::ShadowDecalBodyCutOffset' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalMonsterTrackScale) == 0x0002F0, "Member 'FCarShadowAssetData::ShadowDecalMonsterTrackScale' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalMonsterTrackOffset) == 0x000308, "Member 'FCarShadowAssetData::ShadowDecalMonsterTrackOffset' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalDrillScale) == 0x000320, "Member 'FCarShadowAssetData::ShadowDecalDrillScale' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalDrillOffset) == 0x000338, "Member 'FCarShadowAssetData::ShadowDecalDrillOffset' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalStageAlpha) == 0x000350, "Member 'FCarShadowAssetData::ShadowDecalStageAlpha' has a wrong offset!");
static_assert(offsetof(FCarShadowAssetData, ShadowDecalStageAlphaNX4) == 0x0003A0, "Member 'FCarShadowAssetData::ShadowDecalStageAlphaNX4' has a wrong offset!");

// ScriptStruct UNION.CharaMachineCustomParamData
// 0x0098 (0x00A0 - 0x0008)
struct FCharaMachineCustomParamData final : public FTableRowBase
{
public:
	struct FDriverCustomParamData                 CharaDriverParam;                                  // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineCustomParamData                FrontPartsParam;                                   // 0x0028(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineCustomParamData                RearPartsParam;                                    // 0x0048(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMachineCustomParamData                TirePartsParam;                                    // 0x0068(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         SumSpeed;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SumAccel;                                          // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SumDash;                                           // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SumHandling;                                       // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SumPower;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharaMachineCustomParamData) == 0x000008, "Wrong alignment on FCharaMachineCustomParamData");
static_assert(sizeof(FCharaMachineCustomParamData) == 0x0000A0, "Wrong size on FCharaMachineCustomParamData");
static_assert(offsetof(FCharaMachineCustomParamData, CharaDriverParam) == 0x000008, "Member 'FCharaMachineCustomParamData::CharaDriverParam' has a wrong offset!");
static_assert(offsetof(FCharaMachineCustomParamData, FrontPartsParam) == 0x000028, "Member 'FCharaMachineCustomParamData::FrontPartsParam' has a wrong offset!");
static_assert(offsetof(FCharaMachineCustomParamData, RearPartsParam) == 0x000048, "Member 'FCharaMachineCustomParamData::RearPartsParam' has a wrong offset!");
static_assert(offsetof(FCharaMachineCustomParamData, TirePartsParam) == 0x000068, "Member 'FCharaMachineCustomParamData::TirePartsParam' has a wrong offset!");
static_assert(offsetof(FCharaMachineCustomParamData, SumSpeed) == 0x000088, "Member 'FCharaMachineCustomParamData::SumSpeed' has a wrong offset!");
static_assert(offsetof(FCharaMachineCustomParamData, SumAccel) == 0x00008C, "Member 'FCharaMachineCustomParamData::SumAccel' has a wrong offset!");
static_assert(offsetof(FCharaMachineCustomParamData, SumDash) == 0x000090, "Member 'FCharaMachineCustomParamData::SumDash' has a wrong offset!");
static_assert(offsetof(FCharaMachineCustomParamData, SumHandling) == 0x000094, "Member 'FCharaMachineCustomParamData::SumHandling' has a wrong offset!");
static_assert(offsetof(FCharaMachineCustomParamData, SumPower) == 0x000098, "Member 'FCharaMachineCustomParamData::SumPower' has a wrong offset!");

// ScriptStruct UNION.MachinePatternData
// 0x00B8 (0x00C0 - 0x0008)
struct FMachinePatternData final : public FTableRowBase
{
public:
	ERom1stMachineId                              PatternId;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    FrontPartsId;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    RearPartsId;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    UnitPartsId;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMachinePartsDataAsset>  FrontParts;                                        // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMachinePartsDataAsset>  RearParts;                                         // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SideMesh;                                          // 0x0060(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             SideStaticMesh;                                    // 0x0088(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UStaticMesh>>     TireMesh;                                          // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachinePatternData) == 0x000008, "Wrong alignment on FMachinePatternData");
static_assert(sizeof(FMachinePatternData) == 0x0000C0, "Wrong size on FMachinePatternData");
static_assert(offsetof(FMachinePatternData, PatternId) == 0x000008, "Member 'FMachinePatternData::PatternId' has a wrong offset!");
static_assert(offsetof(FMachinePatternData, FrontPartsId) == 0x000009, "Member 'FMachinePatternData::FrontPartsId' has a wrong offset!");
static_assert(offsetof(FMachinePatternData, RearPartsId) == 0x00000A, "Member 'FMachinePatternData::RearPartsId' has a wrong offset!");
static_assert(offsetof(FMachinePatternData, UnitPartsId) == 0x00000B, "Member 'FMachinePatternData::UnitPartsId' has a wrong offset!");
static_assert(offsetof(FMachinePatternData, FrontParts) == 0x000010, "Member 'FMachinePatternData::FrontParts' has a wrong offset!");
static_assert(offsetof(FMachinePatternData, RearParts) == 0x000038, "Member 'FMachinePatternData::RearParts' has a wrong offset!");
static_assert(offsetof(FMachinePatternData, SideMesh) == 0x000060, "Member 'FMachinePatternData::SideMesh' has a wrong offset!");
static_assert(offsetof(FMachinePatternData, SideStaticMesh) == 0x000088, "Member 'FMachinePatternData::SideStaticMesh' has a wrong offset!");
static_assert(offsetof(FMachinePatternData, TireMesh) == 0x0000B0, "Member 'FMachinePatternData::TireMesh' has a wrong offset!");

// ScriptStruct UNION.MachineOtherName
// 0x0028 (0x0028 - 0x0000)
struct FMachineOtherName final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    RearPartsId;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineOtherName) == 0x000008, "Wrong alignment on FMachineOtherName");
static_assert(sizeof(FMachineOtherName) == 0x000028, "Wrong size on FMachineOtherName");
static_assert(offsetof(FMachineOtherName, Language) == 0x000000, "Member 'FMachineOtherName::Language' has a wrong offset!");
static_assert(offsetof(FMachineOtherName, RearPartsId) == 0x000010, "Member 'FMachineOtherName::RearPartsId' has a wrong offset!");
static_assert(offsetof(FMachineOtherName, Name) == 0x000018, "Member 'FMachineOtherName::Name' has a wrong offset!");

// ScriptStruct UNION.MachineOtherNameData
// 0x0010 (0x0018 - 0x0008)
struct FMachineOtherNameData final : public FTableRowBase
{
public:
	TArray<struct FMachineOtherName>              OtherNameData;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineOtherNameData) == 0x000008, "Wrong alignment on FMachineOtherNameData");
static_assert(sizeof(FMachineOtherNameData) == 0x000018, "Wrong size on FMachineOtherNameData");
static_assert(offsetof(FMachineOtherNameData, OtherNameData) == 0x000008, "Member 'FMachineOtherNameData::OtherNameData' has a wrong offset!");

// ScriptStruct UNION.MachinePartsData
// 0x01F0 (0x01F8 - 0x0008)
struct FMachinePartsData final : public FTableRowBase
{
public:
	int32                                         Version;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    MachineId;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MachineNo;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   FrontName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   RearName;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InitialMachine;                                    // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCom;                                            // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDLC;                                             // 0x004B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDLCType                                      DLCType;                                           // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReleaseSeason;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECarStatusType                                CarStatusType;                                     // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachinePartsSize                             MachinePartsSize;                                  // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FrontPartsPrice;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RearPartsPrice;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TirePartsPrice;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ShopUnlockText;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentUnlockSortID;                               // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMachinePartsDataAsset>  FrontParts;                                        // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMachinePartsDataAsset>  RearParts;                                         // 0x00A8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMachineTirePartsDataAsset> TireParts;                                      // 0x00D0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        FrontPartsAsset;                                   // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        RearPartsAsset;                                    // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        TirePartsAsset;                                    // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCommonSideParts;                                // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineColorPresetId                         ColorPresetId;                                     // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MufflerNum;                                        // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0130(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconLTexture;                                      // 0x0158(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FrontIconTexture;                                  // 0x0180(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RearIconTexture;                                   // 0x01A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TireIconTexture;                                   // 0x01D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachinePartsData) == 0x000008, "Wrong alignment on FMachinePartsData");
static_assert(sizeof(FMachinePartsData) == 0x0001F8, "Wrong size on FMachinePartsData");
static_assert(offsetof(FMachinePartsData, Version) == 0x000008, "Member 'FMachinePartsData::Version' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, MachineId) == 0x00000C, "Member 'FMachinePartsData::MachineId' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, MachineNo) == 0x000010, "Member 'FMachinePartsData::MachineNo' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, Name) == 0x000018, "Member 'FMachinePartsData::Name' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, FrontName) == 0x000028, "Member 'FMachinePartsData::FrontName' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, RearName) == 0x000038, "Member 'FMachinePartsData::RearName' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, IsEnabled) == 0x000048, "Member 'FMachinePartsData::IsEnabled' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, InitialMachine) == 0x000049, "Member 'FMachinePartsData::InitialMachine' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, UseCom) == 0x00004A, "Member 'FMachinePartsData::UseCom' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, IsDLC) == 0x00004B, "Member 'FMachinePartsData::IsDLC' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, DLCType) == 0x00004C, "Member 'FMachinePartsData::DLCType' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, ReleaseSeason) == 0x000050, "Member 'FMachinePartsData::ReleaseSeason' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, CarStatusType) == 0x000054, "Member 'FMachinePartsData::CarStatusType' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, MachinePartsSize) == 0x000055, "Member 'FMachinePartsData::MachinePartsSize' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, FrontPartsPrice) == 0x000058, "Member 'FMachinePartsData::FrontPartsPrice' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, RearPartsPrice) == 0x00005C, "Member 'FMachinePartsData::RearPartsPrice' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, TirePartsPrice) == 0x000060, "Member 'FMachinePartsData::TirePartsPrice' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, ShopUnlockText) == 0x000068, "Member 'FMachinePartsData::ShopUnlockText' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, SortID) == 0x000078, "Member 'FMachinePartsData::SortID' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, ContentUnlockSortID) == 0x00007C, "Member 'FMachinePartsData::ContentUnlockSortID' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, FrontParts) == 0x000080, "Member 'FMachinePartsData::FrontParts' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, RearParts) == 0x0000A8, "Member 'FMachinePartsData::RearParts' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, TireParts) == 0x0000D0, "Member 'FMachinePartsData::TireParts' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, FrontPartsAsset) == 0x0000F8, "Member 'FMachinePartsData::FrontPartsAsset' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, RearPartsAsset) == 0x000108, "Member 'FMachinePartsData::RearPartsAsset' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, TirePartsAsset) == 0x000118, "Member 'FMachinePartsData::TirePartsAsset' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, UseCommonSideParts) == 0x000128, "Member 'FMachinePartsData::UseCommonSideParts' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, ColorPresetId) == 0x000129, "Member 'FMachinePartsData::ColorPresetId' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, MufflerNum) == 0x00012C, "Member 'FMachinePartsData::MufflerNum' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, IconTexture) == 0x000130, "Member 'FMachinePartsData::IconTexture' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, IconLTexture) == 0x000158, "Member 'FMachinePartsData::IconLTexture' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, FrontIconTexture) == 0x000180, "Member 'FMachinePartsData::FrontIconTexture' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, RearIconTexture) == 0x0001A8, "Member 'FMachinePartsData::RearIconTexture' has a wrong offset!");
static_assert(offsetof(FMachinePartsData, TireIconTexture) == 0x0001D0, "Member 'FMachinePartsData::TireIconTexture' has a wrong offset!");

// ScriptStruct UNION.SimpleNpcData
// 0x0058 (0x0060 - 0x0008)
struct FSimpleNpcData final : public FTableRowBase
{
public:
	EDriverId                                     DriverId;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    MachineId;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USimpleNpcStaticDataAsset> StaticData;                                      // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USimpleNpcSkeletalDataAsset> SkeletalData;                                  // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleNpcData) == 0x000008, "Wrong alignment on FSimpleNpcData");
static_assert(sizeof(FSimpleNpcData) == 0x000060, "Wrong size on FSimpleNpcData");
static_assert(offsetof(FSimpleNpcData, DriverId) == 0x000008, "Member 'FSimpleNpcData::DriverId' has a wrong offset!");
static_assert(offsetof(FSimpleNpcData, MachineId) == 0x000009, "Member 'FSimpleNpcData::MachineId' has a wrong offset!");
static_assert(offsetof(FSimpleNpcData, IsEnabled) == 0x00000A, "Member 'FSimpleNpcData::IsEnabled' has a wrong offset!");
static_assert(offsetof(FSimpleNpcData, StaticData) == 0x000010, "Member 'FSimpleNpcData::StaticData' has a wrong offset!");
static_assert(offsetof(FSimpleNpcData, SkeletalData) == 0x000038, "Member 'FSimpleNpcData::SkeletalData' has a wrong offset!");

// ScriptStruct UNION.MachineColorParam
// 0x0048 (0x0050 - 0x0008)
struct FMachineColorParam final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsUnique;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FlakeTintA;                                        // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FlakeTintB;                                        // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachineColorParam) == 0x000008, "Wrong alignment on FMachineColorParam");
static_assert(sizeof(FMachineColorParam) == 0x000050, "Wrong size on FMachineColorParam");
static_assert(offsetof(FMachineColorParam, Name) == 0x000008, "Member 'FMachineColorParam::Name' has a wrong offset!");
static_assert(offsetof(FMachineColorParam, IsUnique) == 0x000018, "Member 'FMachineColorParam::IsUnique' has a wrong offset!");
static_assert(offsetof(FMachineColorParam, Color) == 0x00001C, "Member 'FMachineColorParam::Color' has a wrong offset!");
static_assert(offsetof(FMachineColorParam, FlakeTintA) == 0x00002C, "Member 'FMachineColorParam::FlakeTintA' has a wrong offset!");
static_assert(offsetof(FMachineColorParam, FlakeTintB) == 0x00003C, "Member 'FMachineColorParam::FlakeTintB' has a wrong offset!");

// ScriptStruct UNION.MachineGlowParam
// 0x0028 (0x0030 - 0x0008)
struct FMachineGlowParam final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsUnique;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineGlowParam) == 0x000008, "Wrong alignment on FMachineGlowParam");
static_assert(sizeof(FMachineGlowParam) == 0x000030, "Wrong size on FMachineGlowParam");
static_assert(offsetof(FMachineGlowParam, Name) == 0x000008, "Member 'FMachineGlowParam::Name' has a wrong offset!");
static_assert(offsetof(FMachineGlowParam, IsUnique) == 0x000018, "Member 'FMachineGlowParam::IsUnique' has a wrong offset!");
static_assert(offsetof(FMachineGlowParam, Color) == 0x00001C, "Member 'FMachineGlowParam::Color' has a wrong offset!");
static_assert(offsetof(FMachineGlowParam, Intensity) == 0x00002C, "Member 'FMachineGlowParam::Intensity' has a wrong offset!");

// ScriptStruct UNION.MachineColorPreset
// 0x0078 (0x0080 - 0x0008)
struct FMachineColorPreset final : public FTableRowBase
{
public:
	EMachineColorPresetId                         MachineColorPresetId;                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PresetName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMachineColorPresetType                       Type;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    MachineId;                                         // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMachineColorData                      BodyColor;                                         // 0x0024(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMachineColorData                      TireColor;                                         // 0x0040(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMachineColorData                      CockpitColor;                                      // 0x005C(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsHiddenUntilUnlock;                              // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDLC;                                            // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachineColorPreset) == 0x000008, "Wrong alignment on FMachineColorPreset");
static_assert(sizeof(FMachineColorPreset) == 0x000080, "Wrong size on FMachineColorPreset");
static_assert(offsetof(FMachineColorPreset, MachineColorPresetId) == 0x000008, "Member 'FMachineColorPreset::MachineColorPresetId' has a wrong offset!");
static_assert(offsetof(FMachineColorPreset, PresetName) == 0x000010, "Member 'FMachineColorPreset::PresetName' has a wrong offset!");
static_assert(offsetof(FMachineColorPreset, Type) == 0x000020, "Member 'FMachineColorPreset::Type' has a wrong offset!");
static_assert(offsetof(FMachineColorPreset, MachineId) == 0x000021, "Member 'FMachineColorPreset::MachineId' has a wrong offset!");
static_assert(offsetof(FMachineColorPreset, IsEnabled) == 0x000022, "Member 'FMachineColorPreset::IsEnabled' has a wrong offset!");
static_assert(offsetof(FMachineColorPreset, BodyColor) == 0x000024, "Member 'FMachineColorPreset::BodyColor' has a wrong offset!");
static_assert(offsetof(FMachineColorPreset, TireColor) == 0x000040, "Member 'FMachineColorPreset::TireColor' has a wrong offset!");
static_assert(offsetof(FMachineColorPreset, CockpitColor) == 0x00005C, "Member 'FMachineColorPreset::CockpitColor' has a wrong offset!");
static_assert(offsetof(FMachineColorPreset, bIsHiddenUntilUnlock) == 0x000078, "Member 'FMachineColorPreset::bIsHiddenUntilUnlock' has a wrong offset!");
static_assert(offsetof(FMachineColorPreset, bIsDLC) == 0x000079, "Member 'FMachineColorPreset::bIsDLC' has a wrong offset!");
static_assert(offsetof(FMachineColorPreset, DriverId) == 0x00007A, "Member 'FMachineColorPreset::DriverId' has a wrong offset!");

// ScriptStruct UNION.GroupColorIdToMachineColorPresetId
// 0x0008 (0x0010 - 0x0008)
struct FGroupColorIdToMachineColorPresetId final : public FTableRowBase
{
public:
	EGroupColorId                                 GroupColorID;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineColorPresetId                         MachineColorPresetId;                              // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroupColorIdToMachineColorPresetId) == 0x000008, "Wrong alignment on FGroupColorIdToMachineColorPresetId");
static_assert(sizeof(FGroupColorIdToMachineColorPresetId) == 0x000010, "Wrong size on FGroupColorIdToMachineColorPresetId");
static_assert(offsetof(FGroupColorIdToMachineColorPresetId, GroupColorID) == 0x000008, "Member 'FGroupColorIdToMachineColorPresetId::GroupColorID' has a wrong offset!");
static_assert(offsetof(FGroupColorIdToMachineColorPresetId, MachineColorPresetId) == 0x000009, "Member 'FGroupColorIdToMachineColorPresetId::MachineColorPresetId' has a wrong offset!");

// ScriptStruct UNION.MachineBakeAssetData
// 0x00A0 (0x00A8 - 0x0008)
struct FMachineBakeAssetData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMaterialInstance>       BaseMaterialInstance;                              // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       BaseMaterialInstancePP;                            // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       BaseMaterialInstance2;                             // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       BaseMaterialInstancePP2;                           // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineBakeAssetData) == 0x000008, "Wrong alignment on FMachineBakeAssetData");
static_assert(sizeof(FMachineBakeAssetData) == 0x0000A8, "Wrong size on FMachineBakeAssetData");
static_assert(offsetof(FMachineBakeAssetData, BaseMaterialInstance) == 0x000008, "Member 'FMachineBakeAssetData::BaseMaterialInstance' has a wrong offset!");
static_assert(offsetof(FMachineBakeAssetData, BaseMaterialInstancePP) == 0x000030, "Member 'FMachineBakeAssetData::BaseMaterialInstancePP' has a wrong offset!");
static_assert(offsetof(FMachineBakeAssetData, BaseMaterialInstance2) == 0x000058, "Member 'FMachineBakeAssetData::BaseMaterialInstance2' has a wrong offset!");
static_assert(offsetof(FMachineBakeAssetData, BaseMaterialInstancePP2) == 0x000080, "Member 'FMachineBakeAssetData::BaseMaterialInstancePP2' has a wrong offset!");

// ScriptStruct UNION.NiagaraComponentArray
// 0x0010 (0x0010 - 0x0000)
struct FNiagaraComponentArray final
{
public:
	TArray<class UNiagaraComponent*>              NiagaraComponents;                                 // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNiagaraComponentArray) == 0x000008, "Wrong alignment on FNiagaraComponentArray");
static_assert(sizeof(FNiagaraComponentArray) == 0x000010, "Wrong size on FNiagaraComponentArray");
static_assert(offsetof(FNiagaraComponentArray, NiagaraComponents) == 0x000000, "Member 'FNiagaraComponentArray::NiagaraComponents' has a wrong offset!");

// ScriptStruct UNION.OptimizedMeshEffectGroup
// 0x0010 (0x0010 - 0x0000)
struct FOptimizedMeshEffectGroup final
{
public:
	TArray<class UOptimizedMeshEffect*>           MeshEffects;                                       // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimizedMeshEffectGroup) == 0x000008, "Wrong alignment on FOptimizedMeshEffectGroup");
static_assert(sizeof(FOptimizedMeshEffectGroup) == 0x000010, "Wrong size on FOptimizedMeshEffectGroup");
static_assert(offsetof(FOptimizedMeshEffectGroup, MeshEffects) == 0x000000, "Member 'FOptimizedMeshEffectGroup::MeshEffects' has a wrong offset!");

// ScriptStruct UNION.OptimizedMeshEffectArray
// 0x0010 (0x0010 - 0x0000)
struct FOptimizedMeshEffectArray final
{
public:
	TArray<struct FOptimizedMeshEffectGroup>      Groups;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimizedMeshEffectArray) == 0x000008, "Wrong alignment on FOptimizedMeshEffectArray");
static_assert(sizeof(FOptimizedMeshEffectArray) == 0x000010, "Wrong size on FOptimizedMeshEffectArray");
static_assert(offsetof(FOptimizedMeshEffectArray, Groups) == 0x000000, "Member 'FOptimizedMeshEffectArray::Groups' has a wrong offset!");

// ScriptStruct UNION.NiagaraCachedInfo
// 0x0018 (0x0018 - 0x0000)
struct FNiagaraCachedInfo final
{
public:
	int32                                         EffectType;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        AttachComponent;                                   // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNiagaraCachedInfo) == 0x000008, "Wrong alignment on FNiagaraCachedInfo");
static_assert(sizeof(FNiagaraCachedInfo) == 0x000018, "Wrong size on FNiagaraCachedInfo");
static_assert(offsetof(FNiagaraCachedInfo, EffectType) == 0x000000, "Member 'FNiagaraCachedInfo::EffectType' has a wrong offset!");
static_assert(offsetof(FNiagaraCachedInfo, AttachComponent) == 0x000008, "Member 'FNiagaraCachedInfo::AttachComponent' has a wrong offset!");

// ScriptStruct UNION.MachineIconCaptureData
// 0x0068 (0x0070 - 0x0008)
struct FMachineIconCaptureData final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineIconCaptureData) == 0x000010, "Wrong alignment on FMachineIconCaptureData");
static_assert(sizeof(FMachineIconCaptureData) == 0x000070, "Wrong size on FMachineIconCaptureData");
static_assert(offsetof(FMachineIconCaptureData, Transform) == 0x000010, "Member 'FMachineIconCaptureData::Transform' has a wrong offset!");

// ScriptStruct UNION.MachineMaterialAnimationPackInfo
// 0x0018 (0x0018 - 0x0000)
struct FMachineMaterialAnimationPackInfo final
{
public:
	TArray<int32>                                 AnimationPlayerIndex;                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDeactive;                                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleFreshlyPaint                          FreshlyPaintColor;                                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachineMaterialAnimationPackInfo) == 0x000008, "Wrong alignment on FMachineMaterialAnimationPackInfo");
static_assert(sizeof(FMachineMaterialAnimationPackInfo) == 0x000018, "Wrong size on FMachineMaterialAnimationPackInfo");
static_assert(offsetof(FMachineMaterialAnimationPackInfo, AnimationPlayerIndex) == 0x000000, "Member 'FMachineMaterialAnimationPackInfo::AnimationPlayerIndex' has a wrong offset!");
static_assert(offsetof(FMachineMaterialAnimationPackInfo, bActive) == 0x000010, "Member 'FMachineMaterialAnimationPackInfo::bActive' has a wrong offset!");
static_assert(offsetof(FMachineMaterialAnimationPackInfo, bAutoDeactive) == 0x000011, "Member 'FMachineMaterialAnimationPackInfo::bAutoDeactive' has a wrong offset!");
static_assert(offsetof(FMachineMaterialAnimationPackInfo, FreshlyPaintColor) == 0x000012, "Member 'FMachineMaterialAnimationPackInfo::FreshlyPaintColor' has a wrong offset!");

// ScriptStruct UNION.MachinePartsScrollBoxItemData
// 0x0060 (0x0060 - 0x0000)
struct FMachinePartsScrollBoxItemData final
{
public:
	struct FMachinePartsUIData                    PartsData;                                         // 0x0000(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachinePartsScrollBoxItemData) == 0x000008, "Wrong alignment on FMachinePartsScrollBoxItemData");
static_assert(sizeof(FMachinePartsScrollBoxItemData) == 0x000060, "Wrong size on FMachinePartsScrollBoxItemData");
static_assert(offsetof(FMachinePartsScrollBoxItemData, PartsData) == 0x000000, "Member 'FMachinePartsScrollBoxItemData::PartsData' has a wrong offset!");
static_assert(offsetof(FMachinePartsScrollBoxItemData, bIsSelected) == 0x000058, "Member 'FMachinePartsScrollBoxItemData::bIsSelected' has a wrong offset!");

// ScriptStruct UNION.MachinePartsResource
// 0x0010 (0x0010 - 0x0000)
struct FMachinePartsResource final
{
public:
	class UMachinePartsDataAsset*                 Parts;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMachineTirePartsDataAsset*             TireParts;                                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachinePartsResource) == 0x000008, "Wrong alignment on FMachinePartsResource");
static_assert(sizeof(FMachinePartsResource) == 0x000010, "Wrong size on FMachinePartsResource");
static_assert(offsetof(FMachinePartsResource, Parts) == 0x000000, "Member 'FMachinePartsResource::Parts' has a wrong offset!");
static_assert(offsetof(FMachinePartsResource, TireParts) == 0x000008, "Member 'FMachinePartsResource::TireParts' has a wrong offset!");

// ScriptStruct UNION.MachineStickerSelectItemData
// 0x0010 (0x0010 - 0x0000)
struct FMachineStickerSelectItemData final
{
public:
	class UTexture2D*                             StickerDesignTexture;                              // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMachineStickerSelectItemData) == 0x000008, "Wrong alignment on FMachineStickerSelectItemData");
static_assert(sizeof(FMachineStickerSelectItemData) == 0x000010, "Wrong size on FMachineStickerSelectItemData");
static_assert(offsetof(FMachineStickerSelectItemData, StickerDesignTexture) == 0x000000, "Member 'FMachineStickerSelectItemData::StickerDesignTexture' has a wrong offset!");
static_assert(offsetof(FMachineStickerSelectItemData, bIsSelected) == 0x000008, "Member 'FMachineStickerSelectItemData::bIsSelected' has a wrong offset!");
static_assert(offsetof(FMachineStickerSelectItemData, bIsNew) == 0x000009, "Member 'FMachineStickerSelectItemData::bIsNew' has a wrong offset!");

// ScriptStruct UNION.MachineTypeData
// 0x0018 (0x0020 - 0x0008)
struct FMachineTypeData final : public FTableRowBase
{
public:
	ECarStatusType                                Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineTypeData) == 0x000008, "Wrong alignment on FMachineTypeData");
static_assert(sizeof(FMachineTypeData) == 0x000020, "Wrong size on FMachineTypeData");
static_assert(offsetof(FMachineTypeData, Type) == 0x000008, "Member 'FMachineTypeData::Type' has a wrong offset!");
static_assert(offsetof(FMachineTypeData, Name) == 0x000010, "Member 'FMachineTypeData::Name' has a wrong offset!");

// ScriptStruct UNION.PlayerNameContext
// 0x0020 (0x0020 - 0x0000)
struct FPlayerNameContext final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwner;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRival;                                           // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCom;                                             // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppSupportedPlatform                         PlatformType;                                      // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlockPlayerState                             BlockType;                                         // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerNameContext) == 0x000008, "Wrong alignment on FPlayerNameContext");
static_assert(sizeof(FPlayerNameContext) == 0x000020, "Wrong size on FPlayerNameContext");
static_assert(offsetof(FPlayerNameContext, Rank) == 0x000000, "Member 'FPlayerNameContext::Rank' has a wrong offset!");
static_assert(offsetof(FPlayerNameContext, Name) == 0x000008, "Member 'FPlayerNameContext::Name' has a wrong offset!");
static_assert(offsetof(FPlayerNameContext, IsOwner) == 0x000018, "Member 'FPlayerNameContext::IsOwner' has a wrong offset!");
static_assert(offsetof(FPlayerNameContext, IsRival) == 0x000019, "Member 'FPlayerNameContext::IsRival' has a wrong offset!");
static_assert(offsetof(FPlayerNameContext, IsCom) == 0x00001A, "Member 'FPlayerNameContext::IsCom' has a wrong offset!");
static_assert(offsetof(FPlayerNameContext, PlatformType) == 0x00001B, "Member 'FPlayerNameContext::PlatformType' has a wrong offset!");
static_assert(offsetof(FPlayerNameContext, BlockType) == 0x00001C, "Member 'FPlayerNameContext::BlockType' has a wrong offset!");

// ScriptStruct UNION.OnlineSettingPlayerIconBgColorDataTableRow
// 0x0018 (0x0020 - 0x0008)
struct FOnlineSettingPlayerIconBgColorDataTableRow final : public FTableRowBase
{
public:
	int32                                         colorId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnlineSettingPlayerIconBgColorDataTableRow) == 0x000008, "Wrong alignment on FOnlineSettingPlayerIconBgColorDataTableRow");
static_assert(sizeof(FOnlineSettingPlayerIconBgColorDataTableRow) == 0x000020, "Wrong size on FOnlineSettingPlayerIconBgColorDataTableRow");
static_assert(offsetof(FOnlineSettingPlayerIconBgColorDataTableRow, colorId) == 0x000008, "Member 'FOnlineSettingPlayerIconBgColorDataTableRow::colorId' has a wrong offset!");
static_assert(offsetof(FOnlineSettingPlayerIconBgColorDataTableRow, IsEnabled) == 0x00000C, "Member 'FOnlineSettingPlayerIconBgColorDataTableRow::IsEnabled' has a wrong offset!");
static_assert(offsetof(FOnlineSettingPlayerIconBgColorDataTableRow, Color) == 0x000010, "Member 'FOnlineSettingPlayerIconBgColorDataTableRow::Color' has a wrong offset!");

// ScriptStruct UNION.OptionCategoryTableRow
// 0x0018 (0x0020 - 0x0008)
struct FOptionCategoryTableRow final : public FTableRowBase
{
public:
	EOptionCategory                               Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionCategoryTableRow) == 0x000008, "Wrong alignment on FOptionCategoryTableRow");
static_assert(sizeof(FOptionCategoryTableRow) == 0x000020, "Wrong size on FOptionCategoryTableRow");
static_assert(offsetof(FOptionCategoryTableRow, Category) == 0x000008, "Member 'FOptionCategoryTableRow::Category' has a wrong offset!");
static_assert(offsetof(FOptionCategoryTableRow, Title) == 0x000010, "Member 'FOptionCategoryTableRow::Title' has a wrong offset!");

// ScriptStruct UNION.OptionCellGraphicTableRow
// 0x0040 (0x0048 - 0x0008)
struct FOptionCellGraphicTableRow final : public FTableRowBase
{
public:
	EOptionGraphicCell                            OptionKind;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionValidPlatform                          Platform;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionCellType                               CellType;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CellTitle;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CellGuide;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ButtonText;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EOptionCategory                               SubCategory;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptionCellGraphicTableRow) == 0x000008, "Wrong alignment on FOptionCellGraphicTableRow");
static_assert(sizeof(FOptionCellGraphicTableRow) == 0x000048, "Wrong size on FOptionCellGraphicTableRow");
static_assert(offsetof(FOptionCellGraphicTableRow, OptionKind) == 0x000008, "Member 'FOptionCellGraphicTableRow::OptionKind' has a wrong offset!");
static_assert(offsetof(FOptionCellGraphicTableRow, Platform) == 0x000009, "Member 'FOptionCellGraphicTableRow::Platform' has a wrong offset!");
static_assert(offsetof(FOptionCellGraphicTableRow, CellType) == 0x00000A, "Member 'FOptionCellGraphicTableRow::CellType' has a wrong offset!");
static_assert(offsetof(FOptionCellGraphicTableRow, CellTitle) == 0x000010, "Member 'FOptionCellGraphicTableRow::CellTitle' has a wrong offset!");
static_assert(offsetof(FOptionCellGraphicTableRow, CellGuide) == 0x000020, "Member 'FOptionCellGraphicTableRow::CellGuide' has a wrong offset!");
static_assert(offsetof(FOptionCellGraphicTableRow, ButtonText) == 0x000030, "Member 'FOptionCellGraphicTableRow::ButtonText' has a wrong offset!");
static_assert(offsetof(FOptionCellGraphicTableRow, SubCategory) == 0x000040, "Member 'FOptionCellGraphicTableRow::SubCategory' has a wrong offset!");

// ScriptStruct UNION.OptionCellControlTableRow
// 0x0098 (0x00A0 - 0x0008)
struct FOptionCellControlTableRow final : public FTableRowBase
{
public:
	EOptionControlCell                            OptionKind;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionValidPlatform                          Platform;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionCellType                               CellType;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CellTitle;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CellGuide;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ButtonText;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EOptionCategory                               SubCategory;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GaugeMin;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GaugeMax;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseGuideTextMap;                                   // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EAppSupportedPlatform, class FText>      CellGuideTextMap;                                  // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionCellControlTableRow) == 0x000008, "Wrong alignment on FOptionCellControlTableRow");
static_assert(sizeof(FOptionCellControlTableRow) == 0x0000A0, "Wrong size on FOptionCellControlTableRow");
static_assert(offsetof(FOptionCellControlTableRow, OptionKind) == 0x000008, "Member 'FOptionCellControlTableRow::OptionKind' has a wrong offset!");
static_assert(offsetof(FOptionCellControlTableRow, Platform) == 0x000009, "Member 'FOptionCellControlTableRow::Platform' has a wrong offset!");
static_assert(offsetof(FOptionCellControlTableRow, CellType) == 0x00000A, "Member 'FOptionCellControlTableRow::CellType' has a wrong offset!");
static_assert(offsetof(FOptionCellControlTableRow, CellTitle) == 0x000010, "Member 'FOptionCellControlTableRow::CellTitle' has a wrong offset!");
static_assert(offsetof(FOptionCellControlTableRow, CellGuide) == 0x000020, "Member 'FOptionCellControlTableRow::CellGuide' has a wrong offset!");
static_assert(offsetof(FOptionCellControlTableRow, ButtonText) == 0x000030, "Member 'FOptionCellControlTableRow::ButtonText' has a wrong offset!");
static_assert(offsetof(FOptionCellControlTableRow, SubCategory) == 0x000040, "Member 'FOptionCellControlTableRow::SubCategory' has a wrong offset!");
static_assert(offsetof(FOptionCellControlTableRow, GaugeMin) == 0x000044, "Member 'FOptionCellControlTableRow::GaugeMin' has a wrong offset!");
static_assert(offsetof(FOptionCellControlTableRow, GaugeMax) == 0x000048, "Member 'FOptionCellControlTableRow::GaugeMax' has a wrong offset!");
static_assert(offsetof(FOptionCellControlTableRow, UseGuideTextMap) == 0x00004C, "Member 'FOptionCellControlTableRow::UseGuideTextMap' has a wrong offset!");
static_assert(offsetof(FOptionCellControlTableRow, CellGuideTextMap) == 0x000050, "Member 'FOptionCellControlTableRow::CellGuideTextMap' has a wrong offset!");

// ScriptStruct UNION.OptionCellLanguageTableRow
// 0x0028 (0x0030 - 0x0008)
struct FOptionCellLanguageTableRow final : public FTableRowBase
{
public:
	EOptionLanguageCell                           OptionKind;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionValidPlatform                          Platform;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionCellType                               CellType;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CellTitle;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CellGuide;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionCellLanguageTableRow) == 0x000008, "Wrong alignment on FOptionCellLanguageTableRow");
static_assert(sizeof(FOptionCellLanguageTableRow) == 0x000030, "Wrong size on FOptionCellLanguageTableRow");
static_assert(offsetof(FOptionCellLanguageTableRow, OptionKind) == 0x000008, "Member 'FOptionCellLanguageTableRow::OptionKind' has a wrong offset!");
static_assert(offsetof(FOptionCellLanguageTableRow, Platform) == 0x000009, "Member 'FOptionCellLanguageTableRow::Platform' has a wrong offset!");
static_assert(offsetof(FOptionCellLanguageTableRow, CellType) == 0x00000A, "Member 'FOptionCellLanguageTableRow::CellType' has a wrong offset!");
static_assert(offsetof(FOptionCellLanguageTableRow, CellTitle) == 0x000010, "Member 'FOptionCellLanguageTableRow::CellTitle' has a wrong offset!");
static_assert(offsetof(FOptionCellLanguageTableRow, CellGuide) == 0x000020, "Member 'FOptionCellLanguageTableRow::CellGuide' has a wrong offset!");

// ScriptStruct UNION.OptionCellOnlineTableRow
// 0x0028 (0x0030 - 0x0008)
struct FOptionCellOnlineTableRow final : public FTableRowBase
{
public:
	EOptionOnlineCell                             OptionKind;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionValidPlatform                          Platform;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionCellType                               CellType;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CellTitle;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CellGuide;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionCellOnlineTableRow) == 0x000008, "Wrong alignment on FOptionCellOnlineTableRow");
static_assert(sizeof(FOptionCellOnlineTableRow) == 0x000030, "Wrong size on FOptionCellOnlineTableRow");
static_assert(offsetof(FOptionCellOnlineTableRow, OptionKind) == 0x000008, "Member 'FOptionCellOnlineTableRow::OptionKind' has a wrong offset!");
static_assert(offsetof(FOptionCellOnlineTableRow, Platform) == 0x000009, "Member 'FOptionCellOnlineTableRow::Platform' has a wrong offset!");
static_assert(offsetof(FOptionCellOnlineTableRow, CellType) == 0x00000A, "Member 'FOptionCellOnlineTableRow::CellType' has a wrong offset!");
static_assert(offsetof(FOptionCellOnlineTableRow, CellTitle) == 0x000010, "Member 'FOptionCellOnlineTableRow::CellTitle' has a wrong offset!");
static_assert(offsetof(FOptionCellOnlineTableRow, CellGuide) == 0x000020, "Member 'FOptionCellOnlineTableRow::CellGuide' has a wrong offset!");

// ScriptStruct UNION.AppItemDetailInfo
// 0x0020 (0x0028 - 0x0008)
struct FAppItemDetailInfo final : public FTableRowBase
{
public:
	class FText                                   ItemName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ItemDescription;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppItemDetailInfo) == 0x000008, "Wrong alignment on FAppItemDetailInfo");
static_assert(sizeof(FAppItemDetailInfo) == 0x000028, "Wrong size on FAppItemDetailInfo");
static_assert(offsetof(FAppItemDetailInfo, ItemName) == 0x000008, "Member 'FAppItemDetailInfo::ItemName' has a wrong offset!");
static_assert(offsetof(FAppItemDetailInfo, ItemDescription) == 0x000018, "Member 'FAppItemDetailInfo::ItemDescription' has a wrong offset!");

// ScriptStruct UNION.VoiceInteractionStruct
// 0x0058 (0x0060 - 0x0008)
struct FVoiceInteractionStruct final : public FTableRowBase
{
public:
	EDriverId                                     VoiceDriver;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EDriverId, class USoundAtomCue*>         VoiceMap;                                          // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoiceInteractionStruct) == 0x000008, "Wrong alignment on FVoiceInteractionStruct");
static_assert(sizeof(FVoiceInteractionStruct) == 0x000060, "Wrong size on FVoiceInteractionStruct");
static_assert(offsetof(FVoiceInteractionStruct, VoiceDriver) == 0x000008, "Member 'FVoiceInteractionStruct::VoiceDriver' has a wrong offset!");
static_assert(offsetof(FVoiceInteractionStruct, VoiceMap) == 0x000010, "Member 'FVoiceInteractionStruct::VoiceMap' has a wrong offset!");

// ScriptStruct UNION.LevelUpTable
// 0x0008 (0x0010 - 0x0008)
struct FLevelUpTable final : public FTableRowBase
{
public:
	int32                                         LevelRangeMax;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RSR;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelUpTable) == 0x000008, "Wrong alignment on FLevelUpTable");
static_assert(sizeof(FLevelUpTable) == 0x000010, "Wrong size on FLevelUpTable");
static_assert(offsetof(FLevelUpTable, LevelRangeMax) == 0x000008, "Member 'FLevelUpTable::LevelRangeMax' has a wrong offset!");
static_assert(offsetof(FLevelUpTable, RSR) == 0x00000C, "Member 'FLevelUpTable::RSR' has a wrong offset!");

// ScriptStruct UNION.TutorialTextDispTime
// 0x0020 (0x0020 - 0x0000)
struct FTutorialTextDispTime final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endTime;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Controller;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTutorialTextDispTime) == 0x000008, "Wrong alignment on FTutorialTextDispTime");
static_assert(sizeof(FTutorialTextDispTime) == 0x000020, "Wrong size on FTutorialTextDispTime");
static_assert(offsetof(FTutorialTextDispTime, StartTime) == 0x000000, "Member 'FTutorialTextDispTime::StartTime' has a wrong offset!");
static_assert(offsetof(FTutorialTextDispTime, endTime) == 0x000004, "Member 'FTutorialTextDispTime::endTime' has a wrong offset!");
static_assert(offsetof(FTutorialTextDispTime, Text) == 0x000008, "Member 'FTutorialTextDispTime::Text' has a wrong offset!");
static_assert(offsetof(FTutorialTextDispTime, Controller) == 0x000018, "Member 'FTutorialTextDispTime::Controller' has a wrong offset!");

// ScriptStruct UNION.StageTravelRingData
// 0x0168 (0x0168 - 0x0000)
struct FStageTravelRingData final
{
public:
	TSoftObjectPtr<class UWorld>                  TravelRingLevel;                                   // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  MainEnterTravelRingLevel;                          // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  MainEnterTravelRingLevel_ForMultiPlayer;           // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  MainEnterNoEffectTravelRingLevel;                  // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  MainEnterNoEffectTravelRingLevel_ForMultiPlayer;   // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  MainExitNoEffectTravelRingLevel;                   // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  MainExitNoEffectTravelRingLevel_ForMultiPlayer;    // 0x00F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  AnotherTravelRingLevel;                            // 0x0118(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  AnotherTravelRingLevel_ForMultiPlayer;             // 0x0140(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStageTravelRingData) == 0x000008, "Wrong alignment on FStageTravelRingData");
static_assert(sizeof(FStageTravelRingData) == 0x000168, "Wrong size on FStageTravelRingData");
static_assert(offsetof(FStageTravelRingData, TravelRingLevel) == 0x000000, "Member 'FStageTravelRingData::TravelRingLevel' has a wrong offset!");
static_assert(offsetof(FStageTravelRingData, MainEnterTravelRingLevel) == 0x000028, "Member 'FStageTravelRingData::MainEnterTravelRingLevel' has a wrong offset!");
static_assert(offsetof(FStageTravelRingData, MainEnterTravelRingLevel_ForMultiPlayer) == 0x000050, "Member 'FStageTravelRingData::MainEnterTravelRingLevel_ForMultiPlayer' has a wrong offset!");
static_assert(offsetof(FStageTravelRingData, MainEnterNoEffectTravelRingLevel) == 0x000078, "Member 'FStageTravelRingData::MainEnterNoEffectTravelRingLevel' has a wrong offset!");
static_assert(offsetof(FStageTravelRingData, MainEnterNoEffectTravelRingLevel_ForMultiPlayer) == 0x0000A0, "Member 'FStageTravelRingData::MainEnterNoEffectTravelRingLevel_ForMultiPlayer' has a wrong offset!");
static_assert(offsetof(FStageTravelRingData, MainExitNoEffectTravelRingLevel) == 0x0000C8, "Member 'FStageTravelRingData::MainExitNoEffectTravelRingLevel' has a wrong offset!");
static_assert(offsetof(FStageTravelRingData, MainExitNoEffectTravelRingLevel_ForMultiPlayer) == 0x0000F0, "Member 'FStageTravelRingData::MainExitNoEffectTravelRingLevel_ForMultiPlayer' has a wrong offset!");
static_assert(offsetof(FStageTravelRingData, AnotherTravelRingLevel) == 0x000118, "Member 'FStageTravelRingData::AnotherTravelRingLevel' has a wrong offset!");
static_assert(offsetof(FStageTravelRingData, AnotherTravelRingLevel_ForMultiPlayer) == 0x000140, "Member 'FStageTravelRingData::AnotherTravelRingLevel_ForMultiPlayer' has a wrong offset!");

// ScriptStruct UNION.RaceCourseSubMapInfo
// 0x0050 (0x0050 - 0x0000)
struct FRaceCourseSubMapInfo final
{
public:
	TMap<EStageCourseMainSubMapInfo, struct FStageCourseMapParam> CourseMapUIParam;                  // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceCourseSubMapInfo) == 0x000008, "Wrong alignment on FRaceCourseSubMapInfo");
static_assert(sizeof(FRaceCourseSubMapInfo) == 0x000050, "Wrong size on FRaceCourseSubMapInfo");
static_assert(offsetof(FRaceCourseSubMapInfo, CourseMapUIParam) == 0x000000, "Member 'FRaceCourseSubMapInfo::CourseMapUIParam' has a wrong offset!");

// ScriptStruct UNION.ResultCameraParam
// 0x0030 (0x0030 - 0x0000)
struct FResultCameraParam final
{
public:
	struct FCameraStateParam                      StartUp;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraStateParam                      ProductionPlay;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraStateParam                      ProductionSwitch;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultCameraParam) == 0x000004, "Wrong alignment on FResultCameraParam");
static_assert(sizeof(FResultCameraParam) == 0x000030, "Wrong size on FResultCameraParam");
static_assert(offsetof(FResultCameraParam, StartUp) == 0x000000, "Member 'FResultCameraParam::StartUp' has a wrong offset!");
static_assert(offsetof(FResultCameraParam, ProductionPlay) == 0x000010, "Member 'FResultCameraParam::ProductionPlay' has a wrong offset!");
static_assert(offsetof(FResultCameraParam, ProductionSwitch) == 0x000020, "Member 'FResultCameraParam::ProductionSwitch' has a wrong offset!");

// ScriptStruct UNION.CeremonyMachineData
// 0x0080 (0x0080 - 0x0000)
struct FCeremonyMachineData final
{
public:
	EMachineId                                    MachineId;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUserMachineCustomizeData              CustomizeData;                                     // 0x0008(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCeremonyMachineData) == 0x000008, "Wrong alignment on FCeremonyMachineData");
static_assert(sizeof(FCeremonyMachineData) == 0x000080, "Wrong size on FCeremonyMachineData");
static_assert(offsetof(FCeremonyMachineData, MachineId) == 0x000000, "Member 'FCeremonyMachineData::MachineId' has a wrong offset!");
static_assert(offsetof(FCeremonyMachineData, CustomizeData) == 0x000008, "Member 'FCeremonyMachineData::CustomizeData' has a wrong offset!");

// ScriptStruct UNION.PartyResultRacer
// 0x0040 (0x0040 - 0x0000)
struct FPartyResultRacer final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         TeamNo;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIndex;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerNo;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankNo;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowTotalGoalTime;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         goalTime;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NowTotalPoint;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointAdd;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERateRank                                     RateRank;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyResultRacer) == 0x000008, "Wrong alignment on FPartyResultRacer");
static_assert(sizeof(FPartyResultRacer) == 0x000040, "Wrong size on FPartyResultRacer");
static_assert(offsetof(FPartyResultRacer, RacerIndex) == 0x000000, "Member 'FPartyResultRacer::RacerIndex' has a wrong offset!");
static_assert(offsetof(FPartyResultRacer, DriverId) == 0x000004, "Member 'FPartyResultRacer::DriverId' has a wrong offset!");
static_assert(offsetof(FPartyResultRacer, Name) == 0x000008, "Member 'FPartyResultRacer::Name' has a wrong offset!");
static_assert(offsetof(FPartyResultRacer, TeamNo) == 0x000018, "Member 'FPartyResultRacer::TeamNo' has a wrong offset!");
static_assert(offsetof(FPartyResultRacer, TeamIndex) == 0x00001C, "Member 'FPartyResultRacer::TeamIndex' has a wrong offset!");
static_assert(offsetof(FPartyResultRacer, PlayerNo) == 0x000020, "Member 'FPartyResultRacer::PlayerNo' has a wrong offset!");
static_assert(offsetof(FPartyResultRacer, RankNo) == 0x000024, "Member 'FPartyResultRacer::RankNo' has a wrong offset!");
static_assert(offsetof(FPartyResultRacer, NowTotalGoalTime) == 0x000028, "Member 'FPartyResultRacer::NowTotalGoalTime' has a wrong offset!");
static_assert(offsetof(FPartyResultRacer, goalTime) == 0x00002C, "Member 'FPartyResultRacer::goalTime' has a wrong offset!");
static_assert(offsetof(FPartyResultRacer, NowTotalPoint) == 0x000030, "Member 'FPartyResultRacer::NowTotalPoint' has a wrong offset!");
static_assert(offsetof(FPartyResultRacer, PointAdd) == 0x000034, "Member 'FPartyResultRacer::PointAdd' has a wrong offset!");
static_assert(offsetof(FPartyResultRacer, RateRank) == 0x000038, "Member 'FPartyResultRacer::RateRank' has a wrong offset!");

// ScriptStruct UNION.PlayerGrandPrixData
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FPlayerGrandPrixData final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerGrandPrixData) == 0x000004, "Wrong alignment on FPlayerGrandPrixData");
static_assert(sizeof(FPlayerGrandPrixData) == 0x00000C, "Wrong size on FPlayerGrandPrixData");

// ScriptStruct UNION.RateRankUpExp
// 0x0018 (0x0020 - 0x0008)
struct FRateRankUpExp final : public FTableRowBase
{
public:
	ERateRank                                     Rank;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Exp;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardType                                   rewardType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         rewardId;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRateRankUpExp) == 0x000008, "Wrong alignment on FRateRankUpExp");
static_assert(sizeof(FRateRankUpExp) == 0x000020, "Wrong size on FRateRankUpExp");
static_assert(offsetof(FRateRankUpExp, Rank) == 0x000008, "Member 'FRateRankUpExp::Rank' has a wrong offset!");
static_assert(offsetof(FRateRankUpExp, Exp) == 0x00000C, "Member 'FRateRankUpExp::Exp' has a wrong offset!");
static_assert(offsetof(FRateRankUpExp, rewardType) == 0x000010, "Member 'FRateRankUpExp::rewardType' has a wrong offset!");
static_assert(offsetof(FRateRankUpExp, rewardId) == 0x000014, "Member 'FRateRankUpExp::rewardId' has a wrong offset!");
static_assert(offsetof(FRateRankUpExp, Num) == 0x000018, "Member 'FRateRankUpExp::Num' has a wrong offset!");

// ScriptStruct UNION.RateRankUIData
// 0x000C (0x000C - 0x0000)
struct FRateRankUIData final
{
public:
	float                                         RateUp;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RateDown;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERateRank                                     RateRankUp;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERateRank                                     RateRankDown;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRateRankUIData) == 0x000004, "Wrong alignment on FRateRankUIData");
static_assert(sizeof(FRateRankUIData) == 0x00000C, "Wrong size on FRateRankUIData");
static_assert(offsetof(FRateRankUIData, RateUp) == 0x000000, "Member 'FRateRankUIData::RateUp' has a wrong offset!");
static_assert(offsetof(FRateRankUIData, RateDown) == 0x000004, "Member 'FRateRankUIData::RateDown' has a wrong offset!");
static_assert(offsetof(FRateRankUIData, RateRankUp) == 0x000008, "Member 'FRateRankUIData::RateRankUp' has a wrong offset!");
static_assert(offsetof(FRateRankUIData, RateRankDown) == 0x000009, "Member 'FRateRankUIData::RateRankDown' has a wrong offset!");

// ScriptStruct UNION.RateRankBonus
// 0x0018 (0x0018 - 0x0000)
struct FRateRankBonus final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRateRankBonus) == 0x000008, "Wrong alignment on FRateRankBonus");
static_assert(sizeof(FRateRankBonus) == 0x000018, "Wrong size on FRateRankBonus");
static_assert(offsetof(FRateRankBonus, Text) == 0x000000, "Member 'FRateRankBonus::Text' has a wrong offset!");
static_assert(offsetof(FRateRankBonus, Point) == 0x000010, "Member 'FRateRankBonus::Point' has a wrong offset!");

// ScriptStruct UNION.RateRankBonusList
// 0x0010 (0x0010 - 0x0000)
struct FRateRankBonusList final
{
public:
	TArray<struct FRateRankBonus>                 list;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRateRankBonusList) == 0x000008, "Wrong alignment on FRateRankBonusList");
static_assert(sizeof(FRateRankBonusList) == 0x000010, "Wrong size on FRateRankBonusList");
static_assert(offsetof(FRateRankBonusList, list) == 0x000000, "Member 'FRateRankBonusList::list' has a wrong offset!");

// ScriptStruct UNION.RivalCameraCustomParam
// 0x0050 (0x0050 - 0x0000)
struct FRivalCameraCustomParam final
{
public:
	TMap<ECarStatusType, struct FRaceCameraParam> CarStatusParam;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRivalCameraCustomParam) == 0x000008, "Wrong alignment on FRivalCameraCustomParam");
static_assert(sizeof(FRivalCameraCustomParam) == 0x000050, "Wrong size on FRivalCameraCustomParam");
static_assert(offsetof(FRivalCameraCustomParam, CarStatusParam) == 0x000000, "Member 'FRivalCameraCustomParam::CarStatusParam' has a wrong offset!");

// ScriptStruct UNION.RewardAchievementTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRewardAchievementTableRow final : public FTableRowBase
{
public:
	ERewardAchievementType                        RewardAchievementType;                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRewardAchievementData>         RewardAchievementDataArray;                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardAchievementTableRow) == 0x000008, "Wrong alignment on FRewardAchievementTableRow");
static_assert(sizeof(FRewardAchievementTableRow) == 0x000020, "Wrong size on FRewardAchievementTableRow");
static_assert(offsetof(FRewardAchievementTableRow, RewardAchievementType) == 0x000008, "Member 'FRewardAchievementTableRow::RewardAchievementType' has a wrong offset!");
static_assert(offsetof(FRewardAchievementTableRow, RewardAchievementDataArray) == 0x000010, "Member 'FRewardAchievementTableRow::RewardAchievementDataArray' has a wrong offset!");

// ScriptStruct UNION.RewardAchievementDriverTableRow
// 0x0018 (0x0020 - 0x0008)
struct FRewardAchievementDriverTableRow final : public FTableRowBase
{
public:
	EDriverId                                     TargetDriver;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERewardAchievementType>                RewardAchievementType;                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardAchievementDriverTableRow) == 0x000008, "Wrong alignment on FRewardAchievementDriverTableRow");
static_assert(sizeof(FRewardAchievementDriverTableRow) == 0x000020, "Wrong size on FRewardAchievementDriverTableRow");
static_assert(offsetof(FRewardAchievementDriverTableRow, TargetDriver) == 0x000008, "Member 'FRewardAchievementDriverTableRow::TargetDriver' has a wrong offset!");
static_assert(offsetof(FRewardAchievementDriverTableRow, RewardAchievementType) == 0x000010, "Member 'FRewardAchievementDriverTableRow::RewardAchievementType' has a wrong offset!");

// ScriptStruct UNION.RivalTeamData
// 0x00B8 (0x00C0 - 0x0008)
struct FRivalTeamData final : public FTableRowBase
{
public:
	class FText                                   TeamName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         NumMainMember;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     MemberDriverId1;                                   // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     MemberDriverId2;                                   // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     MemberDriverId3;                                   // 0x001E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     MemberDriverId4;                                   // 0x001F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     MemberDriverId5;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     MemberDriverId6;                                   // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    MachineFrontPartId;                                // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    MachineRearPartId;                                 // 0x0023(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    MachineTireId;                                     // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineColorPresetId                         MachineColorPresetId;                              // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamLevel;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppearanceOrder;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardWinCount1;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardType                                   RewardType1;                                       // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardId1;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumReward1;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardWinCount2;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardType                                   RewardType2;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardId2;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumReward2;                                        // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardWinCount3;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardType                                   RewardType3;                                       // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardId3;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumReward3;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RewardConditionText;                               // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RuleName;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FUserGadgetPresetData                  FixedGadgetPreset;                                 // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRivalTeamData) == 0x000008, "Wrong alignment on FRivalTeamData");
static_assert(sizeof(FRivalTeamData) == 0x0000C0, "Wrong size on FRivalTeamData");
static_assert(offsetof(FRivalTeamData, TeamName) == 0x000008, "Member 'FRivalTeamData::TeamName' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, NumMainMember) == 0x000018, "Member 'FRivalTeamData::NumMainMember' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, MemberDriverId1) == 0x00001C, "Member 'FRivalTeamData::MemberDriverId1' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, MemberDriverId2) == 0x00001D, "Member 'FRivalTeamData::MemberDriverId2' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, MemberDriverId3) == 0x00001E, "Member 'FRivalTeamData::MemberDriverId3' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, MemberDriverId4) == 0x00001F, "Member 'FRivalTeamData::MemberDriverId4' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, MemberDriverId5) == 0x000020, "Member 'FRivalTeamData::MemberDriverId5' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, MemberDriverId6) == 0x000021, "Member 'FRivalTeamData::MemberDriverId6' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, MachineFrontPartId) == 0x000022, "Member 'FRivalTeamData::MachineFrontPartId' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, MachineRearPartId) == 0x000023, "Member 'FRivalTeamData::MachineRearPartId' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, MachineTireId) == 0x000024, "Member 'FRivalTeamData::MachineTireId' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, MachineColorPresetId) == 0x000025, "Member 'FRivalTeamData::MachineColorPresetId' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, TeamLevel) == 0x000028, "Member 'FRivalTeamData::TeamLevel' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, AppearanceOrder) == 0x00002C, "Member 'FRivalTeamData::AppearanceOrder' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, RewardWinCount1) == 0x000030, "Member 'FRivalTeamData::RewardWinCount1' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, RewardType1) == 0x000034, "Member 'FRivalTeamData::RewardType1' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, RewardId1) == 0x000038, "Member 'FRivalTeamData::RewardId1' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, NumReward1) == 0x000048, "Member 'FRivalTeamData::NumReward1' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, RewardWinCount2) == 0x00004C, "Member 'FRivalTeamData::RewardWinCount2' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, RewardType2) == 0x000050, "Member 'FRivalTeamData::RewardType2' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, RewardId2) == 0x000058, "Member 'FRivalTeamData::RewardId2' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, NumReward2) == 0x000068, "Member 'FRivalTeamData::NumReward2' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, RewardWinCount3) == 0x00006C, "Member 'FRivalTeamData::RewardWinCount3' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, RewardType3) == 0x000070, "Member 'FRivalTeamData::RewardType3' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, RewardId3) == 0x000078, "Member 'FRivalTeamData::RewardId3' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, NumReward3) == 0x000088, "Member 'FRivalTeamData::NumReward3' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, RewardConditionText) == 0x000090, "Member 'FRivalTeamData::RewardConditionText' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, RuleName) == 0x0000A0, "Member 'FRivalTeamData::RuleName' has a wrong offset!");
static_assert(offsetof(FRivalTeamData, FixedGadgetPreset) == 0x0000B0, "Member 'FRivalTeamData::FixedGadgetPreset' has a wrong offset!");

// ScriptStruct UNION.StaffrollBackgroundScreenData
// 0x0050 (0x0058 - 0x0008)
struct FStaffrollBackgroundScreenData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              ScreenTexture;                                     // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           SoundCue;                                          // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaffrollBackgroundScreenData) == 0x000008, "Wrong alignment on FStaffrollBackgroundScreenData");
static_assert(sizeof(FStaffrollBackgroundScreenData) == 0x000058, "Wrong size on FStaffrollBackgroundScreenData");
static_assert(offsetof(FStaffrollBackgroundScreenData, ScreenTexture) == 0x000008, "Member 'FStaffrollBackgroundScreenData::ScreenTexture' has a wrong offset!");
static_assert(offsetof(FStaffrollBackgroundScreenData, SoundCue) == 0x000030, "Member 'FStaffrollBackgroundScreenData::SoundCue' has a wrong offset!");

// ScriptStruct UNION.StageDataAssetTableRow
// 0x00D8 (0x00E0 - 0x0008)
struct FStageDataAssetTableRow final : public FTableRowBase
{
public:
	EStageId                                      StageId;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   StageName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bUseOnline;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStageContentsType                            StageContentsType;                                 // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPrimaryAssetId                        StageDataAsset;                                    // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ThumbnailImage;                                    // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LoadBGImage;                                       // 0x0060(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LoadIconImage;                                     // 0x0088(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LobbyTravelRingImage;                              // 0x00B0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeTrialStageVersion;                             // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentUnlockSortID;                               // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStageDataAssetTableRow) == 0x000008, "Wrong alignment on FStageDataAssetTableRow");
static_assert(sizeof(FStageDataAssetTableRow) == 0x0000E0, "Wrong size on FStageDataAssetTableRow");
static_assert(offsetof(FStageDataAssetTableRow, StageId) == 0x000008, "Member 'FStageDataAssetTableRow::StageId' has a wrong offset!");
static_assert(offsetof(FStageDataAssetTableRow, StageName) == 0x000010, "Member 'FStageDataAssetTableRow::StageName' has a wrong offset!");
static_assert(offsetof(FStageDataAssetTableRow, bUseOnline) == 0x000020, "Member 'FStageDataAssetTableRow::bUseOnline' has a wrong offset!");
static_assert(offsetof(FStageDataAssetTableRow, StageContentsType) == 0x000021, "Member 'FStageDataAssetTableRow::StageContentsType' has a wrong offset!");
static_assert(offsetof(FStageDataAssetTableRow, StageDataAsset) == 0x000024, "Member 'FStageDataAssetTableRow::StageDataAsset' has a wrong offset!");
static_assert(offsetof(FStageDataAssetTableRow, ThumbnailImage) == 0x000038, "Member 'FStageDataAssetTableRow::ThumbnailImage' has a wrong offset!");
static_assert(offsetof(FStageDataAssetTableRow, LoadBGImage) == 0x000060, "Member 'FStageDataAssetTableRow::LoadBGImage' has a wrong offset!");
static_assert(offsetof(FStageDataAssetTableRow, LoadIconImage) == 0x000088, "Member 'FStageDataAssetTableRow::LoadIconImage' has a wrong offset!");
static_assert(offsetof(FStageDataAssetTableRow, LobbyTravelRingImage) == 0x0000B0, "Member 'FStageDataAssetTableRow::LobbyTravelRingImage' has a wrong offset!");
static_assert(offsetof(FStageDataAssetTableRow, TimeTrialStageVersion) == 0x0000D8, "Member 'FStageDataAssetTableRow::TimeTrialStageVersion' has a wrong offset!");
static_assert(offsetof(FStageDataAssetTableRow, ContentUnlockSortID) == 0x0000DC, "Member 'FStageDataAssetTableRow::ContentUnlockSortID' has a wrong offset!");

// ScriptStruct UNION.StageUnlockInfoStruct
// 0x0004 (0x0004 - 0x0000)
struct FStageUnlockInfoStruct final
{
public:
	EStageId                                      StageId;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Unreleased;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDLC;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentId                                    contentId;                                         // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStageUnlockInfoStruct) == 0x000001, "Wrong alignment on FStageUnlockInfoStruct");
static_assert(sizeof(FStageUnlockInfoStruct) == 0x000004, "Wrong size on FStageUnlockInfoStruct");
static_assert(offsetof(FStageUnlockInfoStruct, StageId) == 0x000000, "Member 'FStageUnlockInfoStruct::StageId' has a wrong offset!");
static_assert(offsetof(FStageUnlockInfoStruct, Unreleased) == 0x000001, "Member 'FStageUnlockInfoStruct::Unreleased' has a wrong offset!");
static_assert(offsetof(FStageUnlockInfoStruct, IsDLC) == 0x000002, "Member 'FStageUnlockInfoStruct::IsDLC' has a wrong offset!");
static_assert(offsetof(FStageUnlockInfoStruct, contentId) == 0x000003, "Member 'FStageUnlockInfoStruct::contentId' has a wrong offset!");

// ScriptStruct UNION.TurntableData
// 0x0008 (0x0010 - 0x0008)
struct FTurntableData final : public FTableRowBase
{
public:
	double                                        Rotation;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTurntableData) == 0x000008, "Wrong alignment on FTurntableData");
static_assert(sizeof(FTurntableData) == 0x000010, "Wrong size on FTurntableData");
static_assert(offsetof(FTurntableData, Rotation) == 0x000008, "Member 'FTurntableData::Rotation' has a wrong offset!");

// ScriptStruct UNION.UnionPrimaryAssetLabelPathInfo
// 0x0018 (0x0018 - 0x0000)
struct FUnionPrimaryAssetLabelPathInfo final
{
public:
	struct FDirectoryPath                         DirectoryPath;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsApplyRecursive;                                 // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionPrimaryAssetLabelPathInfo) == 0x000008, "Wrong alignment on FUnionPrimaryAssetLabelPathInfo");
static_assert(sizeof(FUnionPrimaryAssetLabelPathInfo) == 0x000018, "Wrong size on FUnionPrimaryAssetLabelPathInfo");
static_assert(offsetof(FUnionPrimaryAssetLabelPathInfo, DirectoryPath) == 0x000000, "Member 'FUnionPrimaryAssetLabelPathInfo::DirectoryPath' has a wrong offset!");
static_assert(offsetof(FUnionPrimaryAssetLabelPathInfo, bIsApplyRecursive) == 0x000010, "Member 'FUnionPrimaryAssetLabelPathInfo::bIsApplyRecursive' has a wrong offset!");

}

