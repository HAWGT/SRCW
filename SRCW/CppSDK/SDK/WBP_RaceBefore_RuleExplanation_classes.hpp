#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_RaceBefore_RuleExplanation

#include "Basic.hpp"

#include "UNION_classes.hpp"
#include "Engine_structs.hpp"
#include "UnionSystem_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_RaceBefore_RuleExplanation.WBP_RaceBefore_RuleExplanation_C
// 0x0230 (0x0538 - 0x0308)
class UWBP_RaceBefore_RuleExplanation_C final : public UBeforeRaceRuleExplanationWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Rule_QuickMach_Out;                                // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Rule_QuickMach_In;                                 // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Rule_SP_Out;                                       // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Rule_SP_Loop;                                      // 0x0328(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Festa_Rule_SP_In;                                  // 0x0330(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Rule_SP_In;                                        // 0x0338(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Rule_Out;                                          // 0x0340(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Rule_Loop;                                         // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Festa_Rule_In;                                     // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Friend_Rule_In;                                    // 0x0358(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Rule_In;                                           // 0x0360(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 base;                                              // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Base_02;                                           // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BG_Black;                                          // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_FixedGadget;                                // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DMY_ItemIcon;                                      // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DSP_Top_TXT_01;                                    // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DSP_Top_TXT_02;                                    // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Eff_01;                                            // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Eff_02;                                            // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Eff_03;                                            // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Eff_04;                                            // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               GroupRuleRoot;                                     // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_2Team;                               // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_3Team;                               // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_0;                                         // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_2;                                         // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Panel;                                             // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_PeopleIcon;                                // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_FixedGadget;                                   // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_MatchFormat;                                   // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_RuleDetail_01;                                 // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_RuleDetail_02;                                 // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUnionRichTextBlock*                    TXT_RuleName;                                      // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_PeopleIcon;                         // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bIsTickLock;                                       // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableFixedGadget;                                // 0x0429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGroupRaceRule                                GroupRule;                                         // 0x042A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42B[0x5];                                      // 0x042B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        WithRule;                                          // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UWidgetAnimation*                       NewVar;                                            // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsExtreme;                                        // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMenuGroupRaceRuleData                 Out_Row;                                           // 0x0450(0x00E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bCunstomSingle;                                    // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CallAnimFinishEvent();
	void Close(bool bSelfRemove);
	void Construct();
	void ExecuteUbergraph_WBP_RaceBefore_RuleExplanation(int32 EntryPoint);
	void ExtremeSetting();
	void OnFestaHidePeople();
	void OnOutFinished();
	void PreConstruct(bool IsDesignTime);
	void SequenceEvent();
	void SequenceEvent__ENTRYPOINTWBP_RaceBefore_RuleExplanation();
	void SetRuleDetail(const class FString& RuleDetail);
	void UpdateMatchFormatText();
	void UpdateWithRuleVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_RaceBefore_RuleExplanation_C">();
	}
	static class UWBP_RaceBefore_RuleExplanation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_RaceBefore_RuleExplanation_C>();
	}
};
static_assert(alignof(UWBP_RaceBefore_RuleExplanation_C) == 0x000008, "Wrong alignment on UWBP_RaceBefore_RuleExplanation_C");
static_assert(sizeof(UWBP_RaceBefore_RuleExplanation_C) == 0x000538, "Wrong size on UWBP_RaceBefore_RuleExplanation_C");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, UberGraphFrame) == 0x000308, "Member 'UWBP_RaceBefore_RuleExplanation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Rule_QuickMach_Out) == 0x000310, "Member 'UWBP_RaceBefore_RuleExplanation_C::Rule_QuickMach_Out' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Rule_QuickMach_In) == 0x000318, "Member 'UWBP_RaceBefore_RuleExplanation_C::Rule_QuickMach_In' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Rule_SP_Out) == 0x000320, "Member 'UWBP_RaceBefore_RuleExplanation_C::Rule_SP_Out' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Rule_SP_Loop) == 0x000328, "Member 'UWBP_RaceBefore_RuleExplanation_C::Rule_SP_Loop' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Festa_Rule_SP_In) == 0x000330, "Member 'UWBP_RaceBefore_RuleExplanation_C::Festa_Rule_SP_In' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Rule_SP_In) == 0x000338, "Member 'UWBP_RaceBefore_RuleExplanation_C::Rule_SP_In' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Rule_Out) == 0x000340, "Member 'UWBP_RaceBefore_RuleExplanation_C::Rule_Out' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Rule_Loop) == 0x000348, "Member 'UWBP_RaceBefore_RuleExplanation_C::Rule_Loop' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Festa_Rule_In) == 0x000350, "Member 'UWBP_RaceBefore_RuleExplanation_C::Festa_Rule_In' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Friend_Rule_In) == 0x000358, "Member 'UWBP_RaceBefore_RuleExplanation_C::Friend_Rule_In' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Rule_In) == 0x000360, "Member 'UWBP_RaceBefore_RuleExplanation_C::Rule_In' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, base) == 0x000368, "Member 'UWBP_RaceBefore_RuleExplanation_C::base' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Base_02) == 0x000370, "Member 'UWBP_RaceBefore_RuleExplanation_C::Base_02' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, BG_Black) == 0x000378, "Member 'UWBP_RaceBefore_RuleExplanation_C::BG_Black' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Border_FixedGadget) == 0x000380, "Member 'UWBP_RaceBefore_RuleExplanation_C::Border_FixedGadget' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, DMY_ItemIcon) == 0x000388, "Member 'UWBP_RaceBefore_RuleExplanation_C::DMY_ItemIcon' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, DSP_Top_TXT_01) == 0x000390, "Member 'UWBP_RaceBefore_RuleExplanation_C::DSP_Top_TXT_01' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, DSP_Top_TXT_02) == 0x000398, "Member 'UWBP_RaceBefore_RuleExplanation_C::DSP_Top_TXT_02' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Eff_01) == 0x0003A0, "Member 'UWBP_RaceBefore_RuleExplanation_C::Eff_01' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Eff_02) == 0x0003A8, "Member 'UWBP_RaceBefore_RuleExplanation_C::Eff_02' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Eff_03) == 0x0003B0, "Member 'UWBP_RaceBefore_RuleExplanation_C::Eff_03' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Eff_04) == 0x0003B8, "Member 'UWBP_RaceBefore_RuleExplanation_C::Eff_04' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, GroupRuleRoot) == 0x0003C0, "Member 'UWBP_RaceBefore_RuleExplanation_C::GroupRuleRoot' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, HorizontalBox_2Team) == 0x0003C8, "Member 'UWBP_RaceBefore_RuleExplanation_C::HorizontalBox_2Team' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, HorizontalBox_3Team) == 0x0003D0, "Member 'UWBP_RaceBefore_RuleExplanation_C::HorizontalBox_3Team' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Overlay_0) == 0x0003D8, "Member 'UWBP_RaceBefore_RuleExplanation_C::Overlay_0' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Overlay_2) == 0x0003E0, "Member 'UWBP_RaceBefore_RuleExplanation_C::Overlay_2' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Panel) == 0x0003E8, "Member 'UWBP_RaceBefore_RuleExplanation_C::Panel' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, SizeBox_PeopleIcon) == 0x0003F0, "Member 'UWBP_RaceBefore_RuleExplanation_C::SizeBox_PeopleIcon' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, TXT_FixedGadget) == 0x0003F8, "Member 'UWBP_RaceBefore_RuleExplanation_C::TXT_FixedGadget' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, TXT_MatchFormat) == 0x000400, "Member 'UWBP_RaceBefore_RuleExplanation_C::TXT_MatchFormat' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, TXT_RuleDetail_01) == 0x000408, "Member 'UWBP_RaceBefore_RuleExplanation_C::TXT_RuleDetail_01' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, TXT_RuleDetail_02) == 0x000410, "Member 'UWBP_RaceBefore_RuleExplanation_C::TXT_RuleDetail_02' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, TXT_RuleName) == 0x000418, "Member 'UWBP_RaceBefore_RuleExplanation_C::TXT_RuleName' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, WidgetSwitcher_PeopleIcon) == 0x000420, "Member 'UWBP_RaceBefore_RuleExplanation_C::WidgetSwitcher_PeopleIcon' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, bIsTickLock) == 0x000428, "Member 'UWBP_RaceBefore_RuleExplanation_C::bIsTickLock' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, bEnableFixedGadget) == 0x000429, "Member 'UWBP_RaceBefore_RuleExplanation_C::bEnableFixedGadget' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, GroupRule) == 0x00042A, "Member 'UWBP_RaceBefore_RuleExplanation_C::GroupRule' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, WithRule) == 0x000430, "Member 'UWBP_RaceBefore_RuleExplanation_C::WithRule' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, NewVar) == 0x000440, "Member 'UWBP_RaceBefore_RuleExplanation_C::NewVar' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, bIsExtreme) == 0x000448, "Member 'UWBP_RaceBefore_RuleExplanation_C::bIsExtreme' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, Out_Row) == 0x000450, "Member 'UWBP_RaceBefore_RuleExplanation_C::Out_Row' has a wrong offset!");
static_assert(offsetof(UWBP_RaceBefore_RuleExplanation_C, bCunstomSingle) == 0x000530, "Member 'UWBP_RaceBefore_RuleExplanation_C::bCunstomSingle' has a wrong offset!");

}

