#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnionUI

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum UnionUI.ELobbyCameraMoveType
// NumValues: 0x0005
enum class ELobbyCameraMoveType : uint8
{
	LCM_CAMERA_ZOOMIN                        = 0,
	LCM_CAMERA_ZOOMOUT                       = 1,
	LCM_CAMERA_SLIDE                         = 2,
	LCM_CAMERA_MOVE                          = 3,
	LCM_CAMERA_MAX                           = 4,
};

// Enum UnionUI.EUnionUIControlDir
// NumValues: 0x0006
enum class EUnionUIControlDir : uint8
{
	None                                     = 0,
	Up                                       = 1,
	Right                                    = 2,
	Down                                     = 3,
	Left                                     = 4,
	EUnionUIControlDir_MAX                   = 5,
};

// Enum UnionUI.EUnionUIFadeDirection
// NumValues: 0x0003
enum class EUnionUIFadeDirection : uint8
{
	FadeIn                                   = 0,
	FadeOut                                  = 1,
	EUnionUIFadeDirection_MAX                = 2,
};

// Enum UnionUI.EUnionUIButtonAnimState
// NumValues: 0x0007
enum class EUnionUIButtonAnimState : uint8
{
	None                                     = 0,
	Loop                                     = 1,
	FocusAnim                                = 2,
	UnFocusAnim                              = 3,
	Decide                                   = 4,
	Cansel                                   = 5,
	EUnionUIButtonAnimState_MAX              = 6,
};

// Enum UnionUI.EUnionUIButtonEventState
// NumValues: 0x000F
enum class EUnionUIButtonEventState : uint8
{
	Focus                                    = 0,
	UnFocus                                  = 1,
	Decision_Down                            = 2,
	Decision_Up                              = 3,
	Cancel_Down                              = 4,
	Cancel_Up                                = 5,
	NavigationLeftKey_Down                   = 6,
	NavigationLeftKey_Up                     = 7,
	NavigationRightKey_Down                  = 8,
	NavigationRightKey_Up                    = 9,
	NavigationUpKey_Down                     = 10,
	NavigationUpKey_Up                       = 11,
	NavigationDownKey_Down                   = 12,
	NavigationDownKey_Up                     = 13,
	EUnionUIButtonEventState_MAX             = 14,
};

// Enum UnionUI.EUnionUIButtonSoundSetting
// NumValues: 0x0004
enum class EUnionUIButtonSoundSetting : uint8
{
	Disable                                  = 0,
	Enable                                   = 1,
	DisableAtOnce                            = 2,
	EUnionUIButtonSoundSetting_MAX           = 3,
};

// Enum UnionUI.EButtonFocusType
// NumValues: 0x0004
enum class EButtonFocusType : uint8
{
	CanFocus                                 = 0,
	CanFocusButNotOperated                   = 1,
	CanNotFocus                              = 2,
	EButtonFocusType_MAX                     = 3,
};

// Enum UnionUI.EUnionUIControlVH
// NumValues: 0x0004
enum class EUnionUIControlVH : uint8
{
	None                                     = 0,
	Vertical                                 = 1,
	Horizontal                               = 2,
	EUnionUIControlVH_MAX                    = 3,
};

// Enum UnionUI.ELoadingDisplayType
// NumValues: 0x0005
enum class ELoadingDisplayType : uint8
{
	Race                                     = 0,
	Short                                    = 1,
	Middle                                   = 2,
	Simple                                   = 3,
	ELoadingDisplayType_MAX                  = 4,
};

// Enum UnionUI.EUnionLoadingGaugeState
// NumValues: 0x0008
enum class EUnionLoadingGaugeState : uint8
{
	None                                     = 0,
	Start_Ring1                              = 1,
	Ring1_Ring2                              = 2,
	Ring2_Ring3                              = 3,
	Ring3_Goal                               = 4,
	Goal                                     = 5,
	Num                                      = 6,
	EUnionLoadingGaugeState_MAX              = 7,
};

// Enum UnionUI.ETopMenuArea
// NumValues: 0x0008
enum class ETopMenuArea : uint8
{
	MainMenu                                 = 0,
	BottomMenu                               = 1,
	SelectPlayerCountGrandPrix               = 2,
	SelectPlayerCountPartyRace               = 3,
	SelectPlayerCountOnline                  = 4,
	SelectPlayerCountGarage                  = 5,
	Num                                      = 6,
	ETopMenuArea_MAX                         = 7,
};

// Enum UnionUI.ETopMenuMainContents
// NumValues: 0x0007
enum class ETopMenuMainContents : uint8
{
	GrandPrix                                = 0,
	PartyRace                                = 1,
	Online                                   = 2,
	TimeAttack                               = 3,
	Garage                                   = 4,
	Num                                      = 5,
	ETopMenuMainContents_MAX                 = 6,
};

// Enum UnionUI.ETopMenuBottomContents
// NumValues: 0x0006
enum class ETopMenuBottomContents : uint8
{
	Option                                   = 0,
	DLC                                      = 1,
	MyData                                   = 2,
	Credit                                   = 3,
	Num                                      = 4,
	ETopMenuBottomContents_MAX               = 5,
};

// Enum UnionUI.EUnionUISceneAnimation
// NumValues: 0x0004
enum class EUnionUISceneAnimation : uint8
{
	In                                       = 0,
	Idle                                     = 1,
	Out                                      = 2,
	EUnionUISceneAnimation_MAX               = 3,
};

// Enum UnionUI.EUnionUIButtonLoopAnim
// NumValues: 0x0006
enum class EUnionUIButtonLoopAnim : uint8
{
	ActiveLoop                               = 0,
	SelectLoop                               = 1,
	DisableLoop                              = 2,
	LockActiveLoop                           = 3,
	LockSelectLoop                           = 4,
	EUnionUIButtonLoopAnim_MAX               = 5,
};

// Enum UnionUI.EButtonEventType
// NumValues: 0x0005
enum class EButtonEventType : uint8
{
	OnFocus                                  = 0,
	OnRemoveFocus                            = 1,
	OnDecision                               = 2,
	OnCancel                                 = 3,
	EButtonEventType_MAX                     = 4,
};

// Enum UnionUI.EButtonCategory
// NumValues: 0x0003
enum class EButtonCategory : uint8
{
	Nomal                                    = 0,
	TopMenuPanel                             = 1,
	EButtonCategory_MAX                      = 2,
};

// Enum UnionUI.EStampEmotion
// NumValues: 0x0008
enum class EStampEmotion : uint8
{
	ESE_HELLO                                = 0,
	ESE_TAUNT                                = 1,
	ESE_SORROW                               = 2,
	ESE_NICE                                 = 3,
	ESE_SPECIAL                              = 4,
	ESE_SPECIALTWO                           = 5,
	Num                                      = 6,
	EStampEmotion_MAX                        = 7,
};

// Enum UnionUI.EUIButtonIconType
// NumValues: 0x0006
enum class EUIButtonIconType : uint8
{
	EIT_BTN_CONT_CROSS                       = 0,
	EIT_BTN_CONT_BTN                         = 1,
	EIT_BTN_KEY                              = 2,
	EIT_BTN_KEY_CROSS                        = 3,
	Num                                      = 4,
	EUIButtonIconType_MAX                    = 5,
};

// Enum UnionUI.EUnionUIFadeColor
// NumValues: 0x0003
enum class EUnionUIFadeColor : uint8
{
	Black                                    = 0,
	White                                    = 1,
	EUnionUIFadeColor_MAX                    = 2,
};

// Enum UnionUI.EFontSizeType
// NumValues: 0x0005
enum class EFontSizeType : uint8
{
	DIN                                      = 0,
	MORISAWA                                 = 1,
	Other                                    = 2,
	Num                                      = 3,
	EFontSizeType_MAX                        = 4,
};

// Enum UnionUI.EUnionUIGridLayoutSideNavRule
// NumValues: 0x0005
enum class EUnionUIGridLayoutSideNavRule : uint8
{
	Explicit                                 = 0,
	Wrap                                     = 1,
	Stop                                     = 2,
	Custom                                   = 3,
	EUnionUIGridLayoutSideNavRule_MAX        = 4,
};

// Enum UnionUI.EUnionUIGridSideNavigationRule
// NumValues: 0x0005
enum class EUnionUIGridSideNavigationRule : uint8
{
	Explicit                                 = 0,
	Wrap                                     = 1,
	Stop                                     = 2,
	Custom                                   = 3,
	EUnionUIGridSideNavigationRule_MAX       = 4,
};

// Enum UnionUI.ERivalTransitionType
// NumValues: 0x0003
enum class ERivalTransitionType : uint8
{
	Normal                                   = 0,
	High                                     = 1,
	ERivalTransitionType_MAX                 = 2,
};

// Enum UnionUI.EWheelDirection
// NumValues: 0x0005
enum class EWheelDirection : uint8
{
	Up                                       = 0,
	Down                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	EWheelDirection_MAX                      = 4,
};

// Enum UnionUI.EWidgetZOrder
// NumValues: 0x0005
enum class EWidgetZOrder : uint8
{
	Game                                     = 0,
	Fade                                     = 1,
	System                                   = 2,
	Develop                                  = 3,
	EWidgetZOrder_MAX                        = 4,
};

// Enum UnionUI.EWidgetManZLayer
// NumValues: 0x0005
enum class EWidgetManZLayer : uint8
{
	Default                                  = 0,
	Overlay                                  = 1,
	TopMost                                  = 2,
	Background                               = 3,
	EWidgetManZLayer_MAX                     = 4,
};

// ScriptStruct UnionUI.UnionLoadingCourseImage
// 0x0050 (0x0058 - 0x0008)
struct FUnionLoadingCourseImage final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              CourseBG;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CourseIcon;                                        // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionLoadingCourseImage) == 0x000008, "Wrong alignment on FUnionLoadingCourseImage");
static_assert(sizeof(FUnionLoadingCourseImage) == 0x000058, "Wrong size on FUnionLoadingCourseImage");
static_assert(offsetof(FUnionLoadingCourseImage, CourseBG) == 0x000008, "Member 'FUnionLoadingCourseImage::CourseBG' has a wrong offset!");
static_assert(offsetof(FUnionLoadingCourseImage, CourseIcon) == 0x000030, "Member 'FUnionLoadingCourseImage::CourseIcon' has a wrong offset!");

// ScriptStruct UnionUI.TaggedString
// 0x0018 (0x0018 - 0x0000)
struct FTaggedString final
{
public:
	class FString                                 Content;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTaggedString) == 0x000008, "Wrong alignment on FTaggedString");
static_assert(sizeof(FTaggedString) == 0x000018, "Wrong size on FTaggedString");
static_assert(offsetof(FTaggedString, Content) == 0x000000, "Member 'FTaggedString::Content' has a wrong offset!");

// ScriptStruct UnionUI.UnionUIGridLayoutButtonData
// 0x0038 (0x0038 - 0x0000)
struct FUnionUIGridLayoutButtonData final
{
public:
	class UUnionUIButtonBase*                     Button;                                            // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationX;                                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationY;                                         // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                WidgetUp;                                          // 0x0018(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                WidgetRight;                                       // 0x0020(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                WidgetDown;                                        // 0x0028(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                WidgetLeft;                                        // 0x0030(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionUIGridLayoutButtonData) == 0x000008, "Wrong alignment on FUnionUIGridLayoutButtonData");
static_assert(sizeof(FUnionUIGridLayoutButtonData) == 0x000038, "Wrong size on FUnionUIGridLayoutButtonData");
static_assert(offsetof(FUnionUIGridLayoutButtonData, Button) == 0x000000, "Member 'FUnionUIGridLayoutButtonData::Button' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutButtonData, LocationX) == 0x000008, "Member 'FUnionUIGridLayoutButtonData::LocationX' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutButtonData, LocationY) == 0x00000C, "Member 'FUnionUIGridLayoutButtonData::LocationY' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutButtonData, SizeX) == 0x000010, "Member 'FUnionUIGridLayoutButtonData::SizeX' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutButtonData, SizeY) == 0x000014, "Member 'FUnionUIGridLayoutButtonData::SizeY' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutButtonData, WidgetUp) == 0x000018, "Member 'FUnionUIGridLayoutButtonData::WidgetUp' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutButtonData, WidgetRight) == 0x000020, "Member 'FUnionUIGridLayoutButtonData::WidgetRight' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutButtonData, WidgetDown) == 0x000028, "Member 'FUnionUIGridLayoutButtonData::WidgetDown' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutButtonData, WidgetLeft) == 0x000030, "Member 'FUnionUIGridLayoutButtonData::WidgetLeft' has a wrong offset!");

// ScriptStruct UnionUI.UnionRichImageRow
// 0x0010 (0x00F0 - 0x00E0)
struct FUnionRichImageRow final : public FRichImageRow
{
public:
	EControllerButtonTextureIndex                 TextureIndex;                                      // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionRichImageRow) == 0x000010, "Wrong alignment on FUnionRichImageRow");
static_assert(sizeof(FUnionRichImageRow) == 0x0000F0, "Wrong size on FUnionRichImageRow");
static_assert(offsetof(FUnionRichImageRow, TextureIndex) == 0x0000E0, "Member 'FUnionRichImageRow::TextureIndex' has a wrong offset!");

// ScriptStruct UnionUI.EmoteStampDataStruct
// 0x0080 (0x0088 - 0x0008)
struct FEmoteStampDataStruct final : public FTableRowBase
{
public:
	EDriverId                                     DriverId;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                StampTexture;                                      // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EStampEmotion>                         EmotionList;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           StampTextList;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USoundAtomCue>>   StampSEList;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     StampWheelOffsetList;                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     StampBalloonOffsetList;                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteStampDataStruct) == 0x000008, "Wrong alignment on FEmoteStampDataStruct");
static_assert(sizeof(FEmoteStampDataStruct) == 0x000088, "Wrong size on FEmoteStampDataStruct");
static_assert(offsetof(FEmoteStampDataStruct, DriverId) == 0x000008, "Member 'FEmoteStampDataStruct::DriverId' has a wrong offset!");
static_assert(offsetof(FEmoteStampDataStruct, StampTexture) == 0x000010, "Member 'FEmoteStampDataStruct::StampTexture' has a wrong offset!");
static_assert(offsetof(FEmoteStampDataStruct, EmotionList) == 0x000038, "Member 'FEmoteStampDataStruct::EmotionList' has a wrong offset!");
static_assert(offsetof(FEmoteStampDataStruct, StampTextList) == 0x000048, "Member 'FEmoteStampDataStruct::StampTextList' has a wrong offset!");
static_assert(offsetof(FEmoteStampDataStruct, StampSEList) == 0x000058, "Member 'FEmoteStampDataStruct::StampSEList' has a wrong offset!");
static_assert(offsetof(FEmoteStampDataStruct, StampWheelOffsetList) == 0x000068, "Member 'FEmoteStampDataStruct::StampWheelOffsetList' has a wrong offset!");
static_assert(offsetof(FEmoteStampDataStruct, StampBalloonOffsetList) == 0x000078, "Member 'FEmoteStampDataStruct::StampBalloonOffsetList' has a wrong offset!");

// ScriptStruct UnionUI.UnionUIGridLayoutSideNavData
// 0x0020 (0x0020 - 0x0000)
struct FUnionUIGridLayoutSideNavData final
{
public:
	EUnionUIGridLayoutSideNavRule                 Rule;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Widget;                                            // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EUnionUIControlDir Direction, const struct FUnionUIGridLayoutButtonData& ButtonData)> CustomDelegate; // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionUIGridLayoutSideNavData) == 0x000008, "Wrong alignment on FUnionUIGridLayoutSideNavData");
static_assert(sizeof(FUnionUIGridLayoutSideNavData) == 0x000020, "Wrong size on FUnionUIGridLayoutSideNavData");
static_assert(offsetof(FUnionUIGridLayoutSideNavData, Rule) == 0x000000, "Member 'FUnionUIGridLayoutSideNavData::Rule' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutSideNavData, Widget) == 0x000008, "Member 'FUnionUIGridLayoutSideNavData::Widget' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutSideNavData, CustomDelegate) == 0x000010, "Member 'FUnionUIGridLayoutSideNavData::CustomDelegate' has a wrong offset!");

// ScriptStruct UnionUI.UnionUIGridLayoutSideNav
// 0x0080 (0x0080 - 0x0000)
struct FUnionUIGridLayoutSideNav final
{
public:
	struct FUnionUIGridLayoutSideNavData          Up;                                                // 0x0000(0x0020)(BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FUnionUIGridLayoutSideNavData          Right;                                             // 0x0020(0x0020)(BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FUnionUIGridLayoutSideNavData          Down;                                              // 0x0040(0x0020)(BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FUnionUIGridLayoutSideNavData          Left;                                              // 0x0060(0x0020)(BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionUIGridLayoutSideNav) == 0x000008, "Wrong alignment on FUnionUIGridLayoutSideNav");
static_assert(sizeof(FUnionUIGridLayoutSideNav) == 0x000080, "Wrong size on FUnionUIGridLayoutSideNav");
static_assert(offsetof(FUnionUIGridLayoutSideNav, Up) == 0x000000, "Member 'FUnionUIGridLayoutSideNav::Up' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutSideNav, Right) == 0x000020, "Member 'FUnionUIGridLayoutSideNav::Right' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutSideNav, Down) == 0x000040, "Member 'FUnionUIGridLayoutSideNav::Down' has a wrong offset!");
static_assert(offsetof(FUnionUIGridLayoutSideNav, Left) == 0x000060, "Member 'FUnionUIGridLayoutSideNav::Left' has a wrong offset!");

// ScriptStruct UnionUI.UnionUIGridSideNavigationData
// 0x0020 (0x0020 - 0x0000)
struct FUnionUIGridSideNavigationData final
{
public:
	EUnionUIGridSideNavigationRule                Rule;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Widget;                                            // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EUnionUIControlDir InDirection, class UUnionUIButtonBase* InButton, int32 InRowIndex, int32 InColumnIndex)> CustomDelegate; // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionUIGridSideNavigationData) == 0x000008, "Wrong alignment on FUnionUIGridSideNavigationData");
static_assert(sizeof(FUnionUIGridSideNavigationData) == 0x000020, "Wrong size on FUnionUIGridSideNavigationData");
static_assert(offsetof(FUnionUIGridSideNavigationData, Rule) == 0x000000, "Member 'FUnionUIGridSideNavigationData::Rule' has a wrong offset!");
static_assert(offsetof(FUnionUIGridSideNavigationData, Widget) == 0x000008, "Member 'FUnionUIGridSideNavigationData::Widget' has a wrong offset!");
static_assert(offsetof(FUnionUIGridSideNavigationData, CustomDelegate) == 0x000010, "Member 'FUnionUIGridSideNavigationData::CustomDelegate' has a wrong offset!");

// ScriptStruct UnionUI.UnionUIGridSideNavigation
// 0x0080 (0x0080 - 0x0000)
struct FUnionUIGridSideNavigation final
{
public:
	struct FUnionUIGridSideNavigationData         Up;                                                // 0x0000(0x0020)(BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FUnionUIGridSideNavigationData         Down;                                              // 0x0020(0x0020)(BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FUnionUIGridSideNavigationData         Left;                                              // 0x0040(0x0020)(BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FUnionUIGridSideNavigationData         Right;                                             // 0x0060(0x0020)(BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionUIGridSideNavigation) == 0x000008, "Wrong alignment on FUnionUIGridSideNavigation");
static_assert(sizeof(FUnionUIGridSideNavigation) == 0x000080, "Wrong size on FUnionUIGridSideNavigation");
static_assert(offsetof(FUnionUIGridSideNavigation, Up) == 0x000000, "Member 'FUnionUIGridSideNavigation::Up' has a wrong offset!");
static_assert(offsetof(FUnionUIGridSideNavigation, Down) == 0x000020, "Member 'FUnionUIGridSideNavigation::Down' has a wrong offset!");
static_assert(offsetof(FUnionUIGridSideNavigation, Left) == 0x000040, "Member 'FUnionUIGridSideNavigation::Left' has a wrong offset!");
static_assert(offsetof(FUnionUIGridSideNavigation, Right) == 0x000060, "Member 'FUnionUIGridSideNavigation::Right' has a wrong offset!");

// ScriptStruct UnionUI.UnionUIGridNavigationBuilderButtonData
// 0x0018 (0x0018 - 0x0000)
struct FUnionUIGridNavigationBuilderButtonData final
{
public:
	class UUnionUIButtonBase*                     Button;                                            // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowIndex;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColumnIndex;                                       // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeft;                                             // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRight;                                            // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUp;                                               // 0x0012(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDown;                                             // 0x0013(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionUIGridNavigationBuilderButtonData) == 0x000008, "Wrong alignment on FUnionUIGridNavigationBuilderButtonData");
static_assert(sizeof(FUnionUIGridNavigationBuilderButtonData) == 0x000018, "Wrong size on FUnionUIGridNavigationBuilderButtonData");
static_assert(offsetof(FUnionUIGridNavigationBuilderButtonData, Button) == 0x000000, "Member 'FUnionUIGridNavigationBuilderButtonData::Button' has a wrong offset!");
static_assert(offsetof(FUnionUIGridNavigationBuilderButtonData, RowIndex) == 0x000008, "Member 'FUnionUIGridNavigationBuilderButtonData::RowIndex' has a wrong offset!");
static_assert(offsetof(FUnionUIGridNavigationBuilderButtonData, ColumnIndex) == 0x00000C, "Member 'FUnionUIGridNavigationBuilderButtonData::ColumnIndex' has a wrong offset!");
static_assert(offsetof(FUnionUIGridNavigationBuilderButtonData, bLeft) == 0x000010, "Member 'FUnionUIGridNavigationBuilderButtonData::bLeft' has a wrong offset!");
static_assert(offsetof(FUnionUIGridNavigationBuilderButtonData, bRight) == 0x000011, "Member 'FUnionUIGridNavigationBuilderButtonData::bRight' has a wrong offset!");
static_assert(offsetof(FUnionUIGridNavigationBuilderButtonData, bUp) == 0x000012, "Member 'FUnionUIGridNavigationBuilderButtonData::bUp' has a wrong offset!");
static_assert(offsetof(FUnionUIGridNavigationBuilderButtonData, bDown) == 0x000013, "Member 'FUnionUIGridNavigationBuilderButtonData::bDown' has a wrong offset!");

// ScriptStruct UnionUI.WidgetEventDispatcherStocker
// 0x0010 (0x0010 - 0x0000)
struct FWidgetEventDispatcherStocker final
{
public:
	TDelegate<void()>                             BindEvent;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetEventDispatcherStocker) == 0x000004, "Wrong alignment on FWidgetEventDispatcherStocker");
static_assert(sizeof(FWidgetEventDispatcherStocker) == 0x000010, "Wrong size on FWidgetEventDispatcherStocker");
static_assert(offsetof(FWidgetEventDispatcherStocker, BindEvent) == 0x000000, "Member 'FWidgetEventDispatcherStocker::BindEvent' has a wrong offset!");

}

