#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RaceGadgetPlateSequence

#include "Basic.hpp"

#include "BP_RaceGadgetPlateSequence_classes.hpp"
#include "BP_RaceGadgetPlateSequence_parameters.hpp"


namespace SDK
{

// Function BP_RaceGadgetPlateSequence.BP_RaceGadgetPlateSequence_C.CustomEvent_GadgetPlateLevelCountClose
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceGadgetPlateSequence_C::CustomEvent_GadgetPlateLevelCountClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceGadgetPlateSequence_C", "CustomEvent_GadgetPlateLevelCountClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceGadgetPlateSequence.BP_RaceGadgetPlateSequence_C.CustomEvent_GadgetPlateRunkUp
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceGadgetPlateSequence_C::CustomEvent_GadgetPlateRunkUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceGadgetPlateSequence_C", "CustomEvent_GadgetPlateRunkUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceGadgetPlateSequence.BP_RaceGadgetPlateSequence_C.CustomEvent_RewardWidget_Close
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceGadgetPlateSequence_C::CustomEvent_RewardWidget_Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceGadgetPlateSequence_C", "CustomEvent_RewardWidget_Close");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceGadgetPlateSequence.BP_RaceGadgetPlateSequence_C.ExecuteUbergraph_BP_RaceGadgetPlateSequence
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceGadgetPlateSequence_C::ExecuteUbergraph_BP_RaceGadgetPlateSequence(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceGadgetPlateSequence_C", "ExecuteUbergraph_BP_RaceGadgetPlateSequence");

	Params::BP_RaceGadgetPlateSequence_C_ExecuteUbergraph_BP_RaceGadgetPlateSequence Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceGadgetPlateSequence.BP_RaceGadgetPlateSequence_C.IsGadgetSlotMax
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TotalCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   newParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceGadgetPlateSequence_C::IsGadgetSlotMax(int32 TotalCount, bool* newParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceGadgetPlateSequence_C", "IsGadgetSlotMax");

	Params::BP_RaceGadgetPlateSequence_C_IsGadgetSlotMax Parms{};

	Parms.TotalCount = TotalCount;

	UObject::ProcessEvent(Func, &Parms);

	if (newParam != nullptr)
		*newParam = Parms.newParam;
}


// Function BP_RaceGadgetPlateSequence.BP_RaceGadgetPlateSequence_C.IsGadgetSlotMax_PlateId
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EGadgetPlateId                          InGadgetPlateId                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceGadgetPlateSequence_C::IsGadgetSlotMax_PlateId(EGadgetPlateId InGadgetPlateId, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceGadgetPlateSequence_C", "IsGadgetSlotMax_PlateId");

	Params::BP_RaceGadgetPlateSequence_C_IsGadgetSlotMax_PlateId Parms{};

	Parms.InGadgetPlateId = InGadgetPlateId;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_RaceGadgetPlateSequence.BP_RaceGadgetPlateSequence_C.OnFinalize
// (Event, Protected, BlueprintEvent)

void ABP_RaceGadgetPlateSequence_C::OnFinalize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceGadgetPlateSequence_C", "OnFinalize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceGadgetPlateSequence.BP_RaceGadgetPlateSequence_C.OnInitialize
// (Event, Protected, BlueprintEvent)

void ABP_RaceGadgetPlateSequence_C::OnInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceGadgetPlateSequence_C", "OnInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceGadgetPlateSequence.BP_RaceGadgetPlateSequence_C.Retry_GadgetLvUpWindow
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceGadgetPlateSequence_C::Retry_GadgetLvUpWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceGadgetPlateSequence_C", "Retry_GadgetLvUpWindow");

	UObject::ProcessEvent(Func, nullptr);
}

}

