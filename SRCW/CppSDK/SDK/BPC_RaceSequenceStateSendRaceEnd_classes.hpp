#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_RaceSequenceStateSendRaceEnd

#include "Basic.hpp"

#include "UNION_classes.hpp"
#include "Engine_structs.hpp"
#include "UnionSystem_structs.hpp"
#include "UnionLib_structs.hpp"
#include "UnionRun_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_RaceSequenceStateSendRaceEnd.BPC_RaceSequenceStateSendRaceEnd_C
// 0x0010 (0x0178 - 0x0168)
class UBPC_RaceSequenceStateSendRaceEnd_C final : public URaceSequenceStateSendRaceEnd
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0168(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         ConnectedResCode;                                  // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bConnectedSuccessRes;                              // 0x0174(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EResponseCodeAbstract                         ConnectedResCodeAbstract;                          // 0x0175(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESequenceMainType                             MainSequenceType;                                  // 0x0176(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESequenceSubType                              SubSequenceType;                                   // 0x0177(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ConvertStickerData(const struct FUserStickerData& UserStickerData, struct FCommon_MachineStickerData* Common_MachineStickerData);
	void EndPlatformGameMatch();
	void ExecuteUbergraph_BPC_RaceSequenceStateSendRaceEnd(int32 EntryPoint);
	void GetHistoryData(class UCommonLobbyMemberContext* MemberContext, struct FCommon_HistoryData* Common_HistoryData);
	void GetLobbyContextParam();
	void GetPredictCarPacketRequest(struct FResultSavePredictCarPacketRequest* Request, bool* IsSuccess);
	void GetReplaySignedUrlRequest(struct FCntReplayGetSignedUrlRequest* Request, bool* IsSuccess);
	void GetResultSaveFestaResultRequest(struct FResultSaveFestaResultRequest* Request, bool* IsSuccess);
	void GetResultSaveLegendCompeResultRequest(struct FResultSaveLegendCompeResultRequest* Request, bool* IsSuccess);
	void GetResultSaveRankMatchResultRequest(struct FResultSaveRankMatchResultRequest* Request, bool* IsSuccess);
	void GetResultSaveTimeTrialResult(struct FResultSaveTimeTrialResultRequest* Request, bool* IsSuccess);
	void NotifySendResultSave();
	void OnExitState();
	void OnInitState();
	void OnSendResultSaveFestaResultCallback(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnSendResultSaveLegendCompeResultCallback(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OnSendResultSaveRankMatchResultCallback(const class FString& ApiName, const class FString& RequestData, const class FString& ResponseData, bool Error);
	void OutputLog_Event(const class FString& DispStr, bool bError);
	void SendPredictLog();
	void UpdateSendResultSaveCount();
	void UploadPredictCarPacket();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_RaceSequenceStateSendRaceEnd_C">();
	}
	static class UBPC_RaceSequenceStateSendRaceEnd_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_RaceSequenceStateSendRaceEnd_C>();
	}
};
static_assert(alignof(UBPC_RaceSequenceStateSendRaceEnd_C) == 0x000008, "Wrong alignment on UBPC_RaceSequenceStateSendRaceEnd_C");
static_assert(sizeof(UBPC_RaceSequenceStateSendRaceEnd_C) == 0x000178, "Wrong size on UBPC_RaceSequenceStateSendRaceEnd_C");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceEnd_C, UberGraphFrame) == 0x000168, "Member 'UBPC_RaceSequenceStateSendRaceEnd_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceEnd_C, ConnectedResCode) == 0x000170, "Member 'UBPC_RaceSequenceStateSendRaceEnd_C::ConnectedResCode' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceEnd_C, bConnectedSuccessRes) == 0x000174, "Member 'UBPC_RaceSequenceStateSendRaceEnd_C::bConnectedSuccessRes' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceEnd_C, ConnectedResCodeAbstract) == 0x000175, "Member 'UBPC_RaceSequenceStateSendRaceEnd_C::ConnectedResCodeAbstract' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceEnd_C, MainSequenceType) == 0x000176, "Member 'UBPC_RaceSequenceStateSendRaceEnd_C::MainSequenceType' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateSendRaceEnd_C, SubSequenceType) == 0x000177, "Member 'UBPC_RaceSequenceStateSendRaceEnd_C::SubSequenceType' has a wrong offset!");

}

