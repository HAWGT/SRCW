#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hedgehog

#include "Basic.hpp"

#include "Hedgehog_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class Hedgehog.GOCMovement
// 0x02E0 (0x0380 - 0x00A0)
class UGOCMovement final : public UActorComponent
{
public:
	struct FGOCMovementContextParam               DebugContextParam;                                 // 0x00A0(0x00E0)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FString, bool>                     DebugControllerActivated;                          // 0x0180(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TMap<class FString, bool>                     DebugDrawControllerActivated;                      // 0x01D0(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	float                                         DebugDrawMovePathTime;                             // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugDrawMovePathColor;                            // 0x0224(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234[0x14];                                     // 0x0234(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMoveController*>                m_controllerContainer;                             // 0x0248(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_258[0x128];                                    // 0x0258(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GOCMovement">();
	}
	static class UGOCMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGOCMovement>();
	}
};
static_assert(alignof(UGOCMovement) == 0x000010, "Wrong alignment on UGOCMovement");
static_assert(sizeof(UGOCMovement) == 0x000380, "Wrong size on UGOCMovement");
static_assert(offsetof(UGOCMovement, DebugContextParam) == 0x0000A0, "Member 'UGOCMovement::DebugContextParam' has a wrong offset!");
static_assert(offsetof(UGOCMovement, DebugControllerActivated) == 0x000180, "Member 'UGOCMovement::DebugControllerActivated' has a wrong offset!");
static_assert(offsetof(UGOCMovement, DebugDrawControllerActivated) == 0x0001D0, "Member 'UGOCMovement::DebugDrawControllerActivated' has a wrong offset!");
static_assert(offsetof(UGOCMovement, DebugDrawMovePathTime) == 0x000220, "Member 'UGOCMovement::DebugDrawMovePathTime' has a wrong offset!");
static_assert(offsetof(UGOCMovement, DebugDrawMovePathColor) == 0x000224, "Member 'UGOCMovement::DebugDrawMovePathColor' has a wrong offset!");
static_assert(offsetof(UGOCMovement, m_controllerContainer) == 0x000248, "Member 'UGOCMovement::m_controllerContainer' has a wrong offset!");

// Class Hedgehog.HHEasing
// 0x0000 (0x0028 - 0x0028)
class UHHEasing final : public UBlueprintFunctionLibrary
{
public:
	static float BackEaseIn(float T);
	static float BackEaseInOut(float T);
	static float BackEaseOut(float T);
	static float BounceEaseIn(float T);
	static float BounceEaseInOut(float T);
	static float BounceEaseOut(float T);
	static float CircularEaseIn(float T);
	static float CircularEaseInOut(float T);
	static float CircularEaseOut(float T);
	static float CubicEaseIn(float T);
	static float CubicEaseInOut(float T);
	static float CubicEaseOut(float T);
	static float ElasticEaseIn(float T);
	static float ElasticEaseInOut(float T);
	static float ElasticEaseOut(float T);
	static float ExponentialEaseIn(float T);
	static float ExponentialEaseInOut(float T);
	static float LinearEaseIn(float T);
	static float LinearEaseInOut(float T);
	static float LinearEaseOut(float T);
	static float QuadraticEaseIn(float T);
	static float QuadraticEaseInOut(float T);
	static float QuadraticEaseOut(float T);
	static float QuarticEaseIn(float T);
	static float QuarticEaseInOut(float T);
	static float QuarticEaseOut(float T);
	static float QuinticEaseIn(float T);
	static float QuinticEaseInOut(float T);
	static float QuinticEaseOut(float T);
	static float SineEaseIn(float T);
	static float SineEaseInOut(float T);
	static float SineEaseOut(float T);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HHEasing">();
	}
	static class UHHEasing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHHEasing>();
	}
};
static_assert(alignof(UHHEasing) == 0x000008, "Wrong alignment on UHHEasing");
static_assert(sizeof(UHHEasing) == 0x000028, "Wrong size on UHHEasing");

// Class Hedgehog.HHMathUtility
// 0x0000 (0x0028 - 0x0028)
class UHHMathUtility final : public UBlueprintFunctionLibrary
{
public:
	static float Percentile(float Min, float Max, float Value);
	static float Vector3Angle(const struct FVector& v0, const struct FVector& v1);
	static struct FVector Vector3RotateTowards(const struct FVector& Current, const struct FVector& Target, const struct FVector& Axis, float maxMagnitudeDelta);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HHMathUtility">();
	}
	static class UHHMathUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHHMathUtility>();
	}
};
static_assert(alignof(UHHMathUtility) == 0x000008, "Wrong alignment on UHHMathUtility");
static_assert(sizeof(UHHMathUtility) == 0x000028, "Wrong size on UHHMathUtility");

// Class Hedgehog.HHPathConverter
// 0x00A0 (0x00C8 - 0x0028)
class UHHPathConverter final : public UObject
{
public:
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class UHHSplineInfo*                          Spline;                                            // 0x0088(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_90[0x38];                                      // 0x0090(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HHPathConverter">();
	}
	static class UHHPathConverter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHHPathConverter>();
	}
};
static_assert(alignof(UHHPathConverter) == 0x000008, "Wrong alignment on UHHPathConverter");
static_assert(sizeof(UHHPathConverter) == 0x0000C8, "Wrong size on UHHPathConverter");
static_assert(offsetof(UHHPathConverter, Spline) == 0x000088, "Member 'UHHPathConverter::Spline' has a wrong offset!");

// Class Hedgehog.HHSplineInfo
// 0x0030 (0x0058 - 0x0028)
class UHHSplineInfo final : public UObject
{
public:
	uint8                                         Pad_28[0x30];                                      // 0x0028(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HHSplineInfo">();
	}
	static class UHHSplineInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHHSplineInfo>();
	}
};
static_assert(alignof(UHHSplineInfo) == 0x000008, "Wrong alignment on UHHSplineInfo");
static_assert(sizeof(UHHSplineInfo) == 0x000058, "Wrong size on UHHSplineInfo");

// Class Hedgehog.MoveController
// 0x0010 (0x0038 - 0x0028)
class UMoveController : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoveController">();
	}
	static class UMoveController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoveController>();
	}
};
static_assert(alignof(UMoveController) == 0x000008, "Wrong alignment on UMoveController");
static_assert(sizeof(UMoveController) == 0x000038, "Wrong size on UMoveController");

// Class Hedgehog.MoveByVelocity
// 0x0000 (0x0038 - 0x0038)
class UMoveByVelocity final : public UMoveController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoveByVelocity">();
	}
	static class UMoveByVelocity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoveByVelocity>();
	}
};
static_assert(alignof(UMoveByVelocity) == 0x000008, "Wrong alignment on UMoveByVelocity");
static_assert(sizeof(UMoveByVelocity) == 0x000038, "Wrong size on UMoveByVelocity");

// Class Hedgehog.MoveTowardsPlane
// 0x0058 (0x0090 - 0x0038)
class UMoveTowardsPlane : public UMoveController
{
public:
	uint8                                         Pad_38[0x58];                                      // 0x0038(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoveTowardsPlane">();
	}
	static class UMoveTowardsPlane* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoveTowardsPlane>();
	}
};
static_assert(alignof(UMoveTowardsPlane) == 0x000008, "Wrong alignment on UMoveTowardsPlane");
static_assert(sizeof(UMoveTowardsPlane) == 0x000090, "Wrong size on UMoveTowardsPlane");

// Class Hedgehog.MoveTowardsTarget
// 0x0030 (0x0068 - 0x0038)
class UMoveTowardsTarget final : public UMoveController
{
public:
	uint8                                         Pad_38[0x30];                                      // 0x0038(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoveTowardsTarget">();
	}
	static class UMoveTowardsTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoveTowardsTarget>();
	}
};
static_assert(alignof(UMoveTowardsTarget) == 0x000008, "Wrong alignment on UMoveTowardsTarget");
static_assert(sizeof(UMoveTowardsTarget) == 0x000068, "Wrong size on UMoveTowardsTarget");

// Class Hedgehog.MoveTowardsTargetOnCircle
// 0x0098 (0x00D0 - 0x0038)
class UMoveTowardsTargetOnCircle final : public UMoveController
{
public:
	uint8                                         Pad_38[0x98];                                      // 0x0038(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoveTowardsTargetOnCircle">();
	}
	static class UMoveTowardsTargetOnCircle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoveTowardsTargetOnCircle>();
	}
};
static_assert(alignof(UMoveTowardsTargetOnCircle) == 0x000008, "Wrong alignment on UMoveTowardsTargetOnCircle");
static_assert(sizeof(UMoveTowardsTargetOnCircle) == 0x0000D0, "Wrong size on UMoveTowardsTargetOnCircle");

// Class Hedgehog.RotateByVelocity
// 0x0018 (0x0050 - 0x0038)
class URotateByVelocity final : public UMoveController
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RotateByVelocity">();
	}
	static class URotateByVelocity* GetDefaultObj()
	{
		return GetDefaultObjImpl<URotateByVelocity>();
	}
};
static_assert(alignof(URotateByVelocity) == 0x000008, "Wrong alignment on URotateByVelocity");
static_assert(sizeof(URotateByVelocity) == 0x000050, "Wrong size on URotateByVelocity");

// Class Hedgehog.RotateTowardsTarget
// 0x0048 (0x0080 - 0x0038)
class URotateTowardsTarget final : public UMoveController
{
public:
	uint8                                         Pad_38[0x48];                                      // 0x0038(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RotateTowardsTarget">();
	}
	static class URotateTowardsTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URotateTowardsTarget>();
	}
};
static_assert(alignof(URotateTowardsTarget) == 0x000008, "Wrong alignment on URotateTowardsTarget");
static_assert(sizeof(URotateTowardsTarget) == 0x000080, "Wrong size on URotateTowardsTarget");

}

