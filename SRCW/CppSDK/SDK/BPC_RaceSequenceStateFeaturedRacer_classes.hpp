#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_RaceSequenceStateFeaturedRacer

#include "Basic.hpp"

#include "UNION_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_RaceSequenceStateFeaturedRacer.BPC_RaceSequenceStateFeaturedRacer_C
// 0x0030 (0x0150 - 0x0120)
class UBPC_RaceSequenceStateFeaturedRacer_C final : public URaceSequenceStateFeaturedRacer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0120(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_FeaturedRacer_C*                    SequencerObject;                                   // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AVehicleInRacePawn*                     TargetRacer;                                       // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              Out_Effects;                                       // 0x0138(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         TargetRacerIndex;                                  // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnInitState();
	void OnUpdateState(float InDeltaTime);
	void OnExitState();
	void OnFinishedPlay_イベント();
	void OnChangeScene_Event();
	void OnKeyPressed_Event(const struct FKey& PressedKey);
	void OnEnabledSkip();
	void ExecuteUbergraph_BPC_RaceSequenceStateFeaturedRacer(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_RaceSequenceStateFeaturedRacer_C">();
	}
	static class UBPC_RaceSequenceStateFeaturedRacer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_RaceSequenceStateFeaturedRacer_C>();
	}
};
static_assert(alignof(UBPC_RaceSequenceStateFeaturedRacer_C) == 0x000008, "Wrong alignment on UBPC_RaceSequenceStateFeaturedRacer_C");
static_assert(sizeof(UBPC_RaceSequenceStateFeaturedRacer_C) == 0x000150, "Wrong size on UBPC_RaceSequenceStateFeaturedRacer_C");
static_assert(offsetof(UBPC_RaceSequenceStateFeaturedRacer_C, UberGraphFrame) == 0x000120, "Member 'UBPC_RaceSequenceStateFeaturedRacer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateFeaturedRacer_C, SequencerObject) == 0x000128, "Member 'UBPC_RaceSequenceStateFeaturedRacer_C::SequencerObject' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateFeaturedRacer_C, TargetRacer) == 0x000130, "Member 'UBPC_RaceSequenceStateFeaturedRacer_C::TargetRacer' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateFeaturedRacer_C, Out_Effects) == 0x000138, "Member 'UBPC_RaceSequenceStateFeaturedRacer_C::Out_Effects' has a wrong offset!");
static_assert(offsetof(UBPC_RaceSequenceStateFeaturedRacer_C, TargetRacerIndex) == 0x000148, "Member 'UBPC_RaceSequenceStateFeaturedRacer_C::TargetRacerIndex' has a wrong offset!");

}

