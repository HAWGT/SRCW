#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DriverPawn

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UnionSystem_structs.hpp"
#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "UnionRun_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DriverPawn.BP_DriverPawn_C
// 0x0420 (0x0968 - 0x0548)
class ABP_DriverPawn_C final : public ADriver
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0548(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UGFurComponent*                         GFur;                                              // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextureSwitcherComponent*              TextureSwitcher;                                   // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SteeringWheel;                                     // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EDriverId                                     DriverId;                                          // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_579[0x7];                                      // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EItemId Activated_Item_Id)> OnActivateItem;                        // 0x0580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UDriverAnimInstance*                    DriverAnimInstance;                                // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FHoldItemCreateParam                   HoldItemParam;                                     // 0x0598(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TMulticastInlineDelegate<void()>              OnBindItem;                                        // 0x05A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bHoverboard;                                       // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_5B9[0x7];                                      // 0x05B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDriverData                            DriverData;                                        // 0x05C0(0x0390)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bUseRivalSkin;                                     // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_951[0x7];                                      // 0x0951(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    RefSteeringWheelMesh;                              // 0x0958(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BindCurvesMaterialPlayer(class UCurveTable* In_CurveTable, ERacerMaterialAnimation In_Enum);
	void ClearItem();
	void CreateDriver(EDriverId ID);
	void ExecuteUbergraph_BP_DriverPawn(int32 EntryPoint);
	void LoadSkeletalMesh(EDriverId In_DriverId);
	void OnDestroyed_Driver(class AActor* DestroyedActor);
	void PlayHoldItemDirectionEffect(EItemThrowDirection In_ItemThrowDirection);
	void ReceiveBeginPlay();
	void SetAnimClass(const class UClass* NewClass);
	void SetEnableGfur(bool Enable);
	void SetItemParam(const struct FHoldItemCreateParam& InHoldItemParam, bool* Return);
	void SetLightingChannels(bool Channel0, bool Channel1, bool Channel2);
	void SetRideableStatusType(ECarStatusType StatusType);
	bool UseItem();
	bool UseItemInDirection(const EDriverDirection Direction);
	bool UseItemWithoutAnimation();
	void UserConstructionScript();

	class USkeletalMesh* GetRivalMesh(EDriverId In_DriverId) const;
	void PlayVoice(const EDriverVoiceId InDriverVoiceId, const ESoundPan InSoundPan) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DriverPawn_C">();
	}
	static class ABP_DriverPawn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DriverPawn_C>();
	}
};
static_assert(alignof(ABP_DriverPawn_C) == 0x000008, "Wrong alignment on ABP_DriverPawn_C");
static_assert(sizeof(ABP_DriverPawn_C) == 0x000968, "Wrong size on ABP_DriverPawn_C");
static_assert(offsetof(ABP_DriverPawn_C, UberGraphFrame) == 0x000548, "Member 'ABP_DriverPawn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, GFur) == 0x000550, "Member 'ABP_DriverPawn_C::GFur' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, TextureSwitcher) == 0x000558, "Member 'ABP_DriverPawn_C::TextureSwitcher' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, SteeringWheel) == 0x000560, "Member 'ABP_DriverPawn_C::SteeringWheel' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, SkeletalMesh) == 0x000568, "Member 'ABP_DriverPawn_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, DefaultSceneRoot) == 0x000570, "Member 'ABP_DriverPawn_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, DriverId) == 0x000578, "Member 'ABP_DriverPawn_C::DriverId' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, OnActivateItem) == 0x000580, "Member 'ABP_DriverPawn_C::OnActivateItem' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, DriverAnimInstance) == 0x000590, "Member 'ABP_DriverPawn_C::DriverAnimInstance' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, HoldItemParam) == 0x000598, "Member 'ABP_DriverPawn_C::HoldItemParam' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, OnBindItem) == 0x0005A8, "Member 'ABP_DriverPawn_C::OnBindItem' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, bHoverboard) == 0x0005B8, "Member 'ABP_DriverPawn_C::bHoverboard' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, DriverData) == 0x0005C0, "Member 'ABP_DriverPawn_C::DriverData' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, bUseRivalSkin) == 0x000950, "Member 'ABP_DriverPawn_C::bUseRivalSkin' has a wrong offset!");
static_assert(offsetof(ABP_DriverPawn_C, RefSteeringWheelMesh) == 0x000958, "Member 'ABP_DriverPawn_C::RefSteeringWheelMesh' has a wrong offset!");

}

