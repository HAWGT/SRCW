#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimToTexture

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "AnimToTexture_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class AnimToTexture.AnimToTextureDataAsset
// 0x00B0 (0x00E0 - 0x0030)
class UAnimToTextureDataAsset final : public UPrimaryDataAsset
{
public:
	int32                                         UVChannel;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimToTextureMode                            Mode;                                              // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachToSocket;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleRate;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumFrames;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexRowsPerFrame;                                // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VertexMinBBox;                                     // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VertexSizeBBox;                                    // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneWeightRowsPerFrame;                            // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneRowsPerFrame;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               BoneMinBBox;                                       // 0x0090(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               BoneSizeBBox;                                      // 0x00B0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimInfo>                      Animations;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

public:
	int32 GetIndexFromAnimSequence(const class UAnimSequence* Sequence);
	void Reset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimToTextureDataAsset">();
	}
	static class UAnimToTextureDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimToTextureDataAsset>();
	}
};
static_assert(alignof(UAnimToTextureDataAsset) == 0x000010, "Wrong alignment on UAnimToTextureDataAsset");
static_assert(sizeof(UAnimToTextureDataAsset) == 0x0000E0, "Wrong size on UAnimToTextureDataAsset");
static_assert(offsetof(UAnimToTextureDataAsset, UVChannel) == 0x000030, "Member 'UAnimToTextureDataAsset::UVChannel' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, Mode) == 0x000034, "Member 'UAnimToTextureDataAsset::Mode' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, AttachToSocket) == 0x000038, "Member 'UAnimToTextureDataAsset::AttachToSocket' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, SampleRate) == 0x000040, "Member 'UAnimToTextureDataAsset::SampleRate' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, NumFrames) == 0x000044, "Member 'UAnimToTextureDataAsset::NumFrames' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, VertexRowsPerFrame) == 0x000048, "Member 'UAnimToTextureDataAsset::VertexRowsPerFrame' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, VertexMinBBox) == 0x000050, "Member 'UAnimToTextureDataAsset::VertexMinBBox' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, VertexSizeBBox) == 0x000068, "Member 'UAnimToTextureDataAsset::VertexSizeBBox' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, BoneWeightRowsPerFrame) == 0x000080, "Member 'UAnimToTextureDataAsset::BoneWeightRowsPerFrame' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, BoneRowsPerFrame) == 0x000084, "Member 'UAnimToTextureDataAsset::BoneRowsPerFrame' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, BoneMinBBox) == 0x000090, "Member 'UAnimToTextureDataAsset::BoneMinBBox' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, BoneSizeBBox) == 0x0000B0, "Member 'UAnimToTextureDataAsset::BoneSizeBBox' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, Animations) == 0x0000D0, "Member 'UAnimToTextureDataAsset::Animations' has a wrong offset!");

// Class AnimToTexture.AnimToTextureInstancePlaybackLibrary
// 0x0000 (0x0028 - 0x0028)
class UAnimToTextureInstancePlaybackLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AllocateInstanceData(struct FAnimToTextureInstanceData& InstanceData, int32 Count);
	static bool AnimStateFromDataAsset(const class UAnimToTextureDataAsset* DataAsset, int32 StateIndex, struct FAnimToTextureAnimState* AnimState);
	static void BatchUpdateInstancedMeshComponent(class UInstancedStaticMeshComponent* InstancedMeshComponent, struct FAnimToTextureInstanceData& InstanceData);
	static bool GetInstancePlaybackData(const struct FAnimToTextureInstanceData& InstanceData, int32 InstanceIndex, struct FAnimToTextureInstancePlaybackData* InstancePlaybackData);
	static bool GetInstanceTransform(const struct FAnimToTextureInstanceData& InstanceData, int32 InstanceIndex, struct FTransform* InstanceTransform);
	static void SetupInstancedMeshComponent(class UInstancedStaticMeshComponent* InstancedMeshComponent, struct FAnimToTextureInstanceData& InstanceData, int32 NumInstances);
	static bool UpdateInstanceData(struct FAnimToTextureInstanceData& InstanceData, int32 InstanceIndex, const struct FAnimToTextureInstancePlaybackData& PlaybackData, const struct FTransform& Transform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimToTextureInstancePlaybackLibrary">();
	}
	static class UAnimToTextureInstancePlaybackLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimToTextureInstancePlaybackLibrary>();
	}
};
static_assert(alignof(UAnimToTextureInstancePlaybackLibrary) == 0x000008, "Wrong alignment on UAnimToTextureInstancePlaybackLibrary");
static_assert(sizeof(UAnimToTextureInstancePlaybackLibrary) == 0x000028, "Wrong size on UAnimToTextureInstancePlaybackLibrary");

// Class AnimToTexture.VATMeshComponent
// 0x0010 (0x05F0 - 0x05E0)
class UVATMeshComponent : public UStaticMeshComponent
{
public:
	class UAnimToTextureDataAsset*                AnimToTextureDataAsset;                            // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimationIndex;                                    // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeStartOffset;                                   // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeStartRange;                                    // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RandomTimeStartOffset;                             // 0x05EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5ED[0x3];                                      // 0x05ED(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Reset();
	void SetAnimation(int32 Index_0, float InTimeStartOffset);

	struct FAnimToTextureMiniAnimState GetAnimation(int32 Index_0) const;
	int32 GetNumAnimations() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VATMeshComponent">();
	}
	static class UVATMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVATMeshComponent>();
	}
};
static_assert(alignof(UVATMeshComponent) == 0x000010, "Wrong alignment on UVATMeshComponent");
static_assert(sizeof(UVATMeshComponent) == 0x0005F0, "Wrong size on UVATMeshComponent");
static_assert(offsetof(UVATMeshComponent, AnimToTextureDataAsset) == 0x0005D8, "Member 'UVATMeshComponent::AnimToTextureDataAsset' has a wrong offset!");
static_assert(offsetof(UVATMeshComponent, AnimationIndex) == 0x0005E0, "Member 'UVATMeshComponent::AnimationIndex' has a wrong offset!");
static_assert(offsetof(UVATMeshComponent, TimeStartOffset) == 0x0005E4, "Member 'UVATMeshComponent::TimeStartOffset' has a wrong offset!");
static_assert(offsetof(UVATMeshComponent, TimeStartRange) == 0x0005E8, "Member 'UVATMeshComponent::TimeStartRange' has a wrong offset!");
static_assert(offsetof(UVATMeshComponent, RandomTimeStartOffset) == 0x0005EC, "Member 'UVATMeshComponent::RandomTimeStartOffset' has a wrong offset!");

}

