#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PerformRivalFirst

#include "Basic.hpp"

#include "BP_PerformRivalFirst_classes.hpp"
#include "BP_PerformRivalFirst_parameters.hpp"


namespace SDK
{

// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.Apply Rival Level
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFirst_C::Apply_Rival_Level()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "Apply Rival Level");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.CreateScene
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASceneDriver*                     In_Player                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ASceneDriver*                     In_Rival                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   In_RivalIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIn_SoloMode                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerformRivalFirst_C::CreateScene(class ASceneDriver* In_Player, class ASceneDriver* In_Rival, int32 In_RivalIndex, bool bIn_SoloMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "CreateScene");

	Params::BP_PerformRivalFirst_C_CreateScene Parms{};

	Parms.In_Player = In_Player;
	Parms.In_Rival = In_Rival;
	Parms.In_RivalIndex = In_RivalIndex;
	Parms.bIn_SoloMode = bIn_SoloMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.ExecuteUbergraph_BP_PerformRivalFirst
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerformRivalFirst_C::ExecuteUbergraph_BP_PerformRivalFirst(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "ExecuteUbergraph_BP_PerformRivalFirst");

	Params::BP_PerformRivalFirst_C_ExecuteUbergraph_BP_PerformRivalFirst Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.GetPlayerLevelSequenceReference
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDriverId                               In_PlayerDriverId                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDriverId                               In_RivalDriverId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    In_IsHover                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class ULevelSequence>*   Out_Asset                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_PerformRivalFirst_C::GetPlayerLevelSequenceReference(EDriverId In_PlayerDriverId, EDriverId In_RivalDriverId, bool In_IsHover, TSoftObjectPtr<class ULevelSequence>* Out_Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "GetPlayerLevelSequenceReference");

	Params::BP_PerformRivalFirst_C_GetPlayerLevelSequenceReference Parms{};

	Parms.In_PlayerDriverId = In_PlayerDriverId;
	Parms.In_RivalDriverId = In_RivalDriverId;
	Parms.In_IsHover = In_IsHover;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Asset != nullptr)
		*Out_Asset = Parms.Out_Asset;
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.GetRivalLevelSequenceReference
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDriverId                               In_PlayerDriverId                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDriverId                               In_RivalDriverId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    In_IsHover                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class ULevelSequence>*   Out_Asset                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_PerformRivalFirst_C::GetRivalLevelSequenceReference(EDriverId In_PlayerDriverId, EDriverId In_RivalDriverId, bool In_IsHover, TSoftObjectPtr<class ULevelSequence>* Out_Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "GetRivalLevelSequenceReference");

	Params::BP_PerformRivalFirst_C_GetRivalLevelSequenceReference Parms{};

	Parms.In_PlayerDriverId = In_PlayerDriverId;
	Parms.In_RivalDriverId = In_RivalDriverId;
	Parms.In_IsHover = In_IsHover;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Asset != nullptr)
		*Out_Asset = Parms.Out_Asset;
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.GetStageId
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EStageId*                               Out_StageId                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerformRivalFirst_C::GetStageId(EStageId* Out_StageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "GetStageId");

	Params::BP_PerformRivalFirst_C_GetStageId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_StageId != nullptr)
		*Out_StageId = Parms.Out_StageId;
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.IsVisibleSubtitle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ASceneDriver*                     InDriver                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   bVisible                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerformRivalFirst_C::IsVisibleSubtitle(class ASceneDriver* InDriver, bool* bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "IsVisibleSubtitle");

	Params::BP_PerformRivalFirst_C_IsVisibleSubtitle Parms{};

	Parms.InDriver = InDriver;

	UObject::ProcessEvent(Func, &Parms);

	if (bVisible != nullptr)
		*bVisible = Parms.bVisible;
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.OnFinished_PlayerScene
// (BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFirst_C::OnFinished_PlayerScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "OnFinished_PlayerScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.OnFinished_PlayerVoice
// (BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFirst_C::OnFinished_PlayerVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "OnFinished_PlayerVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.OnFinished_RivalScene
// (BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFirst_C::OnFinished_RivalScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "OnFinished_RivalScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.OnFinished_RivalVoice
// (BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFirst_C::OnFinished_RivalVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "OnFinished_RivalVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.OnFinished_ScreenSlide
// (BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFirst_C::OnFinished_ScreenSlide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "OnFinished_ScreenSlide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.OnPlayRivalIntroduction
// (BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFirst_C::OnPlayRivalIntroduction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "OnPlayRivalIntroduction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.OnPlaySceneEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_PerformRivalFirst_C::OnPlaySceneEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "OnPlaySceneEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.PlayScene
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           In_PlayerRoot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           In_RivalRoot                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_PerformRivalFirst_C::PlayScene(class AActor* In_PlayerRoot, class AActor* In_RivalRoot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "PlayScene");

	Params::BP_PerformRivalFirst_C_PlayScene Parms{};

	Parms.In_PlayerRoot = In_PlayerRoot;
	Parms.In_RivalRoot = In_RivalRoot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PerformRivalFirst_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PerformRivalFirst_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "ReceiveEndPlay");

	Params::BP_PerformRivalFirst_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.SetSubtitle
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      In_Subtitle                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_PerformRivalFirst_C::SetSubtitle(const class FText& In_Subtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "SetSubtitle");

	Params::BP_PerformRivalFirst_C_SetSubtitle Parms{};

	Parms.In_Subtitle = std::move(In_Subtitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.GetPlayerMessageFromTable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EDriverId                               In_PlayerDriverId                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDriverId                               In_RivalDriverId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            Out_Text                                               (Parm, OutParm)

void ABP_PerformRivalFirst_C::GetPlayerMessageFromTable(EDriverId In_PlayerDriverId, EDriverId In_RivalDriverId, class FText* Out_Text) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "GetPlayerMessageFromTable");

	Params::BP_PerformRivalFirst_C_GetPlayerMessageFromTable Parms{};

	Parms.In_PlayerDriverId = In_PlayerDriverId;
	Parms.In_RivalDriverId = In_RivalDriverId;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Text != nullptr)
		*Out_Text = std::move(Parms.Out_Text);
}


// Function BP_PerformRivalFirst.BP_PerformRivalFirst_C.GetRivalMessageFromTable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EDriverId                               In_PlayerDriverId                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDriverId                               In_RivalDriverId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    In_SoloMode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            Out_Text                                               (Parm, OutParm)

void ABP_PerformRivalFirst_C::GetRivalMessageFromTable(EDriverId In_PlayerDriverId, EDriverId In_RivalDriverId, bool In_SoloMode, class FText* Out_Text) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PerformRivalFirst_C", "GetRivalMessageFromTable");

	Params::BP_PerformRivalFirst_C_GetRivalMessageFromTable Parms{};

	Parms.In_PlayerDriverId = In_PlayerDriverId;
	Parms.In_RivalDriverId = In_RivalDriverId;
	Parms.In_SoloMode = In_SoloMode;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Text != nullptr)
		*Out_Text = std::move(Parms.Out_Text);
}

}

