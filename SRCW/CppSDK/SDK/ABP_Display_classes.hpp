#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Display

#include "Basic.hpp"

#include "UNION_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Display.ABP_Display_C
// 0x0330 (0x06A0 - 0x0370)
class UABP_Display_C final : public UAnimInstance
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0378(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0380(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0388(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x03A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x03D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x03F8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0420(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0468(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0488(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x04D0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x04F0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0538(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0558(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x05A0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x05C0(0x00C8)()
	EDialogueDisplayAnimationStateID              AnimStateID;                                       // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnAnimationEnd;                                    // 0x0690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void AnimNotify_OnEndAnimation();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Display_AnimGraphNode_TransitionResult_0C3D8D1648D840755223FEBC1910D7CC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Display_AnimGraphNode_TransitionResult_9BA7E7604E0B668F6154259BE69515F2();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Display_AnimGraphNode_TransitionResult_9CEB64CC4FF4A85A064395A276577D6C();
	void ExecuteUbergraph_ABP_Display(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Display_C">();
	}
	static class UABP_Display_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Display_C>();
	}
};
static_assert(alignof(UABP_Display_C) == 0x000010, "Wrong alignment on UABP_Display_C");
static_assert(sizeof(UABP_Display_C) == 0x0006A0, "Wrong size on UABP_Display_C");
static_assert(offsetof(UABP_Display_C, UberGraphFrame) == 0x000370, "Member 'UABP_Display_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimBlueprintExtension_PropertyAccess) == 0x000378, "Member 'UABP_Display_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimBlueprintExtension_Base) == 0x000380, "Member 'UABP_Display_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_Root) == 0x000388, "Member 'UABP_Display_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_TransitionResult_2) == 0x0003A8, "Member 'UABP_Display_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_TransitionResult_1) == 0x0003D0, "Member 'UABP_Display_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_TransitionResult) == 0x0003F8, "Member 'UABP_Display_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_SequencePlayer_3) == 0x000420, "Member 'UABP_Display_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_StateResult_3) == 0x000468, "Member 'UABP_Display_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_SequencePlayer_2) == 0x000488, "Member 'UABP_Display_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_StateResult_2) == 0x0004D0, "Member 'UABP_Display_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_SequencePlayer_1) == 0x0004F0, "Member 'UABP_Display_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_StateResult_1) == 0x000538, "Member 'UABP_Display_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_SequencePlayer) == 0x000558, "Member 'UABP_Display_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_StateResult) == 0x0005A0, "Member 'UABP_Display_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimGraphNode_StateMachine) == 0x0005C0, "Member 'UABP_Display_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, AnimStateID) == 0x000688, "Member 'UABP_Display_C::AnimStateID' has a wrong offset!");
static_assert(offsetof(UABP_Display_C, OnAnimationEnd) == 0x000690, "Member 'UABP_Display_C::OnAnimationEnd' has a wrong offset!");

}

