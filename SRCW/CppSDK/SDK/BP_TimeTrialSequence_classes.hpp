#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TimeTrialSequence

#include "Basic.hpp"

#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "Engine_structs.hpp"
#include "UnionSystem_structs.hpp"
#include "UnionUI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TimeTrialSequence.BP_TimeTrialSequence_C
// 0x0128 (0x04F8 - 0x03D0)
class ABP_TimeTrialSequence_C final : public ATimeTrialSequence
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_TimeTrialReplayLoadState_C*        BPC_TimeTrialReplayLoadState;                      // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_TimeTrialReadyState_C*             BPC_TimeTrialReadyState;                           // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_TimeTrialGhostConfirmationState_C* BPC_TimeTrialGhostConfirmationState;               // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_TimeTrialLoginState_C*             BPC_TimeTrialLoginState;                           // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_GhostUpload_C*                     BPC_GhostUpload;                                   // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_GadgetCustomize2State_C*           BPC_GadgetCustomize2State;                         // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_TimeTrialClassSelectSubState_C*    BPC_TimeTrialClassSelectSubState;                  // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_TimeTrialSelectCourse_C*           BPC_TimeTrialSelectCourse;                         // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_TimeTrialRanking_C*                BPC_TimeTrialRanking;                              // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_GhostSelect_C*                     BPC_GhostSelect;                                   // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_CharaMachineState_C*               BPC_CharaMachineState;                             // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_MenuSequence_C*                     MenuSequence;                                      // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_FooterMenu_C*                      Footer;                                            // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bLClassSelect;                                     // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ReadySequenceActor_C*               ReadySequenceActor;                                // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMenuInputRecieveObject*                SubInputReciever;                                  // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EGhostSelectModeId                            CurrentGhostSelectModeId;                          // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionUIPopupWindowBase*                PopupWindow;                                       // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FMenuRankingLineData                   RankingLineData;                                   // 0x0468(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FUserTimeTrialRaceData                 TimeTrialRaceData;                                 // 0x04A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EStageId                                      SelectedStageId;                                   // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BindEvent();
	void BndEvt__BP_TimeTrialSequence_BPC_CharaMachineState_K2Node_ComponentBoundEvent_0_OnChangeStateDelegate__DelegateSignature(EMenuSequenceSubState State);
	void BndEvt__BP_TimeTrialSequence_BPC_TimeTrialClassSelectSubState_K2Node_ComponentBoundEvent_1_OnChangeStateDelegate__DelegateSignature(EMenuSequenceSubState State);
	void BndEvt__BP_TimeTrialSequence_BPC_TimeTrialSelectCourse_K2Node_ComponentBoundEvent_0_OnDecideTimeTrialSelectCource__DelegateSignature();
	void BndEvt__BP_TimeTrialSequence_BPC_TimeTrialSelectCourse_K2Node_ComponentBoundEvent_1_OnDecideTimeTrialSelectCource__DelegateSignature();
	void ConvertTimeTrialRaceData(const struct FRankingDataTimeTrial& InRankingData);
	void DecideReady();
	void ExecuteUbergraph_BP_TimeTrialSequence(int32 EntryPoint);
	void FadeToRaceLevel(EUnionUIFadeDirection FadeDirection);
	void GadgetCustomFadeFinished(EUnionUIFadeDirection FadeDirection);
	void GetLastStateIsClassSelect(bool* LClassSelect);
	class UObject* GetOwnerMenuSequence();
	void GetSelectedStageId(EStageId* Selected_Stage_Id_Single);
	void InitState();
	void OnBackFromGadgetCustomize(EMenuSequenceSubState State);
	void OnCancelAndPrevSequence_Event();
	void OnDecideGhostSelect();
	void OnDecideGhostUpload();
	void OnFinalize();
	void OnInitialize();
	void OnInitStateExit();
	void OnUpdate(float InDeltaTime);
	void PreloadTimeTrialStageAssets(EStageId InStageId);
	void SetFooter();
	void SetNextSubMenuSequenceState(EMenuSequenceSubState InState, class UObject* PrevSequence);
	void SetSelectedStageId(EStageId InSelectStageId);
	void Setting_Ghost_Gadget_Presset(const struct FReplaySaveInfo& InGhostData);
	void Setup_Time_Trial_Race_Setting();
	void UnloadTimeTrailStageAssets();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TimeTrialSequence_C">();
	}
	static class ABP_TimeTrialSequence_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TimeTrialSequence_C>();
	}
};
static_assert(alignof(ABP_TimeTrialSequence_C) == 0x000008, "Wrong alignment on ABP_TimeTrialSequence_C");
static_assert(sizeof(ABP_TimeTrialSequence_C) == 0x0004F8, "Wrong size on ABP_TimeTrialSequence_C");
static_assert(offsetof(ABP_TimeTrialSequence_C, UberGraphFrame) == 0x0003D0, "Member 'ABP_TimeTrialSequence_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, BPC_TimeTrialReplayLoadState) == 0x0003D8, "Member 'ABP_TimeTrialSequence_C::BPC_TimeTrialReplayLoadState' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, BPC_TimeTrialReadyState) == 0x0003E0, "Member 'ABP_TimeTrialSequence_C::BPC_TimeTrialReadyState' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, BPC_TimeTrialGhostConfirmationState) == 0x0003E8, "Member 'ABP_TimeTrialSequence_C::BPC_TimeTrialGhostConfirmationState' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, BPC_TimeTrialLoginState) == 0x0003F0, "Member 'ABP_TimeTrialSequence_C::BPC_TimeTrialLoginState' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, BPC_GhostUpload) == 0x0003F8, "Member 'ABP_TimeTrialSequence_C::BPC_GhostUpload' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, BPC_GadgetCustomize2State) == 0x000400, "Member 'ABP_TimeTrialSequence_C::BPC_GadgetCustomize2State' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, BPC_TimeTrialClassSelectSubState) == 0x000408, "Member 'ABP_TimeTrialSequence_C::BPC_TimeTrialClassSelectSubState' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, BPC_TimeTrialSelectCourse) == 0x000410, "Member 'ABP_TimeTrialSequence_C::BPC_TimeTrialSelectCourse' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, BPC_TimeTrialRanking) == 0x000418, "Member 'ABP_TimeTrialSequence_C::BPC_TimeTrialRanking' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, BPC_GhostSelect) == 0x000420, "Member 'ABP_TimeTrialSequence_C::BPC_GhostSelect' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, BPC_CharaMachineState) == 0x000428, "Member 'ABP_TimeTrialSequence_C::BPC_CharaMachineState' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, MenuSequence) == 0x000430, "Member 'ABP_TimeTrialSequence_C::MenuSequence' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, Footer) == 0x000438, "Member 'ABP_TimeTrialSequence_C::Footer' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, bLClassSelect) == 0x000440, "Member 'ABP_TimeTrialSequence_C::bLClassSelect' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, ReadySequenceActor) == 0x000448, "Member 'ABP_TimeTrialSequence_C::ReadySequenceActor' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, SubInputReciever) == 0x000450, "Member 'ABP_TimeTrialSequence_C::SubInputReciever' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, CurrentGhostSelectModeId) == 0x000458, "Member 'ABP_TimeTrialSequence_C::CurrentGhostSelectModeId' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, PopupWindow) == 0x000460, "Member 'ABP_TimeTrialSequence_C::PopupWindow' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, RankingLineData) == 0x000468, "Member 'ABP_TimeTrialSequence_C::RankingLineData' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, TimeTrialRaceData) == 0x0004A0, "Member 'ABP_TimeTrialSequence_C::TimeTrialRaceData' has a wrong offset!");
static_assert(offsetof(ABP_TimeTrialSequence_C, SelectedStageId) == 0x0004F0, "Member 'ABP_TimeTrialSequence_C::SelectedStageId' has a wrong offset!");

}

