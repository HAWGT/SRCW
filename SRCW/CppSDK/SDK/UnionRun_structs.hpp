#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnionRun

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UnionSystem_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// Enum UnionRun.EDroneRemainDistance
// NumValues: 0x0006
enum class EDroneRemainDistance : uint8
{
	DistanceUnknown                          = 0,
	Distance1000                             = 1,
	Distance500                              = 2,
	Distance300                              = 3,
	Distance100                              = 4,
	EDroneRemainDistance_MAX                 = 5,
};

// Enum UnionRun.ERacerControlType
// NumValues: 0x0008
enum class ERacerControlType : uint8
{
	None                                     = 0,
	LocalPlayer                              = 1,
	Com                                      = 2,
	OnlinePlayer                             = 3,
	OnlineCom                                = 4,
	Ghost                                    = 5,
	Num                                      = 6,
	ERacerControlType_MAX                    = 7,
};

// Enum UnionRun.EVehicleDisplayMode
// NumValues: 0x0009
enum class EVehicleDisplayMode : uint8
{
	Nomal                                    = 0,
	YellowDrill                              = 1,
	MonsterTruck                             = 2,
	CyanLaser                                = 3,
	WarpRing                                 = 4,
	Mini                                     = 5,
	Invisible                                = 6,
	InvisibleAndReset                        = 7,
	EVehicleDisplayMode_MAX                  = 8,
};

// Enum UnionRun.RacerDamageType
// NumValues: 0x003A
enum class ERacerDamageType : uint8
{
	Non                                      = 0,
	CarHit                                   = 1,
	EnemyLarge                               = 2,
	EnemyMedium                              = 3,
	EnemySmall                               = 4,
	EnemySquashed                            = 5,
	PaintShower                              = 6,
	GimmickDecelLarge                        = 7,
	Bollard                                  = 8,
	HomingPunch                              = 9,
	RocketPunch                              = 10,
	YellowDrill                              = 11,
	ThornBall                                = 12,
	MonsterTruckLarge                        = 13,
	MonsterTruckSmall                        = 14,
	KingBoomBoo                              = 15,
	Anchor                                   = 16,
	AnchorAbort                              = 17,
	BodyCut                                  = 18,
	BodyCutAbort                             = 19,
	Slicer                                   = 20,
	SlicerAttack                             = 21,
	Slime                                    = 22,
	SplashAccelStart                         = 23,
	SplashAccelEnd                           = 24,
	SplashStart                              = 25,
	SplashEnd                                = 26,
	Magnet                                   = 27,
	MagnetAttract                            = 28,
	MagnetAbort                              = 29,
	JadeGhost                                = 30,
	JadeGhostAbort                           = 31,
	CyanLaserStart                           = 32,
	CyanLaserMove                            = 33,
	CyanLaserEnd                             = 34,
	WarpRingStart                            = 35,
	WarpRingEnd                              = 36,
	WarpRingAttackStart                      = 37,
	WarpRingAttackEnd                        = 38,
	BlackBombLv1                             = 39,
	BlackBombLv2                             = 40,
	BlackBombLv3                             = 41,
	BlackBombSquashed                        = 42,
	DarkChao                                 = 43,
	Shield                                   = 44,
	ShieldAbort                              = 45,
	VioletVoid                               = 46,
	Omochao                                  = 47,
	ItemLostBySlime                          = 48,
	ItemLostByDarkChao                       = 49,
	FootCut                                  = 50,
	Weight                                   = 51,
	Extnd09Normal                            = 52,
	Extnd09Charge                            = 53,
	RingStole                                = 54,
	SpinAttack                               = 55,
	Num                                      = 56,
	RacerDamageType_MAX                      = 57,
};

// Enum UnionRun.EDomainIndex
// NumValues: 0x0007
enum class EDomainIndex : uint8
{
	DomainIndex0                             = 0,
	DomainIndex1                             = 1,
	DomainIndex2                             = 2,
	DomainIndex3                             = 3,
	DomainIndexMax                           = 4,
	InvalidDomainIndex                       = 255,
	EDomainIndex_MAX                         = 256,
};

// Enum UnionRun.EDomainNumber
// NumValues: 0x0007
enum class EDomainNumber : uint8
{
	DomainNumber0                            = 0,
	DomainNumber1                            = 1,
	DomainNumber2                            = 2,
	DomainNumber3                            = 3,
	DomainNumberMax                          = 4,
	InvalidDomainNumber                      = 255,
	EDomainNumber_MAX                        = 256,
};

// Enum UnionRun.ECarStatusType
// NumValues: 0x0006
enum class ECarStatusType : uint8
{
	CarStatusSpeed                           = 0,
	CarStatusAccele                          = 1,
	CarStatusHandle                          = 2,
	CarStatusPower                           = 3,
	CarStatusDash                            = 4,
	ECarStatusType_MAX                       = 5,
};

// Enum UnionRun.ERacerDriftState
// NumValues: 0x0005
enum class ERacerDriftState : uint8
{
	None                                     = 0,
	Right                                    = 1,
	Left                                     = 2,
	Num                                      = 3,
	ERacerDriftState_MAX                     = 4,
};

// Enum UnionRun.EUnionSurfaceType
// NumValues: 0x0039
enum class EUnionSurfaceType : uint8
{
	None                                     = 0,
	Asphalt                                  = 1,
	Dirt                                     = 2,
	Sand                                     = 3,
	Wood                                     = 4,
	Brick                                    = 5,
	Steps                                    = 6,
	SandRunOff                               = 7,
	Nylon                                    = 8,
	Water                                    = 9,
	Turf                                     = 10,
	Gravel                                   = 11,
	Mud                                      = 12,
	Magma                                    = 13,
	Puddle                                   = 14,
	Poison                                   = 15,
	Rubber                                   = 16,
	WireMesh                                 = 17,
	Ice                                      = 18,
	Snow                                     = 19,
	SnowRunOff                               = 20,
	Concrete                                 = 21,
	Chocolate                                = 22,
	WetWood                                  = 23,
	WetMetal                                 = 24,
	WetRock                                  = 25,
	WetNylon                                 = 26,
	Gold                                     = 27,
	WetGold                                  = 28,
	FlowerRed                                = 29,
	FlowerYellow                             = 30,
	FlowerPurple                             = 31,
	FlowerPink                               = 32,
	SkidPad                                  = 33,
	WaterSlider                              = 34,
	RubberRunOff                             = 35,
	Transparent                              = 36,
	Spring                                   = 37,
	GhostRoad                                = 38,
	Jelly                                    = 39,
	Cream                                    = 40,
	EXTND05_01                               = 41,
	Roof                                     = 42,
	CobbleStones                             = 43,
	IronPlate                                = 44,
	Soil                                     = 45,
	MudRunOff                                = 46,
	Bark                                     = 47,
	Carpet                                   = 48,
	PurpleMud                                = 49,
	EXTND04_Turf                             = 50,
	WoodFlooring                             = 51,
	TurfNormal                               = 52,
	IronPlateRunOff                          = 53,
	Leaf                                     = 54,
	Slime                                    = 55,
	Max                                      = 56,
};

// Enum UnionRun.EColliderColliAxes
// NumValues: 0x0005
enum class EColliderColliAxes : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	Num                                      = 3,
	EColliderColliAxes_MAX                   = 4,
};

// Enum UnionRun.EColliderColliShapeType
// NumValues: 0x0007
enum class EColliderColliShapeType : uint8
{
	Box                                      = 0,
	Triangle                                 = 1,
	Sphere                                   = 2,
	Capsule                                  = 3,
	Cylinder                                 = 4,
	Num                                      = 5,
	EColliderColliShapeType_MAX              = 6,
};

// Enum UnionRun.ECollisionHitType
// NumValues: 0x0004
enum class ECollisionHitType : uint8
{
	HitOnEnter                               = 0,
	HitStay                                  = 1,
	HitOnLeave                               = 2,
	ECollisionHitType_MAX                    = 3,
};

// Enum UnionRun.EStaticBodyShapeType
// NumValues: 0x0005
enum class EStaticBodyShapeType : uint8
{
	StaticBodySphere                         = 0,
	StaticBodyBox                            = 1,
	StaticBodyCylinder                       = 2,
	StaticBodyCapsule                        = 3,
	EStaticBodyShapeType_MAX                 = 4,
};

// Enum UnionRun.EAttachmentType
// NumValues: 0x0003
enum class EAttachmentType : uint8
{
	RootComponent                            = 0,
	OverrideTransform                        = 1,
	EAttachmentType_MAX                      = 2,
};

// Enum UnionRun.EAsuraState
// NumValues: 0x0007
enum class EAsuraState : uint8
{
	Wait                                     = 0,
	AttackReady                              = 1,
	AttackReadyLoop                          = 2,
	Attack                                   = 3,
	AttackLoop                               = 4,
	AttackEnd                                = 5,
	EAsuraState_MAX                          = 6,
};

// Enum UnionRun.EAllowBounceType
// NumValues: 0x0006
enum class EAllowBounceType : uint8
{
	None                                     = 0,
	Invisible                                = 1,
	AttackItem                               = 2,
	NormalCar                                = 4,
	MonsterTrackAndYellowDrill               = 8,
	EAllowBounceType_MAX                     = 9,
};

// Enum UnionRun.EExtensionType
// NumValues: 0x0003
enum class EExtensionType : uint8
{
	Tremor                                   = 0,
	Num                                      = 1,
	EExtensionType_MAX                       = 2,
};

// Enum UnionRun.ECameraTremorType
// NumValues: 0x0006
enum class ECameraTremorType : uint8
{
	Low                                      = 0,
	Middle                                   = 1,
	High                                     = 2,
	Moai                                     = 3,
	Num                                      = 4,
	ECameraTremorType_MAX                    = 5,
};

// Enum UnionRun.EColliderType
// NumValues: 0x0014
enum class EColliderType : uint8
{
	None                                     = 0,
	BoostPad                                 = 1,
	ItemBox                                  = 2,
	Respot                                   = 3,
	Ring                                     = 4,
	JikkenBox                                = 5,
	JikkenSphere                             = 6,
	JikkenCapsule                            = 7,
	JikkenCylinder                           = 8,
	BreakObject                              = 9,
	ThornBall                                = 10,
	Bomb                                     = 11,
	Enemy                                    = 12,
	MoveCollision                            = 13,
	EventCollision                           = 14,
	Gimmick                                  = 15,
	CameraCollision                          = 16,
	AttackItemCollision                      = 17,
	Num                                      = 18,
	EColliderType_MAX                        = 19,
};

// Enum UnionRun.EComMarkerType
// NumValues: 0x0004
enum class EComMarkerType : uint8
{
	NONE                                     = 0,
	USE_DASH_ITEM                            = 1,
	BOAT_JUMP                                = 2,
	Max                                      = 3,
};

// Enum UnionRun.EComBranchType
// NumValues: 0x0006
enum class EComBranchType : uint8
{
	NONE                                     = 0,
	BRANCH_FORCE                             = 1,
	BRANCH_RANDOM                            = 2,
	BRANCH_CONDITION                         = 3,
	SHORTCUT_RING                            = 4,
	Max                                      = 5,
};

// Enum UnionRun.EComPathType
// NumValues: 0x000B
enum class EComPathType : uint8
{
	NONE                                     = 0,
	MAIN_PATH                                = 1,
	SUB_PATH                                 = 2,
	RING_PATH                                = 3,
	SHORTCUT_PATH                            = 4,
	ITEM_SHORTCUT_PATH                       = 5,
	DASHBOARD_PATH                           = 6,
	ANOTHER_WORLD_PATH                       = 7,
	COURSE_GIMMIC_PATH                       = 8,
	RANDOM_ID_PATH                           = 9,
	Max                                      = 10,
};

// Enum UnionRun.EComPathLapType
// NumValues: 0x0004
enum class EComPathLapType : uint8
{
	LAP_NOMAL                                = 0,
	LAP_FINAL                                = 1,
	LAP_RESULT                               = 2,
	Max                                      = 3,
};

// Enum UnionRun.EComPathRandomId
// NumValues: 0x0006
enum class EComPathRandomId : uint8
{
	RANDOM_ID_0                              = 0,
	RANDOM_ID_1                              = 1,
	RANDOM_ID_2                              = 2,
	RANDOM_ID_3                              = 3,
	RANDOM_ID_4                              = 4,
	Max                                      = 5,
};

// Enum UnionRun.EComPathFileType
// NumValues: 0x0006
enum class EComPathFileType : uint8
{
	FOR_EDIT_DATA                            = 0,
	NOMAL_LAP_DATA                           = 1,
	NOMAL_RESULT_LAP_DATA                    = 2,
	FINAL_RESULT_LAP_DATA                    = 3,
	FILE_TYPE_NUM                            = 4,
	EComPathFileType_MAX                     = 5,
};

// Enum UnionRun.EGimmickComPathType
// NumValues: 0x0011
enum class EGimmickComPathType : uint8
{
	NONE                                     = 0,
	DARK_GAIA_PHOENIX_LW                     = 1,
	DARK_GAIA_PHOENIX_RW                     = 2,
	TENTACLE_L                               = 3,
	TENTACLE_R                               = 4,
	BUCKET_WHEEL_OVER                        = 5,
	BUCKET_WHEEL_UNDER                       = 6,
	DEATH_EGG_LP                             = 7,
	DEATH_EGG_RP                             = 8,
	BIG_TRAIN_SIDE1                          = 9,
	BIG_TRAIN_SIDE2                          = 10,
	BIG_TRAIN_UNDER                          = 11,
	ENEMY04002_LEFT                          = 12,
	ENEMY04002_RIGHT                         = 13,
	POLISHING_MACHINE_L                      = 14,
	POLISHING_MACHINE_R                      = 15,
	Max                                      = 16,
};

// Enum UnionRun.EUnionRacePostProcessEffectType
// NumValues: 0x0006
enum class EUnionRacePostProcessEffectType : uint8
{
	None                                     = 0,
	WaterFall                                = 1,
	Paint                                    = 2,
	SplashOfWater                            = 3,
	Flame                                    = 4,
	Max                                      = 5,
};

// Enum UnionRun.ETravelRingPPType
// NumValues: 0x0003
enum class ETravelRingPPType : uint8
{
	Start                                    = 0,
	End                                      = 1,
	Max                                      = 2,
};

// Enum UnionRun.EUnionNavMarkerType
// NumValues: 0x0015
enum class EUnionNavMarkerType : uint8
{
	None                                     = 0,
	StartLine_Vehicle                        = 1,
	LapGate                                  = 2,
	StartingGrid                             = 3,
	TravelRing_Notice                        = 4,
	TravelRing_Entrance                      = 5,
	TravelRing_Exit                          = 6,
	TravelRing_PP_Start                      = 7,
	TravelRing_PP_End                        = 8,
	Another_Confirm_Start                    = 9,
	Another_Confirm_End                      = 10,
	CheckPoint                               = 11,
	RespotPoint                              = 12,
	RemainDistance_1000                      = 13,
	RemainDistance_500                       = 14,
	RemainDistance_300                       = 15,
	RemainDistance_100                       = 16,
	FootcutPoint                             = 17,
	FootcutPoint_Final                       = 18,
	FootcutPoint_MainAnother                 = 19,
	Max                                      = 20,
};

// Enum UnionRun.EBoostPadType
// NumValues: 0x000C
enum class EBoostPadType : uint8
{
	A                                        = 0,
	B                                        = 1,
	C                                        = 2,
	Gate                                     = 3,
	Air                                      = 4,
	BankA                                    = 5,
	BankB                                    = 6,
	IrregularCar                             = 7,
	IrregularBoat                            = 8,
	IrregularPlane                           = 9,
	Num                                      = 10,
	EBoostPadType_MAX                        = 11,
};

// Enum UnionRun.ETransformRingType
// NumValues: 0x0004
enum class ETransformRingType : uint8
{
	Car                                      = 0,
	Plane                                    = 1,
	Boat                                     = 2,
	Max                                      = 3,
};

// Enum UnionRun.EPackageRingType
// NumValues: 0x0008
enum class EPackageRingType : uint8
{
	Num5                                     = 0,
	Num10                                    = 1,
	Num20                                    = 2,
	Num30                                    = 3,
	Num40                                    = 4,
	Num50                                    = 5,
	Special                                  = 6,
	Max                                      = 7,
};

// Enum UnionRun.ESplineMoveType
// NumValues: 0x0004
enum class ESplineMoveType : uint8
{
	Loop                                     = 0,
	Return                                   = 1,
	NoLoop                                   = 2,
	Max                                      = 3,
};

// Enum UnionRun.EShortcutRingType
// NumValues: 0x0003
enum class EShortcutRingType : uint8
{
	Entrance                                 = 0,
	Exit                                     = 1,
	Max                                      = 2,
};

// Enum UnionRun.EEnemyType
// NumValues: 0x0005
enum class EEnemyType : uint8
{
	None                                     = 0,
	TREX                                     = 1,
	TENTACLE                                 = 2,
	Num                                      = 3,
	EEnemyType_MAX                           = 4,
};

// Enum UnionRun.ECourseObjType
// NumValues: 0x0009
enum class ECourseObjType : uint8
{
	None                                     = 0,
	Balloon                                  = 1,
	BalloonJump                              = 2,
	BalloonJumpMove                          = 3,
	Bollard                                  = 4,
	FlyingBounce                             = 5,
	RingCircle                               = 6,
	Num                                      = 7,
	ECourseObjType_MAX                       = 8,
};

// Enum UnionRun.ETimingGimmickType
// NumValues: 0x000A
enum class ETimingGimmickType : uint8
{
	None                                     = 0,
	DarkGaiaPhoenix                          = 1,
	Tentacle                                 = 2,
	BucketWheel                              = 3,
	DeathEgg                                 = 4,
	BigTrain                                 = 5,
	Enemy04002                               = 6,
	PolishingMachine                         = 7,
	Num                                      = 8,
	ETimingGimmickType_MAX                   = 9,
};

// Enum UnionRun.ELapDataType
// NumValues: 0x0005
enum class ELapDataType : uint8
{
	Normal                                   = 0,
	Final                                    = 1,
	TimeAttack                               = 2,
	Num                                      = 3,
	ELapDataType_MAX                         = 4,
};

// Enum UnionRun.EJumpStandSize
// NumValues: 0x0008
enum class EJumpStandSize : uint8
{
	Mesh2x2                                  = 0,
	Mesh2x3                                  = 1,
	Mesh3x2                                  = 2,
	Mesh3x3                                  = 3,
	Mesh3x4                                  = 4,
	Mesh4x4                                  = 5,
	Num                                      = 6,
	EJumpStandSize_MAX                       = 7,
};

// Enum UnionRun.EJumpStandType
// NumValues: 0x000F
enum class EJumpStandType : uint8
{
	Deg5                                     = 0,
	Deg7                                     = 1,
	Deg10                                    = 2,
	Deg13                                    = 3,
	Deg15                                    = 4,
	Deg16                                    = 5,
	Deg19                                    = 6,
	Deg20                                    = 7,
	Deg22                                    = 8,
	Deg25                                    = 9,
	Deg30                                    = 10,
	Guided                                   = 11,
	Edit                                     = 12,
	Num                                      = 13,
	EJumpStandType_MAX                       = 14,
};

// Enum UnionRun.ECourseObjColType
// NumValues: 0x000E
enum class ECourseObjColType : uint8
{
	None                                     = 0,
	BoostPad                                 = 1,
	Respot                                   = 2,
	BreakObject                              = 3,
	CameraCollision                          = 4,
	EventCollision                           = 5,
	MoveCollision                            = 6,
	Enemy                                    = 7,
	GuidedJump                               = 8,
	PostEffectCollision                      = 9,
	ResultCameraCollision                    = 10,
	IgnoreGravityFallCollision               = 11,
	Num                                      = 12,
	ECourseObjColType_MAX                    = 13,
};

// Enum UnionRun.EDeathEggState
// NumValues: 0x0006
enum class EDeathEggState : uint8
{
	None                                     = 0,
	LeftPunch                                = 1,
	RightPunch                               = 2,
	PunchLoop                                = 3,
	PunchEnd                                 = 4,
	EDeathEggState_MAX                       = 5,
};

// Enum UnionRun.EEggDragoonState
// NumValues: 0x0006
enum class EEggDragoonState : uint8
{
	None                                     = 0,
	AttackStart                              = 1,
	AttackLoop                               = 2,
	AttackEnd                                = 3,
	WaitInterval                             = 4,
	EEggDragoonState_MAX                     = 5,
};

// Enum UnionRun.EEnemy04001State
// NumValues: 0x0007
enum class EEnemy04001State : uint8
{
	None                                     = 0,
	Move                                     = 1,
	AttackReady                              = 2,
	Attack                                   = 3,
	DownAttackReady                          = 4,
	DownAttack                               = 5,
	EEnemy04001State_MAX                     = 6,
};

// Enum UnionRun.EEnemy_Extnd06_Enemy06001_Type
// NumValues: 0x0006
enum class EEnemy_Extnd06_Enemy06001_Type : uint8
{
	None                                     = 0,
	Extnd06_Character06002                   = 1,
	Extnd06_Character06003                   = 2,
	Extnd06_Character06004                   = 3,
	Extnd06_Character06005                   = 4,
	EEnemy_Extnd06_Enemy06001_MAX            = 5,
};

// Enum UnionRun.EEnemy_Extnd06_Object_06001_Type
// NumValues: 0x0005
enum class EEnemy_Extnd06_Object_06001_Type : uint8
{
	None                                     = 0,
	Extnd06_Object_06001                     = 1,
	Extnd06_Object_06002                     = 2,
	Extnd06_Object_06003                     = 3,
	EEnemy_Extnd06_Object_06001_MAX          = 4,
};

// Enum UnionRun.EGimmickBollardType
// NumValues: 0x0007
enum class EGimmickBollardType : uint8
{
	None                                     = 0,
	Orange                                   = 1,
	Blue                                     = 2,
	Green                                    = 3,
	Red                                      = 4,
	Yellow                                   = 5,
	EGimmickBollardType_MAX                  = 6,
};

// Enum UnionRun.EBubbleBonusType
// NumValues: 0x0009
enum class EBubbleBonusType : uint8
{
	ItemBox                                  = 0,
	ItemBox_W                                = 1,
	ItemBox_SP                               = 2,
	PackageRing_5_Ring                       = 3,
	PackageRing_10_Ring                      = 4,
	PackageRing_20_Ring                      = 5,
	PackageRing_100_Ring                     = 6,
	BonusMaxRange                            = 7,
	EBubbleBonusType_MAX                     = 8,
};

// Enum UnionRun.EDonutHoopCenterObjectType
// NumValues: 0x0004
enum class EDonutHoopCenterObjectType : uint8
{
	Nothing                                  = 0,
	PackageRing                              = 1,
	ItemBox                                  = 2,
	EDonutHoopCenterObjectType_MAX           = 3,
};

// Enum UnionRun.EGUNHunterMotion
// NumValues: 0x0005
enum class EGUNHunterMotion : uint8
{
	WaitSky                                  = 0,
	WaitGround                               = 1,
	MoveHover                                = 2,
	MoveWalk                                 = 3,
	EGUNHunterMotion_MAX                     = 4,
};

// Enum UnionRun.EPaintShowerHeightRecalcTiming
// NumValues: 0x0005
enum class EPaintShowerHeightRecalcTiming : uint8
{
	None                                     = 0,
	Init                                     = 1,
	StartShower                              = 2,
	EveryFrame                               = 3,
	EPaintShowerHeightRecalcTiming_MAX       = 4,
};

// Enum UnionRun.EPolishingMachineAllowBounceType
// NumValues: 0x0005
enum class EPolishingMachineAllowBounceType : uint8
{
	None                                     = 0,
	Invisible                                = 1,
	AttackItem                               = 2,
	NormalCar                                = 4,
	EPolishingMachineAllowBounceType_MAX     = 5,
};

// Enum UnionRun.ECircleState
// NumValues: 0x0006
enum class ECircleState : uint8
{
	Idle                                     = 0,
	Move                                     = 1,
	SuckWait                                 = 2,
	Suck                                     = 3,
	RespawnWait                              = 4,
	ECircleState_MAX                         = 5,
};

// Enum UnionRun.EStruckoutCenterType
// NumValues: 0x0005
enum class EStruckoutCenterType : uint8
{
	Nothing                                  = 0,
	ItemBox                                  = 1,
	PackageRing                              = 2,
	Panel                                    = 3,
	EStruckoutCenterType_MAX                 = 4,
};

// Enum UnionRun.EStruckoutPanelBonus
// NumValues: 0x0003
enum class EStruckoutPanelBonus : uint8
{
	ItemBox                                  = 0,
	PackageRing                              = 1,
	EStruckoutPanelBonus_MAX                 = 2,
};

// Enum UnionRun.ETriggerMotionType
// NumValues: 0x0004
enum class ETriggerMotionType : uint8
{
	Interval                                 = 0,
	Idle                                     = 1,
	OneShot                                  = 2,
	ETriggerMotionType_MAX                   = 3,
};

// Enum UnionRun.ETriggerMotionState
// NumValues: 0x0005
enum class ETriggerMotionState : uint8
{
	NoTrigger                                = 0,
	Idle                                     = 1,
	OneShot                                  = 2,
	End                                      = 3,
	ETriggerMotionState_MAX                  = 4,
};

// Enum UnionRun.ETriggerFlags
// NumValues: 0x0008
enum class ETriggerFlags : uint8
{
	None                                     = 0,
	PassGateSound                            = 1,
	DisableWhiteout                          = 2,
	OverrideBGM                              = 4,
	RevertBGM                                = 8,
	ChangeMap                                = 16,
	RevertMap                                = 32,
	ETriggerFlags_MAX                        = 33,
};

// Enum UnionRun.EGimmick_Extnd06_Barricade_Type
// NumValues: 0x0006
enum class EGimmick_Extnd06_Barricade_Type : uint8
{
	None                                     = 0,
	Size30m                                  = 1,
	Size50m                                  = 2,
	Size70m                                  = 3,
	Size90m                                  = 4,
	EGimmick_Extnd06_Barricade_MAX           = 5,
};

// Enum UnionRun.EGimmick_Extnd06_Enemy06002_SpeedClassId
// NumValues: 0x0006
enum class EGimmick_Extnd06_Enemy06002_SpeedClassId : uint8
{
	None                                     = 0,
	NormalSpeed                              = 1,
	HighSpeed                                = 2,
	SonicSpeed                               = 3,
	SuperSonicSpeed                          = 4,
	EGimmick_Extnd06_Enemy06002_MAX          = 5,
};

// Enum UnionRun.AGimmick_Extnd06_Gate_Type
// NumValues: 0x0003
enum class EAGimmick_Extnd06_Gate_Type : uint8
{
	EnterMaze                                = 0,
	ExitMaze                                 = 1,
	AGimmick_Extnd06_Gate_MAX                = 2,
};

// Enum UnionRun.EExtnd07GateKind
// NumValues: 0x0006
enum class EExtnd07GateKind : uint8
{
	MagicGate01                              = 0,
	MagicGate02                              = 1,
	MagicGate03                              = 2,
	MagicGate04                              = 3,
	Num                                      = 4,
	EExtnd07GateKind_MAX                     = 5,
};

// Enum UnionRun.EExtnd07Area
// NumValues: 0x0004
enum class EExtnd07Area : uint8
{
	Island                                   = 0,
	Temple                                   = 1,
	Num                                      = 2,
	EExtnd07Area_MAX                         = 3,
};

// Enum UnionRun.EGUNHunterStartType
// NumValues: 0x0007
enum class EGUNHunterStartType : uint8
{
	None                                     = 0,
	Ground                                   = 1,
	Sky                                      = 2,
	Walk                                     = 3,
	Hover                                    = 4,
	LookAround                               = 5,
	EGUNHunterStartType_MAX                  = 6,
};

// Enum UnionRun.EGUNHunterShootState
// NumValues: 0x0005
enum class EGUNHunterShootState : uint8
{
	None                                     = 0,
	Start                                    = 1,
	Shoot                                    = 2,
	ShootEnd                                 = 3,
	EGUNHunterShootState_MAX                 = 4,
};

// Enum UnionRun.EPerformanceObjectType
// NumValues: 0x0007
enum class EPerformanceObjectType : uint8
{
	Unknown                                  = 0,
	Slime                                    = 1,
	Weight                                   = 2,
	DarkChao                                 = 3,
	WarpRingStart                            = 4,
	WarpRingEnd                              = 5,
	EPerformanceObjectType_MAX               = 6,
};

// Enum UnionRun.EPackageRingNumColor
// NumValues: 0x0005
enum class EPackageRingNumColor : uint8
{
	Grey                                     = 0,
	Yellow                                   = 1,
	Pink                                     = 2,
	Blue                                     = 3,
	EPackageRingNumColor_MAX                 = 4,
};

// Enum UnionRun.ERaceTestRacerRunMode
// NumValues: 0x0005
enum class ERaceTestRacerRunMode : uint8
{
	DEFAULT                                  = 0,
	FORCE_COM                                = 1,
	PERFORMANCE_TEST                         = 2,
	Num                                      = 3,
	ERaceTestRacerRunMode_MAX                = 4,
};

// Enum UnionRun.ERaceTestSelectTravelType
// NumValues: 0x0006
enum class ERaceTestSelectTravelType : uint8
{
	DEFAULT                                  = 0,
	SELECT_LEFT                              = 1,
	SELECT_RIGHT                             = 2,
	SELECT_CONFLICT                          = 3,
	Num                                      = 4,
	ERaceTestSelectTravelType_MAX            = 5,
};

// Enum UnionRun.ERaceLoadTestMode
// NumValues: 0x0006
enum class ERaceLoadTestMode : uint8
{
	None                                     = 0,
	Steady                                   = 1,
	Peak                                     = 2,
	Normal                                   = 3,
	Num                                      = 4,
	ERaceLoadTestMode_MAX                    = 5,
};

// Enum UnionRun.ERaceTestPathSelectType
// NumValues: 0x0005
enum class ERaceTestPathSelectType : uint8
{
	MainPath                                 = 0,
	SubPath                                  = 1,
	Random                                   = 2,
	Num                                      = 3,
	ERaceTestPathSelectType_MAX              = 4,
};

// Enum UnionRun.ERaceLoadTestPlatform
// NumValues: 0x0009
enum class ERaceLoadTestPlatform : uint8
{
	Default                                  = 0,
	Switch                                   = 1,
	PS4                                      = 2,
	PS5                                      = 3,
	XBO                                      = 4,
	XBS                                      = 5,
	Windows                                  = 6,
	NUM                                      = 7,
	ERaceLoadTestPlatform_MAX                = 8,
};

// Enum UnionRun.EBtnGuidePlatFormController
// NumValues: 0x0006
enum class EBtnGuidePlatFormController : uint8
{
	BtnGuide_PC                              = 0,
	BtnGuide_PS                              = 1,
	BtnGuide_XBOX                            = 2,
	BtnGuide_NX                              = 3,
	BtnGuide_NXSingle                        = 4,
	BtnGuide_Max                             = 5,
};

// Enum UnionRun.ESimpleMoveLoopType
// NumValues: 0x0004
enum class ESimpleMoveLoopType : uint8
{
	Return                                   = 0,
	ReversalReturn                           = 1,
	Loop                                     = 2,
	ESimpleMoveLoopType_MAX                  = 3,
};

// Enum UnionRun.ESquidState
// NumValues: 0x0003
enum class ESquidState : uint8
{
	Wait                                     = 0,
	Move                                     = 1,
	ESquidState_MAX                          = 2,
};

// Enum UnionRun.EEaseType
// NumValues: 0x000D
enum class EEaseType : uint8
{
	LinearEaseIn                             = 0,
	LinearEaseOut                            = 1,
	LinearEaseInOut                          = 2,
	QuadraticEaseIn                          = 3,
	QuadraticEaseOut                         = 4,
	QuadraticEaseInOut                       = 5,
	CubicEaseIn                              = 6,
	CubicEaseOut                             = 7,
	CubicEaseInOut                           = 8,
	QuarticEaseIn                            = 9,
	QuarticEaseOut                           = 10,
	QuarticEaseInOut                         = 11,
	EEaseType_MAX                            = 12,
};

// Enum UnionRun.ETimeCountCollisionType
// NumValues: 0x0003
enum class ETimeCountCollisionType : uint8
{
	Start                                    = 0,
	End                                      = 1,
	Max                                      = 2,
};

// Enum UnionRun.ETowerState
// NumValues: 0x0005
enum class ETowerState : uint8
{
	Wait                                     = 0,
	BreakStart                               = 1,
	BreakLoop                                = 2,
	BreakEnd                                 = 3,
	ETowerState_MAX                          = 4,
};

// Enum UnionRun.EUnionAttackItemInfoType
// NumValues: 0x0004
enum class EUnionAttackItemInfoType : uint8
{
	Item                                     = 0,
	Racer                                    = 1,
	Enemy                                    = 2,
	EUnionAttackItemInfoType_MAX             = 3,
};

// Enum UnionRun.EBreakObjType
// NumValues: 0x000D
enum class EBreakObjType : uint8
{
	NONE                                     = 0,
	PILLAR                                   = 1,
	CHIP_A                                   = 2,
	CHIP_B                                   = 3,
	CACTUS                                   = 4,
	COOKIE                                   = 5,
	ROADSIGN                                 = 6,
	CONSTRUCTIONITEM                         = 7,
	ASTEROID                                 = 8,
	CRYSTAL                                  = 9,
	BLOCK                                    = 10,
	Num                                      = 11,
	EBreakObjType_MAX                        = 12,
};

// Enum UnionRun.EBreakConditionType
// NumValues: 0x0006
enum class EBreakConditionType : uint8
{
	Speed                                    = 0,
	Invincible                               = 1,
	All                                      = 2,
	NoBreak                                  = 3,
	Num                                      = 4,
	EBreakConditionType_MAX                  = 5,
};

// Enum UnionRun.EBreakDamageType
// NumValues: 0x0006
enum class EBreakDamageType : uint8
{
	None                                     = 0,
	NotInvincible                            = 1,
	NotItemDash                              = 2,
	All                                      = 3,
	Num                                      = 4,
	EBreakDamageType_MAX                     = 5,
};

// Enum UnionRun.EUnionCameraModifierPostEffectType
// NumValues: 0x000B
enum class EUnionCameraModifierPostEffectType : uint8
{
	CameraPostEffect                         = 0,
	NoBlurCameraPostEffect                   = 1,
	FlowingWaterEffect                       = 2,
	BlackoutEffect                           = 3,
	WhiteoutEffect                           = 4,
	WarpRingEffect                           = 5,
	InkEffect                                = 6,
	Extnd04PostEffect                        = 7,
	Stg1503FinalInEffect                     = 8,
	Stg1503FinalOutEffect                    = 9,
	Max                                      = 10,
};

// Enum UnionRun.ECameraMachineFormType
// NumValues: 0x000A
enum class ECameraMachineFormType : uint8
{
	Car                                      = 0,
	Boat                                     = 1,
	Plane                                    = 2,
	YellowDrill                              = 3,
	MonsterTruck                             = 4,
	HoverBoard                               = 5,
	CyanLaser                                = 6,
	WarpRing                                 = 7,
	NUM                                      = 8,
	ECameraMachineFormType_MAX               = 9,
};

// Enum UnionRun.EUnionCameraPriority
// NumValues: 0x0004
enum class EUnionCameraPriority : uint8
{
	Default                                  = 0,
	ItemCamera                               = 10,
	PublicityCamera                          = 20,
	EUnionCameraPriority_MAX                 = 21,
};

// Enum UnionRun.EBounceVecFixedType
// NumValues: 0x0004
enum class EBounceVecFixedType : uint8
{
	None                                     = 0,
	Valid                                    = 1,
	BoostValid                               = 2,
	Max                                      = 3,
};

// Enum UnionRun.ERacerDamageReactionType
// NumValues: 0x0006
enum class ERacerDamageReactionType : uint8
{
	Non                                      = 0,
	Large                                    = 1,
	Medium                                   = 2,
	Small                                    = 3,
	Num                                      = 4,
	ERacerDamageReactionType_MAX             = 5,
};

// Enum UnionRun.ERacerDamageNotifyType
// NumValues: 0x0009
enum class ERacerDamageNotifyType : uint8
{
	None                                     = 0,
	TimeElapsed                              = 1,
	FinishedSucceed                          = 2,
	FinishedOverwritten                      = 4,
	AttackSucced                             = 32,
	AttackFailed                             = 16,
	AttackMissingShot                        = 64,
	Num                                      = 65,
	ERacerDamageNotifyType_MAX               = 66,
};

// Enum UnionRun.EItemUnavailableDamageType
// NumValues: 0x0009
enum class EItemUnavailableDamageType : uint8
{
	Non                                      = 0,
	DecelerationDamage                       = 1,
	NormalDamage                             = 2,
	SpinDamage                               = 3,
	SquashedDamage                           = 4,
	LostDoubleDamage                         = 5,
	LostSingleDamage                         = 6,
	Num                                      = 7,
	EItemUnavailableDamageType_MAX           = 8,
};

// Enum UnionRun.ERacerDamagePropertyChangeType
// NumValues: 0x0004
enum class ERacerDamagePropertyChangeType : uint8
{
	SpeedlValue                              = 0,
	Ratio                                    = 1,
	Num                                      = 2,
	ERacerDamagePropertyChangeType_MAX       = 3,
};

// Enum UnionRun.EDroneShowType
// NumValues: 0x0006
enum class EDroneShowType : uint8
{
	Invalid                                  = 0,
	Dismiss                                  = 1,
	CurrentLap                               = 2,
	RemainDistance                           = 3,
	CautionWrongWay                          = 4,
	EDroneShowType_MAX                       = 5,
};

// Enum UnionRun.EDroneDismissType
// NumValues: 0x0005
enum class EDroneDismissType : uint8
{
	AllType                                  = 0,
	RemainDistance                           = 1,
	CurrentLap                               = 2,
	CautionWrongWay                          = 3,
	EDroneDismissType_MAX                    = 4,
};

// Enum UnionRun.EDroneCurrentLap
// NumValues: 0x0005
enum class EDroneCurrentLap : uint8
{
	Lap3                                     = 0,
	Lap2                                     = 1,
	Lap1                                     = 2,
	LapUnknown                               = 3,
	EDroneCurrentLap_MAX                     = 4,
};

// Enum UnionRun.EGimmickContactType
// NumValues: 0x000B
enum class EGimmickContactType : uint8
{
	None                                     = 0,
	UnBreakable                              = 1,
	UnBreakableAndSendDamage                 = 2,
	Break                                    = 3,
	BreakAndSendDamage                       = 4,
	InvincibleBreak                          = 5,
	MachineOnlyHit                           = 6,
	MachineOnlyHitAndSendDamage              = 7,
	InvincibleBreakAndSendDamage             = 8,
	Num                                      = 9,
	EGimmickContactType_MAX                  = 10,
};

// Enum UnionRun.ETeamBoostType
// NumValues: 0x0005
enum class ETeamBoostType : uint8
{
	UnKnown                                  = 0,
	RingEnergy                               = 1,
	FriendEnergy                             = 2,
	Num                                      = 3,
	ETeamBoostType_MAX                       = 4,
};

// Enum UnionRun.EAimType
// NumValues: 0x0007
enum class EAimType : uint8
{
	Idle                                     = 0,
	BeforeShot                               = 1,
	AfterShot                                = 2,
	ManualIdle                               = 3,
	ManualLockOn                             = 4,
	Num                                      = 5,
	EAimType_MAX                             = 6,
};

// Enum UnionRun.EPre1stLotteryDataType
// NumValues: 0x0009
enum class EPre1stLotteryDataType : uint8
{
	Rank_1                                   = 0,
	Race_2_Distance_200M                     = 1,
	Race_2_Distance_OVER_200M                = 2,
	Race_3_Distance_200M                     = 3,
	Race_3_Distance_OVER_200M                = 4,
	Race_4TO12_Distance_200M                 = 5,
	Race_4TO12_Distance_OVER_200M            = 6,
	Num                                      = 7,
	EPre1stLotteryDataType_MAX               = 8,
};

// Enum UnionRun.ELotteryRateType
// NumValues: 0x0007
enum class ELotteryRateType : uint8
{
	NormalBox_Offline                        = 0,
	NormalBox_Online                         = 1,
	SpecialBox_Offline                       = 2,
	SpecialBox_Online                        = 3,
	Gadget                                   = 4,
	Num                                      = 5,
	ELotteryRateType_MAX                     = 6,
};

// Enum UnionRun.EPointDistanceGroup
// NumValues: 0x0012
enum class EPointDistanceGroup : uint8
{
	Group01                                  = 0,
	Group02                                  = 1,
	Group03                                  = 2,
	Group04                                  = 3,
	Group05                                  = 4,
	Group06                                  = 5,
	Group07                                  = 6,
	Group08                                  = 7,
	Group09                                  = 8,
	Group10                                  = 9,
	Group11                                  = 10,
	Group12                                  = 11,
	Group13                                  = 12,
	Group14                                  = 13,
	Group15                                  = 14,
	Group16                                  = 15,
	Num                                      = 16,
	EPointDistanceGroup_MAX                  = 17,
};

// Enum UnionRun.EComPointDistanceTableType
// NumValues: 0x0007
enum class EComPointDistanceTableType : uint8
{
	ComTableType01                           = 0,
	ComTableType02                           = 1,
	ComTableType03                           = 2,
	ComTableType04                           = 3,
	ComTableType05                           = 4,
	Num                                      = 5,
	EComPointDistanceTableType_MAX           = 6,
};

// Enum UnionRun.EComLotteryRateDataTableType
// NumValues: 0x0007
enum class EComLotteryRateDataTableType : uint8
{
	ComTableType01                           = 0,
	ComTableType02                           = 1,
	ComTableType03                           = 2,
	ComTableType04                           = 3,
	ComTableType05                           = 4,
	Num                                      = 5,
	EComLotteryRateDataTableType_MAX         = 6,
};

// Enum UnionRun.EPlayerPointDistanceTableType
// NumValues: 0x0006
enum class EPlayerPointDistanceTableType : uint8
{
	PlayerTableTypeGrandPrix                 = 0,
	PlayerTableTypeGroup                     = 1,
	PlayerTableTypeOther                     = 2,
	PlayerTableTypeDangerous                 = 3,
	Num                                      = 4,
	EPlayerPointDistanceTableType_MAX        = 5,
};

// Enum UnionRun.EPlayerLotteryRateDataTableType
// NumValues: 0x0005
enum class EPlayerLotteryRateDataTableType : uint8
{
	PlayerTableTypeNormal                    = 0,
	PlayerTableTypeDangerous                 = 1,
	PlayerTableTypeOther                     = 2,
	Num                                      = 3,
	EPlayerLotteryRateDataTableType_MAX      = 4,
};

// Enum UnionRun.EGearLevel
// NumValues: 0x0005
enum class EGearLevel : uint8
{
	GearLv1                                  = 0,
	GearLv2                                  = 1,
	GearLv3                                  = 2,
	GearLv4                                  = 3,
	Max                                      = 4,
};

// Enum UnionRun.EChargeLevel
// NumValues: 0x0005
enum class EChargeLevel : uint8
{
	ChargeLv1                                = 0,
	ChargeLv2                                = 1,
	ChargeLv3                                = 2,
	ChargeLv4                                = 3,
	Max                                      = 4,
};

// Enum UnionRun.ENavMarkerLapType
// NumValues: 0x0004
enum class ENavMarkerLapType : uint8
{
	Common                                   = 0,
	FirstLap                                 = 1,
	FinalLap                                 = 2,
	Max                                      = 3,
};

// Enum UnionRun.ERaceActionTutorialId
// NumValues: 0x0006
enum class ERaceActionTutorialId : uint8
{
	Drift                                    = 0,
	AirTrick                                 = 1,
	Airplane                                 = 2,
	Boat                                     = 3,
	Num                                      = 4,
	ERaceActionTutorialId_MAX                = 5,
};

// Enum UnionRun.ERaceInfoEventType
// NumValues: 0x0005
enum class ERaceInfoEventType : uint8
{
	Race_ChangeState                         = 0,
	Race_CountDown                           = 1,
	Race_Finish                              = 2,
	Num                                      = 3,
	ERaceInfoEventType_MAX                   = 4,
};

// Enum UnionRun.ERaceInfoStateType
// NumValues: 0x0007
enum class ERaceInfoStateType : uint8
{
	Idle                                     = 0,
	Countdown                                = 1,
	OnRace                                   = 2,
	Finish                                   = 3,
	Exit                                     = 4,
	Num                                      = 5,
	ERaceInfoStateType_MAX                   = 6,
};

// Enum UnionRun.EDomainSub
// NumValues: 0x0007
enum class EDomainSub : uint8
{
	DomainSub0                               = 0,
	DomainSub1                               = 1,
	DomainSub2                               = 2,
	DomainSub3                               = 3,
	DomainSubMax                             = 4,
	InvalidDomainSub                         = 255,
	EDomainSub_MAX                           = 256,
};

// Enum UnionRun.EMinimapIconType
// NumValues: 0x0003
enum class EMinimapIconType : uint8
{
	Character                                = 0,
	Item                                     = 1,
	EMinimapIconType_MAX                     = 2,
};

// Enum UnionRun.ERacerReactionDriverType
// NumValues: 0x0006
enum class ERacerReactionDriverType : uint8
{
	Player                                   = 0,
	Rival                                    = 1,
	PowerRival                               = 2,
	Other                                    = 3,
	Num                                      = 4,
	ERacerReactionDriverType_MAX             = 5,
};

// Enum UnionRun.ERacerReactionVoiceType
// NumValues: 0x0007
enum class ERacerReactionVoiceType : uint8
{
	None                                     = 0,
	RandomVoice                              = 1,
	ChrVoice                                 = 2,
	LinkVoice                                = 3,
	RivalVoice                               = 4,
	Num                                      = 5,
	ERacerReactionVoiceType_MAX              = 6,
};

// Enum UnionRun.RacerReactionPriority
// NumValues: 0x0008
enum class ERacerReactionPriority : uint8
{
	Force                                    = 0,
	Stack                                    = 1,
	Normal                                   = 2,
	ForcePlayerVoice                         = 3,
	Other                                    = 4,
	Result                                   = 5,
	Num                                      = 6,
	RacerReactionPriority_MAX                = 7,
};

// Enum UnionRun.ERacerReactionId
// NumValues: 0x006C
enum class ERacerReactionId : uint8
{
	None                                     = 0,
	ItemHold                                 = 1,
	ItemHoldBlackBom                         = 2,
	ItemUseSpeedUp                           = 3,
	ItemUseMonstertruck                      = 4,
	ItemUseDefence                           = 5,
	ItemUseAttackFront                       = 6,
	ItemUseSamonRing                         = 7,
	ItemUseRingCarryingItemAvoid             = 8,
	ItemUseInvincibilityDefense              = 9,
	ItemUseKingBooBoo                        = 10,
	ItemUsePutBehind                         = 11,
	ItemUsePackageRing                       = 12,
	ItemUseWarpRing                          = 13,
	ItemStealVioletVoid                      = 14,
	ItemStealDarkChao                        = 15,
	ItemHit                                  = 16,
	ItemHitBodyCut                           = 17,
	RunDamage                                = 18,
	RunSpin                                  = 19,
	RunPress                                 = 20,
	RunBodyCutDamage                         = 21,
	ItemDamage                               = 22,
	Ring100                                  = 23,
	EnemyHit                                 = 24,
	EnemyHitWin                              = 25,
	EnemyOvertake                            = 26,
	OwnOvertaken                             = 27,
	CourseWallHit                            = 28,
	CourseObjectDestroy                      = 29,
	CourseShortcutRing                       = 30,
	CourseFall                               = 31,
	CourseReverse                            = 32,
	CourseRoadSlow                           = 33,
	CourseTravelRouteDecision                = 34,
	CourseChrUnique1                         = 35,
	CourseChrUnique2                         = 36,
	CourseChrUnique3                         = 37,
	RunDash                                  = 38,
	DriftDash1                               = 39,
	DriftDash2                               = 40,
	DriftDash3                               = 41,
	RunStartDashLittle                       = 42,
	RunStartDash                             = 43,
	RunStartDashExcellent                    = 44,
	RunStartDashFailed                       = 45,
	RunSlipstream                            = 46,
	RunAerialStunt                           = 47,
	RunAerialStunt2                          = 48,
	RunAerialStunt3                          = 49,
	BeforeStart                              = 50,
	BeforeStartRound1                        = 51,
	BeforeStartFinalRound1st                 = 52,
	BeforeStartFinalRoundEtc                 = 53,
	Goal1                                    = 54,
	Goal2_3                                  = 55,
	Goal4_9                                  = 56,
	Goal10_12                                = 57,
	Rival_Start_FinalRoundWin                = 58,
	Rival_Start_FinalRoundLose               = 59,
	Rival_CheckPoint_PlayerLead              = 60,
	Rival_RivalIsAhead_NearOwn               = 61,
	Rival_OwnIsAhead_NearRival               = 62,
	Rival_Overtake                           = 63,
	Rival_OwnOvertaken                       = 64,
	Rival_Travel_RivalDecision               = 65,
	Rival_Travel_OwnDecision                 = 66,
	Rival_Own1st                             = 67,
	TimeTrial_CheckPointAhead                = 68,
	TimeTrial_GoalWin                        = 69,
	TimeTrial_GoalLose                       = 70,
	RankMatchStartPromotion                  = 71,
	FestivalStart                            = 72,
	Result_RankGaugeUp                       = 73,
	Result_RankGaugeDown                     = 74,
	Result_RankUp_E                          = 75,
	Result_RankUp_EPlus                      = 76,
	Result_RankUp_DMinus                     = 77,
	Result_RankUp_D                          = 78,
	Result_RankUp_DPlus                      = 79,
	Result_RankUp_CMinus                     = 80,
	Result_RankUp_C                          = 81,
	Result_RankUp_CPlus                      = 82,
	Result_RankUp_BMinus                     = 83,
	Result_RankUp_B                          = 84,
	Result_RankUp_BPlus                      = 85,
	Result_RankUp_AMinus                     = 86,
	Result_RankUp_A                          = 87,
	Result_RankUp_APlus                      = 88,
	Result_RankUp_LEGEND9                    = 89,
	Result_RankUp_LEGEND8                    = 90,
	Result_RankUp_LEGEND7                    = 91,
	Result_RankUp_LEGEND6                    = 92,
	Result_RankUp_LEGEND5                    = 93,
	Result_RankUp_LEGEND4                    = 94,
	Result_RankUp_LEGEND3                    = 95,
	Result_RankUp_LEGEND2                    = 96,
	Result_RankUp_LEGEND1                    = 97,
	CouseStartUnique                         = 98,
	CouseStart                               = 99,
	TimeTrial_CheckPointLeading              = 100,
	TimeTrial_NewBestTime                    = 101,
	TimeTrial_BestTimeFailed                 = 102,
	TimeTrial_PlayerWin                      = 103,
	TimeTrial_PlayerLose                     = 104,
	Test                                     = 105,
	Num                                      = 106,
	ERacerReactionId_MAX                     = 107,
};

// Enum UnionRun.ERacerReactionWindow
// NumValues: 0x0007
enum class ERacerReactionWindow : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Emphasis                                 = 2,
	Rival                                    = 3,
	PowerRival                               = 4,
	Num                                      = 5,
	ERacerReactionWindow_MAX                 = 6,
};

// Enum UnionRun.ERacerReactionSplitDispType
// NumValues: 0x0004
enum class ERacerReactionSplitDispType : uint8
{
	Normal                                   = 0,
	All                                      = 1,
	Num                                      = 2,
	ERacerReactionSplitDispType_MAX          = 3,
};

// Enum UnionRun.ESerifUISubCharaId
// NumValues: 0x000A
enum class ESerifUISubCharaId : uint8
{
	None                                     = 0,
	Omochao                                  = 1,
	Dodonpa                                  = 2,
	DarkChao                                 = 3,
	Orbot                                    = 4,
	Cubot                                    = 5,
	HeroChao                                 = 6,
	Chao                                     = 7,
	Num                                      = 8,
	ESerifUISubCharaId_MAX                   = 9,
};

// Enum UnionRun.EUnionRaceStageDataValidity
// NumValues: 0x0005
enum class EUnionRaceStageDataValidity : uint8
{
	Invalid                                  = 0,
	Completeness                             = 1,
	BasicLapOnly                             = 2,
	FinalLapOnly                             = 3,
	EUnionRaceStageDataValidity_MAX          = 4,
};

// Enum UnionRun.EComGadgetEquipTableType
// NumValues: 0x0003
enum class EComGadgetEquipTableType : uint8
{
	Preset                                   = 0,
	Random                                   = 1,
	EComGadgetEquipTableType_MAX             = 2,
};

// Enum UnionRun.ERaceItemCategory
// NumValues: 0x0007
enum class ERaceItemCategory : uint8
{
	None                                     = 0,
	Accele                                   = 1,
	Offense                                  = 2,
	Defense                                  = 3,
	Place                                    = 4,
	Num                                      = 5,
	ERaceItemCategory_MAX                    = 6,
};

// Enum UnionRun.EUnionRaceHUDPackageRingState
// NumValues: 0x0005
enum class EUnionRaceHUDPackageRingState : uint8
{
	None                                     = 0,
	NoticeTake                               = 1,
	ApplyReserve                             = 2,
	Num                                      = 3,
	EUnionRaceHUDPackageRingState_MAX        = 4,
};

// Enum UnionRun.EUnionRaceHUDItemIconsState
// NumValues: 0x0006
enum class EUnionRaceHUDItemIconsState : uint8
{
	None                                     = 0,
	InAnimating                              = 1,
	Facing                                   = 2,
	OutAnimating                             = 3,
	Num                                      = 4,
	EUnionRaceHUDItemIconsState_MAX          = 5,
};

// Enum UnionRun.EUnionRaceHUDApproachState
// NumValues: 0x0006
enum class EUnionRaceHUDApproachState : uint8
{
	Hidden                                   = 0,
	Lv1                                      = 1,
	Lv2                                      = 2,
	Lv3                                      = 3,
	Num                                      = 4,
	EUnionRaceHUDApproachState_MAX           = 5,
};

// Enum UnionRun.EUnionRaceHUDSubType
// NumValues: 0x0010
enum class EUnionRaceHUDSubType : uint8
{
	Item                                     = 0,
	CourseMap                                = 1,
	Rank                                     = 2,
	RingNum                                  = 3,
	Lap                                      = 4,
	MyPlayerInfo                             = 5,
	OtherPlayerInfo                          = 6,
	ItemHitInfo                              = 7,
	WarningInfo                              = 8,
	RacerApproachInfo                        = 9,
	Reaction                                 = 10,
	Gadget                                   = 11,
	Navigation                               = 12,
	Irregular                                = 13,
	Num                                      = 14,
	EUnionRaceHUDSubType_MAX                 = 15,
};

// Enum UnionRun.ERedStarRingUIType
// NumValues: 0x0003
enum class ERedStarRingUIType : uint8
{
	Race                                     = 0,
	Menu                                     = 1,
	ERedStarRingUIType_MAX                   = 2,
};

// Enum UnionRun.ERedStarRingAcquisitionType
// NumValues: 0x0006
enum class ERedStarRingAcquisitionType : uint8
{
	NONE                                     = 0,
	New                                      = 1,
	Acquired                                 = 2,
	Unearned                                 = 3,
	Overlap                                  = 4,
	ERedStarRingAcquisitionType_MAX          = 5,
};

// Enum UnionRun.ERedstarRingAllGetType
// NumValues: 0x0004
enum class ERedstarRingAllGetType : uint8
{
	NONE                                     = 0,
	Complete                                 = 1,
	Perfect                                  = 2,
	ERedstarRingAllGetType_MAX               = 3,
};

// Enum UnionRun.EUnionRaceUIResultSceneState
// NumValues: 0x0007
enum class EUnionRaceUIResultSceneState : uint8
{
	Invalid                                  = 0,
	Ranking                                  = 1,
	PartyRaceMissionIn                       = 2,
	PartyRaceMissionIdle                     = 3,
	DonpaTicket                              = 4,
	Finished                                 = 5,
	EUnionRaceUIResultSceneState_MAX         = 6,
};

// Enum UnionRun.ERandomObjType
// NumValues: 0x0020
enum class ERandomObjType : uint8
{
	None                                     = 0,
	TREX                                     = 1,
	KrakenCommon                             = 2,
	Balloon                                  = 3,
	Struckout                                = 4,
	SmallTrain                               = 5,
	TrainSmoke                               = 6,
	PhoenixPhase2                            = 7,
	PhoenixPhase3                            = 8,
	FireDragon                               = 9,
	MagmaDrop                                = 10,
	PumpkinBoo                               = 11,
	BooPlane                                 = 12,
	StoneStatue                              = 13,
	FlyingBounce                             = 14,
	RingCircle                               = 15,
	Truck                                    = 16,
	RollnigSpike                             = 17,
	ShortcutRing                             = 18,
	Extnd06_Maze                             = 19,
	Extnd06_Object_06001                     = 20,
	FlowerTentacle                           = 21,
	Extnd05_Enemy04004_A                     = 22,
	Extnd05_Enemy04004_B                     = 23,
	RollingRock                              = 24,
	FieldLaser                               = 25,
	DonutRail                                = 26,
	BakubakuBeginning                        = 27,
	BakubakuEnding                           = 28,
	PumpkinItemBoo                           = 29,
	Num                                      = 30,
	ERandomObjType_MAX                       = 31,
};

// Enum UnionRun.ESpecialObjGroup
// NumValues: 0x001E
enum class ESpecialObjGroup : uint8
{
	All                                      = 0,
	A_A                                      = 1,
	A_B                                      = 2,
	A_C                                      = 3,
	B_A                                      = 4,
	B_B                                      = 5,
	B_C                                      = 6,
	C_A                                      = 7,
	C_B                                      = 8,
	C_C                                      = 9,
	D_A                                      = 10,
	D_B                                      = 11,
	E_A                                      = 12,
	E_B                                      = 13,
	F_A                                      = 14,
	F_B                                      = 15,
	Num                                      = 16,
	GroupABegin                              = 1,
	GroupAEnd                                = 3,
	GroupBBegin                              = 4,
	GroupBEnd                                = 6,
	GroupCBegin                              = 7,
	GroupCEnd                                = 9,
	GroupDBegin                              = 10,
	GroupDEnd                                = 11,
	GroupEBegin                              = 12,
	GroupEEnd                                = 13,
	GroupFBegin                              = 14,
	GroupFEnd                                = 15,
	ESpecialObjGroup_MAX                     = 17,
};

// Enum UnionRun.ETakeRingType
// NumValues: 0x0006
enum class ETakeRingType : uint8
{
	Non                                      = 0,
	Ring                                     = 1,
	PackageRing                              = 2,
	GadgetPackageRing                        = 4,
	Extnd06Ring                              = 8,
	ETakeRingType_MAX                        = 9,
};

// Enum UnionRun.ERingExtndType
// NumValues: 0x0005
enum class ERingExtndType : uint8
{
	Normal                                   = 0,
	Extnd06_A                                = 1,
	Extnd06_B                                = 2,
	Num                                      = 3,
	ERingExtndType_MAX                       = 4,
};

// Enum UnionRun.ERoundTripMoveType
// NumValues: 0x0006
enum class ERoundTripMoveType : uint8
{
	Linear                                   = 0,
	EaseIn                                   = 1,
	EaseOut                                  = 2,
	EaseInOut                                = 3,
	Speed                                    = 4,
	ERoundTripMoveType_MAX                   = 5,
};

// Enum UnionRun.ECoursePathDirectionType
// NumValues: 0x0006
enum class ECoursePathDirectionType : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Up                                       = 2,
	Down                                     = 3,
	Hybrid                                   = 4,
	ECoursePathDirectionType_MAX             = 5,
};

// Enum UnionRun.ECoursePathCurveType
// NumValues: 0x0005
enum class ECoursePathCurveType : uint8
{
	Linear                                   = 0,
	Sin                                      = 1,
	Parabola                                 = 2,
	FixWidth                                 = 3,
	ECoursePathCurveType_MAX                 = 4,
};

// Enum UnionRun.EUnionSplineType
// NumValues: 0x0005
enum class EUnionSplineType : uint8
{
	None                                     = 0,
	Center                                   = 1,
	Left                                     = 2,
	Right                                    = 3,
	Max                                      = 4,
};

// Enum UnionRun.ESplineMoveLoopType
// NumValues: 0x0005
enum class ESplineMoveLoopType : uint8
{
	NoLoop                                   = 0,
	Loop                                     = 1,
	Return                                   = 2,
	ForceActor                               = 3,
	ESplineMoveLoopType_MAX                  = 4,
};

// Enum UnionRun.EUnionSurfaceBitFlag
// NumValues: 0x0021
enum class EUnionSurfaceBitFlag : uint64
{
	CAR_DRIVEABLE                            = 1,
	GRAVITY_SWITCH                           = 2,
	COURSE_WALL                              = 4,
	IGNORE_STICKY                            = 8,
	STICKYTRACK                              = 16,
	RESPOT                                   = 32,
	SLIPPY                                   = 64,
	GUIDED_JUMP                              = 128,
	SLIDE                                    = 256,
	DASH                                     = 512,
	SLOWDOWN_LIGHT                           = 1024,
	SLOWDOWN_MEDIUM                          = 2048,
	CAMERA_CHANGE                            = 4096,
	BUMPY_LIGHT                              = 8192,
	BUMPY_MEDIUM                             = 16384,
	BUMPY_HEAVY                              = 32768,
	MACHINEONLY_WALL                         = 65536,
	ASSISTWALL_ITEM_IGNORET                  = 131072,
	GRIND_DASH                               = 262144,
	AIR_IMPACT                               = 524288,
	HIT_LOSE_RING                            = 1048576,
	NARROW                                   = 2097152,
	HIT_SLOWDOWN_LIGHT                       = 4194304,
	HIT_SLOWDOWN_MEDIUM                      = 8388608,
	CYLINDRICAL                              = 16777216,
	ITEMONLY                                 = 33554432,
	BOUNCY                                   = 67108864,
	PSEUDO_PLANE                             = 134217728,
	HIT_BOUNCY_MEDIUM                        = 268435456,
	ASSIST_WALL                              = 536870912,
	WAVE                                     = 1073741824,
	NONE                                     = 18446744071562067968,
	EUnionSurfaceBitFlag_MAX                 = 1073741825,
};

// Enum UnionRun.EVehicleType
// NumValues: 0x0004
enum class EVehicleType : uint8
{
	VehicleTypeCar                           = 0,
	VehicleTypeBoat                          = 1,
	VehicleTypePlane                         = 2,
	EVehicleType_MAX                         = 3,
};

// Enum UnionRun.ECarBodyPartType
// NumValues: 0x0008
enum class ECarBodyPartType : uint8
{
	CarBodyCockPit                           = 0,
	CarBodyFront                             = 1,
	CarBodyRear                              = 2,
	CarBodyMiddle                            = 3,
	CarBodyCockPitAdd                        = 4,
	CarBodyTyreWheelL                        = 5,
	CarBodyTyreWheelR                        = 6,
	ECarBodyPartType_MAX                     = 7,
};

// Enum UnionRun.ECarPartsVeriation
// NumValues: 0x0005
enum class ECarPartsVeriation : uint8
{
	CarPartsVeriationNone                    = 0,
	CarPartsVeriationA                       = 1,
	CarPartsVeriationB                       = 2,
	CarPartsVeriationC                       = 3,
	ECarPartsVeriation_MAX                   = 4,
};

// Enum UnionRun.ECarPartsFamily
// NumValues: 0x000B
enum class ECarPartsFamily : uint8
{
	CarPartsFamilyA                          = 0,
	CarPartsFamilyB                          = 1,
	CarPartsFamilyC                          = 2,
	CarPartsFamilyD                          = 3,
	CarPartsFamilyE                          = 4,
	CarPartsFamilyF                          = 5,
	CarPartsFamilyG                          = 6,
	CarPartsFamilyH                          = 7,
	CarPartsFamilyI                          = 8,
	CarPartsFamilyJ                          = 9,
	ECarPartsFamily_MAX                      = 10,
};

// Enum UnionRun.ECarCustomType
// NumValues: 0x0007
enum class ECarCustomType : uint8
{
	CarCustomNone                            = 0,
	CarCustomMiddlePart                      = 1,
	CarCustomCockPitDoor                     = 2,
	CarCustomCockPitNonDoor                  = 3,
	CarCustomCockPitAdd                      = 4,
	CarCustomDash                            = 5,
	ECarCustomType_MAX                       = 6,
};

// Enum UnionRun.EVehicleControlEvent
// NumValues: 0x004F
enum class EVehicleControlEvent : uint8
{
	None                                     = 0,
	OnAcceleChange                           = 1,
	OnDrifting                               = 2,
	OnDriftCharge                            = 3,
	OnDriftSwitch                            = 4,
	OnDash                                   = 5,
	OnDashSound                              = 6,
	OnStartDash                              = 7,
	OnLanding                                = 8,
	OnSlipStream                             = 9,
	OnStant                                  = 10,
	OnRivalTouch                             = 11,
	OnSteeringLR                             = 12,
	OnBoostEnd                               = 13,
	OnBoostPad                               = 14,
	OnHitTrackWall                           = 15,
	OnHitAirWall                             = 16,
	OnSpin                                   = 17,
	OnSpinEnd                                = 18,
	OnTransformVehicleType                   = 19,
	OnItemHold                               = 20,
	OnUseItem                                = 21,
	OnItemLost                               = 22,
	OnGoal                                   = 23,
	OnTimeout                                = 24,
	OnAddRing                                = 25,
	OnDashFire                               = 26,
	OnChangeRank                             = 27,
	OnBack                                   = 28,
	OnChangeDashLevel                        = 29,
	OnChangeSurfaceType                      = 30,
	OnGuidedJump                             = 31,
	OnBouncyJump                             = 32,
	OnSelectDomain                           = 33,
	OnWheelspin                              = 34,
	OnDamage                                 = 35,
	OnHitItemAttack                          = 36,
	OnHitEnemyAttack                         = 37,
	OnHitGadgetAttack                        = 38,
	OnHitNoDamage                            = 39,
	OnTrickFlip                              = 40,
	OnTrickSpin                              = 41,
	OnTrickSuccess                           = 42,
	OnTrickGreat                             = 43,
	OnTrickFailure                           = 44,
	OnTrickBonusBoost                        = 45,
	OnMetamorphose                           = 46,
	OnAnimationStart                         = 47,
	OnAnimationEnd                           = 48,
	OnPassedTravelRing                       = 49,
	OnPassedShortcutRing                     = 50,
	OnTravelRingFollowingBoost               = 51,
	OnTravelRingInvincible                   = 52,
	OnSpeedRateChange                        = 53,
	OnPitching                               = 54,
	OnHitMonsterTruck                        = 55,
	OnDamageMonsterTruck                     = 56,
	OnIrregularEvent                         = 57,
	OnBodyCut                                = 58,
	OnBodyCutEnd                             = 59,
	OnChangeItemThowDirection                = 60,
	OnWhiteBoost                             = 61,
	OnPassedPPArea                           = 62,
	OnSquash                                 = 63,
	OnSquashEnd                              = 64,
	OnBarrelRoll                             = 65,
	OnDisabledRunOff                         = 66,
	OnRingMax                                = 67,
	OnHitGimmickPaint                        = 68,
	OnDriftChargeDown                        = 69,
	OnJumpChargeCrouch                       = 70,
	OnGroupEnergyBoostCharge                 = 71,
	OnGroupEnergyBoost                       = 72,
	OnFriendTouchBoost                       = 73,
	OnGadgetTouchBoost                       = 74,
	OnGadgetStoleRing                        = 75,
	OnAddRedStarRing                         = 76,
	OnSlideSnow                              = 77,
	EVehicleControlEvent_MAX                 = 78,
};

// Enum UnionRun.EUhionRunAffectType
// NumValues: 0x0004
enum class EUhionRunAffectType : uint8
{
	BodyMatrixBase                           = 0,
	AffectAll                                = 1,
	TyrePosBase                              = 2,
	EUhionRunAffectType_MAX                  = 3,
};

// Enum UnionRun.EVehicleTransformType
// NumValues: 0x0007
enum class EVehicleTransformType : uint8
{
	CarToBoat                                = 0,
	CarToPlane                               = 1,
	BoatToCar                                = 2,
	BoatToPlane                              = 3,
	PlaneToCar                               = 4,
	PlaneToBoat                              = 5,
	EVehicleTransformType_MAX                = 6,
};

// Enum UnionRun.EVehicleSound
// NumValues: 0x0021
enum class EVehicleSound : uint8
{
	FrontEngine                              = 0,
	RearEngine                               = 1,
	EngineSoundInAir                         = 2,
	DriftChargeLoop                          = 3,
	DriftChargeLevel                         = 4,
	SlipStream                               = 5,
	Stunt                                    = 6,
	StartDash                                = 7,
	Dash                                     = 8,
	DashPanel                                = 9,
	ContactWin                               = 10,
	ContactLose                              = 11,
	RoadNoise                                = 12,
	BoatVib                                  = 13,
	SquealBreak                              = 14,
	SquealDrift                              = 15,
	SpinSound                                = 16,
	Landing                                  = 17,
	CarToBoat                                = 18,
	CarToPlane                               = 19,
	BoatToCar                                = 20,
	BoatToPlane                              = 21,
	PlaneToCar                               = 22,
	PlaneToBoat                              = 23,
	HitTrackWall                             = 24,
	GatePassTransform                        = 25,
	GatePassShortcut                         = 26,
	WhiteWispBoost                           = 27,
	BalloonBounce                            = 28,
	DropRing                                 = 29,
	HitHomingPunch                           = 30,
	PassedShortcutRing                       = 31,
	EVehicleSound_MAX                        = 32,
};

// Enum UnionRun.EVehicleMaterialAnimationType
// NumValues: 0x0004
enum class EVehicleMaterialAnimationType : uint8
{
	FreshlyPaintAppear                       = 0,
	FreshlyPaintDisappear                    = 1,
	FreshlyPaintReset                        = 2,
	EVehicleMaterialAnimationType_MAX        = 3,
};

// Enum UnionRun.EVehicleSpecialStatusType
// NumValues: 0x0016
enum class EVehicleSpecialStatusType : uint8
{
	Invalid                                  = 0,
	ItemSlime                                = 1,
	ItemJadeGhost                            = 2,
	ItemVioletVoid                           = 3,
	ItemDarkChao                             = 4,
	ItemAnchor                               = 5,
	ItemWarpRing                             = 6,
	ItemMagnet                               = 7,
	ItemBodyCut                              = 8,
	ItemYellowDrill                          = 9,
	ItemCyanLaser                            = 10,
	ItemMonsterTruck                         = 11,
	ItemShield                               = 12,
	ItemWeight                               = 13,
	ItemSlicer                               = 14,
	ItemExtnd09                              = 15,
	GimmickPaint                             = 16,
	ImmuneItemDamage                         = 17,
	UltimateDriftBoost                       = 18,
	FootCut                                  = 19,
	TeamBoost                                = 20,
	EVehicleSpecialStatusType_MAX            = 21,
};

// Enum UnionRun.EVehicleSpecialStatusEvent
// NumValues: 0x000C
enum class EVehicleSpecialStatusEvent : uint8
{
	Create                                   = 0,
	CountDown                                = 1,
	Destroy                                  = 2,
	Cancel                                   = 3,
	AttackStart                              = 4,
	AttackEnd                                = 5,
	AttackTypeA                              = 6,
	AttackTypeB                              = 7,
	MoveStart                                = 8,
	MoveEnd                                  = 9,
	Input                                    = 10,
	EVehicleSpecialStatusEvent_MAX           = 11,
};

// Enum UnionRun.EVehicleFreshlyPaint
// NumValues: 0x0004
enum class EVehicleFreshlyPaint : uint8
{
	Green                                    = 0,
	Purple                                   = 1,
	None                                     = 2,
	EVehicleFreshlyPaint_MAX                 = 3,
};

// Enum UnionRun.EBodyCutEndEvent
// NumValues: 0x0003
enum class EBodyCutEndEvent : uint8
{
	PlayEffect                               = 0,
	Finished                                 = 1,
	EBodyCutEndEvent_MAX                     = 2,
};

// Enum UnionRun.EUnionWarpType
// NumValues: 0x0011
enum class EUnionWarpType : uint8
{
	None                                     = 0,
	ChangeDomain                             = 1,
	ShortCut                                 = 2,
	FootCut                                  = 3,
	RespotObject                             = 4,
	GroundFlags                              = 5,
	WorldEnd                                 = 6,
	ReverseRun                               = 7,
	RepeatRespot                             = 8,
	ForceMoveItemStack                       = 9,
	ForceMoveItemBlock                       = 10,
	IllegalCheckPoint                        = 11,
	Distance                                 = 12,
	LowPosition                              = 13,
	DiffirentPath                            = 14,
	PrevDomain                               = 15,
	MAX                                      = 16,
};

// Enum UnionRun.EBreakSpeedType
// NumValues: 0x0003
enum class EBreakSpeedType : uint8
{
	Low                                      = 0,
	High                                     = 1,
	EBreakSpeedType_MAX                      = 2,
};

// ScriptStruct UnionRun.ColliderHitResult
// 0x0018 (0x0018 - 0x0000)
struct FColliderHitResult final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRacerStatusObject*                RacerStatusObject;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColliderHitResult) == 0x000008, "Wrong alignment on FColliderHitResult");
static_assert(sizeof(FColliderHitResult) == 0x000018, "Wrong size on FColliderHitResult");
static_assert(offsetof(FColliderHitResult, RacerIndex) == 0x000000, "Member 'FColliderHitResult::RacerIndex' has a wrong offset!");
static_assert(offsetof(FColliderHitResult, RacerStatusObject) == 0x000008, "Member 'FColliderHitResult::RacerStatusObject' has a wrong offset!");

// ScriptStruct UnionRun.ItemIrregularInfiniteData
// 0x0018 (0x0020 - 0x0008)
struct FItemIrregularInfiniteData final : public FTableRowBase
{
public:
	EItemId                                       ItemId;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ItemGetIntervalByRank;                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemIrregularInfiniteData) == 0x000008, "Wrong alignment on FItemIrregularInfiniteData");
static_assert(sizeof(FItemIrregularInfiniteData) == 0x000020, "Wrong size on FItemIrregularInfiniteData");
static_assert(offsetof(FItemIrregularInfiniteData, ItemId) == 0x000008, "Member 'FItemIrregularInfiniteData::ItemId' has a wrong offset!");
static_assert(offsetof(FItemIrregularInfiniteData, ItemGetIntervalByRank) == 0x000010, "Member 'FItemIrregularInfiniteData::ItemGetIntervalByRank' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceCustomParam
// 0x0014 (0x0014 - 0x0000)
struct FUnionRaceCustomParam final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accel;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dash;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Handling;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceCustomParam) == 0x000004, "Wrong alignment on FUnionRaceCustomParam");
static_assert(sizeof(FUnionRaceCustomParam) == 0x000014, "Wrong size on FUnionRaceCustomParam");
static_assert(offsetof(FUnionRaceCustomParam, Speed) == 0x000000, "Member 'FUnionRaceCustomParam::Speed' has a wrong offset!");
static_assert(offsetof(FUnionRaceCustomParam, Accel) == 0x000004, "Member 'FUnionRaceCustomParam::Accel' has a wrong offset!");
static_assert(offsetof(FUnionRaceCustomParam, Dash) == 0x000008, "Member 'FUnionRaceCustomParam::Dash' has a wrong offset!");
static_assert(offsetof(FUnionRaceCustomParam, Handling) == 0x00000C, "Member 'FUnionRaceCustomParam::Handling' has a wrong offset!");
static_assert(offsetof(FUnionRaceCustomParam, Power) == 0x000010, "Member 'FUnionRaceCustomParam::Power' has a wrong offset!");

// ScriptStruct UnionRun.AttackedInfo
// 0x0068 (0x0068 - 0x0000)
struct FAttackedInfo
{
public:
	class UObject*                                SenderObject;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tag;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackRacerIndex;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TakeDamageRacerIndex;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CarHitDamageRingCount;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueID;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ItemId;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerDamageType                              DamageType;                                        // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ImpulseVec;                                        // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                contactPoint;                                      // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitFront;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitRear;                                           // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitLeft;                                           // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitRight;                                          // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRingLost;                                        // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNormalDamage;                                    // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpin;                                            // 0x0066(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSquashed;                                        // 0x0067(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackedInfo) == 0x000008, "Wrong alignment on FAttackedInfo");
static_assert(sizeof(FAttackedInfo) == 0x000068, "Wrong size on FAttackedInfo");
static_assert(offsetof(FAttackedInfo, SenderObject) == 0x000000, "Member 'FAttackedInfo::SenderObject' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, Tag) == 0x000008, "Member 'FAttackedInfo::Tag' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, AttackRacerIndex) == 0x000018, "Member 'FAttackedInfo::AttackRacerIndex' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, TakeDamageRacerIndex) == 0x00001C, "Member 'FAttackedInfo::TakeDamageRacerIndex' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, CarHitDamageRingCount) == 0x000020, "Member 'FAttackedInfo::CarHitDamageRingCount' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, UniqueID) == 0x000024, "Member 'FAttackedInfo::UniqueID' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, ItemId) == 0x000028, "Member 'FAttackedInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, DamageType) == 0x000029, "Member 'FAttackedInfo::DamageType' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, ImpulseVec) == 0x000030, "Member 'FAttackedInfo::ImpulseVec' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, contactPoint) == 0x000048, "Member 'FAttackedInfo::contactPoint' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, HitFront) == 0x000060, "Member 'FAttackedInfo::HitFront' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, HitRear) == 0x000061, "Member 'FAttackedInfo::HitRear' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, HitLeft) == 0x000062, "Member 'FAttackedInfo::HitLeft' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, HitRight) == 0x000063, "Member 'FAttackedInfo::HitRight' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, IsRingLost) == 0x000064, "Member 'FAttackedInfo::IsRingLost' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, IsNormalDamage) == 0x000065, "Member 'FAttackedInfo::IsNormalDamage' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, IsSpin) == 0x000066, "Member 'FAttackedInfo::IsSpin' has a wrong offset!");
static_assert(offsetof(FAttackedInfo, IsSquashed) == 0x000067, "Member 'FAttackedInfo::IsSquashed' has a wrong offset!");

// ScriptStruct UnionRun.EnemySquidPhase1Attack
// 0x0048 (0x0048 - 0x0000)
struct FEnemySquidPhase1Attack final
{
public:
	float                                         LifeTime;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletNum;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletSpeed_KPH;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveToPathTime;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackFirstDelayTime;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackIntervalTime;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RapidIntervalTime;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        LanesOffset;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnemySquidPhase1Attack) == 0x000008, "Wrong alignment on FEnemySquidPhase1Attack");
static_assert(sizeof(FEnemySquidPhase1Attack) == 0x000048, "Wrong size on FEnemySquidPhase1Attack");
static_assert(offsetof(FEnemySquidPhase1Attack, LifeTime) == 0x000000, "Member 'FEnemySquidPhase1Attack::LifeTime' has a wrong offset!");
static_assert(offsetof(FEnemySquidPhase1Attack, BulletNum) == 0x000004, "Member 'FEnemySquidPhase1Attack::BulletNum' has a wrong offset!");
static_assert(offsetof(FEnemySquidPhase1Attack, BulletSpeed_KPH) == 0x000008, "Member 'FEnemySquidPhase1Attack::BulletSpeed_KPH' has a wrong offset!");
static_assert(offsetof(FEnemySquidPhase1Attack, MoveToPathTime) == 0x00000C, "Member 'FEnemySquidPhase1Attack::MoveToPathTime' has a wrong offset!");
static_assert(offsetof(FEnemySquidPhase1Attack, AttackFirstDelayTime) == 0x000010, "Member 'FEnemySquidPhase1Attack::AttackFirstDelayTime' has a wrong offset!");
static_assert(offsetof(FEnemySquidPhase1Attack, AttackIntervalTime) == 0x000014, "Member 'FEnemySquidPhase1Attack::AttackIntervalTime' has a wrong offset!");
static_assert(offsetof(FEnemySquidPhase1Attack, RapidIntervalTime) == 0x000018, "Member 'FEnemySquidPhase1Attack::RapidIntervalTime' has a wrong offset!");
static_assert(offsetof(FEnemySquidPhase1Attack, LanesOffset) == 0x000020, "Member 'FEnemySquidPhase1Attack::LanesOffset' has a wrong offset!");

// ScriptStruct UnionRun.LotteryItemBoxRateData
// 0x000C (0x000C - 0x0000)
struct FLotteryItemBoxRateData final
{
public:
	int32                                         NormalBox;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DoubleBox;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialBox;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLotteryItemBoxRateData) == 0x000004, "Wrong alignment on FLotteryItemBoxRateData");
static_assert(sizeof(FLotteryItemBoxRateData) == 0x00000C, "Wrong size on FLotteryItemBoxRateData");
static_assert(offsetof(FLotteryItemBoxRateData, NormalBox) == 0x000000, "Member 'FLotteryItemBoxRateData::NormalBox' has a wrong offset!");
static_assert(offsetof(FLotteryItemBoxRateData, DoubleBox) == 0x000004, "Member 'FLotteryItemBoxRateData::DoubleBox' has a wrong offset!");
static_assert(offsetof(FLotteryItemBoxRateData, SpecialBox) == 0x000008, "Member 'FLotteryItemBoxRateData::SpecialBox' has a wrong offset!");

// ScriptStruct UnionRun.Extnd09SoundCueAsset
// 0x0010 (0x0010 - 0x0000)
struct FExtnd09SoundCueAsset final
{
public:
	class USoundAtomCue*                          AttackSound;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          ChargeAttackSound;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExtnd09SoundCueAsset) == 0x000008, "Wrong alignment on FExtnd09SoundCueAsset");
static_assert(sizeof(FExtnd09SoundCueAsset) == 0x000010, "Wrong size on FExtnd09SoundCueAsset");
static_assert(offsetof(FExtnd09SoundCueAsset, AttackSound) == 0x000000, "Member 'FExtnd09SoundCueAsset::AttackSound' has a wrong offset!");
static_assert(offsetof(FExtnd09SoundCueAsset, ChargeAttackSound) == 0x000008, "Member 'FExtnd09SoundCueAsset::ChargeAttackSound' has a wrong offset!");

// ScriptStruct UnionRun.ColliderHitWeaponResult
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x10) FColliderHitWeaponResult final
{
public:
	EItemId                                       ItemId;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x2F];                                       // 0x0001(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColliderHitWeaponResult) == 0x000010, "Wrong alignment on FColliderHitWeaponResult");
static_assert(sizeof(FColliderHitWeaponResult) == 0x000030, "Wrong size on FColliderHitWeaponResult");
static_assert(offsetof(FColliderHitWeaponResult, ItemId) == 0x000000, "Member 'FColliderHitWeaponResult::ItemId' has a wrong offset!");

// ScriptStruct UnionRun.ItemSpeedParam
// 0x0010 (0x0010 - 0x0000)
struct FItemSpeedParam final
{
public:
	float                                         NormalSpeed;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighSpeed;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SonicSpeed;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuperSonicSpeed;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSpeedParam) == 0x000004, "Wrong alignment on FItemSpeedParam");
static_assert(sizeof(FItemSpeedParam) == 0x000010, "Wrong size on FItemSpeedParam");
static_assert(offsetof(FItemSpeedParam, NormalSpeed) == 0x000000, "Member 'FItemSpeedParam::NormalSpeed' has a wrong offset!");
static_assert(offsetof(FItemSpeedParam, HighSpeed) == 0x000004, "Member 'FItemSpeedParam::HighSpeed' has a wrong offset!");
static_assert(offsetof(FItemSpeedParam, SonicSpeed) == 0x000008, "Member 'FItemSpeedParam::SonicSpeed' has a wrong offset!");
static_assert(offsetof(FItemSpeedParam, SuperSonicSpeed) == 0x00000C, "Member 'FItemSpeedParam::SuperSonicSpeed' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceStartDashParam
// 0x0030 (0x0030 - 0x0000)
struct FUnionRaceStartDashParam final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         STARTDASH_SCORE_ACCELE;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         STARTDASH_SCORE_RELEASE1;                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         STARTDASH_SCORE_RELEASE2;                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         STARTDASH_LV3_PIVOT;                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         STARTDASH_LV3_RANGE;                               // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         STARTDASH_LV2_PIVOT;                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         STARTDASH_LV2_RANGE;                               // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         STARTDASH_NG1_PIVOT;                               // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         STARTDASH_NG1_RANGE;                               // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         STARTDASH_NG2_PIVOT;                               // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         STARTDASH_NG2_RANGE;                               // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceStartDashParam) == 0x000004, "Wrong alignment on FUnionRaceStartDashParam");
static_assert(sizeof(FUnionRaceStartDashParam) == 0x000030, "Wrong size on FUnionRaceStartDashParam");
static_assert(offsetof(FUnionRaceStartDashParam, STARTDASH_SCORE_ACCELE) == 0x000004, "Member 'FUnionRaceStartDashParam::STARTDASH_SCORE_ACCELE' has a wrong offset!");
static_assert(offsetof(FUnionRaceStartDashParam, STARTDASH_SCORE_RELEASE1) == 0x000008, "Member 'FUnionRaceStartDashParam::STARTDASH_SCORE_RELEASE1' has a wrong offset!");
static_assert(offsetof(FUnionRaceStartDashParam, STARTDASH_SCORE_RELEASE2) == 0x00000C, "Member 'FUnionRaceStartDashParam::STARTDASH_SCORE_RELEASE2' has a wrong offset!");
static_assert(offsetof(FUnionRaceStartDashParam, STARTDASH_LV3_PIVOT) == 0x000010, "Member 'FUnionRaceStartDashParam::STARTDASH_LV3_PIVOT' has a wrong offset!");
static_assert(offsetof(FUnionRaceStartDashParam, STARTDASH_LV3_RANGE) == 0x000014, "Member 'FUnionRaceStartDashParam::STARTDASH_LV3_RANGE' has a wrong offset!");
static_assert(offsetof(FUnionRaceStartDashParam, STARTDASH_LV2_PIVOT) == 0x000018, "Member 'FUnionRaceStartDashParam::STARTDASH_LV2_PIVOT' has a wrong offset!");
static_assert(offsetof(FUnionRaceStartDashParam, STARTDASH_LV2_RANGE) == 0x00001C, "Member 'FUnionRaceStartDashParam::STARTDASH_LV2_RANGE' has a wrong offset!");
static_assert(offsetof(FUnionRaceStartDashParam, STARTDASH_NG1_PIVOT) == 0x000020, "Member 'FUnionRaceStartDashParam::STARTDASH_NG1_PIVOT' has a wrong offset!");
static_assert(offsetof(FUnionRaceStartDashParam, STARTDASH_NG1_RANGE) == 0x000024, "Member 'FUnionRaceStartDashParam::STARTDASH_NG1_RANGE' has a wrong offset!");
static_assert(offsetof(FUnionRaceStartDashParam, STARTDASH_NG2_PIVOT) == 0x000028, "Member 'FUnionRaceStartDashParam::STARTDASH_NG2_PIVOT' has a wrong offset!");
static_assert(offsetof(FUnionRaceStartDashParam, STARTDASH_NG2_RANGE) == 0x00002C, "Member 'FUnionRaceStartDashParam::STARTDASH_NG2_RANGE' has a wrong offset!");

// ScriptStruct UnionRun.CyanLaserParam
// 0x0018 (0x0018 - 0x0000)
struct FCyanLaserParam final
{
public:
	class UMaterialInstanceDynamic*               dmi_;                                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCyanLaserParam) == 0x000008, "Wrong alignment on FCyanLaserParam");
static_assert(sizeof(FCyanLaserParam) == 0x000018, "Wrong size on FCyanLaserParam");
static_assert(offsetof(FCyanLaserParam, dmi_) == 0x000000, "Member 'FCyanLaserParam::dmi_' has a wrong offset!");

// ScriptStruct UnionRun.UnionTyreMarkInfo
// 0x0060 (0x0060 - 0x0000)
struct FUnionTyreMarkInfo final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         surface;                                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelWidth;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos;                                               // 0x0010(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideVec;                                           // 0x0028(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Norm;                                              // 0x0040(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TyreTypeUsed;                                      // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionTyreMarkInfo) == 0x000008, "Wrong alignment on FUnionTyreMarkInfo");
static_assert(sizeof(FUnionTyreMarkInfo) == 0x000060, "Wrong size on FUnionTyreMarkInfo");
static_assert(offsetof(FUnionTyreMarkInfo, Intensity) == 0x000000, "Member 'FUnionTyreMarkInfo::Intensity' has a wrong offset!");
static_assert(offsetof(FUnionTyreMarkInfo, surface) == 0x000004, "Member 'FUnionTyreMarkInfo::surface' has a wrong offset!");
static_assert(offsetof(FUnionTyreMarkInfo, WheelWidth) == 0x000008, "Member 'FUnionTyreMarkInfo::WheelWidth' has a wrong offset!");
static_assert(offsetof(FUnionTyreMarkInfo, Pos) == 0x000010, "Member 'FUnionTyreMarkInfo::Pos' has a wrong offset!");
static_assert(offsetof(FUnionTyreMarkInfo, SideVec) == 0x000028, "Member 'FUnionTyreMarkInfo::SideVec' has a wrong offset!");
static_assert(offsetof(FUnionTyreMarkInfo, Norm) == 0x000040, "Member 'FUnionTyreMarkInfo::Norm' has a wrong offset!");
static_assert(offsetof(FUnionTyreMarkInfo, TyreTypeUsed) == 0x000058, "Member 'FUnionTyreMarkInfo::TyreTypeUsed' has a wrong offset!");

// ScriptStruct UnionRun.MyAimData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FMyAimData final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMyAimData) == 0x000008, "Wrong alignment on FMyAimData");
static_assert(sizeof(FMyAimData) == 0x000030, "Wrong size on FMyAimData");

// ScriptStruct UnionRun.StruckoutItemBoxParam
// 0x0008 (0x0008 - 0x0000)
struct FStruckoutItemBoxParam final
{
public:
	EItemBoxType                                  BoxType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RelocationWaitTime;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStruckoutItemBoxParam) == 0x000004, "Wrong alignment on FStruckoutItemBoxParam");
static_assert(sizeof(FStruckoutItemBoxParam) == 0x000008, "Wrong size on FStruckoutItemBoxParam");
static_assert(offsetof(FStruckoutItemBoxParam, BoxType) == 0x000000, "Member 'FStruckoutItemBoxParam::BoxType' has a wrong offset!");
static_assert(offsetof(FStruckoutItemBoxParam, RelocationWaitTime) == 0x000004, "Member 'FStruckoutItemBoxParam::RelocationWaitTime' has a wrong offset!");

// ScriptStruct UnionRun.ReactionDirName
// 0x0028 (0x0028 - 0x0000)
struct FReactionDirName final
{
public:
	EDriverId                                     DriverId;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DirName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReactionDirName) == 0x000008, "Wrong alignment on FReactionDirName");
static_assert(sizeof(FReactionDirName) == 0x000028, "Wrong size on FReactionDirName");
static_assert(offsetof(FReactionDirName, DriverId) == 0x000000, "Member 'FReactionDirName::DriverId' has a wrong offset!");
static_assert(offsetof(FReactionDirName, DirName) == 0x000008, "Member 'FReactionDirName::DirName' has a wrong offset!");
static_assert(offsetof(FReactionDirName, Filename) == 0x000018, "Member 'FReactionDirName::Filename' has a wrong offset!");

// ScriptStruct UnionRun.GadgetBoostRingBonusInfo
// 0x0010 (0x0010 - 0x0000)
struct FGadgetBoostRingBonusInfo final
{
public:
	int32                                         RingNumLv1;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RingNumLv2;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RingNumLv3;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RingNumLv4;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetBoostRingBonusInfo) == 0x000004, "Wrong alignment on FGadgetBoostRingBonusInfo");
static_assert(sizeof(FGadgetBoostRingBonusInfo) == 0x000010, "Wrong size on FGadgetBoostRingBonusInfo");
static_assert(offsetof(FGadgetBoostRingBonusInfo, RingNumLv1) == 0x000000, "Member 'FGadgetBoostRingBonusInfo::RingNumLv1' has a wrong offset!");
static_assert(offsetof(FGadgetBoostRingBonusInfo, RingNumLv2) == 0x000004, "Member 'FGadgetBoostRingBonusInfo::RingNumLv2' has a wrong offset!");
static_assert(offsetof(FGadgetBoostRingBonusInfo, RingNumLv3) == 0x000008, "Member 'FGadgetBoostRingBonusInfo::RingNumLv3' has a wrong offset!");
static_assert(offsetof(FGadgetBoostRingBonusInfo, RingNumLv4) == 0x00000C, "Member 'FGadgetBoostRingBonusInfo::RingNumLv4' has a wrong offset!");

// ScriptStruct UnionRun.UnionSurfaceFlag
// 0x001F (0x001F - 0x0000)
struct FUnionSurfaceFlag final
{
public:
	bool                                          bCarDriveable;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWall;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMachineOnlyWall;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGravitySwitch;                                    // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSticky;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoJump;                                           // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespot;                                           // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlippy;                                           // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlowDownLight;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlowDownMedium;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBumpyLight;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBumpyMedium;                                      // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBumpyHeavy;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuidedJump;                                       // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBouncy;                                           // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlide;                                            // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDash;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGrindDash;                                        // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAirImpact;                                        // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitSlowdownLight;                                 // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitSlowdownMidium;                                // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPseudoPlane;                                      // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitBouncyMidium;                                  // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitLoseRing;                                      // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNarrow;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssistWall;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssistWallItemIgnoret;                            // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraChange;                                     // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCylindrical;                                      // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bItemOnly;                                         // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNone;                                             // 0x001E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionSurfaceFlag) == 0x000001, "Wrong alignment on FUnionSurfaceFlag");
static_assert(sizeof(FUnionSurfaceFlag) == 0x00001F, "Wrong size on FUnionSurfaceFlag");
static_assert(offsetof(FUnionSurfaceFlag, bCarDriveable) == 0x000000, "Member 'FUnionSurfaceFlag::bCarDriveable' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bWall) == 0x000001, "Member 'FUnionSurfaceFlag::bWall' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bMachineOnlyWall) == 0x000002, "Member 'FUnionSurfaceFlag::bMachineOnlyWall' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bGravitySwitch) == 0x000003, "Member 'FUnionSurfaceFlag::bGravitySwitch' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bIgnoreSticky) == 0x000004, "Member 'FUnionSurfaceFlag::bIgnoreSticky' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bNoJump) == 0x000005, "Member 'FUnionSurfaceFlag::bNoJump' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bRespot) == 0x000006, "Member 'FUnionSurfaceFlag::bRespot' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bSlippy) == 0x000007, "Member 'FUnionSurfaceFlag::bSlippy' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bSlowDownLight) == 0x000008, "Member 'FUnionSurfaceFlag::bSlowDownLight' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bSlowDownMedium) == 0x000009, "Member 'FUnionSurfaceFlag::bSlowDownMedium' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bBumpyLight) == 0x00000A, "Member 'FUnionSurfaceFlag::bBumpyLight' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bBumpyMedium) == 0x00000B, "Member 'FUnionSurfaceFlag::bBumpyMedium' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bBumpyHeavy) == 0x00000C, "Member 'FUnionSurfaceFlag::bBumpyHeavy' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bGuidedJump) == 0x00000D, "Member 'FUnionSurfaceFlag::bGuidedJump' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bBouncy) == 0x00000E, "Member 'FUnionSurfaceFlag::bBouncy' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bSlide) == 0x00000F, "Member 'FUnionSurfaceFlag::bSlide' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bDash) == 0x000010, "Member 'FUnionSurfaceFlag::bDash' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bGrindDash) == 0x000011, "Member 'FUnionSurfaceFlag::bGrindDash' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bAirImpact) == 0x000012, "Member 'FUnionSurfaceFlag::bAirImpact' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bHitSlowdownLight) == 0x000013, "Member 'FUnionSurfaceFlag::bHitSlowdownLight' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bHitSlowdownMidium) == 0x000014, "Member 'FUnionSurfaceFlag::bHitSlowdownMidium' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bPseudoPlane) == 0x000015, "Member 'FUnionSurfaceFlag::bPseudoPlane' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bHitBouncyMidium) == 0x000016, "Member 'FUnionSurfaceFlag::bHitBouncyMidium' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bHitLoseRing) == 0x000017, "Member 'FUnionSurfaceFlag::bHitLoseRing' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bNarrow) == 0x000018, "Member 'FUnionSurfaceFlag::bNarrow' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bAssistWall) == 0x000019, "Member 'FUnionSurfaceFlag::bAssistWall' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bAssistWallItemIgnoret) == 0x00001A, "Member 'FUnionSurfaceFlag::bAssistWallItemIgnoret' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bCameraChange) == 0x00001B, "Member 'FUnionSurfaceFlag::bCameraChange' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bCylindrical) == 0x00001C, "Member 'FUnionSurfaceFlag::bCylindrical' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bItemOnly) == 0x00001D, "Member 'FUnionSurfaceFlag::bItemOnly' has a wrong offset!");
static_assert(offsetof(FUnionSurfaceFlag, bNone) == 0x00001E, "Member 'FUnionSurfaceFlag::bNone' has a wrong offset!");

// ScriptStruct UnionRun.MachineMaterialAnimationData
// 0x0020 (0x0028 - 0x0008)
struct FMachineMaterialAnimationData final : public FTableRowBase
{
public:
	EVehicleMaterialAnimationType                 AnimationType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveTable*                            CurveTable;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TargetMaterialTable;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetTag;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineMaterialAnimationData) == 0x000008, "Wrong alignment on FMachineMaterialAnimationData");
static_assert(sizeof(FMachineMaterialAnimationData) == 0x000028, "Wrong size on FMachineMaterialAnimationData");
static_assert(offsetof(FMachineMaterialAnimationData, AnimationType) == 0x000008, "Member 'FMachineMaterialAnimationData::AnimationType' has a wrong offset!");
static_assert(offsetof(FMachineMaterialAnimationData, CurveTable) == 0x000010, "Member 'FMachineMaterialAnimationData::CurveTable' has a wrong offset!");
static_assert(offsetof(FMachineMaterialAnimationData, TargetMaterialTable) == 0x000018, "Member 'FMachineMaterialAnimationData::TargetMaterialTable' has a wrong offset!");
static_assert(offsetof(FMachineMaterialAnimationData, TargetTag) == 0x000020, "Member 'FMachineMaterialAnimationData::TargetTag' has a wrong offset!");

// ScriptStruct UnionRun.WarpRingMoveInfo
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FWarpRingMoveInfo final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWarpRingMoveInfo) == 0x000010, "Wrong alignment on FWarpRingMoveInfo");
static_assert(sizeof(FWarpRingMoveInfo) == 0x0000F0, "Wrong size on FWarpRingMoveInfo");

// ScriptStruct UnionRun.ItemAimInfo
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FItemAimInfo final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemAimInfo) == 0x000008, "Wrong alignment on FItemAimInfo");
static_assert(sizeof(FItemAimInfo) == 0x000078, "Wrong size on FItemAimInfo");

// ScriptStruct UnionRun.DonutHoopPackageRingParam
// 0x0001 (0x0001 - 0x0000)
struct FDonutHoopPackageRingParam final
{
public:
	EPackageRingType                              RingType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDonutHoopPackageRingParam) == 0x000001, "Wrong alignment on FDonutHoopPackageRingParam");
static_assert(sizeof(FDonutHoopPackageRingParam) == 0x000001, "Wrong size on FDonutHoopPackageRingParam");
static_assert(offsetof(FDonutHoopPackageRingParam, RingType) == 0x000000, "Member 'FDonutHoopPackageRingParam::RingType' has a wrong offset!");

// ScriptStruct UnionRun.Collider
// 0x0030 (0x0030 - 0x0000)
struct FCollider final
{
public:
	EColliderColliShapeType                       _ColliShapeType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _Extents;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Radius;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _HalfHeight;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColliderColliAxes                            _Axes;                                             // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCollider) == 0x000008, "Wrong alignment on FCollider");
static_assert(sizeof(FCollider) == 0x000030, "Wrong size on FCollider");
static_assert(offsetof(FCollider, _ColliShapeType) == 0x000000, "Member 'FCollider::_ColliShapeType' has a wrong offset!");
static_assert(offsetof(FCollider, _Extents) == 0x000008, "Member 'FCollider::_Extents' has a wrong offset!");
static_assert(offsetof(FCollider, _Radius) == 0x000020, "Member 'FCollider::_Radius' has a wrong offset!");
static_assert(offsetof(FCollider, _HalfHeight) == 0x000024, "Member 'FCollider::_HalfHeight' has a wrong offset!");
static_assert(offsetof(FCollider, _Axes) == 0x000028, "Member 'FCollider::_Axes' has a wrong offset!");

// ScriptStruct UnionRun.GadgetNotifyAttackInfo
// 0x0008 (0x0070 - 0x0068)
struct FGadgetNotifyAttackInfo final : public FAttackedInfo
{
public:
	bool                                          bTakeDamagePlayer;                                 // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttackSucceed;                                    // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiHit;                                         // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGadgetNotifyAttackInfo) == 0x000008, "Wrong alignment on FGadgetNotifyAttackInfo");
static_assert(sizeof(FGadgetNotifyAttackInfo) == 0x000070, "Wrong size on FGadgetNotifyAttackInfo");
static_assert(offsetof(FGadgetNotifyAttackInfo, bTakeDamagePlayer) == 0x000068, "Member 'FGadgetNotifyAttackInfo::bTakeDamagePlayer' has a wrong offset!");
static_assert(offsetof(FGadgetNotifyAttackInfo, bAttackSucceed) == 0x000069, "Member 'FGadgetNotifyAttackInfo::bAttackSucceed' has a wrong offset!");
static_assert(offsetof(FGadgetNotifyAttackInfo, bMultiHit) == 0x00006A, "Member 'FGadgetNotifyAttackInfo::bMultiHit' has a wrong offset!");

// ScriptStruct UnionRun.CollisionHitInfo
// 0x0060 (0x0060 - 0x0000)
struct FCollisionHitInfo final
{
public:
	ECollisionHitType                             CollisionHitType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCollisionBaseComponent*                MyComponent;                                       // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCollisionBaseComponent*                OtherComponent;                                    // 0x0010(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x48];                                      // 0x0018(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCollisionHitInfo) == 0x000008, "Wrong alignment on FCollisionHitInfo");
static_assert(sizeof(FCollisionHitInfo) == 0x000060, "Wrong size on FCollisionHitInfo");
static_assert(offsetof(FCollisionHitInfo, CollisionHitType) == 0x000000, "Member 'FCollisionHitInfo::CollisionHitType' has a wrong offset!");
static_assert(offsetof(FCollisionHitInfo, MyComponent) == 0x000008, "Member 'FCollisionHitInfo::MyComponent' has a wrong offset!");
static_assert(offsetof(FCollisionHitInfo, OtherComponent) == 0x000010, "Member 'FCollisionHitInfo::OtherComponent' has a wrong offset!");

// ScriptStruct UnionRun.EnemySquidPhase2Attack
// 0x001C (0x001C - 0x0000)
struct FEnemySquidPhase2Attack final
{
public:
	float                                         LifeTime;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletSpeed_KPH;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveToPathTime;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackFirstDelayTime;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackIntervalTime;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x8];                                       // 0x0014(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnemySquidPhase2Attack) == 0x000004, "Wrong alignment on FEnemySquidPhase2Attack");
static_assert(sizeof(FEnemySquidPhase2Attack) == 0x00001C, "Wrong size on FEnemySquidPhase2Attack");
static_assert(offsetof(FEnemySquidPhase2Attack, LifeTime) == 0x000000, "Member 'FEnemySquidPhase2Attack::LifeTime' has a wrong offset!");
static_assert(offsetof(FEnemySquidPhase2Attack, BulletSpeed_KPH) == 0x000004, "Member 'FEnemySquidPhase2Attack::BulletSpeed_KPH' has a wrong offset!");
static_assert(offsetof(FEnemySquidPhase2Attack, MoveToPathTime) == 0x000008, "Member 'FEnemySquidPhase2Attack::MoveToPathTime' has a wrong offset!");
static_assert(offsetof(FEnemySquidPhase2Attack, AttackFirstDelayTime) == 0x00000C, "Member 'FEnemySquidPhase2Attack::AttackFirstDelayTime' has a wrong offset!");
static_assert(offsetof(FEnemySquidPhase2Attack, AttackIntervalTime) == 0x000010, "Member 'FEnemySquidPhase2Attack::AttackIntervalTime' has a wrong offset!");

// ScriptStruct UnionRun.GadgetVariousMemberInfo
// 0x0008 (0x0008 - 0x0000)
struct FGadgetVariousMemberInfo final
{
public:
	class FName                                   ParamMapKey;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetVariousMemberInfo) == 0x000004, "Wrong alignment on FGadgetVariousMemberInfo");
static_assert(sizeof(FGadgetVariousMemberInfo) == 0x000008, "Wrong size on FGadgetVariousMemberInfo");
static_assert(offsetof(FGadgetVariousMemberInfo, ParamMapKey) == 0x000000, "Member 'FGadgetVariousMemberInfo::ParamMapKey' has a wrong offset!");

// ScriptStruct UnionRun.RacerDamageSquashParam
// 0x0024 (0x0024 - 0x0000)
struct FRacerDamageSquashParam final
{
public:
	float                                         AfterInviciblyTime;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelerationUnderLimit;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopTime1stPhase;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopTime2ndPhase;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopTime3rdPhase;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreakRate1stPhase;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreakRate2ndPhase;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreakRate3rdPhase;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BigCrashFlag1stPhase;                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BigCrashFlag2ndPhase;                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BigCrashFlag3rdPhase;                              // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRacerDamageSquashParam) == 0x000004, "Wrong alignment on FRacerDamageSquashParam");
static_assert(sizeof(FRacerDamageSquashParam) == 0x000024, "Wrong size on FRacerDamageSquashParam");
static_assert(offsetof(FRacerDamageSquashParam, AfterInviciblyTime) == 0x000000, "Member 'FRacerDamageSquashParam::AfterInviciblyTime' has a wrong offset!");
static_assert(offsetof(FRacerDamageSquashParam, DecelerationUnderLimit) == 0x000004, "Member 'FRacerDamageSquashParam::DecelerationUnderLimit' has a wrong offset!");
static_assert(offsetof(FRacerDamageSquashParam, StopTime1stPhase) == 0x000008, "Member 'FRacerDamageSquashParam::StopTime1stPhase' has a wrong offset!");
static_assert(offsetof(FRacerDamageSquashParam, StopTime2ndPhase) == 0x00000C, "Member 'FRacerDamageSquashParam::StopTime2ndPhase' has a wrong offset!");
static_assert(offsetof(FRacerDamageSquashParam, StopTime3rdPhase) == 0x000010, "Member 'FRacerDamageSquashParam::StopTime3rdPhase' has a wrong offset!");
static_assert(offsetof(FRacerDamageSquashParam, BreakRate1stPhase) == 0x000014, "Member 'FRacerDamageSquashParam::BreakRate1stPhase' has a wrong offset!");
static_assert(offsetof(FRacerDamageSquashParam, BreakRate2ndPhase) == 0x000018, "Member 'FRacerDamageSquashParam::BreakRate2ndPhase' has a wrong offset!");
static_assert(offsetof(FRacerDamageSquashParam, BreakRate3rdPhase) == 0x00001C, "Member 'FRacerDamageSquashParam::BreakRate3rdPhase' has a wrong offset!");
static_assert(offsetof(FRacerDamageSquashParam, BigCrashFlag1stPhase) == 0x000020, "Member 'FRacerDamageSquashParam::BigCrashFlag1stPhase' has a wrong offset!");
static_assert(offsetof(FRacerDamageSquashParam, BigCrashFlag2ndPhase) == 0x000021, "Member 'FRacerDamageSquashParam::BigCrashFlag2ndPhase' has a wrong offset!");
static_assert(offsetof(FRacerDamageSquashParam, BigCrashFlag3rdPhase) == 0x000022, "Member 'FRacerDamageSquashParam::BigCrashFlag3rdPhase' has a wrong offset!");

// ScriptStruct UnionRun.RacerDamagePropertyChangeData
// 0x000C (0x000C - 0x0000)
struct FRacerDamagePropertyChangeData final
{
public:
	ERacerDamagePropertyChangeType                ChangType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedlValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelRatio;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerDamagePropertyChangeData) == 0x000004, "Wrong alignment on FRacerDamagePropertyChangeData");
static_assert(sizeof(FRacerDamagePropertyChangeData) == 0x00000C, "Wrong size on FRacerDamagePropertyChangeData");
static_assert(offsetof(FRacerDamagePropertyChangeData, ChangType) == 0x000000, "Member 'FRacerDamagePropertyChangeData::ChangType' has a wrong offset!");
static_assert(offsetof(FRacerDamagePropertyChangeData, SpeedlValue) == 0x000004, "Member 'FRacerDamagePropertyChangeData::SpeedlValue' has a wrong offset!");
static_assert(offsetof(FRacerDamagePropertyChangeData, DecelRatio) == 0x000008, "Member 'FRacerDamagePropertyChangeData::DecelRatio' has a wrong offset!");

// ScriptStruct UnionRun.RacerDamagePropertyChangeGroupData
// 0x0034 (0x0034 - 0x0000)
struct FRacerDamagePropertyChangeGroupData final
{
public:
	struct FRacerDamagePropertyChangeData         NormalSpeed;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRacerDamagePropertyChangeData         HighSpeed;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRacerDamagePropertyChangeData         SonicSpeed;                                        // 0x0018(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRacerDamagePropertyChangeData         SuperSonicSpeed;                                   // 0x0024(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OverwriteDuration;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerDamagePropertyChangeGroupData) == 0x000004, "Wrong alignment on FRacerDamagePropertyChangeGroupData");
static_assert(sizeof(FRacerDamagePropertyChangeGroupData) == 0x000034, "Wrong size on FRacerDamagePropertyChangeGroupData");
static_assert(offsetof(FRacerDamagePropertyChangeGroupData, NormalSpeed) == 0x000000, "Member 'FRacerDamagePropertyChangeGroupData::NormalSpeed' has a wrong offset!");
static_assert(offsetof(FRacerDamagePropertyChangeGroupData, HighSpeed) == 0x00000C, "Member 'FRacerDamagePropertyChangeGroupData::HighSpeed' has a wrong offset!");
static_assert(offsetof(FRacerDamagePropertyChangeGroupData, SonicSpeed) == 0x000018, "Member 'FRacerDamagePropertyChangeGroupData::SonicSpeed' has a wrong offset!");
static_assert(offsetof(FRacerDamagePropertyChangeGroupData, SuperSonicSpeed) == 0x000024, "Member 'FRacerDamagePropertyChangeGroupData::SuperSonicSpeed' has a wrong offset!");
static_assert(offsetof(FRacerDamagePropertyChangeGroupData, OverwriteDuration) == 0x000030, "Member 'FRacerDamagePropertyChangeGroupData::OverwriteDuration' has a wrong offset!");

// ScriptStruct UnionRun.RacerDamageDirectionInterference
// 0x0008 (0x0008 - 0x0000)
struct FRacerDamageDirectionInterference final
{
public:
	float                                         HorizontalInterferenceRatio;                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalInterferenceRatio;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerDamageDirectionInterference) == 0x000004, "Wrong alignment on FRacerDamageDirectionInterference");
static_assert(sizeof(FRacerDamageDirectionInterference) == 0x000008, "Wrong size on FRacerDamageDirectionInterference");
static_assert(offsetof(FRacerDamageDirectionInterference, HorizontalInterferenceRatio) == 0x000000, "Member 'FRacerDamageDirectionInterference::HorizontalInterferenceRatio' has a wrong offset!");
static_assert(offsetof(FRacerDamageDirectionInterference, VerticalInterferenceRatio) == 0x000004, "Member 'FRacerDamageDirectionInterference::VerticalInterferenceRatio' has a wrong offset!");

// ScriptStruct UnionRun.RacerDamageData
// 0x0090 (0x0098 - 0x0008)
struct FRacerDamageData final : public FTableRowBase
{
public:
	ERacerDamageType                              DamageType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerDamageReactionType                      ReactionType;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DamageRingCount;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRacerDamagePropertyChangeGroupData> PropertyChange;                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRacerDamageDirectionInterference      DirectionInterference;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageInvincibleTime;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemUnavailableTime;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsApplyRingLostSetting;                            // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForceSpin;                                       // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForceSpin_LostAllRingRule;                       // 0x003E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSquashed;                                        // 0x003F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESpeedClassId, struct FRacerDamageSquashParam> SquashParam;                                 // 0x0040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsLostAllItem;                                     // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLostHoldItem;                                    // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPhysicalDamage;                                  // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImmediateDeceleration;                           // 0x0093(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsIgnoreTravalRingInvincible;                      // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDashAndDriftCancel;                              // 0x0095(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNeedReply;                                       // 0x0096(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_97[0x1];                                       // 0x0097(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRacerDamageData) == 0x000008, "Wrong alignment on FRacerDamageData");
static_assert(sizeof(FRacerDamageData) == 0x000098, "Wrong size on FRacerDamageData");
static_assert(offsetof(FRacerDamageData, DamageType) == 0x000008, "Member 'FRacerDamageData::DamageType' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, ReactionType) == 0x000009, "Member 'FRacerDamageData::ReactionType' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, DamageRingCount) == 0x00000C, "Member 'FRacerDamageData::DamageRingCount' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, Priority) == 0x000010, "Member 'FRacerDamageData::Priority' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, PropertyChange) == 0x000018, "Member 'FRacerDamageData::PropertyChange' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, DirectionInterference) == 0x000028, "Member 'FRacerDamageData::DirectionInterference' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, Duration) == 0x000030, "Member 'FRacerDamageData::Duration' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, DamageInvincibleTime) == 0x000034, "Member 'FRacerDamageData::DamageInvincibleTime' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, ItemUnavailableTime) == 0x000038, "Member 'FRacerDamageData::ItemUnavailableTime' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, IsApplyRingLostSetting) == 0x00003C, "Member 'FRacerDamageData::IsApplyRingLostSetting' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, IsForceSpin) == 0x00003D, "Member 'FRacerDamageData::IsForceSpin' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, IsForceSpin_LostAllRingRule) == 0x00003E, "Member 'FRacerDamageData::IsForceSpin_LostAllRingRule' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, IsSquashed) == 0x00003F, "Member 'FRacerDamageData::IsSquashed' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, SquashParam) == 0x000040, "Member 'FRacerDamageData::SquashParam' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, IsLostAllItem) == 0x000090, "Member 'FRacerDamageData::IsLostAllItem' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, IsLostHoldItem) == 0x000091, "Member 'FRacerDamageData::IsLostHoldItem' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, IsPhysicalDamage) == 0x000092, "Member 'FRacerDamageData::IsPhysicalDamage' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, IsImmediateDeceleration) == 0x000093, "Member 'FRacerDamageData::IsImmediateDeceleration' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, IsIgnoreTravalRingInvincible) == 0x000094, "Member 'FRacerDamageData::IsIgnoreTravalRingInvincible' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, IsDashAndDriftCancel) == 0x000095, "Member 'FRacerDamageData::IsDashAndDriftCancel' has a wrong offset!");
static_assert(offsetof(FRacerDamageData, IsNeedReply) == 0x000096, "Member 'FRacerDamageData::IsNeedReply' has a wrong offset!");

// ScriptStruct UnionRun.AttackedData
// 0x0100 (0x0100 - 0x0000)
struct FAttackedData final
{
public:
	struct FAttackedInfo                          AttackedInfo;                                      // 0x0000(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRacerDamageData                       RacerDamageData;                                   // 0x0068(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackedData) == 0x000008, "Wrong alignment on FAttackedData");
static_assert(sizeof(FAttackedData) == 0x000100, "Wrong size on FAttackedData");
static_assert(offsetof(FAttackedData, AttackedInfo) == 0x000000, "Member 'FAttackedData::AttackedInfo' has a wrong offset!");
static_assert(offsetof(FAttackedData, RacerDamageData) == 0x000068, "Member 'FAttackedData::RacerDamageData' has a wrong offset!");

// ScriptStruct UnionRun.StaticBodyCapsuleParam
// 0x0008 (0x0008 - 0x0000)
struct FStaticBodyCapsuleParam final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaticBodyCapsuleParam) == 0x000004, "Wrong alignment on FStaticBodyCapsuleParam");
static_assert(sizeof(FStaticBodyCapsuleParam) == 0x000008, "Wrong size on FStaticBodyCapsuleParam");
static_assert(offsetof(FStaticBodyCapsuleParam, Radius) == 0x000000, "Member 'FStaticBodyCapsuleParam::Radius' has a wrong offset!");
static_assert(offsetof(FStaticBodyCapsuleParam, Height) == 0x000004, "Member 'FStaticBodyCapsuleParam::Height' has a wrong offset!");

// ScriptStruct UnionRun.TravelRingMainCourseParamTable
// 0x0018 (0x0020 - 0x0008)
struct FTravelRingMainCourseParamTable final : public FTableRowBase
{
public:
	EStageId                                      StageId;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightOffset;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTravelRingMainCourseParamTable) == 0x000008, "Wrong alignment on FTravelRingMainCourseParamTable");
static_assert(sizeof(FTravelRingMainCourseParamTable) == 0x000020, "Wrong size on FTravelRingMainCourseParamTable");
static_assert(offsetof(FTravelRingMainCourseParamTable, StageId) == 0x000008, "Member 'FTravelRingMainCourseParamTable::StageId' has a wrong offset!");
static_assert(offsetof(FTravelRingMainCourseParamTable, HeightOffset) == 0x00000C, "Member 'FTravelRingMainCourseParamTable::HeightOffset' has a wrong offset!");
static_assert(offsetof(FTravelRingMainCourseParamTable, Comment) == 0x000010, "Member 'FTravelRingMainCourseParamTable::Comment' has a wrong offset!");

// ScriptStruct UnionRun.StaticBodyCylinderParam
// 0x0008 (0x0008 - 0x0000)
struct FStaticBodyCylinderParam final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaticBodyCylinderParam) == 0x000004, "Wrong alignment on FStaticBodyCylinderParam");
static_assert(sizeof(FStaticBodyCylinderParam) == 0x000008, "Wrong size on FStaticBodyCylinderParam");
static_assert(offsetof(FStaticBodyCylinderParam, Radius) == 0x000000, "Member 'FStaticBodyCylinderParam::Radius' has a wrong offset!");
static_assert(offsetof(FStaticBodyCylinderParam, Height) == 0x000004, "Member 'FStaticBodyCylinderParam::Height' has a wrong offset!");

// ScriptStruct UnionRun.GadgetVariousDefine
// 0x0058 (0x0060 - 0x0008)
struct FGadgetVariousDefine final : public FTableRowBase
{
public:
	EGadgetId                                     gadgetId;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EGadgetId, struct FGadgetVariousMemberInfo> GadgetMemberIDs;                                // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetVariousDefine) == 0x000008, "Wrong alignment on FGadgetVariousDefine");
static_assert(sizeof(FGadgetVariousDefine) == 0x000060, "Wrong size on FGadgetVariousDefine");
static_assert(offsetof(FGadgetVariousDefine, gadgetId) == 0x000008, "Member 'FGadgetVariousDefine::gadgetId' has a wrong offset!");
static_assert(offsetof(FGadgetVariousDefine, GadgetMemberIDs) == 0x000010, "Member 'FGadgetVariousDefine::GadgetMemberIDs' has a wrong offset!");

// ScriptStruct UnionRun.StaticBodyBoxParam
// 0x0018 (0x0018 - 0x0000)
struct FStaticBodyBoxParam final
{
public:
	struct FVector                                HalfExtents;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaticBodyBoxParam) == 0x000008, "Wrong alignment on FStaticBodyBoxParam");
static_assert(sizeof(FStaticBodyBoxParam) == 0x000018, "Wrong size on FStaticBodyBoxParam");
static_assert(offsetof(FStaticBodyBoxParam, HalfExtents) == 0x000000, "Member 'FStaticBodyBoxParam::HalfExtents' has a wrong offset!");

// ScriptStruct UnionRun.ColliderParam
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FColliderParam
{
};
#pragma pack(pop)
static_assert(alignof(FColliderParam) == 0x000001, "Wrong alignment on FColliderParam");
static_assert(sizeof(FColliderParam) == 0x000001, "Wrong size on FColliderParam");

// ScriptStruct UnionRun.StaticBodySphereParam
// 0x0004 (0x0004 - 0x0000)
struct FStaticBodySphereParam final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaticBodySphereParam) == 0x000004, "Wrong alignment on FStaticBodySphereParam");
static_assert(sizeof(FStaticBodySphereParam) == 0x000004, "Wrong size on FStaticBodySphereParam");
static_assert(offsetof(FStaticBodySphereParam, Radius) == 0x000000, "Member 'FStaticBodySphereParam::Radius' has a wrong offset!");

// ScriptStruct UnionRun.AreaDataCourseColSettingsCount
// 0x0010 (0x0010 - 0x0000)
struct FAreaDataCourseColSettingsCount final
{
public:
	TArray<int32>                                 TrianglesCounts;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaDataCourseColSettingsCount) == 0x000008, "Wrong alignment on FAreaDataCourseColSettingsCount");
static_assert(sizeof(FAreaDataCourseColSettingsCount) == 0x000010, "Wrong size on FAreaDataCourseColSettingsCount");
static_assert(offsetof(FAreaDataCourseColSettingsCount, TrianglesCounts) == 0x000000, "Member 'FAreaDataCourseColSettingsCount::TrianglesCounts' has a wrong offset!");

// ScriptStruct UnionRun.GadgetBonusDashPanelComboInfo
// 0x0018 (0x0018 - 0x0000)
struct FGadgetBonusDashPanelComboInfo final
{
public:
	struct FGadgetBoostRingBonusInfo              AddRingNum;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxAddRingNum;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComboValidTime;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetBonusDashPanelComboInfo) == 0x000004, "Wrong alignment on FGadgetBonusDashPanelComboInfo");
static_assert(sizeof(FGadgetBonusDashPanelComboInfo) == 0x000018, "Wrong size on FGadgetBonusDashPanelComboInfo");
static_assert(offsetof(FGadgetBonusDashPanelComboInfo, AddRingNum) == 0x000000, "Member 'FGadgetBonusDashPanelComboInfo::AddRingNum' has a wrong offset!");
static_assert(offsetof(FGadgetBonusDashPanelComboInfo, MaxAddRingNum) == 0x000010, "Member 'FGadgetBonusDashPanelComboInfo::MaxAddRingNum' has a wrong offset!");
static_assert(offsetof(FGadgetBonusDashPanelComboInfo, ComboValidTime) == 0x000014, "Member 'FGadgetBonusDashPanelComboInfo::ComboValidTime' has a wrong offset!");

// ScriptStruct UnionRun.TravelRingAnotherCourseParamTable
// 0x0018 (0x0020 - 0x0008)
struct FTravelRingAnotherCourseParamTable final : public FTableRowBase
{
public:
	EStageId                                      StageId;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAirPosition;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightOffset;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTravelRingAnotherCourseParamTable) == 0x000008, "Wrong alignment on FTravelRingAnotherCourseParamTable");
static_assert(sizeof(FTravelRingAnotherCourseParamTable) == 0x000020, "Wrong size on FTravelRingAnotherCourseParamTable");
static_assert(offsetof(FTravelRingAnotherCourseParamTable, StageId) == 0x000008, "Member 'FTravelRingAnotherCourseParamTable::StageId' has a wrong offset!");
static_assert(offsetof(FTravelRingAnotherCourseParamTable, bAirPosition) == 0x000009, "Member 'FTravelRingAnotherCourseParamTable::bAirPosition' has a wrong offset!");
static_assert(offsetof(FTravelRingAnotherCourseParamTable, HeightOffset) == 0x00000C, "Member 'FTravelRingAnotherCourseParamTable::HeightOffset' has a wrong offset!");
static_assert(offsetof(FTravelRingAnotherCourseParamTable, Comment) == 0x000010, "Member 'FTravelRingAnotherCourseParamTable::Comment' has a wrong offset!");

// ScriptStruct UnionRun.CollisionHitResultInfo
// 0x0058 (0x0058 - 0x0000)
struct FCollisionHitResultInfo final
{
public:
	ECollisionHitType                             CollisionHitType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCollisionBaseComponent*                HitComponent;                                      // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x48];                                      // 0x0010(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCollisionHitResultInfo) == 0x000008, "Wrong alignment on FCollisionHitResultInfo");
static_assert(sizeof(FCollisionHitResultInfo) == 0x000058, "Wrong size on FCollisionHitResultInfo");
static_assert(offsetof(FCollisionHitResultInfo, CollisionHitType) == 0x000000, "Member 'FCollisionHitResultInfo::CollisionHitType' has a wrong offset!");
static_assert(offsetof(FCollisionHitResultInfo, HitComponent) == 0x000008, "Member 'FCollisionHitResultInfo::HitComponent' has a wrong offset!");

// ScriptStruct UnionRun.TeamBoostEnergyAddData
// 0x0008 (0x0010 - 0x0008)
struct FTeamBoostEnergyAddData final : public FTableRowBase
{
public:
	EEnergyAddBehaviorType                        BehaviorType;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddEnergyValue;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamBoostEnergyAddData) == 0x000008, "Wrong alignment on FTeamBoostEnergyAddData");
static_assert(sizeof(FTeamBoostEnergyAddData) == 0x000010, "Wrong size on FTeamBoostEnergyAddData");
static_assert(offsetof(FTeamBoostEnergyAddData, BehaviorType) == 0x000008, "Member 'FTeamBoostEnergyAddData::BehaviorType' has a wrong offset!");
static_assert(offsetof(FTeamBoostEnergyAddData, AddEnergyValue) == 0x00000C, "Member 'FTeamBoostEnergyAddData::AddEnergyValue' has a wrong offset!");

// ScriptStruct UnionRun.HitTriggerInfo
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FHitTriggerInfo final
{
public:
	ECollisionHitType                             CollisionHitType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UCollisionBaseComponent> MyComponent;                                       // 0x0004(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x54];                                       // 0x000C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitTriggerInfo) == 0x000008, "Wrong alignment on FHitTriggerInfo");
static_assert(sizeof(FHitTriggerInfo) == 0x000060, "Wrong size on FHitTriggerInfo");
static_assert(offsetof(FHitTriggerInfo, CollisionHitType) == 0x000000, "Member 'FHitTriggerInfo::CollisionHitType' has a wrong offset!");
static_assert(offsetof(FHitTriggerInfo, MyComponent) == 0x000004, "Member 'FHitTriggerInfo::MyComponent' has a wrong offset!");

// ScriptStruct UnionRun.LineGuidePathData
// 0x0050 (0x0050 - 0x0000)
struct FLineGuidePathData final
{
public:
	struct FVector                                RacerLocation;                                     // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RacerQuat;                                         // 0x0020(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AccelValue;                                        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BreakValue;                                        // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DriftValue;                                        // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0xD];                                       // 0x0043(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLineGuidePathData) == 0x000010, "Wrong alignment on FLineGuidePathData");
static_assert(sizeof(FLineGuidePathData) == 0x000050, "Wrong size on FLineGuidePathData");
static_assert(offsetof(FLineGuidePathData, RacerLocation) == 0x000000, "Member 'FLineGuidePathData::RacerLocation' has a wrong offset!");
static_assert(offsetof(FLineGuidePathData, RacerQuat) == 0x000020, "Member 'FLineGuidePathData::RacerQuat' has a wrong offset!");
static_assert(offsetof(FLineGuidePathData, AccelValue) == 0x000040, "Member 'FLineGuidePathData::AccelValue' has a wrong offset!");
static_assert(offsetof(FLineGuidePathData, BreakValue) == 0x000041, "Member 'FLineGuidePathData::BreakValue' has a wrong offset!");
static_assert(offsetof(FLineGuidePathData, DriftValue) == 0x000042, "Member 'FLineGuidePathData::DriftValue' has a wrong offset!");

// ScriptStruct UnionRun.UnionVehicleRaceInput
// 0x0048 (0x0048 - 0x0000)
struct FUnionVehicleRaceInput final
{
public:
	float                                         OnSteerInput;                                      // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnPitchInput;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnAccelInput;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnBrakeInput;                                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnTrickXInput;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnTrickX2Input;                                    // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnTrickYInput;                                     // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnTrickY2Input;                                    // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OnSlimeCancelInput;                                // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnDriftPressed;                                    // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnDriftReleased;                                   // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnDrifting;                                        // 0x0032(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnUseItemPressed;                                  // 0x0033(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnUseItemReleased;                                 // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnUseIteming;                                      // 0x0035(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnTradeItemPressed;                                // 0x0036(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnRearViewPressed;                                 // 0x0037(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnRearViewReleased;                                // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnRearViewing;                                     // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnEmotePressed;                                    // 0x003A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnEmoteReleased;                                   // 0x003B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnEmoting;                                         // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnHornPressed;                                     // 0x003D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnHornReleased;                                    // 0x003E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnHorning;                                         // 0x003F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnPausePressed;                                    // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnPauseReleased;                                   // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnPausing;                                         // 0x0042(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionVehicleRaceInput) == 0x000008, "Wrong alignment on FUnionVehicleRaceInput");
static_assert(sizeof(FUnionVehicleRaceInput) == 0x000048, "Wrong size on FUnionVehicleRaceInput");
static_assert(offsetof(FUnionVehicleRaceInput, OnSteerInput) == 0x000000, "Member 'FUnionVehicleRaceInput::OnSteerInput' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnPitchInput) == 0x000004, "Member 'FUnionVehicleRaceInput::OnPitchInput' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnAccelInput) == 0x000008, "Member 'FUnionVehicleRaceInput::OnAccelInput' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnBrakeInput) == 0x00000C, "Member 'FUnionVehicleRaceInput::OnBrakeInput' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnTrickXInput) == 0x000010, "Member 'FUnionVehicleRaceInput::OnTrickXInput' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnTrickX2Input) == 0x000014, "Member 'FUnionVehicleRaceInput::OnTrickX2Input' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnTrickYInput) == 0x000018, "Member 'FUnionVehicleRaceInput::OnTrickYInput' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnTrickY2Input) == 0x00001C, "Member 'FUnionVehicleRaceInput::OnTrickY2Input' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnSlimeCancelInput) == 0x000020, "Member 'FUnionVehicleRaceInput::OnSlimeCancelInput' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnDriftPressed) == 0x000030, "Member 'FUnionVehicleRaceInput::OnDriftPressed' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnDriftReleased) == 0x000031, "Member 'FUnionVehicleRaceInput::OnDriftReleased' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnDrifting) == 0x000032, "Member 'FUnionVehicleRaceInput::OnDrifting' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnUseItemPressed) == 0x000033, "Member 'FUnionVehicleRaceInput::OnUseItemPressed' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnUseItemReleased) == 0x000034, "Member 'FUnionVehicleRaceInput::OnUseItemReleased' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnUseIteming) == 0x000035, "Member 'FUnionVehicleRaceInput::OnUseIteming' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnTradeItemPressed) == 0x000036, "Member 'FUnionVehicleRaceInput::OnTradeItemPressed' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnRearViewPressed) == 0x000037, "Member 'FUnionVehicleRaceInput::OnRearViewPressed' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnRearViewReleased) == 0x000038, "Member 'FUnionVehicleRaceInput::OnRearViewReleased' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnRearViewing) == 0x000039, "Member 'FUnionVehicleRaceInput::OnRearViewing' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnEmotePressed) == 0x00003A, "Member 'FUnionVehicleRaceInput::OnEmotePressed' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnEmoteReleased) == 0x00003B, "Member 'FUnionVehicleRaceInput::OnEmoteReleased' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnEmoting) == 0x00003C, "Member 'FUnionVehicleRaceInput::OnEmoting' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnHornPressed) == 0x00003D, "Member 'FUnionVehicleRaceInput::OnHornPressed' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnHornReleased) == 0x00003E, "Member 'FUnionVehicleRaceInput::OnHornReleased' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnHorning) == 0x00003F, "Member 'FUnionVehicleRaceInput::OnHorning' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnPausePressed) == 0x000040, "Member 'FUnionVehicleRaceInput::OnPausePressed' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnPauseReleased) == 0x000041, "Member 'FUnionVehicleRaceInput::OnPauseReleased' has a wrong offset!");
static_assert(offsetof(FUnionVehicleRaceInput, OnPausing) == 0x000042, "Member 'FUnionVehicleRaceInput::OnPausing' has a wrong offset!");

// ScriptStruct UnionRun.GadgetSuppressRunoffInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetSuppressRunoffInfo final
{
public:
	float                                         AddSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetSuppressRunoffInfo) == 0x000004, "Wrong alignment on FGadgetSuppressRunoffInfo");
static_assert(sizeof(FGadgetSuppressRunoffInfo) == 0x000004, "Wrong size on FGadgetSuppressRunoffInfo");
static_assert(offsetof(FGadgetSuppressRunoffInfo, AddSpeed) == 0x000000, "Member 'FGadgetSuppressRunoffInfo::AddSpeed' has a wrong offset!");

// ScriptStruct UnionRun.AreaDataCourseColSettings
// 0x0050 (0x0050 - 0x0000)
struct FAreaDataCourseColSettings final
{
public:
	int32                                         RevisionNo;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              SavedDateTime;                                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CourseCollisionAssetDataVersion;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CourseCollisionAssetHash;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CourseGridSize;                                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStageId                                      StageId;                                           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector3f                              StageAABBMin;                                      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              StageAABBMax;                                      // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFinalLap;                                        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStrictDivide;                                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PolygonMarginLength;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAreaDataCourseColSettingsCount> CourseCollisionsCounts;                           // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaDataCourseColSettings) == 0x000008, "Wrong alignment on FAreaDataCourseColSettings");
static_assert(sizeof(FAreaDataCourseColSettings) == 0x000050, "Wrong size on FAreaDataCourseColSettings");
static_assert(offsetof(FAreaDataCourseColSettings, RevisionNo) == 0x000000, "Member 'FAreaDataCourseColSettings::RevisionNo' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColSettings, SavedDateTime) == 0x000008, "Member 'FAreaDataCourseColSettings::SavedDateTime' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColSettings, CourseCollisionAssetDataVersion) == 0x000010, "Member 'FAreaDataCourseColSettings::CourseCollisionAssetDataVersion' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColSettings, CourseCollisionAssetHash) == 0x000014, "Member 'FAreaDataCourseColSettings::CourseCollisionAssetHash' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColSettings, CourseGridSize) == 0x000018, "Member 'FAreaDataCourseColSettings::CourseGridSize' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColSettings, StageId) == 0x00001C, "Member 'FAreaDataCourseColSettings::StageId' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColSettings, StageAABBMin) == 0x000020, "Member 'FAreaDataCourseColSettings::StageAABBMin' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColSettings, StageAABBMax) == 0x00002C, "Member 'FAreaDataCourseColSettings::StageAABBMax' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColSettings, IsFinalLap) == 0x000038, "Member 'FAreaDataCourseColSettings::IsFinalLap' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColSettings, IsStrictDivide) == 0x000039, "Member 'FAreaDataCourseColSettings::IsStrictDivide' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColSettings, PolygonMarginLength) == 0x00003C, "Member 'FAreaDataCourseColSettings::PolygonMarginLength' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColSettings, CourseCollisionsCounts) == 0x000040, "Member 'FAreaDataCourseColSettings::CourseCollisionsCounts' has a wrong offset!");

// ScriptStruct UnionRun.AreaDataCourseColContentsPart
// 0x0028 (0x0028 - 0x0000)
struct FAreaDataCourseColContentsPart final
{
public:
	TArray<int32>                                 TriIndices;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector3f                              AabbMin;                                           // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              AabbMax;                                           // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaDataCourseColContentsPart) == 0x000008, "Wrong alignment on FAreaDataCourseColContentsPart");
static_assert(sizeof(FAreaDataCourseColContentsPart) == 0x000028, "Wrong size on FAreaDataCourseColContentsPart");
static_assert(offsetof(FAreaDataCourseColContentsPart, TriIndices) == 0x000000, "Member 'FAreaDataCourseColContentsPart::TriIndices' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColContentsPart, AabbMin) == 0x000010, "Member 'FAreaDataCourseColContentsPart::AabbMin' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColContentsPart, AabbMax) == 0x00001C, "Member 'FAreaDataCourseColContentsPart::AabbMax' has a wrong offset!");

// ScriptStruct UnionRun.DashChargeParams
// 0x0010 (0x0010 - 0x0000)
struct FDashChargeParams final
{
public:
	float                                         ChargeSeconds[0x4];                                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDashChargeParams) == 0x000004, "Wrong alignment on FDashChargeParams");
static_assert(sizeof(FDashChargeParams) == 0x000010, "Wrong size on FDashChargeParams");
static_assert(offsetof(FDashChargeParams, ChargeSeconds) == 0x000000, "Member 'FDashChargeParams::ChargeSeconds' has a wrong offset!");

// ScriptStruct UnionRun.AreaDataCourseColContentsGrid
// 0x0068 (0x0068 - 0x0000)
struct FAreaDataCourseColContentsGrid final
{
public:
	TMap<int32, struct FAreaDataCourseColContentsPart> Container;                                    // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	struct FVector3f                              AabbMin;                                           // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              AabbMax;                                           // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaDataCourseColContentsGrid) == 0x000008, "Wrong alignment on FAreaDataCourseColContentsGrid");
static_assert(sizeof(FAreaDataCourseColContentsGrid) == 0x000068, "Wrong size on FAreaDataCourseColContentsGrid");
static_assert(offsetof(FAreaDataCourseColContentsGrid, Container) == 0x000000, "Member 'FAreaDataCourseColContentsGrid::Container' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColContentsGrid, AabbMin) == 0x000050, "Member 'FAreaDataCourseColContentsGrid::AabbMin' has a wrong offset!");
static_assert(offsetof(FAreaDataCourseColContentsGrid, AabbMax) == 0x00005C, "Member 'FAreaDataCourseColContentsGrid::AabbMax' has a wrong offset!");

// ScriptStruct UnionRun.AreaDataCourseColContentsCourseCollision
// 0x0050 (0x0050 - 0x0000)
struct FAreaDataCourseColContentsCourseCollision final
{
public:
	TMap<int32, struct FAreaDataCourseColContentsGrid> Container;                                    // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaDataCourseColContentsCourseCollision) == 0x000008, "Wrong alignment on FAreaDataCourseColContentsCourseCollision");
static_assert(sizeof(FAreaDataCourseColContentsCourseCollision) == 0x000050, "Wrong size on FAreaDataCourseColContentsCourseCollision");
static_assert(offsetof(FAreaDataCourseColContentsCourseCollision, Container) == 0x000000, "Member 'FAreaDataCourseColContentsCourseCollision::Container' has a wrong offset!");

// ScriptStruct UnionRun.PlaneChargeTurnSpeedParams
// 0x0014 (0x0014 - 0x0000)
struct FPlaneChargeTurnSpeedParams final
{
public:
	float                                         AngularAccel;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchAngularAccel;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSpeedMin;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSpeedCenter;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSpeedMax;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaneChargeTurnSpeedParams) == 0x000004, "Wrong alignment on FPlaneChargeTurnSpeedParams");
static_assert(sizeof(FPlaneChargeTurnSpeedParams) == 0x000014, "Wrong size on FPlaneChargeTurnSpeedParams");
static_assert(offsetof(FPlaneChargeTurnSpeedParams, AngularAccel) == 0x000000, "Member 'FPlaneChargeTurnSpeedParams::AngularAccel' has a wrong offset!");
static_assert(offsetof(FPlaneChargeTurnSpeedParams, SwitchAngularAccel) == 0x000004, "Member 'FPlaneChargeTurnSpeedParams::SwitchAngularAccel' has a wrong offset!");
static_assert(offsetof(FPlaneChargeTurnSpeedParams, AngularSpeedMin) == 0x000008, "Member 'FPlaneChargeTurnSpeedParams::AngularSpeedMin' has a wrong offset!");
static_assert(offsetof(FPlaneChargeTurnSpeedParams, AngularSpeedCenter) == 0x00000C, "Member 'FPlaneChargeTurnSpeedParams::AngularSpeedCenter' has a wrong offset!");
static_assert(offsetof(FPlaneChargeTurnSpeedParams, AngularSpeedMax) == 0x000010, "Member 'FPlaneChargeTurnSpeedParams::AngularSpeedMax' has a wrong offset!");

// ScriptStruct UnionRun.PlaneChargeTurnSpeedHandleParams
// 0x0028 (0x0028 - 0x0000)
struct FPlaneChargeTurnSpeedHandleParams final
{
public:
	struct FPlaneChargeTurnSpeedParams            HandleMin;                                         // 0x0000(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPlaneChargeTurnSpeedParams            HandleMax;                                         // 0x0014(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaneChargeTurnSpeedHandleParams) == 0x000004, "Wrong alignment on FPlaneChargeTurnSpeedHandleParams");
static_assert(sizeof(FPlaneChargeTurnSpeedHandleParams) == 0x000028, "Wrong size on FPlaneChargeTurnSpeedHandleParams");
static_assert(offsetof(FPlaneChargeTurnSpeedHandleParams, HandleMin) == 0x000000, "Member 'FPlaneChargeTurnSpeedHandleParams::HandleMin' has a wrong offset!");
static_assert(offsetof(FPlaneChargeTurnSpeedHandleParams, HandleMax) == 0x000014, "Member 'FPlaneChargeTurnSpeedHandleParams::HandleMax' has a wrong offset!");

// ScriptStruct UnionRun.AreaDataCourseColContents
// 0x0050 (0x0050 - 0x0000)
struct FAreaDataCourseColContents final
{
public:
	TMap<int32, struct FAreaDataCourseColContentsCourseCollision> Container;                         // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaDataCourseColContents) == 0x000008, "Wrong alignment on FAreaDataCourseColContents");
static_assert(sizeof(FAreaDataCourseColContents) == 0x000050, "Wrong size on FAreaDataCourseColContents");
static_assert(offsetof(FAreaDataCourseColContents, Container) == 0x000000, "Member 'FAreaDataCourseColContents::Container' has a wrong offset!");

// ScriptStruct UnionRun.AttackReply
// 0x0028 (0x0028 - 0x0000)
struct FAttackReply final
{
public:
	class FString                                 Tag;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackRacerIndex;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TakeDamageRacerIndex;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerDamageType                              DamageType;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTime;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainTime;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerDamageType                              OverwrittenByThisDamageType;                       // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttackReply) == 0x000008, "Wrong alignment on FAttackReply");
static_assert(sizeof(FAttackReply) == 0x000028, "Wrong size on FAttackReply");
static_assert(offsetof(FAttackReply, Tag) == 0x000000, "Member 'FAttackReply::Tag' has a wrong offset!");
static_assert(offsetof(FAttackReply, AttackRacerIndex) == 0x000010, "Member 'FAttackReply::AttackRacerIndex' has a wrong offset!");
static_assert(offsetof(FAttackReply, TakeDamageRacerIndex) == 0x000014, "Member 'FAttackReply::TakeDamageRacerIndex' has a wrong offset!");
static_assert(offsetof(FAttackReply, DamageType) == 0x000018, "Member 'FAttackReply::DamageType' has a wrong offset!");
static_assert(offsetof(FAttackReply, ElapsedTime) == 0x00001C, "Member 'FAttackReply::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FAttackReply, RemainTime) == 0x000020, "Member 'FAttackReply::RemainTime' has a wrong offset!");
static_assert(offsetof(FAttackReply, OverwrittenByThisDamageType) == 0x000024, "Member 'FAttackReply::OverwrittenByThisDamageType' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceOverwriteStartTransform
// 0x0070 (0x0070 - 0x0000)
struct FUnionRaceOverwriteStartTransform final
{
public:
	bool                                          bOverwrite;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x0010(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceOverwriteStartTransform) == 0x000010, "Wrong alignment on FUnionRaceOverwriteStartTransform");
static_assert(sizeof(FUnionRaceOverwriteStartTransform) == 0x000070, "Wrong size on FUnionRaceOverwriteStartTransform");
static_assert(offsetof(FUnionRaceOverwriteStartTransform, bOverwrite) == 0x000000, "Member 'FUnionRaceOverwriteStartTransform::bOverwrite' has a wrong offset!");
static_assert(offsetof(FUnionRaceOverwriteStartTransform, StartTransform) == 0x000010, "Member 'FUnionRaceOverwriteStartTransform::StartTransform' has a wrong offset!");

// ScriptStruct UnionRun.TremorParameter
// 0x0020 (0x0028 - 0x0008)
struct FTremorParameter final : public FTableRowBase
{
public:
	ECameraTremorType                             CameraTremorType;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         targetUD;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targetUDSpeed;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targetUDTime;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targetLR;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targetLRSpeed;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targetLRTime;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTremorParameter) == 0x000008, "Wrong alignment on FTremorParameter");
static_assert(sizeof(FTremorParameter) == 0x000028, "Wrong size on FTremorParameter");
static_assert(offsetof(FTremorParameter, CameraTremorType) == 0x000008, "Member 'FTremorParameter::CameraTremorType' has a wrong offset!");
static_assert(offsetof(FTremorParameter, targetUD) == 0x00000C, "Member 'FTremorParameter::targetUD' has a wrong offset!");
static_assert(offsetof(FTremorParameter, targetUDSpeed) == 0x000010, "Member 'FTremorParameter::targetUDSpeed' has a wrong offset!");
static_assert(offsetof(FTremorParameter, targetUDTime) == 0x000014, "Member 'FTremorParameter::targetUDTime' has a wrong offset!");
static_assert(offsetof(FTremorParameter, targetLR) == 0x000018, "Member 'FTremorParameter::targetLR' has a wrong offset!");
static_assert(offsetof(FTremorParameter, targetLRSpeed) == 0x00001C, "Member 'FTremorParameter::targetLRSpeed' has a wrong offset!");
static_assert(offsetof(FTremorParameter, targetLRTime) == 0x000020, "Member 'FTremorParameter::targetLRTime' has a wrong offset!");

// ScriptStruct UnionRun.CameraPostEffectDataTable
// 0x0008 (0x0010 - 0x0008)
struct FCameraPostEffectDataTable final : public FTableRowBase
{
public:
	class UMaterialInterface*                     PostEffectMaterialInterface;                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraPostEffectDataTable) == 0x000008, "Wrong alignment on FCameraPostEffectDataTable");
static_assert(sizeof(FCameraPostEffectDataTable) == 0x000010, "Wrong size on FCameraPostEffectDataTable");
static_assert(offsetof(FCameraPostEffectDataTable, PostEffectMaterialInterface) == 0x000008, "Member 'FCameraPostEffectDataTable::PostEffectMaterialInterface' has a wrong offset!");

// ScriptStruct UnionRun.CourseSequenceSpawnActorInfo
// 0x0080 (0x0080 - 0x0000)
struct FCourseSequenceSpawnActorInfo final
{
public:
	TSubclassOf<class AActor>                     spawnClass_;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             offsetTransform_;                                  // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   sequenceTriggerLabel_;                             // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCourseSequenceSpawnActorInfo) == 0x000010, "Wrong alignment on FCourseSequenceSpawnActorInfo");
static_assert(sizeof(FCourseSequenceSpawnActorInfo) == 0x000080, "Wrong size on FCourseSequenceSpawnActorInfo");
static_assert(offsetof(FCourseSequenceSpawnActorInfo, spawnClass_) == 0x000000, "Member 'FCourseSequenceSpawnActorInfo::spawnClass_' has a wrong offset!");
static_assert(offsetof(FCourseSequenceSpawnActorInfo, offsetTransform_) == 0x000010, "Member 'FCourseSequenceSpawnActorInfo::offsetTransform_' has a wrong offset!");
static_assert(offsetof(FCourseSequenceSpawnActorInfo, sequenceTriggerLabel_) == 0x000070, "Member 'FCourseSequenceSpawnActorInfo::sequenceTriggerLabel_' has a wrong offset!");

// ScriptStruct UnionRun.GadgetShortenDamagetTimeInfo
// 0x0024 (0x0024 - 0x0000)
struct FGadgetShortenDamagetTimeInfo final
{
public:
	int32                                         SpinTime1st;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpinTime12th;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceDamageOnSpeedRatio;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrashReduceRatio;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemSpeedValueChangeRatio_Anchor;                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemSpeedValueChangeRatio_BodyCut;                 // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemSpeedValueChangeRatio_Slime;                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemSpeedValueChangeRatio_Magnet;                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemSpeedValueChangeRatio_Splash;                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetShortenDamagetTimeInfo) == 0x000004, "Wrong alignment on FGadgetShortenDamagetTimeInfo");
static_assert(sizeof(FGadgetShortenDamagetTimeInfo) == 0x000024, "Wrong size on FGadgetShortenDamagetTimeInfo");
static_assert(offsetof(FGadgetShortenDamagetTimeInfo, SpinTime1st) == 0x000000, "Member 'FGadgetShortenDamagetTimeInfo::SpinTime1st' has a wrong offset!");
static_assert(offsetof(FGadgetShortenDamagetTimeInfo, SpinTime12th) == 0x000004, "Member 'FGadgetShortenDamagetTimeInfo::SpinTime12th' has a wrong offset!");
static_assert(offsetof(FGadgetShortenDamagetTimeInfo, ReduceDamageOnSpeedRatio) == 0x000008, "Member 'FGadgetShortenDamagetTimeInfo::ReduceDamageOnSpeedRatio' has a wrong offset!");
static_assert(offsetof(FGadgetShortenDamagetTimeInfo, CrashReduceRatio) == 0x00000C, "Member 'FGadgetShortenDamagetTimeInfo::CrashReduceRatio' has a wrong offset!");
static_assert(offsetof(FGadgetShortenDamagetTimeInfo, ItemSpeedValueChangeRatio_Anchor) == 0x000010, "Member 'FGadgetShortenDamagetTimeInfo::ItemSpeedValueChangeRatio_Anchor' has a wrong offset!");
static_assert(offsetof(FGadgetShortenDamagetTimeInfo, ItemSpeedValueChangeRatio_BodyCut) == 0x000014, "Member 'FGadgetShortenDamagetTimeInfo::ItemSpeedValueChangeRatio_BodyCut' has a wrong offset!");
static_assert(offsetof(FGadgetShortenDamagetTimeInfo, ItemSpeedValueChangeRatio_Slime) == 0x000018, "Member 'FGadgetShortenDamagetTimeInfo::ItemSpeedValueChangeRatio_Slime' has a wrong offset!");
static_assert(offsetof(FGadgetShortenDamagetTimeInfo, ItemSpeedValueChangeRatio_Magnet) == 0x00001C, "Member 'FGadgetShortenDamagetTimeInfo::ItemSpeedValueChangeRatio_Magnet' has a wrong offset!");
static_assert(offsetof(FGadgetShortenDamagetTimeInfo, ItemSpeedValueChangeRatio_Splash) == 0x000020, "Member 'FGadgetShortenDamagetTimeInfo::ItemSpeedValueChangeRatio_Splash' has a wrong offset!");

// ScriptStruct UnionRun.RelativeMoveParameter
// 0x000C (0x000C - 0x0000)
struct FRelativeMoveParameter
{
public:
	float                                         ModelMinScale;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ModelScaleTime;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeMoveTime;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRelativeMoveParameter) == 0x000004, "Wrong alignment on FRelativeMoveParameter");
static_assert(sizeof(FRelativeMoveParameter) == 0x00000C, "Wrong size on FRelativeMoveParameter");
static_assert(offsetof(FRelativeMoveParameter, ModelMinScale) == 0x000000, "Member 'FRelativeMoveParameter::ModelMinScale' has a wrong offset!");
static_assert(offsetof(FRelativeMoveParameter, ModelScaleTime) == 0x000004, "Member 'FRelativeMoveParameter::ModelScaleTime' has a wrong offset!");
static_assert(offsetof(FRelativeMoveParameter, RelativeMoveTime) == 0x000008, "Member 'FRelativeMoveParameter::RelativeMoveTime' has a wrong offset!");

// ScriptStruct UnionRun.ItemboxRelativeMoveParameter
// 0x001C (0x0028 - 0x000C)
struct FItemboxRelativeMoveParameter final : public FRelativeMoveParameter
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeMoveOffset;                                // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemboxRelativeMoveParameter) == 0x000008, "Wrong alignment on FItemboxRelativeMoveParameter");
static_assert(sizeof(FItemboxRelativeMoveParameter) == 0x000028, "Wrong size on FItemboxRelativeMoveParameter");
static_assert(offsetof(FItemboxRelativeMoveParameter, RelativeMoveOffset) == 0x000010, "Member 'FItemboxRelativeMoveParameter::RelativeMoveOffset' has a wrong offset!");

// ScriptStruct UnionRun.PackageRingVariationRateData
// 0x000C (0x000C - 0x0000)
struct FPackageRingVariationRateData final
{
public:
	int32                                         Ring10_Rate;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ring20_Rate;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ring100_Rate;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPackageRingVariationRateData) == 0x000004, "Wrong alignment on FPackageRingVariationRateData");
static_assert(sizeof(FPackageRingVariationRateData) == 0x00000C, "Wrong size on FPackageRingVariationRateData");
static_assert(offsetof(FPackageRingVariationRateData, Ring10_Rate) == 0x000000, "Member 'FPackageRingVariationRateData::Ring10_Rate' has a wrong offset!");
static_assert(offsetof(FPackageRingVariationRateData, Ring20_Rate) == 0x000004, "Member 'FPackageRingVariationRateData::Ring20_Rate' has a wrong offset!");
static_assert(offsetof(FPackageRingVariationRateData, Ring100_Rate) == 0x000008, "Member 'FPackageRingVariationRateData::Ring100_Rate' has a wrong offset!");

// ScriptStruct UnionRun.PackageRingItemBoxVariationRateData
// 0x0018 (0x0018 - 0x0000)
struct FPackageRingItemBoxVariationRateData final
{
public:
	struct FPackageRingVariationRateData          NormalBox;                                         // 0x0000(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPackageRingVariationRateData          SpecialBox;                                        // 0x000C(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPackageRingItemBoxVariationRateData) == 0x000004, "Wrong alignment on FPackageRingItemBoxVariationRateData");
static_assert(sizeof(FPackageRingItemBoxVariationRateData) == 0x000018, "Wrong size on FPackageRingItemBoxVariationRateData");
static_assert(offsetof(FPackageRingItemBoxVariationRateData, NormalBox) == 0x000000, "Member 'FPackageRingItemBoxVariationRateData::NormalBox' has a wrong offset!");
static_assert(offsetof(FPackageRingItemBoxVariationRateData, SpecialBox) == 0x00000C, "Member 'FPackageRingItemBoxVariationRateData::SpecialBox' has a wrong offset!");

// ScriptStruct UnionRun.DroppedRingLandJumpParameter
// 0x0024 (0x0024 - 0x0000)
struct FDroppedRingLandJumpParameter final
{
public:
	float                                         GravitationalAcceleration;                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetHeight;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetWidth;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontJumpingSpeed;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UperJumpingSpeed;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomnessFrontJumpingSpeed;                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomnessUperJumpingSpeed;                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeMoveTime;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RelativeMove;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDroppedRingLandJumpParameter) == 0x000004, "Wrong alignment on FDroppedRingLandJumpParameter");
static_assert(sizeof(FDroppedRingLandJumpParameter) == 0x000024, "Wrong size on FDroppedRingLandJumpParameter");
static_assert(offsetof(FDroppedRingLandJumpParameter, GravitationalAcceleration) == 0x000000, "Member 'FDroppedRingLandJumpParameter::GravitationalAcceleration' has a wrong offset!");
static_assert(offsetof(FDroppedRingLandJumpParameter, OffsetHeight) == 0x000004, "Member 'FDroppedRingLandJumpParameter::OffsetHeight' has a wrong offset!");
static_assert(offsetof(FDroppedRingLandJumpParameter, OffsetWidth) == 0x000008, "Member 'FDroppedRingLandJumpParameter::OffsetWidth' has a wrong offset!");
static_assert(offsetof(FDroppedRingLandJumpParameter, FrontJumpingSpeed) == 0x00000C, "Member 'FDroppedRingLandJumpParameter::FrontJumpingSpeed' has a wrong offset!");
static_assert(offsetof(FDroppedRingLandJumpParameter, UperJumpingSpeed) == 0x000010, "Member 'FDroppedRingLandJumpParameter::UperJumpingSpeed' has a wrong offset!");
static_assert(offsetof(FDroppedRingLandJumpParameter, RandomnessFrontJumpingSpeed) == 0x000014, "Member 'FDroppedRingLandJumpParameter::RandomnessFrontJumpingSpeed' has a wrong offset!");
static_assert(offsetof(FDroppedRingLandJumpParameter, RandomnessUperJumpingSpeed) == 0x000018, "Member 'FDroppedRingLandJumpParameter::RandomnessUperJumpingSpeed' has a wrong offset!");
static_assert(offsetof(FDroppedRingLandJumpParameter, RelativeMoveTime) == 0x00001C, "Member 'FDroppedRingLandJumpParameter::RelativeMoveTime' has a wrong offset!");
static_assert(offsetof(FDroppedRingLandJumpParameter, RelativeMove) == 0x000020, "Member 'FDroppedRingLandJumpParameter::RelativeMove' has a wrong offset!");

// ScriptStruct UnionRun.DroppedRingSkyJumpParameter
// 0x0018 (0x0018 - 0x0000)
struct FDroppedRingSkyJumpParameter final
{
public:
	float                                         GravitationalAcceleration;                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetWidth;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpingSpeed;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomnessJumpingSpeed;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlightDistance;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomnessFlightDistance;                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDroppedRingSkyJumpParameter) == 0x000004, "Wrong alignment on FDroppedRingSkyJumpParameter");
static_assert(sizeof(FDroppedRingSkyJumpParameter) == 0x000018, "Wrong size on FDroppedRingSkyJumpParameter");
static_assert(offsetof(FDroppedRingSkyJumpParameter, GravitationalAcceleration) == 0x000000, "Member 'FDroppedRingSkyJumpParameter::GravitationalAcceleration' has a wrong offset!");
static_assert(offsetof(FDroppedRingSkyJumpParameter, OffsetWidth) == 0x000004, "Member 'FDroppedRingSkyJumpParameter::OffsetWidth' has a wrong offset!");
static_assert(offsetof(FDroppedRingSkyJumpParameter, JumpingSpeed) == 0x000008, "Member 'FDroppedRingSkyJumpParameter::JumpingSpeed' has a wrong offset!");
static_assert(offsetof(FDroppedRingSkyJumpParameter, RandomnessJumpingSpeed) == 0x00000C, "Member 'FDroppedRingSkyJumpParameter::RandomnessJumpingSpeed' has a wrong offset!");
static_assert(offsetof(FDroppedRingSkyJumpParameter, FlightDistance) == 0x000010, "Member 'FDroppedRingSkyJumpParameter::FlightDistance' has a wrong offset!");
static_assert(offsetof(FDroppedRingSkyJumpParameter, RandomnessFlightDistance) == 0x000014, "Member 'FDroppedRingSkyJumpParameter::RandomnessFlightDistance' has a wrong offset!");

// ScriptStruct UnionRun.DroppedRingPlacementInfo
// 0x001C (0x001C - 0x0000)
struct FDroppedRingPlacementInfo final
{
public:
	float                                         FrontProhibitedRange;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropMaxCount;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableInertia;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InertiaCoffi;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InertiaAddSpeed;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomnessLaunchAngle;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sky_LaunchAngleFor1stRing;                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDroppedRingPlacementInfo) == 0x000004, "Wrong alignment on FDroppedRingPlacementInfo");
static_assert(sizeof(FDroppedRingPlacementInfo) == 0x00001C, "Wrong size on FDroppedRingPlacementInfo");
static_assert(offsetof(FDroppedRingPlacementInfo, FrontProhibitedRange) == 0x000000, "Member 'FDroppedRingPlacementInfo::FrontProhibitedRange' has a wrong offset!");
static_assert(offsetof(FDroppedRingPlacementInfo, DropMaxCount) == 0x000004, "Member 'FDroppedRingPlacementInfo::DropMaxCount' has a wrong offset!");
static_assert(offsetof(FDroppedRingPlacementInfo, EnableInertia) == 0x000008, "Member 'FDroppedRingPlacementInfo::EnableInertia' has a wrong offset!");
static_assert(offsetof(FDroppedRingPlacementInfo, InertiaCoffi) == 0x00000C, "Member 'FDroppedRingPlacementInfo::InertiaCoffi' has a wrong offset!");
static_assert(offsetof(FDroppedRingPlacementInfo, InertiaAddSpeed) == 0x000010, "Member 'FDroppedRingPlacementInfo::InertiaAddSpeed' has a wrong offset!");
static_assert(offsetof(FDroppedRingPlacementInfo, RandomnessLaunchAngle) == 0x000014, "Member 'FDroppedRingPlacementInfo::RandomnessLaunchAngle' has a wrong offset!");
static_assert(offsetof(FDroppedRingPlacementInfo, Sky_LaunchAngleFor1stRing) == 0x000018, "Member 'FDroppedRingPlacementInfo::Sky_LaunchAngleFor1stRing' has a wrong offset!");

// ScriptStruct UnionRun.Enemy_Extnd06_Enemy06001_Size
// 0x0020 (0x0020 - 0x0000)
struct FEnemy_Extnd06_Enemy06001_Size final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnemy_Extnd06_Enemy06001_Size) == 0x000008, "Wrong alignment on FEnemy_Extnd06_Enemy06001_Size");
static_assert(sizeof(FEnemy_Extnd06_Enemy06001_Size) == 0x000020, "Wrong size on FEnemy_Extnd06_Enemy06001_Size");
static_assert(offsetof(FEnemy_Extnd06_Enemy06001_Size, Height) == 0x000000, "Member 'FEnemy_Extnd06_Enemy06001_Size::Height' has a wrong offset!");
static_assert(offsetof(FEnemy_Extnd06_Enemy06001_Size, Radius) == 0x000004, "Member 'FEnemy_Extnd06_Enemy06001_Size::Radius' has a wrong offset!");
static_assert(offsetof(FEnemy_Extnd06_Enemy06001_Size, Offset) == 0x000008, "Member 'FEnemy_Extnd06_Enemy06001_Size::Offset' has a wrong offset!");

// ScriptStruct UnionRun.GroupHitInfo
// 0x0058 (0x0058 - 0x0000)
struct FGroupHitInfo final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupBonusHitCount;                                // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            RacersHitCountList;                                // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupHitInfo) == 0x000008, "Wrong alignment on FGroupHitInfo");
static_assert(sizeof(FGroupHitInfo) == 0x000058, "Wrong size on FGroupHitInfo");
static_assert(offsetof(FGroupHitInfo, GroupIndex) == 0x000000, "Member 'FGroupHitInfo::GroupIndex' has a wrong offset!");
static_assert(offsetof(FGroupHitInfo, GroupBonusHitCount) == 0x000004, "Member 'FGroupHitInfo::GroupBonusHitCount' has a wrong offset!");
static_assert(offsetof(FGroupHitInfo, RacersHitCountList) == 0x000008, "Member 'FGroupHitInfo::RacersHitCountList' has a wrong offset!");

// ScriptStruct UnionRun.Enemy_Extnd06_Object_06001_Size
// 0x0020 (0x0020 - 0x0000)
struct FEnemy_Extnd06_Object_06001_Size final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnemy_Extnd06_Object_06001_Size) == 0x000008, "Wrong alignment on FEnemy_Extnd06_Object_06001_Size");
static_assert(sizeof(FEnemy_Extnd06_Object_06001_Size) == 0x000020, "Wrong size on FEnemy_Extnd06_Object_06001_Size");
static_assert(offsetof(FEnemy_Extnd06_Object_06001_Size, Height) == 0x000000, "Member 'FEnemy_Extnd06_Object_06001_Size::Height' has a wrong offset!");
static_assert(offsetof(FEnemy_Extnd06_Object_06001_Size, Radius) == 0x000004, "Member 'FEnemy_Extnd06_Object_06001_Size::Radius' has a wrong offset!");
static_assert(offsetof(FEnemy_Extnd06_Object_06001_Size, Offset) == 0x000008, "Member 'FEnemy_Extnd06_Object_06001_Size::Offset' has a wrong offset!");

// ScriptStruct UnionRun.DarkChaoHoldItemData
// 0x0090 (0x0098 - 0x0008)
struct FDarkChaoHoldItemData final : public FTableRowBase
{
public:
	EItemId                                       ItemId;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRareItem;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MeshType;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsIncludeUsableTimes;                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             StaticMeshData;                                    // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMeshData;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              AnimClass;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimAsset;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TwiceTimesAnimAsset;                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        OnceTimeAnimAsset;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeScaleOffset;                               // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocationOffset;                            // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDarkChaoHoldItemData) == 0x000008, "Wrong alignment on FDarkChaoHoldItemData");
static_assert(sizeof(FDarkChaoHoldItemData) == 0x000098, "Wrong size on FDarkChaoHoldItemData");
static_assert(offsetof(FDarkChaoHoldItemData, ItemId) == 0x000008, "Member 'FDarkChaoHoldItemData::ItemId' has a wrong offset!");
static_assert(offsetof(FDarkChaoHoldItemData, IsRareItem) == 0x000009, "Member 'FDarkChaoHoldItemData::IsRareItem' has a wrong offset!");
static_assert(offsetof(FDarkChaoHoldItemData, MeshType) == 0x00000C, "Member 'FDarkChaoHoldItemData::MeshType' has a wrong offset!");
static_assert(offsetof(FDarkChaoHoldItemData, IsIncludeUsableTimes) == 0x000010, "Member 'FDarkChaoHoldItemData::IsIncludeUsableTimes' has a wrong offset!");
static_assert(offsetof(FDarkChaoHoldItemData, StaticMeshData) == 0x000018, "Member 'FDarkChaoHoldItemData::StaticMeshData' has a wrong offset!");
static_assert(offsetof(FDarkChaoHoldItemData, SkeletalMeshData) == 0x000040, "Member 'FDarkChaoHoldItemData::SkeletalMeshData' has a wrong offset!");
static_assert(offsetof(FDarkChaoHoldItemData, AnimClass) == 0x000048, "Member 'FDarkChaoHoldItemData::AnimClass' has a wrong offset!");
static_assert(offsetof(FDarkChaoHoldItemData, AnimAsset) == 0x000050, "Member 'FDarkChaoHoldItemData::AnimAsset' has a wrong offset!");
static_assert(offsetof(FDarkChaoHoldItemData, TwiceTimesAnimAsset) == 0x000058, "Member 'FDarkChaoHoldItemData::TwiceTimesAnimAsset' has a wrong offset!");
static_assert(offsetof(FDarkChaoHoldItemData, OnceTimeAnimAsset) == 0x000060, "Member 'FDarkChaoHoldItemData::OnceTimeAnimAsset' has a wrong offset!");
static_assert(offsetof(FDarkChaoHoldItemData, RelativeScaleOffset) == 0x000068, "Member 'FDarkChaoHoldItemData::RelativeScaleOffset' has a wrong offset!");
static_assert(offsetof(FDarkChaoHoldItemData, RelativeLocationOffset) == 0x000080, "Member 'FDarkChaoHoldItemData::RelativeLocationOffset' has a wrong offset!");

// ScriptStruct UnionRun.BubbleItemBoxParam
// 0x0008 (0x0008 - 0x0000)
struct FBubbleItemBoxParam final
{
public:
	EItemBoxType                                  BoxType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RelocationWaitTime;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBubbleItemBoxParam) == 0x000004, "Wrong alignment on FBubbleItemBoxParam");
static_assert(sizeof(FBubbleItemBoxParam) == 0x000008, "Wrong size on FBubbleItemBoxParam");
static_assert(offsetof(FBubbleItemBoxParam, BoxType) == 0x000000, "Member 'FBubbleItemBoxParam::BoxType' has a wrong offset!");
static_assert(offsetof(FBubbleItemBoxParam, RelocationWaitTime) == 0x000004, "Member 'FBubbleItemBoxParam::RelocationWaitTime' has a wrong offset!");

// ScriptStruct UnionRun.BubblePackageRingParam
// 0x0001 (0x0001 - 0x0000)
struct FBubblePackageRingParam final
{
public:
	EPackageRingType                              RingType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBubblePackageRingParam) == 0x000001, "Wrong alignment on FBubblePackageRingParam");
static_assert(sizeof(FBubblePackageRingParam) == 0x000001, "Wrong size on FBubblePackageRingParam");
static_assert(offsetof(FBubblePackageRingParam, RingType) == 0x000000, "Member 'FBubblePackageRingParam::RingType' has a wrong offset!");

// ScriptStruct UnionRun.LotteryRateData
// 0x0040 (0x0048 - 0x0008)
struct FLotteryRateData final : public FTableRowBase
{
public:
	int16                                         SingleWhiteBoostRatio;                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         DoubleWhiteBoostRatio;                             // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         PackageRingRatio;                                  // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         HominPunchRatio;                                   // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         DoubleHominPunchRatio;                             // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         TripleHominPunchRatio;                             // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         YellowDrill;                                       // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         ThornBall;                                         // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         MonsterTruck;                                      // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         KingBoomBoo;                                       // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         RocketPunch;                                       // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         DoubleRocketPunch;                                 // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         TripleRocketPunch;                                 // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         KingWhiteBoost;                                    // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         CyanLaser;                                         // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         VioletVoid;                                        // 0x0026(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Anchor;                                            // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         BodyCut;                                           // 0x002A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Slicer;                                            // 0x002C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Slime;                                             // 0x002E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Splash;                                            // 0x0030(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         DarkChao;                                          // 0x0032(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Magnet;                                            // 0x0034(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         BlackBomb;                                         // 0x0036(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         WarpRing;                                          // 0x0038(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         TeamWarpRing;                                      // 0x003A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Omochao;                                           // 0x003C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Shield;                                            // 0x003E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Weight;                                            // 0x0040(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enableFlag;                                        // 0x0042(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLotteryRateData) == 0x000008, "Wrong alignment on FLotteryRateData");
static_assert(sizeof(FLotteryRateData) == 0x000048, "Wrong size on FLotteryRateData");
static_assert(offsetof(FLotteryRateData, SingleWhiteBoostRatio) == 0x000008, "Member 'FLotteryRateData::SingleWhiteBoostRatio' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, DoubleWhiteBoostRatio) == 0x00000A, "Member 'FLotteryRateData::DoubleWhiteBoostRatio' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, PackageRingRatio) == 0x00000C, "Member 'FLotteryRateData::PackageRingRatio' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, HominPunchRatio) == 0x00000E, "Member 'FLotteryRateData::HominPunchRatio' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, DoubleHominPunchRatio) == 0x000010, "Member 'FLotteryRateData::DoubleHominPunchRatio' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, TripleHominPunchRatio) == 0x000012, "Member 'FLotteryRateData::TripleHominPunchRatio' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, YellowDrill) == 0x000014, "Member 'FLotteryRateData::YellowDrill' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, ThornBall) == 0x000016, "Member 'FLotteryRateData::ThornBall' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, MonsterTruck) == 0x000018, "Member 'FLotteryRateData::MonsterTruck' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, KingBoomBoo) == 0x00001A, "Member 'FLotteryRateData::KingBoomBoo' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, RocketPunch) == 0x00001C, "Member 'FLotteryRateData::RocketPunch' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, DoubleRocketPunch) == 0x00001E, "Member 'FLotteryRateData::DoubleRocketPunch' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, TripleRocketPunch) == 0x000020, "Member 'FLotteryRateData::TripleRocketPunch' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, KingWhiteBoost) == 0x000022, "Member 'FLotteryRateData::KingWhiteBoost' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, CyanLaser) == 0x000024, "Member 'FLotteryRateData::CyanLaser' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, VioletVoid) == 0x000026, "Member 'FLotteryRateData::VioletVoid' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, Anchor) == 0x000028, "Member 'FLotteryRateData::Anchor' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, BodyCut) == 0x00002A, "Member 'FLotteryRateData::BodyCut' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, Slicer) == 0x00002C, "Member 'FLotteryRateData::Slicer' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, Slime) == 0x00002E, "Member 'FLotteryRateData::Slime' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, Splash) == 0x000030, "Member 'FLotteryRateData::Splash' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, DarkChao) == 0x000032, "Member 'FLotteryRateData::DarkChao' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, Magnet) == 0x000034, "Member 'FLotteryRateData::Magnet' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, BlackBomb) == 0x000036, "Member 'FLotteryRateData::BlackBomb' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, WarpRing) == 0x000038, "Member 'FLotteryRateData::WarpRing' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, TeamWarpRing) == 0x00003A, "Member 'FLotteryRateData::TeamWarpRing' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, Omochao) == 0x00003C, "Member 'FLotteryRateData::Omochao' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, Shield) == 0x00003E, "Member 'FLotteryRateData::Shield' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, Weight) == 0x000040, "Member 'FLotteryRateData::Weight' has a wrong offset!");
static_assert(offsetof(FLotteryRateData, enableFlag) == 0x000042, "Member 'FLotteryRateData::enableFlag' has a wrong offset!");

// ScriptStruct UnionRun.SBubbleBonusParam
// 0x0070 (0x0070 - 0x0000)
struct FSBubbleBonusParam final
{
public:
	EBubbleBonusType                              BonusCategoryType;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBubbleItemBoxParam                    ItemBoxParam;                                      // 0x0004(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBubblePackageRingParam                PackageRingParam;                                  // 0x000C(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BonusItemMaxScale;                                 // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BubbleExtendScaleValue;                            // 0x0058(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSBubbleBonusParam) == 0x000008, "Wrong alignment on FSBubbleBonusParam");
static_assert(sizeof(FSBubbleBonusParam) == 0x000070, "Wrong size on FSBubbleBonusParam");
static_assert(offsetof(FSBubbleBonusParam, BonusCategoryType) == 0x000000, "Member 'FSBubbleBonusParam::BonusCategoryType' has a wrong offset!");
static_assert(offsetof(FSBubbleBonusParam, ItemBoxParam) == 0x000004, "Member 'FSBubbleBonusParam::ItemBoxParam' has a wrong offset!");
static_assert(offsetof(FSBubbleBonusParam, PackageRingParam) == 0x00000C, "Member 'FSBubbleBonusParam::PackageRingParam' has a wrong offset!");
static_assert(offsetof(FSBubbleBonusParam, LocationOffset) == 0x000010, "Member 'FSBubbleBonusParam::LocationOffset' has a wrong offset!");
static_assert(offsetof(FSBubbleBonusParam, RotationOffset) == 0x000028, "Member 'FSBubbleBonusParam::RotationOffset' has a wrong offset!");
static_assert(offsetof(FSBubbleBonusParam, BonusItemMaxScale) == 0x000040, "Member 'FSBubbleBonusParam::BonusItemMaxScale' has a wrong offset!");
static_assert(offsetof(FSBubbleBonusParam, BubbleExtendScaleValue) == 0x000058, "Member 'FSBubbleBonusParam::BubbleExtendScaleValue' has a wrong offset!");

// ScriptStruct UnionRun.DonutHoopItemBoxParam
// 0x0008 (0x0008 - 0x0000)
struct FDonutHoopItemBoxParam final
{
public:
	EItemBoxType                                  ItemBoxType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RelocationWaitTime;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDonutHoopItemBoxParam) == 0x000004, "Wrong alignment on FDonutHoopItemBoxParam");
static_assert(sizeof(FDonutHoopItemBoxParam) == 0x000008, "Wrong size on FDonutHoopItemBoxParam");
static_assert(offsetof(FDonutHoopItemBoxParam, ItemBoxType) == 0x000000, "Member 'FDonutHoopItemBoxParam::ItemBoxType' has a wrong offset!");
static_assert(offsetof(FDonutHoopItemBoxParam, RelocationWaitTime) == 0x000004, "Member 'FDonutHoopItemBoxParam::RelocationWaitTime' has a wrong offset!");

// ScriptStruct UnionRun.DonutHoopParam
// 0x0058 (0x0058 - 0x0000)
struct FDonutHoopParam final
{
public:
	class UStaticMesh*                            DonutMesh;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDonutHoopCenterObjectType                    CenterType;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDonutHoopPackageRingParam             PakcageRingParam;                                  // 0x0009(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDonutHoopItemBoxParam                 ItemBoxParam;                                      // 0x000C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDonutHoopParam) == 0x000008, "Wrong alignment on FDonutHoopParam");
static_assert(sizeof(FDonutHoopParam) == 0x000058, "Wrong size on FDonutHoopParam");
static_assert(offsetof(FDonutHoopParam, DonutMesh) == 0x000000, "Member 'FDonutHoopParam::DonutMesh' has a wrong offset!");
static_assert(offsetof(FDonutHoopParam, CenterType) == 0x000008, "Member 'FDonutHoopParam::CenterType' has a wrong offset!");
static_assert(offsetof(FDonutHoopParam, PakcageRingParam) == 0x000009, "Member 'FDonutHoopParam::PakcageRingParam' has a wrong offset!");
static_assert(offsetof(FDonutHoopParam, ItemBoxParam) == 0x00000C, "Member 'FDonutHoopParam::ItemBoxParam' has a wrong offset!");
static_assert(offsetof(FDonutHoopParam, LocationOffset) == 0x000018, "Member 'FDonutHoopParam::LocationOffset' has a wrong offset!");
static_assert(offsetof(FDonutHoopParam, RotationOffset) == 0x000030, "Member 'FDonutHoopParam::RotationOffset' has a wrong offset!");

// ScriptStruct UnionRun.StruckoutPackageRingParam
// 0x0001 (0x0001 - 0x0000)
struct FStruckoutPackageRingParam final
{
public:
	EPackageRingType                              RingType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStruckoutPackageRingParam) == 0x000001, "Wrong alignment on FStruckoutPackageRingParam");
static_assert(sizeof(FStruckoutPackageRingParam) == 0x000001, "Wrong size on FStruckoutPackageRingParam");
static_assert(offsetof(FStruckoutPackageRingParam, RingType) == 0x000000, "Member 'FStruckoutPackageRingParam::RingType' has a wrong offset!");

// ScriptStruct UnionRun.GadgetDashUpInfo
// 0x0008 (0x0008 - 0x0000)
struct FGadgetDashUpInfo final
{
public:
	float                                         AddSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelMul;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetDashUpInfo) == 0x000004, "Wrong alignment on FGadgetDashUpInfo");
static_assert(sizeof(FGadgetDashUpInfo) == 0x000008, "Wrong size on FGadgetDashUpInfo");
static_assert(offsetof(FGadgetDashUpInfo, AddSpeed) == 0x000000, "Member 'FGadgetDashUpInfo::AddSpeed' has a wrong offset!");
static_assert(offsetof(FGadgetDashUpInfo, AccelMul) == 0x000004, "Member 'FGadgetDashUpInfo::AccelMul' has a wrong offset!");

// ScriptStruct UnionRun.StruckoutRouteParam
// 0x0040 (0x0040 - 0x0000)
struct FStruckoutRouteParam final
{
public:
	EStruckoutCenterType                          RouteType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStruckoutPanelBonus                          BonusType;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruckoutItemBoxParam                 ItemBoxParam;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStruckoutPackageRingParam             PackageRingParam;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStruckoutRouteParam) == 0x000008, "Wrong alignment on FStruckoutRouteParam");
static_assert(sizeof(FStruckoutRouteParam) == 0x000040, "Wrong size on FStruckoutRouteParam");
static_assert(offsetof(FStruckoutRouteParam, RouteType) == 0x000000, "Member 'FStruckoutRouteParam::RouteType' has a wrong offset!");
static_assert(offsetof(FStruckoutRouteParam, BonusType) == 0x000001, "Member 'FStruckoutRouteParam::BonusType' has a wrong offset!");
static_assert(offsetof(FStruckoutRouteParam, ItemBoxParam) == 0x000004, "Member 'FStruckoutRouteParam::ItemBoxParam' has a wrong offset!");
static_assert(offsetof(FStruckoutRouteParam, PackageRingParam) == 0x00000C, "Member 'FStruckoutRouteParam::PackageRingParam' has a wrong offset!");
static_assert(offsetof(FStruckoutRouteParam, LocationOffset) == 0x000010, "Member 'FStruckoutRouteParam::LocationOffset' has a wrong offset!");
static_assert(offsetof(FStruckoutRouteParam, RotationOffset) == 0x000028, "Member 'FStruckoutRouteParam::RotationOffset' has a wrong offset!");

// ScriptStruct UnionRun.EditorRouteTextFormat
// 0x0028 (0x0028 - 0x0000)
struct FEditorRouteTextFormat final
{
public:
	EStruckoutCenterType                          RouteTextType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemBoxType                                  BoxType;                                           // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPackageRingType                              RingType;                                          // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2f                              Scale;                                             // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEditorRouteTextFormat) == 0x000008, "Wrong alignment on FEditorRouteTextFormat");
static_assert(sizeof(FEditorRouteTextFormat) == 0x000028, "Wrong size on FEditorRouteTextFormat");
static_assert(offsetof(FEditorRouteTextFormat, RouteTextType) == 0x000000, "Member 'FEditorRouteTextFormat::RouteTextType' has a wrong offset!");
static_assert(offsetof(FEditorRouteTextFormat, BoxType) == 0x000001, "Member 'FEditorRouteTextFormat::BoxType' has a wrong offset!");
static_assert(offsetof(FEditorRouteTextFormat, RingType) == 0x000002, "Member 'FEditorRouteTextFormat::RingType' has a wrong offset!");
static_assert(offsetof(FEditorRouteTextFormat, Text) == 0x000008, "Member 'FEditorRouteTextFormat::Text' has a wrong offset!");
static_assert(offsetof(FEditorRouteTextFormat, Color) == 0x000018, "Member 'FEditorRouteTextFormat::Color' has a wrong offset!");
static_assert(offsetof(FEditorRouteTextFormat, Scale) == 0x00001C, "Member 'FEditorRouteTextFormat::Scale' has a wrong offset!");

// ScriptStruct UnionRun.ComPointDistanceData
// 0x0030 (0x0038 - 0x0008)
struct FComPointDistanceData final : public FTableRowBase
{
public:
	EPointDistanceGroup                           PointDistanceGroup;                                // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ComRank1;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank2;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank3;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank4;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank5;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank6;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank7;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank8;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank9;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank10;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank11;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComPointDistanceData) == 0x000008, "Wrong alignment on FComPointDistanceData");
static_assert(sizeof(FComPointDistanceData) == 0x000038, "Wrong size on FComPointDistanceData");
static_assert(offsetof(FComPointDistanceData, PointDistanceGroup) == 0x000008, "Member 'FComPointDistanceData::PointDistanceGroup' has a wrong offset!");
static_assert(offsetof(FComPointDistanceData, ComRank1) == 0x00000C, "Member 'FComPointDistanceData::ComRank1' has a wrong offset!");
static_assert(offsetof(FComPointDistanceData, ComRank2) == 0x000010, "Member 'FComPointDistanceData::ComRank2' has a wrong offset!");
static_assert(offsetof(FComPointDistanceData, ComRank3) == 0x000014, "Member 'FComPointDistanceData::ComRank3' has a wrong offset!");
static_assert(offsetof(FComPointDistanceData, ComRank4) == 0x000018, "Member 'FComPointDistanceData::ComRank4' has a wrong offset!");
static_assert(offsetof(FComPointDistanceData, ComRank5) == 0x00001C, "Member 'FComPointDistanceData::ComRank5' has a wrong offset!");
static_assert(offsetof(FComPointDistanceData, ComRank6) == 0x000020, "Member 'FComPointDistanceData::ComRank6' has a wrong offset!");
static_assert(offsetof(FComPointDistanceData, ComRank7) == 0x000024, "Member 'FComPointDistanceData::ComRank7' has a wrong offset!");
static_assert(offsetof(FComPointDistanceData, ComRank8) == 0x000028, "Member 'FComPointDistanceData::ComRank8' has a wrong offset!");
static_assert(offsetof(FComPointDistanceData, ComRank9) == 0x00002C, "Member 'FComPointDistanceData::ComRank9' has a wrong offset!");
static_assert(offsetof(FComPointDistanceData, ComRank10) == 0x000030, "Member 'FComPointDistanceData::ComRank10' has a wrong offset!");
static_assert(offsetof(FComPointDistanceData, ComRank11) == 0x000034, "Member 'FComPointDistanceData::ComRank11' has a wrong offset!");

// ScriptStruct UnionRun.SweetsShipCannonBallData
// 0x0010 (0x0010 - 0x0000)
struct FSweetsShipCannonBallData final
{
public:
	class UStaticMesh*                            BallMesh;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         BreakEffect;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSweetsShipCannonBallData) == 0x000008, "Wrong alignment on FSweetsShipCannonBallData");
static_assert(sizeof(FSweetsShipCannonBallData) == 0x000010, "Wrong size on FSweetsShipCannonBallData");
static_assert(offsetof(FSweetsShipCannonBallData, BallMesh) == 0x000000, "Member 'FSweetsShipCannonBallData::BallMesh' has a wrong offset!");
static_assert(offsetof(FSweetsShipCannonBallData, BreakEffect) == 0x000008, "Member 'FSweetsShipCannonBallData::BreakEffect' has a wrong offset!");

// ScriptStruct UnionRun.Gimmick_Extnd06_Barricade_Size
// 0x0020 (0x0020 - 0x0000)
struct FGimmick_Extnd06_Barricade_Size final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGimmick_Extnd06_Barricade_Size) == 0x000008, "Wrong alignment on FGimmick_Extnd06_Barricade_Size");
static_assert(sizeof(FGimmick_Extnd06_Barricade_Size) == 0x000020, "Wrong size on FGimmick_Extnd06_Barricade_Size");
static_assert(offsetof(FGimmick_Extnd06_Barricade_Size, Height) == 0x000000, "Member 'FGimmick_Extnd06_Barricade_Size::Height' has a wrong offset!");
static_assert(offsetof(FGimmick_Extnd06_Barricade_Size, Width) == 0x000004, "Member 'FGimmick_Extnd06_Barricade_Size::Width' has a wrong offset!");
static_assert(offsetof(FGimmick_Extnd06_Barricade_Size, Offset) == 0x000008, "Member 'FGimmick_Extnd06_Barricade_Size::Offset' has a wrong offset!");

// ScriptStruct UnionRun.AnchorPhysicsParameter
// 0x001C (0x001C - 0x0000)
struct FAnchorPhysicsParameter final
{
public:
	float                                         anchorLength;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         movableLimitTop;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         movableLimitRangeYaw;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         airRegistSpeedThresholdPitch;                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         airRegistSpeedThresholdYaw;                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         reboundPitch;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnchorPhysicsParameter) == 0x000004, "Wrong alignment on FAnchorPhysicsParameter");
static_assert(sizeof(FAnchorPhysicsParameter) == 0x00001C, "Wrong size on FAnchorPhysicsParameter");
static_assert(offsetof(FAnchorPhysicsParameter, anchorLength) == 0x000000, "Member 'FAnchorPhysicsParameter::anchorLength' has a wrong offset!");
static_assert(offsetof(FAnchorPhysicsParameter, Mass) == 0x000004, "Member 'FAnchorPhysicsParameter::Mass' has a wrong offset!");
static_assert(offsetof(FAnchorPhysicsParameter, movableLimitTop) == 0x000008, "Member 'FAnchorPhysicsParameter::movableLimitTop' has a wrong offset!");
static_assert(offsetof(FAnchorPhysicsParameter, movableLimitRangeYaw) == 0x00000C, "Member 'FAnchorPhysicsParameter::movableLimitRangeYaw' has a wrong offset!");
static_assert(offsetof(FAnchorPhysicsParameter, airRegistSpeedThresholdPitch) == 0x000010, "Member 'FAnchorPhysicsParameter::airRegistSpeedThresholdPitch' has a wrong offset!");
static_assert(offsetof(FAnchorPhysicsParameter, airRegistSpeedThresholdYaw) == 0x000014, "Member 'FAnchorPhysicsParameter::airRegistSpeedThresholdYaw' has a wrong offset!");
static_assert(offsetof(FAnchorPhysicsParameter, reboundPitch) == 0x000018, "Member 'FAnchorPhysicsParameter::reboundPitch' has a wrong offset!");

// ScriptStruct UnionRun.ItemBoxColliderParam
// 0x0030 (0x0030 - 0x0000)
struct FItemBoxColliderParam final : public FColliderParam
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extents;                                           // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemBoxColliderParam) == 0x000008, "Wrong alignment on FItemBoxColliderParam");
static_assert(sizeof(FItemBoxColliderParam) == 0x000030, "Wrong size on FItemBoxColliderParam");
static_assert(offsetof(FItemBoxColliderParam, Offset) == 0x000000, "Member 'FItemBoxColliderParam::Offset' has a wrong offset!");
static_assert(offsetof(FItemBoxColliderParam, Extents) == 0x000018, "Member 'FItemBoxColliderParam::Extents' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceDomainInfo
// 0x0048 (0x0048 - 0x0000)
struct FUnionRaceDomainInfo final
{
public:
	int32                                         DomainIndex;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStageId                                      StageId;                                           // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   StageName;                                         // 0x0008(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 BGMName;                                           // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0028(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LightChannel;                                      // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETravelRingScreenType                         TravelRingScreenType;                              // 0x0044(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIrregularEventId                             IrregularEventId;                                  // 0x0045(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionRaceDomainInfo) == 0x000008, "Wrong alignment on FUnionRaceDomainInfo");
static_assert(sizeof(FUnionRaceDomainInfo) == 0x000048, "Wrong size on FUnionRaceDomainInfo");
static_assert(offsetof(FUnionRaceDomainInfo, DomainIndex) == 0x000000, "Member 'FUnionRaceDomainInfo::DomainIndex' has a wrong offset!");
static_assert(offsetof(FUnionRaceDomainInfo, StageId) == 0x000004, "Member 'FUnionRaceDomainInfo::StageId' has a wrong offset!");
static_assert(offsetof(FUnionRaceDomainInfo, StageName) == 0x000008, "Member 'FUnionRaceDomainInfo::StageName' has a wrong offset!");
static_assert(offsetof(FUnionRaceDomainInfo, BGMName) == 0x000018, "Member 'FUnionRaceDomainInfo::BGMName' has a wrong offset!");
static_assert(offsetof(FUnionRaceDomainInfo, LocationOffset) == 0x000028, "Member 'FUnionRaceDomainInfo::LocationOffset' has a wrong offset!");
static_assert(offsetof(FUnionRaceDomainInfo, LightChannel) == 0x000040, "Member 'FUnionRaceDomainInfo::LightChannel' has a wrong offset!");
static_assert(offsetof(FUnionRaceDomainInfo, TravelRingScreenType) == 0x000044, "Member 'FUnionRaceDomainInfo::TravelRingScreenType' has a wrong offset!");
static_assert(offsetof(FUnionRaceDomainInfo, IrregularEventId) == 0x000045, "Member 'FUnionRaceDomainInfo::IrregularEventId' has a wrong offset!");

// ScriptStruct UnionRun.BoundingItemBoxColliderParam
// 0x0030 (0x0030 - 0x0000)
struct FBoundingItemBoxColliderParam final : public FColliderParam
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extents;                                           // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoundingItemBoxColliderParam) == 0x000008, "Wrong alignment on FBoundingItemBoxColliderParam");
static_assert(sizeof(FBoundingItemBoxColliderParam) == 0x000030, "Wrong size on FBoundingItemBoxColliderParam");
static_assert(offsetof(FBoundingItemBoxColliderParam, Offset) == 0x000000, "Member 'FBoundingItemBoxColliderParam::Offset' has a wrong offset!");
static_assert(offsetof(FBoundingItemBoxColliderParam, Extents) == 0x000018, "Member 'FBoundingItemBoxColliderParam::Extents' has a wrong offset!");

// ScriptStruct UnionRun.ItemBoxCurringParameter
// 0x0008 (0x0010 - 0x0008)
struct FItemBoxCurringParameter final : public FTableRowBase
{
public:
	EStageId                                      StageId;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurringDistance;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemBoxCurringParameter) == 0x000008, "Wrong alignment on FItemBoxCurringParameter");
static_assert(sizeof(FItemBoxCurringParameter) == 0x000010, "Wrong size on FItemBoxCurringParameter");
static_assert(offsetof(FItemBoxCurringParameter, StageId) == 0x000008, "Member 'FItemBoxCurringParameter::StageId' has a wrong offset!");
static_assert(offsetof(FItemBoxCurringParameter, CurringDistance) == 0x00000C, "Member 'FItemBoxCurringParameter::CurringDistance' has a wrong offset!");

// ScriptStruct UnionRun.GadgetBoatChargeJumpUpInfo
// 0x000C (0x000C - 0x0000)
struct FGadgetBoatChargeJumpUpInfo final
{
public:
	float                                         AirTrickRateX;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirTrickRateY;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirTrickLimitNum;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetBoatChargeJumpUpInfo) == 0x000004, "Wrong alignment on FGadgetBoatChargeJumpUpInfo");
static_assert(sizeof(FGadgetBoatChargeJumpUpInfo) == 0x00000C, "Wrong size on FGadgetBoatChargeJumpUpInfo");
static_assert(offsetof(FGadgetBoatChargeJumpUpInfo, AirTrickRateX) == 0x000000, "Member 'FGadgetBoatChargeJumpUpInfo::AirTrickRateX' has a wrong offset!");
static_assert(offsetof(FGadgetBoatChargeJumpUpInfo, AirTrickRateY) == 0x000004, "Member 'FGadgetBoatChargeJumpUpInfo::AirTrickRateY' has a wrong offset!");
static_assert(offsetof(FGadgetBoatChargeJumpUpInfo, AirTrickLimitNum) == 0x000008, "Member 'FGadgetBoatChargeJumpUpInfo::AirTrickLimitNum' has a wrong offset!");

// ScriptStruct UnionRun.ItemBoxMeshTable
// 0x0030 (0x0038 - 0x0008)
struct FItemBoxMeshTable final : public FTableRowBase
{
public:
	EItemBoxType                                  ItemBoxType;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             ItemBoxMesh;                                       // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemBoxMeshTable) == 0x000008, "Wrong alignment on FItemBoxMeshTable");
static_assert(sizeof(FItemBoxMeshTable) == 0x000038, "Wrong size on FItemBoxMeshTable");
static_assert(offsetof(FItemBoxMeshTable, ItemBoxType) == 0x000008, "Member 'FItemBoxMeshTable::ItemBoxType' has a wrong offset!");
static_assert(offsetof(FItemBoxMeshTable, ItemBoxMesh) == 0x000010, "Member 'FItemBoxMeshTable::ItemBoxMesh' has a wrong offset!");

// ScriptStruct UnionRun.AbsorberInfo
// 0x0018 (0x0018 - 0x0000)
struct FAbsorberInfo final
{
public:
	int32                                         AbsorberRacerIndex;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbsorberPriority;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AbsorberObject;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCollisionBaseComponent*                HitComponent;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbsorberInfo) == 0x000008, "Wrong alignment on FAbsorberInfo");
static_assert(sizeof(FAbsorberInfo) == 0x000018, "Wrong size on FAbsorberInfo");
static_assert(offsetof(FAbsorberInfo, AbsorberRacerIndex) == 0x000000, "Member 'FAbsorberInfo::AbsorberRacerIndex' has a wrong offset!");
static_assert(offsetof(FAbsorberInfo, AbsorberPriority) == 0x000004, "Member 'FAbsorberInfo::AbsorberPriority' has a wrong offset!");
static_assert(offsetof(FAbsorberInfo, AbsorberObject) == 0x000008, "Member 'FAbsorberInfo::AbsorberObject' has a wrong offset!");
static_assert(offsetof(FAbsorberInfo, HitComponent) == 0x000010, "Member 'FAbsorberInfo::HitComponent' has a wrong offset!");

// ScriptStruct UnionRun.PlayerPointDistanceData
// 0x0010 (0x0018 - 0x0008)
struct FPlayerPointDistanceData final : public FTableRowBase
{
public:
	EPointDistanceGroup                           PointDistanceGroup;                                // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrandPrix;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Group;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Other;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerPointDistanceData) == 0x000008, "Wrong alignment on FPlayerPointDistanceData");
static_assert(sizeof(FPlayerPointDistanceData) == 0x000018, "Wrong size on FPlayerPointDistanceData");
static_assert(offsetof(FPlayerPointDistanceData, PointDistanceGroup) == 0x000008, "Member 'FPlayerPointDistanceData::PointDistanceGroup' has a wrong offset!");
static_assert(offsetof(FPlayerPointDistanceData, GrandPrix) == 0x00000C, "Member 'FPlayerPointDistanceData::GrandPrix' has a wrong offset!");
static_assert(offsetof(FPlayerPointDistanceData, Group) == 0x000010, "Member 'FPlayerPointDistanceData::Group' has a wrong offset!");
static_assert(offsetof(FPlayerPointDistanceData, Other) == 0x000014, "Member 'FPlayerPointDistanceData::Other' has a wrong offset!");

// ScriptStruct UnionRun.AbsorbedObjectInfo
// 0x0150 (0x0150 - 0x0000)
struct FAbsorbedObjectInfo final
{
public:
	class AActor*                                 AbsorbedObject;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialTransform;                                  // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             MeshOffsetTransform;                               // 0x0070(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AbsorbTargetScale;                                 // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh;                                              // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UMaterialInterface*>        ReplaceMeshMaterials;                              // 0x00F0(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	ETakeRingType                                 RingType;                                          // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RingNum;                                           // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemBoxType                                  ItemBoxType;                                       // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       itemType;                                          // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFroceStartFromCenter;                             // 0x014A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyVisibleHolder;                                // 0x014B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbsorbedObjectInfo) == 0x000010, "Wrong alignment on FAbsorbedObjectInfo");
static_assert(sizeof(FAbsorbedObjectInfo) == 0x000150, "Wrong size on FAbsorbedObjectInfo");
static_assert(offsetof(FAbsorbedObjectInfo, AbsorbedObject) == 0x000000, "Member 'FAbsorbedObjectInfo::AbsorbedObject' has a wrong offset!");
static_assert(offsetof(FAbsorbedObjectInfo, InitialTransform) == 0x000010, "Member 'FAbsorbedObjectInfo::InitialTransform' has a wrong offset!");
static_assert(offsetof(FAbsorbedObjectInfo, MeshOffsetTransform) == 0x000070, "Member 'FAbsorbedObjectInfo::MeshOffsetTransform' has a wrong offset!");
static_assert(offsetof(FAbsorbedObjectInfo, AbsorbTargetScale) == 0x0000D0, "Member 'FAbsorbedObjectInfo::AbsorbTargetScale' has a wrong offset!");
static_assert(offsetof(FAbsorbedObjectInfo, Mesh) == 0x0000E8, "Member 'FAbsorbedObjectInfo::Mesh' has a wrong offset!");
static_assert(offsetof(FAbsorbedObjectInfo, ReplaceMeshMaterials) == 0x0000F0, "Member 'FAbsorbedObjectInfo::ReplaceMeshMaterials' has a wrong offset!");
static_assert(offsetof(FAbsorbedObjectInfo, RingType) == 0x000140, "Member 'FAbsorbedObjectInfo::RingType' has a wrong offset!");
static_assert(offsetof(FAbsorbedObjectInfo, RingNum) == 0x000144, "Member 'FAbsorbedObjectInfo::RingNum' has a wrong offset!");
static_assert(offsetof(FAbsorbedObjectInfo, ItemBoxType) == 0x000148, "Member 'FAbsorbedObjectInfo::ItemBoxType' has a wrong offset!");
static_assert(offsetof(FAbsorbedObjectInfo, itemType) == 0x000149, "Member 'FAbsorbedObjectInfo::itemType' has a wrong offset!");
static_assert(offsetof(FAbsorbedObjectInfo, bFroceStartFromCenter) == 0x00014A, "Member 'FAbsorbedObjectInfo::bFroceStartFromCenter' has a wrong offset!");
static_assert(offsetof(FAbsorbedObjectInfo, bOnlyVisibleHolder) == 0x00014B, "Member 'FAbsorbedObjectInfo::bOnlyVisibleHolder' has a wrong offset!");

// ScriptStruct UnionRun.CyanLaserMoveInfo
// 0x0170 (0x0170 - 0x0000)
struct alignas(0x10) FCyanLaserMoveInfo final
{
public:
	uint8                                         Pad_0[0x170];                                      // 0x0000(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCyanLaserMoveInfo) == 0x000010, "Wrong alignment on FCyanLaserMoveInfo");
static_assert(sizeof(FCyanLaserMoveInfo) == 0x000170, "Wrong size on FCyanLaserMoveInfo");

// ScriptStruct UnionRun.WeakHomingParam
// 0x000C (0x000C - 0x0000)
struct FWeakHomingParam final
{
public:
	float                                         SearchAreaWidth;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchAreaLength;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CorrctionMaxAngularSpeed;                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeakHomingParam) == 0x000004, "Wrong alignment on FWeakHomingParam");
static_assert(sizeof(FWeakHomingParam) == 0x00000C, "Wrong size on FWeakHomingParam");
static_assert(offsetof(FWeakHomingParam, SearchAreaWidth) == 0x000000, "Member 'FWeakHomingParam::SearchAreaWidth' has a wrong offset!");
static_assert(offsetof(FWeakHomingParam, SearchAreaLength) == 0x000004, "Member 'FWeakHomingParam::SearchAreaLength' has a wrong offset!");
static_assert(offsetof(FWeakHomingParam, CorrctionMaxAngularSpeed) == 0x000008, "Member 'FWeakHomingParam::CorrctionMaxAngularSpeed' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionVoice
// 0x00A0 (0x00A0 - 0x0000)
struct FRacerReactionVoice final
{
public:
	EDriverId                                     VoiceChrId;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundAtomCue>           CueVoiceId;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           CueVoiceId_Guest;                                  // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           CueVoiceId_Rival;                                  // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TextId;                                            // 0x0080(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ERacerReactionWindow                          WindowId;                                          // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     RivalId;                                           // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESerifUISubCharaId                            SerifUISubCharaId;                                 // 0x0093(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     FaceId;                                            // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FacialNo;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageId;                                           // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerReactionVoice) == 0x000008, "Wrong alignment on FRacerReactionVoice");
static_assert(sizeof(FRacerReactionVoice) == 0x0000A0, "Wrong size on FRacerReactionVoice");
static_assert(offsetof(FRacerReactionVoice, VoiceChrId) == 0x000000, "Member 'FRacerReactionVoice::VoiceChrId' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoice, CueVoiceId) == 0x000008, "Member 'FRacerReactionVoice::CueVoiceId' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoice, CueVoiceId_Guest) == 0x000030, "Member 'FRacerReactionVoice::CueVoiceId_Guest' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoice, CueVoiceId_Rival) == 0x000058, "Member 'FRacerReactionVoice::CueVoiceId_Rival' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoice, TextId) == 0x000080, "Member 'FRacerReactionVoice::TextId' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoice, WindowId) == 0x000090, "Member 'FRacerReactionVoice::WindowId' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoice, DriverId) == 0x000091, "Member 'FRacerReactionVoice::DriverId' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoice, RivalId) == 0x000092, "Member 'FRacerReactionVoice::RivalId' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoice, SerifUISubCharaId) == 0x000093, "Member 'FRacerReactionVoice::SerifUISubCharaId' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoice, FaceId) == 0x000094, "Member 'FRacerReactionVoice::FaceId' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoice, FacialNo) == 0x000098, "Member 'FRacerReactionVoice::FacialNo' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoice, StageId) == 0x00009C, "Member 'FRacerReactionVoice::StageId' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionVoicePack
// 0x00B8 (0x00B8 - 0x0000)
struct FRacerReactionVoicePack final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  SerifScreenIndexList;                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRacerReactionVoice                    RacerReactionVoice;                                // 0x0018(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerReactionVoicePack) == 0x000008, "Wrong alignment on FRacerReactionVoicePack");
static_assert(sizeof(FRacerReactionVoicePack) == 0x0000B8, "Wrong size on FRacerReactionVoicePack");
static_assert(offsetof(FRacerReactionVoicePack, RacerIndex) == 0x000000, "Member 'FRacerReactionVoicePack::RacerIndex' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoicePack, SerifScreenIndexList) == 0x000008, "Member 'FRacerReactionVoicePack::SerifScreenIndexList' has a wrong offset!");
static_assert(offsetof(FRacerReactionVoicePack, RacerReactionVoice) == 0x000018, "Member 'FRacerReactionVoicePack::RacerReactionVoice' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionVoiceList
// 0x0010 (0x0010 - 0x0000)
struct FRacerReactionVoiceList final
{
public:
	TArray<struct FRacerReactionVoicePack>        VoiceList;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerReactionVoiceList) == 0x000008, "Wrong alignment on FRacerReactionVoiceList");
static_assert(sizeof(FRacerReactionVoiceList) == 0x000010, "Wrong size on FRacerReactionVoiceList");
static_assert(offsetof(FRacerReactionVoiceList, VoiceList) == 0x000000, "Member 'FRacerReactionVoiceList::VoiceList' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionChrData
// 0x0018 (0x0018 - 0x0000)
struct FRacerReactionChrData final
{
public:
	EDriverId                                     DriverId;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRacerReactionVoiceList                list;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerReactionChrData) == 0x000008, "Wrong alignment on FRacerReactionChrData");
static_assert(sizeof(FRacerReactionChrData) == 0x000018, "Wrong size on FRacerReactionChrData");
static_assert(offsetof(FRacerReactionChrData, DriverId) == 0x000000, "Member 'FRacerReactionChrData::DriverId' has a wrong offset!");
static_assert(offsetof(FRacerReactionChrData, list) == 0x000008, "Member 'FRacerReactionChrData::list' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionChrDataList
// 0x0018 (0x0018 - 0x0000)
struct FRacerReactionChrDataList final
{
public:
	EDriverId                                     DriverId;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRacerReactionChrData>          DataList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerReactionChrDataList) == 0x000008, "Wrong alignment on FRacerReactionChrDataList");
static_assert(sizeof(FRacerReactionChrDataList) == 0x000018, "Wrong size on FRacerReactionChrDataList");
static_assert(offsetof(FRacerReactionChrDataList, DriverId) == 0x000000, "Member 'FRacerReactionChrDataList::DriverId' has a wrong offset!");
static_assert(offsetof(FRacerReactionChrDataList, DataList) == 0x000008, "Member 'FRacerReactionChrDataList::DataList' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionTypeParam
// 0x0050 (0x0050 - 0x0000)
struct FRacerReactionTypeParam final
{
public:
	ERacerReactionId                              ID;                                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionPriority                        Priority;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CoolTime;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionSplitDispType                   SplitDispType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRacerReactionChrData>          RandomVoiceList;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRacerReactionChrDataList>      ChrVoiceList;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRacerReactionChrDataList>      LinkVoiceList;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRacerReactionChrDataList>      RivalVoiceList;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerReactionTypeParam) == 0x000008, "Wrong alignment on FRacerReactionTypeParam");
static_assert(sizeof(FRacerReactionTypeParam) == 0x000050, "Wrong size on FRacerReactionTypeParam");
static_assert(offsetof(FRacerReactionTypeParam, ID) == 0x000000, "Member 'FRacerReactionTypeParam::ID' has a wrong offset!");
static_assert(offsetof(FRacerReactionTypeParam, Priority) == 0x000001, "Member 'FRacerReactionTypeParam::Priority' has a wrong offset!");
static_assert(offsetof(FRacerReactionTypeParam, CoolTime) == 0x000004, "Member 'FRacerReactionTypeParam::CoolTime' has a wrong offset!");
static_assert(offsetof(FRacerReactionTypeParam, SplitDispType) == 0x000008, "Member 'FRacerReactionTypeParam::SplitDispType' has a wrong offset!");
static_assert(offsetof(FRacerReactionTypeParam, RandomVoiceList) == 0x000010, "Member 'FRacerReactionTypeParam::RandomVoiceList' has a wrong offset!");
static_assert(offsetof(FRacerReactionTypeParam, ChrVoiceList) == 0x000020, "Member 'FRacerReactionTypeParam::ChrVoiceList' has a wrong offset!");
static_assert(offsetof(FRacerReactionTypeParam, LinkVoiceList) == 0x000030, "Member 'FRacerReactionTypeParam::LinkVoiceList' has a wrong offset!");
static_assert(offsetof(FRacerReactionTypeParam, RivalVoiceList) == 0x000040, "Member 'FRacerReactionTypeParam::RivalVoiceList' has a wrong offset!");

// ScriptStruct UnionRun.ThrowingFrontParameter
// 0x0010 (0x0010 - 0x0000)
struct FThrowingFrontParameter final
{
public:
	float                                         RacerSpeedThreshold_KPH;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpingSpeed_MPS;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UperJumpingSpeed_MPS;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravitationalAcceleration_MPSS;                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThrowingFrontParameter) == 0x000004, "Wrong alignment on FThrowingFrontParameter");
static_assert(sizeof(FThrowingFrontParameter) == 0x000010, "Wrong size on FThrowingFrontParameter");
static_assert(offsetof(FThrowingFrontParameter, RacerSpeedThreshold_KPH) == 0x000000, "Member 'FThrowingFrontParameter::RacerSpeedThreshold_KPH' has a wrong offset!");
static_assert(offsetof(FThrowingFrontParameter, JumpingSpeed_MPS) == 0x000004, "Member 'FThrowingFrontParameter::JumpingSpeed_MPS' has a wrong offset!");
static_assert(offsetof(FThrowingFrontParameter, UperJumpingSpeed_MPS) == 0x000008, "Member 'FThrowingFrontParameter::UperJumpingSpeed_MPS' has a wrong offset!");
static_assert(offsetof(FThrowingFrontParameter, GravitationalAcceleration_MPSS) == 0x00000C, "Member 'FThrowingFrontParameter::GravitationalAcceleration_MPSS' has a wrong offset!");

// ScriptStruct UnionRun.ThrowingBackParameter
// 0x000C (0x000C - 0x0000)
struct FThrowingBackParameter final
{
public:
	float                                         JumpingSpeed_MPS;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UperJumpingSpeed_MPS;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravitationalAcceleration_MPSS;                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThrowingBackParameter) == 0x000004, "Wrong alignment on FThrowingBackParameter");
static_assert(sizeof(FThrowingBackParameter) == 0x00000C, "Wrong size on FThrowingBackParameter");
static_assert(offsetof(FThrowingBackParameter, JumpingSpeed_MPS) == 0x000000, "Member 'FThrowingBackParameter::JumpingSpeed_MPS' has a wrong offset!");
static_assert(offsetof(FThrowingBackParameter, UperJumpingSpeed_MPS) == 0x000004, "Member 'FThrowingBackParameter::UperJumpingSpeed_MPS' has a wrong offset!");
static_assert(offsetof(FThrowingBackParameter, GravitationalAcceleration_MPSS) == 0x000008, "Member 'FThrowingBackParameter::GravitationalAcceleration_MPSS' has a wrong offset!");

// ScriptStruct UnionRun.ComAvoidKingBoomBooPillarParams
// 0x000C (0x000C - 0x0000)
struct FComAvoidKingBoomBooPillarParams final
{
public:
	float                                         DistAvoidPillar;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftLineMargineAvoidPillar;                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineChangeValPerFrameAvoidPillar;                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComAvoidKingBoomBooPillarParams) == 0x000004, "Wrong alignment on FComAvoidKingBoomBooPillarParams");
static_assert(sizeof(FComAvoidKingBoomBooPillarParams) == 0x00000C, "Wrong size on FComAvoidKingBoomBooPillarParams");
static_assert(offsetof(FComAvoidKingBoomBooPillarParams, DistAvoidPillar) == 0x000000, "Member 'FComAvoidKingBoomBooPillarParams::DistAvoidPillar' has a wrong offset!");
static_assert(offsetof(FComAvoidKingBoomBooPillarParams, ShiftLineMargineAvoidPillar) == 0x000004, "Member 'FComAvoidKingBoomBooPillarParams::ShiftLineMargineAvoidPillar' has a wrong offset!");
static_assert(offsetof(FComAvoidKingBoomBooPillarParams, LineChangeValPerFrameAvoidPillar) == 0x000008, "Member 'FComAvoidKingBoomBooPillarParams::LineChangeValPerFrameAvoidPillar' has a wrong offset!");

// ScriptStruct UnionRun.RelativeMoveFrontParameter
// 0x0004 (0x0010 - 0x000C)
struct FRelativeMoveFrontParameter final : public FRelativeMoveParameter
{
public:
	float                                         RelativeMoveOffset;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRelativeMoveFrontParameter) == 0x000004, "Wrong alignment on FRelativeMoveFrontParameter");
static_assert(sizeof(FRelativeMoveFrontParameter) == 0x000010, "Wrong size on FRelativeMoveFrontParameter");
static_assert(offsetof(FRelativeMoveFrontParameter, RelativeMoveOffset) == 0x00000C, "Member 'FRelativeMoveFrontParameter::RelativeMoveOffset' has a wrong offset!");

// ScriptStruct UnionRun.RelativeMoveBackParameter
// 0x000C (0x0018 - 0x000C)
struct FRelativeMoveBackParameter final : public FRelativeMoveParameter
{
public:
	float                                         CollisionSizeScale;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionEnableTimeToRacer;                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionEnableTimeToOther;                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRelativeMoveBackParameter) == 0x000004, "Wrong alignment on FRelativeMoveBackParameter");
static_assert(sizeof(FRelativeMoveBackParameter) == 0x000018, "Wrong size on FRelativeMoveBackParameter");
static_assert(offsetof(FRelativeMoveBackParameter, CollisionSizeScale) == 0x00000C, "Member 'FRelativeMoveBackParameter::CollisionSizeScale' has a wrong offset!");
static_assert(offsetof(FRelativeMoveBackParameter, CollisionEnableTimeToRacer) == 0x000010, "Member 'FRelativeMoveBackParameter::CollisionEnableTimeToRacer' has a wrong offset!");
static_assert(offsetof(FRelativeMoveBackParameter, CollisionEnableTimeToOther) == 0x000014, "Member 'FRelativeMoveBackParameter::CollisionEnableTimeToOther' has a wrong offset!");

// ScriptStruct UnionRun.UnionJukeboxRaceBGMLapInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FUnionJukeboxRaceBGMLapInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionJukeboxRaceBGMLapInfo) == 0x000008, "Wrong alignment on FUnionJukeboxRaceBGMLapInfo");
static_assert(sizeof(FUnionJukeboxRaceBGMLapInfo) == 0x000018, "Wrong size on FUnionJukeboxRaceBGMLapInfo");

// ScriptStruct UnionRun.ItemWarpRingRankBaseParam
// 0x0010 (0x0010 - 0x0000)
struct FItemWarpRingRankBaseParam final
{
public:
	int32                                         LowTargetRank;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighTargetRank;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLifeTime;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLifetime;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemWarpRingRankBaseParam) == 0x000004, "Wrong alignment on FItemWarpRingRankBaseParam");
static_assert(sizeof(FItemWarpRingRankBaseParam) == 0x000010, "Wrong size on FItemWarpRingRankBaseParam");
static_assert(offsetof(FItemWarpRingRankBaseParam, LowTargetRank) == 0x000000, "Member 'FItemWarpRingRankBaseParam::LowTargetRank' has a wrong offset!");
static_assert(offsetof(FItemWarpRingRankBaseParam, HighTargetRank) == 0x000004, "Member 'FItemWarpRingRankBaseParam::HighTargetRank' has a wrong offset!");
static_assert(offsetof(FItemWarpRingRankBaseParam, MinLifeTime) == 0x000008, "Member 'FItemWarpRingRankBaseParam::MinLifeTime' has a wrong offset!");
static_assert(offsetof(FItemWarpRingRankBaseParam, MaxLifetime) == 0x00000C, "Member 'FItemWarpRingRankBaseParam::MaxLifetime' has a wrong offset!");

// ScriptStruct UnionRun.LineGuideData
// 0x0010 (0x0018 - 0x0008)
struct FLineGuideData final : public FTableRowBase
{
public:
	class ULineGuideDataAsset*                    SonicSpeedData;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineGuideDataAsset*                    SuperSonicSpeedData;                               // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLineGuideData) == 0x000008, "Wrong alignment on FLineGuideData");
static_assert(sizeof(FLineGuideData) == 0x000018, "Wrong size on FLineGuideData");
static_assert(offsetof(FLineGuideData, SonicSpeedData) == 0x000008, "Member 'FLineGuideData::SonicSpeedData' has a wrong offset!");
static_assert(offsetof(FLineGuideData, SuperSonicSpeedData) == 0x000010, "Member 'FLineGuideData::SuperSonicSpeedData' has a wrong offset!");

// ScriptStruct UnionRun.OnlineRacerParam
// 0x0078 (0x0078 - 0x0000)
struct FOnlineRacerParam final
{
public:
	uint8                                         Version;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RacerName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EDriverId                                     DriverId;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    MachineId;                                         // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    FrontMachineId;                                    // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    RearMachineId;                                     // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    TireMachineId;                                     // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ComControlType;                                    // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ComLevel;                                          // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GroupId;                                           // 0x002F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GadgetPlateId;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EGadgetId>                             GadgetArray;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 GadgetSlotArray;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x20];                                      // 0x0058(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnlineRacerParam) == 0x000008, "Wrong alignment on FOnlineRacerParam");
static_assert(sizeof(FOnlineRacerParam) == 0x000078, "Wrong size on FOnlineRacerParam");
static_assert(offsetof(FOnlineRacerParam, Version) == 0x000000, "Member 'FOnlineRacerParam::Version' has a wrong offset!");
static_assert(offsetof(FOnlineRacerParam, RacerName) == 0x000008, "Member 'FOnlineRacerParam::RacerName' has a wrong offset!");
static_assert(offsetof(FOnlineRacerParam, DriverId) == 0x000028, "Member 'FOnlineRacerParam::DriverId' has a wrong offset!");
static_assert(offsetof(FOnlineRacerParam, MachineId) == 0x000029, "Member 'FOnlineRacerParam::MachineId' has a wrong offset!");
static_assert(offsetof(FOnlineRacerParam, FrontMachineId) == 0x00002A, "Member 'FOnlineRacerParam::FrontMachineId' has a wrong offset!");
static_assert(offsetof(FOnlineRacerParam, RearMachineId) == 0x00002B, "Member 'FOnlineRacerParam::RearMachineId' has a wrong offset!");
static_assert(offsetof(FOnlineRacerParam, TireMachineId) == 0x00002C, "Member 'FOnlineRacerParam::TireMachineId' has a wrong offset!");
static_assert(offsetof(FOnlineRacerParam, ComControlType) == 0x00002D, "Member 'FOnlineRacerParam::ComControlType' has a wrong offset!");
static_assert(offsetof(FOnlineRacerParam, ComLevel) == 0x00002E, "Member 'FOnlineRacerParam::ComLevel' has a wrong offset!");
static_assert(offsetof(FOnlineRacerParam, GroupId) == 0x00002F, "Member 'FOnlineRacerParam::GroupId' has a wrong offset!");
static_assert(offsetof(FOnlineRacerParam, GadgetPlateId) == 0x000030, "Member 'FOnlineRacerParam::GadgetPlateId' has a wrong offset!");
static_assert(offsetof(FOnlineRacerParam, GadgetArray) == 0x000038, "Member 'FOnlineRacerParam::GadgetArray' has a wrong offset!");
static_assert(offsetof(FOnlineRacerParam, GadgetSlotArray) == 0x000048, "Member 'FOnlineRacerParam::GadgetSlotArray' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionText_TableRow
// 0x0060 (0x0068 - 0x0008)
struct FRacerReactionText_TableRow final : public FTableRowBase
{
public:
	ERacerReactionId                              ID;                                                // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionVoiceType                       VoiceType;                                         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     RivalId;                                           // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundAtomCue>           CueVoiceId;                                        // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextCueVoiceId;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextTableId;                                       // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextId;                                            // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionWindow                          WindowId;                                          // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     FaceId;                                            // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StageId;                                           // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerReactionText_TableRow) == 0x000008, "Wrong alignment on FRacerReactionText_TableRow");
static_assert(sizeof(FRacerReactionText_TableRow) == 0x000068, "Wrong size on FRacerReactionText_TableRow");
static_assert(offsetof(FRacerReactionText_TableRow, ID) == 0x000008, "Member 'FRacerReactionText_TableRow::ID' has a wrong offset!");
static_assert(offsetof(FRacerReactionText_TableRow, VoiceType) == 0x000009, "Member 'FRacerReactionText_TableRow::VoiceType' has a wrong offset!");
static_assert(offsetof(FRacerReactionText_TableRow, DriverId) == 0x00000A, "Member 'FRacerReactionText_TableRow::DriverId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText_TableRow, RivalId) == 0x00000B, "Member 'FRacerReactionText_TableRow::RivalId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText_TableRow, CueVoiceId) == 0x000010, "Member 'FRacerReactionText_TableRow::CueVoiceId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText_TableRow, TextCueVoiceId) == 0x000038, "Member 'FRacerReactionText_TableRow::TextCueVoiceId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText_TableRow, TextTableId) == 0x000048, "Member 'FRacerReactionText_TableRow::TextTableId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText_TableRow, TextId) == 0x000050, "Member 'FRacerReactionText_TableRow::TextId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText_TableRow, WindowId) == 0x000060, "Member 'FRacerReactionText_TableRow::WindowId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText_TableRow, FaceId) == 0x000061, "Member 'FRacerReactionText_TableRow::FaceId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText_TableRow, StageId) == 0x000064, "Member 'FRacerReactionText_TableRow::StageId' has a wrong offset!");

// ScriptStruct UnionRun.OnlineCourseParam
// 0x0048 (0x0048 - 0x0000)
struct FOnlineCourseParam final
{
public:
	uint8                                         Version;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 StageIds;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RandomSeeds;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnlineCourseParam) == 0x000008, "Wrong alignment on FOnlineCourseParam");
static_assert(sizeof(FOnlineCourseParam) == 0x000048, "Wrong size on FOnlineCourseParam");
static_assert(offsetof(FOnlineCourseParam, Version) == 0x000000, "Member 'FOnlineCourseParam::Version' has a wrong offset!");
static_assert(offsetof(FOnlineCourseParam, StageIds) == 0x000008, "Member 'FOnlineCourseParam::StageIds' has a wrong offset!");
static_assert(offsetof(FOnlineCourseParam, RandomSeeds) == 0x000018, "Member 'FOnlineCourseParam::RandomSeeds' has a wrong offset!");

// ScriptStruct UnionRun.OnlineConnectionInfo
// 0x0070 (0x0070 - 0x0000)
struct FOnlineConnectionInfo final
{
public:
	uint8                                         Version;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x17];                                       // 0x0001(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RTTArray;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         ClientOnlineIndex;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x1F];                                      // 0x0029(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         HostOnlineIndex;                                   // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x27];                                      // 0x0049(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnlineConnectionInfo) == 0x000008, "Wrong alignment on FOnlineConnectionInfo");
static_assert(sizeof(FOnlineConnectionInfo) == 0x000070, "Wrong size on FOnlineConnectionInfo");
static_assert(offsetof(FOnlineConnectionInfo, Version) == 0x000000, "Member 'FOnlineConnectionInfo::Version' has a wrong offset!");
static_assert(offsetof(FOnlineConnectionInfo, RTTArray) == 0x000018, "Member 'FOnlineConnectionInfo::RTTArray' has a wrong offset!");
static_assert(offsetof(FOnlineConnectionInfo, ClientOnlineIndex) == 0x000028, "Member 'FOnlineConnectionInfo::ClientOnlineIndex' has a wrong offset!");
static_assert(offsetof(FOnlineConnectionInfo, HostOnlineIndex) == 0x000048, "Member 'FOnlineConnectionInfo::HostOnlineIndex' has a wrong offset!");

// ScriptStruct UnionRun.PlaneTurnAppearanceParams
// 0x0010 (0x0010 - 0x0000)
struct FPlaneTurnAppearanceParams final
{
public:
	float                                         MaxDegree;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSpeed;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchAngularSpeed;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularAccelSec;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaneTurnAppearanceParams) == 0x000004, "Wrong alignment on FPlaneTurnAppearanceParams");
static_assert(sizeof(FPlaneTurnAppearanceParams) == 0x000010, "Wrong size on FPlaneTurnAppearanceParams");
static_assert(offsetof(FPlaneTurnAppearanceParams, MaxDegree) == 0x000000, "Member 'FPlaneTurnAppearanceParams::MaxDegree' has a wrong offset!");
static_assert(offsetof(FPlaneTurnAppearanceParams, AngularSpeed) == 0x000004, "Member 'FPlaneTurnAppearanceParams::AngularSpeed' has a wrong offset!");
static_assert(offsetof(FPlaneTurnAppearanceParams, SwitchAngularSpeed) == 0x000008, "Member 'FPlaneTurnAppearanceParams::SwitchAngularSpeed' has a wrong offset!");
static_assert(offsetof(FPlaneTurnAppearanceParams, AngularAccelSec) == 0x00000C, "Member 'FPlaneTurnAppearanceParams::AngularAccelSec' has a wrong offset!");

// ScriptStruct UnionRun.OnlineGroupInfo
// 0x0038 (0x0038 - 0x0000)
struct FOnlineGroupInfo final
{
public:
	uint8                                         Version;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroupRaceRule                                GroupRaceRule;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingGroupMode                         RaceSettingGroupMode;                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingGrouping                          RaceSettingGrouping;                               // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EGroupColorId>                         GroupColor;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x20];                                      // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnlineGroupInfo) == 0x000008, "Wrong alignment on FOnlineGroupInfo");
static_assert(sizeof(FOnlineGroupInfo) == 0x000038, "Wrong size on FOnlineGroupInfo");
static_assert(offsetof(FOnlineGroupInfo, Version) == 0x000000, "Member 'FOnlineGroupInfo::Version' has a wrong offset!");
static_assert(offsetof(FOnlineGroupInfo, GroupRaceRule) == 0x000001, "Member 'FOnlineGroupInfo::GroupRaceRule' has a wrong offset!");
static_assert(offsetof(FOnlineGroupInfo, RaceSettingGroupMode) == 0x000002, "Member 'FOnlineGroupInfo::RaceSettingGroupMode' has a wrong offset!");
static_assert(offsetof(FOnlineGroupInfo, RaceSettingGrouping) == 0x000003, "Member 'FOnlineGroupInfo::RaceSettingGrouping' has a wrong offset!");
static_assert(offsetof(FOnlineGroupInfo, GroupColor) == 0x000008, "Member 'FOnlineGroupInfo::GroupColor' has a wrong offset!");

// ScriptStruct UnionRun.OnlineReplayRaceBase
// 0x0038 (0x0038 - 0x0000)
struct FOnlineReplayRaceBase final
{
public:
	uint8                                         Version;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceFrameRate                                FrameRate;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameModeId                                   GameMode;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceType                                     RaceType;                                          // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpeedClassId                                 SpeedClass;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RacerCount;                                        // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MatchCount;                                        // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EDriverId>                             RivalArray;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x20];                                      // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnlineReplayRaceBase) == 0x000008, "Wrong alignment on FOnlineReplayRaceBase");
static_assert(sizeof(FOnlineReplayRaceBase) == 0x000038, "Wrong size on FOnlineReplayRaceBase");
static_assert(offsetof(FOnlineReplayRaceBase, Version) == 0x000000, "Member 'FOnlineReplayRaceBase::Version' has a wrong offset!");
static_assert(offsetof(FOnlineReplayRaceBase, FrameRate) == 0x000001, "Member 'FOnlineReplayRaceBase::FrameRate' has a wrong offset!");
static_assert(offsetof(FOnlineReplayRaceBase, GameMode) == 0x000002, "Member 'FOnlineReplayRaceBase::GameMode' has a wrong offset!");
static_assert(offsetof(FOnlineReplayRaceBase, RaceType) == 0x000003, "Member 'FOnlineReplayRaceBase::RaceType' has a wrong offset!");
static_assert(offsetof(FOnlineReplayRaceBase, SpeedClass) == 0x000004, "Member 'FOnlineReplayRaceBase::SpeedClass' has a wrong offset!");
static_assert(offsetof(FOnlineReplayRaceBase, RacerCount) == 0x000005, "Member 'FOnlineReplayRaceBase::RacerCount' has a wrong offset!");
static_assert(offsetof(FOnlineReplayRaceBase, MatchCount) == 0x000006, "Member 'FOnlineReplayRaceBase::MatchCount' has a wrong offset!");
static_assert(offsetof(FOnlineReplayRaceBase, RivalArray) == 0x000008, "Member 'FOnlineReplayRaceBase::RivalArray' has a wrong offset!");

// ScriptStruct UnionRun.ComResultParams
// 0x0010 (0x0018 - 0x0008)
struct FComResultParams final : public FTableRowBase
{
public:
	ESpeedClassId                                 SpeedClass;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PaceNormal;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaceSlow;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistHigherMachine;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComResultParams) == 0x000008, "Wrong alignment on FComResultParams");
static_assert(sizeof(FComResultParams) == 0x000018, "Wrong size on FComResultParams");
static_assert(offsetof(FComResultParams, SpeedClass) == 0x000008, "Member 'FComResultParams::SpeedClass' has a wrong offset!");
static_assert(offsetof(FComResultParams, PaceNormal) == 0x00000C, "Member 'FComResultParams::PaceNormal' has a wrong offset!");
static_assert(offsetof(FComResultParams, PaceSlow) == 0x000010, "Member 'FComResultParams::PaceSlow' has a wrong offset!");
static_assert(offsetof(FComResultParams, DistHigherMachine) == 0x000014, "Member 'FComResultParams::DistHigherMachine' has a wrong offset!");

// ScriptStruct UnionRun.OnlineRaceReplay
// 0x0260 (0x0260 - 0x0000)
struct FOnlineRaceReplay final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOnlineReplayRaceBase                  ReplayRaceBase;                                    // 0x0008(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FOnlineGroupInfo                       GroupInfo;                                         // 0x0040(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCustomRaceSetting                     CustomRaceSetting;                                 // 0x0078(0x0120)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FOnlineCourseParam                     CourseData;                                        // 0x0198(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FOnlineRacerParam>              RacerArray;                                        // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FOnlineConnectionInfo                  ConnectionInfo;                                    // 0x01F0(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnlineRaceReplay) == 0x000008, "Wrong alignment on FOnlineRaceReplay");
static_assert(sizeof(FOnlineRaceReplay) == 0x000260, "Wrong size on FOnlineRaceReplay");
static_assert(offsetof(FOnlineRaceReplay, ReplayRaceBase) == 0x000008, "Member 'FOnlineRaceReplay::ReplayRaceBase' has a wrong offset!");
static_assert(offsetof(FOnlineRaceReplay, GroupInfo) == 0x000040, "Member 'FOnlineRaceReplay::GroupInfo' has a wrong offset!");
static_assert(offsetof(FOnlineRaceReplay, CustomRaceSetting) == 0x000078, "Member 'FOnlineRaceReplay::CustomRaceSetting' has a wrong offset!");
static_assert(offsetof(FOnlineRaceReplay, CourseData) == 0x000198, "Member 'FOnlineRaceReplay::CourseData' has a wrong offset!");
static_assert(offsetof(FOnlineRaceReplay, RacerArray) == 0x0001E0, "Member 'FOnlineRaceReplay::RacerArray' has a wrong offset!");
static_assert(offsetof(FOnlineRaceReplay, ConnectionInfo) == 0x0001F0, "Member 'FOnlineRaceReplay::ConnectionInfo' has a wrong offset!");

// ScriptStruct UnionRun.RaceActionTutorialTrigger
// 0x0028 (0x0028 - 0x0000)
struct FRaceActionTutorialTrigger final
{
public:
	ETutorialAction                               tutorialAction;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinTriggerRate;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTriggerRate;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTriggerGap;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTriggerGap;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RouteList;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceActionTutorialTrigger) == 0x000008, "Wrong alignment on FRaceActionTutorialTrigger");
static_assert(sizeof(FRaceActionTutorialTrigger) == 0x000028, "Wrong size on FRaceActionTutorialTrigger");
static_assert(offsetof(FRaceActionTutorialTrigger, tutorialAction) == 0x000000, "Member 'FRaceActionTutorialTrigger::tutorialAction' has a wrong offset!");
static_assert(offsetof(FRaceActionTutorialTrigger, MinTriggerRate) == 0x000004, "Member 'FRaceActionTutorialTrigger::MinTriggerRate' has a wrong offset!");
static_assert(offsetof(FRaceActionTutorialTrigger, MaxTriggerRate) == 0x000008, "Member 'FRaceActionTutorialTrigger::MaxTriggerRate' has a wrong offset!");
static_assert(offsetof(FRaceActionTutorialTrigger, MinTriggerGap) == 0x00000C, "Member 'FRaceActionTutorialTrigger::MinTriggerGap' has a wrong offset!");
static_assert(offsetof(FRaceActionTutorialTrigger, MaxTriggerGap) == 0x000010, "Member 'FRaceActionTutorialTrigger::MaxTriggerGap' has a wrong offset!");
static_assert(offsetof(FRaceActionTutorialTrigger, RouteList) == 0x000018, "Member 'FRaceActionTutorialTrigger::RouteList' has a wrong offset!");

// ScriptStruct UnionRun.RaceActionTutorialStageData
// 0x0018 (0x0018 - 0x0000)
struct FRaceActionTutorialStageData final
{
public:
	EStageId                                      StageId;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowInGrandPrix;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRaceActionTutorialTrigger>     RaceActionTutorialParamsList;                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceActionTutorialStageData) == 0x000008, "Wrong alignment on FRaceActionTutorialStageData");
static_assert(sizeof(FRaceActionTutorialStageData) == 0x000018, "Wrong size on FRaceActionTutorialStageData");
static_assert(offsetof(FRaceActionTutorialStageData, StageId) == 0x000000, "Member 'FRaceActionTutorialStageData::StageId' has a wrong offset!");
static_assert(offsetof(FRaceActionTutorialStageData, bShowInGrandPrix) == 0x000001, "Member 'FRaceActionTutorialStageData::bShowInGrandPrix' has a wrong offset!");
static_assert(offsetof(FRaceActionTutorialStageData, RaceActionTutorialParamsList) == 0x000008, "Member 'FRaceActionTutorialStageData::RaceActionTutorialParamsList' has a wrong offset!");

// ScriptStruct UnionRun.RaceTestItemSetting
// 0x0018 (0x0020 - 0x0008)
struct FRaceTestItemSetting final : public FTableRowBase
{
public:
	EItemId                                       ItemId;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CoolDownTime;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceTestItemSetting) == 0x000008, "Wrong alignment on FRaceTestItemSetting");
static_assert(sizeof(FRaceTestItemSetting) == 0x000020, "Wrong size on FRaceTestItemSetting");
static_assert(offsetof(FRaceTestItemSetting, ItemId) == 0x000008, "Member 'FRaceTestItemSetting::ItemId' has a wrong offset!");
static_assert(offsetof(FRaceTestItemSetting, CoolDownTime) == 0x00000C, "Member 'FRaceTestItemSetting::CoolDownTime' has a wrong offset!");
static_assert(offsetof(FRaceTestItemSetting, Comment) == 0x000010, "Member 'FRaceTestItemSetting::Comment' has a wrong offset!");

// ScriptStruct UnionRun.SplineMoveSettingParam
// 0x0068 (0x0068 - 0x0000)
struct FSplineMoveSettingParam final
{
public:
	class AActor*                                 SplineActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineMoveLoopType                           LoopType;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitPositionRate;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartWaitTime;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLocation;                                    // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotator;                                     // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseLocalRotator;                                  // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLocalRotatorRoll;                              // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLocalRotatorPitch;                             // 0x004A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLocalRotatorYaw;                               // 0x004B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseStart;                                     // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseMoveRot;                                   // 0x004D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            MoveCurve;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCulling;                                        // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCullingUpdate;                                  // 0x0059(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateWaitTime;                                    // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSplineRotator;                              // 0x0060(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptimizedMode;                                    // 0x0061(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSplineMoveSettingParam) == 0x000008, "Wrong alignment on FSplineMoveSettingParam");
static_assert(sizeof(FSplineMoveSettingParam) == 0x000068, "Wrong size on FSplineMoveSettingParam");
static_assert(offsetof(FSplineMoveSettingParam, SplineActor) == 0x000000, "Member 'FSplineMoveSettingParam::SplineActor' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, Speed) == 0x000008, "Member 'FSplineMoveSettingParam::Speed' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, LoopType) == 0x00000C, "Member 'FSplineMoveSettingParam::LoopType' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, InitPositionRate) == 0x000010, "Member 'FSplineMoveSettingParam::InitPositionRate' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, StartWaitTime) == 0x000014, "Member 'FSplineMoveSettingParam::StartWaitTime' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, OffsetLocation) == 0x000018, "Member 'FSplineMoveSettingParam::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, OffsetRotator) == 0x000030, "Member 'FSplineMoveSettingParam::OffsetRotator' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, bUseLocalRotator) == 0x000048, "Member 'FSplineMoveSettingParam::bUseLocalRotator' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, bUseLocalRotatorRoll) == 0x000049, "Member 'FSplineMoveSettingParam::bUseLocalRotatorRoll' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, bUseLocalRotatorPitch) == 0x00004A, "Member 'FSplineMoveSettingParam::bUseLocalRotatorPitch' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, bUseLocalRotatorYaw) == 0x00004B, "Member 'FSplineMoveSettingParam::bUseLocalRotatorYaw' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, bReverseStart) == 0x00004C, "Member 'FSplineMoveSettingParam::bReverseStart' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, bReverseMoveRot) == 0x00004D, "Member 'FSplineMoveSettingParam::bReverseMoveRot' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, MoveCurve) == 0x000050, "Member 'FSplineMoveSettingParam::MoveCurve' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, bIsCulling) == 0x000058, "Member 'FSplineMoveSettingParam::bIsCulling' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, bIsCullingUpdate) == 0x000059, "Member 'FSplineMoveSettingParam::bIsCullingUpdate' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, UpdateWaitTime) == 0x00005C, "Member 'FSplineMoveSettingParam::UpdateWaitTime' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, bIgnoreSplineRotator) == 0x000060, "Member 'FSplineMoveSettingParam::bIgnoreSplineRotator' has a wrong offset!");
static_assert(offsetof(FSplineMoveSettingParam, bOptimizedMode) == 0x000061, "Member 'FSplineMoveSettingParam::bOptimizedMode' has a wrong offset!");

// ScriptStruct UnionRun.RaceTestStageSetting
// 0x0003 (0x0003 - 0x0000)
struct FRaceTestStageSetting final
{
public:
	EStageId                                      StageId;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETravelRingScreenType                         TravelRingScreenType;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIrregularEventId                             IrregularEventId;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceTestStageSetting) == 0x000001, "Wrong alignment on FRaceTestStageSetting");
static_assert(sizeof(FRaceTestStageSetting) == 0x000003, "Wrong size on FRaceTestStageSetting");
static_assert(offsetof(FRaceTestStageSetting, StageId) == 0x000000, "Member 'FRaceTestStageSetting::StageId' has a wrong offset!");
static_assert(offsetof(FRaceTestStageSetting, TravelRingScreenType) == 0x000001, "Member 'FRaceTestStageSetting::TravelRingScreenType' has a wrong offset!");
static_assert(offsetof(FRaceTestStageSetting, IrregularEventId) == 0x000002, "Member 'FRaceTestStageSetting::IrregularEventId' has a wrong offset!");

// ScriptStruct UnionRun.RaceTestRacerSetting
// 0x0020 (0x0020 - 0x0000)
struct FRaceTestRacerSetting final
{
public:
	EDriverId                                     Driver;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineId                                    machine;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EGadgetId>                             Gadgets;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	ERaceTestRacerRunMode                         RunMode;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GroupSetting;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceTestRacerSetting) == 0x000008, "Wrong alignment on FRaceTestRacerSetting");
static_assert(sizeof(FRaceTestRacerSetting) == 0x000020, "Wrong size on FRaceTestRacerSetting");
static_assert(offsetof(FRaceTestRacerSetting, Driver) == 0x000000, "Member 'FRaceTestRacerSetting::Driver' has a wrong offset!");
static_assert(offsetof(FRaceTestRacerSetting, machine) == 0x000001, "Member 'FRaceTestRacerSetting::machine' has a wrong offset!");
static_assert(offsetof(FRaceTestRacerSetting, Gadgets) == 0x000008, "Member 'FRaceTestRacerSetting::Gadgets' has a wrong offset!");
static_assert(offsetof(FRaceTestRacerSetting, RunMode) == 0x000018, "Member 'FRaceTestRacerSetting::RunMode' has a wrong offset!");
static_assert(offsetof(FRaceTestRacerSetting, GroupSetting) == 0x00001C, "Member 'FRaceTestRacerSetting::GroupSetting' has a wrong offset!");

// ScriptStruct UnionRun.MinimapIconData
// 0x0040 (0x0040 - 0x0000)
struct FMinimapIconData final
{
public:
	struct FVector2D                              ScreenPosition;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpinTime;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DriverId;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMinimapIconType                              MinimapIconType;                                   // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemId                                       ItemId;                                            // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              Visibility;                                        // 0x0026(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ZOrder;                                            // 0x0027(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayer;                                           // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalMulti;                                       // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRival;                                            // 0x002A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPowerRival;                                       // 0x002B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReader;                                           // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           GroupColor;                                        // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinimapIconData) == 0x000008, "Wrong alignment on FMinimapIconData");
static_assert(sizeof(FMinimapIconData) == 0x000040, "Wrong size on FMinimapIconData");
static_assert(offsetof(FMinimapIconData, ScreenPosition) == 0x000000, "Member 'FMinimapIconData::ScreenPosition' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, Rotation) == 0x000010, "Member 'FMinimapIconData::Rotation' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, SpinTime) == 0x000014, "Member 'FMinimapIconData::SpinTime' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, DriverId) == 0x000018, "Member 'FMinimapIconData::DriverId' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, PlayerIndex) == 0x00001C, "Member 'FMinimapIconData::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, GroupIndex) == 0x000020, "Member 'FMinimapIconData::GroupIndex' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, MinimapIconType) == 0x000024, "Member 'FMinimapIconData::MinimapIconType' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, ItemId) == 0x000025, "Member 'FMinimapIconData::ItemId' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, Visibility) == 0x000026, "Member 'FMinimapIconData::Visibility' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, ZOrder) == 0x000027, "Member 'FMinimapIconData::ZOrder' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, bPlayer) == 0x000028, "Member 'FMinimapIconData::bPlayer' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, bLocalMulti) == 0x000029, "Member 'FMinimapIconData::bLocalMulti' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, bRival) == 0x00002A, "Member 'FMinimapIconData::bRival' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, bPowerRival) == 0x00002B, "Member 'FMinimapIconData::bPowerRival' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, bReader) == 0x00002C, "Member 'FMinimapIconData::bReader' has a wrong offset!");
static_assert(offsetof(FMinimapIconData, GroupColor) == 0x000030, "Member 'FMinimapIconData::GroupColor' has a wrong offset!");

// ScriptStruct UnionRun.RaceLoadTestThreshold
// 0x0008 (0x0008 - 0x0000)
struct FRaceLoadTestThreshold final
{
public:
	float                                         Cpu;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gpu;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceLoadTestThreshold) == 0x000004, "Wrong alignment on FRaceLoadTestThreshold");
static_assert(sizeof(FRaceLoadTestThreshold) == 0x000008, "Wrong size on FRaceLoadTestThreshold");
static_assert(offsetof(FRaceLoadTestThreshold, Cpu) == 0x000000, "Member 'FRaceLoadTestThreshold::Cpu' has a wrong offset!");
static_assert(offsetof(FRaceLoadTestThreshold, Gpu) == 0x000004, "Member 'FRaceLoadTestThreshold::Gpu' has a wrong offset!");

// ScriptStruct UnionRun.BtnGuidePlatformText
// 0x0050 (0x0058 - 0x0008)
struct FBtnGuidePlatformText final : public FTableRowBase
{
public:
	class FText                                   TextR1;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TextL1;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TextStickL;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TextR2;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TextL2;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtnGuidePlatformText) == 0x000008, "Wrong alignment on FBtnGuidePlatformText");
static_assert(sizeof(FBtnGuidePlatformText) == 0x000058, "Wrong size on FBtnGuidePlatformText");
static_assert(offsetof(FBtnGuidePlatformText, TextR1) == 0x000008, "Member 'FBtnGuidePlatformText::TextR1' has a wrong offset!");
static_assert(offsetof(FBtnGuidePlatformText, TextL1) == 0x000018, "Member 'FBtnGuidePlatformText::TextL1' has a wrong offset!");
static_assert(offsetof(FBtnGuidePlatformText, TextStickL) == 0x000028, "Member 'FBtnGuidePlatformText::TextStickL' has a wrong offset!");
static_assert(offsetof(FBtnGuidePlatformText, TextR2) == 0x000038, "Member 'FBtnGuidePlatformText::TextR2' has a wrong offset!");
static_assert(offsetof(FBtnGuidePlatformText, TextL2) == 0x000048, "Member 'FBtnGuidePlatformText::TextL2' has a wrong offset!");

// ScriptStruct UnionRun.ComBranchRingCondition
// 0x0008 (0x0008 - 0x0000)
struct FComBranchRingCondition final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComBranchRingCondition) == 0x000004, "Wrong alignment on FComBranchRingCondition");
static_assert(sizeof(FComBranchRingCondition) == 0x000008, "Wrong size on FComBranchRingCondition");
static_assert(offsetof(FComBranchRingCondition, Count) == 0x000000, "Member 'FComBranchRingCondition::Count' has a wrong offset!");
static_assert(offsetof(FComBranchRingCondition, Ratio) == 0x000004, "Member 'FComBranchRingCondition::Ratio' has a wrong offset!");

// ScriptStruct UnionRun.ComBranchRingParams
// 0x0044 (0x0044 - 0x0000)
struct FComBranchRingParams final
{
public:
	int32                                         NumCondition;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FComBranchRingCondition                Conditions1;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComBranchRingCondition                Conditions2;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComBranchRingCondition                Conditions3;                                       // 0x0014(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComBranchRingCondition                Conditions4;                                       // 0x001C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComBranchRingCondition                Conditions5;                                       // 0x0024(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComBranchRingCondition                Conditions6;                                       // 0x002C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComBranchRingCondition                Conditions7;                                       // 0x0034(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComBranchRingCondition                Conditions8;                                       // 0x003C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComBranchRingParams) == 0x000004, "Wrong alignment on FComBranchRingParams");
static_assert(sizeof(FComBranchRingParams) == 0x000044, "Wrong size on FComBranchRingParams");
static_assert(offsetof(FComBranchRingParams, NumCondition) == 0x000000, "Member 'FComBranchRingParams::NumCondition' has a wrong offset!");
static_assert(offsetof(FComBranchRingParams, Conditions1) == 0x000004, "Member 'FComBranchRingParams::Conditions1' has a wrong offset!");
static_assert(offsetof(FComBranchRingParams, Conditions2) == 0x00000C, "Member 'FComBranchRingParams::Conditions2' has a wrong offset!");
static_assert(offsetof(FComBranchRingParams, Conditions3) == 0x000014, "Member 'FComBranchRingParams::Conditions3' has a wrong offset!");
static_assert(offsetof(FComBranchRingParams, Conditions4) == 0x00001C, "Member 'FComBranchRingParams::Conditions4' has a wrong offset!");
static_assert(offsetof(FComBranchRingParams, Conditions5) == 0x000024, "Member 'FComBranchRingParams::Conditions5' has a wrong offset!");
static_assert(offsetof(FComBranchRingParams, Conditions6) == 0x00002C, "Member 'FComBranchRingParams::Conditions6' has a wrong offset!");
static_assert(offsetof(FComBranchRingParams, Conditions7) == 0x000034, "Member 'FComBranchRingParams::Conditions7' has a wrong offset!");
static_assert(offsetof(FComBranchRingParams, Conditions8) == 0x00003C, "Member 'FComBranchRingParams::Conditions8' has a wrong offset!");

// ScriptStruct UnionRun.RaceUITimeTrialTime
// 0x0020 (0x0020 - 0x0000)
struct FRaceUITimeTrialTime final
{
public:
	bool                                          IsMinus;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSame;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Minutes10;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes01;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds10;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds01;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Millimeter100;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Millimeter010;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Millimeter001;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceUITimeTrialTime) == 0x000004, "Wrong alignment on FRaceUITimeTrialTime");
static_assert(sizeof(FRaceUITimeTrialTime) == 0x000020, "Wrong size on FRaceUITimeTrialTime");
static_assert(offsetof(FRaceUITimeTrialTime, IsMinus) == 0x000000, "Member 'FRaceUITimeTrialTime::IsMinus' has a wrong offset!");
static_assert(offsetof(FRaceUITimeTrialTime, IsSame) == 0x000001, "Member 'FRaceUITimeTrialTime::IsSame' has a wrong offset!");
static_assert(offsetof(FRaceUITimeTrialTime, Minutes10) == 0x000004, "Member 'FRaceUITimeTrialTime::Minutes10' has a wrong offset!");
static_assert(offsetof(FRaceUITimeTrialTime, Minutes01) == 0x000008, "Member 'FRaceUITimeTrialTime::Minutes01' has a wrong offset!");
static_assert(offsetof(FRaceUITimeTrialTime, Seconds10) == 0x00000C, "Member 'FRaceUITimeTrialTime::Seconds10' has a wrong offset!");
static_assert(offsetof(FRaceUITimeTrialTime, Seconds01) == 0x000010, "Member 'FRaceUITimeTrialTime::Seconds01' has a wrong offset!");
static_assert(offsetof(FRaceUITimeTrialTime, Millimeter100) == 0x000014, "Member 'FRaceUITimeTrialTime::Millimeter100' has a wrong offset!");
static_assert(offsetof(FRaceUITimeTrialTime, Millimeter010) == 0x000018, "Member 'FRaceUITimeTrialTime::Millimeter010' has a wrong offset!");
static_assert(offsetof(FRaceUITimeTrialTime, Millimeter001) == 0x00001C, "Member 'FRaceUITimeTrialTime::Millimeter001' has a wrong offset!");

// ScriptStruct UnionRun.RingColliderParam
// 0x0020 (0x0020 - 0x0000)
struct FRingColliderParam final : public FColliderParam
{
public:
	struct FVector                                Extents;                                           // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PackageRingRadius;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRingColliderParam) == 0x000008, "Wrong alignment on FRingColliderParam");
static_assert(sizeof(FRingColliderParam) == 0x000020, "Wrong size on FRingColliderParam");
static_assert(offsetof(FRingColliderParam, Extents) == 0x000000, "Member 'FRingColliderParam::Extents' has a wrong offset!");
static_assert(offsetof(FRingColliderParam, Radius) == 0x000018, "Member 'FRingColliderParam::Radius' has a wrong offset!");
static_assert(offsetof(FRingColliderParam, PackageRingRadius) == 0x00001C, "Member 'FRingColliderParam::PackageRingRadius' has a wrong offset!");

// ScriptStruct UnionRun.ComGadgetEquipTableSetting
// 0x0008 (0x0010 - 0x0008)
struct FComGadgetEquipTableSetting final : public FTableRowBase
{
public:
	EComGadgetEquipTableType                      TableType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GadgetEquipGr;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComGadgetEquipTableSetting) == 0x000008, "Wrong alignment on FComGadgetEquipTableSetting");
static_assert(sizeof(FComGadgetEquipTableSetting) == 0x000010, "Wrong size on FComGadgetEquipTableSetting");
static_assert(offsetof(FComGadgetEquipTableSetting, TableType) == 0x000008, "Member 'FComGadgetEquipTableSetting::TableType' has a wrong offset!");
static_assert(offsetof(FComGadgetEquipTableSetting, GadgetEquipGr) == 0x00000C, "Member 'FComGadgetEquipTableSetting::GadgetEquipGr' has a wrong offset!");

// ScriptStruct UnionRun.RingCircleHitInfo
// 0x0010 (0x0010 - 0x0000)
struct FRingCircleHitInfo final
{
public:
	int32                                         AbsorberRacerIndex;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbsorberPriority;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AbsorberObject;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRingCircleHitInfo) == 0x000008, "Wrong alignment on FRingCircleHitInfo");
static_assert(sizeof(FRingCircleHitInfo) == 0x000010, "Wrong size on FRingCircleHitInfo");
static_assert(offsetof(FRingCircleHitInfo, AbsorberRacerIndex) == 0x000000, "Member 'FRingCircleHitInfo::AbsorberRacerIndex' has a wrong offset!");
static_assert(offsetof(FRingCircleHitInfo, AbsorberPriority) == 0x000004, "Member 'FRingCircleHitInfo::AbsorberPriority' has a wrong offset!");
static_assert(offsetof(FRingCircleHitInfo, AbsorberObject) == 0x000008, "Member 'FRingCircleHitInfo::AbsorberObject' has a wrong offset!");

// ScriptStruct UnionRun.UnionBtCollisionBinaryParameter
// 0x0020 (0x0020 - 0x0000)
struct FUnionBtCollisionBinaryParameter final
{
public:
	int32                                         DataVersion;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hash;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChunkDataCount;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionBtCollisionBinaryParameter) == 0x000008, "Wrong alignment on FUnionBtCollisionBinaryParameter");
static_assert(sizeof(FUnionBtCollisionBinaryParameter) == 0x000020, "Wrong size on FUnionBtCollisionBinaryParameter");
static_assert(offsetof(FUnionBtCollisionBinaryParameter, DataVersion) == 0x000000, "Member 'FUnionBtCollisionBinaryParameter::DataVersion' has a wrong offset!");
static_assert(offsetof(FUnionBtCollisionBinaryParameter, Hash) == 0x000004, "Member 'FUnionBtCollisionBinaryParameter::Hash' has a wrong offset!");
static_assert(offsetof(FUnionBtCollisionBinaryParameter, ChunkDataCount) == 0x000008, "Member 'FUnionBtCollisionBinaryParameter::ChunkDataCount' has a wrong offset!");
static_assert(offsetof(FUnionBtCollisionBinaryParameter, Data) == 0x000010, "Member 'FUnionBtCollisionBinaryParameter::Data' has a wrong offset!");

// ScriptStruct UnionRun.MachineSurfaceSoundData
// 0x0058 (0x0060 - 0x0008)
struct FMachineSurfaceSoundData final : public FTableRowBase
{
public:
	EVehicleSound                                 SoundType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EUnionSurfaceType, TSoftObjectPtr<class USoundAtomCue>> CueMap;                             // 0x0010(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineSurfaceSoundData) == 0x000008, "Wrong alignment on FMachineSurfaceSoundData");
static_assert(sizeof(FMachineSurfaceSoundData) == 0x000060, "Wrong size on FMachineSurfaceSoundData");
static_assert(offsetof(FMachineSurfaceSoundData, SoundType) == 0x000008, "Member 'FMachineSurfaceSoundData::SoundType' has a wrong offset!");
static_assert(offsetof(FMachineSurfaceSoundData, CueMap) == 0x000010, "Member 'FMachineSurfaceSoundData::CueMap' has a wrong offset!");

// ScriptStruct UnionRun.RunChaseCameraParam
// 0x0028 (0x0028 - 0x0000)
struct FRunChaseCameraParam final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuperDistance;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackDistance;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Elevation;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackElevation;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetForward;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetHeight;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldOfView;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuperFieldOfView;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackFieldOfView;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRunChaseCameraParam) == 0x000004, "Wrong alignment on FRunChaseCameraParam");
static_assert(sizeof(FRunChaseCameraParam) == 0x000028, "Wrong size on FRunChaseCameraParam");
static_assert(offsetof(FRunChaseCameraParam, Distance) == 0x000000, "Member 'FRunChaseCameraParam::Distance' has a wrong offset!");
static_assert(offsetof(FRunChaseCameraParam, SuperDistance) == 0x000004, "Member 'FRunChaseCameraParam::SuperDistance' has a wrong offset!");
static_assert(offsetof(FRunChaseCameraParam, BackDistance) == 0x000008, "Member 'FRunChaseCameraParam::BackDistance' has a wrong offset!");
static_assert(offsetof(FRunChaseCameraParam, Elevation) == 0x00000C, "Member 'FRunChaseCameraParam::Elevation' has a wrong offset!");
static_assert(offsetof(FRunChaseCameraParam, BackElevation) == 0x000010, "Member 'FRunChaseCameraParam::BackElevation' has a wrong offset!");
static_assert(offsetof(FRunChaseCameraParam, TargetForward) == 0x000014, "Member 'FRunChaseCameraParam::TargetForward' has a wrong offset!");
static_assert(offsetof(FRunChaseCameraParam, TargetHeight) == 0x000018, "Member 'FRunChaseCameraParam::TargetHeight' has a wrong offset!");
static_assert(offsetof(FRunChaseCameraParam, FieldOfView) == 0x00001C, "Member 'FRunChaseCameraParam::FieldOfView' has a wrong offset!");
static_assert(offsetof(FRunChaseCameraParam, SuperFieldOfView) == 0x000020, "Member 'FRunChaseCameraParam::SuperFieldOfView' has a wrong offset!");
static_assert(offsetof(FRunChaseCameraParam, BackFieldOfView) == 0x000024, "Member 'FRunChaseCameraParam::BackFieldOfView' has a wrong offset!");

// ScriptStruct UnionRun.UnionCameraRequstInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x04) FUnionCameraRequstInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionCameraRequstInfo) == 0x000004, "Wrong alignment on FUnionCameraRequstInfo");
static_assert(sizeof(FUnionCameraRequstInfo) == 0x000028, "Wrong size on FUnionCameraRequstInfo");

// ScriptStruct UnionRun.CameraParamTable
// 0x0028 (0x0030 - 0x0008)
struct FCameraParamTable final : public FTableRowBase
{
public:
	int32                                         ParamId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bElevationFixed;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElevationFixedTarget;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFrame;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutFrame;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOffsetFixed;                                      // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetFixedTarget;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetFixedInFrame;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetFixedOutFrame;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraParamTable) == 0x000008, "Wrong alignment on FCameraParamTable");
static_assert(sizeof(FCameraParamTable) == 0x000030, "Wrong size on FCameraParamTable");
static_assert(offsetof(FCameraParamTable, ParamId) == 0x000008, "Member 'FCameraParamTable::ParamId' has a wrong offset!");
static_assert(offsetof(FCameraParamTable, bElevationFixed) == 0x00000C, "Member 'FCameraParamTable::bElevationFixed' has a wrong offset!");
static_assert(offsetof(FCameraParamTable, ElevationFixedTarget) == 0x000010, "Member 'FCameraParamTable::ElevationFixedTarget' has a wrong offset!");
static_assert(offsetof(FCameraParamTable, InFrame) == 0x000014, "Member 'FCameraParamTable::InFrame' has a wrong offset!");
static_assert(offsetof(FCameraParamTable, OutFrame) == 0x000018, "Member 'FCameraParamTable::OutFrame' has a wrong offset!");
static_assert(offsetof(FCameraParamTable, bOffsetFixed) == 0x00001C, "Member 'FCameraParamTable::bOffsetFixed' has a wrong offset!");
static_assert(offsetof(FCameraParamTable, OffsetFixedTarget) == 0x000020, "Member 'FCameraParamTable::OffsetFixedTarget' has a wrong offset!");
static_assert(offsetof(FCameraParamTable, OffsetFixedInFrame) == 0x000024, "Member 'FCameraParamTable::OffsetFixedInFrame' has a wrong offset!");
static_assert(offsetof(FCameraParamTable, OffsetFixedOutFrame) == 0x000028, "Member 'FCameraParamTable::OffsetFixedOutFrame' has a wrong offset!");

// ScriptStruct UnionRun.SlideParamTable
// 0x0068 (0x0070 - 0x0008)
struct FSlideParamTable final : public FTableRowBase
{
public:
	int32                                         ParamId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SlideVec;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCircleSlide;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularVelocity;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWorldVec;                                      // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRandomId;                                      // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BaseIds;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 FinalLapIds;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlideParamTable) == 0x000008, "Wrong alignment on FSlideParamTable");
static_assert(sizeof(FSlideParamTable) == 0x000070, "Wrong size on FSlideParamTable");
static_assert(offsetof(FSlideParamTable, ParamId) == 0x000008, "Member 'FSlideParamTable::ParamId' has a wrong offset!");
static_assert(offsetof(FSlideParamTable, SlideVec) == 0x000010, "Member 'FSlideParamTable::SlideVec' has a wrong offset!");
static_assert(offsetof(FSlideParamTable, bIsCircleSlide) == 0x000028, "Member 'FSlideParamTable::bIsCircleSlide' has a wrong offset!");
static_assert(offsetof(FSlideParamTable, Position) == 0x000030, "Member 'FSlideParamTable::Position' has a wrong offset!");
static_assert(offsetof(FSlideParamTable, AngularVelocity) == 0x000048, "Member 'FSlideParamTable::AngularVelocity' has a wrong offset!");
static_assert(offsetof(FSlideParamTable, bUseWorldVec) == 0x00004C, "Member 'FSlideParamTable::bUseWorldVec' has a wrong offset!");
static_assert(offsetof(FSlideParamTable, bUseRandomId) == 0x00004D, "Member 'FSlideParamTable::bUseRandomId' has a wrong offset!");
static_assert(offsetof(FSlideParamTable, BaseIds) == 0x000050, "Member 'FSlideParamTable::BaseIds' has a wrong offset!");
static_assert(offsetof(FSlideParamTable, FinalLapIds) == 0x000060, "Member 'FSlideParamTable::FinalLapIds' has a wrong offset!");

// ScriptStruct UnionRun.PlaneBounceSpeedParams
// 0x0010 (0x0010 - 0x0000)
struct FPlaneBounceSpeedParams final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deccel;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeccelSeconds;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyDirectionBlendRate;                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaneBounceSpeedParams) == 0x000004, "Wrong alignment on FPlaneBounceSpeedParams");
static_assert(sizeof(FPlaneBounceSpeedParams) == 0x000010, "Wrong size on FPlaneBounceSpeedParams");
static_assert(offsetof(FPlaneBounceSpeedParams, Speed) == 0x000000, "Member 'FPlaneBounceSpeedParams::Speed' has a wrong offset!");
static_assert(offsetof(FPlaneBounceSpeedParams, Deccel) == 0x000004, "Member 'FPlaneBounceSpeedParams::Deccel' has a wrong offset!");
static_assert(offsetof(FPlaneBounceSpeedParams, DeccelSeconds) == 0x000008, "Member 'FPlaneBounceSpeedParams::DeccelSeconds' has a wrong offset!");
static_assert(offsetof(FPlaneBounceSpeedParams, BodyDirectionBlendRate) == 0x00000C, "Member 'FPlaneBounceSpeedParams::BodyDirectionBlendRate' has a wrong offset!");

// ScriptStruct UnionRun.BounceParamTable
// 0x0028 (0x0030 - 0x0008)
struct FBounceParamTable final : public FTableRowBase
{
public:
	int32                                         ParamId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BounceVec;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostLevel;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBounceVecFixedType                           BounceVecFixedType;                                // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableAirTrick;                                  // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBounceParamTable) == 0x000008, "Wrong alignment on FBounceParamTable");
static_assert(sizeof(FBounceParamTable) == 0x000030, "Wrong size on FBounceParamTable");
static_assert(offsetof(FBounceParamTable, ParamId) == 0x000008, "Member 'FBounceParamTable::ParamId' has a wrong offset!");
static_assert(offsetof(FBounceParamTable, BounceVec) == 0x000010, "Member 'FBounceParamTable::BounceVec' has a wrong offset!");
static_assert(offsetof(FBounceParamTable, BoostLevel) == 0x000028, "Member 'FBounceParamTable::BoostLevel' has a wrong offset!");
static_assert(offsetof(FBounceParamTable, BounceVecFixedType) == 0x00002C, "Member 'FBounceParamTable::BounceVecFixedType' has a wrong offset!");
static_assert(offsetof(FBounceParamTable, bDisableAirTrick) == 0x00002D, "Member 'FBounceParamTable::bDisableAirTrick' has a wrong offset!");

// ScriptStruct UnionRun.GuidedJumpParamTable
// 0x0010 (0x0018 - 0x0008)
struct FGuidedJumpParamTable final : public FTableRowBase
{
public:
	int32                                         ParamId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MargeNext;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LRHeightAdjust;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuidedJumpParamTable) == 0x000008, "Wrong alignment on FGuidedJumpParamTable");
static_assert(sizeof(FGuidedJumpParamTable) == 0x000018, "Wrong size on FGuidedJumpParamTable");
static_assert(offsetof(FGuidedJumpParamTable, ParamId) == 0x000008, "Member 'FGuidedJumpParamTable::ParamId' has a wrong offset!");
static_assert(offsetof(FGuidedJumpParamTable, bIsValid) == 0x00000C, "Member 'FGuidedJumpParamTable::bIsValid' has a wrong offset!");
static_assert(offsetof(FGuidedJumpParamTable, MargeNext) == 0x000010, "Member 'FGuidedJumpParamTable::MargeNext' has a wrong offset!");
static_assert(offsetof(FGuidedJumpParamTable, LRHeightAdjust) == 0x000014, "Member 'FGuidedJumpParamTable::LRHeightAdjust' has a wrong offset!");

// ScriptStruct UnionRun.RacerDamageReactionData
// 0x0050 (0x0058 - 0x0008)
struct FRacerDamageReactionData final : public FTableRowBase
{
public:
	ERacerDamageReactionType                      ReactionType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdjustSpeedKMPH_NORMAL;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustSpeedKMPH_HIGH;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustSpeedKMPH_SONIC;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustSpeedKMPH_SUPER_SONIC;                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionUnavailableTime_NORMAL;                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionUnavailableTime_HIGH;                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionUnavailableTime_SONIC;                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionUnavailableTime_SUPER_SONIC;               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvincibleTime_NORMAL;                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvincibleTime_HIGH;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvincibleTime_SONIC;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvincibleTime_SUPER_SONIC;                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionImpulse_X;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionImpulse_Y;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionImpulse_Z_NORMAL;                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionImpulse_Z_HIGH;                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionImpulse_Z_SONIC;                           // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionImpulse_Z_SUPER_SONIC;                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRacerDamageReactionData) == 0x000008, "Wrong alignment on FRacerDamageReactionData");
static_assert(sizeof(FRacerDamageReactionData) == 0x000058, "Wrong size on FRacerDamageReactionData");
static_assert(offsetof(FRacerDamageReactionData, ReactionType) == 0x000008, "Member 'FRacerDamageReactionData::ReactionType' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, AdjustSpeedKMPH_NORMAL) == 0x00000C, "Member 'FRacerDamageReactionData::AdjustSpeedKMPH_NORMAL' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, AdjustSpeedKMPH_HIGH) == 0x000010, "Member 'FRacerDamageReactionData::AdjustSpeedKMPH_HIGH' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, AdjustSpeedKMPH_SONIC) == 0x000014, "Member 'FRacerDamageReactionData::AdjustSpeedKMPH_SONIC' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, AdjustSpeedKMPH_SUPER_SONIC) == 0x000018, "Member 'FRacerDamageReactionData::AdjustSpeedKMPH_SUPER_SONIC' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, ReactionUnavailableTime_NORMAL) == 0x00001C, "Member 'FRacerDamageReactionData::ReactionUnavailableTime_NORMAL' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, ReactionUnavailableTime_HIGH) == 0x000020, "Member 'FRacerDamageReactionData::ReactionUnavailableTime_HIGH' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, ReactionUnavailableTime_SONIC) == 0x000024, "Member 'FRacerDamageReactionData::ReactionUnavailableTime_SONIC' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, ReactionUnavailableTime_SUPER_SONIC) == 0x000028, "Member 'FRacerDamageReactionData::ReactionUnavailableTime_SUPER_SONIC' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, InvincibleTime_NORMAL) == 0x00002C, "Member 'FRacerDamageReactionData::InvincibleTime_NORMAL' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, InvincibleTime_HIGH) == 0x000030, "Member 'FRacerDamageReactionData::InvincibleTime_HIGH' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, InvincibleTime_SONIC) == 0x000034, "Member 'FRacerDamageReactionData::InvincibleTime_SONIC' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, InvincibleTime_SUPER_SONIC) == 0x000038, "Member 'FRacerDamageReactionData::InvincibleTime_SUPER_SONIC' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, ReactionImpulse_X) == 0x00003C, "Member 'FRacerDamageReactionData::ReactionImpulse_X' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, ReactionImpulse_Y) == 0x000040, "Member 'FRacerDamageReactionData::ReactionImpulse_Y' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, ReactionImpulse_Z_NORMAL) == 0x000044, "Member 'FRacerDamageReactionData::ReactionImpulse_Z_NORMAL' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, ReactionImpulse_Z_HIGH) == 0x000048, "Member 'FRacerDamageReactionData::ReactionImpulse_Z_HIGH' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, ReactionImpulse_Z_SONIC) == 0x00004C, "Member 'FRacerDamageReactionData::ReactionImpulse_Z_SONIC' has a wrong offset!");
static_assert(offsetof(FRacerDamageReactionData, ReactionImpulse_Z_SUPER_SONIC) == 0x000050, "Member 'FRacerDamageReactionData::ReactionImpulse_Z_SUPER_SONIC' has a wrong offset!");

// ScriptStruct UnionRun.RivalLevelComLevel
// 0x0020 (0x0028 - 0x0008)
struct FRivalLevelComLevel final : public FTableRowBase
{
public:
	ERaceSettingGrouping                          RaceSettingGrouping;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RivalLevel;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NomalLv;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighLv;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SonicLv;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperSonicLv;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MirrorLv;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComLotteryRateDataTableType                  ItemTable;                                         // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComPointDistanceTableType                    ItemDist;                                          // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRivalLevelComLevel) == 0x000008, "Wrong alignment on FRivalLevelComLevel");
static_assert(sizeof(FRivalLevelComLevel) == 0x000028, "Wrong size on FRivalLevelComLevel");
static_assert(offsetof(FRivalLevelComLevel, RaceSettingGrouping) == 0x000008, "Member 'FRivalLevelComLevel::RaceSettingGrouping' has a wrong offset!");
static_assert(offsetof(FRivalLevelComLevel, RivalLevel) == 0x00000C, "Member 'FRivalLevelComLevel::RivalLevel' has a wrong offset!");
static_assert(offsetof(FRivalLevelComLevel, NomalLv) == 0x000010, "Member 'FRivalLevelComLevel::NomalLv' has a wrong offset!");
static_assert(offsetof(FRivalLevelComLevel, HighLv) == 0x000014, "Member 'FRivalLevelComLevel::HighLv' has a wrong offset!");
static_assert(offsetof(FRivalLevelComLevel, SonicLv) == 0x000018, "Member 'FRivalLevelComLevel::SonicLv' has a wrong offset!");
static_assert(offsetof(FRivalLevelComLevel, SuperSonicLv) == 0x00001C, "Member 'FRivalLevelComLevel::SuperSonicLv' has a wrong offset!");
static_assert(offsetof(FRivalLevelComLevel, MirrorLv) == 0x000020, "Member 'FRivalLevelComLevel::MirrorLv' has a wrong offset!");
static_assert(offsetof(FRivalLevelComLevel, ItemTable) == 0x000024, "Member 'FRivalLevelComLevel::ItemTable' has a wrong offset!");
static_assert(offsetof(FRivalLevelComLevel, ItemDist) == 0x000025, "Member 'FRivalLevelComLevel::ItemDist' has a wrong offset!");

// ScriptStruct UnionRun.EntryRacer
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FEntryRacer final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEntryRacer) == 0x000008, "Wrong alignment on FEntryRacer");
static_assert(sizeof(FEntryRacer) == 0x000078, "Wrong size on FEntryRacer");

// ScriptStruct UnionRun.EntryGroup
// 0x0038 (0x0038 - 0x0000)
struct FEntryGroup final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamBoostUnlockGauge;                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentBoostCycle;                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartRaceTime;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostPhaseTransitionTimer;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTeamBoost;                                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEntryRacer>                    EntryRacers;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         UserData;                                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEntryGroup) == 0x000008, "Wrong alignment on FEntryGroup");
static_assert(sizeof(FEntryGroup) == 0x000038, "Wrong size on FEntryGroup");
static_assert(offsetof(FEntryGroup, GroupIndex) == 0x000000, "Member 'FEntryGroup::GroupIndex' has a wrong offset!");
static_assert(offsetof(FEntryGroup, TeamBoostUnlockGauge) == 0x000004, "Member 'FEntryGroup::TeamBoostUnlockGauge' has a wrong offset!");
static_assert(offsetof(FEntryGroup, CurrentBoostCycle) == 0x000008, "Member 'FEntryGroup::CurrentBoostCycle' has a wrong offset!");
static_assert(offsetof(FEntryGroup, Rank) == 0x00000C, "Member 'FEntryGroup::Rank' has a wrong offset!");
static_assert(offsetof(FEntryGroup, StartRaceTime) == 0x000010, "Member 'FEntryGroup::StartRaceTime' has a wrong offset!");
static_assert(offsetof(FEntryGroup, BoostPhaseTransitionTimer) == 0x000014, "Member 'FEntryGroup::BoostPhaseTransitionTimer' has a wrong offset!");
static_assert(offsetof(FEntryGroup, bIsTeamBoost) == 0x000018, "Member 'FEntryGroup::bIsTeamBoost' has a wrong offset!");
static_assert(offsetof(FEntryGroup, EntryRacers) == 0x000020, "Member 'FEntryGroup::EntryRacers' has a wrong offset!");
static_assert(offsetof(FEntryGroup, UserData) == 0x000030, "Member 'FEntryGroup::UserData' has a wrong offset!");

// ScriptStruct UnionRun.AttackedReply
// 0x0028 (0x0028 - 0x0000)
struct FAttackedReply final
{
public:
	class UObject*                                SenderObject;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tag;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerDamageType                              DamageType;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerDamageType                              DamageTypeOtherInfo;                               // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerDamageNotifyType                        ResultType;                                        // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTime;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainTime;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplyProcessed;                                   // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttackedReply) == 0x000008, "Wrong alignment on FAttackedReply");
static_assert(sizeof(FAttackedReply) == 0x000028, "Wrong size on FAttackedReply");
static_assert(offsetof(FAttackedReply, SenderObject) == 0x000000, "Member 'FAttackedReply::SenderObject' has a wrong offset!");
static_assert(offsetof(FAttackedReply, Tag) == 0x000008, "Member 'FAttackedReply::Tag' has a wrong offset!");
static_assert(offsetof(FAttackedReply, DamageType) == 0x000018, "Member 'FAttackedReply::DamageType' has a wrong offset!");
static_assert(offsetof(FAttackedReply, DamageTypeOtherInfo) == 0x000019, "Member 'FAttackedReply::DamageTypeOtherInfo' has a wrong offset!");
static_assert(offsetof(FAttackedReply, ResultType) == 0x00001A, "Member 'FAttackedReply::ResultType' has a wrong offset!");
static_assert(offsetof(FAttackedReply, ElapsedTime) == 0x00001C, "Member 'FAttackedReply::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FAttackedReply, RemainTime) == 0x000020, "Member 'FAttackedReply::RemainTime' has a wrong offset!");
static_assert(offsetof(FAttackedReply, bReplyProcessed) == 0x000024, "Member 'FAttackedReply::bReplyProcessed' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionRaceParam
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FRacerReactionRaceParam final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRacerReactionRaceParam) == 0x000008, "Wrong alignment on FRacerReactionRaceParam");
static_assert(sizeof(FRacerReactionRaceParam) == 0x000040, "Wrong size on FRacerReactionRaceParam");

// ScriptStruct UnionRun.FireAttackItemInfo
// 0x0030 (0x0030 - 0x0000)
struct FFireAttackItemInfo final
{
public:
	int32                                         AttackedByPlayerIndex;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnionRacerStatusObject*                AttackToRacerStatusObject;                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RacerIndexList;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InItemId;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackToRacerGroupIndex;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusHitItemCount;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFireAttackItemInfo) == 0x000008, "Wrong alignment on FFireAttackItemInfo");
static_assert(sizeof(FFireAttackItemInfo) == 0x000030, "Wrong size on FFireAttackItemInfo");
static_assert(offsetof(FFireAttackItemInfo, AttackedByPlayerIndex) == 0x000000, "Member 'FFireAttackItemInfo::AttackedByPlayerIndex' has a wrong offset!");
static_assert(offsetof(FFireAttackItemInfo, AttackToRacerStatusObject) == 0x000008, "Member 'FFireAttackItemInfo::AttackToRacerStatusObject' has a wrong offset!");
static_assert(offsetof(FFireAttackItemInfo, RacerIndexList) == 0x000010, "Member 'FFireAttackItemInfo::RacerIndexList' has a wrong offset!");
static_assert(offsetof(FFireAttackItemInfo, InItemId) == 0x000020, "Member 'FFireAttackItemInfo::InItemId' has a wrong offset!");
static_assert(offsetof(FFireAttackItemInfo, AttackToRacerGroupIndex) == 0x000024, "Member 'FFireAttackItemInfo::AttackToRacerGroupIndex' has a wrong offset!");
static_assert(offsetof(FFireAttackItemInfo, BonusHitItemCount) == 0x000028, "Member 'FFireAttackItemInfo::BonusHitItemCount' has a wrong offset!");

// ScriptStruct UnionRun.AttackItemResultInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FAttackItemResultInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttackItemResultInfo) == 0x000008, "Wrong alignment on FAttackItemResultInfo");
static_assert(sizeof(FAttackItemResultInfo) == 0x000028, "Wrong size on FAttackItemResultInfo");

// ScriptStruct UnionRun.ComAvoidPolishingMachineParams
// 0x0008 (0x0008 - 0x0000)
struct FComAvoidPolishingMachineParams final
{
public:
	float                                         RightPathMovePosARatioStart;                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightPathMovePosARatioEnd;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComAvoidPolishingMachineParams) == 0x000004, "Wrong alignment on FComAvoidPolishingMachineParams");
static_assert(sizeof(FComAvoidPolishingMachineParams) == 0x000008, "Wrong size on FComAvoidPolishingMachineParams");
static_assert(offsetof(FComAvoidPolishingMachineParams, RightPathMovePosARatioStart) == 0x000000, "Member 'FComAvoidPolishingMachineParams::RightPathMovePosARatioStart' has a wrong offset!");
static_assert(offsetof(FComAvoidPolishingMachineParams, RightPathMovePosARatioEnd) == 0x000004, "Member 'FComAvoidPolishingMachineParams::RightPathMovePosARatioEnd' has a wrong offset!");

// ScriptStruct UnionRun.ComTimingGimmickParams
// 0x0028 (0x0028 - 0x0000)
struct FComTimingGimmickParams final
{
public:
	float                                         DarkGaiaPhoenixComSpeedRate;                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TentacleComSpeedRate;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TentacleLeftPatternRandomId;                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BucketWheelComSpeedRate;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathEggComSpeedRate;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BigTrainMoveRateForComBranch;                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BigTrainComBranchUnderRate;                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Enemy04002ComSpeedRate;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FComAvoidPolishingMachineParams        ComAvoidPolishingMachineParams;                    // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComTimingGimmickParams) == 0x000004, "Wrong alignment on FComTimingGimmickParams");
static_assert(sizeof(FComTimingGimmickParams) == 0x000028, "Wrong size on FComTimingGimmickParams");
static_assert(offsetof(FComTimingGimmickParams, DarkGaiaPhoenixComSpeedRate) == 0x000000, "Member 'FComTimingGimmickParams::DarkGaiaPhoenixComSpeedRate' has a wrong offset!");
static_assert(offsetof(FComTimingGimmickParams, TentacleComSpeedRate) == 0x000004, "Member 'FComTimingGimmickParams::TentacleComSpeedRate' has a wrong offset!");
static_assert(offsetof(FComTimingGimmickParams, TentacleLeftPatternRandomId) == 0x000008, "Member 'FComTimingGimmickParams::TentacleLeftPatternRandomId' has a wrong offset!");
static_assert(offsetof(FComTimingGimmickParams, BucketWheelComSpeedRate) == 0x00000C, "Member 'FComTimingGimmickParams::BucketWheelComSpeedRate' has a wrong offset!");
static_assert(offsetof(FComTimingGimmickParams, DeathEggComSpeedRate) == 0x000010, "Member 'FComTimingGimmickParams::DeathEggComSpeedRate' has a wrong offset!");
static_assert(offsetof(FComTimingGimmickParams, BigTrainMoveRateForComBranch) == 0x000014, "Member 'FComTimingGimmickParams::BigTrainMoveRateForComBranch' has a wrong offset!");
static_assert(offsetof(FComTimingGimmickParams, BigTrainComBranchUnderRate) == 0x000018, "Member 'FComTimingGimmickParams::BigTrainComBranchUnderRate' has a wrong offset!");
static_assert(offsetof(FComTimingGimmickParams, Enemy04002ComSpeedRate) == 0x00001C, "Member 'FComTimingGimmickParams::Enemy04002ComSpeedRate' has a wrong offset!");
static_assert(offsetof(FComTimingGimmickParams, ComAvoidPolishingMachineParams) == 0x000020, "Member 'FComTimingGimmickParams::ComAvoidPolishingMachineParams' has a wrong offset!");

// ScriptStruct UnionRun.DebugPrintStringStruct
// 0x0028 (0x0028 - 0x0000)
struct FDebugPrintStringStruct final
{
public:
	class FString                                 strBody;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FontSize;                                          // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         posX;                                              // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         posY;                                              // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         colR;                                              // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         colG;                                              // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         colB;                                              // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugPrintStringStruct) == 0x000008, "Wrong alignment on FDebugPrintStringStruct");
static_assert(sizeof(FDebugPrintStringStruct) == 0x000028, "Wrong size on FDebugPrintStringStruct");
static_assert(offsetof(FDebugPrintStringStruct, strBody) == 0x000000, "Member 'FDebugPrintStringStruct::strBody' has a wrong offset!");
static_assert(offsetof(FDebugPrintStringStruct, FontSize) == 0x000010, "Member 'FDebugPrintStringStruct::FontSize' has a wrong offset!");
static_assert(offsetof(FDebugPrintStringStruct, posX) == 0x000014, "Member 'FDebugPrintStringStruct::posX' has a wrong offset!");
static_assert(offsetof(FDebugPrintStringStruct, posY) == 0x000018, "Member 'FDebugPrintStringStruct::posY' has a wrong offset!");
static_assert(offsetof(FDebugPrintStringStruct, colR) == 0x00001C, "Member 'FDebugPrintStringStruct::colR' has a wrong offset!");
static_assert(offsetof(FDebugPrintStringStruct, colG) == 0x000020, "Member 'FDebugPrintStringStruct::colG' has a wrong offset!");
static_assert(offsetof(FDebugPrintStringStruct, colB) == 0x000024, "Member 'FDebugPrintStringStruct::colB' has a wrong offset!");

// ScriptStruct UnionRun.CallDroneInfo
// 0x0004 (0x0004 - 0x0000)
struct FCallDroneInfo final
{
public:
	EDroneShowType                                ShowType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDroneCurrentLap                              CurrentLap;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDroneRemainDistance                          Distance;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDroneDismissType                             DismissType;                                       // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCallDroneInfo) == 0x000001, "Wrong alignment on FCallDroneInfo");
static_assert(sizeof(FCallDroneInfo) == 0x000004, "Wrong size on FCallDroneInfo");
static_assert(offsetof(FCallDroneInfo, ShowType) == 0x000000, "Member 'FCallDroneInfo::ShowType' has a wrong offset!");
static_assert(offsetof(FCallDroneInfo, CurrentLap) == 0x000001, "Member 'FCallDroneInfo::CurrentLap' has a wrong offset!");
static_assert(offsetof(FCallDroneInfo, Distance) == 0x000002, "Member 'FCallDroneInfo::Distance' has a wrong offset!");
static_assert(offsetof(FCallDroneInfo, DismissType) == 0x000003, "Member 'FCallDroneInfo::DismissType' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceTime
// 0x0010 (0x0010 - 0x0000)
struct FUnionRaceTime final
{
public:
	int32                                         ClockCount;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinutePart;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondPart;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MillimeterSecondPart;                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceTime) == 0x000004, "Wrong alignment on FUnionRaceTime");
static_assert(sizeof(FUnionRaceTime) == 0x000010, "Wrong size on FUnionRaceTime");
static_assert(offsetof(FUnionRaceTime, ClockCount) == 0x000000, "Member 'FUnionRaceTime::ClockCount' has a wrong offset!");
static_assert(offsetof(FUnionRaceTime, MinutePart) == 0x000004, "Member 'FUnionRaceTime::MinutePart' has a wrong offset!");
static_assert(offsetof(FUnionRaceTime, SecondPart) == 0x000008, "Member 'FUnionRaceTime::SecondPart' has a wrong offset!");
static_assert(offsetof(FUnionRaceTime, MillimeterSecondPart) == 0x00000C, "Member 'FUnionRaceTime::MillimeterSecondPart' has a wrong offset!");

// ScriptStruct UnionRun.GadgetRingPerformanceInfo
// 0x0010 (0x0010 - 0x0000)
struct FGadgetRingPerformanceInfo final
{
public:
	float                                         RotateTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GetRingTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpOffset;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpOffsetTransformed;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetRingPerformanceInfo) == 0x000004, "Wrong alignment on FGadgetRingPerformanceInfo");
static_assert(sizeof(FGadgetRingPerformanceInfo) == 0x000010, "Wrong size on FGadgetRingPerformanceInfo");
static_assert(offsetof(FGadgetRingPerformanceInfo, RotateTime) == 0x000000, "Member 'FGadgetRingPerformanceInfo::RotateTime' has a wrong offset!");
static_assert(offsetof(FGadgetRingPerformanceInfo, GetRingTime) == 0x000004, "Member 'FGadgetRingPerformanceInfo::GetRingTime' has a wrong offset!");
static_assert(offsetof(FGadgetRingPerformanceInfo, UpOffset) == 0x000008, "Member 'FGadgetRingPerformanceInfo::UpOffset' has a wrong offset!");
static_assert(offsetof(FGadgetRingPerformanceInfo, UpOffsetTransformed) == 0x00000C, "Member 'FGadgetRingPerformanceInfo::UpOffsetTransformed' has a wrong offset!");

// ScriptStruct UnionRun.GadgetMachineTuneValueChange
// 0x0014 (0x0014 - 0x0000)
struct FGadgetMachineTuneValueChange final
{
public:
	int32                                         SpeedValue;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccelValue;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandlingValue;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PowerValue;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DashValue;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetMachineTuneValueChange) == 0x000004, "Wrong alignment on FGadgetMachineTuneValueChange");
static_assert(sizeof(FGadgetMachineTuneValueChange) == 0x000014, "Wrong size on FGadgetMachineTuneValueChange");
static_assert(offsetof(FGadgetMachineTuneValueChange, SpeedValue) == 0x000000, "Member 'FGadgetMachineTuneValueChange::SpeedValue' has a wrong offset!");
static_assert(offsetof(FGadgetMachineTuneValueChange, AccelValue) == 0x000004, "Member 'FGadgetMachineTuneValueChange::AccelValue' has a wrong offset!");
static_assert(offsetof(FGadgetMachineTuneValueChange, HandlingValue) == 0x000008, "Member 'FGadgetMachineTuneValueChange::HandlingValue' has a wrong offset!");
static_assert(offsetof(FGadgetMachineTuneValueChange, PowerValue) == 0x00000C, "Member 'FGadgetMachineTuneValueChange::PowerValue' has a wrong offset!");
static_assert(offsetof(FGadgetMachineTuneValueChange, DashValue) == 0x000010, "Member 'FGadgetMachineTuneValueChange::DashValue' has a wrong offset!");

// ScriptStruct UnionRun.GroupBattlePersonalResult
// 0x0014 (0x0014 - 0x0000)
struct FGroupBattlePersonalResult final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RacerIndex;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Traction;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupBattlePersonalResult) == 0x000004, "Wrong alignment on FGroupBattlePersonalResult");
static_assert(sizeof(FGroupBattlePersonalResult) == 0x000014, "Wrong size on FGroupBattlePersonalResult");
static_assert(offsetof(FGroupBattlePersonalResult, GroupIndex) == 0x000000, "Member 'FGroupBattlePersonalResult::GroupIndex' has a wrong offset!");
static_assert(offsetof(FGroupBattlePersonalResult, RacerIndex) == 0x000004, "Member 'FGroupBattlePersonalResult::RacerIndex' has a wrong offset!");
static_assert(offsetof(FGroupBattlePersonalResult, Value) == 0x000008, "Member 'FGroupBattlePersonalResult::Value' has a wrong offset!");
static_assert(offsetof(FGroupBattlePersonalResult, Rank) == 0x00000C, "Member 'FGroupBattlePersonalResult::Rank' has a wrong offset!");
static_assert(offsetof(FGroupBattlePersonalResult, Traction) == 0x000010, "Member 'FGroupBattlePersonalResult::Traction' has a wrong offset!");

// ScriptStruct UnionRun.GadgetSimpleRingBonusInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetSimpleRingBonusInfo final
{
public:
	int32                                         RingNum;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetSimpleRingBonusInfo) == 0x000004, "Wrong alignment on FGadgetSimpleRingBonusInfo");
static_assert(sizeof(FGadgetSimpleRingBonusInfo) == 0x000004, "Wrong size on FGadgetSimpleRingBonusInfo");
static_assert(offsetof(FGadgetSimpleRingBonusInfo, RingNum) == 0x000000, "Member 'FGadgetSimpleRingBonusInfo::RingNum' has a wrong offset!");

// ScriptStruct UnionRun.GadgetIntervalRingInfo
// 0x0008 (0x0008 - 0x0000)
struct FGadgetIntervalRingInfo final
{
public:
	int32                                         RingNum;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RingInterval;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetIntervalRingInfo) == 0x000004, "Wrong alignment on FGadgetIntervalRingInfo");
static_assert(sizeof(FGadgetIntervalRingInfo) == 0x000008, "Wrong size on FGadgetIntervalRingInfo");
static_assert(offsetof(FGadgetIntervalRingInfo, RingNum) == 0x000000, "Member 'FGadgetIntervalRingInfo::RingNum' has a wrong offset!");
static_assert(offsetof(FGadgetIntervalRingInfo, RingInterval) == 0x000004, "Member 'FGadgetIntervalRingInfo::RingInterval' has a wrong offset!");

// ScriptStruct UnionRun.GadgetTradeStockInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetTradeStockInfo final
{
public:
	float                                         CoolDownTime;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetTradeStockInfo) == 0x000004, "Wrong alignment on FGadgetTradeStockInfo");
static_assert(sizeof(FGadgetTradeStockInfo) == 0x000004, "Wrong size on FGadgetTradeStockInfo");
static_assert(offsetof(FGadgetTradeStockInfo, CoolDownTime) == 0x000000, "Member 'FGadgetTradeStockInfo::CoolDownTime' has a wrong offset!");

// ScriptStruct UnionRun.PlaneTurnSpeedParams
// 0x0010 (0x0010 - 0x0000)
struct FPlaneTurnSpeedParams final
{
public:
	float                                         AngularSpeed_Min;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSpeed_Max;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularAccelSec;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSwitchAccelSec;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaneTurnSpeedParams) == 0x000004, "Wrong alignment on FPlaneTurnSpeedParams");
static_assert(sizeof(FPlaneTurnSpeedParams) == 0x000010, "Wrong size on FPlaneTurnSpeedParams");
static_assert(offsetof(FPlaneTurnSpeedParams, AngularSpeed_Min) == 0x000000, "Member 'FPlaneTurnSpeedParams::AngularSpeed_Min' has a wrong offset!");
static_assert(offsetof(FPlaneTurnSpeedParams, AngularSpeed_Max) == 0x000004, "Member 'FPlaneTurnSpeedParams::AngularSpeed_Max' has a wrong offset!");
static_assert(offsetof(FPlaneTurnSpeedParams, AngularAccelSec) == 0x000008, "Member 'FPlaneTurnSpeedParams::AngularAccelSec' has a wrong offset!");
static_assert(offsetof(FPlaneTurnSpeedParams, AngularSwitchAccelSec) == 0x00000C, "Member 'FPlaneTurnSpeedParams::AngularSwitchAccelSec' has a wrong offset!");

// ScriptStruct UnionRun.GadgetEnhanceRocketPunchInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetEnhanceRocketPunchInfo final
{
public:
	float                                         SizeScale;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetEnhanceRocketPunchInfo) == 0x000004, "Wrong alignment on FGadgetEnhanceRocketPunchInfo");
static_assert(sizeof(FGadgetEnhanceRocketPunchInfo) == 0x000004, "Wrong size on FGadgetEnhanceRocketPunchInfo");
static_assert(offsetof(FGadgetEnhanceRocketPunchInfo, SizeScale) == 0x000000, "Member 'FGadgetEnhanceRocketPunchInfo::SizeScale' has a wrong offset!");

// ScriptStruct UnionRun.GadgetEnhanceThornBallInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetEnhanceThornBallInfo final
{
public:
	float                                         SizeScale;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetEnhanceThornBallInfo) == 0x000004, "Wrong alignment on FGadgetEnhanceThornBallInfo");
static_assert(sizeof(FGadgetEnhanceThornBallInfo) == 0x000004, "Wrong size on FGadgetEnhanceThornBallInfo");
static_assert(offsetof(FGadgetEnhanceThornBallInfo, SizeScale) == 0x000000, "Member 'FGadgetEnhanceThornBallInfo::SizeScale' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceStageRingGateData
// 0x0078 (0x0078 - 0x0000)
struct FUnionRaceStageRingGateData final
{
public:
	class UMaterialInstance*                      FloorLeft;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      FloorRight;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      RingLeft;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      RingRight;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      MaterialEnter;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      MaterialEnterAir;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      MaterialExit;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>              ShortcutEnterMaterial;                             // 0x0038(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    ShortcutEnterMesh;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>              ShortcutExitMaterial;                              // 0x0058(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    ShortcutExitMesh;                                  // 0x0068(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceStageRingGateData) == 0x000008, "Wrong alignment on FUnionRaceStageRingGateData");
static_assert(sizeof(FUnionRaceStageRingGateData) == 0x000078, "Wrong size on FUnionRaceStageRingGateData");
static_assert(offsetof(FUnionRaceStageRingGateData, FloorLeft) == 0x000000, "Member 'FUnionRaceStageRingGateData::FloorLeft' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageRingGateData, FloorRight) == 0x000008, "Member 'FUnionRaceStageRingGateData::FloorRight' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageRingGateData, RingLeft) == 0x000010, "Member 'FUnionRaceStageRingGateData::RingLeft' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageRingGateData, RingRight) == 0x000018, "Member 'FUnionRaceStageRingGateData::RingRight' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageRingGateData, MaterialEnter) == 0x000020, "Member 'FUnionRaceStageRingGateData::MaterialEnter' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageRingGateData, MaterialEnterAir) == 0x000028, "Member 'FUnionRaceStageRingGateData::MaterialEnterAir' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageRingGateData, MaterialExit) == 0x000030, "Member 'FUnionRaceStageRingGateData::MaterialExit' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageRingGateData, ShortcutEnterMaterial) == 0x000038, "Member 'FUnionRaceStageRingGateData::ShortcutEnterMaterial' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageRingGateData, ShortcutEnterMesh) == 0x000048, "Member 'FUnionRaceStageRingGateData::ShortcutEnterMesh' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageRingGateData, ShortcutExitMaterial) == 0x000058, "Member 'FUnionRaceStageRingGateData::ShortcutExitMaterial' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageRingGateData, ShortcutExitMesh) == 0x000068, "Member 'FUnionRaceStageRingGateData::ShortcutExitMesh' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceStageDynamicData
// 0x0070 (0x0070 - 0x0000)
struct FUnionRaceStageDynamicData final
{
public:
	TArray<class ULevel*>                         ObjectLevels;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UUnionBtCollisionBinaryAsset*           CollisionAsset;                                    // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionNavigationBinaryDataAsset*        NavigationAsset;                                   // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionRunPathBinaryDataAsset*           RunPathAsset;                                      // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnionComPathBinaryDataAsset*           ComPathAsset;                                      // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOverwriteDirectionalLightParameter;            // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverwriteDirectionalLightIntensity;                // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OverwriteDirectionalLightColor;                    // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x34];                                      // 0x003C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionRaceStageDynamicData) == 0x000008, "Wrong alignment on FUnionRaceStageDynamicData");
static_assert(sizeof(FUnionRaceStageDynamicData) == 0x000070, "Wrong size on FUnionRaceStageDynamicData");
static_assert(offsetof(FUnionRaceStageDynamicData, ObjectLevels) == 0x000000, "Member 'FUnionRaceStageDynamicData::ObjectLevels' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageDynamicData, CollisionAsset) == 0x000010, "Member 'FUnionRaceStageDynamicData::CollisionAsset' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageDynamicData, NavigationAsset) == 0x000018, "Member 'FUnionRaceStageDynamicData::NavigationAsset' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageDynamicData, RunPathAsset) == 0x000020, "Member 'FUnionRaceStageDynamicData::RunPathAsset' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageDynamicData, ComPathAsset) == 0x000028, "Member 'FUnionRaceStageDynamicData::ComPathAsset' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageDynamicData, bUseOverwriteDirectionalLightParameter) == 0x000030, "Member 'FUnionRaceStageDynamicData::bUseOverwriteDirectionalLightParameter' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageDynamicData, OverwriteDirectionalLightIntensity) == 0x000034, "Member 'FUnionRaceStageDynamicData::OverwriteDirectionalLightIntensity' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageDynamicData, OverwriteDirectionalLightColor) == 0x000038, "Member 'FUnionRaceStageDynamicData::OverwriteDirectionalLightColor' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceStageData
// 0x0168 (0x0168 - 0x0000)
struct FUnionRaceStageData final
{
public:
	struct FUnionRaceStageRingGateData            RingGateData;                                      // 0x0000(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUnionRaceStageDynamicData             BasicLapData;                                      // 0x0078(0x0070)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUnionRaceStageDynamicData             FinalLapData;                                      // 0x00E8(0x0070)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class ULevel*>                         OtherLevels;                                       // 0x0158(0x0010)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceStageData) == 0x000008, "Wrong alignment on FUnionRaceStageData");
static_assert(sizeof(FUnionRaceStageData) == 0x000168, "Wrong size on FUnionRaceStageData");
static_assert(offsetof(FUnionRaceStageData, RingGateData) == 0x000000, "Member 'FUnionRaceStageData::RingGateData' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageData, BasicLapData) == 0x000078, "Member 'FUnionRaceStageData::BasicLapData' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageData, FinalLapData) == 0x0000E8, "Member 'FUnionRaceStageData::FinalLapData' has a wrong offset!");
static_assert(offsetof(FUnionRaceStageData, OtherLevels) == 0x000158, "Member 'FUnionRaceStageData::OtherLevels' has a wrong offset!");

// ScriptStruct UnionRun.GadgetEnhanceBombInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetEnhanceBombInfo final
{
public:
	float                                         ShortenRatio;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetEnhanceBombInfo) == 0x000004, "Wrong alignment on FGadgetEnhanceBombInfo");
static_assert(sizeof(FGadgetEnhanceBombInfo) == 0x000004, "Wrong size on FGadgetEnhanceBombInfo");
static_assert(offsetof(FGadgetEnhanceBombInfo, ShortenRatio) == 0x000000, "Member 'FGadgetEnhanceBombInfo::ShortenRatio' has a wrong offset!");

// ScriptStruct UnionRun.GadgetDoubleItemOccasionallyInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetDoubleItemOccasionallyInfo final
{
public:
	float                                         DoubleRatio;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetDoubleItemOccasionallyInfo) == 0x000004, "Wrong alignment on FGadgetDoubleItemOccasionallyInfo");
static_assert(sizeof(FGadgetDoubleItemOccasionallyInfo) == 0x000004, "Wrong size on FGadgetDoubleItemOccasionallyInfo");
static_assert(offsetof(FGadgetDoubleItemOccasionallyInfo, DoubleRatio) == 0x000000, "Member 'FGadgetDoubleItemOccasionallyInfo::DoubleRatio' has a wrong offset!");

// ScriptStruct UnionRun.TargetedByItemDataSet
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FTargetedByItemDataSet final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTargetedByItemDataSet) == 0x000008, "Wrong alignment on FTargetedByItemDataSet");
static_assert(sizeof(FTargetedByItemDataSet) == 0x000040, "Wrong size on FTargetedByItemDataSet");

// ScriptStruct UnionRun.GadgetUltimateDriftInfo
// 0x0008 (0x0008 - 0x0000)
struct FGadgetUltimateDriftInfo final
{
public:
	bool                                          bEnableInvincible;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InvincibleTime;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetUltimateDriftInfo) == 0x000004, "Wrong alignment on FGadgetUltimateDriftInfo");
static_assert(sizeof(FGadgetUltimateDriftInfo) == 0x000008, "Wrong size on FGadgetUltimateDriftInfo");
static_assert(offsetof(FGadgetUltimateDriftInfo, bEnableInvincible) == 0x000000, "Member 'FGadgetUltimateDriftInfo::bEnableInvincible' has a wrong offset!");
static_assert(offsetof(FGadgetUltimateDriftInfo, InvincibleTime) == 0x000004, "Member 'FGadgetUltimateDriftInfo::InvincibleTime' has a wrong offset!");

// ScriptStruct UnionRun.GadgetQuickAirtrickInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetQuickAirtrickInfo final
{
public:
	float                                         AirTrickPlayRate;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetQuickAirtrickInfo) == 0x000004, "Wrong alignment on FGadgetQuickAirtrickInfo");
static_assert(sizeof(FGadgetQuickAirtrickInfo) == 0x000004, "Wrong size on FGadgetQuickAirtrickInfo");
static_assert(offsetof(FGadgetQuickAirtrickInfo, AirTrickPlayRate) == 0x000000, "Member 'FGadgetQuickAirtrickInfo::AirTrickPlayRate' has a wrong offset!");

// ScriptStruct UnionRun.SwingCameraTrigger
// 0x000C (0x000C - 0x0000)
struct FSwingCameraTrigger final
{
public:
	bool                                          bAirValid;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandingValid;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InElapsedRatio;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutElapsedRatio;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSwingCameraTrigger) == 0x000004, "Wrong alignment on FSwingCameraTrigger");
static_assert(sizeof(FSwingCameraTrigger) == 0x00000C, "Wrong size on FSwingCameraTrigger");
static_assert(offsetof(FSwingCameraTrigger, bAirValid) == 0x000000, "Member 'FSwingCameraTrigger::bAirValid' has a wrong offset!");
static_assert(offsetof(FSwingCameraTrigger, bLandingValid) == 0x000001, "Member 'FSwingCameraTrigger::bLandingValid' has a wrong offset!");
static_assert(offsetof(FSwingCameraTrigger, InElapsedRatio) == 0x000004, "Member 'FSwingCameraTrigger::InElapsedRatio' has a wrong offset!");
static_assert(offsetof(FSwingCameraTrigger, OutElapsedRatio) == 0x000008, "Member 'FSwingCameraTrigger::OutElapsedRatio' has a wrong offset!");

// ScriptStruct UnionRun.SwingCameraUnitPreset
// 0x0040 (0x0040 - 0x0000)
struct FSwingCameraUnitPreset final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSwingCameraTrigger                    SuperDistance;                                     // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraParamTable                      CameraParams;                                      // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSwingCameraUnitPreset) == 0x000008, "Wrong alignment on FSwingCameraUnitPreset");
static_assert(sizeof(FSwingCameraUnitPreset) == 0x000040, "Wrong size on FSwingCameraUnitPreset");
static_assert(offsetof(FSwingCameraUnitPreset, bValid) == 0x000000, "Member 'FSwingCameraUnitPreset::bValid' has a wrong offset!");
static_assert(offsetof(FSwingCameraUnitPreset, SuperDistance) == 0x000004, "Member 'FSwingCameraUnitPreset::SuperDistance' has a wrong offset!");
static_assert(offsetof(FSwingCameraUnitPreset, CameraParams) == 0x000010, "Member 'FSwingCameraUnitPreset::CameraParams' has a wrong offset!");

// ScriptStruct UnionRun.GadgetSkateDriftInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetSkateDriftInfo final
{
public:
	float                                         ChargeTimeRatio;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetSkateDriftInfo) == 0x000004, "Wrong alignment on FGadgetSkateDriftInfo");
static_assert(sizeof(FGadgetSkateDriftInfo) == 0x000004, "Wrong size on FGadgetSkateDriftInfo");
static_assert(offsetof(FGadgetSkateDriftInfo, ChargeTimeRatio) == 0x000000, "Member 'FGadgetSkateDriftInfo::ChargeTimeRatio' has a wrong offset!");

// ScriptStruct UnionRun.GadgetJustDashInfo
// 0x0014 (0x0014 - 0x0000)
struct FGadgetJustDashInfo final
{
public:
	int32                                         InputFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostMulLv1;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostMulLv2;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostMulLv3;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostMulLv4;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetJustDashInfo) == 0x000004, "Wrong alignment on FGadgetJustDashInfo");
static_assert(sizeof(FGadgetJustDashInfo) == 0x000014, "Wrong size on FGadgetJustDashInfo");
static_assert(offsetof(FGadgetJustDashInfo, InputFrame) == 0x000000, "Member 'FGadgetJustDashInfo::InputFrame' has a wrong offset!");
static_assert(offsetof(FGadgetJustDashInfo, BoostMulLv1) == 0x000004, "Member 'FGadgetJustDashInfo::BoostMulLv1' has a wrong offset!");
static_assert(offsetof(FGadgetJustDashInfo, BoostMulLv2) == 0x000008, "Member 'FGadgetJustDashInfo::BoostMulLv2' has a wrong offset!");
static_assert(offsetof(FGadgetJustDashInfo, BoostMulLv3) == 0x00000C, "Member 'FGadgetJustDashInfo::BoostMulLv3' has a wrong offset!");
static_assert(offsetof(FGadgetJustDashInfo, BoostMulLv4) == 0x000010, "Member 'FGadgetJustDashInfo::BoostMulLv4' has a wrong offset!");

// ScriptStruct UnionRun.MinimapIconInfoRow
// 0x0010 (0x0010 - 0x0000)
struct FMinimapIconInfoRow final
{
public:
	class FString                                 IconTexturePath;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinimapIconInfoRow) == 0x000008, "Wrong alignment on FMinimapIconInfoRow");
static_assert(sizeof(FMinimapIconInfoRow) == 0x000010, "Wrong size on FMinimapIconInfoRow");
static_assert(offsetof(FMinimapIconInfoRow, IconTexturePath) == 0x000000, "Member 'FMinimapIconInfoRow::IconTexturePath' has a wrong offset!");

// ScriptStruct UnionRun.GadgetLevelChargeInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetLevelChargeInfo final
{
public:
	float                                         ChargeRate;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetLevelChargeInfo) == 0x000004, "Wrong alignment on FGadgetLevelChargeInfo");
static_assert(sizeof(FGadgetLevelChargeInfo) == 0x000004, "Wrong size on FGadgetLevelChargeInfo");
static_assert(offsetof(FGadgetLevelChargeInfo, ChargeRate) == 0x000000, "Member 'FGadgetLevelChargeInfo::ChargeRate' has a wrong offset!");

// ScriptStruct UnionRun.GadgetSwitchDriftQuickChargeInfo
// 0x000C (0x000C - 0x0000)
struct FGadgetSwitchDriftQuickChargeInfo final
{
public:
	float                                         CoolDownTime;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeUpSeconds;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeMul;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetSwitchDriftQuickChargeInfo) == 0x000004, "Wrong alignment on FGadgetSwitchDriftQuickChargeInfo");
static_assert(sizeof(FGadgetSwitchDriftQuickChargeInfo) == 0x00000C, "Wrong size on FGadgetSwitchDriftQuickChargeInfo");
static_assert(offsetof(FGadgetSwitchDriftQuickChargeInfo, CoolDownTime) == 0x000000, "Member 'FGadgetSwitchDriftQuickChargeInfo::CoolDownTime' has a wrong offset!");
static_assert(offsetof(FGadgetSwitchDriftQuickChargeInfo, ChargeUpSeconds) == 0x000004, "Member 'FGadgetSwitchDriftQuickChargeInfo::ChargeUpSeconds' has a wrong offset!");
static_assert(offsetof(FGadgetSwitchDriftQuickChargeInfo, ChargeMul) == 0x000008, "Member 'FGadgetSwitchDriftQuickChargeInfo::ChargeMul' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceRedStarRingParam
// 0x0018 (0x0018 - 0x0000)
struct FUnionRaceRedStarRingParam final
{
public:
	bool                                          bEnableRedStarRing;                                // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUserRedStarRingAcquisitionProperty> AcquisitionPerPlayer;                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceRedStarRingParam) == 0x000008, "Wrong alignment on FUnionRaceRedStarRingParam");
static_assert(sizeof(FUnionRaceRedStarRingParam) == 0x000018, "Wrong size on FUnionRaceRedStarRingParam");
static_assert(offsetof(FUnionRaceRedStarRingParam, bEnableRedStarRing) == 0x000000, "Member 'FUnionRaceRedStarRingParam::bEnableRedStarRing' has a wrong offset!");
static_assert(offsetof(FUnionRaceRedStarRingParam, AcquisitionPerPlayer) == 0x000008, "Member 'FUnionRaceRedStarRingParam::AcquisitionPerPlayer' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceDomainData
// 0x01B0 (0x01B0 - 0x0000)
struct FUnionRaceDomainData final
{
public:
	struct FUnionRaceDomainInfo                   DomainInfo;                                        // 0x0000(0x0048)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUnionRaceStageData                    StageData;                                         // 0x0048(0x0168)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceDomainData) == 0x000008, "Wrong alignment on FUnionRaceDomainData");
static_assert(sizeof(FUnionRaceDomainData) == 0x0001B0, "Wrong size on FUnionRaceDomainData");
static_assert(offsetof(FUnionRaceDomainData, DomainInfo) == 0x000000, "Member 'FUnionRaceDomainData::DomainInfo' has a wrong offset!");
static_assert(offsetof(FUnionRaceDomainData, StageData) == 0x000048, "Member 'FUnionRaceDomainData::StageData' has a wrong offset!");

// ScriptStruct UnionRun.UnionRacePreCreateParam
// 0x0040 (0x0040 - 0x0000)
struct FUnionRacePreCreateParam final
{
public:
	ERaceType                                     RaceType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrandPrixId                                  GrandPrixId;                                       // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnionRaceRedStarRingParam             RedStarRingParam;                                  // 0x0008(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FUnionRaceDomainData>           DomainDataList;                                    // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         BackgroundLevelNameList;                           // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRacePreCreateParam) == 0x000008, "Wrong alignment on FUnionRacePreCreateParam");
static_assert(sizeof(FUnionRacePreCreateParam) == 0x000040, "Wrong size on FUnionRacePreCreateParam");
static_assert(offsetof(FUnionRacePreCreateParam, RaceType) == 0x000000, "Member 'FUnionRacePreCreateParam::RaceType' has a wrong offset!");
static_assert(offsetof(FUnionRacePreCreateParam, GrandPrixId) == 0x000001, "Member 'FUnionRacePreCreateParam::GrandPrixId' has a wrong offset!");
static_assert(offsetof(FUnionRacePreCreateParam, RedStarRingParam) == 0x000008, "Member 'FUnionRacePreCreateParam::RedStarRingParam' has a wrong offset!");
static_assert(offsetof(FUnionRacePreCreateParam, DomainDataList) == 0x000020, "Member 'FUnionRacePreCreateParam::DomainDataList' has a wrong offset!");
static_assert(offsetof(FUnionRacePreCreateParam, BackgroundLevelNameList) == 0x000030, "Member 'FUnionRacePreCreateParam::BackgroundLevelNameList' has a wrong offset!");

// ScriptStruct UnionRun.GadgetHyperChargeInfo
// 0x000C (0x000C - 0x0000)
struct FGadgetHyperChargeInfo final
{
public:
	float                                         DeccelSpeed;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeccelRate;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeRate;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetHyperChargeInfo) == 0x000004, "Wrong alignment on FGadgetHyperChargeInfo");
static_assert(sizeof(FGadgetHyperChargeInfo) == 0x00000C, "Wrong size on FGadgetHyperChargeInfo");
static_assert(offsetof(FGadgetHyperChargeInfo, DeccelSpeed) == 0x000000, "Member 'FGadgetHyperChargeInfo::DeccelSpeed' has a wrong offset!");
static_assert(offsetof(FGadgetHyperChargeInfo, DeccelRate) == 0x000004, "Member 'FGadgetHyperChargeInfo::DeccelRate' has a wrong offset!");
static_assert(offsetof(FGadgetHyperChargeInfo, ChargeRate) == 0x000008, "Member 'FGadgetHyperChargeInfo::ChargeRate' has a wrong offset!");

// ScriptStruct UnionRun.GadgetSpinDriftInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetSpinDriftInfo final
{
public:
	int32                                         Power;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetSpinDriftInfo) == 0x000004, "Wrong alignment on FGadgetSpinDriftInfo");
static_assert(sizeof(FGadgetSpinDriftInfo) == 0x000004, "Wrong size on FGadgetSpinDriftInfo");
static_assert(offsetof(FGadgetSpinDriftInfo, Power) == 0x000000, "Member 'FGadgetSpinDriftInfo::Power' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceTickObjectData
// 0x0030 (0x0030 - 0x0000)
struct FUnionRaceTickObjectData final
{
public:
	TArray<class ASkeletalMeshActor*>             SkeletalActors;                                    // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class USimpleAnimationComponent*>      SimpleAnimComponents;                              // 0x0010(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionRaceTickObjectData) == 0x000008, "Wrong alignment on FUnionRaceTickObjectData");
static_assert(sizeof(FUnionRaceTickObjectData) == 0x000030, "Wrong size on FUnionRaceTickObjectData");
static_assert(offsetof(FUnionRaceTickObjectData, SkeletalActors) == 0x000000, "Member 'FUnionRaceTickObjectData::SkeletalActors' has a wrong offset!");
static_assert(offsetof(FUnionRaceTickObjectData, SimpleAnimComponents) == 0x000010, "Member 'FUnionRaceTickObjectData::SimpleAnimComponents' has a wrong offset!");

// ScriptStruct UnionRun.GadgetShortenDamageMotionInfo
// 0x0008 (0x0008 - 0x0000)
struct FGadgetShortenDamageMotionInfo final
{
public:
	float                                         ShortenRatio;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortenRatioNormalDamage;                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetShortenDamageMotionInfo) == 0x000004, "Wrong alignment on FGadgetShortenDamageMotionInfo");
static_assert(sizeof(FGadgetShortenDamageMotionInfo) == 0x000008, "Wrong size on FGadgetShortenDamageMotionInfo");
static_assert(offsetof(FGadgetShortenDamageMotionInfo, ShortenRatio) == 0x000000, "Member 'FGadgetShortenDamageMotionInfo::ShortenRatio' has a wrong offset!");
static_assert(offsetof(FGadgetShortenDamageMotionInfo, ShortenRatioNormalDamage) == 0x000004, "Member 'FGadgetShortenDamageMotionInfo::ShortenRatioNormalDamage' has a wrong offset!");

// ScriptStruct UnionRun.GadgetMachineTuneInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FGadgetMachineTuneInfo final
{
public:
	struct FGadgetMachineTuneValueChange          MachineTuneDefault;                                // 0x0000(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ECarStatusType, struct FGadgetMachineTuneValueChange> MachineTuneByCarStatusType;           // 0x0018(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EDriverType, struct FGadgetMachineTuneValueChange> MachineTuneByDriverType;                 // 0x0068(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetMachineTuneInfo) == 0x000008, "Wrong alignment on FGadgetMachineTuneInfo");
static_assert(sizeof(FGadgetMachineTuneInfo) == 0x0000B8, "Wrong size on FGadgetMachineTuneInfo");
static_assert(offsetof(FGadgetMachineTuneInfo, MachineTuneDefault) == 0x000000, "Member 'FGadgetMachineTuneInfo::MachineTuneDefault' has a wrong offset!");
static_assert(offsetof(FGadgetMachineTuneInfo, MachineTuneByCarStatusType) == 0x000018, "Member 'FGadgetMachineTuneInfo::MachineTuneByCarStatusType' has a wrong offset!");
static_assert(offsetof(FGadgetMachineTuneInfo, MachineTuneByDriverType) == 0x000068, "Member 'FGadgetMachineTuneInfo::MachineTuneByDriverType' has a wrong offset!");

// ScriptStruct UnionRun.GadgetTouchDashInfo
// 0x000C (0x000C - 0x0000)
struct FGadgetTouchDashInfo final
{
public:
	int32                                         BoostLevel;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostSeconds;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostMul;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetTouchDashInfo) == 0x000004, "Wrong alignment on FGadgetTouchDashInfo");
static_assert(sizeof(FGadgetTouchDashInfo) == 0x00000C, "Wrong size on FGadgetTouchDashInfo");
static_assert(offsetof(FGadgetTouchDashInfo, BoostLevel) == 0x000000, "Member 'FGadgetTouchDashInfo::BoostLevel' has a wrong offset!");
static_assert(offsetof(FGadgetTouchDashInfo, BoostSeconds) == 0x000004, "Member 'FGadgetTouchDashInfo::BoostSeconds' has a wrong offset!");
static_assert(offsetof(FGadgetTouchDashInfo, BoostMul) == 0x000008, "Member 'FGadgetTouchDashInfo::BoostMul' has a wrong offset!");

// ScriptStruct UnionRun.GadgetEnforceSlipstreamInfo
// 0x000C (0x000C - 0x0000)
struct FGadgetEnforceSlipstreamInfo final
{
public:
	float                                         CheckSphereUP;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameUP;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AfterGlowUP;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetEnforceSlipstreamInfo) == 0x000004, "Wrong alignment on FGadgetEnforceSlipstreamInfo");
static_assert(sizeof(FGadgetEnforceSlipstreamInfo) == 0x00000C, "Wrong size on FGadgetEnforceSlipstreamInfo");
static_assert(offsetof(FGadgetEnforceSlipstreamInfo, CheckSphereUP) == 0x000000, "Member 'FGadgetEnforceSlipstreamInfo::CheckSphereUP' has a wrong offset!");
static_assert(offsetof(FGadgetEnforceSlipstreamInfo, FrameUP) == 0x000004, "Member 'FGadgetEnforceSlipstreamInfo::FrameUP' has a wrong offset!");
static_assert(offsetof(FGadgetEnforceSlipstreamInfo, AfterGlowUP) == 0x000008, "Member 'FGadgetEnforceSlipstreamInfo::AfterGlowUP' has a wrong offset!");

// ScriptStruct UnionRun.GadgetImmuneItemDamageOnceInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetImmuneItemDamageOnceInfo final
{
public:
	float                                         ActiveTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetImmuneItemDamageOnceInfo) == 0x000004, "Wrong alignment on FGadgetImmuneItemDamageOnceInfo");
static_assert(sizeof(FGadgetImmuneItemDamageOnceInfo) == 0x000004, "Wrong size on FGadgetImmuneItemDamageOnceInfo");
static_assert(offsetof(FGadgetImmuneItemDamageOnceInfo, ActiveTime) == 0x000000, "Member 'FGadgetImmuneItemDamageOnceInfo::ActiveTime' has a wrong offset!");

// ScriptStruct UnionRun.GadgetUpperLimitInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetUpperLimitInfo final
{
public:
	int32                                         RingNum;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetUpperLimitInfo) == 0x000004, "Wrong alignment on FGadgetUpperLimitInfo");
static_assert(sizeof(FGadgetUpperLimitInfo) == 0x000004, "Wrong size on FGadgetUpperLimitInfo");
static_assert(offsetof(FGadgetUpperLimitInfo, RingNum) == 0x000000, "Member 'FGadgetUpperLimitInfo::RingNum' has a wrong offset!");

// ScriptStruct UnionRun.GadgetStoleInfo
// 0x0008 (0x0008 - 0x0000)
struct FGadgetStoleInfo final
{
public:
	int32                                         RingNum;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolDownTime;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetStoleInfo) == 0x000004, "Wrong alignment on FGadgetStoleInfo");
static_assert(sizeof(FGadgetStoleInfo) == 0x000008, "Wrong size on FGadgetStoleInfo");
static_assert(offsetof(FGadgetStoleInfo, RingNum) == 0x000000, "Member 'FGadgetStoleInfo::RingNum' has a wrong offset!");
static_assert(offsetof(FGadgetStoleInfo, CoolDownTime) == 0x000004, "Member 'FGadgetStoleInfo::CoolDownTime' has a wrong offset!");

// ScriptStruct UnionRun.GadgetGuardInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetGuardInfo final
{
public:
	float                                         ReduceDamageRatio;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetGuardInfo) == 0x000004, "Wrong alignment on FGadgetGuardInfo");
static_assert(sizeof(FGadgetGuardInfo) == 0x000004, "Wrong size on FGadgetGuardInfo");
static_assert(offsetof(FGadgetGuardInfo, ReduceDamageRatio) == 0x000000, "Member 'FGadgetGuardInfo::ReduceDamageRatio' has a wrong offset!");

// ScriptStruct UnionRun.GadgetExpandGetRingRangeInfo
// 0x0008 (0x0008 - 0x0000)
struct FGadgetExpandGetRingRangeInfo final
{
public:
	float                                         CollisionRadiusMag;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionHeightMag;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetExpandGetRingRangeInfo) == 0x000004, "Wrong alignment on FGadgetExpandGetRingRangeInfo");
static_assert(sizeof(FGadgetExpandGetRingRangeInfo) == 0x000008, "Wrong size on FGadgetExpandGetRingRangeInfo");
static_assert(offsetof(FGadgetExpandGetRingRangeInfo, CollisionRadiusMag) == 0x000000, "Member 'FGadgetExpandGetRingRangeInfo::CollisionRadiusMag' has a wrong offset!");
static_assert(offsetof(FGadgetExpandGetRingRangeInfo, CollisionHeightMag) == 0x000004, "Member 'FGadgetExpandGetRingRangeInfo::CollisionHeightMag' has a wrong offset!");

// ScriptStruct UnionRun.GadgetEnhanceHookTurnInfo
// 0x0010 (0x0010 - 0x0000)
struct FGadgetEnhanceHookTurnInfo final
{
public:
	float                                         StartDegreeOffset_Horizontal;                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDegreeOffset_Vertical;                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddAngularVelocity_Horizontal;                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddAngularVelocity_Vertical;                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetEnhanceHookTurnInfo) == 0x000004, "Wrong alignment on FGadgetEnhanceHookTurnInfo");
static_assert(sizeof(FGadgetEnhanceHookTurnInfo) == 0x000010, "Wrong size on FGadgetEnhanceHookTurnInfo");
static_assert(offsetof(FGadgetEnhanceHookTurnInfo, StartDegreeOffset_Horizontal) == 0x000000, "Member 'FGadgetEnhanceHookTurnInfo::StartDegreeOffset_Horizontal' has a wrong offset!");
static_assert(offsetof(FGadgetEnhanceHookTurnInfo, StartDegreeOffset_Vertical) == 0x000004, "Member 'FGadgetEnhanceHookTurnInfo::StartDegreeOffset_Vertical' has a wrong offset!");
static_assert(offsetof(FGadgetEnhanceHookTurnInfo, AddAngularVelocity_Horizontal) == 0x000008, "Member 'FGadgetEnhanceHookTurnInfo::AddAngularVelocity_Horizontal' has a wrong offset!");
static_assert(offsetof(FGadgetEnhanceHookTurnInfo, AddAngularVelocity_Vertical) == 0x00000C, "Member 'FGadgetEnhanceHookTurnInfo::AddAngularVelocity_Vertical' has a wrong offset!");

// ScriptStruct UnionRun.GadgetItemNumInfo
// 0x0004 (0x0004 - 0x0000)
struct FGadgetItemNumInfo final
{
public:
	int32                                         itemNum;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetItemNumInfo) == 0x000004, "Wrong alignment on FGadgetItemNumInfo");
static_assert(sizeof(FGadgetItemNumInfo) == 0x000004, "Wrong size on FGadgetItemNumInfo");
static_assert(offsetof(FGadgetItemNumInfo, itemNum) == 0x000000, "Member 'FGadgetItemNumInfo::itemNum' has a wrong offset!");

// ScriptStruct UnionRun.GadgetLowRankRingBonusInfo
// 0x0020 (0x0020 - 0x0000)
struct FGadgetLowRankRingBonusInfo final
{
public:
	TArray<int32>                                 GetRingNum;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 GetRingInterval;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetLowRankRingBonusInfo) == 0x000008, "Wrong alignment on FGadgetLowRankRingBonusInfo");
static_assert(sizeof(FGadgetLowRankRingBonusInfo) == 0x000020, "Wrong size on FGadgetLowRankRingBonusInfo");
static_assert(offsetof(FGadgetLowRankRingBonusInfo, GetRingNum) == 0x000000, "Member 'FGadgetLowRankRingBonusInfo::GetRingNum' has a wrong offset!");
static_assert(offsetof(FGadgetLowRankRingBonusInfo, GetRingInterval) == 0x000010, "Member 'FGadgetLowRankRingBonusInfo::GetRingInterval' has a wrong offset!");

// ScriptStruct UnionRun.GadgetIDCRM
// 0x0008 (0x0010 - 0x0008)
struct FGadgetIDCRM final : public FTableRowBase
{
public:
	EGadgetId                                     gadgetId;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CRMID;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetIDCRM) == 0x000008, "Wrong alignment on FGadgetIDCRM");
static_assert(sizeof(FGadgetIDCRM) == 0x000010, "Wrong size on FGadgetIDCRM");
static_assert(offsetof(FGadgetIDCRM, gadgetId) == 0x000008, "Member 'FGadgetIDCRM::gadgetId' has a wrong offset!");
static_assert(offsetof(FGadgetIDCRM, CRMID) == 0x00000C, "Member 'FGadgetIDCRM::CRMID' has a wrong offset!");

// ScriptStruct UnionRun.GimmickCurringParameter
// 0x0028 (0x0030 - 0x0008)
struct FGimmickCurringParameter final : public FTableRowBase
{
public:
	EStageId                                      StageId;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ItemBoxCurringDistance;                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RingCurringDistance;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PackageRingCurringDistance;                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemBoxSplit2Rate;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemBoxSplit4Rate;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RingSplit2Rate;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RingSplit4Rate;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PackageRingSplit2Rate;                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PackageRingSplit4Rate;                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGimmickCurringParameter) == 0x000008, "Wrong alignment on FGimmickCurringParameter");
static_assert(sizeof(FGimmickCurringParameter) == 0x000030, "Wrong size on FGimmickCurringParameter");
static_assert(offsetof(FGimmickCurringParameter, StageId) == 0x000008, "Member 'FGimmickCurringParameter::StageId' has a wrong offset!");
static_assert(offsetof(FGimmickCurringParameter, ItemBoxCurringDistance) == 0x00000C, "Member 'FGimmickCurringParameter::ItemBoxCurringDistance' has a wrong offset!");
static_assert(offsetof(FGimmickCurringParameter, RingCurringDistance) == 0x000010, "Member 'FGimmickCurringParameter::RingCurringDistance' has a wrong offset!");
static_assert(offsetof(FGimmickCurringParameter, PackageRingCurringDistance) == 0x000014, "Member 'FGimmickCurringParameter::PackageRingCurringDistance' has a wrong offset!");
static_assert(offsetof(FGimmickCurringParameter, ItemBoxSplit2Rate) == 0x000018, "Member 'FGimmickCurringParameter::ItemBoxSplit2Rate' has a wrong offset!");
static_assert(offsetof(FGimmickCurringParameter, ItemBoxSplit4Rate) == 0x00001C, "Member 'FGimmickCurringParameter::ItemBoxSplit4Rate' has a wrong offset!");
static_assert(offsetof(FGimmickCurringParameter, RingSplit2Rate) == 0x000020, "Member 'FGimmickCurringParameter::RingSplit2Rate' has a wrong offset!");
static_assert(offsetof(FGimmickCurringParameter, RingSplit4Rate) == 0x000024, "Member 'FGimmickCurringParameter::RingSplit4Rate' has a wrong offset!");
static_assert(offsetof(FGimmickCurringParameter, PackageRingSplit2Rate) == 0x000028, "Member 'FGimmickCurringParameter::PackageRingSplit2Rate' has a wrong offset!");
static_assert(offsetof(FGimmickCurringParameter, PackageRingSplit4Rate) == 0x00002C, "Member 'FGimmickCurringParameter::PackageRingSplit4Rate' has a wrong offset!");

// ScriptStruct UnionRun.HitInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FHitInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitInfo) == 0x000004, "Wrong alignment on FHitInfo");
static_assert(sizeof(FHitInfo) == 0x000008, "Wrong size on FHitInfo");

// ScriptStruct UnionRun.GroupRingInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FGroupRingInfo final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupRingCount;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupTotalGetRingCount;                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            RacersRingCountList;                               // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, int32>                            RacersTotalGetRingCountList;                       // 0x0060(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupRingInfo) == 0x000008, "Wrong alignment on FGroupRingInfo");
static_assert(sizeof(FGroupRingInfo) == 0x0000B0, "Wrong size on FGroupRingInfo");
static_assert(offsetof(FGroupRingInfo, GroupIndex) == 0x000000, "Member 'FGroupRingInfo::GroupIndex' has a wrong offset!");
static_assert(offsetof(FGroupRingInfo, GroupRingCount) == 0x000004, "Member 'FGroupRingInfo::GroupRingCount' has a wrong offset!");
static_assert(offsetof(FGroupRingInfo, GroupTotalGetRingCount) == 0x000008, "Member 'FGroupRingInfo::GroupTotalGetRingCount' has a wrong offset!");
static_assert(offsetof(FGroupRingInfo, RacersRingCountList) == 0x000010, "Member 'FGroupRingInfo::RacersRingCountList' has a wrong offset!");
static_assert(offsetof(FGroupRingInfo, RacersTotalGetRingCountList) == 0x000060, "Member 'FGroupRingInfo::RacersTotalGetRingCountList' has a wrong offset!");

// ScriptStruct UnionRun.GroupBattleResult
// 0x0018 (0x0018 - 0x0000)
struct FGroupBattleResult final
{
public:
	EGroupBonusType                               BonusType;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGroupBattlePersonalResult>     PersonalResultList;                                // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupBattleResult) == 0x000008, "Wrong alignment on FGroupBattleResult");
static_assert(sizeof(FGroupBattleResult) == 0x000018, "Wrong size on FGroupBattleResult");
static_assert(offsetof(FGroupBattleResult, BonusType) == 0x000000, "Member 'FGroupBattleResult::BonusType' has a wrong offset!");
static_assert(offsetof(FGroupBattleResult, PersonalResultList) == 0x000008, "Member 'FGroupBattleResult::PersonalResultList' has a wrong offset!");

// ScriptStruct UnionRun.TeamBoostSecondData
// 0x0008 (0x0010 - 0x0008)
struct FTeamBoostSecondData final : public FTableRowBase
{
public:
	float                                         DistanceFromTop;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostSeconds;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamBoostSecondData) == 0x000008, "Wrong alignment on FTeamBoostSecondData");
static_assert(sizeof(FTeamBoostSecondData) == 0x000010, "Wrong size on FTeamBoostSecondData");
static_assert(offsetof(FTeamBoostSecondData, DistanceFromTop) == 0x000008, "Member 'FTeamBoostSecondData::DistanceFromTop' has a wrong offset!");
static_assert(offsetof(FTeamBoostSecondData, BoostSeconds) == 0x00000C, "Member 'FTeamBoostSecondData::BoostSeconds' has a wrong offset!");

// ScriptStruct UnionRun.TeamBoostData
// 0x00A8 (0x00B0 - 0x0008)
struct FTeamBoostData final : public FTableRowBase
{
public:
	EGameModeId                                   GameMode;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GroupCount;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThresholdCount;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostLevel;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostMul;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamNearConnectThickness;                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamFarConnectThickness;                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyChargeDist;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CatchUpMinDist;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CatchUpMaxDist;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CatchUpSpeed;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CatchUpAccelMul;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCOMCatchUpSpeedInterp;                      // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCOMCatchUpAccelInterp;                      // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FriendCOMCatchUpMinDist;                           // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FriendCOMCatchUpMaxDist;                           // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FriendCOMCatchUpSpeed;                             // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FriendCOMCatchUpAccelMul;                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyCOMCatchUpMinDist;                            // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyCOMCatchUpMaxDist;                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyCOMCatchUpSpeed;                              // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyCOMCatchUpAccelMul;                           // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamTouchDash_BoostLevel;                          // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamTouchDash_BoostSeconds;                        // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamTouchDash_BoostMul;                            // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamTouchDash_CoolDownSeconds;                     // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AscentGaugeSpeed;                                  // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTeamBoostSecondData>           BoostSecondList;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AddEnergyValueByItemHit;                           // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddEnergyValueByAllTouchDash;                      // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddEnergyValueByTouchDash;                         // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddEnergyValueByDriftDash;                         // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddEnergyValueByAirTrick;                          // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddEnergyValueByDashPanel;                         // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddEnergyValueByDriftCharge;                       // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddEnergyValueByRing;                              // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddEnergyValueBySlipstream;                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddEnergyValueBySpinDrift;                         // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddEnergyValueByDriftJustDash;                     // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddEnergyValueByOddNumRank;                        // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamBoostData) == 0x000008, "Wrong alignment on FTeamBoostData");
static_assert(sizeof(FTeamBoostData) == 0x0000B0, "Wrong size on FTeamBoostData");
static_assert(offsetof(FTeamBoostData, GameMode) == 0x000008, "Member 'FTeamBoostData::GameMode' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, GroupCount) == 0x00000C, "Member 'FTeamBoostData::GroupCount' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, ThresholdCount) == 0x000010, "Member 'FTeamBoostData::ThresholdCount' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, BoostLevel) == 0x000014, "Member 'FTeamBoostData::BoostLevel' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, BoostMul) == 0x000018, "Member 'FTeamBoostData::BoostMul' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, TeamNearConnectThickness) == 0x00001C, "Member 'FTeamBoostData::TeamNearConnectThickness' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, TeamFarConnectThickness) == 0x000020, "Member 'FTeamBoostData::TeamFarConnectThickness' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, EnergyChargeDist) == 0x000024, "Member 'FTeamBoostData::EnergyChargeDist' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, CatchUpMinDist) == 0x000028, "Member 'FTeamBoostData::CatchUpMinDist' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, CatchUpMaxDist) == 0x00002C, "Member 'FTeamBoostData::CatchUpMaxDist' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, CatchUpSpeed) == 0x000030, "Member 'FTeamBoostData::CatchUpSpeed' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, CatchUpAccelMul) == 0x000034, "Member 'FTeamBoostData::CatchUpAccelMul' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, bEnableCOMCatchUpSpeedInterp) == 0x000038, "Member 'FTeamBoostData::bEnableCOMCatchUpSpeedInterp' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, bEnableCOMCatchUpAccelInterp) == 0x000039, "Member 'FTeamBoostData::bEnableCOMCatchUpAccelInterp' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, FriendCOMCatchUpMinDist) == 0x00003C, "Member 'FTeamBoostData::FriendCOMCatchUpMinDist' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, FriendCOMCatchUpMaxDist) == 0x000040, "Member 'FTeamBoostData::FriendCOMCatchUpMaxDist' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, FriendCOMCatchUpSpeed) == 0x000044, "Member 'FTeamBoostData::FriendCOMCatchUpSpeed' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, FriendCOMCatchUpAccelMul) == 0x000048, "Member 'FTeamBoostData::FriendCOMCatchUpAccelMul' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, EnemyCOMCatchUpMinDist) == 0x00004C, "Member 'FTeamBoostData::EnemyCOMCatchUpMinDist' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, EnemyCOMCatchUpMaxDist) == 0x000050, "Member 'FTeamBoostData::EnemyCOMCatchUpMaxDist' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, EnemyCOMCatchUpSpeed) == 0x000054, "Member 'FTeamBoostData::EnemyCOMCatchUpSpeed' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, EnemyCOMCatchUpAccelMul) == 0x000058, "Member 'FTeamBoostData::EnemyCOMCatchUpAccelMul' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, TeamTouchDash_BoostLevel) == 0x00005C, "Member 'FTeamBoostData::TeamTouchDash_BoostLevel' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, TeamTouchDash_BoostSeconds) == 0x000060, "Member 'FTeamBoostData::TeamTouchDash_BoostSeconds' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, TeamTouchDash_BoostMul) == 0x000064, "Member 'FTeamBoostData::TeamTouchDash_BoostMul' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, TeamTouchDash_CoolDownSeconds) == 0x000068, "Member 'FTeamBoostData::TeamTouchDash_CoolDownSeconds' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AscentGaugeSpeed) == 0x00006C, "Member 'FTeamBoostData::AscentGaugeSpeed' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, BoostSecondList) == 0x000070, "Member 'FTeamBoostData::BoostSecondList' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AddEnergyValueByItemHit) == 0x000080, "Member 'FTeamBoostData::AddEnergyValueByItemHit' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AddEnergyValueByAllTouchDash) == 0x000084, "Member 'FTeamBoostData::AddEnergyValueByAllTouchDash' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AddEnergyValueByTouchDash) == 0x000088, "Member 'FTeamBoostData::AddEnergyValueByTouchDash' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AddEnergyValueByDriftDash) == 0x00008C, "Member 'FTeamBoostData::AddEnergyValueByDriftDash' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AddEnergyValueByAirTrick) == 0x000090, "Member 'FTeamBoostData::AddEnergyValueByAirTrick' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AddEnergyValueByDashPanel) == 0x000094, "Member 'FTeamBoostData::AddEnergyValueByDashPanel' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AddEnergyValueByDriftCharge) == 0x000098, "Member 'FTeamBoostData::AddEnergyValueByDriftCharge' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AddEnergyValueByRing) == 0x00009C, "Member 'FTeamBoostData::AddEnergyValueByRing' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AddEnergyValueBySlipstream) == 0x0000A0, "Member 'FTeamBoostData::AddEnergyValueBySlipstream' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AddEnergyValueBySpinDrift) == 0x0000A4, "Member 'FTeamBoostData::AddEnergyValueBySpinDrift' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AddEnergyValueByDriftJustDash) == 0x0000A8, "Member 'FTeamBoostData::AddEnergyValueByDriftJustDash' has a wrong offset!");
static_assert(offsetof(FTeamBoostData, AddEnergyValueByOddNumRank) == 0x0000AC, "Member 'FTeamBoostData::AddEnergyValueByOddNumRank' has a wrong offset!");

// ScriptStruct UnionRun.TargetedByItemData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTargetedByItemData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTargetedByItemData) == 0x000008, "Wrong alignment on FTargetedByItemData");
static_assert(sizeof(FTargetedByItemData) == 0x000018, "Wrong size on FTargetedByItemData");

// ScriptStruct UnionRun.ItemInfo4System
// 0x0048 (0x0050 - 0x0008)
struct FItemInfo4System final : public FTableRowBase
{
public:
	EItemId                                       ItemId;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefualtCapacity;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeplatedTempCapacity;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefualtCapacity4TT;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemName;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BPClass;                                           // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategoryType                             ItemCatagoryType;                                  // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemThrowType                                ItemThorwType;                                     // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemUseType                                  ItemUseType;                                       // 0x004A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancleStableItem;                                 // 0x004B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemInfo4System) == 0x000008, "Wrong alignment on FItemInfo4System");
static_assert(sizeof(FItemInfo4System) == 0x000050, "Wrong size on FItemInfo4System");
static_assert(offsetof(FItemInfo4System, ItemId) == 0x000008, "Member 'FItemInfo4System::ItemId' has a wrong offset!");
static_assert(offsetof(FItemInfo4System, DefualtCapacity) == 0x00000C, "Member 'FItemInfo4System::DefualtCapacity' has a wrong offset!");
static_assert(offsetof(FItemInfo4System, DeplatedTempCapacity) == 0x000010, "Member 'FItemInfo4System::DeplatedTempCapacity' has a wrong offset!");
static_assert(offsetof(FItemInfo4System, DefualtCapacity4TT) == 0x000014, "Member 'FItemInfo4System::DefualtCapacity4TT' has a wrong offset!");
static_assert(offsetof(FItemInfo4System, ItemName) == 0x000018, "Member 'FItemInfo4System::ItemName' has a wrong offset!");
static_assert(offsetof(FItemInfo4System, BPClass) == 0x000020, "Member 'FItemInfo4System::BPClass' has a wrong offset!");
static_assert(offsetof(FItemInfo4System, ItemCatagoryType) == 0x000048, "Member 'FItemInfo4System::ItemCatagoryType' has a wrong offset!");
static_assert(offsetof(FItemInfo4System, ItemThorwType) == 0x000049, "Member 'FItemInfo4System::ItemThorwType' has a wrong offset!");
static_assert(offsetof(FItemInfo4System, ItemUseType) == 0x00004A, "Member 'FItemInfo4System::ItemUseType' has a wrong offset!");
static_assert(offsetof(FItemInfo4System, bCancleStableItem) == 0x00004B, "Member 'FItemInfo4System::bCancleStableItem' has a wrong offset!");

// ScriptStruct UnionRun.DistanceGroupLotteryRateDataTable
// 0x0480 (0x0488 - 0x0008)
struct FDistanceGroupLotteryRateDataTable final : public FTableRowBase
{
public:
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup1;                   // 0x0008(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup2;                   // 0x0050(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup3;                   // 0x0098(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup4;                   // 0x00E0(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup5;                   // 0x0128(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup6;                   // 0x0170(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup7;                   // 0x01B8(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup8;                   // 0x0200(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup9;                   // 0x0248(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup10;                  // 0x0290(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup11;                  // 0x02D8(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup12;                  // 0x0320(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup13;                  // 0x0368(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup14;                  // 0x03B0(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup15;                  // 0x03F8(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateDatas_DistanceGroup16;                  // 0x0440(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistanceGroupLotteryRateDataTable) == 0x000008, "Wrong alignment on FDistanceGroupLotteryRateDataTable");
static_assert(sizeof(FDistanceGroupLotteryRateDataTable) == 0x000488, "Wrong size on FDistanceGroupLotteryRateDataTable");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup1) == 0x000008, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup1' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup2) == 0x000050, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup2' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup3) == 0x000098, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup3' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup4) == 0x0000E0, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup4' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup5) == 0x000128, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup5' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup6) == 0x000170, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup6' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup7) == 0x0001B8, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup7' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup8) == 0x000200, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup8' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup9) == 0x000248, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup9' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup10) == 0x000290, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup10' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup11) == 0x0002D8, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup11' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup12) == 0x000320, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup12' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup13) == 0x000368, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup13' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup14) == 0x0003B0, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup14' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup15) == 0x0003F8, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup15' has a wrong offset!");
static_assert(offsetof(FDistanceGroupLotteryRateDataTable, LotteryRateDatas_DistanceGroup16) == 0x000440, "Member 'FDistanceGroupLotteryRateDataTable::LotteryRateDatas_DistanceGroup16' has a wrong offset!");

// ScriptStruct UnionRun.RankGroupLotteryRateDataTable
// 0x0D98 (0x0DA0 - 0x0008)
struct FRankGroupLotteryRateDataTable final : public FTableRowBase
{
public:
	struct FDistanceGroupLotteryRateDataTable     LotteryRateDatas_1stLap;                           // 0x0008(0x0488)(Edit, NativeAccessSpecifierPublic)
	struct FDistanceGroupLotteryRateDataTable     LotteryRateDatas_2ndLap;                           // 0x0490(0x0488)(Edit, NativeAccessSpecifierPublic)
	struct FDistanceGroupLotteryRateDataTable     LotteryRateDatas_3rdLap;                           // 0x0918(0x0488)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankGroupLotteryRateDataTable) == 0x000008, "Wrong alignment on FRankGroupLotteryRateDataTable");
static_assert(sizeof(FRankGroupLotteryRateDataTable) == 0x000DA0, "Wrong size on FRankGroupLotteryRateDataTable");
static_assert(offsetof(FRankGroupLotteryRateDataTable, LotteryRateDatas_1stLap) == 0x000008, "Member 'FRankGroupLotteryRateDataTable::LotteryRateDatas_1stLap' has a wrong offset!");
static_assert(offsetof(FRankGroupLotteryRateDataTable, LotteryRateDatas_2ndLap) == 0x000490, "Member 'FRankGroupLotteryRateDataTable::LotteryRateDatas_2ndLap' has a wrong offset!");
static_assert(offsetof(FRankGroupLotteryRateDataTable, LotteryRateDatas_3rdLap) == 0x000918, "Member 'FRankGroupLotteryRateDataTable::LotteryRateDatas_3rdLap' has a wrong offset!");

// ScriptStruct UnionRun.RankGroupLotteryRateDataTableList
// 0x4428 (0x4430 - 0x0008)
struct FRankGroupLotteryRateDataTableList final : public FTableRowBase
{
public:
	ELotteryRateType                              LotteryRateType;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRankGroupLotteryRateDataTable         RankGroupLotteryRateDataTable__RankGroup1;         // 0x0010(0x0DA0)(Edit, NativeAccessSpecifierPublic)
	struct FRankGroupLotteryRateDataTable         RankGroupLotteryRateDataTable__RankGroup2;         // 0x0DB0(0x0DA0)(Edit, NativeAccessSpecifierPublic)
	struct FRankGroupLotteryRateDataTable         RankGroupLotteryRateDataTable__RankGroup3;         // 0x1B50(0x0DA0)(Edit, NativeAccessSpecifierPublic)
	struct FRankGroupLotteryRateDataTable         RankGroupLotteryRateDataTable__RankGroup4;         // 0x28F0(0x0DA0)(Edit, NativeAccessSpecifierPublic)
	struct FRankGroupLotteryRateDataTable         RankGroupLotteryRateDataTable__RankGroup5;         // 0x3690(0x0DA0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankGroupLotteryRateDataTableList) == 0x000008, "Wrong alignment on FRankGroupLotteryRateDataTableList");
static_assert(sizeof(FRankGroupLotteryRateDataTableList) == 0x004430, "Wrong size on FRankGroupLotteryRateDataTableList");
static_assert(offsetof(FRankGroupLotteryRateDataTableList, LotteryRateType) == 0x000008, "Member 'FRankGroupLotteryRateDataTableList::LotteryRateType' has a wrong offset!");
static_assert(offsetof(FRankGroupLotteryRateDataTableList, RankGroupLotteryRateDataTable__RankGroup1) == 0x000010, "Member 'FRankGroupLotteryRateDataTableList::RankGroupLotteryRateDataTable__RankGroup1' has a wrong offset!");
static_assert(offsetof(FRankGroupLotteryRateDataTableList, RankGroupLotteryRateDataTable__RankGroup2) == 0x000DB0, "Member 'FRankGroupLotteryRateDataTableList::RankGroupLotteryRateDataTable__RankGroup2' has a wrong offset!");
static_assert(offsetof(FRankGroupLotteryRateDataTableList, RankGroupLotteryRateDataTable__RankGroup3) == 0x001B50, "Member 'FRankGroupLotteryRateDataTableList::RankGroupLotteryRateDataTable__RankGroup3' has a wrong offset!");
static_assert(offsetof(FRankGroupLotteryRateDataTableList, RankGroupLotteryRateDataTable__RankGroup4) == 0x0028F0, "Member 'FRankGroupLotteryRateDataTableList::RankGroupLotteryRateDataTable__RankGroup4' has a wrong offset!");
static_assert(offsetof(FRankGroupLotteryRateDataTableList, RankGroupLotteryRateDataTable__RankGroup5) == 0x003690, "Member 'FRankGroupLotteryRateDataTableList::RankGroupLotteryRateDataTable__RankGroup5' has a wrong offset!");

// ScriptStruct UnionRun.ComRankGroupLotteryRateDataList
// 0x8868 (0x8870 - 0x0008)
struct FComRankGroupLotteryRateDataList final : public FTableRowBase
{
public:
	EComLotteryRateDataTableType                  ComLotteryRateData;                                // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRankGroupLotteryRateDataTableList     Normal;                                            // 0x0010(0x4430)(Edit, NativeAccessSpecifierPublic)
	struct FRankGroupLotteryRateDataTableList     Special;                                           // 0x4440(0x4430)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComRankGroupLotteryRateDataList) == 0x000008, "Wrong alignment on FComRankGroupLotteryRateDataList");
static_assert(sizeof(FComRankGroupLotteryRateDataList) == 0x008870, "Wrong size on FComRankGroupLotteryRateDataList");
static_assert(offsetof(FComRankGroupLotteryRateDataList, ComLotteryRateData) == 0x000008, "Member 'FComRankGroupLotteryRateDataList::ComLotteryRateData' has a wrong offset!");
static_assert(offsetof(FComRankGroupLotteryRateDataList, Normal) == 0x000010, "Member 'FComRankGroupLotteryRateDataList::Normal' has a wrong offset!");
static_assert(offsetof(FComRankGroupLotteryRateDataList, Special) == 0x004440, "Member 'FComRankGroupLotteryRateDataList::Special' has a wrong offset!");

// ScriptStruct UnionRun.PointDistanceData
// 0x0038 (0x0040 - 0x0008)
struct FPointDistanceData final : public FTableRowBase
{
public:
	EPointDistanceGroup                           PointDistanceGroup;                                // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Player;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank1;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank2;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank3;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank4;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank5;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank6;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank7;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank8;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank9;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank10;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComRank11;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPointDistanceData) == 0x000008, "Wrong alignment on FPointDistanceData");
static_assert(sizeof(FPointDistanceData) == 0x000040, "Wrong size on FPointDistanceData");
static_assert(offsetof(FPointDistanceData, PointDistanceGroup) == 0x000008, "Member 'FPointDistanceData::PointDistanceGroup' has a wrong offset!");
static_assert(offsetof(FPointDistanceData, Player) == 0x00000C, "Member 'FPointDistanceData::Player' has a wrong offset!");
static_assert(offsetof(FPointDistanceData, ComRank1) == 0x000010, "Member 'FPointDistanceData::ComRank1' has a wrong offset!");
static_assert(offsetof(FPointDistanceData, ComRank2) == 0x000014, "Member 'FPointDistanceData::ComRank2' has a wrong offset!");
static_assert(offsetof(FPointDistanceData, ComRank3) == 0x000018, "Member 'FPointDistanceData::ComRank3' has a wrong offset!");
static_assert(offsetof(FPointDistanceData, ComRank4) == 0x00001C, "Member 'FPointDistanceData::ComRank4' has a wrong offset!");
static_assert(offsetof(FPointDistanceData, ComRank5) == 0x000020, "Member 'FPointDistanceData::ComRank5' has a wrong offset!");
static_assert(offsetof(FPointDistanceData, ComRank6) == 0x000024, "Member 'FPointDistanceData::ComRank6' has a wrong offset!");
static_assert(offsetof(FPointDistanceData, ComRank7) == 0x000028, "Member 'FPointDistanceData::ComRank7' has a wrong offset!");
static_assert(offsetof(FPointDistanceData, ComRank8) == 0x00002C, "Member 'FPointDistanceData::ComRank8' has a wrong offset!");
static_assert(offsetof(FPointDistanceData, ComRank9) == 0x000030, "Member 'FPointDistanceData::ComRank9' has a wrong offset!");
static_assert(offsetof(FPointDistanceData, ComRank10) == 0x000034, "Member 'FPointDistanceData::ComRank10' has a wrong offset!");
static_assert(offsetof(FPointDistanceData, ComRank11) == 0x000038, "Member 'FPointDistanceData::ComRank11' has a wrong offset!");

// ScriptStruct UnionRun.ComLevelCorrespondenceData
// 0x0008 (0x0010 - 0x0008)
struct FComLevelCorrespondenceData final : public FTableRowBase
{
public:
	int32                                         ComLevel;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComLotteryRateDataTableType                  ComLotteryRateData;                                // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComPointDistanceTableType                    PointDistanceGroup;                                // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComLevelCorrespondenceData) == 0x000008, "Wrong alignment on FComLevelCorrespondenceData");
static_assert(sizeof(FComLevelCorrespondenceData) == 0x000010, "Wrong size on FComLevelCorrespondenceData");
static_assert(offsetof(FComLevelCorrespondenceData, ComLevel) == 0x000008, "Member 'FComLevelCorrespondenceData::ComLevel' has a wrong offset!");
static_assert(offsetof(FComLevelCorrespondenceData, ComLotteryRateData) == 0x00000C, "Member 'FComLevelCorrespondenceData::ComLotteryRateData' has a wrong offset!");
static_assert(offsetof(FComLevelCorrespondenceData, PointDistanceGroup) == 0x00000D, "Member 'FComLevelCorrespondenceData::PointDistanceGroup' has a wrong offset!");

// ScriptStruct UnionRun.ComPointDistanceDataList
// 0x0350 (0x0358 - 0x0008)
struct FComPointDistanceDataList final : public FTableRowBase
{
public:
	EComPointDistanceTableType                    ComPointDistanceTableType;                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComPointDistanceData                  ComPointDistanceData__Group1;                      // 0x0010(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group2;                      // 0x0048(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group3;                      // 0x0080(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group4;                      // 0x00B8(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group5;                      // 0x00F0(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group6;                      // 0x0128(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group7;                      // 0x0160(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group8;                      // 0x0198(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group9;                      // 0x01D0(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group10;                     // 0x0208(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group11;                     // 0x0240(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group12;                     // 0x0278(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group13;                     // 0x02B0(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group14;                     // 0x02E8(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FComPointDistanceData                  ComPointDistanceData__Group15;                     // 0x0320(0x0038)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComPointDistanceDataList) == 0x000008, "Wrong alignment on FComPointDistanceDataList");
static_assert(sizeof(FComPointDistanceDataList) == 0x000358, "Wrong size on FComPointDistanceDataList");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceTableType) == 0x000008, "Member 'FComPointDistanceDataList::ComPointDistanceTableType' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group1) == 0x000010, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group1' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group2) == 0x000048, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group2' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group3) == 0x000080, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group3' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group4) == 0x0000B8, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group4' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group5) == 0x0000F0, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group5' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group6) == 0x000128, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group6' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group7) == 0x000160, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group7' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group8) == 0x000198, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group8' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group9) == 0x0001D0, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group9' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group10) == 0x000208, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group10' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group11) == 0x000240, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group11' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group12) == 0x000278, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group12' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group13) == 0x0002B0, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group13' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group14) == 0x0002E8, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group14' has a wrong offset!");
static_assert(offsetof(FComPointDistanceDataList, ComPointDistanceData__Group15) == 0x000320, "Member 'FComPointDistanceDataList::ComPointDistanceData__Group15' has a wrong offset!");

// ScriptStruct UnionRun.GadgetLotteryRateData
// 0x8868 (0x8870 - 0x0008)
struct FGadgetLotteryRateData final : public FTableRowBase
{
public:
	EGadgetId                                     gadgetId;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRankGroupLotteryRateDataTableList     RankGroupLotteryRateDataTable;                     // 0x0010(0x4430)(Edit, NativeAccessSpecifierPublic)
	struct FRankGroupLotteryRateDataTableList     SpecialBox_RankGroupLotteryRateDataTable;          // 0x4440(0x4430)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetLotteryRateData) == 0x000008, "Wrong alignment on FGadgetLotteryRateData");
static_assert(sizeof(FGadgetLotteryRateData) == 0x008870, "Wrong size on FGadgetLotteryRateData");
static_assert(offsetof(FGadgetLotteryRateData, gadgetId) == 0x000008, "Member 'FGadgetLotteryRateData::gadgetId' has a wrong offset!");
static_assert(offsetof(FGadgetLotteryRateData, RankGroupLotteryRateDataTable) == 0x000010, "Member 'FGadgetLotteryRateData::RankGroupLotteryRateDataTable' has a wrong offset!");
static_assert(offsetof(FGadgetLotteryRateData, SpecialBox_RankGroupLotteryRateDataTable) == 0x004440, "Member 'FGadgetLotteryRateData::SpecialBox_RankGroupLotteryRateDataTable' has a wrong offset!");

// ScriptStruct UnionRun.GadgetLotteryRateMagnificationCorrectionData
// 0x0018 (0x0020 - 0x0008)
struct FGadgetLotteryRateMagnificationCorrectionData final : public FTableRowBase
{
public:
	EGadgetId                                     gadgetId;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Magnification;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EItemId>                               ItemIdList;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGadgetLotteryRateMagnificationCorrectionData) == 0x000008, "Wrong alignment on FGadgetLotteryRateMagnificationCorrectionData");
static_assert(sizeof(FGadgetLotteryRateMagnificationCorrectionData) == 0x000020, "Wrong size on FGadgetLotteryRateMagnificationCorrectionData");
static_assert(offsetof(FGadgetLotteryRateMagnificationCorrectionData, gadgetId) == 0x000008, "Member 'FGadgetLotteryRateMagnificationCorrectionData::gadgetId' has a wrong offset!");
static_assert(offsetof(FGadgetLotteryRateMagnificationCorrectionData, Magnification) == 0x00000C, "Member 'FGadgetLotteryRateMagnificationCorrectionData::Magnification' has a wrong offset!");
static_assert(offsetof(FGadgetLotteryRateMagnificationCorrectionData, ItemIdList) == 0x000010, "Member 'FGadgetLotteryRateMagnificationCorrectionData::ItemIdList' has a wrong offset!");

// ScriptStruct UnionRun.GroupRaceRuleLotteryRateRankGroupData
// 0x0168 (0x0170 - 0x0008)
struct FGroupRaceRuleLotteryRateRankGroupData final : public FTableRowBase
{
public:
	struct FLotteryRateData                       LotteryRateData_RankGroup1;                        // 0x0008(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateData_RankGroup2;                        // 0x0050(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateData_RankGroup3;                        // 0x0098(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateData_RankGroup4;                        // 0x00E0(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FLotteryRateData                       LotteryRateData_RankGroup5;                        // 0x0128(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupRaceRuleLotteryRateRankGroupData) == 0x000008, "Wrong alignment on FGroupRaceRuleLotteryRateRankGroupData");
static_assert(sizeof(FGroupRaceRuleLotteryRateRankGroupData) == 0x000170, "Wrong size on FGroupRaceRuleLotteryRateRankGroupData");
static_assert(offsetof(FGroupRaceRuleLotteryRateRankGroupData, LotteryRateData_RankGroup1) == 0x000008, "Member 'FGroupRaceRuleLotteryRateRankGroupData::LotteryRateData_RankGroup1' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleLotteryRateRankGroupData, LotteryRateData_RankGroup2) == 0x000050, "Member 'FGroupRaceRuleLotteryRateRankGroupData::LotteryRateData_RankGroup2' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleLotteryRateRankGroupData, LotteryRateData_RankGroup3) == 0x000098, "Member 'FGroupRaceRuleLotteryRateRankGroupData::LotteryRateData_RankGroup3' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleLotteryRateRankGroupData, LotteryRateData_RankGroup4) == 0x0000E0, "Member 'FGroupRaceRuleLotteryRateRankGroupData::LotteryRateData_RankGroup4' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleLotteryRateRankGroupData, LotteryRateData_RankGroup5) == 0x000128, "Member 'FGroupRaceRuleLotteryRateRankGroupData::LotteryRateData_RankGroup5' has a wrong offset!");

// ScriptStruct UnionRun.GroupRaceRuleLotteryRateData
// 0x02E8 (0x02F0 - 0x0008)
struct FGroupRaceRuleLotteryRateData final : public FTableRowBase
{
public:
	EGroupRaceItemLotteryCorrectionType           CorrectionType;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGroupRaceRuleLotteryRateRankGroupData NormalBoxRankGroupData;                            // 0x0010(0x0170)(Edit, NativeAccessSpecifierPublic)
	struct FGroupRaceRuleLotteryRateRankGroupData SpecialBoxRankGroupData;                           // 0x0180(0x0170)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupRaceRuleLotteryRateData) == 0x000008, "Wrong alignment on FGroupRaceRuleLotteryRateData");
static_assert(sizeof(FGroupRaceRuleLotteryRateData) == 0x0002F0, "Wrong size on FGroupRaceRuleLotteryRateData");
static_assert(offsetof(FGroupRaceRuleLotteryRateData, CorrectionType) == 0x000008, "Member 'FGroupRaceRuleLotteryRateData::CorrectionType' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleLotteryRateData, NormalBoxRankGroupData) == 0x000010, "Member 'FGroupRaceRuleLotteryRateData::NormalBoxRankGroupData' has a wrong offset!");
static_assert(offsetof(FGroupRaceRuleLotteryRateData, SpecialBoxRankGroupData) == 0x000180, "Member 'FGroupRaceRuleLotteryRateData::SpecialBoxRankGroupData' has a wrong offset!");

// ScriptStruct UnionRun.ReappearanceDifferentItemData
// 0x0008 (0x0010 - 0x0008)
struct FReappearanceDifferentItemData final : public FTableRowBase
{
public:
	EItemId                                       ItemId;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReappearanceTime;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReappearanceDifferentItemData) == 0x000008, "Wrong alignment on FReappearanceDifferentItemData");
static_assert(sizeof(FReappearanceDifferentItemData) == 0x000010, "Wrong size on FReappearanceDifferentItemData");
static_assert(offsetof(FReappearanceDifferentItemData, ItemId) == 0x000008, "Member 'FReappearanceDifferentItemData::ItemId' has a wrong offset!");
static_assert(offsetof(FReappearanceDifferentItemData, ReappearanceTime) == 0x00000C, "Member 'FReappearanceDifferentItemData::ReappearanceTime' has a wrong offset!");

// ScriptStruct UnionRun.LimitingFactorData
// 0x0060 (0x0068 - 0x0008)
struct FLimitingFactorData final : public FTableRowBase
{
public:
	EItemId                                       ItemId;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSameCountsForGroupRace;                         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SameTimeCount;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SameTimeCountForGroupRace;                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SameTimeCountForUseItemSwitch;                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EItemId>                               SameTimeCountItemIdList;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UseReappearanceTimeForGroupRace;                   // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReappearanceTime;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReappearanceTimeForGroupRace;                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FReappearanceDifferentItemData> ReappearanceDifferentItemDataList;                 // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         startLimitationTime;                               // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EItemId>                               LimitingItemIdList;                                // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ComLimitation;                                     // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLimitingFactorData) == 0x000008, "Wrong alignment on FLimitingFactorData");
static_assert(sizeof(FLimitingFactorData) == 0x000068, "Wrong size on FLimitingFactorData");
static_assert(offsetof(FLimitingFactorData, ItemId) == 0x000008, "Member 'FLimitingFactorData::ItemId' has a wrong offset!");
static_assert(offsetof(FLimitingFactorData, UseSameCountsForGroupRace) == 0x000009, "Member 'FLimitingFactorData::UseSameCountsForGroupRace' has a wrong offset!");
static_assert(offsetof(FLimitingFactorData, SameTimeCount) == 0x00000C, "Member 'FLimitingFactorData::SameTimeCount' has a wrong offset!");
static_assert(offsetof(FLimitingFactorData, SameTimeCountForGroupRace) == 0x000010, "Member 'FLimitingFactorData::SameTimeCountForGroupRace' has a wrong offset!");
static_assert(offsetof(FLimitingFactorData, SameTimeCountForUseItemSwitch) == 0x000014, "Member 'FLimitingFactorData::SameTimeCountForUseItemSwitch' has a wrong offset!");
static_assert(offsetof(FLimitingFactorData, SameTimeCountItemIdList) == 0x000018, "Member 'FLimitingFactorData::SameTimeCountItemIdList' has a wrong offset!");
static_assert(offsetof(FLimitingFactorData, UseReappearanceTimeForGroupRace) == 0x000028, "Member 'FLimitingFactorData::UseReappearanceTimeForGroupRace' has a wrong offset!");
static_assert(offsetof(FLimitingFactorData, ReappearanceTime) == 0x00002C, "Member 'FLimitingFactorData::ReappearanceTime' has a wrong offset!");
static_assert(offsetof(FLimitingFactorData, ReappearanceTimeForGroupRace) == 0x000030, "Member 'FLimitingFactorData::ReappearanceTimeForGroupRace' has a wrong offset!");
static_assert(offsetof(FLimitingFactorData, ReappearanceDifferentItemDataList) == 0x000038, "Member 'FLimitingFactorData::ReappearanceDifferentItemDataList' has a wrong offset!");
static_assert(offsetof(FLimitingFactorData, startLimitationTime) == 0x000048, "Member 'FLimitingFactorData::startLimitationTime' has a wrong offset!");
static_assert(offsetof(FLimitingFactorData, LimitingItemIdList) == 0x000050, "Member 'FLimitingFactorData::LimitingItemIdList' has a wrong offset!");
static_assert(offsetof(FLimitingFactorData, ComLimitation) == 0x000060, "Member 'FLimitingFactorData::ComLimitation' has a wrong offset!");

// ScriptStruct UnionRun.RankGroupPackageRingVariationRateDataTable
// 0x0078 (0x0080 - 0x0008)
struct FRankGroupPackageRingVariationRateDataTable final : public FTableRowBase
{
public:
	struct FPackageRingItemBoxVariationRateData   PackageRingVariationRateData___RankGroup1;         // 0x0008(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPackageRingItemBoxVariationRateData   PackageRingVariationRateData___RankGroup2;         // 0x0020(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPackageRingItemBoxVariationRateData   PackageRingVariationRateData___RankGroup3;         // 0x0038(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPackageRingItemBoxVariationRateData   PackageRingVariationRateData___RankGroup4;         // 0x0050(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPackageRingItemBoxVariationRateData   PackageRingVariationRateData___RankGroup5;         // 0x0068(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankGroupPackageRingVariationRateDataTable) == 0x000008, "Wrong alignment on FRankGroupPackageRingVariationRateDataTable");
static_assert(sizeof(FRankGroupPackageRingVariationRateDataTable) == 0x000080, "Wrong size on FRankGroupPackageRingVariationRateDataTable");
static_assert(offsetof(FRankGroupPackageRingVariationRateDataTable, PackageRingVariationRateData___RankGroup1) == 0x000008, "Member 'FRankGroupPackageRingVariationRateDataTable::PackageRingVariationRateData___RankGroup1' has a wrong offset!");
static_assert(offsetof(FRankGroupPackageRingVariationRateDataTable, PackageRingVariationRateData___RankGroup2) == 0x000020, "Member 'FRankGroupPackageRingVariationRateDataTable::PackageRingVariationRateData___RankGroup2' has a wrong offset!");
static_assert(offsetof(FRankGroupPackageRingVariationRateDataTable, PackageRingVariationRateData___RankGroup3) == 0x000038, "Member 'FRankGroupPackageRingVariationRateDataTable::PackageRingVariationRateData___RankGroup3' has a wrong offset!");
static_assert(offsetof(FRankGroupPackageRingVariationRateDataTable, PackageRingVariationRateData___RankGroup4) == 0x000050, "Member 'FRankGroupPackageRingVariationRateDataTable::PackageRingVariationRateData___RankGroup4' has a wrong offset!");
static_assert(offsetof(FRankGroupPackageRingVariationRateDataTable, PackageRingVariationRateData___RankGroup5) == 0x000068, "Member 'FRankGroupPackageRingVariationRateDataTable::PackageRingVariationRateData___RankGroup5' has a wrong offset!");

// ScriptStruct UnionRun.RacerRankPackageRingVariationRateData
// 0x0010 (0x0010 - 0x0000)
struct FRacerRankPackageRingVariationRateData final
{
public:
	TArray<struct FPackageRingVariationRateData>  ListByRacerRank;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerRankPackageRingVariationRateData) == 0x000008, "Wrong alignment on FRacerRankPackageRingVariationRateData");
static_assert(sizeof(FRacerRankPackageRingVariationRateData) == 0x000010, "Wrong size on FRacerRankPackageRingVariationRateData");
static_assert(offsetof(FRacerRankPackageRingVariationRateData, ListByRacerRank) == 0x000000, "Member 'FRacerRankPackageRingVariationRateData::ListByRacerRank' has a wrong offset!");

// ScriptStruct UnionRun.RacerRankPackageRingVariationRateDataTable
// 0x0030 (0x0030 - 0x0000)
struct FRacerRankPackageRingVariationRateDataTable final
{
public:
	struct FRacerRankPackageRingVariationRateData VariationRateDatas_1stLap;                         // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FRacerRankPackageRingVariationRateData VariationRateDatas_2ndLap;                         // 0x0010(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FRacerRankPackageRingVariationRateData VariationRateDatas_3rdLap;                         // 0x0020(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerRankPackageRingVariationRateDataTable) == 0x000008, "Wrong alignment on FRacerRankPackageRingVariationRateDataTable");
static_assert(sizeof(FRacerRankPackageRingVariationRateDataTable) == 0x000030, "Wrong size on FRacerRankPackageRingVariationRateDataTable");
static_assert(offsetof(FRacerRankPackageRingVariationRateDataTable, VariationRateDatas_1stLap) == 0x000000, "Member 'FRacerRankPackageRingVariationRateDataTable::VariationRateDatas_1stLap' has a wrong offset!");
static_assert(offsetof(FRacerRankPackageRingVariationRateDataTable, VariationRateDatas_2ndLap) == 0x000010, "Member 'FRacerRankPackageRingVariationRateDataTable::VariationRateDatas_2ndLap' has a wrong offset!");
static_assert(offsetof(FRacerRankPackageRingVariationRateDataTable, VariationRateDatas_3rdLap) == 0x000020, "Member 'FRacerRankPackageRingVariationRateDataTable::VariationRateDatas_3rdLap' has a wrong offset!");

// ScriptStruct UnionRun.ItemBootData
// 0x0040 (0x0048 - 0x0008)
struct FItemBootData final : public FTableRowBase
{
public:
	EItemId                                       ItemId;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarityType                               ItemRarityType;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartForwardOffset;                                // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartBackwardOffset;                               // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartForwardDelay;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartBackwardDelay;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemBootData) == 0x000008, "Wrong alignment on FItemBootData");
static_assert(sizeof(FItemBootData) == 0x000048, "Wrong size on FItemBootData");
static_assert(offsetof(FItemBootData, ItemId) == 0x000008, "Member 'FItemBootData::ItemId' has a wrong offset!");
static_assert(offsetof(FItemBootData, ItemRarityType) == 0x000009, "Member 'FItemBootData::ItemRarityType' has a wrong offset!");
static_assert(offsetof(FItemBootData, StartForwardOffset) == 0x000010, "Member 'FItemBootData::StartForwardOffset' has a wrong offset!");
static_assert(offsetof(FItemBootData, StartBackwardOffset) == 0x000028, "Member 'FItemBootData::StartBackwardOffset' has a wrong offset!");
static_assert(offsetof(FItemBootData, StartForwardDelay) == 0x000040, "Member 'FItemBootData::StartForwardDelay' has a wrong offset!");
static_assert(offsetof(FItemBootData, StartBackwardDelay) == 0x000044, "Member 'FItemBootData::StartBackwardDelay' has a wrong offset!");

// ScriptStruct UnionRun.LotteryBubbleBonusItemRateData
// 0x0020 (0x0028 - 0x0008)
struct FLotteryBubbleBonusItemRateData final : public FTableRowBase
{
public:
	int32                                         PackageRing5;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PackageRing10;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PackageRing20;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PackageRing100;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NormalBox;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DoubleBox;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialBox;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLotteryBubbleBonusItemRateData) == 0x000008, "Wrong alignment on FLotteryBubbleBonusItemRateData");
static_assert(sizeof(FLotteryBubbleBonusItemRateData) == 0x000028, "Wrong size on FLotteryBubbleBonusItemRateData");
static_assert(offsetof(FLotteryBubbleBonusItemRateData, PackageRing5) == 0x000008, "Member 'FLotteryBubbleBonusItemRateData::PackageRing5' has a wrong offset!");
static_assert(offsetof(FLotteryBubbleBonusItemRateData, PackageRing10) == 0x00000C, "Member 'FLotteryBubbleBonusItemRateData::PackageRing10' has a wrong offset!");
static_assert(offsetof(FLotteryBubbleBonusItemRateData, PackageRing20) == 0x000010, "Member 'FLotteryBubbleBonusItemRateData::PackageRing20' has a wrong offset!");
static_assert(offsetof(FLotteryBubbleBonusItemRateData, PackageRing100) == 0x000014, "Member 'FLotteryBubbleBonusItemRateData::PackageRing100' has a wrong offset!");
static_assert(offsetof(FLotteryBubbleBonusItemRateData, NormalBox) == 0x000018, "Member 'FLotteryBubbleBonusItemRateData::NormalBox' has a wrong offset!");
static_assert(offsetof(FLotteryBubbleBonusItemRateData, DoubleBox) == 0x00001C, "Member 'FLotteryBubbleBonusItemRateData::DoubleBox' has a wrong offset!");
static_assert(offsetof(FLotteryBubbleBonusItemRateData, SpecialBox) == 0x000020, "Member 'FLotteryBubbleBonusItemRateData::SpecialBox' has a wrong offset!");

// ScriptStruct UnionRun.AvoidTargetRingData
// 0x0010 (0x0018 - 0x0008)
struct FAvoidTargetRingData final : public FTableRowBase
{
public:
	EItemId                                       ItemId;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvoidEnable;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllowAvoidAttackCarSpeed;                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvoidAttackMoveDistance;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvoidAttackMoveTime;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAvoidTargetRingData) == 0x000008, "Wrong alignment on FAvoidTargetRingData");
static_assert(sizeof(FAvoidTargetRingData) == 0x000018, "Wrong size on FAvoidTargetRingData");
static_assert(offsetof(FAvoidTargetRingData, ItemId) == 0x000008, "Member 'FAvoidTargetRingData::ItemId' has a wrong offset!");
static_assert(offsetof(FAvoidTargetRingData, IsAvoidEnable) == 0x000009, "Member 'FAvoidTargetRingData::IsAvoidEnable' has a wrong offset!");
static_assert(offsetof(FAvoidTargetRingData, AllowAvoidAttackCarSpeed) == 0x00000C, "Member 'FAvoidTargetRingData::AllowAvoidAttackCarSpeed' has a wrong offset!");
static_assert(offsetof(FAvoidTargetRingData, AvoidAttackMoveDistance) == 0x000010, "Member 'FAvoidTargetRingData::AvoidAttackMoveDistance' has a wrong offset!");
static_assert(offsetof(FAvoidTargetRingData, AvoidAttackMoveTime) == 0x000014, "Member 'FAvoidTargetRingData::AvoidAttackMoveTime' has a wrong offset!");

// ScriptStruct UnionRun.LockOnParamMachineForm
// 0x0068 (0x0068 - 0x0000)
struct FLockOnParamMachineForm final
{
public:
	struct FVector                                LockOnPositionOffset;                              // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LockOnTargetPositionOffset;                        // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockOnTargetDistance;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockOnHUDSize;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockOnCheckDistance;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockOnCheckDistance_2P;                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockOnCheckDistance_4P;                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockOnChangeToNoneTime;                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LockOnCameraPositionOffset;                        // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockOnCheckDistance3D;                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLockOnParamMachineForm) == 0x000008, "Wrong alignment on FLockOnParamMachineForm");
static_assert(sizeof(FLockOnParamMachineForm) == 0x000068, "Wrong size on FLockOnParamMachineForm");
static_assert(offsetof(FLockOnParamMachineForm, LockOnPositionOffset) == 0x000000, "Member 'FLockOnParamMachineForm::LockOnPositionOffset' has a wrong offset!");
static_assert(offsetof(FLockOnParamMachineForm, LockOnTargetPositionOffset) == 0x000018, "Member 'FLockOnParamMachineForm::LockOnTargetPositionOffset' has a wrong offset!");
static_assert(offsetof(FLockOnParamMachineForm, LockOnTargetDistance) == 0x000030, "Member 'FLockOnParamMachineForm::LockOnTargetDistance' has a wrong offset!");
static_assert(offsetof(FLockOnParamMachineForm, LockOnHUDSize) == 0x000034, "Member 'FLockOnParamMachineForm::LockOnHUDSize' has a wrong offset!");
static_assert(offsetof(FLockOnParamMachineForm, LockOnCheckDistance) == 0x000038, "Member 'FLockOnParamMachineForm::LockOnCheckDistance' has a wrong offset!");
static_assert(offsetof(FLockOnParamMachineForm, LockOnCheckDistance_2P) == 0x00003C, "Member 'FLockOnParamMachineForm::LockOnCheckDistance_2P' has a wrong offset!");
static_assert(offsetof(FLockOnParamMachineForm, LockOnCheckDistance_4P) == 0x000040, "Member 'FLockOnParamMachineForm::LockOnCheckDistance_4P' has a wrong offset!");
static_assert(offsetof(FLockOnParamMachineForm, LockOnChangeToNoneTime) == 0x000044, "Member 'FLockOnParamMachineForm::LockOnChangeToNoneTime' has a wrong offset!");
static_assert(offsetof(FLockOnParamMachineForm, LockOnCameraPositionOffset) == 0x000048, "Member 'FLockOnParamMachineForm::LockOnCameraPositionOffset' has a wrong offset!");
static_assert(offsetof(FLockOnParamMachineForm, LockOnCheckDistance3D) == 0x000060, "Member 'FLockOnParamMachineForm::LockOnCheckDistance3D' has a wrong offset!");

// ScriptStruct UnionRun.CreateItemInfo
// 0x0018 (0x0018 - 0x0000)
struct FCreateItemInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 uclass;                                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemObjectLayer*                       objLayer;                                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreateItemInfo) == 0x000008, "Wrong alignment on FCreateItemInfo");
static_assert(sizeof(FCreateItemInfo) == 0x000018, "Wrong size on FCreateItemInfo");
static_assert(offsetof(FCreateItemInfo, uclass) == 0x000008, "Member 'FCreateItemInfo::uclass' has a wrong offset!");
static_assert(offsetof(FCreateItemInfo, objLayer) == 0x000010, "Member 'FCreateItemInfo::objLayer' has a wrong offset!");

// ScriptStruct UnionRun.UnionNavigationBinaryParameter
// 0x0018 (0x0018 - 0x0000)
struct FUnionNavigationBinaryParameter final
{
public:
	int32                                         DataVersion;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionNavigationBinaryParameter) == 0x000008, "Wrong alignment on FUnionNavigationBinaryParameter");
static_assert(sizeof(FUnionNavigationBinaryParameter) == 0x000018, "Wrong size on FUnionNavigationBinaryParameter");
static_assert(offsetof(FUnionNavigationBinaryParameter, DataVersion) == 0x000000, "Member 'FUnionNavigationBinaryParameter::DataVersion' has a wrong offset!");
static_assert(offsetof(FUnionNavigationBinaryParameter, Data) == 0x000008, "Member 'FUnionNavigationBinaryParameter::Data' has a wrong offset!");

// ScriptStruct UnionRun.PlaneChargeTurnAppearanceParams
// 0x0018 (0x0018 - 0x0000)
struct FPlaneChargeTurnAppearanceParams final
{
public:
	float                                         MinDegree;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDegree;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSpeed;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchAngularSpeed;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnAngularSpeed;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularAccelSec;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaneChargeTurnAppearanceParams) == 0x000004, "Wrong alignment on FPlaneChargeTurnAppearanceParams");
static_assert(sizeof(FPlaneChargeTurnAppearanceParams) == 0x000018, "Wrong size on FPlaneChargeTurnAppearanceParams");
static_assert(offsetof(FPlaneChargeTurnAppearanceParams, MinDegree) == 0x000000, "Member 'FPlaneChargeTurnAppearanceParams::MinDegree' has a wrong offset!");
static_assert(offsetof(FPlaneChargeTurnAppearanceParams, MaxDegree) == 0x000004, "Member 'FPlaneChargeTurnAppearanceParams::MaxDegree' has a wrong offset!");
static_assert(offsetof(FPlaneChargeTurnAppearanceParams, AngularSpeed) == 0x000008, "Member 'FPlaneChargeTurnAppearanceParams::AngularSpeed' has a wrong offset!");
static_assert(offsetof(FPlaneChargeTurnAppearanceParams, SwitchAngularSpeed) == 0x00000C, "Member 'FPlaneChargeTurnAppearanceParams::SwitchAngularSpeed' has a wrong offset!");
static_assert(offsetof(FPlaneChargeTurnAppearanceParams, ReturnAngularSpeed) == 0x000010, "Member 'FPlaneChargeTurnAppearanceParams::ReturnAngularSpeed' has a wrong offset!");
static_assert(offsetof(FPlaneChargeTurnAppearanceParams, AngularAccelSec) == 0x000014, "Member 'FPlaneChargeTurnAppearanceParams::AngularAccelSec' has a wrong offset!");

// ScriptStruct UnionRun.PlaneChangeDirectionParams
// 0x0008 (0x0008 - 0x0000)
struct FPlaneChangeDirectionParams final
{
public:
	float                                         AngularSpeed;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaneChangeDirectionParams) == 0x000004, "Wrong alignment on FPlaneChangeDirectionParams");
static_assert(sizeof(FPlaneChangeDirectionParams) == 0x000008, "Wrong size on FPlaneChangeDirectionParams");
static_assert(offsetof(FPlaneChangeDirectionParams, AngularSpeed) == 0x000000, "Member 'FPlaneChangeDirectionParams::AngularSpeed' has a wrong offset!");
static_assert(offsetof(FPlaneChangeDirectionParams, Seconds) == 0x000004, "Member 'FPlaneChangeDirectionParams::Seconds' has a wrong offset!");

// ScriptStruct UnionRun.PlaneDamageReactionParams
// 0x0014 (0x0014 - 0x0000)
struct FPlaneDamageReactionParams final
{
public:
	struct FItemSpeedParam                        ClassSpeed;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         IntervalSeconds;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaneDamageReactionParams) == 0x000004, "Wrong alignment on FPlaneDamageReactionParams");
static_assert(sizeof(FPlaneDamageReactionParams) == 0x000014, "Wrong size on FPlaneDamageReactionParams");
static_assert(offsetof(FPlaneDamageReactionParams, ClassSpeed) == 0x000000, "Member 'FPlaneDamageReactionParams::ClassSpeed' has a wrong offset!");
static_assert(offsetof(FPlaneDamageReactionParams, IntervalSeconds) == 0x000010, "Member 'FPlaneDamageReactionParams::IntervalSeconds' has a wrong offset!");

// ScriptStruct UnionRun.MinimapIconInfoDataTableRow
// 0x0028 (0x0030 - 0x0008)
struct FMinimapIconInfoDataTableRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinimapIconInfoDataTableRow) == 0x000008, "Wrong alignment on FMinimapIconInfoDataTableRow");
static_assert(sizeof(FMinimapIconInfoDataTableRow) == 0x000030, "Wrong size on FMinimapIconInfoDataTableRow");
static_assert(offsetof(FMinimapIconInfoDataTableRow, IconTexture) == 0x000008, "Member 'FMinimapIconInfoDataTableRow::IconTexture' has a wrong offset!");

// ScriptStruct UnionRun.RaceReactionVoiceEtc
// 0x0038 (0x0038 - 0x0000)
struct FRaceReactionVoiceEtc final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           CueVoiceId;                                        // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaceReactionVoiceEtc) == 0x000008, "Wrong alignment on FRaceReactionVoiceEtc");
static_assert(sizeof(FRaceReactionVoiceEtc) == 0x000038, "Wrong size on FRaceReactionVoiceEtc");
static_assert(offsetof(FRaceReactionVoiceEtc, Text) == 0x000000, "Member 'FRaceReactionVoiceEtc::Text' has a wrong offset!");
static_assert(offsetof(FRaceReactionVoiceEtc, CueVoiceId) == 0x000010, "Member 'FRaceReactionVoiceEtc::CueVoiceId' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionStageData
// 0x0008 (0x0008 - 0x0000)
struct FRacerReactionStageData final
{
public:
	EStageId                                      StageId;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedRate;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerReactionStageData) == 0x000004, "Wrong alignment on FRacerReactionStageData");
static_assert(sizeof(FRacerReactionStageData) == 0x000008, "Wrong size on FRacerReactionStageData");
static_assert(offsetof(FRacerReactionStageData, StageId) == 0x000000, "Member 'FRacerReactionStageData::StageId' has a wrong offset!");
static_assert(offsetof(FRacerReactionStageData, ElapsedRate) == 0x000004, "Member 'FRacerReactionStageData::ElapsedRate' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionConfig
// 0x0020 (0x0020 - 0x0000)
struct FRacerReactionConfig final
{
public:
	float                                         WaitTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OvertakeRange;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OvertakenRange;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRacerReactionTypeParam>        TypeParam;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerReactionConfig) == 0x000008, "Wrong alignment on FRacerReactionConfig");
static_assert(sizeof(FRacerReactionConfig) == 0x000020, "Wrong size on FRacerReactionConfig");
static_assert(offsetof(FRacerReactionConfig, WaitTime) == 0x000000, "Member 'FRacerReactionConfig::WaitTime' has a wrong offset!");
static_assert(offsetof(FRacerReactionConfig, OvertakeRange) == 0x000004, "Member 'FRacerReactionConfig::OvertakeRange' has a wrong offset!");
static_assert(offsetof(FRacerReactionConfig, OvertakenRange) == 0x000008, "Member 'FRacerReactionConfig::OvertakenRange' has a wrong offset!");
static_assert(offsetof(FRacerReactionConfig, TypeParam) == 0x000010, "Member 'FRacerReactionConfig::TypeParam' has a wrong offset!");

// ScriptStruct UnionRun.RacerReaction
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FRacerReaction final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRacerReaction) == 0x000008, "Wrong alignment on FRacerReaction");
static_assert(sizeof(FRacerReaction) == 0x000048, "Wrong size on FRacerReaction");

// ScriptStruct UnionRun.RacerReactionData
// 0x0010 (0x0018 - 0x0008)
struct FRacerReactionData final : public FTableRowBase
{
public:
	TArray<struct FRacerReactionTypeParam>        TypeParam;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerReactionData) == 0x000008, "Wrong alignment on FRacerReactionData");
static_assert(sizeof(FRacerReactionData) == 0x000018, "Wrong size on FRacerReactionData");
static_assert(offsetof(FRacerReactionData, TypeParam) == 0x000008, "Member 'FRacerReactionData::TypeParam' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionRecord
// 0x0010 (0x0010 - 0x0000)
struct FRacerReactionRecord final
{
public:
	TArray<struct FRacerReactionTypeParam>        TypeParam;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerReactionRecord) == 0x000008, "Wrong alignment on FRacerReactionRecord");
static_assert(sizeof(FRacerReactionRecord) == 0x000010, "Wrong size on FRacerReactionRecord");
static_assert(offsetof(FRacerReactionRecord, TypeParam) == 0x000000, "Member 'FRacerReactionRecord::TypeParam' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionInfo_TableRow
// 0x0010 (0x0018 - 0x0008)
struct FRacerReactionInfo_TableRow final : public FTableRowBase
{
public:
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionId                              ID;                                                // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionPriority                        Priority;                                          // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CoolTime;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionSplitDispType                   SplitDispType;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRacerReactionInfo_TableRow) == 0x000008, "Wrong alignment on FRacerReactionInfo_TableRow");
static_assert(sizeof(FRacerReactionInfo_TableRow) == 0x000018, "Wrong size on FRacerReactionInfo_TableRow");
static_assert(offsetof(FRacerReactionInfo_TableRow, bIsValid) == 0x000008, "Member 'FRacerReactionInfo_TableRow::bIsValid' has a wrong offset!");
static_assert(offsetof(FRacerReactionInfo_TableRow, ID) == 0x000009, "Member 'FRacerReactionInfo_TableRow::ID' has a wrong offset!");
static_assert(offsetof(FRacerReactionInfo_TableRow, Priority) == 0x00000A, "Member 'FRacerReactionInfo_TableRow::Priority' has a wrong offset!");
static_assert(offsetof(FRacerReactionInfo_TableRow, CoolTime) == 0x00000C, "Member 'FRacerReactionInfo_TableRow::CoolTime' has a wrong offset!");
static_assert(offsetof(FRacerReactionInfo_TableRow, SplitDispType) == 0x000010, "Member 'FRacerReactionInfo_TableRow::SplitDispType' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionInfo
// 0x000C (0x000C - 0x0000)
struct FRacerReactionInfo final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionId                              ID;                                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionPriority                        Priority;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CoolTime;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionSplitDispType                   SplitDispType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRacerReactionInfo) == 0x000004, "Wrong alignment on FRacerReactionInfo");
static_assert(sizeof(FRacerReactionInfo) == 0x00000C, "Wrong size on FRacerReactionInfo");
static_assert(offsetof(FRacerReactionInfo, bIsValid) == 0x000000, "Member 'FRacerReactionInfo::bIsValid' has a wrong offset!");
static_assert(offsetof(FRacerReactionInfo, ID) == 0x000001, "Member 'FRacerReactionInfo::ID' has a wrong offset!");
static_assert(offsetof(FRacerReactionInfo, Priority) == 0x000002, "Member 'FRacerReactionInfo::Priority' has a wrong offset!");
static_assert(offsetof(FRacerReactionInfo, CoolTime) == 0x000004, "Member 'FRacerReactionInfo::CoolTime' has a wrong offset!");
static_assert(offsetof(FRacerReactionInfo, SplitDispType) == 0x000008, "Member 'FRacerReactionInfo::SplitDispType' has a wrong offset!");

// ScriptStruct UnionRun.RacerReactionText
// 0x00A0 (0x00A0 - 0x0000)
struct FRacerReactionText final
{
public:
	ERacerReactionId                              ID;                                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionVoiceType                       VoiceType;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     DriverId;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     RivalId;                                           // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     VoiceChrId;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundAtomCue>           CueVoiceId;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           CueVoiceId_Guest;                                  // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAtomCue>           CueVoiceId_Rival;                                  // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextTableId;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextId;                                            // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERacerReactionWindow                          WindowId;                                          // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDriverId                                     FaceId;                                            // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StageId;                                           // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRacerReactionText) == 0x000008, "Wrong alignment on FRacerReactionText");
static_assert(sizeof(FRacerReactionText) == 0x0000A0, "Wrong size on FRacerReactionText");
static_assert(offsetof(FRacerReactionText, ID) == 0x000000, "Member 'FRacerReactionText::ID' has a wrong offset!");
static_assert(offsetof(FRacerReactionText, VoiceType) == 0x000001, "Member 'FRacerReactionText::VoiceType' has a wrong offset!");
static_assert(offsetof(FRacerReactionText, DriverId) == 0x000002, "Member 'FRacerReactionText::DriverId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText, RivalId) == 0x000003, "Member 'FRacerReactionText::RivalId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText, VoiceChrId) == 0x000004, "Member 'FRacerReactionText::VoiceChrId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText, CueVoiceId) == 0x000008, "Member 'FRacerReactionText::CueVoiceId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText, CueVoiceId_Guest) == 0x000030, "Member 'FRacerReactionText::CueVoiceId_Guest' has a wrong offset!");
static_assert(offsetof(FRacerReactionText, CueVoiceId_Rival) == 0x000058, "Member 'FRacerReactionText::CueVoiceId_Rival' has a wrong offset!");
static_assert(offsetof(FRacerReactionText, TextTableId) == 0x000080, "Member 'FRacerReactionText::TextTableId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText, TextId) == 0x000088, "Member 'FRacerReactionText::TextId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText, WindowId) == 0x000098, "Member 'FRacerReactionText::WindowId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText, FaceId) == 0x000099, "Member 'FRacerReactionText::FaceId' has a wrong offset!");
static_assert(offsetof(FRacerReactionText, StageId) == 0x00009C, "Member 'FRacerReactionText::StageId' has a wrong offset!");

// ScriptStruct UnionRun.ReactionDirName_TableRow
// 0x0010 (0x0018 - 0x0008)
struct FReactionDirName_TableRow final : public FTableRowBase
{
public:
	TArray<struct FReactionDirName>               list;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReactionDirName_TableRow) == 0x000008, "Wrong alignment on FReactionDirName_TableRow");
static_assert(sizeof(FReactionDirName_TableRow) == 0x000018, "Wrong size on FReactionDirName_TableRow");
static_assert(offsetof(FReactionDirName_TableRow, list) == 0x000008, "Member 'FReactionDirName_TableRow::list' has a wrong offset!");

// ScriptStruct UnionRun.RankSort
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FRankSort final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankSort) == 0x000004, "Wrong alignment on FRankSort");
static_assert(sizeof(FRankSort) == 0x000008, "Wrong size on FRankSort");

// ScriptStruct UnionRun.FootCutParams
// 0x0008 (0x0008 - 0x0000)
struct FFootCutParams final
{
public:
	float                                         TriggerTopRate;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarpRate;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootCutParams) == 0x000004, "Wrong alignment on FFootCutParams");
static_assert(sizeof(FFootCutParams) == 0x000008, "Wrong size on FFootCutParams");
static_assert(offsetof(FFootCutParams, TriggerTopRate) == 0x000000, "Member 'FFootCutParams::TriggerTopRate' has a wrong offset!");
static_assert(offsetof(FFootCutParams, WarpRate) == 0x000004, "Member 'FFootCutParams::WarpRate' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceAppInfo
// 0x0001 (0x0001 - 0x0000)
struct FUnionRaceAppInfo final
{
public:
	bool                                          bIsPausing;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceAppInfo) == 0x000001, "Wrong alignment on FUnionRaceAppInfo");
static_assert(sizeof(FUnionRaceAppInfo) == 0x000001, "Wrong size on FUnionRaceAppInfo");
static_assert(offsetof(FUnionRaceAppInfo, bIsPausing) == 0x000000, "Member 'FUnionRaceAppInfo::bIsPausing' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceReturnDashParam
// 0x001C (0x001C - 0x0000)
struct FUnionRaceReturnDashParam final
{
public:
	float                                         RETURNDASH_SCORE_SUCCESSPIVOT_MIN;                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RETURNDASH_SCORE_SUCCESSPIVOT_MAX;                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RETURNDASH_SCORE_SUCCESSRANGE;                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RETURNDASH_SCORE_SPAWNOFFSET;                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RETURNDASH_SCORE_ACCELE;                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RETURNDASH_SCORE_RELEASE1;                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RETURNDASH_SCORE_RELEASE2;                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceReturnDashParam) == 0x000004, "Wrong alignment on FUnionRaceReturnDashParam");
static_assert(sizeof(FUnionRaceReturnDashParam) == 0x00001C, "Wrong size on FUnionRaceReturnDashParam");
static_assert(offsetof(FUnionRaceReturnDashParam, RETURNDASH_SCORE_SUCCESSPIVOT_MIN) == 0x000000, "Member 'FUnionRaceReturnDashParam::RETURNDASH_SCORE_SUCCESSPIVOT_MIN' has a wrong offset!");
static_assert(offsetof(FUnionRaceReturnDashParam, RETURNDASH_SCORE_SUCCESSPIVOT_MAX) == 0x000004, "Member 'FUnionRaceReturnDashParam::RETURNDASH_SCORE_SUCCESSPIVOT_MAX' has a wrong offset!");
static_assert(offsetof(FUnionRaceReturnDashParam, RETURNDASH_SCORE_SUCCESSRANGE) == 0x000008, "Member 'FUnionRaceReturnDashParam::RETURNDASH_SCORE_SUCCESSRANGE' has a wrong offset!");
static_assert(offsetof(FUnionRaceReturnDashParam, RETURNDASH_SCORE_SPAWNOFFSET) == 0x00000C, "Member 'FUnionRaceReturnDashParam::RETURNDASH_SCORE_SPAWNOFFSET' has a wrong offset!");
static_assert(offsetof(FUnionRaceReturnDashParam, RETURNDASH_SCORE_ACCELE) == 0x000010, "Member 'FUnionRaceReturnDashParam::RETURNDASH_SCORE_ACCELE' has a wrong offset!");
static_assert(offsetof(FUnionRaceReturnDashParam, RETURNDASH_SCORE_RELEASE1) == 0x000014, "Member 'FUnionRaceReturnDashParam::RETURNDASH_SCORE_RELEASE1' has a wrong offset!");
static_assert(offsetof(FUnionRaceReturnDashParam, RETURNDASH_SCORE_RELEASE2) == 0x000018, "Member 'FUnionRaceReturnDashParam::RETURNDASH_SCORE_RELEASE2' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceStateParam
// 0x00C0 (0x00C0 - 0x0000)
struct FUnionRaceStateParam final
{
public:
	struct FUnionRaceTime                         RaceWholeTime;                                     // 0x0000(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ERaceInfoStateType                            RaceStatus;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CountDownValue;                                    // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RacerCount;                                        // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpeedClass;                                        // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            RacerIndexRankMap;                                 // 0x0020(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            RacerIndexWorldMap;                                // 0x0070(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceStateParam) == 0x000008, "Wrong alignment on FUnionRaceStateParam");
static_assert(sizeof(FUnionRaceStateParam) == 0x0000C0, "Wrong size on FUnionRaceStateParam");
static_assert(offsetof(FUnionRaceStateParam, RaceWholeTime) == 0x000000, "Member 'FUnionRaceStateParam::RaceWholeTime' has a wrong offset!");
static_assert(offsetof(FUnionRaceStateParam, RaceStatus) == 0x000010, "Member 'FUnionRaceStateParam::RaceStatus' has a wrong offset!");
static_assert(offsetof(FUnionRaceStateParam, CountDownValue) == 0x000014, "Member 'FUnionRaceStateParam::CountDownValue' has a wrong offset!");
static_assert(offsetof(FUnionRaceStateParam, RacerCount) == 0x000018, "Member 'FUnionRaceStateParam::RacerCount' has a wrong offset!");
static_assert(offsetof(FUnionRaceStateParam, SpeedClass) == 0x00001C, "Member 'FUnionRaceStateParam::SpeedClass' has a wrong offset!");
static_assert(offsetof(FUnionRaceStateParam, RacerIndexRankMap) == 0x000020, "Member 'FUnionRaceStateParam::RacerIndexRankMap' has a wrong offset!");
static_assert(offsetof(FUnionRaceStateParam, RacerIndexWorldMap) == 0x000070, "Member 'FUnionRaceStateParam::RacerIndexWorldMap' has a wrong offset!");

// ScriptStruct UnionRun.PredictTestInfo
// 0x0008 (0x0008 - 0x0000)
struct FPredictTestInfo final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TestCaseIndex;                                     // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPredictTestInfo) == 0x000004, "Wrong alignment on FPredictTestInfo");
static_assert(sizeof(FPredictTestInfo) == 0x000008, "Wrong size on FPredictTestInfo");
static_assert(offsetof(FPredictTestInfo, bIsEnable) == 0x000000, "Member 'FPredictTestInfo::bIsEnable' has a wrong offset!");
static_assert(offsetof(FPredictTestInfo, TestCaseIndex) == 0x000004, "Member 'FPredictTestInfo::TestCaseIndex' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceDebugParam
// 0x00A0 (0x00A0 - 0x0000)
struct FUnionRaceDebugParam final
{
public:
	ELotteryTableType                             DbgLotteryTableType;                               // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyLocalPlayer;                                 // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyAllPlayer;                                   // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnCourseEditor;                                 // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnionRaceOverwriteStartTransform      OverwriteStartTransform;                           // 0x0010(0x0070)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         GenericParameter;                                  // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDebugFinalLap;                                  // 0x0084(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRaceTestMode;                                   // 0x0085(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RaceTestConfigName;                                // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictTestInfo                       PredictTestInfo;                                   // 0x0098(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceDebugParam) == 0x000010, "Wrong alignment on FUnionRaceDebugParam");
static_assert(sizeof(FUnionRaceDebugParam) == 0x0000A0, "Wrong size on FUnionRaceDebugParam");
static_assert(offsetof(FUnionRaceDebugParam, DbgLotteryTableType) == 0x000000, "Member 'FUnionRaceDebugParam::DbgLotteryTableType' has a wrong offset!");
static_assert(offsetof(FUnionRaceDebugParam, bApplyLocalPlayer) == 0x000001, "Member 'FUnionRaceDebugParam::bApplyLocalPlayer' has a wrong offset!");
static_assert(offsetof(FUnionRaceDebugParam, bApplyAllPlayer) == 0x000002, "Member 'FUnionRaceDebugParam::bApplyAllPlayer' has a wrong offset!");
static_assert(offsetof(FUnionRaceDebugParam, bIsOnCourseEditor) == 0x000003, "Member 'FUnionRaceDebugParam::bIsOnCourseEditor' has a wrong offset!");
static_assert(offsetof(FUnionRaceDebugParam, OverwriteStartTransform) == 0x000010, "Member 'FUnionRaceDebugParam::OverwriteStartTransform' has a wrong offset!");
static_assert(offsetof(FUnionRaceDebugParam, GenericParameter) == 0x000080, "Member 'FUnionRaceDebugParam::GenericParameter' has a wrong offset!");
static_assert(offsetof(FUnionRaceDebugParam, bIsDebugFinalLap) == 0x000084, "Member 'FUnionRaceDebugParam::bIsDebugFinalLap' has a wrong offset!");
static_assert(offsetof(FUnionRaceDebugParam, bIsRaceTestMode) == 0x000085, "Member 'FUnionRaceDebugParam::bIsRaceTestMode' has a wrong offset!");
static_assert(offsetof(FUnionRaceDebugParam, RaceTestConfigName) == 0x000088, "Member 'FUnionRaceDebugParam::RaceTestConfigName' has a wrong offset!");
static_assert(offsetof(FUnionRaceDebugParam, PredictTestInfo) == 0x000098, "Member 'FUnionRaceDebugParam::PredictTestInfo' has a wrong offset!");

// ScriptStruct UnionRun.UnionJukeboxRaceBGM
// 0x0010 (0x0010 - 0x0000)
struct FUnionJukeboxRaceBGM final
{
public:
	TArray<struct FUnionJukeboxRaceBGMLapInfo>    LapInfo;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionJukeboxRaceBGM) == 0x000008, "Wrong alignment on FUnionJukeboxRaceBGM");
static_assert(sizeof(FUnionJukeboxRaceBGM) == 0x000010, "Wrong size on FUnionJukeboxRaceBGM");
static_assert(offsetof(FUnionJukeboxRaceBGM, LapInfo) == 0x000000, "Member 'FUnionJukeboxRaceBGM::LapInfo' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceCreateParam
// 0x0280 (0x0280 - 0x0000)
struct FUnionRaceCreateParam final
{
public:
	EGrandPrixId                                  GrandPrixId;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyRacePreset                              RaceParkPreset;                                    // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceType                                     RaceType;                                          // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomRaceSetting                     CustomRaceSetting;                                 // 0x0008(0x0120)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTimeTrialSetting                      TimeTrialSetting;                                  // 0x0128(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	EGameModeId                                   GameModeID;                                        // 0x0158(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LocalPlayerCount;                                  // 0x015C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RacerCount;                                        // 0x0160(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpeedClassId                                 SpeedClass;                                        // 0x0164(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceMirrorSetting                            RaceMirrorSetting;                                 // 0x0165(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_166[0x2];                                      // 0x0166(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnionRaceStartDashParam               StartDashParam;                                    // 0x0168(0x0030)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FUnionJukeboxRaceBGM                   JukeboxRaceBGM;                                    // 0x0198(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          GPFinalRandomMain;                                 // 0x01A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnionRaceDebugParam                   DebugParam;                                        // 0x01B0(0x00A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         P2PRaceTimeOut;                                    // 0x0250(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P2PUnstableTime;                                   // 0x0254(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EGadgetId>                             RaceDisableGadgetList;                             // 0x0258(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EGadgetId>                             AdditionalGadgetList;                              // 0x0268(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionRaceCreateParam) == 0x000010, "Wrong alignment on FUnionRaceCreateParam");
static_assert(sizeof(FUnionRaceCreateParam) == 0x000280, "Wrong size on FUnionRaceCreateParam");
static_assert(offsetof(FUnionRaceCreateParam, GrandPrixId) == 0x000000, "Member 'FUnionRaceCreateParam::GrandPrixId' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, RaceParkPreset) == 0x000001, "Member 'FUnionRaceCreateParam::RaceParkPreset' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, RaceType) == 0x000002, "Member 'FUnionRaceCreateParam::RaceType' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, CustomRaceSetting) == 0x000008, "Member 'FUnionRaceCreateParam::CustomRaceSetting' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, TimeTrialSetting) == 0x000128, "Member 'FUnionRaceCreateParam::TimeTrialSetting' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, GameModeID) == 0x000158, "Member 'FUnionRaceCreateParam::GameModeID' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, LocalPlayerCount) == 0x00015C, "Member 'FUnionRaceCreateParam::LocalPlayerCount' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, RacerCount) == 0x000160, "Member 'FUnionRaceCreateParam::RacerCount' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, SpeedClass) == 0x000164, "Member 'FUnionRaceCreateParam::SpeedClass' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, RaceMirrorSetting) == 0x000165, "Member 'FUnionRaceCreateParam::RaceMirrorSetting' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, StartDashParam) == 0x000168, "Member 'FUnionRaceCreateParam::StartDashParam' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, JukeboxRaceBGM) == 0x000198, "Member 'FUnionRaceCreateParam::JukeboxRaceBGM' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, GPFinalRandomMain) == 0x0001A8, "Member 'FUnionRaceCreateParam::GPFinalRandomMain' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, DebugParam) == 0x0001B0, "Member 'FUnionRaceCreateParam::DebugParam' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, P2PRaceTimeOut) == 0x000250, "Member 'FUnionRaceCreateParam::P2PRaceTimeOut' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, P2PUnstableTime) == 0x000254, "Member 'FUnionRaceCreateParam::P2PUnstableTime' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, RaceDisableGadgetList) == 0x000258, "Member 'FUnionRaceCreateParam::RaceDisableGadgetList' has a wrong offset!");
static_assert(offsetof(FUnionRaceCreateParam, AdditionalGadgetList) == 0x000268, "Member 'FUnionRaceCreateParam::AdditionalGadgetList' has a wrong offset!");

// ScriptStruct UnionRun.CustomComSpeedComLevel
// 0x0020 (0x0028 - 0x0008)
struct FCustomComSpeedComLevel final : public FTableRowBase
{
public:
	ERaceSettingGrouping                          RaceSettingGrouping;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERaceSettingComSpeed                          ComSpeedLevel;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NomalLv;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighLv;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SonicLv;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperSonicLv;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MirrorLv;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComLotteryRateDataTableType                  ItemTable;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComPointDistanceTableType                    ItemDist;                                          // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomComSpeedComLevel) == 0x000008, "Wrong alignment on FCustomComSpeedComLevel");
static_assert(sizeof(FCustomComSpeedComLevel) == 0x000028, "Wrong size on FCustomComSpeedComLevel");
static_assert(offsetof(FCustomComSpeedComLevel, RaceSettingGrouping) == 0x000008, "Member 'FCustomComSpeedComLevel::RaceSettingGrouping' has a wrong offset!");
static_assert(offsetof(FCustomComSpeedComLevel, ComSpeedLevel) == 0x000009, "Member 'FCustomComSpeedComLevel::ComSpeedLevel' has a wrong offset!");
static_assert(offsetof(FCustomComSpeedComLevel, NomalLv) == 0x00000C, "Member 'FCustomComSpeedComLevel::NomalLv' has a wrong offset!");
static_assert(offsetof(FCustomComSpeedComLevel, HighLv) == 0x000010, "Member 'FCustomComSpeedComLevel::HighLv' has a wrong offset!");
static_assert(offsetof(FCustomComSpeedComLevel, SonicLv) == 0x000014, "Member 'FCustomComSpeedComLevel::SonicLv' has a wrong offset!");
static_assert(offsetof(FCustomComSpeedComLevel, SuperSonicLv) == 0x000018, "Member 'FCustomComSpeedComLevel::SuperSonicLv' has a wrong offset!");
static_assert(offsetof(FCustomComSpeedComLevel, MirrorLv) == 0x00001C, "Member 'FCustomComSpeedComLevel::MirrorLv' has a wrong offset!");
static_assert(offsetof(FCustomComSpeedComLevel, ItemTable) == 0x000020, "Member 'FCustomComSpeedComLevel::ItemTable' has a wrong offset!");
static_assert(offsetof(FCustomComSpeedComLevel, ItemDist) == 0x000021, "Member 'FCustomComSpeedComLevel::ItemDist' has a wrong offset!");

// ScriptStruct UnionRun.RankComLevel
// 0x0020 (0x0028 - 0x0008)
struct FRankComLevel final : public FTableRowBase
{
public:
	int32                                         Rank;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NomalLv;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighLv;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SonicLv;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperSonicLv;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MirrorLv;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComLotteryRateDataTableType                  ItemTable;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComPointDistanceTableType                    ItemDist;                                          // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankComLevel) == 0x000008, "Wrong alignment on FRankComLevel");
static_assert(sizeof(FRankComLevel) == 0x000028, "Wrong size on FRankComLevel");
static_assert(offsetof(FRankComLevel, Rank) == 0x000008, "Member 'FRankComLevel::Rank' has a wrong offset!");
static_assert(offsetof(FRankComLevel, NomalLv) == 0x00000C, "Member 'FRankComLevel::NomalLv' has a wrong offset!");
static_assert(offsetof(FRankComLevel, HighLv) == 0x000010, "Member 'FRankComLevel::HighLv' has a wrong offset!");
static_assert(offsetof(FRankComLevel, SonicLv) == 0x000014, "Member 'FRankComLevel::SonicLv' has a wrong offset!");
static_assert(offsetof(FRankComLevel, SuperSonicLv) == 0x000018, "Member 'FRankComLevel::SuperSonicLv' has a wrong offset!");
static_assert(offsetof(FRankComLevel, MirrorLv) == 0x00001C, "Member 'FRankComLevel::MirrorLv' has a wrong offset!");
static_assert(offsetof(FRankComLevel, ItemTable) == 0x000020, "Member 'FRankComLevel::ItemTable' has a wrong offset!");
static_assert(offsetof(FRankComLevel, ItemDist) == 0x000021, "Member 'FRankComLevel::ItemDist' has a wrong offset!");

// ScriptStruct UnionRun.ComAvoidParams
// 0x0010 (0x0010 - 0x0000)
struct FComAvoidParams final
{
public:
	float                                         CarWidth;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvoidMargin;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThornBallAvoidWidth;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagnetAvoidWidth;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComAvoidParams) == 0x000004, "Wrong alignment on FComAvoidParams");
static_assert(sizeof(FComAvoidParams) == 0x000010, "Wrong size on FComAvoidParams");
static_assert(offsetof(FComAvoidParams, CarWidth) == 0x000000, "Member 'FComAvoidParams::CarWidth' has a wrong offset!");
static_assert(offsetof(FComAvoidParams, AvoidMargin) == 0x000004, "Member 'FComAvoidParams::AvoidMargin' has a wrong offset!");
static_assert(offsetof(FComAvoidParams, ThornBallAvoidWidth) == 0x000008, "Member 'FComAvoidParams::ThornBallAvoidWidth' has a wrong offset!");
static_assert(offsetof(FComAvoidParams, MagnetAvoidWidth) == 0x00000C, "Member 'FComAvoidParams::MagnetAvoidWidth' has a wrong offset!");

// ScriptStruct UnionRun.ComSlimeCancelParams
// 0x0008 (0x0008 - 0x0000)
struct FComSlimeCancelParams final
{
public:
	float                                         LineChangeRatio;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineChangePerFrame;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComSlimeCancelParams) == 0x000004, "Wrong alignment on FComSlimeCancelParams");
static_assert(sizeof(FComSlimeCancelParams) == 0x000008, "Wrong size on FComSlimeCancelParams");
static_assert(offsetof(FComSlimeCancelParams, LineChangeRatio) == 0x000000, "Member 'FComSlimeCancelParams::LineChangeRatio' has a wrong offset!");
static_assert(offsetof(FComSlimeCancelParams, LineChangePerFrame) == 0x000004, "Member 'FComSlimeCancelParams::LineChangePerFrame' has a wrong offset!");

// ScriptStruct UnionRun.ComLotteryParams
// 0x0004 (0x0004 - 0x0000)
struct FComLotteryParams final
{
public:
	int32                                         SpecialTypeSlotRank;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComLotteryParams) == 0x000004, "Wrong alignment on FComLotteryParams");
static_assert(sizeof(FComLotteryParams) == 0x000004, "Wrong size on FComLotteryParams");
static_assert(offsetof(FComLotteryParams, SpecialTypeSlotRank) == 0x000000, "Member 'FComLotteryParams::SpecialTypeSlotRank' has a wrong offset!");

// ScriptStruct UnionRun.ComPaceParams
// 0x0034 (0x0034 - 0x0000)
struct FComPaceParams final
{
public:
	float                                         base;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseSlow;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseStart;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDash3;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDash2;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDash1;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDash0;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDashMiss;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinePosMin;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinePosMax;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortcutRatio;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemSkillLv;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseToStart;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComPaceParams) == 0x000004, "Wrong alignment on FComPaceParams");
static_assert(sizeof(FComPaceParams) == 0x000034, "Wrong size on FComPaceParams");
static_assert(offsetof(FComPaceParams, base) == 0x000000, "Member 'FComPaceParams::base' has a wrong offset!");
static_assert(offsetof(FComPaceParams, BaseSlow) == 0x000004, "Member 'FComPaceParams::BaseSlow' has a wrong offset!");
static_assert(offsetof(FComPaceParams, BaseStart) == 0x000008, "Member 'FComPaceParams::BaseStart' has a wrong offset!");
static_assert(offsetof(FComPaceParams, StartDash3) == 0x00000C, "Member 'FComPaceParams::StartDash3' has a wrong offset!");
static_assert(offsetof(FComPaceParams, StartDash2) == 0x000010, "Member 'FComPaceParams::StartDash2' has a wrong offset!");
static_assert(offsetof(FComPaceParams, StartDash1) == 0x000014, "Member 'FComPaceParams::StartDash1' has a wrong offset!");
static_assert(offsetof(FComPaceParams, StartDash0) == 0x000018, "Member 'FComPaceParams::StartDash0' has a wrong offset!");
static_assert(offsetof(FComPaceParams, StartDashMiss) == 0x00001C, "Member 'FComPaceParams::StartDashMiss' has a wrong offset!");
static_assert(offsetof(FComPaceParams, LinePosMin) == 0x000020, "Member 'FComPaceParams::LinePosMin' has a wrong offset!");
static_assert(offsetof(FComPaceParams, LinePosMax) == 0x000024, "Member 'FComPaceParams::LinePosMax' has a wrong offset!");
static_assert(offsetof(FComPaceParams, ShortcutRatio) == 0x000028, "Member 'FComPaceParams::ShortcutRatio' has a wrong offset!");
static_assert(offsetof(FComPaceParams, ItemSkillLv) == 0x00002C, "Member 'FComPaceParams::ItemSkillLv' has a wrong offset!");
static_assert(offsetof(FComPaceParams, CloseToStart) == 0x000030, "Member 'FComPaceParams::CloseToStart' has a wrong offset!");

// ScriptStruct UnionRun.ComLevelParams
// 0x02E8 (0x02F0 - 0x0008)
struct FComLevelParams final : public FTableRowBase
{
public:
	int32                                         ComLv;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPace;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FComPaceParams                         BotPace;                                           // 0x0010(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComPaceParams                         Rank1Pace;                                         // 0x0044(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComPaceParams                         Rank2Pace;                                         // 0x0078(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComPaceParams                         Rank3Pace;                                         // 0x00AC(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComPaceParams                         Rank4Pace;                                         // 0x00E0(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComPaceParams                         Rank5Pace;                                         // 0x0114(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComPaceParams                         Rank6Pace;                                         // 0x0148(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComPaceParams                         Rank7Pace;                                         // 0x017C(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComPaceParams                         Rank8Pace;                                         // 0x01B0(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComPaceParams                         Rank9Pace;                                         // 0x01E4(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComPaceParams                         Rank10Pace;                                        // 0x0218(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComPaceParams                         Rank11Pace;                                        // 0x024C(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FComBranchRingParams                   BranchRing;                                        // 0x0280(0x0044)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RingFaceRatio;                                     // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseToTravel;                                     // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseToTravelItem;                                 // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseToLap3;                                       // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseToEnd;                                        // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseToEndItem;                                    // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaceDownLowerDist;                                 // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaceDownValue;                                     // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RivalPaceUpTopDist;                                // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RivalPaceUpValue;                                  // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlimeCancelPace;                                   // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComLevelParams) == 0x000008, "Wrong alignment on FComLevelParams");
static_assert(sizeof(FComLevelParams) == 0x0002F0, "Wrong size on FComLevelParams");
static_assert(offsetof(FComLevelParams, ComLv) == 0x000008, "Member 'FComLevelParams::ComLv' has a wrong offset!");
static_assert(offsetof(FComLevelParams, MinPace) == 0x00000C, "Member 'FComLevelParams::MinPace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, BotPace) == 0x000010, "Member 'FComLevelParams::BotPace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, Rank1Pace) == 0x000044, "Member 'FComLevelParams::Rank1Pace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, Rank2Pace) == 0x000078, "Member 'FComLevelParams::Rank2Pace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, Rank3Pace) == 0x0000AC, "Member 'FComLevelParams::Rank3Pace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, Rank4Pace) == 0x0000E0, "Member 'FComLevelParams::Rank4Pace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, Rank5Pace) == 0x000114, "Member 'FComLevelParams::Rank5Pace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, Rank6Pace) == 0x000148, "Member 'FComLevelParams::Rank6Pace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, Rank7Pace) == 0x00017C, "Member 'FComLevelParams::Rank7Pace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, Rank8Pace) == 0x0001B0, "Member 'FComLevelParams::Rank8Pace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, Rank9Pace) == 0x0001E4, "Member 'FComLevelParams::Rank9Pace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, Rank10Pace) == 0x000218, "Member 'FComLevelParams::Rank10Pace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, Rank11Pace) == 0x00024C, "Member 'FComLevelParams::Rank11Pace' has a wrong offset!");
static_assert(offsetof(FComLevelParams, BranchRing) == 0x000280, "Member 'FComLevelParams::BranchRing' has a wrong offset!");
static_assert(offsetof(FComLevelParams, RingFaceRatio) == 0x0002C4, "Member 'FComLevelParams::RingFaceRatio' has a wrong offset!");
static_assert(offsetof(FComLevelParams, CloseToTravel) == 0x0002C8, "Member 'FComLevelParams::CloseToTravel' has a wrong offset!");
static_assert(offsetof(FComLevelParams, CloseToTravelItem) == 0x0002CC, "Member 'FComLevelParams::CloseToTravelItem' has a wrong offset!");
static_assert(offsetof(FComLevelParams, CloseToLap3) == 0x0002D0, "Member 'FComLevelParams::CloseToLap3' has a wrong offset!");
static_assert(offsetof(FComLevelParams, CloseToEnd) == 0x0002D4, "Member 'FComLevelParams::CloseToEnd' has a wrong offset!");
static_assert(offsetof(FComLevelParams, CloseToEndItem) == 0x0002D8, "Member 'FComLevelParams::CloseToEndItem' has a wrong offset!");
static_assert(offsetof(FComLevelParams, PaceDownLowerDist) == 0x0002DC, "Member 'FComLevelParams::PaceDownLowerDist' has a wrong offset!");
static_assert(offsetof(FComLevelParams, PaceDownValue) == 0x0002E0, "Member 'FComLevelParams::PaceDownValue' has a wrong offset!");
static_assert(offsetof(FComLevelParams, RivalPaceUpTopDist) == 0x0002E4, "Member 'FComLevelParams::RivalPaceUpTopDist' has a wrong offset!");
static_assert(offsetof(FComLevelParams, RivalPaceUpValue) == 0x0002E8, "Member 'FComLevelParams::RivalPaceUpValue' has a wrong offset!");
static_assert(offsetof(FComLevelParams, SlimeCancelPace) == 0x0002EC, "Member 'FComLevelParams::SlimeCancelPace' has a wrong offset!");

// ScriptStruct UnionRun.DriverTier
// 0x0008 (0x0010 - 0x0008)
struct FDriverTier final : public FTableRowBase
{
public:
	EDriverId                                     DriverId;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Tier;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDriverTier) == 0x000008, "Wrong alignment on FDriverTier");
static_assert(sizeof(FDriverTier) == 0x000010, "Wrong size on FDriverTier");
static_assert(offsetof(FDriverTier, DriverId) == 0x000008, "Member 'FDriverTier::DriverId' has a wrong offset!");
static_assert(offsetof(FDriverTier, Tier) == 0x00000C, "Member 'FDriverTier::Tier' has a wrong offset!");

// ScriptStruct UnionRun.FakeComName
// 0x0018 (0x0020 - 0x0008)
struct FFakeComName final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESupportedCulture                             Language;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFakeComName) == 0x000008, "Wrong alignment on FFakeComName");
static_assert(sizeof(FFakeComName) == 0x000020, "Wrong size on FFakeComName");
static_assert(offsetof(FFakeComName, Name) == 0x000008, "Member 'FFakeComName::Name' has a wrong offset!");
static_assert(offsetof(FFakeComName, Language) == 0x000018, "Member 'FFakeComName::Language' has a wrong offset!");

// ScriptStruct UnionRun.ComPresetGadget
// 0x0010 (0x0018 - 0x0008)
struct FComPresetGadget final : public FTableRowBase
{
public:
	int32                                         GadgetEquipGr;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGadgetId                                     Slot1;                                             // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGadgetId                                     Slot2;                                             // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGadgetId                                     Slot3;                                             // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGadgetId                                     Slot4;                                             // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGadgetId                                     Slot5;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGadgetId                                     Slot6;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComPresetGadget) == 0x000008, "Wrong alignment on FComPresetGadget");
static_assert(sizeof(FComPresetGadget) == 0x000018, "Wrong size on FComPresetGadget");
static_assert(offsetof(FComPresetGadget, GadgetEquipGr) == 0x000008, "Member 'FComPresetGadget::GadgetEquipGr' has a wrong offset!");
static_assert(offsetof(FComPresetGadget, Slot1) == 0x00000C, "Member 'FComPresetGadget::Slot1' has a wrong offset!");
static_assert(offsetof(FComPresetGadget, Slot2) == 0x00000D, "Member 'FComPresetGadget::Slot2' has a wrong offset!");
static_assert(offsetof(FComPresetGadget, Slot3) == 0x00000E, "Member 'FComPresetGadget::Slot3' has a wrong offset!");
static_assert(offsetof(FComPresetGadget, Slot4) == 0x00000F, "Member 'FComPresetGadget::Slot4' has a wrong offset!");
static_assert(offsetof(FComPresetGadget, Slot5) == 0x000010, "Member 'FComPresetGadget::Slot5' has a wrong offset!");
static_assert(offsetof(FComPresetGadget, Slot6) == 0x000011, "Member 'FComPresetGadget::Slot6' has a wrong offset!");

// ScriptStruct UnionRun.ComUseGadget
// 0x0018 (0x0020 - 0x0008)
struct FComUseGadget final : public FTableRowBase
{
public:
	int32                                         GadgetEquipGr;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GadgetSlotSize;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EGadgetId>                             ComUseGadget;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComUseGadget) == 0x000008, "Wrong alignment on FComUseGadget");
static_assert(sizeof(FComUseGadget) == 0x000020, "Wrong size on FComUseGadget");
static_assert(offsetof(FComUseGadget, GadgetEquipGr) == 0x000008, "Member 'FComUseGadget::GadgetEquipGr' has a wrong offset!");
static_assert(offsetof(FComUseGadget, GadgetSlotSize) == 0x00000C, "Member 'FComUseGadget::GadgetSlotSize' has a wrong offset!");
static_assert(offsetof(FComUseGadget, ComUseGadget) == 0x000010, "Member 'FComUseGadget::ComUseGadget' has a wrong offset!");

// ScriptStruct UnionRun.ComGadgetEquipRivalLevel
// 0x0028 (0x0030 - 0x0008)
struct FComGadgetEquipRivalLevel final : public FTableRowBase
{
public:
	int32                                         RivalLevel;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComGadgetEquipTableSetting            RivalRacerGadget;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FComGadgetEquipTableSetting            NormalRacerGadget;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComGadgetEquipRivalLevel) == 0x000008, "Wrong alignment on FComGadgetEquipRivalLevel");
static_assert(sizeof(FComGadgetEquipRivalLevel) == 0x000030, "Wrong size on FComGadgetEquipRivalLevel");
static_assert(offsetof(FComGadgetEquipRivalLevel, RivalLevel) == 0x000008, "Member 'FComGadgetEquipRivalLevel::RivalLevel' has a wrong offset!");
static_assert(offsetof(FComGadgetEquipRivalLevel, RivalRacerGadget) == 0x000010, "Member 'FComGadgetEquipRivalLevel::RivalRacerGadget' has a wrong offset!");
static_assert(offsetof(FComGadgetEquipRivalLevel, NormalRacerGadget) == 0x000020, "Member 'FComGadgetEquipRivalLevel::NormalRacerGadget' has a wrong offset!");

// ScriptStruct UnionRun.ComGadgetEquipRivalTeamAndLevel
// 0x0028 (0x0030 - 0x0008)
struct FComGadgetEquipRivalTeamAndLevel final : public FTableRowBase
{
public:
	ERivalTeamId                                  RivalTeam;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComGadgetEquipTableSetting            RivalRacerGadget;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FComGadgetEquipTableSetting            NormalRacerGadget;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComGadgetEquipRivalTeamAndLevel) == 0x000008, "Wrong alignment on FComGadgetEquipRivalTeamAndLevel");
static_assert(sizeof(FComGadgetEquipRivalTeamAndLevel) == 0x000030, "Wrong size on FComGadgetEquipRivalTeamAndLevel");
static_assert(offsetof(FComGadgetEquipRivalTeamAndLevel, RivalTeam) == 0x000008, "Member 'FComGadgetEquipRivalTeamAndLevel::RivalTeam' has a wrong offset!");
static_assert(offsetof(FComGadgetEquipRivalTeamAndLevel, RivalRacerGadget) == 0x000010, "Member 'FComGadgetEquipRivalTeamAndLevel::RivalRacerGadget' has a wrong offset!");
static_assert(offsetof(FComGadgetEquipRivalTeamAndLevel, NormalRacerGadget) == 0x000020, "Member 'FComGadgetEquipRivalTeamAndLevel::NormalRacerGadget' has a wrong offset!");

// ScriptStruct UnionRun.ComGadgetEquipComSpeedLevel
// 0x0018 (0x0020 - 0x0008)
struct FComGadgetEquipComSpeedLevel final : public FTableRowBase
{
public:
	ERaceSettingComSpeed                          ComSpeedLevel;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComGadgetEquipTableSetting            NormalRacerGadget;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComGadgetEquipComSpeedLevel) == 0x000008, "Wrong alignment on FComGadgetEquipComSpeedLevel");
static_assert(sizeof(FComGadgetEquipComSpeedLevel) == 0x000020, "Wrong size on FComGadgetEquipComSpeedLevel");
static_assert(offsetof(FComGadgetEquipComSpeedLevel, ComSpeedLevel) == 0x000008, "Member 'FComGadgetEquipComSpeedLevel::ComSpeedLevel' has a wrong offset!");
static_assert(offsetof(FComGadgetEquipComSpeedLevel, NormalRacerGadget) == 0x000010, "Member 'FComGadgetEquipComSpeedLevel::NormalRacerGadget' has a wrong offset!");

// ScriptStruct UnionRun.ComGadgetEquipRank
// 0x0018 (0x0020 - 0x0008)
struct FComGadgetEquipRank final : public FTableRowBase
{
public:
	int32                                         Rank;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComGadgetEquipTableSetting            NormalRacerGadget;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComGadgetEquipRank) == 0x000008, "Wrong alignment on FComGadgetEquipRank");
static_assert(sizeof(FComGadgetEquipRank) == 0x000020, "Wrong size on FComGadgetEquipRank");
static_assert(offsetof(FComGadgetEquipRank, Rank) == 0x000008, "Member 'FComGadgetEquipRank::Rank' has a wrong offset!");
static_assert(offsetof(FComGadgetEquipRank, NormalRacerGadget) == 0x000010, "Member 'FComGadgetEquipRank::NormalRacerGadget' has a wrong offset!");

// ScriptStruct UnionRun.ComGadgetEquipFestaRaceRule
// 0x0018 (0x0020 - 0x0008)
struct FComGadgetEquipFestaRaceRule final : public FTableRowBase
{
public:
	EGroupRaceRule                                FestaRule;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComGadgetEquipTableSetting            NormalRacerGadget;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComGadgetEquipFestaRaceRule) == 0x000008, "Wrong alignment on FComGadgetEquipFestaRaceRule");
static_assert(sizeof(FComGadgetEquipFestaRaceRule) == 0x000020, "Wrong size on FComGadgetEquipFestaRaceRule");
static_assert(offsetof(FComGadgetEquipFestaRaceRule, FestaRule) == 0x000008, "Member 'FComGadgetEquipFestaRaceRule::FestaRule' has a wrong offset!");
static_assert(offsetof(FComGadgetEquipFestaRaceRule, NormalRacerGadget) == 0x000010, "Member 'FComGadgetEquipFestaRaceRule::NormalRacerGadget' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceHUDWarningPerPlayer
// 0x0018 (0x0018 - 0x0000)
struct FUnionRaceHUDWarningPerPlayer final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URaceUISubApproachWarning*>      WarningInfoWidget;                                 // 0x0008(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceHUDWarningPerPlayer) == 0x000008, "Wrong alignment on FUnionRaceHUDWarningPerPlayer");
static_assert(sizeof(FUnionRaceHUDWarningPerPlayer) == 0x000018, "Wrong size on FUnionRaceHUDWarningPerPlayer");
static_assert(offsetof(FUnionRaceHUDWarningPerPlayer, WarningInfoWidget) == 0x000008, "Member 'FUnionRaceHUDWarningPerPlayer::WarningInfoWidget' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceHUDWarning
// 0x0010 (0x0010 - 0x0000)
struct FUnionRaceHUDWarning final
{
public:
	TArray<class URaceUISubApproachWarning*>      WarningInfoWidget;                                 // 0x0000(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceHUDWarning) == 0x000008, "Wrong alignment on FUnionRaceHUDWarning");
static_assert(sizeof(FUnionRaceHUDWarning) == 0x000010, "Wrong size on FUnionRaceHUDWarning");
static_assert(offsetof(FUnionRaceHUDWarning, WarningInfoWidget) == 0x000000, "Member 'FUnionRaceHUDWarning::WarningInfoWidget' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceHUDItemIcons
// 0x0018 (0x0018 - 0x0000)
struct FUnionRaceHUDItemIcons final
{
public:
	EUnionRaceHUDItemIconsState                   ItemIconsState;                                    // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URaceUISubItemIcon*                     ItemIconMain;                                      // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URaceUISubItemIcon*                     ItemIconSub;                                       // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceHUDItemIcons) == 0x000008, "Wrong alignment on FUnionRaceHUDItemIcons");
static_assert(sizeof(FUnionRaceHUDItemIcons) == 0x000018, "Wrong size on FUnionRaceHUDItemIcons");
static_assert(offsetof(FUnionRaceHUDItemIcons, ItemIconsState) == 0x000000, "Member 'FUnionRaceHUDItemIcons::ItemIconsState' has a wrong offset!");
static_assert(offsetof(FUnionRaceHUDItemIcons, ItemIconMain) == 0x000008, "Member 'FUnionRaceHUDItemIcons::ItemIconMain' has a wrong offset!");
static_assert(offsetof(FUnionRaceHUDItemIcons, ItemIconSub) == 0x000010, "Member 'FUnionRaceHUDItemIcons::ItemIconSub' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceHUDGroupRingUI
// 0x0010 (0x0010 - 0x0000)
struct FUnionRaceHUDGroupRingUI final
{
public:
	TArray<class URaceUISubGroupRing*>            RingCountUI;                                       // 0x0000(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceHUDGroupRingUI) == 0x000008, "Wrong alignment on FUnionRaceHUDGroupRingUI");
static_assert(sizeof(FUnionRaceHUDGroupRingUI) == 0x000010, "Wrong size on FUnionRaceHUDGroupRingUI");
static_assert(offsetof(FUnionRaceHUDGroupRingUI, RingCountUI) == 0x000000, "Member 'FUnionRaceHUDGroupRingUI::RingCountUI' has a wrong offset!");

// ScriptStruct UnionRun.UnionRaceHUDPlayerNameUI
// 0x0010 (0x0010 - 0x0000)
struct FUnionRaceHUDPlayerNameUI final
{
public:
	TArray<class URaceUISubPlayerName*>           PlayerNameUI;                                      // 0x0000(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRaceHUDPlayerNameUI) == 0x000008, "Wrong alignment on FUnionRaceHUDPlayerNameUI");
static_assert(sizeof(FUnionRaceHUDPlayerNameUI) == 0x000010, "Wrong size on FUnionRaceHUDPlayerNameUI");
static_assert(offsetof(FUnionRaceHUDPlayerNameUI, PlayerNameUI) == 0x000000, "Member 'FUnionRaceHUDPlayerNameUI::PlayerNameUI' has a wrong offset!");

// ScriptStruct UnionRun.FestaRacerContribution
// 0x0014 (0x0014 - 0x0000)
struct FFestaRacerContribution final
{
public:
	int32                                         RacerIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TractionTimes;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTractionTimes1st;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BonusPoint;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBonusPoint1st;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFestaRacerContribution) == 0x000004, "Wrong alignment on FFestaRacerContribution");
static_assert(sizeof(FFestaRacerContribution) == 0x000014, "Wrong size on FFestaRacerContribution");
static_assert(offsetof(FFestaRacerContribution, RacerIndex) == 0x000000, "Member 'FFestaRacerContribution::RacerIndex' has a wrong offset!");
static_assert(offsetof(FFestaRacerContribution, TractionTimes) == 0x000004, "Member 'FFestaRacerContribution::TractionTimes' has a wrong offset!");
static_assert(offsetof(FFestaRacerContribution, bIsTractionTimes1st) == 0x000008, "Member 'FFestaRacerContribution::bIsTractionTimes1st' has a wrong offset!");
static_assert(offsetof(FFestaRacerContribution, BonusPoint) == 0x00000C, "Member 'FFestaRacerContribution::BonusPoint' has a wrong offset!");
static_assert(offsetof(FFestaRacerContribution, bIsBonusPoint1st) == 0x000010, "Member 'FFestaRacerContribution::bIsBonusPoint1st' has a wrong offset!");

// ScriptStruct UnionRun.FestaTeamResultInfo
// 0x0014 (0x0014 - 0x0000)
struct FFestaTeamResultInfo final
{
public:
	bool                                          bIsWinner;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMvp;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddPoint;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamBonusPoint;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalTeamPoint;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalTeamRank;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaTeamResultInfo) == 0x000004, "Wrong alignment on FFestaTeamResultInfo");
static_assert(sizeof(FFestaTeamResultInfo) == 0x000014, "Wrong size on FFestaTeamResultInfo");
static_assert(offsetof(FFestaTeamResultInfo, bIsWinner) == 0x000000, "Member 'FFestaTeamResultInfo::bIsWinner' has a wrong offset!");
static_assert(offsetof(FFestaTeamResultInfo, bIsMvp) == 0x000001, "Member 'FFestaTeamResultInfo::bIsMvp' has a wrong offset!");
static_assert(offsetof(FFestaTeamResultInfo, AddPoint) == 0x000004, "Member 'FFestaTeamResultInfo::AddPoint' has a wrong offset!");
static_assert(offsetof(FFestaTeamResultInfo, TeamBonusPoint) == 0x000008, "Member 'FFestaTeamResultInfo::TeamBonusPoint' has a wrong offset!");
static_assert(offsetof(FFestaTeamResultInfo, TotalTeamPoint) == 0x00000C, "Member 'FFestaTeamResultInfo::TotalTeamPoint' has a wrong offset!");
static_assert(offsetof(FFestaTeamResultInfo, TotalTeamRank) == 0x000010, "Member 'FFestaTeamResultInfo::TotalTeamRank' has a wrong offset!");

// ScriptStruct UnionRun.FestaRacerResultInfo
// 0x0010 (0x0010 - 0x0000)
struct FFestaRacerResultInfo final
{
public:
	bool                                          bIsMvp;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BonusPoint;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBonusPoint1st;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamNo;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaRacerResultInfo) == 0x000004, "Wrong alignment on FFestaRacerResultInfo");
static_assert(sizeof(FFestaRacerResultInfo) == 0x000010, "Wrong size on FFestaRacerResultInfo");
static_assert(offsetof(FFestaRacerResultInfo, bIsMvp) == 0x000000, "Member 'FFestaRacerResultInfo::bIsMvp' has a wrong offset!");
static_assert(offsetof(FFestaRacerResultInfo, BonusPoint) == 0x000004, "Member 'FFestaRacerResultInfo::BonusPoint' has a wrong offset!");
static_assert(offsetof(FFestaRacerResultInfo, bIsBonusPoint1st) == 0x000008, "Member 'FFestaRacerResultInfo::bIsBonusPoint1st' has a wrong offset!");
static_assert(offsetof(FFestaRacerResultInfo, TeamNo) == 0x00000C, "Member 'FFestaRacerResultInfo::TeamNo' has a wrong offset!");

// ScriptStruct UnionRun.FestaResultInfo
// 0x0040 (0x0040 - 0x0000)
struct FFestaResultInfo final
{
public:
	TArray<struct FFestaTeamResultInfo>           TeamList;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFestaRacerResultInfo>          RacerList;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DetailText;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFestaResultInfo) == 0x000008, "Wrong alignment on FFestaResultInfo");
static_assert(sizeof(FFestaResultInfo) == 0x000040, "Wrong size on FFestaResultInfo");
static_assert(offsetof(FFestaResultInfo, TeamList) == 0x000000, "Member 'FFestaResultInfo::TeamList' has a wrong offset!");
static_assert(offsetof(FFestaResultInfo, RacerList) == 0x000010, "Member 'FFestaResultInfo::RacerList' has a wrong offset!");
static_assert(offsetof(FFestaResultInfo, TitleText) == 0x000020, "Member 'FFestaResultInfo::TitleText' has a wrong offset!");
static_assert(offsetof(FFestaResultInfo, DetailText) == 0x000030, "Member 'FFestaResultInfo::DetailText' has a wrong offset!");

// ScriptStruct UnionRun.PlayerRaceResultData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FPlayerRaceResultData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerRaceResultData) == 0x000008, "Wrong alignment on FPlayerRaceResultData");
static_assert(sizeof(FPlayerRaceResultData) == 0x000028, "Wrong size on FPlayerRaceResultData");

// ScriptStruct UnionRun.PlayerTotalResultData
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FPlayerTotalResultData final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerTotalResultData) == 0x000008, "Wrong alignment on FPlayerTotalResultData");
static_assert(sizeof(FPlayerTotalResultData) == 0x000058, "Wrong size on FPlayerTotalResultData");

// ScriptStruct UnionRun.UIResultParam
// 0x0008 (0x0010 - 0x0008)
struct FUIResultParam final : public FTableRowBase
{
public:
	int32                                         Point;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIResultParam) == 0x000008, "Wrong alignment on FUIResultParam");
static_assert(sizeof(FUIResultParam) == 0x000010, "Wrong size on FUIResultParam");
static_assert(offsetof(FUIResultParam, Point) == 0x000008, "Member 'FUIResultParam::Point' has a wrong offset!");

// ScriptStruct UnionRun.RandomObjParamTable
// 0x0028 (0x0030 - 0x0008)
struct FRandomObjParamTable final : public FTableRowBase
{
public:
	ERandomObjType                                ObjectType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RandomWeight;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRandomObjParamTable) == 0x000008, "Wrong alignment on FRandomObjParamTable");
static_assert(sizeof(FRandomObjParamTable) == 0x000030, "Wrong size on FRandomObjParamTable");
static_assert(offsetof(FRandomObjParamTable, ObjectType) == 0x000008, "Member 'FRandomObjParamTable::ObjectType' has a wrong offset!");
static_assert(offsetof(FRandomObjParamTable, RandomWeight) == 0x000010, "Member 'FRandomObjParamTable::RandomWeight' has a wrong offset!");

// ScriptStruct UnionRun.BreakObjectRandomParamTable
// 0x0028 (0x0030 - 0x0008)
struct FBreakObjectRandomParamTable final : public FTableRowBase
{
public:
	EBreakObjType                                 BreakObjectType;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RandomWeight;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBreakObjectRandomParamTable) == 0x000008, "Wrong alignment on FBreakObjectRandomParamTable");
static_assert(sizeof(FBreakObjectRandomParamTable) == 0x000030, "Wrong size on FBreakObjectRandomParamTable");
static_assert(offsetof(FBreakObjectRandomParamTable, BreakObjectType) == 0x000008, "Member 'FBreakObjectRandomParamTable::BreakObjectType' has a wrong offset!");
static_assert(offsetof(FBreakObjectRandomParamTable, RandomWeight) == 0x000010, "Member 'FBreakObjectRandomParamTable::RandomWeight' has a wrong offset!");

// ScriptStruct UnionRun.GhostMachineMaterialData
// 0x0018 (0x0020 - 0x0008)
struct FGhostMachineMaterialData final : public FTableRowBase
{
public:
	class FString                                 SearchWord;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontOpacity;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGhostMachineMaterialData) == 0x000008, "Wrong alignment on FGhostMachineMaterialData");
static_assert(sizeof(FGhostMachineMaterialData) == 0x000020, "Wrong size on FGhostMachineMaterialData");
static_assert(offsetof(FGhostMachineMaterialData, SearchWord) == 0x000008, "Member 'FGhostMachineMaterialData::SearchWord' has a wrong offset!");
static_assert(offsetof(FGhostMachineMaterialData, FrontOpacity) == 0x000018, "Member 'FGhostMachineMaterialData::FrontOpacity' has a wrong offset!");

// ScriptStruct UnionRun.RingMeshTable
// 0x0030 (0x0038 - 0x0008)
struct FRingMeshTable final : public FTableRowBase
{
public:
	ERingExtndType                                RingExtndType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             RingMesh;                                          // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRingMeshTable) == 0x000008, "Wrong alignment on FRingMeshTable");
static_assert(sizeof(FRingMeshTable) == 0x000038, "Wrong size on FRingMeshTable");
static_assert(offsetof(FRingMeshTable, RingExtndType) == 0x000008, "Member 'FRingMeshTable::RingExtndType' has a wrong offset!");
static_assert(offsetof(FRingMeshTable, RingMesh) == 0x000010, "Member 'FRingMeshTable::RingMesh' has a wrong offset!");

// ScriptStruct UnionRun.UnionTakeRingInfo
// 0x0008 (0x0008 - 0x0000)
struct FUnionTakeRingInfo final
{
public:
	int32                                         TakeRingCount;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETakeRingType                                 TakeRingFlags;                                     // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnionTakeRingInfo) == 0x000004, "Wrong alignment on FUnionTakeRingInfo");
static_assert(sizeof(FUnionTakeRingInfo) == 0x000008, "Wrong size on FUnionTakeRingInfo");
static_assert(offsetof(FUnionTakeRingInfo, TakeRingCount) == 0x000000, "Member 'FUnionTakeRingInfo::TakeRingCount' has a wrong offset!");
static_assert(offsetof(FUnionTakeRingInfo, TakeRingFlags) == 0x000004, "Member 'FUnionTakeRingInfo::TakeRingFlags' has a wrong offset!");

// ScriptStruct UnionRun.RingInitialHoldParam
// 0x0038 (0x0040 - 0x0008)
struct FRingInitialHoldParam final : public FTableRowBase
{
public:
	EGameModeId                                   GameModeID;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HoldCount_Rank1;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldCount_Rank2;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldCount_Rank3;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldCount_Rank4;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldCount_Rank5;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldCount_Rank6;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldCount_Rank7;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldCount_Rank8;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldCount_Rank9;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldCount_Rank10;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldCount_Rank11;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoldCount_Rank12;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRingInitialHoldParam) == 0x000008, "Wrong alignment on FRingInitialHoldParam");
static_assert(sizeof(FRingInitialHoldParam) == 0x000040, "Wrong size on FRingInitialHoldParam");
static_assert(offsetof(FRingInitialHoldParam, GameModeID) == 0x000008, "Member 'FRingInitialHoldParam::GameModeID' has a wrong offset!");
static_assert(offsetof(FRingInitialHoldParam, HoldCount_Rank1) == 0x00000C, "Member 'FRingInitialHoldParam::HoldCount_Rank1' has a wrong offset!");
static_assert(offsetof(FRingInitialHoldParam, HoldCount_Rank2) == 0x000010, "Member 'FRingInitialHoldParam::HoldCount_Rank2' has a wrong offset!");
static_assert(offsetof(FRingInitialHoldParam, HoldCount_Rank3) == 0x000014, "Member 'FRingInitialHoldParam::HoldCount_Rank3' has a wrong offset!");
static_assert(offsetof(FRingInitialHoldParam, HoldCount_Rank4) == 0x000018, "Member 'FRingInitialHoldParam::HoldCount_Rank4' has a wrong offset!");
static_assert(offsetof(FRingInitialHoldParam, HoldCount_Rank5) == 0x00001C, "Member 'FRingInitialHoldParam::HoldCount_Rank5' has a wrong offset!");
static_assert(offsetof(FRingInitialHoldParam, HoldCount_Rank6) == 0x000020, "Member 'FRingInitialHoldParam::HoldCount_Rank6' has a wrong offset!");
static_assert(offsetof(FRingInitialHoldParam, HoldCount_Rank7) == 0x000024, "Member 'FRingInitialHoldParam::HoldCount_Rank7' has a wrong offset!");
static_assert(offsetof(FRingInitialHoldParam, HoldCount_Rank8) == 0x000028, "Member 'FRingInitialHoldParam::HoldCount_Rank8' has a wrong offset!");
static_assert(offsetof(FRingInitialHoldParam, HoldCount_Rank9) == 0x00002C, "Member 'FRingInitialHoldParam::HoldCount_Rank9' has a wrong offset!");
static_assert(offsetof(FRingInitialHoldParam, HoldCount_Rank10) == 0x000030, "Member 'FRingInitialHoldParam::HoldCount_Rank10' has a wrong offset!");
static_assert(offsetof(FRingInitialHoldParam, HoldCount_Rank11) == 0x000034, "Member 'FRingInitialHoldParam::HoldCount_Rank11' has a wrong offset!");
static_assert(offsetof(FRingInitialHoldParam, HoldCount_Rank12) == 0x000038, "Member 'FRingInitialHoldParam::HoldCount_Rank12' has a wrong offset!");

// ScriptStruct UnionRun.RoundTripMoveParams
// 0x0014 (0x0014 - 0x0000)
struct FRoundTripMoveParams final
{
public:
	ERoundTripMoveType                            moveType_;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         easeCurve_;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         movingSeconds_;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         movingSpeed_;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endWaitSeconds_;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoundTripMoveParams) == 0x000004, "Wrong alignment on FRoundTripMoveParams");
static_assert(sizeof(FRoundTripMoveParams) == 0x000014, "Wrong size on FRoundTripMoveParams");
static_assert(offsetof(FRoundTripMoveParams, moveType_) == 0x000000, "Member 'FRoundTripMoveParams::moveType_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveParams, easeCurve_) == 0x000004, "Member 'FRoundTripMoveParams::easeCurve_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveParams, movingSeconds_) == 0x000008, "Member 'FRoundTripMoveParams::movingSeconds_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveParams, movingSpeed_) == 0x00000C, "Member 'FRoundTripMoveParams::movingSpeed_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveParams, endWaitSeconds_) == 0x000010, "Member 'FRoundTripMoveParams::endWaitSeconds_' has a wrong offset!");

// ScriptStruct UnionRun.RoundTripMoveComponentParams
// 0x0078 (0x0080 - 0x0008)
struct FRoundTripMoveComponentParams final : public FTableRowBase
{
public:
	int32                                         TemplateID;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidMovement_;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                startLocation_;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                endLocation_;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRoundTripMoveParams                   outboundTripParam_;                                // 0x0040(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRoundTripMoveParams                   returnTripParam_;                                  // 0x0054(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSnapStartLocationAtStart_;                        // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLRRayCast_;                                    // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         racCastHeight_;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         racCastLength_;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         racCastInnerOffset_;                               // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         startDelay_;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         startOffsetBySeconds_;                             // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoundTripMoveComponentParams) == 0x000008, "Wrong alignment on FRoundTripMoveComponentParams");
static_assert(sizeof(FRoundTripMoveComponentParams) == 0x000080, "Wrong size on FRoundTripMoveComponentParams");
static_assert(offsetof(FRoundTripMoveComponentParams, TemplateID) == 0x000008, "Member 'FRoundTripMoveComponentParams::TemplateID' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveComponentParams, bValidMovement_) == 0x00000C, "Member 'FRoundTripMoveComponentParams::bValidMovement_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveComponentParams, startLocation_) == 0x000010, "Member 'FRoundTripMoveComponentParams::startLocation_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveComponentParams, endLocation_) == 0x000028, "Member 'FRoundTripMoveComponentParams::endLocation_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveComponentParams, outboundTripParam_) == 0x000040, "Member 'FRoundTripMoveComponentParams::outboundTripParam_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveComponentParams, returnTripParam_) == 0x000054, "Member 'FRoundTripMoveComponentParams::returnTripParam_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveComponentParams, bSnapStartLocationAtStart_) == 0x000068, "Member 'FRoundTripMoveComponentParams::bSnapStartLocationAtStart_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveComponentParams, bUseLRRayCast_) == 0x000069, "Member 'FRoundTripMoveComponentParams::bUseLRRayCast_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveComponentParams, racCastHeight_) == 0x00006C, "Member 'FRoundTripMoveComponentParams::racCastHeight_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveComponentParams, racCastLength_) == 0x000070, "Member 'FRoundTripMoveComponentParams::racCastLength_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveComponentParams, racCastInnerOffset_) == 0x000074, "Member 'FRoundTripMoveComponentParams::racCastInnerOffset_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveComponentParams, startDelay_) == 0x000078, "Member 'FRoundTripMoveComponentParams::startDelay_' has a wrong offset!");
static_assert(offsetof(FRoundTripMoveComponentParams, startOffsetBySeconds_) == 0x00007C, "Member 'FRoundTripMoveComponentParams::startOffsetBySeconds_' has a wrong offset!");

// ScriptStruct UnionRun.UnionRunPathBinaryParameter
// 0x0018 (0x0018 - 0x0000)
struct FUnionRunPathBinaryParameter final
{
public:
	int32                                         DataVersion;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChunkDataCount;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionRunPathBinaryParameter) == 0x000008, "Wrong alignment on FUnionRunPathBinaryParameter");
static_assert(sizeof(FUnionRunPathBinaryParameter) == 0x000018, "Wrong size on FUnionRunPathBinaryParameter");
static_assert(offsetof(FUnionRunPathBinaryParameter, DataVersion) == 0x000000, "Member 'FUnionRunPathBinaryParameter::DataVersion' has a wrong offset!");
static_assert(offsetof(FUnionRunPathBinaryParameter, ChunkDataCount) == 0x000004, "Member 'FUnionRunPathBinaryParameter::ChunkDataCount' has a wrong offset!");
static_assert(offsetof(FUnionRunPathBinaryParameter, Data) == 0x000008, "Member 'FUnionRunPathBinaryParameter::Data' has a wrong offset!");

// ScriptStruct UnionRun.CoursePathCreateParams
// 0x0078 (0x0078 - 0x0000)
struct FCoursePathCreateParams final
{
public:
	bool                                          bValid_;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECoursePathDirectionType                      directionType;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECoursePathCurveType                          CurveType;                                         // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         width_;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         height_;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pointNum;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  pathActor_;                                        // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         startIndex_;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  endPathActor_;                                     // 0x0040(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         endIndex_;                                         // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRayCast_;                                      // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         rayStartHeight_;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         rayEndHeight_;                                     // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCoursePathCreateParams) == 0x000008, "Wrong alignment on FCoursePathCreateParams");
static_assert(sizeof(FCoursePathCreateParams) == 0x000078, "Wrong size on FCoursePathCreateParams");
static_assert(offsetof(FCoursePathCreateParams, bValid_) == 0x000000, "Member 'FCoursePathCreateParams::bValid_' has a wrong offset!");
static_assert(offsetof(FCoursePathCreateParams, directionType) == 0x000001, "Member 'FCoursePathCreateParams::directionType' has a wrong offset!");
static_assert(offsetof(FCoursePathCreateParams, CurveType) == 0x000002, "Member 'FCoursePathCreateParams::CurveType' has a wrong offset!");
static_assert(offsetof(FCoursePathCreateParams, width_) == 0x000004, "Member 'FCoursePathCreateParams::width_' has a wrong offset!");
static_assert(offsetof(FCoursePathCreateParams, height_) == 0x000008, "Member 'FCoursePathCreateParams::height_' has a wrong offset!");
static_assert(offsetof(FCoursePathCreateParams, pointNum) == 0x00000C, "Member 'FCoursePathCreateParams::pointNum' has a wrong offset!");
static_assert(offsetof(FCoursePathCreateParams, pathActor_) == 0x000010, "Member 'FCoursePathCreateParams::pathActor_' has a wrong offset!");
static_assert(offsetof(FCoursePathCreateParams, startIndex_) == 0x000038, "Member 'FCoursePathCreateParams::startIndex_' has a wrong offset!");
static_assert(offsetof(FCoursePathCreateParams, endPathActor_) == 0x000040, "Member 'FCoursePathCreateParams::endPathActor_' has a wrong offset!");
static_assert(offsetof(FCoursePathCreateParams, endIndex_) == 0x000068, "Member 'FCoursePathCreateParams::endIndex_' has a wrong offset!");
static_assert(offsetof(FCoursePathCreateParams, bUseRayCast_) == 0x00006C, "Member 'FCoursePathCreateParams::bUseRayCast_' has a wrong offset!");
static_assert(offsetof(FCoursePathCreateParams, rayStartHeight_) == 0x000070, "Member 'FCoursePathCreateParams::rayStartHeight_' has a wrong offset!");
static_assert(offsetof(FCoursePathCreateParams, rayEndHeight_) == 0x000074, "Member 'FCoursePathCreateParams::rayEndHeight_' has a wrong offset!");

// ScriptStruct UnionRun.SplineParam
// 0x0014 (0x0014 - 0x0000)
struct FSplineParam final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPointCut;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCarRoute;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoatRoute;                                        // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaneRoute;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShortCut;                                         // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlide;                                            // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeverItem;                                        // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoItemRelease;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunOff;                                           // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuidedJump;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bYellowDrill;                                      // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespotInvalid;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidSection;                                   // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalidAssist;                                    // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERandomObjType                                RandomType;                                        // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSplineParam) == 0x000004, "Wrong alignment on FSplineParam");
static_assert(sizeof(FSplineParam) == 0x000014, "Wrong size on FSplineParam");
static_assert(offsetof(FSplineParam, bHidden) == 0x000000, "Member 'FSplineParam::bHidden' has a wrong offset!");
static_assert(offsetof(FSplineParam, bPointCut) == 0x000001, "Member 'FSplineParam::bPointCut' has a wrong offset!");
static_assert(offsetof(FSplineParam, bCarRoute) == 0x000002, "Member 'FSplineParam::bCarRoute' has a wrong offset!");
static_assert(offsetof(FSplineParam, bBoatRoute) == 0x000003, "Member 'FSplineParam::bBoatRoute' has a wrong offset!");
static_assert(offsetof(FSplineParam, bPlaneRoute) == 0x000004, "Member 'FSplineParam::bPlaneRoute' has a wrong offset!");
static_assert(offsetof(FSplineParam, bShortCut) == 0x000005, "Member 'FSplineParam::bShortCut' has a wrong offset!");
static_assert(offsetof(FSplineParam, bSlide) == 0x000006, "Member 'FSplineParam::bSlide' has a wrong offset!");
static_assert(offsetof(FSplineParam, bNeverItem) == 0x000007, "Member 'FSplineParam::bNeverItem' has a wrong offset!");
static_assert(offsetof(FSplineParam, bNoItemRelease) == 0x000008, "Member 'FSplineParam::bNoItemRelease' has a wrong offset!");
static_assert(offsetof(FSplineParam, bRunOff) == 0x000009, "Member 'FSplineParam::bRunOff' has a wrong offset!");
static_assert(offsetof(FSplineParam, bGuidedJump) == 0x00000A, "Member 'FSplineParam::bGuidedJump' has a wrong offset!");
static_assert(offsetof(FSplineParam, bYellowDrill) == 0x00000B, "Member 'FSplineParam::bYellowDrill' has a wrong offset!");
static_assert(offsetof(FSplineParam, bRespotInvalid) == 0x00000C, "Member 'FSplineParam::bRespotInvalid' has a wrong offset!");
static_assert(offsetof(FSplineParam, bInvalidSection) == 0x00000D, "Member 'FSplineParam::bInvalidSection' has a wrong offset!");
static_assert(offsetof(FSplineParam, bInvalidAssist) == 0x00000E, "Member 'FSplineParam::bInvalidAssist' has a wrong offset!");
static_assert(offsetof(FSplineParam, RandomType) == 0x00000F, "Member 'FSplineParam::RandomType' has a wrong offset!");
static_assert(offsetof(FSplineParam, RandomId) == 0x000010, "Member 'FSplineParam::RandomId' has a wrong offset!");

// ScriptStruct UnionRun.SplinePointParam
// 0x00C0 (0x00C0 - 0x0000)
struct FSplinePointParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Dir;                                               // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Up;                                                // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUnionSurfaceType                             SurfaceType;                                       // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUnionSurfaceFlag                      SurfaceFlag;                                       // 0x0071(0x001F)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PointIndex;                                        // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSplineParam                           RouteParam;                                        // 0x0094(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PlaneWidthUD;                                      // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaneWidthLR;                                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaneWidthRight;                                   // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaneWidthBottom;                                  // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSplinePointParam) == 0x000008, "Wrong alignment on FSplinePointParam");
static_assert(sizeof(FSplinePointParam) == 0x0000C0, "Wrong size on FSplinePointParam");
static_assert(offsetof(FSplinePointParam, Name) == 0x000000, "Member 'FSplinePointParam::Name' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, Pos) == 0x000010, "Member 'FSplinePointParam::Pos' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, Rot) == 0x000028, "Member 'FSplinePointParam::Rot' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, Dir) == 0x000040, "Member 'FSplinePointParam::Dir' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, Up) == 0x000058, "Member 'FSplinePointParam::Up' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, SurfaceType) == 0x000070, "Member 'FSplinePointParam::SurfaceType' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, SurfaceFlag) == 0x000071, "Member 'FSplinePointParam::SurfaceFlag' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, PointIndex) == 0x000090, "Member 'FSplinePointParam::PointIndex' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, RouteParam) == 0x000094, "Member 'FSplinePointParam::RouteParam' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, PlaneWidthUD) == 0x0000A8, "Member 'FSplinePointParam::PlaneWidthUD' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, PlaneWidthLR) == 0x0000AC, "Member 'FSplinePointParam::PlaneWidthLR' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, PlaneWidthRight) == 0x0000B0, "Member 'FSplinePointParam::PlaneWidthRight' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, PlaneWidthBottom) == 0x0000B4, "Member 'FSplinePointParam::PlaneWidthBottom' has a wrong offset!");
static_assert(offsetof(FSplinePointParam, PhysMaterial) == 0x0000B8, "Member 'FSplinePointParam::PhysMaterial' has a wrong offset!");

// ScriptStruct UnionRun.SwingCameraStagePreset
// 0x0010 (0x0010 - 0x0000)
struct FSwingCameraStagePreset final
{
public:
	TArray<struct FSwingCameraUnitPreset>         SwingCameraPresetList;                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSwingCameraStagePreset) == 0x000008, "Wrong alignment on FSwingCameraStagePreset");
static_assert(sizeof(FSwingCameraStagePreset) == 0x000010, "Wrong size on FSwingCameraStagePreset");
static_assert(offsetof(FSwingCameraStagePreset, SwingCameraPresetList) == 0x000000, "Member 'FSwingCameraStagePreset::SwingCameraPresetList' has a wrong offset!");

// ScriptStruct UnionRun.VehicleModelDefine
// 0x0068 (0x0068 - 0x0000)
struct FVehicleModelDefine final
{
public:
	EVehicleType                                  VehicleType;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECarStatusType                                CarStatusType;                                     // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECarCustomType                                CarCustomType;                                     // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ECarBodyPartType, int32>                 CarBodyPartMap;                                    // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         TireRotSpeedMax_30fps1Screen;                      // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireRotSpeedMax_30fpsOther;                        // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireRotSpeedMax_60fps1Screen;                      // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireRotSpeedMax_60fpsOther;                        // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleModelDefine) == 0x000008, "Wrong alignment on FVehicleModelDefine");
static_assert(sizeof(FVehicleModelDefine) == 0x000068, "Wrong size on FVehicleModelDefine");
static_assert(offsetof(FVehicleModelDefine, VehicleType) == 0x000000, "Member 'FVehicleModelDefine::VehicleType' has a wrong offset!");
static_assert(offsetof(FVehicleModelDefine, CarStatusType) == 0x000001, "Member 'FVehicleModelDefine::CarStatusType' has a wrong offset!");
static_assert(offsetof(FVehicleModelDefine, CarCustomType) == 0x000002, "Member 'FVehicleModelDefine::CarCustomType' has a wrong offset!");
static_assert(offsetof(FVehicleModelDefine, CarBodyPartMap) == 0x000008, "Member 'FVehicleModelDefine::CarBodyPartMap' has a wrong offset!");
static_assert(offsetof(FVehicleModelDefine, TireRotSpeedMax_30fps1Screen) == 0x000058, "Member 'FVehicleModelDefine::TireRotSpeedMax_30fps1Screen' has a wrong offset!");
static_assert(offsetof(FVehicleModelDefine, TireRotSpeedMax_30fpsOther) == 0x00005C, "Member 'FVehicleModelDefine::TireRotSpeedMax_30fpsOther' has a wrong offset!");
static_assert(offsetof(FVehicleModelDefine, TireRotSpeedMax_60fps1Screen) == 0x000060, "Member 'FVehicleModelDefine::TireRotSpeedMax_60fps1Screen' has a wrong offset!");
static_assert(offsetof(FVehicleModelDefine, TireRotSpeedMax_60fpsOther) == 0x000064, "Member 'FVehicleModelDefine::TireRotSpeedMax_60fpsOther' has a wrong offset!");

// ScriptStruct UnionRun.VehiclePhysicsPart
// 0x0050 (0x0050 - 0x0000)
struct FVehiclePhysicsPart final
{
public:
	EVehicleType                                  VehicleType;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECarStatusType                                CarStatusType;                                     // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WheelBase;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelBase_F;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelBase_R;                                       // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tread;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelShaftHeight;                                  // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireRadius;                                        // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireWidth;                                         // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyLength;                                        // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyWidth;                                         // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyBottomHeight;                                  // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CockpitHeight;                                     // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspensionOperatingRange;                          // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionRadius;                                   // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaCollisionRadius;                              // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionPivot_F;                                  // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionPivot_R;                                  // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionBaseHeight;                               // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionPivotHeight;                              // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionHeightLength;                             // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehiclePhysicsPart) == 0x000004, "Wrong alignment on FVehiclePhysicsPart");
static_assert(sizeof(FVehiclePhysicsPart) == 0x000050, "Wrong size on FVehiclePhysicsPart");
static_assert(offsetof(FVehiclePhysicsPart, VehicleType) == 0x000000, "Member 'FVehiclePhysicsPart::VehicleType' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, CarStatusType) == 0x000001, "Member 'FVehiclePhysicsPart::CarStatusType' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, WheelBase) == 0x000004, "Member 'FVehiclePhysicsPart::WheelBase' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, WheelBase_F) == 0x000008, "Member 'FVehiclePhysicsPart::WheelBase_F' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, WheelBase_R) == 0x00000C, "Member 'FVehiclePhysicsPart::WheelBase_R' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, Tread) == 0x000010, "Member 'FVehiclePhysicsPart::Tread' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, WheelShaftHeight) == 0x000014, "Member 'FVehiclePhysicsPart::WheelShaftHeight' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, TireRadius) == 0x000018, "Member 'FVehiclePhysicsPart::TireRadius' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, TireWidth) == 0x00001C, "Member 'FVehiclePhysicsPart::TireWidth' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, BodyLength) == 0x000020, "Member 'FVehiclePhysicsPart::BodyLength' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, BodyWidth) == 0x000024, "Member 'FVehiclePhysicsPart::BodyWidth' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, BodyBottomHeight) == 0x000028, "Member 'FVehiclePhysicsPart::BodyBottomHeight' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, CockpitHeight) == 0x00002C, "Member 'FVehiclePhysicsPart::CockpitHeight' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, SuspensionOperatingRange) == 0x000030, "Member 'FVehiclePhysicsPart::SuspensionOperatingRange' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, CollisionRadius) == 0x000034, "Member 'FVehiclePhysicsPart::CollisionRadius' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, CharaCollisionRadius) == 0x000038, "Member 'FVehiclePhysicsPart::CharaCollisionRadius' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, CollisionPivot_F) == 0x00003C, "Member 'FVehiclePhysicsPart::CollisionPivot_F' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, CollisionPivot_R) == 0x000040, "Member 'FVehiclePhysicsPart::CollisionPivot_R' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, CollisionBaseHeight) == 0x000044, "Member 'FVehiclePhysicsPart::CollisionBaseHeight' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, CollisionPivotHeight) == 0x000048, "Member 'FVehiclePhysicsPart::CollisionPivotHeight' has a wrong offset!");
static_assert(offsetof(FVehiclePhysicsPart, CollisionHeightLength) == 0x00004C, "Member 'FVehiclePhysicsPart::CollisionHeightLength' has a wrong offset!");

// ScriptStruct UnionRun.MachineSoundData
// 0x0030 (0x0038 - 0x0008)
struct FMachineSoundData final : public FTableRowBase
{
public:
	EVehicleSound                                 SoundType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundAtomCue>           Cue;                                               // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineSoundData) == 0x000008, "Wrong alignment on FMachineSoundData");
static_assert(sizeof(FMachineSoundData) == 0x000038, "Wrong size on FMachineSoundData");
static_assert(offsetof(FMachineSoundData, SoundType) == 0x000008, "Member 'FMachineSoundData::SoundType' has a wrong offset!");
static_assert(offsetof(FMachineSoundData, Cue) == 0x000010, "Member 'FMachineSoundData::Cue' has a wrong offset!");

// ScriptStruct UnionRun.MachineLevelSoundData
// 0x0018 (0x0020 - 0x0008)
struct FMachineLevelSoundData final : public FTableRowBase
{
public:
	EVehicleSound                                 SoundType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class USoundAtomCue>>   CueList;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineLevelSoundData) == 0x000008, "Wrong alignment on FMachineLevelSoundData");
static_assert(sizeof(FMachineLevelSoundData) == 0x000020, "Wrong size on FMachineLevelSoundData");
static_assert(offsetof(FMachineLevelSoundData, SoundType) == 0x000008, "Member 'FMachineLevelSoundData::SoundType' has a wrong offset!");
static_assert(offsetof(FMachineLevelSoundData, CueList) == 0x000010, "Member 'FMachineLevelSoundData::CueList' has a wrong offset!");

// ScriptStruct UnionRun.MachineMaterialAnimationTargetData
// 0x0028 (0x0030 - 0x0008)
struct FMachineMaterialAnimationTargetData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMaterial>               TargetMatreial;                                    // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMachineMaterialAnimationTargetData) == 0x000008, "Wrong alignment on FMachineMaterialAnimationTargetData");
static_assert(sizeof(FMachineMaterialAnimationTargetData) == 0x000030, "Wrong size on FMachineMaterialAnimationTargetData");
static_assert(offsetof(FMachineMaterialAnimationTargetData, TargetMatreial) == 0x000008, "Member 'FMachineMaterialAnimationTargetData::TargetMatreial' has a wrong offset!");

// ScriptStruct UnionRun.UnionVehicleSoundData
// 0x0010 (0x0010 - 0x0000)
struct FUnionVehicleSoundData final
{
public:
	TArray<class USoundAtomCue*>                  CueList;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionVehicleSoundData) == 0x000008, "Wrong alignment on FUnionVehicleSoundData");
static_assert(sizeof(FUnionVehicleSoundData) == 0x000010, "Wrong size on FUnionVehicleSoundData");
static_assert(offsetof(FUnionVehicleSoundData, CueList) == 0x000000, "Member 'FUnionVehicleSoundData::CueList' has a wrong offset!");

// ScriptStruct UnionRun.UnionSurfaceSoundData
// 0x0050 (0x0050 - 0x0000)
struct FUnionSurfaceSoundData final
{
public:
	TMap<EUnionSurfaceType, class USoundAtomCue*> SurfaceCueMap;                                     // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnionSurfaceSoundData) == 0x000008, "Wrong alignment on FUnionSurfaceSoundData");
static_assert(sizeof(FUnionSurfaceSoundData) == 0x000050, "Wrong size on FUnionSurfaceSoundData");
static_assert(offsetof(FUnionSurfaceSoundData, SurfaceCueMap) == 0x000000, "Member 'FUnionSurfaceSoundData::SurfaceCueMap' has a wrong offset!");

// ScriptStruct UnionRun.FreshlyPaintParameter
// 0x002C (0x002C - 0x0000)
struct FFreshlyPaintParameter final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorFreshlyPaint;                                 // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreshEmissiveIntensity;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimColorFreshlyPaint;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimFreshEmissiveIntensity;                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFreshlyPaintParameter) == 0x000004, "Wrong alignment on FFreshlyPaintParameter");
static_assert(sizeof(FFreshlyPaintParameter) == 0x00002C, "Wrong size on FFreshlyPaintParameter");
static_assert(offsetof(FFreshlyPaintParameter, bEnable) == 0x000000, "Member 'FFreshlyPaintParameter::bEnable' has a wrong offset!");
static_assert(offsetof(FFreshlyPaintParameter, ColorFreshlyPaint) == 0x000004, "Member 'FFreshlyPaintParameter::ColorFreshlyPaint' has a wrong offset!");
static_assert(offsetof(FFreshlyPaintParameter, FreshEmissiveIntensity) == 0x000014, "Member 'FFreshlyPaintParameter::FreshEmissiveIntensity' has a wrong offset!");
static_assert(offsetof(FFreshlyPaintParameter, RimColorFreshlyPaint) == 0x000018, "Member 'FFreshlyPaintParameter::RimColorFreshlyPaint' has a wrong offset!");
static_assert(offsetof(FFreshlyPaintParameter, RimFreshEmissiveIntensity) == 0x000028, "Member 'FFreshlyPaintParameter::RimFreshEmissiveIntensity' has a wrong offset!");

}

