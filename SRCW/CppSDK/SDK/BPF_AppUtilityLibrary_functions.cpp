#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_AppUtilityLibrary

#include "Basic.hpp"

#include "BPF_AppUtilityLibrary_classes.hpp"
#include "BPF_AppUtilityLibrary_parameters.hpp"


namespace SDK
{

// Function BPF_AppUtilityLibrary.BPF_AppUtilityLibrary_C.OpenRewardDialog
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<struct FRewardGetWindowParam>&   rewardList                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UWBP_ItemGet_Window_C**           RewardDialogWidget                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32*                                  ZOrder                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AppUtilityLibrary_C::OpenRewardDialog(const class FText& Title, TArray<struct FRewardGetWindowParam>& rewardList, class UObject* __WorldContext, class UWBP_ItemGet_Window_C** RewardDialogWidget, int32* ZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AppUtilityLibrary_C", "OpenRewardDialog");

	Params::BPF_AppUtilityLibrary_C_OpenRewardDialog Parms{};

	Parms.Title = std::move(Title);
	Parms.rewardList = std::move(rewardList);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	rewardList = std::move(Parms.rewardList);

	if (RewardDialogWidget != nullptr)
		*RewardDialogWidget = Parms.RewardDialogWidget;

	if (ZOrder != nullptr)
		*ZOrder = Parms.ZOrder;
}


// Function BPF_AppUtilityLibrary.BPF_AppUtilityLibrary_C.Set Input Blocked
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bBlocked                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPF_AppUtilityLibrary_C::Set_Input_Blocked(class APlayerController* Controller, bool bBlocked, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AppUtilityLibrary_C", "Set Input Blocked");

	Params::BPF_AppUtilityLibrary_C_Set_Input_Blocked Parms{};

	Parms.Controller = Controller;
	Parms.bBlocked = bBlocked;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}

}

