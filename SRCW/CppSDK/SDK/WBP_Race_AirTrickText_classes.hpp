#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Race_AirTrickText

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UnionRun_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Race_AirTrickText.WBP_Race_AirTrickText_C
// 0x00C8 (0x03A8 - 0x02E0)
class UWBP_Race_AirTrickText_C final : public URaceUISubAirTrickInfo
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AirTrick_InOut;                                    // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_Tex_01;                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_Tex_02;                              // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_Tex_03;                              // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_01_100;                                    // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_01_001;                                    // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_01_010;                                    // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_01_unit;                                   // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_02_100;                                    // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_02_001;                                    // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_02_010;                                    // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_02_uni;                                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_03_1000;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_03_0001;                                   // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_03_0010;                                   // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_03_0100;                                   // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NUM_Tex_03_unit;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         CurrentIndex;                                      // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AirTrickTextString;                                // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FText                                   AirTrickText;                                      // 0x0388(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	class UHorizontalBox*                         TempHorizonBox;                                    // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaying;                                         // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_Race_AirTrickText(int32 EntryPoint);
	void Finished_DF2DC77240FE7757A036BAB3C4AECEF7();
	void OneTextIn();
	void PreConstruct(bool IsDesignTime);
	int32 SetAirTrickBonusInfo(int32 SuccessCount);
	void SetAirTrickInfo(int32 SuccessCount);
	void SetAirTrickInfoAndFireAnimation(int32 SuccessCount, int32 SuccessBonusCount, bool IsGhostView);
	void SetAirTrickText(int32 Point, class URichTextBlock* Text);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Race_AirTrickText_C">();
	}
	static class UWBP_Race_AirTrickText_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Race_AirTrickText_C>();
	}
};
static_assert(alignof(UWBP_Race_AirTrickText_C) == 0x000008, "Wrong alignment on UWBP_Race_AirTrickText_C");
static_assert(sizeof(UWBP_Race_AirTrickText_C) == 0x0003A8, "Wrong size on UWBP_Race_AirTrickText_C");
static_assert(offsetof(UWBP_Race_AirTrickText_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_Race_AirTrickText_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, AirTrick_InOut) == 0x0002E8, "Member 'UWBP_Race_AirTrickText_C::AirTrick_InOut' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, HorizontalBox_Tex_01) == 0x0002F0, "Member 'UWBP_Race_AirTrickText_C::HorizontalBox_Tex_01' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, HorizontalBox_Tex_02) == 0x0002F8, "Member 'UWBP_Race_AirTrickText_C::HorizontalBox_Tex_02' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, HorizontalBox_Tex_03) == 0x000300, "Member 'UWBP_Race_AirTrickText_C::HorizontalBox_Tex_03' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_01_100) == 0x000308, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_01_100' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_01_001) == 0x000310, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_01_001' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_01_010) == 0x000318, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_01_010' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_01_unit) == 0x000320, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_01_unit' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_02_100) == 0x000328, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_02_100' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_02_001) == 0x000330, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_02_001' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_02_010) == 0x000338, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_02_010' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_02_uni) == 0x000340, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_02_uni' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_03_1000) == 0x000348, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_03_1000' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_03_0001) == 0x000350, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_03_0001' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_03_0010) == 0x000358, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_03_0010' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_03_0100) == 0x000360, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_03_0100' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, NUM_Tex_03_unit) == 0x000368, "Member 'UWBP_Race_AirTrickText_C::NUM_Tex_03_unit' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, CurrentIndex) == 0x000370, "Member 'UWBP_Race_AirTrickText_C::CurrentIndex' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, AirTrickTextString) == 0x000378, "Member 'UWBP_Race_AirTrickText_C::AirTrickTextString' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, AirTrickText) == 0x000388, "Member 'UWBP_Race_AirTrickText_C::AirTrickText' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, TempHorizonBox) == 0x000398, "Member 'UWBP_Race_AirTrickText_C::TempHorizonBox' has a wrong offset!");
static_assert(offsetof(UWBP_Race_AirTrickText_C, IsPlaying) == 0x0003A0, "Member 'UWBP_Race_AirTrickText_C::IsPlaying' has a wrong offset!");

}

