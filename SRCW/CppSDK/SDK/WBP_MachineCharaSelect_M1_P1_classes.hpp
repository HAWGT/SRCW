#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MachineCharaSelect_M1_P1

#include "Basic.hpp"

#include "UNION_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MachineCharaSelect_M1_P1.WBP_MachineCharaSelect_M1_P1_C
// 0x0028 (0x04C0 - 0x0498)
class UWBP_MachineCharaSelect_M1_P1_C final : public UCharaMachineSelectBase
{
public:
	class UWidgetAnimation*                       M1_CharaSelect_to_MachineSelect;                   // 0x0498(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       M1_Out;                                            // 0x04A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       M1_Loop;                                           // 0x04A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       M1_In;                                             // 0x04B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWindowCharaChange*                     WBP_Window_SkinWindow;                             // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ColorWindowOverrideNavigationRule();
	void PlayAnimCharaSelect();
	void PlayAnimIn();
	void PlayAnimLoop();
	void PlayAnimMachineType();
	void PlayAnimOut();

	class UWindowCharaChange* GetCharacterSkinWindow() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MachineCharaSelect_M1_P1_C">();
	}
	static class UWBP_MachineCharaSelect_M1_P1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MachineCharaSelect_M1_P1_C>();
	}
};
static_assert(alignof(UWBP_MachineCharaSelect_M1_P1_C) == 0x000008, "Wrong alignment on UWBP_MachineCharaSelect_M1_P1_C");
static_assert(sizeof(UWBP_MachineCharaSelect_M1_P1_C) == 0x0004C0, "Wrong size on UWBP_MachineCharaSelect_M1_P1_C");
static_assert(offsetof(UWBP_MachineCharaSelect_M1_P1_C, M1_CharaSelect_to_MachineSelect) == 0x000498, "Member 'UWBP_MachineCharaSelect_M1_P1_C::M1_CharaSelect_to_MachineSelect' has a wrong offset!");
static_assert(offsetof(UWBP_MachineCharaSelect_M1_P1_C, M1_Out) == 0x0004A0, "Member 'UWBP_MachineCharaSelect_M1_P1_C::M1_Out' has a wrong offset!");
static_assert(offsetof(UWBP_MachineCharaSelect_M1_P1_C, M1_Loop) == 0x0004A8, "Member 'UWBP_MachineCharaSelect_M1_P1_C::M1_Loop' has a wrong offset!");
static_assert(offsetof(UWBP_MachineCharaSelect_M1_P1_C, M1_In) == 0x0004B0, "Member 'UWBP_MachineCharaSelect_M1_P1_C::M1_In' has a wrong offset!");
static_assert(offsetof(UWBP_MachineCharaSelect_M1_P1_C, WBP_Window_SkinWindow) == 0x0004B8, "Member 'UWBP_MachineCharaSelect_M1_P1_C::WBP_Window_SkinWindow' has a wrong offset!");

}

