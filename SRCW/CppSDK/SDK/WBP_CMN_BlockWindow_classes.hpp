#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CMN_BlockWindow

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"
#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_CMN_BlockWindow.WBP_CMN_BlockWindow_C
// 0x0068 (0x0570 - 0x0508)
class UWBP_CMN_BlockWindow_C final : public UOnlineBlockWindow
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0508(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Out;                                               // 0x0510(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       InLoop;                                            // 0x0518(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 base;                                              // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CMN_MainMenu_Btn_C*                WBP_CMN_MainMenu_Btn_01;                           // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CMN_MainMenu_Btn_C*                WBP_CMN_MainMenu_Btn_02;                           // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CMN_MainMenu_Btn_C*                WBP_CMN_MainMenu_Btn_03;                           // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CMN_MainMenu_Btn_C*                WBP_CMN_MainMenu_Btn_04;                           // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnBlockWindowClosedEvent;                          // 0x0548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UUserWidget*                            DecisionCheckPopUp;                                // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonMessageBar*                      MessageBar;                                        // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsShowPopupAnimation;                             // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsBlocked;                                        // 0x0569(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_WBP_CMN_BlockWindow(int32 EntryPoint);
	class FText GetPopUpWindowDecideText(int32 BlockPopUpType);
	void OnAcceptBlockWindow(EBlockPlayerErrorCode ErrorCode, const class FString& ProductUserId);
	void OnAcceptFriendRequestWindow(bool bWasSuccessful, int32 ErrorCode);
	void OnAcceptKeyPressed();
	void OnAcceptKeyPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnAcceptKeyReleased();
	void OnAcceptKeyReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnAnimationFinished(const class UWidgetAnimation* Animation);
	void OnBackKeyPressed();
	void OnBackKeyPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnBackKeyReleased();
	void OnBackKeyReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnCancelDownEvent(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnChangeBlockWindowBtnPutType(EPlayerInfoSubWindowBtnType InBtnType, bool bIsEnablePut);
	void OnDecideAnimComp();
	void OnDecideBlockPopup(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnDecideResultPopUpEvent(EPlayerInfoSubWindowBtnType InBtnType, bool bInIsError);
	void OnDecisionBlockEvent(class UUnionUIButtonBase* Button, int32 PanelIndex, int32 ButtonIndex);
	void OnDownKeyPressed();
	void OnDownKeyPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnDownKeyReleased();
	void OnDownKeyReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnFaceButtonLeftPressed();
	void OnFaceButtonLeftPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnFaceButtonLeftReleased();
	void OnFaceButtonLeftReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnFaceButtonTopPressed();
	void OnFaceButtonTopPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnFaceButtonTopReleased();
	void OnFaceButtonTopReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnForceEnd();
	void OnLeftKeyPressed();
	void OnLeftKeyPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnLeftKeyReleased();
	void OnLeftKeyReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnLeftShoulderPressed();
	void OnLeftShoulderPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnLeftShoulderReleased();
	void OnLeftShoulderReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnLeftStickAxis(const struct FVector2D& Value);
	void OnLeftStickAxisWithPlayerId(const struct FVector2D& Value, const int32& PlayerControllerIndex);
	void OnLeftStickButtonPressed();
	void OnLeftStickButtonPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnLeftStickButtonReleased();
	void OnLeftStickButtonReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnRightKeyPressed();
	void OnRightKeyPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnRightKeyReleased();
	void OnRightKeyReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnRightShoulderPressed();
	void OnRightShoulderPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnRightShoulderReleased();
	void OnRightShoulderReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnRightStickAxis(const struct FVector2D& Value);
	void OnRightStickAxisWithPlayerId(const struct FVector2D& Value, const int32& PlayerControllerIndex);
	void OnRightStickButtonPressed();
	void OnRightStickButtonPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnRightStickButtonReleased();
	void OnRightStickButtonReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnSpecialPressed();
	void OnSpecialPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnSpecialReleased();
	void OnSpecialReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void OnUpKeyPressed();
	void OnUpKeyPressedWithPlayerId(const int32& PlayerControllerIndex);
	void OnUpKeyReleased();
	void OnUpKeyReleasedWithPlayerId(const int32& PlayerControllerIndex);
	void PlayAnimEvent(bool bIsPlayInAnim);
	void SetupBlockWindow(bool bInIsBlocked);
	void SilentFocusReady(bool bOnce);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_CMN_BlockWindow_C">();
	}
	static class UWBP_CMN_BlockWindow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_CMN_BlockWindow_C>();
	}
};
static_assert(alignof(UWBP_CMN_BlockWindow_C) == 0x000008, "Wrong alignment on UWBP_CMN_BlockWindow_C");
static_assert(sizeof(UWBP_CMN_BlockWindow_C) == 0x000570, "Wrong size on UWBP_CMN_BlockWindow_C");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, UberGraphFrame) == 0x000508, "Member 'UWBP_CMN_BlockWindow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, Out) == 0x000510, "Member 'UWBP_CMN_BlockWindow_C::Out' has a wrong offset!");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, InLoop) == 0x000518, "Member 'UWBP_CMN_BlockWindow_C::InLoop' has a wrong offset!");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, base) == 0x000520, "Member 'UWBP_CMN_BlockWindow_C::base' has a wrong offset!");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, WBP_CMN_MainMenu_Btn_01) == 0x000528, "Member 'UWBP_CMN_BlockWindow_C::WBP_CMN_MainMenu_Btn_01' has a wrong offset!");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, WBP_CMN_MainMenu_Btn_02) == 0x000530, "Member 'UWBP_CMN_BlockWindow_C::WBP_CMN_MainMenu_Btn_02' has a wrong offset!");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, WBP_CMN_MainMenu_Btn_03) == 0x000538, "Member 'UWBP_CMN_BlockWindow_C::WBP_CMN_MainMenu_Btn_03' has a wrong offset!");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, WBP_CMN_MainMenu_Btn_04) == 0x000540, "Member 'UWBP_CMN_BlockWindow_C::WBP_CMN_MainMenu_Btn_04' has a wrong offset!");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, OnBlockWindowClosedEvent) == 0x000548, "Member 'UWBP_CMN_BlockWindow_C::OnBlockWindowClosedEvent' has a wrong offset!");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, DecisionCheckPopUp) == 0x000558, "Member 'UWBP_CMN_BlockWindow_C::DecisionCheckPopUp' has a wrong offset!");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, MessageBar) == 0x000560, "Member 'UWBP_CMN_BlockWindow_C::MessageBar' has a wrong offset!");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, bIsShowPopupAnimation) == 0x000568, "Member 'UWBP_CMN_BlockWindow_C::bIsShowPopupAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_CMN_BlockWindow_C, bIsBlocked) == 0x000569, "Member 'UWBP_CMN_BlockWindow_C::bIsBlocked' has a wrong offset!");

}

