#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StickerMasterSystem

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ST_StickerMachineData_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_StickerMasterSystem.BP_StickerMasterSystem_C
// 0x01F0 (0x0480 - 0x0290)
class ABP_StickerMasterSystem_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_Turntable_C*                        Turntable;                                         // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       RenderTargetPlane;                                 // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AUnionStickerFrame*>             Frames;                                            // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AUnionStickerBase*>              Stickers;                                          // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AUnionStickerCamera*                    StickerCamera;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BoxScale;                                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AUnionStickerBase*                      ControlledSticker;                                 // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ConrolledStickerIndex;                             // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TranslationSpeed;                                  // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AxisInputThreshold;                                // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rotation;                                          // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotationSpeed;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScaleSpeed;                                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               UvPreviewMid;                                      // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_StickerTest_C*                     Widget;                                            // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FST_StickerMachineData                 MachineData;                                       // 0x0328(0x0068)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               RenderTargetMid;                                   // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AGarageCamera*                          GarageCamera;                                      // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMenuInputRecieveObject*                InputReceiver;                                     // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUnionStickerSystem*                    StickerSystem;                                     // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          X_Pressed_Flag;                                    // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Y_Pressed_Flag;                                    // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          X_TimerActive;                                     // 0x03B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Y_TimerActive;                                     // 0x03B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          XY_IsTriggered;                                    // 0x03B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInitialize;                                      // 0x03B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B6[0x2];                                      // 0x03B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MoveValue;                                         // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MachineCustomizeSequence_C*         MCSequence;                                        // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_MachineCustom_CustomSticker_C*     ColorPickAndGuideWidget;                           // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSlotIndex;                                  // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentControlledStickerId;                        // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FUserStickerCustomizeData              EditStickerData;                                   // 0x03E0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 StickerGroup;                                      // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEditRear;                                        // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentControlledStickerColorId;                   // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentControlledStickerSurfaceId;                 // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_414[0x4];                                      // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDummyWidget*                           DummyWidget;                                       // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool bIsOpened)> OnColorPickerStateChanged;                        // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsRangeWarningOpen;                                // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431[0x3];                                      // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundHandle                           SoundHandle_Move;                                  // 0x0434(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSoundHandle                           SoundHandle_ZoomIn;                                // 0x0438(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSoundHandle                           SoundHandle_ZoomOut;                               // 0x043C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSoundHandle                           SoundHandle_ZoomSuit;                              // 0x0440(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           XTimerHandle;                                      // 0x0448(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           YTimerHandle;                                      // 0x0450(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_UVPreviewRotate;                             // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_StickerInfo;                                 // 0x0459(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_UVPreviewFrameRotate;                        // 0x045A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45B[0x5];                                      // 0x045B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMenuInputRecieveObject*                MenuButtonInputReceiver;                           // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          LS_Pressed_Flag;                                   // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RS_Pressed_Flag;                                   // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46A[0x6];                                      // 0x046A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  StickerMove_Keyboard_Flag;                         // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BindInputReceiver();
	void CancelEvent(class UObject* Object);
	void CheckSimultaneous();
	void ClampStickerLeft();
	void ClampStickerRight();
	void CollectMaterials();
	void Collision_Adjust();
	void ColorPicker_OnCancel();
	void ColorPicker_OnColorItemFocused(const struct FST_ColorDetailWindowColorItemData& InItemData);
	void ColorPicker_OnColorItemSelected(const struct FST_ColorDetailWindowColorItemData& InItemData);
	void ColorPicker_OnSurfaceItemFocused(const struct FST_PullDownMenuItemData& InItemData);
	void ColorPicker_OnSurfaceItemSelected(const struct FST_PullDownMenuItemData& InItemData);
	void ColorWindowEvent(class UObject* Object);
	void DecisionEvent(class UObject* Object);
	void DeregistInputRecevier();
	void ExecuteUbergraph_BP_StickerMasterSystem(int32 EntryPoint);
	void Finalize();
	void FlipUVEvent(class UObject* Object);
	void GetCustomizeData(struct FUserMachineCustomizeData* OutCustomizeData);
	void GetUVWH(double* OutU, double* OutV, double* OutW, double* OutH);
	void InitCamera(class ABP_GarageCamera_C* GarageCamera_0);
	void InitFrames();
	void InitFrontParts();
	void Initialize(class ABP_MachineCustomizeSequence_C* MCSequence_0, bool IsRear);
	void InitializeStickers(bool IsEditRear_0);
	void InitMachine();
	void InitRearParts();
	void InitRenderTargetMid();
	void InitRenderTargetPlane();
	void InitStickers();
	void InitUvPreview();
	void InitWidget();
	void JudgeStickerMaxScaleHorizontal(double Scale, bool* IsMaxScale);
	void JudgeStickerMaxScaleVertical(double Scale, bool* IsMaxScale);
	void JudgeStickerMinScaleHorizontal(double Scale, bool* IsMinScale);
	void JudgeStickerMinScaleVertical(double Scale, bool* IsMinScale);
	void LeftButtonPressed(class UObject* Object);
	void LeftButtonReleased(class UObject* Object);
	void LoadStickerParts();
	void OnLeftShoulderPressed(class UObject* Object);
	void OnLeftShoulderReleased(class UObject* Object);
	void OnRightShoulderPressed(class UObject* Object);
	void OnRightShoulderReleased(class UObject* Object);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void RegistInputReceiver();
	void Reset_Input_Flag();
	void ResetControlledSticker();
	void ResetInput();
	void ResetStickerSystem();
	void RotateSticker(double InDeltaSeconds);
	void SaveStickerParts();
	void SetHoverDataList(class ABP_MenuRacerPreview_C* Racer);
	void SetMachineDataList(class ABP_MenuRacerPreview_C* Racer);
	void SetupColorPicker();
	void SetupInput();
	void SetupStickerSystem();
	void SetupSwitchStickerSlot();
	void SpecialEvent(class UObject* Object);
	void StickerMoveEvent(class UObject* Object, const struct FVector2D& Value);
	void StopSE();
	void TopButtonPressed(class UObject* Object);
	void TopButtonReleased(class UObject* Object);
	void TranslateScaleSticker(double InDeltaSeconds);
	void TurnStickerFrameVisible(class AUnionStickerBase* Sticker, bool IsVisible);
	void UnbindInputReceiver();
	void UpdateCalculateStickerScale();
	void UpdateRenderTarget();
	void UpdateWarningVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StickerMasterSystem_C">();
	}
	static class ABP_StickerMasterSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_StickerMasterSystem_C>();
	}
};
static_assert(alignof(ABP_StickerMasterSystem_C) == 0x000008, "Wrong alignment on ABP_StickerMasterSystem_C");
static_assert(sizeof(ABP_StickerMasterSystem_C) == 0x000480, "Wrong size on ABP_StickerMasterSystem_C");
static_assert(offsetof(ABP_StickerMasterSystem_C, UberGraphFrame) == 0x000290, "Member 'ABP_StickerMasterSystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_StickerMasterSystem_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, Turntable) == 0x0002A0, "Member 'ABP_StickerMasterSystem_C::Turntable' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, RenderTargetPlane) == 0x0002A8, "Member 'ABP_StickerMasterSystem_C::RenderTargetPlane' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, Frames) == 0x0002B0, "Member 'ABP_StickerMasterSystem_C::Frames' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, Stickers) == 0x0002C0, "Member 'ABP_StickerMasterSystem_C::Stickers' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, StickerCamera) == 0x0002D0, "Member 'ABP_StickerMasterSystem_C::StickerCamera' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, BoxScale) == 0x0002D8, "Member 'ABP_StickerMasterSystem_C::BoxScale' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, ControlledSticker) == 0x0002E0, "Member 'ABP_StickerMasterSystem_C::ControlledSticker' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, ConrolledStickerIndex) == 0x0002E8, "Member 'ABP_StickerMasterSystem_C::ConrolledStickerIndex' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, TranslationSpeed) == 0x0002F0, "Member 'ABP_StickerMasterSystem_C::TranslationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, AxisInputThreshold) == 0x0002F8, "Member 'ABP_StickerMasterSystem_C::AxisInputThreshold' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, Rotation) == 0x000300, "Member 'ABP_StickerMasterSystem_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, RotationSpeed) == 0x000308, "Member 'ABP_StickerMasterSystem_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, ScaleSpeed) == 0x000310, "Member 'ABP_StickerMasterSystem_C::ScaleSpeed' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, UvPreviewMid) == 0x000318, "Member 'ABP_StickerMasterSystem_C::UvPreviewMid' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, Widget) == 0x000320, "Member 'ABP_StickerMasterSystem_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, MachineData) == 0x000328, "Member 'ABP_StickerMasterSystem_C::MachineData' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, RenderTargetMid) == 0x000390, "Member 'ABP_StickerMasterSystem_C::RenderTargetMid' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, GarageCamera) == 0x000398, "Member 'ABP_StickerMasterSystem_C::GarageCamera' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, InputReceiver) == 0x0003A0, "Member 'ABP_StickerMasterSystem_C::InputReceiver' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, StickerSystem) == 0x0003A8, "Member 'ABP_StickerMasterSystem_C::StickerSystem' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, X_Pressed_Flag) == 0x0003B0, "Member 'ABP_StickerMasterSystem_C::X_Pressed_Flag' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, Y_Pressed_Flag) == 0x0003B1, "Member 'ABP_StickerMasterSystem_C::Y_Pressed_Flag' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, X_TimerActive) == 0x0003B2, "Member 'ABP_StickerMasterSystem_C::X_TimerActive' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, Y_TimerActive) == 0x0003B3, "Member 'ABP_StickerMasterSystem_C::Y_TimerActive' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, XY_IsTriggered) == 0x0003B4, "Member 'ABP_StickerMasterSystem_C::XY_IsTriggered' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, IsInitialize) == 0x0003B5, "Member 'ABP_StickerMasterSystem_C::IsInitialize' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, MoveValue) == 0x0003B8, "Member 'ABP_StickerMasterSystem_C::MoveValue' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, MCSequence) == 0x0003C8, "Member 'ABP_StickerMasterSystem_C::MCSequence' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, ColorPickAndGuideWidget) == 0x0003D0, "Member 'ABP_StickerMasterSystem_C::ColorPickAndGuideWidget' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, CurrentSlotIndex) == 0x0003D8, "Member 'ABP_StickerMasterSystem_C::CurrentSlotIndex' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, CurrentControlledStickerId) == 0x0003DC, "Member 'ABP_StickerMasterSystem_C::CurrentControlledStickerId' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, EditStickerData) == 0x0003E0, "Member 'ABP_StickerMasterSystem_C::EditStickerData' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, StickerGroup) == 0x000400, "Member 'ABP_StickerMasterSystem_C::StickerGroup' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, IsEditRear) == 0x000408, "Member 'ABP_StickerMasterSystem_C::IsEditRear' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, CurrentControlledStickerColorId) == 0x00040C, "Member 'ABP_StickerMasterSystem_C::CurrentControlledStickerColorId' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, CurrentControlledStickerSurfaceId) == 0x000410, "Member 'ABP_StickerMasterSystem_C::CurrentControlledStickerSurfaceId' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, DummyWidget) == 0x000418, "Member 'ABP_StickerMasterSystem_C::DummyWidget' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, OnColorPickerStateChanged) == 0x000420, "Member 'ABP_StickerMasterSystem_C::OnColorPickerStateChanged' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, IsRangeWarningOpen) == 0x000430, "Member 'ABP_StickerMasterSystem_C::IsRangeWarningOpen' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, SoundHandle_Move) == 0x000434, "Member 'ABP_StickerMasterSystem_C::SoundHandle_Move' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, SoundHandle_ZoomIn) == 0x000438, "Member 'ABP_StickerMasterSystem_C::SoundHandle_ZoomIn' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, SoundHandle_ZoomOut) == 0x00043C, "Member 'ABP_StickerMasterSystem_C::SoundHandle_ZoomOut' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, SoundHandle_ZoomSuit) == 0x000440, "Member 'ABP_StickerMasterSystem_C::SoundHandle_ZoomSuit' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, XTimerHandle) == 0x000448, "Member 'ABP_StickerMasterSystem_C::XTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, YTimerHandle) == 0x000450, "Member 'ABP_StickerMasterSystem_C::YTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, Debug_UVPreviewRotate) == 0x000458, "Member 'ABP_StickerMasterSystem_C::Debug_UVPreviewRotate' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, Debug_StickerInfo) == 0x000459, "Member 'ABP_StickerMasterSystem_C::Debug_StickerInfo' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, Debug_UVPreviewFrameRotate) == 0x00045A, "Member 'ABP_StickerMasterSystem_C::Debug_UVPreviewFrameRotate' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, MenuButtonInputReceiver) == 0x000460, "Member 'ABP_StickerMasterSystem_C::MenuButtonInputReceiver' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, LS_Pressed_Flag) == 0x000468, "Member 'ABP_StickerMasterSystem_C::LS_Pressed_Flag' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, RS_Pressed_Flag) == 0x000469, "Member 'ABP_StickerMasterSystem_C::RS_Pressed_Flag' has a wrong offset!");
static_assert(offsetof(ABP_StickerMasterSystem_C, StickerMove_Keyboard_Flag) == 0x000470, "Member 'ABP_StickerMasterSystem_C::StickerMove_Keyboard_Flag' has a wrong offset!");

}

