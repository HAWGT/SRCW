#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_MachineState

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"
#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "Engine_structs.hpp"
#include "UnionRun_structs.hpp"
#include "UnionLib_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_MachineState.BPC_MachineState_C
// 0x0090 (0x01F0 - 0x0160)
class UBPC_MachineState_C final : public UCharaMachineSelectSubStateMachine
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0160(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMulticastInlineDelegate<void(int32 PlayerControllerIndex, ECarStatusType machineType, EMachineId MachineId)> MachineTypeScrollStart; // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 PlayerControllerIndex, ECarStatusType machineType, EMachineId MachineId)> MachineTypeDecide; // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UWBP_Popup_Window_Hint_C*               TipsWindow;                                        // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 PlayerIndex, UNION::EMachineSelectMode Mode)> OnMachineSelectModeChanged; // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 PlayerIndex, EMachineId FrontPartsId, EMachineId RearPartsId, EMachineId TirePartsId)> OnMachinePartsFocus; // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 PlayerIndex, EMachineId FrontPartsId, EMachineId RearPartsId, EMachineId TirePartsId)> OnMachinePartsSelect; // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<EMachineId>                            LastMachineIds;                                    // 0x01C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                RemainingTimes;                                    // 0x01D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        RacerUpdateDelay;                                  // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MachinePartsUpdateDelay;                           // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BindCharaMachineSelectWindow(class UCharaMachineSelectBase* InWindow);
	void BindColorWindow(class UWBP_MachineCustom_Sub_PresetPaint_C* InColorWindow);
	void BindMachineTypeSelectWindow(class UMachineTypeScrollControl* InMachineTypeSelectWindow);
	void CharaMachineSelect_ColorDecisionButtonFocusEvent(int32 InPlayerIndex);
	void CharaMachineSelect_OnMachineColorCancelEvent(int32 InPlayerIndex);
	void CharaMachineSelect_OnMachineColorDecisionEvent(int32 InPlayerIndex);
	void CharaMachineSelect_OnMachineColorFocusEvent(const struct FST_ColorPresetSelectPageItemData& ColorPreset, int32 PlayerIndex, int32 ButtonIndex);
	void CharaMachineSelect_OnMachineColorSelectEvent(const struct FST_ColorPresetSelectPageItemData& ColorPreset, int32 PlayerIndex);
	void CharaMachineSelect_OnMachinePartsCancelEvent(int32 InPlayerIndex);
	void CharaMachineSelect_OnMachinePartsDecisionEvent(int32 InPlayerIndex);
	void CharaMachineSelect_OnMachinePartsFocusEvent(int32 PlayerIndex, EMachineId FrontPartsId, EMachineId RearPartsId, EMachineId TirePartsId);
	void CharaMachineSelect_OnMachinePartsSelectEvent(int32 PlayerIndex, EMachineId FrontPartsId, EMachineId RearPartsId, EMachineId TirePartsId);
	void CharaMachineSelect_OnMachineSelectModeChanged(int32 PlayerIndex, UNION::EMachineSelectMode Mode);
	void DecideMachine(int32 InPlayerIndex);
	void ExecuteUbergraph_BPC_MachineState(int32 EntryPoint);
	void OnExitState();
	void OnInitState();
	void OnMachineTypeCancelCallback(int32 SelectedPlayerControllerIndex);
	void OnMachineTypeDecideCallback(int32 SelectedPlayerControllerIndex, ECarStatusType SelectedMachineType, EMachineId SelectedBaseMachineId);
	void OnMachineTypeFocusEvent(class UUnionUIButtonBase* Button);
	void OnMachineTypeScrollEndCallback(int32 SelectedPlayerControllerIndex, ECarStatusType SelectedMachineType, EMachineId SelectedBaseMachineId);
	void ReceiveTick(float DeltaSeconds);
	void SetupMachineColorSelectWindow(int32 InPlayerIndex);
	void ShouldShowSimpleCustomizeTipsWindow(bool* bOutShouldShow);
	void ShowTipsWindow(EHintId InHintId);
	void TipsWindow_CloseEndDelegate();
	void UnbindCharaMachineSelectWindow(class UCharaMachineSelectBase* InWindow);
	void UnbindColorWindow(class UWBP_MachineCustom_Sub_PresetPaint_C* InColorWindow);
	void UnbindMachineTypeSelectWindow(class UMachineTypeScrollControl* InMachineTypeSelectWindow);
	void UpdateNavigationSimpleCustomizeColor(int32 ButtonIndex, int32 PlayerIndex);
	void UpdateRemainTime(int32 InPlayerIndex, double InDeltaTime, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_MachineState_C">();
	}
	static class UBPC_MachineState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_MachineState_C>();
	}
};
static_assert(alignof(UBPC_MachineState_C) == 0x000008, "Wrong alignment on UBPC_MachineState_C");
static_assert(sizeof(UBPC_MachineState_C) == 0x0001F0, "Wrong size on UBPC_MachineState_C");
static_assert(offsetof(UBPC_MachineState_C, UberGraphFrame) == 0x000160, "Member 'UBPC_MachineState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_MachineState_C, MachineTypeScrollStart) == 0x000168, "Member 'UBPC_MachineState_C::MachineTypeScrollStart' has a wrong offset!");
static_assert(offsetof(UBPC_MachineState_C, MachineTypeDecide) == 0x000178, "Member 'UBPC_MachineState_C::MachineTypeDecide' has a wrong offset!");
static_assert(offsetof(UBPC_MachineState_C, TipsWindow) == 0x000188, "Member 'UBPC_MachineState_C::TipsWindow' has a wrong offset!");
static_assert(offsetof(UBPC_MachineState_C, OnMachineSelectModeChanged) == 0x000190, "Member 'UBPC_MachineState_C::OnMachineSelectModeChanged' has a wrong offset!");
static_assert(offsetof(UBPC_MachineState_C, OnMachinePartsFocus) == 0x0001A0, "Member 'UBPC_MachineState_C::OnMachinePartsFocus' has a wrong offset!");
static_assert(offsetof(UBPC_MachineState_C, OnMachinePartsSelect) == 0x0001B0, "Member 'UBPC_MachineState_C::OnMachinePartsSelect' has a wrong offset!");
static_assert(offsetof(UBPC_MachineState_C, LastMachineIds) == 0x0001C0, "Member 'UBPC_MachineState_C::LastMachineIds' has a wrong offset!");
static_assert(offsetof(UBPC_MachineState_C, RemainingTimes) == 0x0001D0, "Member 'UBPC_MachineState_C::RemainingTimes' has a wrong offset!");
static_assert(offsetof(UBPC_MachineState_C, RacerUpdateDelay) == 0x0001E0, "Member 'UBPC_MachineState_C::RacerUpdateDelay' has a wrong offset!");
static_assert(offsetof(UBPC_MachineState_C, MachinePartsUpdateDelay) == 0x0001E8, "Member 'UBPC_MachineState_C::MachinePartsUpdateDelay' has a wrong offset!");

}

