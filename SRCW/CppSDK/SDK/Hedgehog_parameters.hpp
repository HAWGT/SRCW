#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hedgehog

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Hedgehog.HHEasing.BackEaseIn
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_BackEaseIn final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_BackEaseIn) == 0x000004, "Wrong alignment on HHEasing_BackEaseIn");
static_assert(sizeof(HHEasing_BackEaseIn) == 0x000008, "Wrong size on HHEasing_BackEaseIn");
static_assert(offsetof(HHEasing_BackEaseIn, T) == 0x000000, "Member 'HHEasing_BackEaseIn::T' has a wrong offset!");
static_assert(offsetof(HHEasing_BackEaseIn, ReturnValue) == 0x000004, "Member 'HHEasing_BackEaseIn::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.BackEaseInOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_BackEaseInOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_BackEaseInOut) == 0x000004, "Wrong alignment on HHEasing_BackEaseInOut");
static_assert(sizeof(HHEasing_BackEaseInOut) == 0x000008, "Wrong size on HHEasing_BackEaseInOut");
static_assert(offsetof(HHEasing_BackEaseInOut, T) == 0x000000, "Member 'HHEasing_BackEaseInOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_BackEaseInOut, ReturnValue) == 0x000004, "Member 'HHEasing_BackEaseInOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.BackEaseOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_BackEaseOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_BackEaseOut) == 0x000004, "Wrong alignment on HHEasing_BackEaseOut");
static_assert(sizeof(HHEasing_BackEaseOut) == 0x000008, "Wrong size on HHEasing_BackEaseOut");
static_assert(offsetof(HHEasing_BackEaseOut, T) == 0x000000, "Member 'HHEasing_BackEaseOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_BackEaseOut, ReturnValue) == 0x000004, "Member 'HHEasing_BackEaseOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.BounceEaseIn
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_BounceEaseIn final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_BounceEaseIn) == 0x000004, "Wrong alignment on HHEasing_BounceEaseIn");
static_assert(sizeof(HHEasing_BounceEaseIn) == 0x000008, "Wrong size on HHEasing_BounceEaseIn");
static_assert(offsetof(HHEasing_BounceEaseIn, T) == 0x000000, "Member 'HHEasing_BounceEaseIn::T' has a wrong offset!");
static_assert(offsetof(HHEasing_BounceEaseIn, ReturnValue) == 0x000004, "Member 'HHEasing_BounceEaseIn::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.BounceEaseInOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_BounceEaseInOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_BounceEaseInOut) == 0x000004, "Wrong alignment on HHEasing_BounceEaseInOut");
static_assert(sizeof(HHEasing_BounceEaseInOut) == 0x000008, "Wrong size on HHEasing_BounceEaseInOut");
static_assert(offsetof(HHEasing_BounceEaseInOut, T) == 0x000000, "Member 'HHEasing_BounceEaseInOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_BounceEaseInOut, ReturnValue) == 0x000004, "Member 'HHEasing_BounceEaseInOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.BounceEaseOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_BounceEaseOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_BounceEaseOut) == 0x000004, "Wrong alignment on HHEasing_BounceEaseOut");
static_assert(sizeof(HHEasing_BounceEaseOut) == 0x000008, "Wrong size on HHEasing_BounceEaseOut");
static_assert(offsetof(HHEasing_BounceEaseOut, T) == 0x000000, "Member 'HHEasing_BounceEaseOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_BounceEaseOut, ReturnValue) == 0x000004, "Member 'HHEasing_BounceEaseOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.CircularEaseIn
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_CircularEaseIn final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_CircularEaseIn) == 0x000004, "Wrong alignment on HHEasing_CircularEaseIn");
static_assert(sizeof(HHEasing_CircularEaseIn) == 0x000008, "Wrong size on HHEasing_CircularEaseIn");
static_assert(offsetof(HHEasing_CircularEaseIn, T) == 0x000000, "Member 'HHEasing_CircularEaseIn::T' has a wrong offset!");
static_assert(offsetof(HHEasing_CircularEaseIn, ReturnValue) == 0x000004, "Member 'HHEasing_CircularEaseIn::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.CircularEaseInOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_CircularEaseInOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_CircularEaseInOut) == 0x000004, "Wrong alignment on HHEasing_CircularEaseInOut");
static_assert(sizeof(HHEasing_CircularEaseInOut) == 0x000008, "Wrong size on HHEasing_CircularEaseInOut");
static_assert(offsetof(HHEasing_CircularEaseInOut, T) == 0x000000, "Member 'HHEasing_CircularEaseInOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_CircularEaseInOut, ReturnValue) == 0x000004, "Member 'HHEasing_CircularEaseInOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.CircularEaseOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_CircularEaseOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_CircularEaseOut) == 0x000004, "Wrong alignment on HHEasing_CircularEaseOut");
static_assert(sizeof(HHEasing_CircularEaseOut) == 0x000008, "Wrong size on HHEasing_CircularEaseOut");
static_assert(offsetof(HHEasing_CircularEaseOut, T) == 0x000000, "Member 'HHEasing_CircularEaseOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_CircularEaseOut, ReturnValue) == 0x000004, "Member 'HHEasing_CircularEaseOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.CubicEaseIn
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_CubicEaseIn final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_CubicEaseIn) == 0x000004, "Wrong alignment on HHEasing_CubicEaseIn");
static_assert(sizeof(HHEasing_CubicEaseIn) == 0x000008, "Wrong size on HHEasing_CubicEaseIn");
static_assert(offsetof(HHEasing_CubicEaseIn, T) == 0x000000, "Member 'HHEasing_CubicEaseIn::T' has a wrong offset!");
static_assert(offsetof(HHEasing_CubicEaseIn, ReturnValue) == 0x000004, "Member 'HHEasing_CubicEaseIn::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.CubicEaseInOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_CubicEaseInOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_CubicEaseInOut) == 0x000004, "Wrong alignment on HHEasing_CubicEaseInOut");
static_assert(sizeof(HHEasing_CubicEaseInOut) == 0x000008, "Wrong size on HHEasing_CubicEaseInOut");
static_assert(offsetof(HHEasing_CubicEaseInOut, T) == 0x000000, "Member 'HHEasing_CubicEaseInOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_CubicEaseInOut, ReturnValue) == 0x000004, "Member 'HHEasing_CubicEaseInOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.CubicEaseOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_CubicEaseOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_CubicEaseOut) == 0x000004, "Wrong alignment on HHEasing_CubicEaseOut");
static_assert(sizeof(HHEasing_CubicEaseOut) == 0x000008, "Wrong size on HHEasing_CubicEaseOut");
static_assert(offsetof(HHEasing_CubicEaseOut, T) == 0x000000, "Member 'HHEasing_CubicEaseOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_CubicEaseOut, ReturnValue) == 0x000004, "Member 'HHEasing_CubicEaseOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.ElasticEaseIn
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_ElasticEaseIn final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_ElasticEaseIn) == 0x000004, "Wrong alignment on HHEasing_ElasticEaseIn");
static_assert(sizeof(HHEasing_ElasticEaseIn) == 0x000008, "Wrong size on HHEasing_ElasticEaseIn");
static_assert(offsetof(HHEasing_ElasticEaseIn, T) == 0x000000, "Member 'HHEasing_ElasticEaseIn::T' has a wrong offset!");
static_assert(offsetof(HHEasing_ElasticEaseIn, ReturnValue) == 0x000004, "Member 'HHEasing_ElasticEaseIn::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.ElasticEaseInOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_ElasticEaseInOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_ElasticEaseInOut) == 0x000004, "Wrong alignment on HHEasing_ElasticEaseInOut");
static_assert(sizeof(HHEasing_ElasticEaseInOut) == 0x000008, "Wrong size on HHEasing_ElasticEaseInOut");
static_assert(offsetof(HHEasing_ElasticEaseInOut, T) == 0x000000, "Member 'HHEasing_ElasticEaseInOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_ElasticEaseInOut, ReturnValue) == 0x000004, "Member 'HHEasing_ElasticEaseInOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.ElasticEaseOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_ElasticEaseOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_ElasticEaseOut) == 0x000004, "Wrong alignment on HHEasing_ElasticEaseOut");
static_assert(sizeof(HHEasing_ElasticEaseOut) == 0x000008, "Wrong size on HHEasing_ElasticEaseOut");
static_assert(offsetof(HHEasing_ElasticEaseOut, T) == 0x000000, "Member 'HHEasing_ElasticEaseOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_ElasticEaseOut, ReturnValue) == 0x000004, "Member 'HHEasing_ElasticEaseOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.ExponentialEaseIn
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_ExponentialEaseIn final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_ExponentialEaseIn) == 0x000004, "Wrong alignment on HHEasing_ExponentialEaseIn");
static_assert(sizeof(HHEasing_ExponentialEaseIn) == 0x000008, "Wrong size on HHEasing_ExponentialEaseIn");
static_assert(offsetof(HHEasing_ExponentialEaseIn, T) == 0x000000, "Member 'HHEasing_ExponentialEaseIn::T' has a wrong offset!");
static_assert(offsetof(HHEasing_ExponentialEaseIn, ReturnValue) == 0x000004, "Member 'HHEasing_ExponentialEaseIn::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.ExponentialEaseInOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_ExponentialEaseInOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_ExponentialEaseInOut) == 0x000004, "Wrong alignment on HHEasing_ExponentialEaseInOut");
static_assert(sizeof(HHEasing_ExponentialEaseInOut) == 0x000008, "Wrong size on HHEasing_ExponentialEaseInOut");
static_assert(offsetof(HHEasing_ExponentialEaseInOut, T) == 0x000000, "Member 'HHEasing_ExponentialEaseInOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_ExponentialEaseInOut, ReturnValue) == 0x000004, "Member 'HHEasing_ExponentialEaseInOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.LinearEaseIn
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_LinearEaseIn final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_LinearEaseIn) == 0x000004, "Wrong alignment on HHEasing_LinearEaseIn");
static_assert(sizeof(HHEasing_LinearEaseIn) == 0x000008, "Wrong size on HHEasing_LinearEaseIn");
static_assert(offsetof(HHEasing_LinearEaseIn, T) == 0x000000, "Member 'HHEasing_LinearEaseIn::T' has a wrong offset!");
static_assert(offsetof(HHEasing_LinearEaseIn, ReturnValue) == 0x000004, "Member 'HHEasing_LinearEaseIn::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.LinearEaseInOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_LinearEaseInOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_LinearEaseInOut) == 0x000004, "Wrong alignment on HHEasing_LinearEaseInOut");
static_assert(sizeof(HHEasing_LinearEaseInOut) == 0x000008, "Wrong size on HHEasing_LinearEaseInOut");
static_assert(offsetof(HHEasing_LinearEaseInOut, T) == 0x000000, "Member 'HHEasing_LinearEaseInOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_LinearEaseInOut, ReturnValue) == 0x000004, "Member 'HHEasing_LinearEaseInOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.LinearEaseOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_LinearEaseOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_LinearEaseOut) == 0x000004, "Wrong alignment on HHEasing_LinearEaseOut");
static_assert(sizeof(HHEasing_LinearEaseOut) == 0x000008, "Wrong size on HHEasing_LinearEaseOut");
static_assert(offsetof(HHEasing_LinearEaseOut, T) == 0x000000, "Member 'HHEasing_LinearEaseOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_LinearEaseOut, ReturnValue) == 0x000004, "Member 'HHEasing_LinearEaseOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.QuadraticEaseIn
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_QuadraticEaseIn final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_QuadraticEaseIn) == 0x000004, "Wrong alignment on HHEasing_QuadraticEaseIn");
static_assert(sizeof(HHEasing_QuadraticEaseIn) == 0x000008, "Wrong size on HHEasing_QuadraticEaseIn");
static_assert(offsetof(HHEasing_QuadraticEaseIn, T) == 0x000000, "Member 'HHEasing_QuadraticEaseIn::T' has a wrong offset!");
static_assert(offsetof(HHEasing_QuadraticEaseIn, ReturnValue) == 0x000004, "Member 'HHEasing_QuadraticEaseIn::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.QuadraticEaseInOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_QuadraticEaseInOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_QuadraticEaseInOut) == 0x000004, "Wrong alignment on HHEasing_QuadraticEaseInOut");
static_assert(sizeof(HHEasing_QuadraticEaseInOut) == 0x000008, "Wrong size on HHEasing_QuadraticEaseInOut");
static_assert(offsetof(HHEasing_QuadraticEaseInOut, T) == 0x000000, "Member 'HHEasing_QuadraticEaseInOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_QuadraticEaseInOut, ReturnValue) == 0x000004, "Member 'HHEasing_QuadraticEaseInOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.QuadraticEaseOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_QuadraticEaseOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_QuadraticEaseOut) == 0x000004, "Wrong alignment on HHEasing_QuadraticEaseOut");
static_assert(sizeof(HHEasing_QuadraticEaseOut) == 0x000008, "Wrong size on HHEasing_QuadraticEaseOut");
static_assert(offsetof(HHEasing_QuadraticEaseOut, T) == 0x000000, "Member 'HHEasing_QuadraticEaseOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_QuadraticEaseOut, ReturnValue) == 0x000004, "Member 'HHEasing_QuadraticEaseOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.QuarticEaseIn
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_QuarticEaseIn final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_QuarticEaseIn) == 0x000004, "Wrong alignment on HHEasing_QuarticEaseIn");
static_assert(sizeof(HHEasing_QuarticEaseIn) == 0x000008, "Wrong size on HHEasing_QuarticEaseIn");
static_assert(offsetof(HHEasing_QuarticEaseIn, T) == 0x000000, "Member 'HHEasing_QuarticEaseIn::T' has a wrong offset!");
static_assert(offsetof(HHEasing_QuarticEaseIn, ReturnValue) == 0x000004, "Member 'HHEasing_QuarticEaseIn::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.QuarticEaseInOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_QuarticEaseInOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_QuarticEaseInOut) == 0x000004, "Wrong alignment on HHEasing_QuarticEaseInOut");
static_assert(sizeof(HHEasing_QuarticEaseInOut) == 0x000008, "Wrong size on HHEasing_QuarticEaseInOut");
static_assert(offsetof(HHEasing_QuarticEaseInOut, T) == 0x000000, "Member 'HHEasing_QuarticEaseInOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_QuarticEaseInOut, ReturnValue) == 0x000004, "Member 'HHEasing_QuarticEaseInOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.QuarticEaseOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_QuarticEaseOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_QuarticEaseOut) == 0x000004, "Wrong alignment on HHEasing_QuarticEaseOut");
static_assert(sizeof(HHEasing_QuarticEaseOut) == 0x000008, "Wrong size on HHEasing_QuarticEaseOut");
static_assert(offsetof(HHEasing_QuarticEaseOut, T) == 0x000000, "Member 'HHEasing_QuarticEaseOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_QuarticEaseOut, ReturnValue) == 0x000004, "Member 'HHEasing_QuarticEaseOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.QuinticEaseIn
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_QuinticEaseIn final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_QuinticEaseIn) == 0x000004, "Wrong alignment on HHEasing_QuinticEaseIn");
static_assert(sizeof(HHEasing_QuinticEaseIn) == 0x000008, "Wrong size on HHEasing_QuinticEaseIn");
static_assert(offsetof(HHEasing_QuinticEaseIn, T) == 0x000000, "Member 'HHEasing_QuinticEaseIn::T' has a wrong offset!");
static_assert(offsetof(HHEasing_QuinticEaseIn, ReturnValue) == 0x000004, "Member 'HHEasing_QuinticEaseIn::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.QuinticEaseInOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_QuinticEaseInOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_QuinticEaseInOut) == 0x000004, "Wrong alignment on HHEasing_QuinticEaseInOut");
static_assert(sizeof(HHEasing_QuinticEaseInOut) == 0x000008, "Wrong size on HHEasing_QuinticEaseInOut");
static_assert(offsetof(HHEasing_QuinticEaseInOut, T) == 0x000000, "Member 'HHEasing_QuinticEaseInOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_QuinticEaseInOut, ReturnValue) == 0x000004, "Member 'HHEasing_QuinticEaseInOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.QuinticEaseOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_QuinticEaseOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_QuinticEaseOut) == 0x000004, "Wrong alignment on HHEasing_QuinticEaseOut");
static_assert(sizeof(HHEasing_QuinticEaseOut) == 0x000008, "Wrong size on HHEasing_QuinticEaseOut");
static_assert(offsetof(HHEasing_QuinticEaseOut, T) == 0x000000, "Member 'HHEasing_QuinticEaseOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_QuinticEaseOut, ReturnValue) == 0x000004, "Member 'HHEasing_QuinticEaseOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.SineEaseIn
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_SineEaseIn final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_SineEaseIn) == 0x000004, "Wrong alignment on HHEasing_SineEaseIn");
static_assert(sizeof(HHEasing_SineEaseIn) == 0x000008, "Wrong size on HHEasing_SineEaseIn");
static_assert(offsetof(HHEasing_SineEaseIn, T) == 0x000000, "Member 'HHEasing_SineEaseIn::T' has a wrong offset!");
static_assert(offsetof(HHEasing_SineEaseIn, ReturnValue) == 0x000004, "Member 'HHEasing_SineEaseIn::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.SineEaseInOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_SineEaseInOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_SineEaseInOut) == 0x000004, "Wrong alignment on HHEasing_SineEaseInOut");
static_assert(sizeof(HHEasing_SineEaseInOut) == 0x000008, "Wrong size on HHEasing_SineEaseInOut");
static_assert(offsetof(HHEasing_SineEaseInOut, T) == 0x000000, "Member 'HHEasing_SineEaseInOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_SineEaseInOut, ReturnValue) == 0x000004, "Member 'HHEasing_SineEaseInOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHEasing.SineEaseOut
// 0x0008 (0x0008 - 0x0000)
struct HHEasing_SineEaseOut final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHEasing_SineEaseOut) == 0x000004, "Wrong alignment on HHEasing_SineEaseOut");
static_assert(sizeof(HHEasing_SineEaseOut) == 0x000008, "Wrong size on HHEasing_SineEaseOut");
static_assert(offsetof(HHEasing_SineEaseOut, T) == 0x000000, "Member 'HHEasing_SineEaseOut::T' has a wrong offset!");
static_assert(offsetof(HHEasing_SineEaseOut, ReturnValue) == 0x000004, "Member 'HHEasing_SineEaseOut::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHMathUtility.Percentile
// 0x0010 (0x0010 - 0x0000)
struct HHMathUtility_Percentile final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHMathUtility_Percentile) == 0x000004, "Wrong alignment on HHMathUtility_Percentile");
static_assert(sizeof(HHMathUtility_Percentile) == 0x000010, "Wrong size on HHMathUtility_Percentile");
static_assert(offsetof(HHMathUtility_Percentile, Min) == 0x000000, "Member 'HHMathUtility_Percentile::Min' has a wrong offset!");
static_assert(offsetof(HHMathUtility_Percentile, Max) == 0x000004, "Member 'HHMathUtility_Percentile::Max' has a wrong offset!");
static_assert(offsetof(HHMathUtility_Percentile, Value) == 0x000008, "Member 'HHMathUtility_Percentile::Value' has a wrong offset!");
static_assert(offsetof(HHMathUtility_Percentile, ReturnValue) == 0x00000C, "Member 'HHMathUtility_Percentile::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHMathUtility.Vector3Angle
// 0x0038 (0x0038 - 0x0000)
struct HHMathUtility_Vector3Angle final
{
public:
	struct FVector                                v0;                                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                v1;                                                // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HHMathUtility_Vector3Angle) == 0x000008, "Wrong alignment on HHMathUtility_Vector3Angle");
static_assert(sizeof(HHMathUtility_Vector3Angle) == 0x000038, "Wrong size on HHMathUtility_Vector3Angle");
static_assert(offsetof(HHMathUtility_Vector3Angle, v0) == 0x000000, "Member 'HHMathUtility_Vector3Angle::v0' has a wrong offset!");
static_assert(offsetof(HHMathUtility_Vector3Angle, v1) == 0x000018, "Member 'HHMathUtility_Vector3Angle::v1' has a wrong offset!");
static_assert(offsetof(HHMathUtility_Vector3Angle, ReturnValue) == 0x000030, "Member 'HHMathUtility_Vector3Angle::ReturnValue' has a wrong offset!");

// Function Hedgehog.HHMathUtility.Vector3RotateTowards
// 0x0068 (0x0068 - 0x0000)
struct HHMathUtility_Vector3RotateTowards final
{
public:
	struct FVector                                Current;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         maxMagnitudeDelta;                                 // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0050(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HHMathUtility_Vector3RotateTowards) == 0x000008, "Wrong alignment on HHMathUtility_Vector3RotateTowards");
static_assert(sizeof(HHMathUtility_Vector3RotateTowards) == 0x000068, "Wrong size on HHMathUtility_Vector3RotateTowards");
static_assert(offsetof(HHMathUtility_Vector3RotateTowards, Current) == 0x000000, "Member 'HHMathUtility_Vector3RotateTowards::Current' has a wrong offset!");
static_assert(offsetof(HHMathUtility_Vector3RotateTowards, Target) == 0x000018, "Member 'HHMathUtility_Vector3RotateTowards::Target' has a wrong offset!");
static_assert(offsetof(HHMathUtility_Vector3RotateTowards, Axis) == 0x000030, "Member 'HHMathUtility_Vector3RotateTowards::Axis' has a wrong offset!");
static_assert(offsetof(HHMathUtility_Vector3RotateTowards, maxMagnitudeDelta) == 0x000048, "Member 'HHMathUtility_Vector3RotateTowards::maxMagnitudeDelta' has a wrong offset!");
static_assert(offsetof(HHMathUtility_Vector3RotateTowards, ReturnValue) == 0x000050, "Member 'HHMathUtility_Vector3RotateTowards::ReturnValue' has a wrong offset!");

}

