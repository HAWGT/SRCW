#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MachineCustomizeSequence

#include "Basic.hpp"

#include "UnionSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "UNION_structs.hpp"
#include "UNION_classes.hpp"
#include "ST_GarageData_structs.hpp"
#include "UnionRun_structs.hpp"
#include "EMachineCustomizeSequenceMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MachineCustomizeSequence.BP_MachineCustomizeSequence_C
// 0x0128 (0x04A0 - 0x0378)
class ABP_MachineCustomizeSequence_C final : public AMachineCustomizeSequence
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0378(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_MachineCustomizeAuraSelectState_C* BPC_MachineCustomizeAuraSelectState;               // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_MachineCustomizeHornSelectState_C* BPC_MachineCustomizeHornSelectState;               // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_MachineCustomizeStickerApplyState_C* BPC_MachineCustomizeStickerApplyState;           // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_MachineCustomizeStickerSelectState_C* BPC_MachineCustomizeStickerSelectState;         // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_MachineCustomizeStickerSlotSelectState_C* BPC_MachineCustomizeStickerSlotSelectState; // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_MachineCustomizeSaveState_C*       BPC_MachineCustomizeSaveState;                     // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_MachineCustomizeColorPresetSelectState_C* BPC_MachineCustomizeColorPresetSelectState; // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_MachineCustomizeColorDetailState_C* BPC_MachineCustomizeColorDetailState;             // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_MachineCustomizeColorAreaSelectState_C* BPC_MachineCustomizeColorAreaSelectState;     // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_MachineCustomizePartsSelectState_C* BPC_MachineCustomizePartsSelectState;             // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_MachineCustomizeMachineSelectState_C* BPC_MachineCustomizeMachineSelectState;         // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_MachineCustomizeInitState_C*       BPC_MachineCustomizeInitState;                     // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnExit;                                            // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FST_GarageData                         GarageData;                                        // 0x03F0(0x0058)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(EMachineId InMachineID)> OnMachineSelected;                        // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(EMachineId InMachineID, EMachinePartsType InMachinePartsType)> OnShortcutCustomizeStarted; // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bHasExitedByShortcut;                              // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bInIsControllable)> OnTurntableControlStateChanged;           // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(bool bInIsControllable)> OnParamWindowControlStateChanged;         // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Is_Message_Bar_Visible;                            // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonMessageBar*                      MessageBar;                                        // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Deregister();
	void DispatchOnMachineSelectedEvent();
	void DispatchOnShortcutCustomizeStartedEvent(EMachineId InMachineID, EMachinePartsType InMachinePartsType);
	void ExecuteUbergraph_BP_MachineCustomizeSequence(int32 EntryPoint);
	void Exit();
	void GetMachineParams(const struct FUserMachineCustomizeData& InCustomizeData, double* OutSpeed, double* OutAccel, double* OutHandling, double* OutPower, double* OutDash);
	void OnFinalize();
	void OnInitialize();
	void Register();
	void ResetMessageBar();
	void SetCanControlParamWindow(bool bInCanControl);
	void SetCanControlTurntable(bool bInCanControl);
	void SetFocusToDummy();
	void SetGarageData(const struct FST_GarageData& InGarageData);
	void SetHasExitedByShortcut(bool bInHasExited);
	void SetMessageBarVisible(bool Is_Message_Bar_Visible_0);
	void Setup(const struct FST_GarageData& InGarageData);
	void SetupMessageBar();
	void UpdateParamWindowByCustomizeData(const struct FUserMachineCustomizeData& InCurrentCustomizeData, const struct FUserMachineCustomizeData& InCandCustomizeData);
	void UpdateParamWindowBySelectedData();
	void UpdateRacer(bool bInForcedSetting);

	class AAppPlayerController* GetAppPlayerController() const;
	void GetGarageData(struct FST_GarageData* OutGarageData) const;
	class UMachineCustomTop* GetMachineCustomTop() const;
	void GetParamData(EDriverId InDriverId, EMachineId InFrontPartsId, EMachineId InRearPartsId, EMachineId InTirePartsId, const TArray<EGadgetId>& InGadgetIds, struct FRacerParamData* OutParamData) const;
	class APlayerController* GetPlayerController() const;
	class AMenuRacerBase* GetRacer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MachineCustomizeSequence_C">();
	}
	static class ABP_MachineCustomizeSequence_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MachineCustomizeSequence_C>();
	}
};
static_assert(alignof(ABP_MachineCustomizeSequence_C) == 0x000008, "Wrong alignment on ABP_MachineCustomizeSequence_C");
static_assert(sizeof(ABP_MachineCustomizeSequence_C) == 0x0004A0, "Wrong size on ABP_MachineCustomizeSequence_C");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, UberGraphFrame) == 0x000378, "Member 'ABP_MachineCustomizeSequence_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, BPC_MachineCustomizeAuraSelectState) == 0x000380, "Member 'ABP_MachineCustomizeSequence_C::BPC_MachineCustomizeAuraSelectState' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, BPC_MachineCustomizeHornSelectState) == 0x000388, "Member 'ABP_MachineCustomizeSequence_C::BPC_MachineCustomizeHornSelectState' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, BPC_MachineCustomizeStickerApplyState) == 0x000390, "Member 'ABP_MachineCustomizeSequence_C::BPC_MachineCustomizeStickerApplyState' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, BPC_MachineCustomizeStickerSelectState) == 0x000398, "Member 'ABP_MachineCustomizeSequence_C::BPC_MachineCustomizeStickerSelectState' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, BPC_MachineCustomizeStickerSlotSelectState) == 0x0003A0, "Member 'ABP_MachineCustomizeSequence_C::BPC_MachineCustomizeStickerSlotSelectState' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, BPC_MachineCustomizeSaveState) == 0x0003A8, "Member 'ABP_MachineCustomizeSequence_C::BPC_MachineCustomizeSaveState' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, BPC_MachineCustomizeColorPresetSelectState) == 0x0003B0, "Member 'ABP_MachineCustomizeSequence_C::BPC_MachineCustomizeColorPresetSelectState' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, BPC_MachineCustomizeColorDetailState) == 0x0003B8, "Member 'ABP_MachineCustomizeSequence_C::BPC_MachineCustomizeColorDetailState' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, BPC_MachineCustomizeColorAreaSelectState) == 0x0003C0, "Member 'ABP_MachineCustomizeSequence_C::BPC_MachineCustomizeColorAreaSelectState' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, BPC_MachineCustomizePartsSelectState) == 0x0003C8, "Member 'ABP_MachineCustomizeSequence_C::BPC_MachineCustomizePartsSelectState' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, BPC_MachineCustomizeMachineSelectState) == 0x0003D0, "Member 'ABP_MachineCustomizeSequence_C::BPC_MachineCustomizeMachineSelectState' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, BPC_MachineCustomizeInitState) == 0x0003D8, "Member 'ABP_MachineCustomizeSequence_C::BPC_MachineCustomizeInitState' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, OnExit) == 0x0003E0, "Member 'ABP_MachineCustomizeSequence_C::OnExit' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, GarageData) == 0x0003F0, "Member 'ABP_MachineCustomizeSequence_C::GarageData' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, OnMachineSelected) == 0x000448, "Member 'ABP_MachineCustomizeSequence_C::OnMachineSelected' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, OnShortcutCustomizeStarted) == 0x000458, "Member 'ABP_MachineCustomizeSequence_C::OnShortcutCustomizeStarted' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, bHasExitedByShortcut) == 0x000468, "Member 'ABP_MachineCustomizeSequence_C::bHasExitedByShortcut' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, OnTurntableControlStateChanged) == 0x000470, "Member 'ABP_MachineCustomizeSequence_C::OnTurntableControlStateChanged' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, OnParamWindowControlStateChanged) == 0x000480, "Member 'ABP_MachineCustomizeSequence_C::OnParamWindowControlStateChanged' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, Is_Message_Bar_Visible) == 0x000490, "Member 'ABP_MachineCustomizeSequence_C::Is_Message_Bar_Visible' has a wrong offset!");
static_assert(offsetof(ABP_MachineCustomizeSequence_C, MessageBar) == 0x000498, "Member 'ABP_MachineCustomizeSequence_C::MessageBar' has a wrong offset!");

}

