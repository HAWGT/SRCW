#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Race_Sub_Btn_Key

#include "Basic.hpp"

#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.ExecuteUbergraph_WBP_Race_Sub_Btn_Key
// 0x0068 (0x0068 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_9;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_8;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_7;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_6;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_5;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_4;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_3;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_2;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue_1;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_InValue;                              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue_1;         // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_InState;                              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key) == 0x000008, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key) == 0x000068, "Wrong size on WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, EntryPoint) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, K2Node_Event_InValue_9) == 0x000004, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::K2Node_Event_InValue_9' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, K2Node_Event_InValue_8) == 0x000010, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::K2Node_Event_InValue_8' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, K2Node_Event_InValue_7) == 0x000014, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::K2Node_Event_InValue_7' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, K2Node_Event_InValue_6) == 0x000018, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::K2Node_Event_InValue_6' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, K2Node_Event_InValue_5) == 0x00001C, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::K2Node_Event_InValue_5' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, K2Node_Event_InValue_4) == 0x000020, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::K2Node_Event_InValue_4' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, K2Node_Event_InValue_3) == 0x000024, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::K2Node_Event_InValue_3' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, K2Node_Event_InValue_2) == 0x000028, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::K2Node_Event_InValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, K2Node_Event_InValue_1) == 0x00002C, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::K2Node_Event_InValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, K2Node_Event_InValue) == 0x000030, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::K2Node_Event_InValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000034, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, CallFunc_PlayAnimation_ReturnValue) == 0x000038, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, CallFunc_PlayAnimation_ReturnValue_1) == 0x000040, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000048, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000049, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x00004A, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, CallFunc_IsAnimationPlaying_ReturnValue_1) == 0x00004B, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::CallFunc_IsAnimationPlaying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, K2Node_Event_InState) == 0x00004C, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::K2Node_Event_InState' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000050, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000058, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000060, "Member 'WBP_Race_Sub_Btn_Key_C_ExecuteUbergraph_WBP_Race_Sub_Btn_Key::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.OnAccelInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_OnAccelInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_OnAccelInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_OnAccelInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_OnAccelInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Key_C_OnAccelInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_OnAccelInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_OnAccelInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.OnBrakeInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_OnBrakeInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_OnBrakeInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_OnBrakeInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_OnBrakeInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Key_C_OnBrakeInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_OnBrakeInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_OnBrakeInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.OnPitchInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_OnPitchInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_OnPitchInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_OnPitchInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_OnPitchInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Key_C_OnPitchInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_OnPitchInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_OnPitchInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.OnSlimeCancelXInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_OnSlimeCancelXInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_OnSlimeCancelXInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_OnSlimeCancelXInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_OnSlimeCancelXInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Key_C_OnSlimeCancelXInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_OnSlimeCancelXInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_OnSlimeCancelXInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.OnSlimeCancelYInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_OnSlimeCancelYInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_OnSlimeCancelYInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_OnSlimeCancelYInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_OnSlimeCancelYInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Key_C_OnSlimeCancelYInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_OnSlimeCancelYInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_OnSlimeCancelYInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.OnSteerInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_OnSteerInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_OnSteerInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_OnSteerInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_OnSteerInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Key_C_OnSteerInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_OnSteerInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_OnSteerInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.OnTrickX2Input
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_OnTrickX2Input final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_OnTrickX2Input) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_OnTrickX2Input");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_OnTrickX2Input) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Key_C_OnTrickX2Input");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_OnTrickX2Input, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_OnTrickX2Input::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.OnTrickXInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_OnTrickXInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_OnTrickXInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_OnTrickXInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_OnTrickXInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Key_C_OnTrickXInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_OnTrickXInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_OnTrickXInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.OnTrickY2Input
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_OnTrickY2Input final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_OnTrickY2Input) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_OnTrickY2Input");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_OnTrickY2Input) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Key_C_OnTrickY2Input");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_OnTrickY2Input, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_OnTrickY2Input::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.OnTrickYInput
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_OnTrickYInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_OnTrickYInput) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_OnTrickYInput");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_OnTrickYInput) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Key_C_OnTrickYInput");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_OnTrickYInput, InValue) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_OnTrickYInput::InValue' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.SetButtonState
// 0x0004 (0x0004 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_SetButtonState final
{
public:
	int32                                         InState;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_SetButtonState) == 0x000004, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_SetButtonState");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_SetButtonState) == 0x000004, "Wrong size on WBP_Race_Sub_Btn_Key_C_SetButtonState");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetButtonState, InState) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_SetButtonState::InState' has a wrong offset!");

// Function WBP_Race_Sub_Btn_Key.WBP_Race_Sub_Btn_Key_C.SetKey
// 0x0070 (0x0070 - 0x0000)
struct WBP_Race_Sub_Btn_Key_C_SetKey final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         PlayerControllerIndex;                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetKeyDisplayName_ReturnValue;            // 0x0020(0x0010)()
	int32                                         CallFunc_GetMouseButtonIndex_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Key_IsMouseButton_ReturnValue;            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Temp_object_Variable;                              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable_1;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable_2;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable_3;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable_4;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               K2Node_Select_Default;                             // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Race_Sub_Btn_Key_C_SetKey) == 0x000008, "Wrong alignment on WBP_Race_Sub_Btn_Key_C_SetKey");
static_assert(sizeof(WBP_Race_Sub_Btn_Key_C_SetKey) == 0x000070, "Wrong size on WBP_Race_Sub_Btn_Key_C_SetKey");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, InKey) == 0x000000, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::InKey' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, PlayerControllerIndex) == 0x000018, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::PlayerControllerIndex' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, Temp_int_Variable) == 0x00001C, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, CallFunc_GetKeyDisplayName_ReturnValue) == 0x000020, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::CallFunc_GetKeyDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, CallFunc_GetMouseButtonIndex_ReturnValue) == 0x000030, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::CallFunc_GetMouseButtonIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, CallFunc_Key_IsMouseButton_ReturnValue) == 0x000034, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::CallFunc_Key_IsMouseButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, Temp_object_Variable) == 0x000038, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, Temp_object_Variable_1) == 0x000040, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, Temp_object_Variable_2) == 0x000048, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, Temp_object_Variable_3) == 0x000050, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, Temp_object_Variable_4) == 0x000058, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000060, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Race_Sub_Btn_Key_C_SetKey, K2Node_Select_Default) == 0x000068, "Member 'WBP_Race_Sub_Btn_Key_C_SetKey::K2Node_Select_Default' has a wrong offset!");

}

