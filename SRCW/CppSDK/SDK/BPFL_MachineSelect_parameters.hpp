#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_MachineSelect

#include "Basic.hpp"

#include "UNION_structs.hpp"
#include "UnionSystem_structs.hpp"
#include "UnionRun_structs.hpp"


namespace SDK::Params
{

// Function BPFL_MachineSelect.BPFL_MachineSelect_C.CalcMachineTypeByMachineId
// 0x0048 (0x0048 - 0x0000)
struct BPFL_MachineSelect_C_CalcMachineTypeByMachineId final
{
public:
	EMachineId                                    MachineId;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECarStatusType                                StatusType;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LocalID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_2;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_3;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_3;            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_4;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_4;            // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_5;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId) == 0x000008, "Wrong alignment on BPFL_MachineSelect_C_CalcMachineTypeByMachineId");
static_assert(sizeof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId) == 0x000048, "Wrong size on BPFL_MachineSelect_C_CalcMachineTypeByMachineId");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, MachineId) == 0x000000, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::MachineId' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, __WorldContext) == 0x000008, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, StatusType) == 0x000010, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::StatusType' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, LocalID) == 0x000014, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::LocalID' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_MakeLiteralByte_ReturnValue) == 0x000018, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00001C, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000020, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000024, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_Conv_ByteToInt_ReturnValue_2) == 0x000028, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_Conv_ByteToInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x00002C, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_Conv_ByteToInt_ReturnValue_3) == 0x000030, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_Conv_ByteToInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_MakeLiteralByte_ReturnValue_3) == 0x000034, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_MakeLiteralByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_Less_IntInt_ReturnValue) == 0x000035, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_Conv_ByteToInt_ReturnValue_4) == 0x000038, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_Conv_ByteToInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_Less_IntInt_ReturnValue_1) == 0x00003C, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_MakeLiteralByte_ReturnValue_4) == 0x00003D, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_MakeLiteralByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_Less_IntInt_ReturnValue_2) == 0x00003E, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_Conv_ByteToInt_ReturnValue_5) == 0x000040, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_Conv_ByteToInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000044, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByMachineId, CallFunc_Less_IntInt_ReturnValue_3) == 0x000045, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByMachineId::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");

// Function BPFL_MachineSelect.BPFL_MachineSelect_C.CalcMachineTypeByRom1stMachineId
// 0x0050 (0x0050 - 0x0000)
struct BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId final
{
public:
	ERom1stMachineId                              Rom1stMachineId;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECarStatusType                                StatusType;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LocalID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_2;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_3;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_3;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_4;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_4;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_5;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_5;            // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_6;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId) == 0x000008, "Wrong alignment on BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId");
static_assert(sizeof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId) == 0x000050, "Wrong size on BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, Rom1stMachineId) == 0x000000, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::Rom1stMachineId' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, __WorldContext) == 0x000008, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, StatusType) == 0x000010, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::StatusType' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, LocalID) == 0x000014, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::LocalID' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_MakeLiteralByte_ReturnValue) == 0x000018, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00001C, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000020, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000024, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x000025, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_Conv_ByteToInt_ReturnValue_2) == 0x000028, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_Conv_ByteToInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_Conv_ByteToInt_ReturnValue_3) == 0x00002C, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_Conv_ByteToInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_MakeLiteralByte_ReturnValue_3) == 0x000030, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_MakeLiteralByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_MakeLiteralByte_ReturnValue_4) == 0x000031, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_MakeLiteralByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_Conv_ByteToInt_ReturnValue_4) == 0x000034, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_Conv_ByteToInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_Conv_ByteToInt_ReturnValue_5) == 0x000038, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_Conv_ByteToInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_Less_IntInt_ReturnValue_1) == 0x00003D, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_Less_IntInt_ReturnValue_2) == 0x00003E, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_MakeLiteralByte_ReturnValue_5) == 0x00003F, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_MakeLiteralByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_Less_IntInt_ReturnValue_3) == 0x000040, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_Conv_ByteToInt_ReturnValue_6) == 0x000044, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_Conv_ByteToInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000048, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId, CallFunc_Less_IntInt_ReturnValue_4) == 0x000049, "Member 'BPFL_MachineSelect_C_CalcMachineTypeByRom1stMachineId::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");

// Function BPFL_MachineSelect.BPFL_MachineSelect_C.CanSelectCharaAndHover
// 0x0090 (0x0090 - 0x0000)
struct BPFL_MachineSelect_C_CanSelectCharaAndHover final
{
public:
	EDriverId                                     InCheckDriverId;                                   // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanUse;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDontUsedHover;                                    // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EDriverId>                             DontUseHoverFullCheck;                             // 0x0018(0x0010)(Edit, BlueprintVisible)
	TArray<EDriverId>                             CanUseRomCheck;                                    // 0x0028(0x0010)(Edit, BlueprintVisible)
	TArray<EDriverId>                             DontUseHoverCheck;                                 // 0x0038(0x0010)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanSelectChara_ReturnValue;               // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EDriverId>                             K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
	TArray<EDriverId>                             K2Node_MakeArray_Array_1;                          // 0x0060(0x0010)(ReferenceParm)
	struct FAppCharaOpenData                      CallFunc_GetAppCharaOpenData_OutData;              // 0x0070(0x0002)(NoDestructor)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EDriverId>                             K2Node_Select_Default;                             // 0x0078(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_MachineSelect_C_CanSelectCharaAndHover) == 0x000008, "Wrong alignment on BPFL_MachineSelect_C_CanSelectCharaAndHover");
static_assert(sizeof(BPFL_MachineSelect_C_CanSelectCharaAndHover) == 0x000090, "Wrong size on BPFL_MachineSelect_C_CanSelectCharaAndHover");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, InCheckDriverId) == 0x000000, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::InCheckDriverId' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, __WorldContext) == 0x000008, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, bCanUse) == 0x000010, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::bCanUse' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, bDontUsedHover) == 0x000011, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::bDontUsedHover' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, DontUseHoverFullCheck) == 0x000018, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::DontUseHoverFullCheck' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, CanUseRomCheck) == 0x000028, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::CanUseRomCheck' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, DontUseHoverCheck) == 0x000038, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::DontUseHoverCheck' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, Temp_bool_Variable) == 0x000048, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, CallFunc_CanSelectChara_ReturnValue) == 0x000049, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::CallFunc_CanSelectChara_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, K2Node_MakeArray_Array) == 0x000050, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, K2Node_MakeArray_Array_1) == 0x000060, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, CallFunc_GetAppCharaOpenData_OutData) == 0x000070, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::CallFunc_GetAppCharaOpenData_OutData' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, K2Node_Select_Default) == 0x000078, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_CanSelectCharaAndHover, CallFunc_Array_Contains_ReturnValue) == 0x000088, "Member 'BPFL_MachineSelect_C_CanSelectCharaAndHover::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function BPFL_MachineSelect.BPFL_MachineSelect_C.ConvertRom1stTypeIndexToMachineId
// 0x0038 (0x0038 - 0x0000)
struct BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId final
{
public:
	ECarStatusType                                machineType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TypeCount;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EMachineId                                    MachineId;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECarStatusType                                Temp_byte_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_3;            // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_4;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMachineId                                    K2Node_Select_Default;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId) == 0x000008, "Wrong alignment on BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId");
static_assert(sizeof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId) == 0x000038, "Wrong size on BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, machineType) == 0x000000, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::machineType' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, Index_0) == 0x000004, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::Index_0' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, TypeCount) == 0x000008, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::TypeCount' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, __WorldContext) == 0x000010, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, MachineId) == 0x000018, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::MachineId' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, CallFunc_MakeLiteralByte_ReturnValue) == 0x000019, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, CallFunc_Percent_IntInt_ReturnValue) == 0x00001C, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000020, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, Temp_byte_Variable) == 0x000021, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x000022, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, CallFunc_MakeLiteralByte_ReturnValue_3) == 0x000023, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::CallFunc_MakeLiteralByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, CallFunc_MakeLiteralByte_ReturnValue_4) == 0x000024, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::CallFunc_MakeLiteralByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, K2Node_Select_Default) == 0x000025, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000028, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, CallFunc_Conv_IntToByte_ReturnValue) == 0x000030, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId, CallFunc_GetValidValue_ReturnValue) == 0x000031, "Member 'BPFL_MachineSelect_C_ConvertRom1stTypeIndexToMachineId::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function BPFL_MachineSelect.BPFL_MachineSelect_C.ConvertTypeIndexToMachineId
// 0x0030 (0x0030 - 0x0000)
struct BPFL_MachineSelect_C_ConvertTypeIndexToMachineId final
{
public:
	ECarStatusType                                machineType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EMachineId                                    MachineId;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECarStatusType                                Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_3;            // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_4;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMachineId                                    K2Node_Select_Default;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId) == 0x000008, "Wrong alignment on BPFL_MachineSelect_C_ConvertTypeIndexToMachineId");
static_assert(sizeof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId) == 0x000030, "Wrong size on BPFL_MachineSelect_C_ConvertTypeIndexToMachineId");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, machineType) == 0x000000, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::machineType' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, Index_0) == 0x000004, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::Index_0' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, __WorldContext) == 0x000008, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, MachineId) == 0x000010, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::MachineId' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, CallFunc_MakeLiteralByte_ReturnValue) == 0x000011, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, CallFunc_Percent_IntInt_ReturnValue) == 0x000014, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000018, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, Temp_byte_Variable) == 0x000019, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x00001A, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, CallFunc_MakeLiteralByte_ReturnValue_3) == 0x00001B, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::CallFunc_MakeLiteralByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, CallFunc_MakeLiteralByte_ReturnValue_4) == 0x00001C, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::CallFunc_MakeLiteralByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, K2Node_Select_Default) == 0x00001D, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000020, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, CallFunc_Conv_IntToByte_ReturnValue) == 0x000028, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_ConvertTypeIndexToMachineId, CallFunc_GetValidValue_ReturnValue) == 0x000029, "Member 'BPFL_MachineSelect_C_ConvertTypeIndexToMachineId::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function BPFL_MachineSelect.BPFL_MachineSelect_C.GetRom1stMachineCountPerType
// 0x0030 (0x0030 - 0x0000)
struct BPFL_MachineSelect_C_GetRom1stMachineCountPerType final
{
public:
	ECarStatusType                                StatusType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECarStatusType                                Temp_byte_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_MachineSelect_C_GetRom1stMachineCountPerType) == 0x000008, "Wrong alignment on BPFL_MachineSelect_C_GetRom1stMachineCountPerType");
static_assert(sizeof(BPFL_MachineSelect_C_GetRom1stMachineCountPerType) == 0x000030, "Wrong size on BPFL_MachineSelect_C_GetRom1stMachineCountPerType");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineCountPerType, StatusType) == 0x000000, "Member 'BPFL_MachineSelect_C_GetRom1stMachineCountPerType::StatusType' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineCountPerType, __WorldContext) == 0x000008, "Member 'BPFL_MachineSelect_C_GetRom1stMachineCountPerType::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineCountPerType, Count) == 0x000010, "Member 'BPFL_MachineSelect_C_GetRom1stMachineCountPerType::Count' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineCountPerType, Temp_byte_Variable) == 0x000014, "Member 'BPFL_MachineSelect_C_GetRom1stMachineCountPerType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineCountPerType, Temp_int_Variable) == 0x000018, "Member 'BPFL_MachineSelect_C_GetRom1stMachineCountPerType::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineCountPerType, Temp_int_Variable_1) == 0x00001C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineCountPerType::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineCountPerType, Temp_int_Variable_2) == 0x000020, "Member 'BPFL_MachineSelect_C_GetRom1stMachineCountPerType::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineCountPerType, Temp_int_Variable_3) == 0x000024, "Member 'BPFL_MachineSelect_C_GetRom1stMachineCountPerType::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineCountPerType, Temp_int_Variable_4) == 0x000028, "Member 'BPFL_MachineSelect_C_GetRom1stMachineCountPerType::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineCountPerType, K2Node_Select_Default) == 0x00002C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineCountPerType::K2Node_Select_Default' has a wrong offset!");

// Function BPFL_MachineSelect.BPFL_MachineSelect_C.GetRom1stMachineIdByMachineId
// 0x0150 (0x0150 - 0x0000)
struct BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId final
{
public:
	EMachineId                                    InMachineID;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         OnestMAchineIndex;                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_7;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_8;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_9;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_10;                              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_11;                              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_12;                              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_13;                              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_14;                              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_15;                              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_16;                              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_17;                              // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_18;                              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_19;                              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_20;                              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_21;                              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_22;                              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_23;                              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_24;                              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_25;                              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_26;                              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_27;                              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_28;                              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_29;                              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_30;                              // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_31;                              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_32;                              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_33;                              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_34;                              // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_35;                              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_36;                              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_37;                              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_38;                              // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_39;                              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_40;                              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_41;                              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_42;                              // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_43;                              // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_44;                              // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_45;                              // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_46;                              // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_47;                              // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_48;                              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_49;                              // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_50;                              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_51;                              // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_52;                              // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_53;                              // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_54;                              // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_55;                              // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_56;                              // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_57;                              // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_58;                              // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_59;                              // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_60;                              // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_61;                              // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_62;                              // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_63;                              // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_64;                              // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_65;                              // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_66;                              // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_67;                              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_68;                              // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_69;                              // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_70;                              // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_71;                              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_72;                              // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_73;                              // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_74;                              // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_75;                              // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId) == 0x000008, "Wrong alignment on BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId");
static_assert(sizeof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId) == 0x000150, "Wrong size on BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, InMachineID) == 0x000000, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::InMachineID' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, __WorldContext) == 0x000008, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, OnestMAchineIndex) == 0x000010, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::OnestMAchineIndex' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable) == 0x000014, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_1) == 0x00001C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_2) == 0x000020, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_3) == 0x000024, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_4) == 0x000028, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_5) == 0x00002C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_6) == 0x000030, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_7) == 0x000034, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_7' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_8) == 0x000038, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_8' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_9) == 0x00003C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_9' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_10) == 0x000040, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_10' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_11) == 0x000044, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_11' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_12) == 0x000048, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_12' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_13) == 0x00004C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_13' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_14) == 0x000050, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_14' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_15) == 0x000054, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_15' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_16) == 0x000058, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_16' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_17) == 0x00005C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_17' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_18) == 0x000060, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_18' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_19) == 0x000064, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_19' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_20) == 0x000068, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_20' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_21) == 0x00006C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_21' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_22) == 0x000070, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_22' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_23) == 0x000074, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_23' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_24) == 0x000078, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_24' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_25) == 0x00007C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_25' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_26) == 0x000080, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_26' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_27) == 0x000084, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_27' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_28) == 0x000088, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_28' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_29) == 0x00008C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_29' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_30) == 0x000090, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_30' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_31) == 0x000094, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_31' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_32) == 0x000098, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_32' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_33) == 0x00009C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_33' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_34) == 0x0000A0, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_34' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_35) == 0x0000A4, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_35' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_36) == 0x0000A8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_36' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_37) == 0x0000AC, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_37' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_38) == 0x0000B0, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_38' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_39) == 0x0000B4, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_39' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_40) == 0x0000B8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_40' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_41) == 0x0000BC, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_41' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_42) == 0x0000C0, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_42' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_43) == 0x0000C4, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_43' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_44) == 0x0000C8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_44' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_45) == 0x0000CC, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_45' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_46) == 0x0000D0, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_46' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_47) == 0x0000D4, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_47' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_48) == 0x0000D8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_48' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_49) == 0x0000DC, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_49' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_50) == 0x0000E0, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_50' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_51) == 0x0000E4, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_51' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_52) == 0x0000E8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_52' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_53) == 0x0000EC, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_53' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_54) == 0x0000F0, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_54' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_55) == 0x0000F4, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_55' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_56) == 0x0000F8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_56' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_57) == 0x0000FC, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_57' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_58) == 0x000100, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_58' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_59) == 0x000104, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_59' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_60) == 0x000108, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_60' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_61) == 0x00010C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_61' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_62) == 0x000110, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_62' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_63) == 0x000114, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_63' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_64) == 0x000118, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_64' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_65) == 0x00011C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_65' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_66) == 0x000120, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_66' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_67) == 0x000124, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_67' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_68) == 0x000128, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_68' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_69) == 0x00012C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_69' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_70) == 0x000130, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_70' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_71) == 0x000134, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_71' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_72) == 0x000138, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_72' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_73) == 0x00013C, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_73' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_74) == 0x000140, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_74' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, Temp_int_Variable_75) == 0x000144, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::Temp_int_Variable_75' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId, K2Node_Select_Default) == 0x000148, "Member 'BPFL_MachineSelect_C_GetRom1stMachineIdByMachineId::K2Node_Select_Default' has a wrong offset!");

// Function BPFL_MachineSelect.BPFL_MachineSelect_C.GetRom1stMachineName
// 0x0218 (0x0218 - 0x0000)
struct BPFL_MachineSelect_C_GetRom1stMachineName final
{
public:
	int32                                         Rom1stIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   MachineNameText;                                   // 0x0010(0x0010)(Parm, OutParm)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0028(0x0010)()
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0010)()
	class FText                                   Temp_text_Variable_2;                              // 0x0048(0x0010)()
	class FText                                   Temp_text_Variable_3;                              // 0x0058(0x0010)()
	class FText                                   Temp_text_Variable_4;                              // 0x0068(0x0010)()
	class FText                                   Temp_text_Variable_5;                              // 0x0078(0x0010)()
	class FText                                   Temp_text_Variable_6;                              // 0x0088(0x0010)()
	class FText                                   Temp_text_Variable_7;                              // 0x0098(0x0010)()
	class FText                                   Temp_text_Variable_8;                              // 0x00A8(0x0010)()
	class FText                                   Temp_text_Variable_9;                              // 0x00B8(0x0010)()
	class FText                                   Temp_text_Variable_10;                             // 0x00C8(0x0010)()
	class FText                                   Temp_text_Variable_11;                             // 0x00D8(0x0010)()
	class FText                                   Temp_text_Variable_12;                             // 0x00E8(0x0010)()
	class FText                                   Temp_text_Variable_13;                             // 0x00F8(0x0010)()
	class FText                                   Temp_text_Variable_14;                             // 0x0108(0x0010)()
	class FText                                   Temp_text_Variable_15;                             // 0x0118(0x0010)()
	class FText                                   Temp_text_Variable_16;                             // 0x0128(0x0010)()
	class FText                                   Temp_text_Variable_17;                             // 0x0138(0x0010)()
	class FText                                   Temp_text_Variable_18;                             // 0x0148(0x0010)()
	class FText                                   Temp_text_Variable_19;                             // 0x0158(0x0010)()
	class FText                                   Temp_text_Variable_20;                             // 0x0168(0x0010)()
	class FText                                   Temp_text_Variable_21;                             // 0x0178(0x0010)()
	class FText                                   Temp_text_Variable_22;                             // 0x0188(0x0010)()
	class FText                                   Temp_text_Variable_23;                             // 0x0198(0x0010)()
	class FText                                   Temp_text_Variable_24;                             // 0x01A8(0x0010)()
	class FText                                   Temp_text_Variable_25;                             // 0x01B8(0x0010)()
	class FText                                   Temp_text_Variable_26;                             // 0x01C8(0x0010)()
	class FText                                   Temp_text_Variable_27;                             // 0x01D8(0x0010)()
	class FText                                   Temp_text_Variable_28;                             // 0x01E8(0x0010)()
	class FText                                   Temp_text_Variable_29;                             // 0x01F8(0x0010)()
	class FText                                   K2Node_Select_Default;                             // 0x0208(0x0010)()
};
static_assert(alignof(BPFL_MachineSelect_C_GetRom1stMachineName) == 0x000008, "Wrong alignment on BPFL_MachineSelect_C_GetRom1stMachineName");
static_assert(sizeof(BPFL_MachineSelect_C_GetRom1stMachineName) == 0x000218, "Wrong size on BPFL_MachineSelect_C_GetRom1stMachineName");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Rom1stIndex) == 0x000000, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Rom1stIndex' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, __WorldContext) == 0x000008, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, MachineNameText) == 0x000010, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::MachineNameText' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_int_Variable) == 0x000020, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable) == 0x000028, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_1) == 0x000038, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_2) == 0x000048, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_3) == 0x000058, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_4) == 0x000068, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_5) == 0x000078, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_6) == 0x000088, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_7) == 0x000098, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_8) == 0x0000A8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_9) == 0x0000B8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_10) == 0x0000C8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_11) == 0x0000D8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_12) == 0x0000E8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_13) == 0x0000F8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_14) == 0x000108, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_15) == 0x000118, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_15' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_16) == 0x000128, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_16' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_17) == 0x000138, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_17' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_18) == 0x000148, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_18' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_19) == 0x000158, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_19' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_20) == 0x000168, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_20' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_21) == 0x000178, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_21' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_22) == 0x000188, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_22' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_23) == 0x000198, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_23' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_24) == 0x0001A8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_24' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_25) == 0x0001B8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_25' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_26) == 0x0001C8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_26' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_27) == 0x0001D8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_27' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_28) == 0x0001E8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_28' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, Temp_text_Variable_29) == 0x0001F8, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::Temp_text_Variable_29' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetRom1stMachineName, K2Node_Select_Default) == 0x000208, "Member 'BPFL_MachineSelect_C_GetRom1stMachineName::K2Node_Select_Default' has a wrong offset!");

// Function BPFL_MachineSelect.BPFL_MachineSelect_C.GetTypeIndexFromRom1stId
// 0x0098 (0x0098 - 0x0000)
struct BPFL_MachineSelect_C_GetTypeIndexFromRom1stId final
{
public:
	int32                                         Rom1stId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         TypeIndex;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_7;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_8;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_9;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_10;                              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_11;                              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_12;                              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_13;                              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_14;                              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_15;                              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_16;                              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_17;                              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_18;                              // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_19;                              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_20;                              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_21;                              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_22;                              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_23;                              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_24;                              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_25;                              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_26;                              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_27;                              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_28;                              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_29;                              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_30;                              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId) == 0x000008, "Wrong alignment on BPFL_MachineSelect_C_GetTypeIndexFromRom1stId");
static_assert(sizeof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId) == 0x000098, "Wrong size on BPFL_MachineSelect_C_GetTypeIndexFromRom1stId");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Rom1stId) == 0x000000, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Rom1stId' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, __WorldContext) == 0x000008, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, TypeIndex) == 0x000010, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::TypeIndex' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable) == 0x000014, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_1) == 0x000018, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_2) == 0x00001C, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_3) == 0x000020, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_4) == 0x000024, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_5) == 0x000028, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_6) == 0x00002C, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_7) == 0x000030, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_7' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_8) == 0x000034, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_8' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_9) == 0x000038, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_9' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_10) == 0x00003C, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_10' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_11) == 0x000040, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_11' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_12) == 0x000044, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_12' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_13) == 0x000048, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_13' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_14) == 0x00004C, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_14' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_15) == 0x000050, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_15' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_16) == 0x000054, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_16' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_17) == 0x000058, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_17' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_18) == 0x00005C, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_18' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_19) == 0x000060, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_19' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_20) == 0x000064, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_20' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_21) == 0x000068, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_21' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_22) == 0x00006C, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_22' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_23) == 0x000070, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_23' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_24) == 0x000074, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_24' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_25) == 0x000078, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_25' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_26) == 0x00007C, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_26' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_27) == 0x000080, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_27' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_28) == 0x000084, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_28' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_29) == 0x000088, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_29' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, Temp_int_Variable_30) == 0x00008C, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::Temp_int_Variable_30' has a wrong offset!");
static_assert(offsetof(BPFL_MachineSelect_C_GetTypeIndexFromRom1stId, K2Node_Select_Default) == 0x000090, "Member 'BPFL_MachineSelect_C_GetTypeIndexFromRom1stId::K2Node_Select_Default' has a wrong offset!");

}

