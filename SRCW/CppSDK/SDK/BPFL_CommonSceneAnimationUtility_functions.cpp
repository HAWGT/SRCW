#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_CommonSceneAnimationUtility

#include "Basic.hpp"

#include "BPFL_CommonSceneAnimationUtility_classes.hpp"
#include "BPFL_CommonSceneAnimationUtility_parameters.hpp"


namespace SDK
{

// Function BPFL_CommonSceneAnimationUtility.BPFL_CommonSceneAnimationUtility_C.GetSceneDriverAnimationAsset
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDriverId                               In_DriverId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDriverPose                             In_Pose                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDataTable*                       DataTable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UAnimSequenceBase>*Anim                                                   (Parm, OutParm, HasGetValueTypeHash)
// double*                                 Time                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bSkipFacialBlend                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_CommonSceneAnimationUtility_C::GetSceneDriverAnimationAsset(EDriverId In_DriverId, EDriverPose In_Pose, class UDataTable* DataTable, class UObject* __WorldContext, TSoftObjectPtr<class UAnimSequenceBase>* Anim, double* Time, bool* bSkipFacialBlend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_CommonSceneAnimationUtility_C", "GetSceneDriverAnimationAsset");

	Params::BPFL_CommonSceneAnimationUtility_C_GetSceneDriverAnimationAsset Parms{};

	Parms.In_DriverId = In_DriverId;
	Parms.In_Pose = In_Pose;
	Parms.DataTable = DataTable;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Anim != nullptr)
		*Anim = Parms.Anim;

	if (Time != nullptr)
		*Time = Parms.Time;

	if (bSkipFacialBlend != nullptr)
		*bSkipFacialBlend = Parms.bSkipFacialBlend;
}


// Function BPFL_CommonSceneAnimationUtility.BPFL_CommonSceneAnimationUtility_C.LoadSceneDriverAnimationAssets
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ASceneDriver*>&            In_SceneDrivers                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UDataTable*                       DataTable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UObject*>*                 LoadAssets                                             (Parm, OutParm)

void UBPFL_CommonSceneAnimationUtility_C::LoadSceneDriverAnimationAssets(TArray<class ASceneDriver*>& In_SceneDrivers, class UDataTable* DataTable, class UObject* __WorldContext, TArray<class UObject*>* LoadAssets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_CommonSceneAnimationUtility_C", "LoadSceneDriverAnimationAssets");

	Params::BPFL_CommonSceneAnimationUtility_C_LoadSceneDriverAnimationAssets Parms{};

	Parms.In_SceneDrivers = std::move(In_SceneDrivers);
	Parms.DataTable = DataTable;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	In_SceneDrivers = std::move(Parms.In_SceneDrivers);

	if (LoadAssets != nullptr)
		*LoadAssets = std::move(Parms.LoadAssets);
}

}

